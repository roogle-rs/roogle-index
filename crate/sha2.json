{"root":"0:0:1698","crate_version":"0.10.6","includes_private":false,"index":{"1:11926:36141":{"id":"1:11926:36141","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:11928:5839":{"id":"1:11928:5839","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"6:11895:1493"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11929:5845":{"id":"1:11929:5845","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41272:179"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:41270:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9792:222","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9792:222","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11955:34946":{"id":"1:11955:34946","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"6:11878:419","self::pattern":"1:11618:16699"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11623:15501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11623:15501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11638:16705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:683-0:132:1673":{"id":"b:5:683-0:132:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2262:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:679:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:685:14925","5:686:27983","5:687:27984"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:2549:128":{"id":"1:2549:128","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"1:2520:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"b:1:2546-0:132:1673":{"id":"b:1:2546-0:132:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2520:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2516:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2549:128","1:2550:1472"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:12041:36164":{"id":"1:12041:36164","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4536:36164"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"1:43532:14980","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12025:36160":{"id":"1:12025:36160","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:11878:419","self::pattern":"1:11618:16699"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11623:15501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11623:15501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11638:16705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11972:34939":{"id":"1:11972:34939","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:11618:16699","`DoubleEndedIterator`":"1:7203:121","prim@char":"6:11878:419","str::split":"1:11966:34936"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"1:43251:5308","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11623:15501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11623:15501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11638:16705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11933:15795":{"id":"1:11933:15795","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9792:222","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9792:222","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:135":{"id":"0:135","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[89,9],"end":[89,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2262:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:136:423"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:80:668":{"id":"0:80:668","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[154,4],"end":[156,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:9080:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:9069:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:132:1673":{"id":"0:132:1673","crate_id":0,"name":"Sha512VarCore","span":{"filename":"src/core_api.rs","begin":[90,0],"end":[93,1]},"visibility":"public","docs":"Core block-level SHA-512 hasher with variable output size.\n\nSupports initialization only for 28, 32, 48, and 64 byte output sizes,\ni.e. 224, 256, 384, and 512 bits respectively.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:2699:228-0:132:1673","a:1:2682:220-0:132:1673","a:1:2739:5695-0:132:1673","a:1:8212:16665-0:132:1673","a:1:8213:16664-0:132:1673","b:1:2246-0:132:1673","b:1:2540-0:132:1673","b:1:2536-0:132:1673","b:1:2551-0:132:1673","b:1:3316-0:132:1673","b:1:2249-0:132:1673","b:1:2546-0:132:1673","b:5:683-0:132:1673","b:24:1171-0:132:1673","0:79","0:70","0:77","0:135","0:64","0:63","0:72","0:68","0:66"]}},"0:57:1838":{"id":"0:57:1838","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[60,4],"end":[68,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buffer",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Buffer","id":"4:328:1812","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}}}}],["out",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Output","id":"22:16:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3316-0:132:1673":{"id":"b:1:3316-0:132:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2689:5694","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3314:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3318:1485"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:46":{"id":"0:46","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[25,0],"end":[27,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"22:22:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:47:1828"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[113,0],"end":[115,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"22:33:1814","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:71:1832"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:77":{"id":"0:77","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[145,0],"end":[150,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"22:46:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:78:1851"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11918:11114":{"id":"1:11918:11114","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[95,0],"end":[95,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:357:1821","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2551-0:127:1672":{"id":"b:1:2551-0:127:1672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2510:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2520:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2554:128","1:2555:1471"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:69:1830":{"id":"0:69:1830","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[107,4],"end":[110,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["blocks",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"Block","id":"22:12:1810","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2554:128":{"id":"1:2554:128","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"1:31912:6015","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"1:11925:34864":{"id":"1:11925:34864","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11185:16706"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11940:34929":{"id":"1:11940:34929","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:11939:34928"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11962:11113":{"id":"1:11962:11113","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41272:179","prim@char":"6:11878:419","self::pattern":"1:11618:16699"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:41270:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11623:15501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11623:15501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11638:16705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11978:36147":{"id":"1:11978:36147","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:11618:16699","str::split":"1:11966:34936","prim@char":"6:11878:419","str::split_terminator":"1:11975:36146"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"1:43301:15047","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11623:15501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11623:15501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11638:16705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12012:36157":{"id":"1:12012:36157","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11946:36144":{"id":"1:11946:36144","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"1:43487:15055","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12040:16017":{"id":"1:12040:16017","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2248:1885":{"id":"1:2248:1885","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5-4:0:1652":{"id":"0:5-4:0:1652","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,17],"end":[54,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"digest","name":"digest","id":"4:0:1652","glob":false}},"1:11920:36139":{"id":"1:11920:36139","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5383:11061":{"id":"5:5383:11061","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7252:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7252:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11623:15501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11935:15796":{"id":"1:11935:15796","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9792:222","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9792:222","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2699:228-0:132:1673":{"id":"a:1:2699:228-0:132:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2699:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:12019:34947":{"id":"1:12019:34947","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:11878:419","self::pattern":"1:11618:16699"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:41270:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11623:15501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12038:16015":{"id":"1:12038:16015","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11993:1929":{"id":"1:11993:1929","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:11618:16699","`DoubleEndedIterator`":"1:7203:121","prim@char":"6:11878:419","str::matches":"1:11993:1929"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"1:43437:15053","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11623:15501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:100:1691":{"id":"0:100:1691","crate_id":0,"name":"Sha512_224","span":{"filename":"src/lib.rs","begin":[89,0],"end":[89,92]},"visibility":"public","docs":"SHA-512/224 hasher.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"CoreWrapper","id":"4:492:1664","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CtVariableCoreWrapper","id":"4:473:1665","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"U28","id":"24:2508:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"OidSha512_224","id":"0:425:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"1:11937:36142":{"id":"1:11937:36142","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"6:11884:1395","str::slice_mut_unchecked":"1:11938:36143","crate::ops::Index":"1:2978:16552"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:12043:16580":{"id":"1:12043:16580","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4537:16580"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"1:43541:14974","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3318:1485":{"id":"1:3318:1485","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"1:39214:14410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:127:1672":{"id":"0:127:1672","crate_id":0,"name":"Sha256VarCore","span":{"filename":"src/core_api.rs","begin":[18,0],"end":[21,1]},"visibility":"public","docs":"Core block-level SHA-256 hasher with variable output size.\n\nSupports initialization only for 28 and 32 byte output sizes,\ni.e. 224 and 256 bits respectively.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:2699:228-0:127:1672","a:1:2682:220-0:127:1672","a:1:2739:5695-0:127:1672","a:1:8212:16665-0:127:1672","a:1:8213:16664-0:127:1672","b:1:2246-0:127:1672","b:1:2540-0:127:1672","b:1:2536-0:127:1672","b:1:2551-0:127:1672","b:1:3316-0:127:1672","b:1:2249-0:127:1672","b:1:2546-0:127:1672","b:5:683-0:127:1672","b:24:1171-0:127:1672","0:52","0:46","0:48","0:50","0:61","0:59","0:45","0:54","0:130"]}},"1:11939:34928":{"id":"1:11939:34928","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:11940:34929"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12031:36162":{"id":"1:12031:36162","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:11878:419","self::pattern":"1:11618:16699"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11623:15501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11623:15501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11638:16705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:61":{"id":"0:61","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[78,0],"end":[83,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9105:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:62:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:2539:11107":{"id":"1:2539:11107","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2513:133"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2246-0:132:1673":{"id":"b:1:2246-0:132:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2689:5694","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2240:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2248:1885"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:2739:5695-0:132:1673":{"id":"a:1:2739:5695-0:132:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2739:5695","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:131:423":{"id":"0:131:423","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[17,9],"end":[17,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[17,9],"end":[17,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2262:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:131:423"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:2251:27982":{"id":"1:2251:27982","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6-4:358:1653":{"id":"0:6-4:358:1653","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,23],"end":[54,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"digest::Digest","name":"Digest","id":"4:358:1653","glob":false}},"1:11931:15794":{"id":"1:11931:15794","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41272:179"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:41270:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9792:222","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9792:222","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:96-0:127:1672":{"id":"0:96-0:127:1672","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[75,19],"end":[75,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"core_api::Sha256VarCore","name":"Sha256VarCore","id":"0:127:1672","glob":false}},"a:1:2682:220-0:127:1672":{"id":"a:1:2682:220-0:127:1672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2682:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:3316-0:127:1672":{"id":"b:1:3316-0:127:1672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2689:5694","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3314:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3318:1485"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:67:1829":{"id":"0:67:1829","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[102,4],"end":[102,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Eager","id":"25:77:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"b:1:2249-0:127:1672":{"id":"b:1:2249-0:127:1672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2689:5694","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2243:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2251:27982"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11952:34945":{"id":"1:11952:34945","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"6:11878:419","self::pattern":"1:11618:16699"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11623:15501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:64":{"id":"0:64","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[97,0],"end":[99,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"22:22:1811","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:65:1828"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:103:1697":{"id":"0:103:1697","crate_id":0,"name":"Sha512","span":{"filename":"src/lib.rs","begin":[95,0],"end":[95,84]},"visibility":"public","docs":"SHA-512 hasher.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"CoreWrapper","id":"4:492:1664","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CtVariableCoreWrapper","id":"4:473:1665","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"U64","id":"24:2616:1662","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"OidSha512","id":"0:393:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"1:11947:36145":{"id":"1:11947:36145","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"1:43497:15056","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:50":{"id":"0:50","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[33,0],"end":[39,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:330:1816","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:51:1830"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:0:1698":{"id":"0:0:1698","crate_id":0,"name":"sha2","span":{"filename":"src/lib.rs","begin":[1,0],"end":[95,84]},"visibility":"public","docs":"An implementation of the [SHA-2][1] cryptographic hash algorithms.\n\nThere are 6 standard algorithms specified in the SHA-2 standard: [`Sha224`],\n[`Sha256`], [`Sha512_224`], [`Sha512_256`], [`Sha384`], and [`Sha512`].\n\nAlgorithmically, there are only 2 core algorithms: SHA-256 and SHA-512.\nAll other algorithms are just applications of these with different initial\nhash values, and truncated to different digest bit lengths. The first two\nalgorithms in the list are based on SHA-256, while the last three on SHA-512.\n\n# Usage\n\n```rust\nuse hex_literal::hex;\nuse sha2::{Sha256, Sha512, Digest};\n\n// create a Sha256 object\nlet mut hasher = Sha256::new();\n\n// write input message\nhasher.update(b\"hello world\");\n\n// read hash digest and consume hasher\nlet result = hasher.finalize();\n\nassert_eq!(result[..], hex!(\"\n    b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\n\")[..]);\n\n// same for Sha512\nlet mut hasher = Sha512::new();\nhasher.update(b\"hello world\");\nlet result = hasher.finalize();\n\nassert_eq!(result[..], hex!(\"\n    309ecc489c12d6eb4cc40f50c902f2b4d0ed77ee511a7c7a9bcd3ca86d4cd86f\n    989dd35bc5ff499670da34255b45b0cfd830e81f605dcf7dc5542e93ae9cd76f\n\")[..]);\n```\n\nAlso see [RustCrypto/hashes][2] readme.\n\n[1]: https://en.wikipedia.org/wiki/SHA-2\n[2]: https://github.com/RustCrypto/hashes","links":{"`Sha256`":"0:99:1689","`Sha224`":"0:98:1687","`Sha512`":"0:103:1697","`Sha384`":"0:102:1695","`Sha512_256`":"0:101:1693","`Sha512_224`":"0:100:1691"},"attrs":["#![no_std]","#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\",\nhtml_favicon_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\")]","#![warn(missing_docs, rust_2018_idioms)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:5-4:0:1652","0:6-4:358:1653","0:96-0:127:1672","0:97-0:132:1673","0:98:1687","0:99:1689","0:100:1691","0:101:1693","0:102:1695","0:103:1697"],"is_stripped":false}},"1:12005:36153":{"id":"1:12005:36153","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:78:1851":{"id":"0:78:1851","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[147,4],"end":[149,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:9080:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:9069:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:8212:16665-0:132:1673":{"id":"a:1:8212:16665-0:132:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8212:16665","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2249-0:132:1673":{"id":"b:1:2249-0:132:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2689:5694","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2243:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2251:27982"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:56:939":{"id":"0:56:939","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[49,4],"end":[57,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["output_size",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:41414:210","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"InvalidOutputSize","id":"4:522:1822","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2682:220-0:132:1673":{"id":"a:1:2682:220-0:132:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2682:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:98:1687":{"id":"0:98:1687","crate_id":0,"name":"Sha224","span":{"filename":"src/lib.rs","begin":[85,0],"end":[85,84]},"visibility":"public","docs":"SHA-224 hasher.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"CoreWrapper","id":"4:492:1664","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CtVariableCoreWrapper","id":"4:473:1665","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"U28","id":"24:2508:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"OidSha224","id":"0:409:1680","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"1:11922:36140":{"id":"1:11922:36140","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:11920:36139"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11969:29467":{"id":"1:11969:29467","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"6:11878:419","self::pattern":"1:11618:16699"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"1:11441:5321","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11623:15501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:53:1832":{"id":"0:53:1832","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[42,4],"end":[42,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5254","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5254","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5254","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5254","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5254","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5254","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UTerm","id":"24:6363:5255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B1","id":"24:5724:5259","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"b:1:2540-0:132:1673":{"id":"b:1:2540-0:132:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2513:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2542:694"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11990:36149":{"id":"1:11990:36149","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:41270:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11623:15501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11623:15501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11638:16705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12036:16010":{"id":"1:12036:16010","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11943:14914":{"id":"1:11943:14914","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"1:43219:11904","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:683-0:127:1672":{"id":"b:5:683-0:127:1672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2262:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:679:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:685:14925","5:686:27983","5:687:27984"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:97-0:132:1673":{"id":"0:97-0:132:1673","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[75,34],"end":[75,47]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"core_api::Sha512VarCore","name":"Sha512VarCore","id":"0:132:1673","glob":false}},"1:11919:36138":{"id":"1:11919:36138","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:71:1832":{"id":"0:71:1832","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[114,4],"end":[114,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5254","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5254","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5254","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5254","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5254","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5254","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5254","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UTerm","id":"24:6363:5255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B1","id":"24:5724:5259","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"b:1:2546-0:127:1672":{"id":"b:1:2546-0:127:1672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2520:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2516:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2549:128","1:2550:1472"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:12011:36156":{"id":"1:12011:36156","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:8212:16665-0:127:1672":{"id":"a:1:8212:16665-0:127:1672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8212:16665","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:11975:36146":{"id":"1:11975:36146","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:11618:16699","str::split":"1:11966:34936","prim@char":"6:11878:419","`DoubleEndedIterator`":"1:7203:121","str::rsplit_terminator":"1:11978:36147"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"1:43283:15046","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11623:15501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5401:16013":{"id":"5:5401:16013","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12040:16017"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7252:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2551-0:132:1673":{"id":"b:1:2551-0:132:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2510:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2520:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2554:128","1:2555:1471"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:72":{"id":"0:72","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[117,0],"end":[143,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:341:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:73:1833","0:74:939","0:75:1838"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11945:29471":{"id":"1:11945:29471","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:11944:29472"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"1:43516:15058","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11942:15069":{"id":"1:11942:15069","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"6:11878:419"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"1:43209:15041","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11916":{"id":"1:11916","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["1:11917:811","1:11918:11114","1:11919:36138","1:11920:36139","1:11922:36140","1:11925:34864","1:11926:36141","1:11927:314","1:11928:5839","1:11929:5845","1:11931:15794","1:11933:15795","1:11935:15796","1:11937:36142","1:11938:36143","1:11939:34928","1:11940:34929","1:11941:15060","1:11942:15069","1:11943:14914","1:11944:29472","1:11945:29471","1:11946:36144","1:11947:36145","1:11948:29545","1:11949:29213","1:11952:34945","1:11955:34946","1:11958:11152","1:11962:11113","1:11966:34936","1:11969:29467","1:11972:34939","1:11975:36146","1:11978:36147","1:11981:34941","1:11984:34943","1:11987:36148","1:11990:36149","1:11993:1929","1:11996:36150","1:11999:36151","1:12002:36152","1:12005:36153","1:12007:36154","1:12009:36155","1:12011:36156","1:12012:36157","1:12013:36158","1:12016:36159","1:12019:34947","1:12022:34948","1:12025:36160","1:12028:36161","1:12031:36162","1:12034:36163","1:12036:16010","1:12037:16011","1:12038:16015","1:12039:16016","1:12040:16017","1:12041:36164","1:12043:16580","1:12044:36165"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:8213:16664-0:127:1672":{"id":"a:1:8213:16664-0:127:1672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8213:16664","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:5398:36829":{"id":"5:5398:36829","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:279:1975","`String`":"5:7252:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:279:1975","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7001:14303","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7252:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11917:811":{"id":"1:11917:811","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"6:11878:419"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:51:1830":{"id":"0:51:1830","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[35,4],"end":[38,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["blocks",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"Block","id":"22:12:1810","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11948:29545":{"id":"1:11948:29545","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"1:43525:15059","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11941:15060":{"id":"1:11941:15060","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"6:11878:419"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"1:43203:15040","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2555:1471":{"id":"1:2555:1471","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:41414:210","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"1:2520:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11938:36143":{"id":"1:11938:36143","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"6:11884:1395","crate::ops::IndexMut":"1:2982:16553","str::slice_unchecked":"1:11937:36142"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:12009:36155":{"id":"1:12009:36155","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11999:36151":{"id":"1:11999:36151","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:11618:16699","`DoubleEndedIterator`":"1:7203:121","prim@char":"6:11878:419","str::rmatch_indices":"1:12002:36152"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"1:43383:15050","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11623:15501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12037:16011":{"id":"1:12037:16011","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39428:29129","Self::is_ascii":"1:12036:16010"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:41270:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"AsciiChar","id":"1:39428:29129","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:65:1828":{"id":"0:65:1828","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[98,4],"end":[98,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5254","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5254","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5254","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5254","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5254","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5254","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5254","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5254","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UTerm","id":"24:6363:5255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B1","id":"24:5724:5259","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"0:74:939":{"id":"0:74:939","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[121,4],"end":[131,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["output_size",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:41414:210","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"InvalidOutputSize","id":"4:522:1822","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:68":{"id":"0:68","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[105,0],"end":[111,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:330:1816","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:69:1830"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2246-0:127:1672":{"id":"b:1:2246-0:127:1672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2689:5694","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2240:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2248:1885"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:99:1689":{"id":"0:99:1689","crate_id":0,"name":"Sha256","span":{"filename":"src/lib.rs","begin":[87,0],"end":[87,84]},"visibility":"public","docs":"SHA-256 hasher.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"CoreWrapper","id":"4:492:1664","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CtVariableCoreWrapper","id":"4:473:1665","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"U32","id":"24:2520:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"OidSha256","id":"0:361:1674","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"1:11958:11152":{"id":"1:11958:11152","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41272:179","prim@char":"6:11878:419","self::pattern":"1:11618:16699"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:41270:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11623:15501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2540-0:127:1672":{"id":"b:1:2540-0:127:1672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2513:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2542:694"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:54":{"id":"0:54","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[45,0],"end":[69,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:341:1817","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:55:1833","0:56:939","0:57:1838"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:102:1695":{"id":"0:102:1695","crate_id":0,"name":"Sha384","span":{"filename":"src/lib.rs","begin":[93,0],"end":[93,84]},"visibility":"public","docs":"SHA-384 hasher.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"CoreWrapper","id":"4:492:1664","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CtVariableCoreWrapper","id":"4:473:1665","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"U48","id":"24:2568:1661","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"OidSha384","id":"0:377:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"1:11981:34941":{"id":"1:11981:34941","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"6:11878:419","self::pattern":"1:11618:16699","str::rsplitn":"1:11984:34943"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"1:43337:5306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11623:15501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:685:14925":{"id":"5:685:14925","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"5:5397:36828":{"id":"5:5397:36828","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7252:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7252:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:136:423":{"id":"0:136:423","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[89,9],"end":[89,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11944:29472":{"id":"1:11944:29472","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:11945:29471"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"1:43507:15057","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"24:1173:186":{"id":"24:1173:186","crate_id":24,"name":"Output","span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.16.0/src/type_operators.rs","begin":[35,4],"end":[35,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"1:11996:36150":{"id":"1:11996:36150","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:11618:16699","`DoubleEndedIterator`":"1:7203:121","prim@char":"6:11878:419","str::matches":"1:11993:1929"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"1:43455:15054","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11623:15501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11623:15501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11638:16705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:60:1851":{"id":"0:60:1851","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[73,4],"end":[75,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:9080:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:9069:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:49:1829":{"id":"0:49:1829","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[30,4],"end":[30,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Eager","id":"25:77:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"b:24:1171-0:132:1673":{"id":"b:24:1171-0:132:1673","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.16.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"24:1168:5393","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["24:1173:186"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:12013:36158":{"id":"1:12013:36158","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"6:11878:419","self::pattern":"1:11618:16699"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11623:15501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11623:15501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:11643:16704","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2536-0:132:1673":{"id":"b:1:2536-0:132:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2513:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2510:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2539:11107"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5381":{"id":"5:5381","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5382:36825","5:5383:11061","5:5386:36826","5:5389:36827","5:5397:36828","5:5398:36829","5:5399:16643","5:5400:16012","5:5401:16013"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:12022:34948":{"id":"1:12022:34948","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:11878:419","self::pattern":"1:11618:16699"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:41270:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11623:15501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11623:15501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11638:16705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:47:1828":{"id":"0:47:1828","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[26,4],"end":[26,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5254","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5254","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5254","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5254","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5254","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5254","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5254","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UTerm","id":"24:6363:5255","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B1","id":"24:5724:5259","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5258","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"0:62:668":{"id":"0:62:668","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[80,4],"end":[82,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:9080:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:9069:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2699:228-0:127:1672":{"id":"a:1:2699:228-0:127:1672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2699:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:1:8213:16664-0:132:1673":{"id":"a:1:8213:16664-0:132:1673","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8213:16664","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:686:27983":{"id":"5:686:27983","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[41,0],"end":[43,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"22:33:1814","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:53:1832"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:59":{"id":"0:59","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[71,0],"end":[76,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"22:46:1809","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:60:1851"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:66":{"id":"0:66","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[101,0],"end":[103,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:332:1813","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:67:1829"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:101:1693":{"id":"0:101:1693","crate_id":0,"name":"Sha512_256","span":{"filename":"src/lib.rs","begin":[91,0],"end":[91,92]},"visibility":"public","docs":"SHA-512/256 hasher.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"CoreWrapper","id":"4:492:1664","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CtVariableCoreWrapper","id":"4:473:1665","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"U32","id":"24:2520:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"OidSha512_256","id":"0:441:1684","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"1:2542:694":{"id":"1:2542:694","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:45":{"id":"0:45","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[23,0],"end":[23,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:357:1821","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11984:34943":{"id":"1:11984:34943","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"6:11878:419","str::splitn":"1:11981:34941","self::pattern":"1:11618:16699"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"1:43355:5302","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11623:15501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11623:15501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11638:16705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11987:36148":{"id":"1:11987:36148","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:41270:181","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11623:15501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12016:36159":{"id":"1:12016:36159","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:11878:419","self::pattern":"1:11618:16699"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11623:15501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12044:36165":{"id":"1:12044:36165","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4534:36165"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"1:43550:14979","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5386:36826":{"id":"5:5386:36826","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7252:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7252:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11623:15501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:687:27984":{"id":"5:687:27984","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:55:1833":{"id":"0:55:1833","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[46,4],"end":[46,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"resolved_path","inner":{"name":"TruncSide","id":"4:512:1815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}},"1:12039:16016":{"id":"1:12039:16016","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:24:1171-0:127:1672":{"id":"b:24:1171-0:127:1672","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.16.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"24:1168:5393","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["24:1173:186"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:75:1838":{"id":"0:75:1838","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[134,4],"end":[142,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buffer",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Buffer","id":"4:328:1812","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}}}}],["out",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Output","id":"22:16:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12007:36154":{"id":"1:12007:36154","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2739:5695-0:127:1672":{"id":"a:1:2739:5695-0:127:1672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2739:5695","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:5400:16012":{"id":"5:5400:16012","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12039:16016"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7252:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12034:36163":{"id":"1:12034:36163","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:11579:127","`FromStr`":"1:11578:16384"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:41414:210","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"1:11578:16384","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:11578:16384","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11949:29213":{"id":"1:11949:29213","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"6:11878:419","self::pattern":"1:11618:16699"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11623:15501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5382:36825":{"id":"5:5382:36825","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:279:1975","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7001:14303","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:279:1975","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7001:14303","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:48":{"id":"0:48","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[29,0],"end":[31,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:332:1813","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:49:1829"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:79":{"id":"0:79","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[152,0],"end":[157,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9105:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:80:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11927:314":{"id":"1:11927:314","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:11928:5839","`u8`":"6:11895:1493"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2536-0:127:1672":{"id":"b:1:2536-0:127:1672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2513:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2510:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1672","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2539:11107"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11966:34936":{"id":"1:11966:34936","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:11618:16699","`DoubleEndedIterator`":"1:7203:121","prim@char":"6:11878:419","str::split_whitespace":"1:11944:29472","str::rsplit":"1:11972:34939"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"1:43233:5304","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11623:15501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12028:36161":{"id":"1:12028:36161","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:11878:419","self::pattern":"1:11618:16699"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11623:15501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5389:36827":{"id":"5:5389:36827","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7252:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7252:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:73:1833":{"id":"0:73:1833","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[118,4],"end":[118,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"resolved_path","inner":{"name":"TruncSide","id":"4:512:1815","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}},"5:5399:16643":{"id":"5:5399:16643","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7252:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7252:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:12002:36152":{"id":"1:12002:36152","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:11618:16699","`DoubleEndedIterator`":"1:7203:121","prim@char":"6:11878:419","str::match_indices":"1:11999:36151"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"1:43401:15051","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11623:15501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11623:15501","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11638:16705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2550:1472":{"id":"1:2550:1472","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:41414:210","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"1:2520:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"1:40162:14992":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"18:1787:15183":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"18:13516:12615":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"24:5746:5256":{"crate_id":24,"path":["typenum","int","PInt"],"kind":"struct"},"7:5857:13872":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"7:6116:13978":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:3972:17337":{"crate_id":6,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"18:9380:23908":{"crate_id":18,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:2690:11069":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"17:2524:12754":{"crate_id":17,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"7:1539:13288":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"7:6700:14074":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:43956:15088":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:43497:15056":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:8212:14890":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"18:13041:12492":{"crate_id":18,"path":["object","pe","Guid"],"kind":"struct"},"24:1111:17042":{"crate_id":24,"path":["typenum","private","IsNotEqualPrivate"],"kind":"trait"},"1:46678:14627":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:43654:15067":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:8633:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"19:671:15176":{"crate_id":19,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:7697:12780":{"crate_id":17,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"18:1034:15182":{"crate_id":18,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:25739:14336":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:8157:15438":{"crate_id":6,"path":["std","net","tcp","Incoming"],"kind":"struct"},"18:9453:23910":{"crate_id":18,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:2161:16520":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"18:12522:12312":{"crate_id":18,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:480:11548":{"crate_id":6,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"7:4478:13533":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"18:13324:12562":{"crate_id":18,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:12214:151":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"6:8334:14257":{"crate_id":6,"path":["std","path","Prefix"],"kind":"enum"},"24:1168:5393":{"crate_id":24,"path":["typenum","type_operators","Same"],"kind":"trait"},"21:11:17019":{"crate_id":21,"path":["blobby","BlobIterator"],"kind":"struct"},"7:4865:13679":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"18:9566:15195":{"crate_id":18,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"6:8384:5969":{"crate_id":6,"path":["std","path","State"],"kind":"enum"},"1:3194:16559":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"18:9683:15214":{"crate_id":18,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"18:8310:23888":{"crate_id":18,"path":["object","common","SectionKind"],"kind":"enum"},"18:13033:12491":{"crate_id":18,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"18:10545:11983":{"crate_id":18,"path":["object","read","pe","export","Export"],"kind":"struct"},"6:8138:11904":{"crate_id":6,"path":["std","io","Bytes"],"kind":"struct"},"1:41321:11118":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"18:8718:11899":{"crate_id":18,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:20441:27986":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"6:11088:14279":{"crate_id":6,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"1:43203:15040":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:2504:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:9333:145":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"27:0:1700":{"crate_id":27,"path":["cpufeatures"],"kind":"module"},"6:4255:15398":{"crate_id":6,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:7281:159":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"5:1462:15480":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:41787:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"24:835:17035":{"crate_id":24,"path":["typenum","private","PrivateIntegerAdd"],"kind":"trait"},"6:3938:17336":{"crate_id":6,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:7467:14845":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:3154:135":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:45097:14592":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:42542:15035":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"18:13367:12574":{"crate_id":18,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:9116:11179":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"15:215:14864":{"crate_id":15,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:5385:15407":{"crate_id":6,"path":["std","process","Command"],"kind":"struct"},"1:47301:5960":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:6409:11578":{"crate_id":6,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:39978:14542":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:41221:14889":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:45398:14603":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:1731:16531":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"5:7055:11119":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:6485:17430":{"crate_id":6,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"18:12902:12442":{"crate_id":18,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:6558:14807":{"crate_id":17,"path":["gimli","read","line","LineRows"],"kind":"struct"},"6:11899:1489":{"crate_id":6,"path":["std","u128"],"kind":"primitive"},"1:43541:14974":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"18:11011:12017":{"crate_id":18,"path":["object","read","CodeView"],"kind":"struct"},"6:10699:119":{"crate_id":6,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:22929:14335":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"5:4365:11560":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"18:12915:12449":{"crate_id":18,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"4:291:5273":{"crate_id":4,"path":["digest","core_api","wrapper","CoreProxy"],"kind":"trait"},"1:4783:33646":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"12:1634:11546":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"18:13309:12560":{"crate_id":18,"path":["object","pe","ImageImportByName"],"kind":"struct"},"5:1421:15358":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:49274:16771":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"7:5935:13922":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:2786:12765":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:4413:17361":{"crate_id":6,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"24:1276:5356":{"crate_id":24,"path":["typenum","type_operators","Gcd"],"kind":"trait"},"18:11355:12078":{"crate_id":18,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:11032:14288":{"crate_id":6,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"1:21610:14957":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"12:1847:11622":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:8129:15334":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:7652:198":{"crate_id":17,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:40594:14543":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:1745:14306":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:41414:210":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"6:6085:11571":{"crate_id":6,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"0:99:1689":{"crate_id":0,"path":["sha2","Sha256"],"kind":"typedef"},"1:40546:15018":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"18:13842:12718":{"crate_id":18,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:3932:11560":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"0:102:1695":{"crate_id":0,"path":["sha2","Sha384"],"kind":"typedef"},"12:1879:14878":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"1:40191:14997":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"24:785:17064":{"crate_id":24,"path":["typenum","private","Trim"],"kind":"trait"},"17:5104:12828":{"crate_id":17,"path":["gimli","constants","DwRle"],"kind":"struct"},"18:10416:15250":{"crate_id":18,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"22:12:1810":{"crate_id":22,"path":["crypto_common","Block"],"kind":"typedef"},"16:198:22925":{"crate_id":16,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:1628:588":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"18:12592:12320":{"crate_id":18,"path":["object","macho","Nlist32"],"kind":"struct"},"18:12510:12311":{"crate_id":18,"path":["object","macho","IdentCommand"],"kind":"struct"},"18:9907:11933":{"crate_id":18,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:10182:5309":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:4575:14056":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"10:388:22827":{"crate_id":10,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:1594:14878":{"crate_id":6,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:11678:11599":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:8261:14043":{"crate_id":6,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"18:11785:12175":{"crate_id":18,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"7:5843:13871":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"15:165:22913":{"crate_id":15,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"5:5034:11633":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"24:2568:1661":{"crate_id":24,"path":["typenum","generated","consts","U48"],"kind":"typedef"},"0:101:1693":{"crate_id":0,"path":["sha2","Sha512_256"],"kind":"typedef"},"18:13639:12665":{"crate_id":18,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"24:0:1818":{"crate_id":24,"path":["typenum"],"kind":"module"},"17:4540:12811":{"crate_id":17,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:4853:17387":{"crate_id":6,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:20652:16759":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"18:9577:11920":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:2448:12751":{"crate_id":17,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"5:3774:11603":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:7509:12786":{"crate_id":17,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"12:1866:14876":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"5:782:11606":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:41465:5301":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:9258:15502":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:9368:11383":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"5:1227:15351":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:12263:192":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"6:8915:15448":{"crate_id":6,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:45019:14589":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:1914:14313":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:44007:122":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"18:11813:12182":{"crate_id":18,"path":["object","macho","FatHeader"],"kind":"struct"},"6:9372:129":{"crate_id":6,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:43832:15079":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:2510:149":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"6:2386:17168":{"crate_id":6,"path":["std","io"],"kind":"module"},"1:32017:11076":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"6:7934:15432":{"crate_id":6,"path":["std","io","error","Custom"],"kind":"struct"},"7:4999:13752":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:20662:16519":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"7:7520:14185":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"19:690:14679":{"crate_id":19,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"18:13159:12520":{"crate_id":18,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"6:11876:371":{"crate_id":6,"path":["std","bool"],"kind":"primitive"},"18:11163:12032":{"crate_id":18,"path":["object","archive","AixHeader"],"kind":"struct"},"7:5988:13947":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:11369:15395":{"crate_id":6,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"18:11391:12085":{"crate_id":18,"path":["object","elf","Sym64"],"kind":"struct"},"17:5594:12777":{"crate_id":17,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"12:991:14844":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:2694:109":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:8801:28070":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"18:8283:23887":{"crate_id":18,"path":["object","common","BinaryFormat"],"kind":"enum"},"7:4851:13671":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:10223:5306":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:8482:14266":{"crate_id":6,"path":["std","path","Ancestors"],"kind":"struct"},"18:12536:12313":{"crate_id":18,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:6146:194":{"crate_id":17,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:11689:16713":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:6307:12771":{"crate_id":17,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:6757:17439":{"crate_id":6,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:11889:643":{"crate_id":6,"path":["std","f64"],"kind":"primitive"},"19:113:27740":{"crate_id":19,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:8638:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:3446:12798":{"crate_id":17,"path":["gimli","arch","RiscV"],"kind":"struct"},"6:7851:15430":{"crate_id":6,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:3815:12802":{"crate_id":17,"path":["gimli","constants","DwUt"],"kind":"struct"},"5:4335:11628":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"6:7805:14888":{"crate_id":6,"path":["std","fs","Permissions"],"kind":"struct"},"1:21224:16758":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"23:403:1865":{"crate_id":23,"path":["generic_array","GenericArray"],"kind":"struct"},"18:9068:38940":{"crate_id":18,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:4327:12806":{"crate_id":17,"path":["gimli","constants","DwAt"],"kind":"struct"},"5:2904:14925":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"18:9670:15213":{"crate_id":18,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:5920:14754":{"crate_id":17,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"7:4667:13589":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"7:4377:13485":{"crate_id":7,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"7:4784:13644":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:43029:5298":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:6321:15301":{"crate_id":17,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"6:5686:15409":{"crate_id":6,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"5:7041:34618":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"7:1532:13286":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:11024:37539":{"crate_id":6,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:6662:14811":{"crate_id":17,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"18:9853:15220":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"19:538:11785":{"crate_id":19,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"6:3932:17335":{"crate_id":6,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"0:98:1687":{"crate_id":0,"path":["sha2","Sha224"],"kind":"typedef"},"17:2642:12759":{"crate_id":17,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"6:11051:14280":{"crate_id":6,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"18:11544:12110":{"crate_id":18,"path":["object","elf","Versym"],"kind":"struct"},"6:11234:14916":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:2789:16541":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"7:4653:13588":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"6:10048:15459":{"crate_id":6,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:5557:12772":{"crate_id":17,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"4:427:1969":{"crate_id":4,"path":["digest","XofReader"],"kind":"trait"},"17:6460:12774":{"crate_id":17,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"7:4743:13621":{"crate_id":7,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"7:7497:14179":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:42789:15038":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:9571:11669":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"24:1221:5395":{"crate_id":24,"path":["typenum","type_operators","IsEqual"],"kind":"trait"},"6:11881:1049":{"crate_id":6,"path":["std","pointer"],"kind":"primitive"},"23:260:5419":{"crate_id":23,"path":["generic_array","sequence","GenericSequence"],"kind":"trait"},"24:654:5348":{"crate_id":24,"path":["typenum","marker_traits","PowerOfTwo"],"kind":"trait"},"6:11305:11595":{"crate_id":6,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:46258:14623":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:41397:16670":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:20896:14314":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:20696:16765":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"6:6236:206":{"crate_id":6,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"6:4563:17336":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"18:12403:12289":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"12:359:11539":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:9095:15456":{"crate_id":6,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"24:6363:5255":{"crate_id":24,"path":["typenum","uint","UTerm"],"kind":"struct"},"1:40102:5316":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"18:9228:38935":{"crate_id":18,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:40182:14995":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"5:7010:11119":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"18:11879:12193":{"crate_id":18,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:2404:12749":{"crate_id":17,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:3464:17314":{"crate_id":6,"path":["std","io","BufRead"],"kind":"trait"},"7:6553:14015":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"24:1131:17043":{"crate_id":24,"path":["typenum","private","IsGreaterOrEqualPrivate"],"kind":"trait"},"17:4789:12818":{"crate_id":17,"path":["gimli","constants","DwCc"],"kind":"struct"},"18:1978:15187":{"crate_id":18,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"6:1583:14876":{"crate_id":6,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:5910:11563":{"crate_id":6,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"7:7485:14177":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"16:180:22924":{"crate_id":16,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"22:36:17082":{"crate_id":22,"path":["crypto_common","KeySizeUser"],"kind":"trait"},"6:1783:15372":{"crate_id":6,"path":["std","env","Vars"],"kind":"struct"},"17:2808:12766":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:9069:210":{"crate_id":1,"path":["core","fmt","Result"],"kind":"typedef"},"6:4902:17393":{"crate_id":6,"path":["std","panic","always_abort"],"kind":"function"},"17:4445:12808":{"crate_id":17,"path":["gimli","constants","DwAte"],"kind":"struct"},"18:12959:12480":{"crate_id":18,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"18:10681:14710":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"6:11827:15475":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"7:488:13211":{"crate_id":7,"path":["libc","unix","timeval"],"kind":"struct"},"18:13399:12585":{"crate_id":18,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"7:494:13214":{"crate_id":7,"path":["libc","unix","timespec"],"kind":"struct"},"18:13812:12713":{"crate_id":18,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"18:13194:12530":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:21335:27993":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:5499:13964":{"crate_id":6,"path":["std","process","exit"],"kind":"function"},"17:8090:14859":{"crate_id":17,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:9964:5301":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:30358:29646":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"6:8789:15445":{"crate_id":6,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"18:10691:24007":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"6:4573:14054":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"6:7690:15425":{"crate_id":6,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:8835:17436":{"crate_id":6,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"24:1190:5347":{"crate_id":24,"path":["typenum","type_operators","Cmp"],"kind":"trait"},"1:12595:1611":{"crate_id":1,"path":["core","core_arch","arch","x86_64"],"kind":"module"},"17:8256:13016":{"crate_id":17,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"18:10897:12013":{"crate_id":18,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:1635:11063":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:42029:11178":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"18:8598:23897":{"crate_id":18,"path":["object","common","SymbolFlags"],"kind":"enum"},"18:9545:11891":{"crate_id":18,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"6:2866:210":{"crate_id":6,"path":["std","io","error","Result"],"kind":"typedef"},"4:421:1967":{"crate_id":4,"path":["digest","FixedOutput"],"kind":"trait"},"1:43988:14288":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:40584:11665":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"6:11192:14290":{"crate_id":6,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:11171:5285":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"24:1051:17039":{"crate_id":24,"path":["typenum","private","IsEqualPrivate"],"kind":"trait"},"18:12388:12285":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"5:2406:14297":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"7:5065:13785":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:10819:15425":{"crate_id":6,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"7:4499:13544":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"24:621:1819":{"crate_id":24,"path":["typenum","marker_traits","Unsigned"],"kind":"trait"},"1:20876:16755":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"18:0:1961":{"crate_id":18,"path":["object"],"kind":"module"},"12:1144:15357":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:44167:195":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"7:1514:13278":{"crate_id":7,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"4:328:1812":{"crate_id":4,"path":["digest","core_api","Buffer"],"kind":"typedef"},"6:10135:17418":{"crate_id":6,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"5:4136:11560":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"18:9895:15226":{"crate_id":18,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:31952:14971":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"6:7859:14880":{"crate_id":6,"path":["std","io","cursor","Cursor"],"kind":"struct"},"7:1682:13388":{"crate_id":7,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"5:3520:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:6535:11533":{"crate_id":17,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"12:1561:15360":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:31912:6015":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:4378:11658":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:42534:11386":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:21837:14964":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:40602:15024":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:45976:14618":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:2777:12908":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"7:62:17473":{"crate_id":7,"path":["libc","unix","DIR"],"kind":"enum"},"7:4719:13611":{"crate_id":7,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:39234:12949":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"1:44265:15100":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:39874:14541":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"8:79:22819":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:6793:14826":{"crate_id":17,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:47132:14632":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"19:531:14673":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:39255:14411":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"18:10015:15231":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:6361:12845":{"crate_id":17,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:47312:11008":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"7:7275:14175":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"24:783:17033":{"crate_id":24,"path":["typenum","private","InternalMarker"],"kind":"trait"},"6:3134:37527":{"crate_id":6,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:39959:16604":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:9070:11176":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"18:9748:11925":{"crate_id":18,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"18:8909:11904":{"crate_id":18,"path":["object","read","util","Bytes"],"kind":"struct"},"18:420:11854":{"crate_id":18,"path":["object","read","any","Section"],"kind":"struct"},"6:3246:15390":{"crate_id":6,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:1665:1087":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"18:12331:12278":{"crate_id":18,"path":["object","macho","UuidCommand"],"kind":"struct"},"18:13689:12677":{"crate_id":18,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:643:17242":{"crate_id":6,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"5:1980:14880":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"18:13385:12578":{"crate_id":18,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"7:6724:14086":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"7:6057:13966":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"7:1519:13280":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:5616:14723":{"crate_id":17,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:39175:5291":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"6:11159:14909":{"crate_id":6,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:4728:12816":{"crate_id":17,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:11406:15052":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"5:3752:11541":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"7:6755:14113":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"18:12372:12283":{"crate_id":18,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"5:5816:11633":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"6:8231:15438":{"crate_id":6,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"7:547:13248":{"crate_id":7,"path":["libc","unix","pollfd"],"kind":"struct"},"12:1126:15356":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:7029:14839":{"crate_id":17,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"4:522:1822":{"crate_id":4,"path":["digest","InvalidOutputSize"],"kind":"struct"},"1:43209:15041":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"15:31:15338":{"crate_id":15,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:43383:15050":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:6254:12840":{"crate_id":17,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"5:3123:14876":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:22350:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"7:1752:13417":{"crate_id":7,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:7317:38929":{"crate_id":17,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:41079:155":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:2760:12907":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:5067:191":{"crate_id":6,"path":["std","path","PathBuf"],"kind":"struct"},"19:548:141":{"crate_id":19,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"7:4439:13516":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:7077:23835":{"crate_id":17,"path":["gimli","read","op","DieReference"],"kind":"enum"},"5:7349:11643":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:6442:14796":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:10928:1979":{"crate_id":6,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"7:6545:14010":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"5:2907:14300":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"12:326:11537":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:6684:29647":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"5:1381:11119":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:43797:15074":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:7572:38927":{"crate_id":17,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"5:6595:11648":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"5:3116:5300":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"15:221:13092":{"crate_id":15,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:2513:133":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:4809:795":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:2704:5336":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"6:11903:13":{"crate_id":6,"path":["std","fn"],"kind":"primitive"},"6:11885:1475":{"crate_id":6,"path":["std","tuple"],"kind":"primitive"},"19:564:11787":{"crate_id":19,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:40349:15015":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"18:8420:23891":{"crate_id":18,"path":["object","common","SymbolScope"],"kind":"enum"},"6:618:15364":{"crate_id":6,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:5950:14948":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:4434:11190":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:4256:15496":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:45818:14616":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"18:12799:12356":{"crate_id":18,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:39065:198":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"18:10026:15232":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"12:2219:14937":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:2819:16546":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:2378:12748":{"crate_id":17,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:6621:15415":{"crate_id":6,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"18:11821:12184":{"crate_id":18,"path":["object","macho","FatArch32"],"kind":"struct"},"24:814:17052":{"crate_id":24,"path":["typenum","private","PrivateAnd"],"kind":"trait"},"24:613:182":{"crate_id":24,"path":["typenum","marker_traits","Ord"],"kind":"trait"},"1:43532:14980":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"18:3266:15190":{"crate_id":18,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:43811:16720":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:7468:15472":{"crate_id":6,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"18:13433:12593":{"crate_id":18,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:6474:12791":{"crate_id":17,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"5:2188:14932":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:11892:743":{"crate_id":6,"path":["std","i32"],"kind":"primitive"},"1:41185:29568":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:43219:11904":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"18:12358:12280":{"crate_id":18,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"7:5058:13782":{"crate_id":7,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"18:9628:15208":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:44202:15517":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:4680:17349":{"crate_id":6,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"12:840:15347":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:4175:15397":{"crate_id":6,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"7:4803:13652":{"crate_id":7,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"22:54:17087":{"crate_id":22,"path":["crypto_common","InnerInit"],"kind":"trait"},"5:7277:15491":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"7:1546:13291":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"6:8144:5304":{"crate_id":6,"path":["std","io","Split"],"kind":"struct"},"1:40575:15023":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:2895:117":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:6164:14785":{"crate_id":17,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:2831:11559":{"crate_id":6,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"5:7206:29578":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:1598:1361":{"crate_id":1,"path":["core","mem","size_of"],"kind":"function"},"1:42036:11177":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:12503:16750":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"6:5556:206":{"crate_id":6,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"7:4941:13727":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:22251:174":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"18:9265:15195":{"crate_id":18,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"19:491:14672":{"crate_id":19,"path":["memchr","cow","Imp"],"kind":"struct"},"17:2470:12752":{"crate_id":17,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"23:0:1864":{"crate_id":23,"path":["generic_array"],"kind":"module"},"4:358:1653":{"crate_id":4,"path":["digest","digest","Digest"],"kind":"trait"},"1:45642:14611":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:6336:14788":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"6:3209:15389":{"crate_id":6,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"18:13667:12671":{"crate_id":18,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"7:4857:13674":{"crate_id":7,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:44240:15099":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"18:12770:12336":{"crate_id":18,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:7595:28028":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:926:15343":{"crate_id":6,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:10416:15388":{"crate_id":6,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"6:9998:37242":{"crate_id":6,"path":["std","sys","unix","os","Env"],"kind":"struct"},"7:6008:13953":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"24:1007:17075":{"crate_id":24,"path":["typenum","private","PrivateMin"],"kind":"trait"},"24:1241:5397":{"crate_id":24,"path":["typenum","type_operators","IsLessOrEqual"],"kind":"trait"},"1:43822:15075":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"6:8407:14260":{"crate_id":6,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:43011:5299":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"19:755:14689":{"crate_id":19,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"7:4641:13587":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"18:12236:12261":{"crate_id":18,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:10459:11589":{"crate_id":6,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"6:2476:15381":{"crate_id":6,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"4:492:1664":{"crate_id":4,"path":["digest","core_api","wrapper","CoreWrapper"],"kind":"struct"},"17:3063:11808":{"crate_id":17,"path":["gimli","arch","Arm"],"kind":"struct"},"23:143:5416":{"crate_id":23,"path":["generic_array","functional","MappedGenericSequence"],"kind":"trait"},"1:47338:11010":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"12:1009:15351":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:7743:12778":{"crate_id":17,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"7:7538:14188":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"18:10080:15240":{"crate_id":18,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:20980:16754":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:3365:16533":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"4:339:5267":{"crate_id":4,"path":["digest","core_api","XofReaderCore"],"kind":"trait"},"6:8733:186":{"crate_id":6,"path":["std","process","Output"],"kind":"struct"},"6:11328:15394":{"crate_id":6,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"7:4827:13660":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:11877:936":{"crate_id":6,"path":["std","never"],"kind":"primitive"},"6:11883:1365":{"crate_id":6,"path":["std","slice"],"kind":"primitive"},"1:7558:16649":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:1561:5300":{"crate_id":6,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"19:719:11801":{"crate_id":19,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:40560:15020":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"23:317:5304":{"crate_id":23,"path":["generic_array","sequence","Split"],"kind":"trait"},"7:1700:13395":{"crate_id":7,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"18:9796:11932":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"5:1453:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:7161:134":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:9379:15427":{"crate_id":6,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"18:9443:15198":{"crate_id":18,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"7:6598:14039":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"7:4492:13541":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:3986:17339":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:43049:5311":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"6:2343:14308":{"crate_id":6,"path":["std","fs","metadata"],"kind":"function"},"18:10125:11938":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"6:7506:11583":{"crate_id":6,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"5:6737:11640":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"7:4882:1001":{"crate_id":7,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:6506:14805":{"crate_id":17,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"18:9523:15204":{"crate_id":18,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"18:9478:15200":{"crate_id":18,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"18:13411:12588":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"16:219:22929":{"crate_id":16,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:9588:11554":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:40025:14988":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"18:12318:12276":{"crate_id":18,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"7:7491:14178":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"22:75:11775":{"crate_id":22,"path":["crypto_common","InvalidLength"],"kind":"struct"},"18:11532:12109":{"crate_id":18,"path":["object","elf","Dyn64"],"kind":"struct"},"1:43845:15083":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:43980:15094":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"7:119:17527":{"crate_id":7,"path":["libc","unix","FILE"],"kind":"enum"},"18:9557:11925":{"crate_id":18,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:39918:14974":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"18:11520:12106":{"crate_id":18,"path":["object","elf","Dyn32"],"kind":"struct"},"24:6250:5286":{"crate_id":24,"path":["typenum","Greater"],"kind":"struct"},"10:502:13184":{"crate_id":10,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:41244:14557":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"7:7568:14194":{"crate_id":7,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"15:0:1958":{"crate_id":15,"path":["rustc_demangle"],"kind":"module"},"1:43525:15059":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:11490:14920":{"crate_id":6,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"4:336:5266":{"crate_id":4,"path":["digest","core_api","ExtendableOutputCore"],"kind":"trait"},"24:1091:17041":{"crate_id":24,"path":["typenum","private","IsLessOrEqualPrivate"],"kind":"trait"},"5:1212:15353":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:45287:14600":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:2210:11653":{"crate_id":6,"path":["std","fs","read"],"kind":"function"},"19:80:27738":{"crate_id":19,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:1577:14875":{"crate_id":6,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:2361:17287":{"crate_id":6,"path":["std","fs","canonicalize"],"kind":"function"},"7:6776:14127":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"21:92:17027":{"crate_id":21,"path":["blobby","Blob4Iterator"],"kind":"struct"},"12:1524:22908":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:2310:188":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"19:481:14671":{"crate_id":19,"path":["memchr","cow","CowBytes"],"kind":"struct"},"18:10615:14706":{"crate_id":18,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:2594:12757":{"crate_id":17,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"22:44:1979":{"crate_id":22,"path":["crypto_common","Reset"],"kind":"trait"},"18:12194:12240":{"crate_id":18,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"5:7192:14938":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:7543:12788":{"crate_id":17,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"18:13332:12563":{"crate_id":18,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"5:7147:14937":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"18:12098:12226":{"crate_id":18,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"7:7526:14186":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"18:13101:12506":{"crate_id":18,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"12:119:11535":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:40324:15011":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"24:1198:5354":{"crate_id":24,"path":["typenum","type_operators","PartialDiv"],"kind":"trait"},"4:512:1815":{"crate_id":4,"path":["digest","core_api","TruncSide"],"kind":"enum"},"1:2601:128":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"6:731:142":{"crate_id":6,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:2830:12767":{"crate_id":17,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"6:11844:37145":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:11844:112":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"18:8971:129":{"crate_id":18,"path":["object","read","any","File"],"kind":"struct"},"1:11441:5321":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:44159:211":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:2848:16550":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:3996:15493":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:2149:589":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:8025:13007":{"crate_id":17,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:4624:12814":{"crate_id":17,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"18:10377:11976":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:4184:11187":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"1:2960:16557":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"6:8781:5300":{"crate_id":6,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:10830:1806":{"crate_id":1,"path":["core","slice","raw","from_ref"],"kind":"function"},"6:3874:17332":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:10625:15467":{"crate_id":6,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:2926:5292":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"5:1196:14844":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"18:9138:15193":{"crate_id":18,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"18:10626:14707":{"crate_id":18,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:40072:11659":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:30180:68":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"18:10598:12015":{"crate_id":18,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:7042:14842":{"crate_id":17,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"5:7332:11541":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"18:11258:12059":{"crate_id":18,"path":["object","elf","FileHeader64"],"kind":"struct"},"7:7555:14193":{"crate_id":7,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:901:11622":{"crate_id":6,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:7411:12951":{"crate_id":17,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:45043:14590":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"18:13659:12670":{"crate_id":18,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:45305:14601":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"18:9617:15207":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"7:4331:13451":{"crate_id":7,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"4:457:14304":{"crate_id":4,"path":["digest","core_api","ct_variable","NoOid"],"kind":"struct"},"1:47272:5803":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:39952:14983":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:2814:16545":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:9792:222":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:43039:5310":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"18:11770:12171":{"crate_id":18,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"18:13453:12599":{"crate_id":18,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"18:8360:23889":{"crate_id":18,"path":["object","common","ComdatKind"],"kind":"enum"},"7:4609:13584":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:2205:129":{"crate_id":6,"path":["std","fs","File"],"kind":"struct"},"7:4821:13659":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:41406:193":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"7:1650:13365":{"crate_id":7,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"5:1403:14873":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:2319:12739":{"crate_id":17,"path":["gimli","common","Encoding"],"kind":"struct"},"6:3457:17295":{"crate_id":6,"path":["std","io","Seek"],"kind":"trait"},"18:8548:23895":{"crate_id":18,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:2549:11554":{"crate_id":6,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:7449:15325":{"crate_id":17,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:3382:14244":{"crate_id":6,"path":["std","io","Read"],"kind":"trait"},"4:160:1666":{"crate_id":4,"path":["digest","impl_oid_carrier"],"kind":"macro"},"14:226:13118":{"crate_id":14,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:4407:11047":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"12:399:38907":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:41473:11119":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:3149:234":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"7:4466:13528":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"14:110:38913":{"crate_id":14,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:41165:14556":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:2929:5698":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"18:13024:12490":{"crate_id":18,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"18:9876:11846":{"crate_id":18,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:45764:14614":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"19:515:11783":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:2357:12747":{"crate_id":17,"path":["gimli","common","Register"],"kind":"struct"},"18:10735:11996":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"6:8072:12948":{"crate_id":6,"path":["std","io","util","Empty"],"kind":"struct"},"1:22152:175":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"6:10654:14887":{"crate_id":6,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"5:779:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:911:11541":{"crate_id":6,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"7:1576:13311":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:6552:11579":{"crate_id":6,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"12:1091:15355":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:6637:16653":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:5563:11563":{"crate_id":6,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"7:4991:13750":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:40243:15004":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:6919:38928":{"crate_id":17,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:11367:15048":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"11:0:1954":{"crate_id":11,"path":["adler"],"kind":"module"},"1:10109:5322":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:10667:14908":{"crate_id":6,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:44210:14582":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:4845:12820":{"crate_id":17,"path":["gimli","constants","DwOrd"],"kind":"struct"},"18:8788:11901":{"crate_id":18,"path":["object","endian","I16Bytes"],"kind":"struct"},"19:609:15171":{"crate_id":19,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"18:12622:11988":{"crate_id":18,"path":["object","macho","Relocation"],"kind":"struct"},"7:4767:13633":{"crate_id":7,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:41482:183":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"15:187:22918":{"crate_id":15,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"7:7230:14161":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:21719:14962":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"18:13499:12608":{"crate_id":18,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"7:4344:13461":{"crate_id":7,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"18:8979:38942":{"crate_id":18,"path":["object","read","any","FileInternal"],"kind":"enum"},"18:12126:12230":{"crate_id":18,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:7613:11589":{"crate_id":6,"path":["std","thread","Thread"],"kind":"struct"},"6:4641:17361":{"crate_id":6,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:39248:11188":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"6:844:5300":{"crate_id":6,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:6943:23834":{"crate_id":17,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:41747:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:11902:1124":{"crate_id":6,"path":["std","reference"],"kind":"primitive"},"6:11069:14289":{"crate_id":6,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"7:1614:13335":{"crate_id":7,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:14:1930":{"crate_id":1,"path":["core","write"],"kind":"macro"},"6:1589:14877":{"crate_id":6,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:5643:14727":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"18:10303:15245":{"crate_id":18,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"18:13356:12570":{"crate_id":18,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:3167:15386":{"crate_id":6,"path":["std","io","stdio","Stdin"],"kind":"struct"},"5:5190:11603":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"18:10402:15246":{"crate_id":18,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"12:816:15358":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"18:9038:38941":{"crate_id":18,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"18:9822:15217":{"crate_id":18,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:11000:14267":{"crate_id":6,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"7:4404:13497":{"crate_id":7,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:9117:37546":{"crate_id":6,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"1:42374:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"6:888:14874":{"crate_id":6,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:44149:205":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"19:636:11800":{"crate_id":19,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:3899:12804":{"crate_id":17,"path":["gimli","constants","DwChildren"],"kind":"struct"},"18:975:15181":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"18:13821:12715":{"crate_id":18,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"18:12113:12229":{"crate_id":18,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:2781:16539":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"18:3142:15189":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"7:6002:13950":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:10832:15408":{"crate_id":6,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:7767:23838":{"crate_id":17,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"7:6800:14137":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:45149:14594":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"24:828:17060":{"crate_id":24,"path":["typenum","private","PrivateSub"],"kind":"trait"},"1:47281:11006":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:43060:5318":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:39034:14972":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:3639:11119":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:5847:14746":{"crate_id":17,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"5:2905:34201":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"24:2392:17037":{"crate_id":24,"path":["typenum","sealed","Sealed"],"kind":"trait"},"1:47070:14631":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"7:5816:13851":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:22383:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"12:675:15342":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:6022:23830":{"crate_id":17,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:42581:15036":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"18:10316:11973":{"crate_id":18,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"7:5015:13757":{"crate_id":7,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"7:1609:13333":{"crate_id":7,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"5:3687:15481":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"18:11060:11988":{"crate_id":18,"path":["object","read","Relocation"],"kind":"struct"},"25:77:1808":{"crate_id":25,"path":["block_buffer","Eager"],"kind":"struct"},"19:766:27749":{"crate_id":19,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:585:17240":{"crate_id":6,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:39997:14987":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"7:653:17885":{"crate_id":7,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"18:12085:12224":{"crate_id":18,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"19:681:14676":{"crate_id":19,"path":["memchr","memmem","Finder"],"kind":"struct"},"5:7071:14936":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"18:11090:12022":{"crate_id":18,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:2830:12913":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:5677:23827":{"crate_id":17,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"23:163:5418":{"crate_id":23,"path":["generic_array","functional","FunctionalSequence"],"kind":"trait"},"7:5747:13819":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"18:242:15177":{"crate_id":18,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:2426:12750":{"crate_id":17,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"18:10761:23898":{"crate_id":18,"path":["object","read","FileKind"],"kind":"enum"},"18:11832:12187":{"crate_id":18,"path":["object","macho","FatArch64"],"kind":"struct"},"23:362:5337":{"crate_id":23,"path":["generic_array","ArrayLength"],"kind":"trait"},"18:9534:15205":{"crate_id":18,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"18:8443:23892":{"crate_id":18,"path":["object","common","RelocationKind"],"kind":"enum"},"1:7124:5378":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:922:15342":{"crate_id":6,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"7:4797:13649":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:20771:16519":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"1:40200:14998":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"18:9178:15194":{"crate_id":18,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"5:2086:14927":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"6:7457:12020":{"crate_id":6,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:5741:23828":{"crate_id":17,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"16:0:1959":{"crate_id":16,"path":["addr2line"],"kind":"module"},"5:4004:11603":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"12:452:142":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"6:3614:17330":{"crate_id":6,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"18:11459:12095":{"crate_id":18,"path":["object","elf","Rel64"],"kind":"struct"},"1:46134:14621":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:3640:11812":{"crate_id":17,"path":["gimli","arch","X86_64"],"kind":"struct"},"7:1668:13377":{"crate_id":7,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"7:7509:14181":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:10265:5303":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"18:8490:23893":{"crate_id":18,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:20830:16753":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"18:13015:12486":{"crate_id":18,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:2797:16542":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:8316:17397":{"crate_id":6,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:7656:17245":{"crate_id":6,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:2742:11072":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"6:9078:14899":{"crate_id":6,"path":["std","time","SystemTimeError"],"kind":"struct"},"24:2520:1660":{"crate_id":24,"path":["typenum","generated","consts","U32"],"kind":"typedef"},"1:30164:11066":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"5:2115:14929":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:42793:5329":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"10:234:5969":{"crate_id":10,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:5439:15408":{"crate_id":6,"path":["std","process","Stdio"],"kind":"struct"},"18:11422:12089":{"crate_id":18,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:22482:14334":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:4872:12821":{"crate_id":17,"path":["gimli","constants","DwDsc"],"kind":"struct"},"24:1071:17040":{"crate_id":24,"path":["typenum","private","IsGreaterPrivate"],"kind":"trait"},"1:7226:5699":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"5:7222:14941":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:20733:16766":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"18:11993:12210":{"crate_id":18,"path":["object","macho","Fvmlib"],"kind":"struct"},"6:7939:17322":{"crate_id":6,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:1433:144":{"crate_id":6,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"18:13211:12535":{"crate_id":18,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:42334:68":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"5:3546:5301":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"18:10505:15257":{"crate_id":18,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:7694:15426":{"crate_id":6,"path":["std","error","private","Internal"],"kind":"struct"},"7:1525:13283":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:2616:12758":{"crate_id":17,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:3781:15396":{"crate_id":6,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"7:4509:13551":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:40232:15003":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:6133:15414":{"crate_id":6,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:4969:12824":{"crate_id":17,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:6696:23833":{"crate_id":17,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"26:0:1699":{"crate_id":26,"path":["cfg_if"],"kind":"module"},"6:9040:14279":{"crate_id":6,"path":["std","time","Instant"],"kind":"struct"},"6:5926:206":{"crate_id":6,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:22317:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"18:11434:12090":{"crate_id":18,"path":["object","elf","Rel32"],"kind":"struct"},"17:5779:12833":{"crate_id":17,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"24:1184:5352":{"crate_id":24,"path":["typenum","type_operators","Pow"],"kind":"trait"},"24:844:17057":{"crate_id":24,"path":["typenum","private","PrivatePow"],"kind":"trait"},"1:42559:145":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:43964:15090":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:5032:12826":{"crate_id":17,"path":["gimli","constants","DwLnct"],"kind":"struct"},"18:13791:12707":{"crate_id":18,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:41355:14561":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"19:652:11780":{"crate_id":19,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:2824:12912":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:8088:14241":{"crate_id":6,"path":["std","io","IoSlice"],"kind":"struct"},"18:10527:24006":{"crate_id":18,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:2750:16382":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"1:41388:15510":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"12:652:5301":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:6218:15290":{"crate_id":17,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:9979:15374":{"crate_id":6,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"24:1279:5353":{"crate_id":24,"path":["typenum","type_operators","ToInt"],"kind":"trait"},"5:6605:11649":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"5:6291:11603":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"12:97:14866":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"5:6693:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"6:11222:15420":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:3047:22972":{"crate_id":17,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:6990:12897":{"crate_id":17,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"7:5755:13821":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:41627:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"19:727:11804":{"crate_id":19,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:11898:1492":{"crate_id":6,"path":["std","u64"],"kind":"primitive"},"1:41256:14558":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"6:8922:37387":{"crate_id":6,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"6:8257:15442":{"crate_id":6,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"7:4960:13737":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:10862:14269":{"crate_id":6,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"17:2572:12756":{"crate_id":17,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"5:4206:5300":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"7:6110:13977":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"7:4521:13557":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"12:1540:15359":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"18:11653:12142":{"crate_id":18,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:10311:15443":{"crate_id":6,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:2689:5694":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"17:6935:15302":{"crate_id":17,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"21:66:17025":{"crate_id":21,"path":["blobby","Blob2Iterator"],"kind":"struct"},"23:300:5422":{"crate_id":23,"path":["generic_array","sequence","Shorten"],"kind":"trait"},"7:5779:13837":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"18:12158:12234":{"crate_id":18,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:5549:14947":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"5:5238:17134":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"7:7544:14189":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"22:33:1814":{"crate_id":22,"path":["crypto_common","OutputSizeUser"],"kind":"trait"},"17:2720:12762":{"crate_id":17,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:39846:14976":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:22218:177":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"6:635:15365":{"crate_id":6,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:41587:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"18:10569:14700":{"crate_id":18,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"7:1594:13321":{"crate_id":7,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"18:9350:38936":{"crate_id":18,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:43639:15061":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"7:587:13269":{"crate_id":7,"path":["libc","unix","servent"],"kind":"struct"},"24:6192:5344":{"crate_id":24,"path":["typenum","array","TArr"],"kind":"struct"},"6:4759:17346":{"crate_id":6,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:5571:12775":{"crate_id":17,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"24:1878:17046":{"crate_id":24,"path":["typenum","uint","GetBit"],"kind":"trait"},"24:611:5271":{"crate_id":24,"path":["typenum","marker_traits","NonZero"],"kind":"trait"},"17:7588:15332":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"7:4836:13663":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"7:1622:13340":{"crate_id":7,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:10354:11588":{"crate_id":6,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"6:10945:11592":{"crate_id":6,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:43507:15057":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:8806:30871":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:47391:11013":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"5:814:11609":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"18:10589:14705":{"crate_id":18,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:2467:17037":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:3248:15391":{"crate_id":6,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"7:4751:13625":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:11390:15396":{"crate_id":6,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:4387:11189":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:5491:14946":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"18:13763:12698":{"crate_id":18,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:22185:176":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:45717:14613":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:5570:11564":{"crate_id":6,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:10223:37239":{"crate_id":6,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:39926:14980":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"18:11844:12189":{"crate_id":18,"path":["object","macho","MachHeader32"],"kind":"struct"},"12:2198:13120":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"5:1057:34202":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:2755:16383":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"5:7175:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:46930:14629":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:41136:16659":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"22:22:1811":{"crate_id":22,"path":["crypto_common","BlockSizeUser"],"kind":"trait"},"18:13240:12543":{"crate_id":18,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:7635:12958":{"crate_id":17,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:2771:16538":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:20469:28130":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:41102:14547":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"18:10270:15243":{"crate_id":18,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"18:12033:12218":{"crate_id":18,"path":["object","macho","DylibCommand"],"kind":"struct"},"7:6628:14061":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"5:688:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"22:51:17086":{"crate_id":22,"path":["crypto_common","KeyIvInit"],"kind":"trait"},"7:4947:13730":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:39945:14982":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"5:279:1975":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"23:437:5409":{"crate_id":23,"path":["generic_array","ArrayConsumer"],"kind":"struct"},"17:7259:14561":{"crate_id":17,"path":["gimli","read","op","Location"],"kind":"enum"},"7:4952:13732":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:4323:11657":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"18:13376:12577":{"crate_id":18,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:6376:12773":{"crate_id":17,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:43733:15072":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"4:448:1973":{"crate_id":4,"path":["digest","VariableOutputReset"],"kind":"trait"},"1:30124:5412":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:1048:14844":{"crate_id":6,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:30728:183":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"6:4678:17347":{"crate_id":6,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:4682:17350":{"crate_id":6,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:1785:15373":{"crate_id":6,"path":["std","env","VarsOs"],"kind":"struct"},"7:5900:13901":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"4:357:1821":{"crate_id":4,"path":["digest","digest","HashMarker"],"kind":"trait"},"18:11502:12105":{"crate_id":18,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"7:7578:14196":{"crate_id":7,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:10413:15386":{"crate_id":6,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"6:8803:14270":{"crate_id":6,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:7674:17267":{"crate_id":6,"path":["std","env","VarError"],"kind":"enum"},"7:4980:13744":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"18:13612:12653":{"crate_id":18,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:46022:14619":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:7778:11847":{"crate_id":6,"path":["std","fs","Metadata"],"kind":"struct"},"18:12980:12485":{"crate_id":18,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"5:3275:11541":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"18:9653:15210":{"crate_id":18,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:5976:14718":{"crate_id":17,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:8851:17435":{"crate_id":6,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:11578:16384":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:9118:11180":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:47008:14630":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:42050:11180":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"12:1688:144":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:8217:17360":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"18:13564:12652":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"7:4383:13487":{"crate_id":7,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"18:12059:12221":{"crate_id":18,"path":["object","macho","SubClientCommand"],"kind":"struct"},"6:11879:1509":{"crate_id":6,"path":["std","unit"],"kind":"primitive"},"6:6101:11574":{"crate_id":6,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:5305:12829":{"crate_id":17,"path":["gimli","constants","DwOp"],"kind":"struct"},"18:8753:11900":{"crate_id":18,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:6671:12871":{"crate_id":17,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:6327:14787":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"12:2212:13122":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:3300:12797":{"crate_id":17,"path":["gimli","arch","LoongArch"],"kind":"struct"},"18:10092:15241":{"crate_id":18,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"6:3131:37517":{"crate_id":6,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"18:13461:12600":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"13:0:1956":{"crate_id":13,"path":["rustc_std_workspace_alloc"],"kind":"module"},"23:422:5408":{"crate_id":23,"path":["generic_array","ArrayBuilder"],"kind":"struct"},"12:1839:5300":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:2802:12909":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:7128:16650":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"18:9322:38933":{"crate_id":18,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"24:1274:5369":{"crate_id":24,"path":["typenum","type_operators","Logarithm2"],"kind":"trait"},"6:8822:14271":{"crate_id":6,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"19:736:27748":{"crate_id":19,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"7:4416:13506":{"crate_id":7,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:6865:38725":{"crate_id":6,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:10144:5308":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:9120:194":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"6:6538:17432":{"crate_id":6,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"3:0:1950":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"1:38987:16558":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:45352:14602":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"19:96:27739":{"crate_id":19,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:8773:14269":{"crate_id":6,"path":["std","process","ExitCode"],"kind":"struct"},"6:10206:15407":{"crate_id":6,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"5:6576:11635":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:43251:5308":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:40300:11798":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:6575:23832":{"crate_id":17,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"25:106:5268":{"crate_id":25,"path":["block_buffer","BlockBuffer"],"kind":"struct"},"17:6981:15303":{"crate_id":17,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"18:13233:12541":{"crate_id":18,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:11012:14268":{"crate_id":6,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:2967:22971":{"crate_id":17,"path":["gimli","common","SectionId"],"kind":"enum"},"1:6731:16640":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"18:11573:12119":{"crate_id":18,"path":["object","elf","Verdaux"],"kind":"struct"},"1:45620:14610":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"4:473:1665":{"crate_id":4,"path":["digest","core_api","ct_variable","CtVariableCoreWrapper"],"kind":"struct"},"6:8476:5300":{"crate_id":6,"path":["std","path","Iter"],"kind":"struct"},"5:6245:11622":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"7:5798:13839":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:43455:15054":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"12:703:15343":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:40172:14994":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:2844:16549":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:6132:14782":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"18:11484:12097":{"crate_id":18,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"12:1071:38911":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"7:4527:13560":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"18:13121:12514":{"crate_id":18,"path":["object","pe","ImageSymbol"],"kind":"struct"},"19:582:11084":{"crate_id":19,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:2262:105":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"18:9512:15203":{"crate_id":18,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"5:3621:11603":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"12:60:38910":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:40275:15007":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"4:502:5274":{"crate_id":4,"path":["digest","core_api","xof_reader","XofReaderCoreWrapper"],"kind":"struct"},"1:45544:14607":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"18:9734:15216":{"crate_id":18,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:41507:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:10719:37544":{"crate_id":6,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"6:7641:17244":{"crate_id":6,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"5:1412:14874":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"18:9933:14690":{"crate_id":18,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:42309:12984":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"5:7001:14303":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:2736:11070":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:3076:5294":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:10939:11591":{"crate_id":6,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:20471:28128":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"18:13506:12610":{"crate_id":18,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:3982:17338":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"7:5051:13779":{"crate_id":7,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"7:4371:13484":{"crate_id":7,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:4596:12813":{"crate_id":17,"path":["gimli","constants","DwVis"],"kind":"struct"},"18:12138:12231":{"crate_id":18,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:45898:14617":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"6:1821:15374":{"crate_id":6,"path":["std","env","SplitPaths"],"kind":"struct"},"6:3439:11176":{"crate_id":6,"path":["std","io","Write"],"kind":"trait"},"6:11458:14292":{"crate_id":6,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"18:11721:12146":{"crate_id":18,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"18:13145:12519":{"crate_id":18,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"18:9098:15192":{"crate_id":18,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:7554:16648":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:40363:15016":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"24:653:5381":{"crate_id":24,"path":["typenum","marker_traits","TypeArray"],"kind":"trait"},"18:10885:14713":{"crate_id":18,"path":["object","read","SymbolMap"],"kind":"struct"},"18:13488:12607":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"18:10334:11925":{"crate_id":18,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:7859:23839":{"crate_id":17,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:5944:15264":{"crate_id":17,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:5346:12830":{"crate_id":17,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"18:10705:11992":{"crate_id":18,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"0:0:1698":{"crate_id":0,"path":["sha2"],"kind":"module"},"18:11446:12093":{"crate_id":18,"path":["object","elf","Rela32"],"kind":"struct"},"1:4111:15495":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:47429:11015":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:5719:15413":{"crate_id":6,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"18:13066:12502":{"crate_id":18,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:10823:13181":{"crate_id":6,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"18:11628:12138":{"crate_id":18,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:47376:11012":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"7:4318:13441":{"crate_id":7,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:2764:12764":{"crate_id":17,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:43233:5304":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"18:9986:14695":{"crate_id":18,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:42297:110":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"6:5334:15404":{"crate_id":6,"path":["std","process","ChildStdin"],"kind":"struct"},"7:4890:13691":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"24:924:17054":{"crate_id":24,"path":["typenum","private","PrivateCmp"],"kind":"trait"},"19:521:27750":{"crate_id":19,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:20874:17037":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:21557:14956":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:7837:14852":{"crate_id":17,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"6:8909:107":{"crate_id":6,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:2240:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:41457:5300":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"7:6848:14155":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"5:4398:11628":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"7:6668:14063":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:30194:29645":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:3314:69":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"17:2931:22970":{"crate_id":17,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:11185:16706":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:3059:15384":{"crate_id":6,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"6:5021:15400":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:2908:5413":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:3872:12803":{"crate_id":17,"path":["gimli","constants","DwCfa"],"kind":"struct"},"24:6172:5343":{"crate_id":24,"path":["typenum","array","ATerm"],"kind":"struct"},"1:11390:15049":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"24:1231:5396":{"crate_id":24,"path":["typenum","type_operators","IsGreater"],"kind":"trait"},"5:3672:14880":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"18:11339:12074":{"crate_id":18,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"7:4472:13530":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:11240:14917":{"crate_id":6,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:43487:15055":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:41330:5300":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"17:5655:12776":{"crate_id":17,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:7016:14836":{"crate_id":17,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"18:9596:11922":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"11:44:13125":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"7:4875:13685":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:40569:15021":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:11165:15471":{"crate_id":6,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:5693:14729":{"crate_id":17,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:41119:14549":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"18:9721:15215":{"crate_id":18,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:2214:17279":{"crate_id":6,"path":["std","fs","read_to_string"],"kind":"function"},"1:30158:5411":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:8163:15440":{"crate_id":6,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"18:11600:12128":{"crate_id":18,"path":["object","elf","Vernaux"],"kind":"struct"},"18:10967:12015":{"crate_id":18,"path":["object","read","Import"],"kind":"struct"},"1:12448:140":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"5:4046:5301":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"6:11888:642":{"crate_id":6,"path":["std","f32"],"kind":"primitive"},"18:10743:15259":{"crate_id":18,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:9989:5304":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"7:5947:13927":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:8269:128":{"crate_id":17,"path":["gimli","read","Error"],"kind":"enum"},"6:530:11550":{"crate_id":6,"path":["std","thread","Packet"],"kind":"struct"},"1:8214:15500":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"18:12646:12334":{"crate_id":18,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:3225:12796":{"crate_id":17,"path":["gimli","arch","AArch64"],"kind":"struct"},"15:160:15338":{"crate_id":15,"path":["rustc_demangle","Demangle"],"kind":"struct"},"24:1272:5376":{"crate_id":24,"path":["typenum","type_operators","SquareRoot"],"kind":"trait"},"6:6188:11563":{"crate_id":6,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"18:9108:38934":{"crate_id":18,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:5179:190":{"crate_id":6,"path":["std","path","Path"],"kind":"struct"},"6:3291:17319":{"crate_id":6,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:5963:14757":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"18:9973:14694":{"crate_id":18,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:45228:14597":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:361:15362":{"crate_id":6,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"6:8759:14268":{"crate_id":6,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:3448:37264":{"crate_id":6,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"24:5780:5257":{"crate_id":24,"path":["typenum","int","NInt"],"kind":"struct"},"1:39858:29550":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:7683:12790":{"crate_id":17,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:154:11530":{"crate_id":17,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"18:247:15178":{"crate_id":18,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:4510:12810":{"crate_id":17,"path":["gimli","constants","DwDs"],"kind":"struct"},"6:10844:37530":{"crate_id":6,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"18:13651:12667":{"crate_id":18,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"5:5640:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"6:3679:15395":{"crate_id":6,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"21:46:128":{"crate_id":21,"path":["blobby","Error"],"kind":"enum"},"18:9886:15223":{"crate_id":18,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"18:9188:38939":{"crate_id":18,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:9124:11182":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"20:0:1031":{"crate_id":20,"path":["panic_unwind"],"kind":"module"},"6:8131:15014":{"crate_id":6,"path":["std","io","Take"],"kind":"struct"},"23:295:5421":{"crate_id":23,"path":["generic_array","sequence","Lengthen"],"kind":"trait"},"6:7929:15431":{"crate_id":6,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"18:10923:14714":{"crate_id":18,"path":["object","read","ObjectMap"],"kind":"struct"},"5:1994:15481":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:40553:15019":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:41547:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:2682:220":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"7:1692:13394":{"crate_id":7,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:2359:17286":{"crate_id":6,"path":["std","fs","read_link"],"kind":"function"},"17:4480:12809":{"crate_id":17,"path":["gimli","constants","DwLle"],"kind":"struct"},"19:0:1962":{"crate_id":19,"path":["memchr"],"kind":"module"},"1:40314:15010":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"25:85:5335":{"crate_id":25,"path":["block_buffer","Lazy"],"kind":"struct"},"0:100:1691":{"crate_id":0,"path":["sha2","Sha512_224"],"kind":"typedef"},"12:0:1955":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"1:10251:5307":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:676:17243":{"crate_id":6,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"7:4546:13569":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:43131:5313":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:40223:15002":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:11860:37538":{"crate_id":6,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:4507:17379":{"crate_id":6,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:4043:16582":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"18:12634:12327":{"crate_id":18,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:2699:228":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"12:859:15349":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"10:421:22828":{"crate_id":10,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"7:4911:13706":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"18:10721:11993":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"18:10491:15256":{"crate_id":18,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:41907:11017":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"5:679:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:6868:12889":{"crate_id":17,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:1062:15351":{"crate_id":6,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:4844:17386":{"crate_id":6,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"18:11069:23902":{"crate_id":18,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:39109:202":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"6:857:5301":{"crate_id":6,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:5708:14732":{"crate_id":17,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"18:11556:12111":{"crate_id":18,"path":["object","elf","Verdef"],"kind":"struct"},"18:9312:15196":{"crate_id":18,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:7569:14198":{"crate_id":6,"path":["std","thread","local","AccessError"],"kind":"struct"},"24:942:17069":{"crate_id":24,"path":["typenum","private","PrivateDiv"],"kind":"trait"},"1:21870:16385":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"6:4095:17356":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"25:93:128":{"crate_id":25,"path":["block_buffer","Error"],"kind":"struct"},"6:9035:219":{"crate_id":6,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"6:7015:38812":{"crate_id":6,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"6:5370:15406":{"crate_id":6,"path":["std","process","ChildStderr"],"kind":"struct"},"22:48:17085":{"crate_id":22,"path":["crypto_common","KeyInit"],"kind":"trait"},"6:355:15361":{"crate_id":6,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:4702:12815":{"crate_id":17,"path":["gimli","constants","DwLang"],"kind":"struct"},"18:9028:15191":{"crate_id":18,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:21771:29577":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"7:532:13239":{"crate_id":7,"path":["libc","unix","hostent"],"kind":"struct"},"1:45596:14609":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:9384:11587":{"crate_id":6,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"7:4726:13612":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:4435:17362":{"crate_id":6,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"18:9696:11918":{"crate_id":18,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"24:6272:5287":{"crate_id":24,"path":["typenum","Less"],"kind":"struct"},"1:43337:5306":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"5:1077:37031":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"19:574:11780":{"crate_id":19,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"5:3087:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:4602:16597":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"6:638:15367":{"crate_id":6,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"5:1442:15343":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"7:4970:13743":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:8156:12792":{"crate_id":17,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:4333:11188":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"5:3157:14875":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:21:681":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"8:32:22812":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"18:11037:23901":{"crate_id":18,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:41707:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:7592:14199":{"crate_id":6,"path":["std","thread","ThreadId"],"kind":"struct"},"18:10635:11987":{"crate_id":18,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"5:7252:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"18:13777:12700":{"crate_id":18,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"5:7235:14943":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:45198:14596":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"7:579:13264":{"crate_id":7,"path":["libc","unix","tms"],"kind":"struct"},"18:10440:15252":{"crate_id":18,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:6544:12779":{"crate_id":17,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"18:9488:15201":{"crate_id":18,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:44252:14585":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"22:42:17084":{"crate_id":22,"path":["crypto_common","InnerUser"],"kind":"trait"},"7:4398:13494":{"crate_id":7,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:43283:15046":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"18:12461:12298":{"crate_id":18,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"6:9025:167":{"crate_id":6,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:40039:16614":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"typedef"},"1:20660:28308":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"12:1859:14875":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:2346:182":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"18:9946:14692":{"crate_id":18,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:5998:23829":{"crate_id":17,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:39933:16603":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:43617:16719":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:45127:14593":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:11207:14913":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:42043:11179":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"7:4898:13696":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"18:12259:12270":{"crate_id":18,"path":["object","macho","DylibModule64"],"kind":"struct"},"7:4571:13582":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:6876:12781":{"crate_id":17,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:2746:11074":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"18:13316:12561":{"crate_id":18,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:10750:5319":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:43355:5302":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:2742:12763":{"crate_id":17,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:40122:15509":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"24:1153:17056":{"crate_id":24,"path":["typenum","private","PrivateLogarithm2"],"kind":"trait"},"17:6890:12782":{"crate_id":17,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"5:2911:34200":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:1565:11119":{"crate_id":6,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"7:4423:13510":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:2587:116":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"18:10478:15255":{"crate_id":18,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"7:6685:14068":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"18:11946:12204":{"crate_id":18,"path":["object","macho","Section32"],"kind":"struct"},"24:1206:5351":{"crate_id":24,"path":["typenum","type_operators","Max"],"kind":"trait"},"18:8858:11903":{"crate_id":18,"path":["object","endian","I64Bytes"],"kind":"struct"},"24:615:5360":{"crate_id":24,"path":["typenum","marker_traits","Bit"],"kind":"trait"},"7:4553:13571":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"7:482:13208":{"crate_id":7,"path":["libc","unix","utimbuf"],"kind":"struct"},"7:526:13236":{"crate_id":7,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"18:11109:12025":{"crate_id":18,"path":["object","read","CompressedData"],"kind":"struct"},"5:7100:11119":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"18:13426:12592":{"crate_id":18,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"6:10644:14900":{"crate_id":6,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:3160:16554":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"21:105:17028":{"crate_id":21,"path":["blobby","Blob5Iterator"],"kind":"struct"},"18:13469:12602":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"7:4773:13636":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:39898:14978":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"18:8256:23874":{"crate_id":18,"path":["object","common","AddressSize"],"kind":"enum"},"6:8979:37459":{"crate_id":6,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"18:8651:11896":{"crate_id":18,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:6520:12848":{"crate_id":17,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:2765:12905":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"7:5022:13760":{"crate_id":7,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"7:6587:14034":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"7:1709:13401":{"crate_id":7,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:2573:15382":{"crate_id":6,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:11884:1395":{"crate_id":6,"path":["std","str"],"kind":"primitive"},"18:10747:128":{"crate_id":18,"path":["object","read","Error"],"kind":"struct"},"1:46472:14626":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:2468:6016":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"18:9148:38937":{"crate_id":18,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"18:12307:12275":{"crate_id":18,"path":["object","macho","TwolevelHint"],"kind":"struct"},"18:8683:11898":{"crate_id":18,"path":["object","endian","U16Bytes"],"kind":"struct"},"25:36:1829":{"crate_id":25,"path":["block_buffer","BufferKind"],"kind":"trait"},"7:5995:13949":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:21858:14967":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"4:424:1968":{"crate_id":4,"path":["digest","FixedOutputReset"],"kind":"trait"},"7:4920:13712":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:21695:14317":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:39214:14410":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"4:383:1978":{"crate_id":4,"path":["digest","digest","DynDigest"],"kind":"trait"},"7:568:13259":{"crate_id":7,"path":["libc","unix","sigval"],"kind":"struct"},"6:6296:166":{"crate_id":6,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:42269:14564":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"7:7503:14180":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:40335:15014":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"18:8931:11906":{"crate_id":18,"path":["object","read","util","ByteString"],"kind":"struct"},"18:13443:12596":{"crate_id":18,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"7:5974:13936":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:8072:14856":{"crate_id":17,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"18:10452:15253":{"crate_id":18,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"7:6785:14130":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:11849:17246":{"crate_id":6,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"5:7159:17115":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"18:11969:12209":{"crate_id":18,"path":["object","macho","Section64"],"kind":"struct"},"1:39910:14979":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:6332:15415":{"crate_id":6,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:21006:16761":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:20488:17045":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"18:10712:24008":{"crate_id":18,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"6:4577:14058":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:40131:14990":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:7519:14850":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"18:8667:11897":{"crate_id":18,"path":["object","endian","BigEndian"],"kind":"struct"},"6:9059:14280":{"crate_id":6,"path":["std","time","SystemTime"],"kind":"struct"},"6:4638:17388":{"crate_id":6,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"7:4688:13592":{"crate_id":7,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:12407:107":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:43952:15087":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"1:20428:11084":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:2978:16552":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"7:1555:13296":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"7:1657:13369":{"crate_id":7,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:47216:14634":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:6390:14792":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"19:614:38948":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:8079:14240":{"crate_id":6,"path":["std","io","util","Sink"],"kind":"struct"},"1:9110:120":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:2692:226":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"5:1041:37033":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"5:3128:36974":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"6:8952:15453":{"crate_id":6,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"18:10465:15254":{"crate_id":18,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"7:5032:13765":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"18:13678:12676":{"crate_id":18,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"7:7532:14187":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:4252:207":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:21323:5295":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:20999:17037":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:3139:5293":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"6:8904:15446":{"crate_id":6,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:40144:14921":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"10:445:22826":{"crate_id":10,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:7525:11585":{"crate_id":6,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:29933:16351":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"7:474:13203":{"crate_id":7,"path":["libc","unix","group"],"kind":"struct"},"1:39428:29129":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"6:3676:15394":{"crate_id":6,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:6548:1848":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"24:5814:5260":{"crate_id":24,"path":["typenum","int","Z0"],"kind":"struct"},"1:12236:29296":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:8239:14246":{"crate_id":6,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"6:11142:11593":{"crate_id":6,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:41483:208":{"crate_id":1,"path":["core","sync","atomic","Ordering","Relaxed"],"kind":"foreign_type"},"24:1202:5350":{"crate_id":24,"path":["typenum","type_operators","Min"],"kind":"trait"},"18:562:12020":{"crate_id":18,"path":["object","read","any","Symbol"],"kind":"struct"},"1:42550:11385":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"7:6691:14070":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"18:13257:12546":{"crate_id":18,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:8100:17296":{"crate_id":6,"path":["std","io","SeekFrom"],"kind":"enum"},"12:393:38906":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:9782:17037":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:38948:16561":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"18:8521:23894":{"crate_id":18,"path":["object","common","FileFlags"],"kind":"enum"},"7:4790:13647":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"18:9917:11934":{"crate_id":18,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:8212:16665":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"18:386:15179":{"crate_id":18,"path":["object","read","any","Segment"],"kind":"struct"},"6:8121:14990":{"crate_id":6,"path":["std","io","Chain"],"kind":"struct"},"18:10798:23899":{"crate_id":18,"path":["object","read","ObjectKind"],"kind":"enum"},"19:699:14680":{"crate_id":19,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"18:9826:15218":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:31948:15426":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"6:4111:17358":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"18:13249:12544":{"crate_id":18,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"12:757:11622":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"8:0:1537":{"crate_id":8,"path":["unwind"],"kind":"module"},"17:2694:12761":{"crate_id":17,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:11638:16705":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"22:39:17083":{"crate_id":22,"path":["crypto_common","IvSizeUser"],"kind":"trait"},"18:10068:15239":{"crate_id":18,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"7:4757:13627":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"5:3162:36973":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"15:7:15338":{"crate_id":15,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:5630:15262":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"5:7063:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:40252:15005":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"18:9866:15221":{"crate_id":18,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:41338:5301":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"24:612:5349":{"crate_id":24,"path":["typenum","marker_traits","Zero"],"kind":"trait"},"1:43668:15070":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:40082:15508":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:20801:16767":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"22:46:1809":{"crate_id":22,"path":["crypto_common","AlgorithmName"],"kind":"trait"},"7:573:13261":{"crate_id":7,"path":["libc","unix","itimerval"],"kind":"struct"},"5:2076:11549":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:21731:29579":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:11623:15501":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:39089:199":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:10032:5321":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:44028:15096":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"18:11891:12195":{"crate_id":18,"path":["object","macho","LcStr"],"kind":"struct"},"24:1174:5394":{"crate_id":24,"path":["typenum","type_operators","Abs"],"kind":"trait"},"6:6373:15416":{"crate_id":6,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:10237:5302":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:2352:189":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"24:998:17036":{"crate_id":24,"path":["typenum","private","PrivateRem"],"kind":"trait"},"7:6651:14062":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"7:562:13256":{"crate_id":7,"path":["libc","unix","linger"],"kind":"struct"},"18:10052:15237":{"crate_id":18,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:1544:11560":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:6880:12948":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:3231:16560":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"7:123:17528":{"crate_id":7,"path":["libc","unix","fpos_t"],"kind":"enum"},"18:2933:15188":{"crate_id":18,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"23:123:17030":{"crate_id":23,"path":["generic_array","arr","AddLength"],"kind":"trait"},"6:8223:15441":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:4103:17357":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:8957:15454":{"crate_id":6,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"6:1844:15375":{"crate_id":6,"path":["std","env","Args"],"kind":"struct"},"18:8632:23875":{"crate_id":18,"path":["object","endian","Endianness"],"kind":"enum"},"1:43760:15073":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:1080:15357":{"crate_id":6,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"18:9498:11918":{"crate_id":18,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"25:22:17037":{"crate_id":25,"path":["block_buffer","sealed","Sealed"],"kind":"trait"},"6:3994:17341":{"crate_id":6,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:3585:12799":{"crate_id":17,"path":["gimli","arch","X86"],"kind":"struct"},"18:11220:12044":{"crate_id":18,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"14:0:1957":{"crate_id":14,"path":["std_detect"],"kind":"module"},"1:11155:5283":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:9114:11178":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:7203:121":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"7:4559:13573":{"crate_id":7,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:917:15358":{"crate_id":6,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:7551:16581":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:4008:15494":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"11:36:13124":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"18:10989:11983":{"crate_id":18,"path":["object","read","Export"],"kind":"struct"},"6:8205:14889":{"crate_id":6,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"12:1852:11541":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"1:9080:132":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"21:79:17026":{"crate_id":21,"path":["blobby","Blob3Iterator"],"kind":"struct"},"17:6236:15298":{"crate_id":17,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"18:11282:12060":{"crate_id":18,"path":["object","elf","Ident"],"kind":"struct"},"18:13082:12505":{"crate_id":18,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:21451:17037":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:43020:5297":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:8493:14896":{"crate_id":6,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:21808:29551":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"17:7065:14843":{"crate_id":17,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"18:13181:12524":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:2613:15383":{"crate_id":6,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"7:1588:13319":{"crate_id":7,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"23:382:5407":{"crate_id":23,"path":["generic_array","GenericArrayImplOdd"],"kind":"struct"},"19:599:38949":{"crate_id":19,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:42279:68":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:2520:237":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"18:10104:11936":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"10:325:13161":{"crate_id":10,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"12:305:14870":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"5:5905:11560":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"5:632:15478":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"7:5870:13878":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"5:4817:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:8780:668":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"4:341:1817":{"crate_id":4,"path":["digest","core_api","VariableOutputCore"],"kind":"trait"},"5:1241:15357":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"7:4307:13433":{"crate_id":7,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"12:1050:22907":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"18:12563:12317":{"crate_id":18,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"5:6364:11119":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:7437:12952":{"crate_id":17,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"7:5717:13794":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"19:707:14682":{"crate_id":19,"path":["memchr","memmem","Searcher"],"kind":"struct"},"4:440:1972":{"crate_id":4,"path":["digest","VariableOutput"],"kind":"trait"},"10:481:22825":{"crate_id":10,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"18:11372:12080":{"crate_id":18,"path":["object","elf","Sym32"],"kind":"struct"},"17:8170:14863":{"crate_id":17,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"18:10649:14708":{"crate_id":18,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"18:9218:11925":{"crate_id":18,"path":["object","read","any","SymbolTable"],"kind":"struct"},"7:4845:13669":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:20814:17037":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"17:7103:14275":{"crate_id":17,"path":["gimli","read","op","Operation"],"kind":"enum"},"23:195:5415":{"crate_id":23,"path":["generic_array","iter","GenericArrayIter"],"kind":"struct"},"23:346:5423":{"crate_id":23,"path":["generic_array","sequence","Concat"],"kind":"trait"},"1:6940:11566":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"7:595:13274":{"crate_id":7,"path":["libc","unix","protoent"],"kind":"struct"},"18:12449:12296":{"crate_id":18,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"18:12433:12292":{"crate_id":18,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:2919:5696":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"4:436:1971":{"crate_id":4,"path":["digest","ExtendableOutputReset"],"kind":"trait"},"24:1211:5269":{"crate_id":24,"path":["typenum","type_operators","IsLess"],"kind":"trait"},"17:4932:12823":{"crate_id":17,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"23:369:5406":{"crate_id":23,"path":["generic_array","GenericArrayImplEven"],"kind":"struct"},"18:11585:12122":{"crate_id":18,"path":["object","elf","Verneed"],"kind":"struct"},"18:11615:12134":{"crate_id":18,"path":["object","elf","NoteHeader32"],"kind":"struct"},"7:554:13251":{"crate_id":7,"path":["libc","unix","winsize"],"kind":"struct"},"18:13053:12497":{"crate_id":18,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"7:4294:13424":{"crate_id":7,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:9373:11384":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:47406:11014":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"6:501:11549":{"crate_id":6,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:7795:14200":{"crate_id":6,"path":["std","fs","FileTimes"],"kind":"struct"},"18:12835:12387":{"crate_id":18,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:3749:12800":{"crate_id":17,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:2793:16540":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:7335:38931":{"crate_id":17,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"18:12923:12450":{"crate_id":18,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:11643:16704":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:7557:12954":{"crate_id":17,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:43141:5314":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:47254:14635":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"4:332:1813":{"crate_id":4,"path":["digest","core_api","BufferKindUser"],"kind":"trait"},"17:6728:14813":{"crate_id":17,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:44997:14588":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:8109:14862":{"crate_id":17,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"19:660:15172":{"crate_id":19,"path":["memchr","memmem","FindIter"],"kind":"struct"},"4:334:5265":{"crate_id":4,"path":["digest","core_api","FixedOutputCore"],"kind":"trait"},"1:41667:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:7757:14851":{"crate_id":17,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"7:7443:14176":{"crate_id":7,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"7:1715:13404":{"crate_id":7,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"24:1905:17048":{"crate_id":24,"path":["typenum","uint","SetBit"],"kind":"trait"},"18:12072:12222":{"crate_id":18,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:46820:14628":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:46288:14624":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:11882:312":{"crate_id":6,"path":["std","array"],"kind":"primitive"},"6:8727:15443":{"crate_id":6,"path":["std","process","CommandArgs"],"kind":"struct"},"24:989:17034":{"crate_id":24,"path":["typenum","private","PrivateDivInt"],"kind":"trait"},"7:6024:13957":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"24:6294:126":{"crate_id":24,"path":["typenum","Equal"],"kind":"struct"},"6:11890:745":{"crate_id":6,"path":["std","i8"],"kind":"primitive"},"24:6316:5254":{"crate_id":24,"path":["typenum","uint","UInt"],"kind":"struct"},"7:6706:14075":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:10649:14902":{"crate_id":6,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"5:962:11603":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:7587:15421":{"crate_id":6,"path":["std","thread","Builder"],"kind":"struct"},"7:4459:13525":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:7783:15427":{"crate_id":6,"path":["std","fs","ReadDir"],"kind":"struct"},"18:12345:12279":{"crate_id":18,"path":["object","macho","RpathCommand"],"kind":"struct"},"24:1261:5365":{"crate_id":24,"path":["typenum","type_operators","IsGreaterOrEqual"],"kind":"trait"},"6:10709:14241":{"crate_id":6,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:4818:12819":{"crate_id":17,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:43177:14575":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"12:2204:38912":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:43972:15092":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"22:56:17088":{"crate_id":22,"path":["crypto_common","InnerIvInit"],"kind":"trait"},"17:2905:12770":{"crate_id":17,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:20634:16763":{"crate_id":1,"path":["core","core_simd","cast","SimdCastPtr"],"kind":"trait"},"17:7488:14848":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:7667:14884":{"crate_id":6,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:45250:14598":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:39888:14977":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"18:12282:12271":{"crate_id":18,"path":["object","macho","DylibReference"],"kind":"struct"},"1:43968:15091":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:4757:12817":{"crate_id":17,"path":["gimli","constants","DwId"],"kind":"struct"},"6:8965:14275":{"crate_id":6,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"6:9030:218":{"crate_id":6,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:42352:128":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:7174:5700":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:7803:12970":{"crate_id":17,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:11878:419":{"crate_id":6,"path":["std","char"],"kind":"primitive"},"1:20456:27986":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:0:443":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"6:8945:15452":{"crate_id":6,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:6351:23831":{"crate_id":17,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:43976:15093":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:6717:14812":{"crate_id":17,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:3400:15393":{"crate_id":6,"path":["std","io","IoSliceMut"],"kind":"struct"},"7:5785:13838":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:40265:15006":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:6904:12892":{"crate_id":17,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"12:638:5300":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:0:497":{"crate_id":1,"path":["core"],"kind":"module"},"17:8047:13008":{"crate_id":17,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"5:3183:14878":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"5:879:5300":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"5:7033:11613":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"10:0:1953":{"crate_id":10,"path":["miniz_oxide"],"kind":"module"},"7:5862:13873":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:11330:15043":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:21679:14958":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:2315:125":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"24:933:17067":{"crate_id":24,"path":["typenum","private","PrivateSetBit"],"kind":"trait"},"18:13169:12521":{"crate_id":18,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:0:1960":{"crate_id":17,"path":["gimli"],"kind":"module"},"19:624:38946":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:4124:17359":{"crate_id":6,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:2923:5697":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:8213:16664":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"24:1195:5366":{"crate_id":24,"path":["typenum","type_operators","Len"],"kind":"trait"},"18:11234:12045":{"crate_id":18,"path":["object","elf","FileHeader32"],"kind":"struct"},"5:5796:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:3169:15387":{"crate_id":6,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"18:9340:15197":{"crate_id":18,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:3324:15023":{"crate_id":6,"path":["std","io","util","Repeat"],"kind":"struct"},"18:9772:11930":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"9:0:1699":{"crate_id":9,"path":["cfg_if"],"kind":"module"},"1:45268:14599":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:7256:37153":{"crate_id":6,"path":["std","panicking","Hook"],"kind":"enum"},"1:2853:16551":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:9000:14278":{"crate_id":6,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"6:953:15349":{"crate_id":6,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"18:9275:38938":{"crate_id":18,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:9112:11177":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"6:11483:14920":{"crate_id":6,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:6767:14825":{"crate_id":17,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"5:7025:11622":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"10:52:22844":{"crate_id":10,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:3377:15492":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"1:45574:14608":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"7:5809:13847":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:7529:12787":{"crate_id":17,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:10071:5305":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:10689:130":{"crate_id":6,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"5:3974:11622":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:2693:225":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:43960:15089":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:7498:14849":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:47468:5877":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:39131:201":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"18:11136:12026":{"crate_id":18,"path":["object","archive","Header"],"kind":"struct"},"6:8797:11119":{"crate_id":6,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"18:11193:12036":{"crate_id":18,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:7596:23837":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"18:12894:12439":{"crate_id":18,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"7:5077:13790":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"7:500:13216":{"crate_id":7,"path":["libc","unix","rlimit"],"kind":"struct"},"6:5764:11565":{"crate_id":6,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:4261:15497":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:2243:98":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"5:1431:15342":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:12201:136":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"21:0:1963":{"crate_id":21,"path":["blobby"],"kind":"module"},"7:6047:13963":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"18:13857:12719":{"crate_id":18,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:55:12997":{"crate_id":17,"path":["gimli","endianity","Endianity"],"kind":"trait"},"18:9469:15199":{"crate_id":18,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"18:1947:15184":{"crate_id":18,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"18:12006:12213":{"crate_id":18,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"7:6151:14003":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:20882:16757":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:867:11119":{"crate_id":6,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"18:11471:12096":{"crate_id":18,"path":["object","elf","Rela64"],"kind":"struct"},"15:40:12060":{"crate_id":15,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:47292:11007":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:4400:12807":{"crate_id":17,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:8319:15501":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:42960:15516":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:2744:106":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"6:7843:15429":{"crate_id":6,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"7:7252:14162":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"24:1251:5398":{"crate_id":24,"path":["typenum","type_operators","IsNotEqual"],"kind":"trait"},"7:506:13219":{"crate_id":7,"path":["libc","unix","rusage"],"kind":"struct"},"18:10354:11975":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:43121:5315":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:41867:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"18:12483:12309":{"crate_id":18,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:47353:11011":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"12:867:15350":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"12:731:14873":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:2862:12768":{"crate_id":17,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"5:2168:34624":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:11618:16699":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"1:44953:14586":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:4762:389":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"6:8044:15433":{"crate_id":6,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"18:8573:23896":{"crate_id":18,"path":["object","common","SectionFlags"],"kind":"enum"},"6:3924:17334":{"crate_id":6,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:42571:5969":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"17:4904:12822":{"crate_id":17,"path":["gimli","constants","DwIdx"],"kind":"struct"},"24:821:17062":{"crate_id":24,"path":["typenum","private","PrivateXor"],"kind":"trait"},"18:11410:12086":{"crate_id":18,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:1924:17277":{"crate_id":6,"path":["std","error","Indented"],"kind":"struct"},"6:11893:744":{"crate_id":6,"path":["std","i64"],"kind":"primitive"},"17:6061:22943":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:9875:15029":{"crate_id":6,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"24:5724:5259":{"crate_id":24,"path":["typenum","bit","B1"],"kind":"struct"},"1:42325:71":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"18:10039:15235":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"18:13344:12569":{"crate_id":18,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:6293:12843":{"crate_id":17,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:9603:11674":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"6:5693:15412":{"crate_id":6,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"6:4990:15400":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:21229:16768":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"6:11894:740":{"crate_id":6,"path":["std","i128"],"kind":"primitive"},"18:13219:12538":{"crate_id":18,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:8151:15055":{"crate_id":6,"path":["std","io","Lines"],"kind":"struct"},"6:11897:1491":{"crate_id":6,"path":["std","u32"],"kind":"primitive"},"5:1365:5301":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:10783:5320":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"12:828:17250":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:46212:14622":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"18:10257:15242":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"0:103:1697":{"crate_id":0,"path":["sha2","Sha512"],"kind":"typedef"},"18:10428:15251":{"crate_id":18,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:4142:14945":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"6:947:15347":{"crate_id":6,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"12:2076:15351":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"19:507:11780":{"crate_id":19,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"5:1611:11603":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:6586:217":{"crate_id":6,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:7366:23836":{"crate_id":17,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:45428:14604":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"18:8195:23876":{"crate_id":18,"path":["object","common","Architecture"],"kind":"enum"},"5:4913:11560":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:2507:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:4020:103":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:45167:14595":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:22284:5290":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"4:531:1974":{"crate_id":4,"path":["digest","InvalidBufferSize"],"kind":"struct"},"1:11632:14682":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:45795:14615":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"18:11902:12196":{"crate_id":18,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:22416:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"18:13625:12659":{"crate_id":18,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:4568:12812":{"crate_id":17,"path":["gimli","constants","DwAccess"],"kind":"struct"},"5:6177:11640":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"1:43401:15051":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:21008:14314":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"7:4449:13522":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:39049:200":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"7:6569:14027":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:7669:12789":{"crate_id":17,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:43301:15047":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"12:821:15344":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:2668:12760":{"crate_id":17,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:43550:14979":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"7:4538:13564":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:8867:17437":{"crate_id":6,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:5502:17416":{"crate_id":6,"path":["std","process","Termination"],"kind":"trait"},"6:8283:14247":{"crate_id":6,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"7:5829:13860":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:10679:14200":{"crate_id":6,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"17:3782:12801":{"crate_id":17,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:20621:16762":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:46322:14625":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:2298:22944":{"crate_id":17,"path":["gimli","common","Format"],"kind":"enum"},"17:8180:23840":{"crate_id":17,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:39153:203":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"7:1564:13302":{"crate_id":7,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"5:35:11600":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"12:783:11545":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"18:10660:11988":{"crate_id":18,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"6:4073:38811":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:2546:12755":{"crate_id":17,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"5:4320:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"18:12550:12316":{"crate_id":18,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:12288:15504":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:229:210":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:8890:14274":{"crate_id":6,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:45065:14591":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"7:5071:13787":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:2840:16548":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:2516:238":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"5:6443:11603":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"22:16:186":{"crate_id":22,"path":["crypto_common","Output"],"kind":"typedef"},"24:5702:5258":{"crate_id":24,"path":["typenum","bit","B0"],"kind":"struct"},"7:1728:13408":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"7:0:816":{"crate_id":7,"path":["libc"],"kind":"module"},"5:4166:11560":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"6:413:165":{"crate_id":6,"path":["std","thread","local","LocalKey"],"kind":"struct"},"7:1736:13412":{"crate_id":7,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:5418:12831":{"crate_id":17,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:5000:12825":{"crate_id":17,"path":["gimli","constants","DwLne"],"kind":"struct"},"24:2616:1662":{"crate_id":24,"path":["typenum","generated","consts","U64"],"kind":"typedef"},"6:7662:14881":{"crate_id":6,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"6:6009:11567":{"crate_id":6,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"18:10580:14704":{"crate_id":18,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"6:0:1387":{"crate_id":6,"path":["std"],"kind":"module"},"18:10516:11978":{"crate_id":18,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"5:5234:5423":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:46052:14620":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:2785:16543":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:8466:14891":{"crate_id":6,"path":["std","path","Components"],"kind":"struct"},"18:13477:12603":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"18:11641:12139":{"crate_id":18,"path":["object","elf","HashHeader"],"kind":"struct"},"17:6488:14797":{"crate_id":17,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"6:10419:15390":{"crate_id":6,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"6:930:15344":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:4736:11561":{"crate_id":6,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:7478:12785":{"crate_id":17,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:3128:38733":{"crate_id":6,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:9325:141":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"17:535:14716":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"24:2808:1820":{"crate_id":24,"path":["typenum","generated","consts","U128"],"kind":"typedef"},"17:5811:14740":{"crate_id":17,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:44223:161":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"7:4431:13513":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"5:862:11611":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:9122:11181":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:875:14873":{"crate_id":6,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:9489:11667":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:3166:16556":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:4037:12805":{"crate_id":17,"path":["gimli","constants","DwTag"],"kind":"struct"},"6:2371:17292":{"crate_id":6,"path":["std","fs","read_dir"],"kind":"function"},"6:7568:17037":{"crate_id":6,"path":["std","sealed","Sealed"],"kind":"trait"},"17:2337:12741":{"crate_id":17,"path":["gimli","common","LineEncoding"],"kind":"struct"},"24:2508:1659":{"crate_id":24,"path":["typenum","generated","consts","U28"],"kind":"typedef"},"1:42589:15037":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"18:1919:23939":{"crate_id":18,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:43516:15058":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:11896:1490":{"crate_id":6,"path":["std","u16"],"kind":"primitive"},"17:6431:14795":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:7626:15333":{"crate_id":17,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"24:1016:17077":{"crate_id":24,"path":["typenum","private","PrivateMax"],"kind":"trait"},"5:7016:14935":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:1071:15353":{"crate_id":6,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"10:352:22841":{"crate_id":10,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"18:12496:12310":{"crate_id":18,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:22119:178":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"18:10840:12011":{"crate_id":18,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:3207:15388":{"crate_id":6,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:6201:15286":{"crate_id":17,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"12:1035:15353":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:9182:15375":{"crate_id":6,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:3179:28701":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"18:12019:11943":{"crate_id":18,"path":["object","macho","Dylib"],"kind":"struct"},"6:7818:130":{"crate_id":6,"path":["std","fs","FileType"],"kind":"struct"},"6:3354:11560":{"crate_id":6,"path":["std","io","Guard"],"kind":"struct"},"6:6482:15417":{"crate_id":6,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:7788:14887":{"crate_id":6,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:5886:14748":{"crate_id":17,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"18:487:15180":{"crate_id":18,"path":["object","read","any","Comdat"],"kind":"struct"},"1:43865:15085":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"18:11319:12073":{"crate_id":18,"path":["object","elf","SectionHeader64"],"kind":"struct"},"21:118:17029":{"crate_id":21,"path":["blobby","Blob6Iterator"],"kind":"struct"},"6:6907:11581":{"crate_id":6,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"18:10936:12014":{"crate_id":18,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"5:3533:5300":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:2539:11556":{"crate_id":6,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"5:210:11602":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"7:6814:14146":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:2982:16553":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"7:4732:13615":{"crate_id":7,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"5:2635:14301":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"7:5967:13935":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"5:7266:14944":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"7:4486:13538":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"7:7258:14164":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:3505:11622":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"1:43984:15095":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"7:5959:13934":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"7:4932:13721":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"18:9959:14693":{"crate_id":18,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"5:3149:14877":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"18:10000:11999":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"18:13803:12709":{"crate_id":18,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:5386:11896":{"crate_id":17,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:20761:16760":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:9940:5300":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:2159:16519":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"1:22449:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:7165:152":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:7711:12961":{"crate_id":17,"path":["gimli","read","UnitOffset"],"kind":"struct"},"24:1151:17059":{"crate_id":24,"path":["typenum","private","PrivateSquareRoot"],"kind":"trait"},"18:10283:11970":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"18:13292:12552":{"crate_id":18,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:6369:15020":{"crate_id":6,"path":["std","sync","once","Once"],"kind":"struct"},"12:2192:13119":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:21844:14333":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:1568:11622":{"crate_id":6,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"18:11924:12203":{"crate_id":18,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:8424:17411":{"crate_id":6,"path":["std","path","Component"],"kind":"enum"},"17:6400:14793":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"18:10670:11991":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"5:2915:34194":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:40214:15001":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:30756:11084":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"17:6819:12883":{"crate_id":17,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:41827:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:5320:15401":{"crate_id":6,"path":["std","process","Child"],"kind":"struct"},"15:202:17139":{"crate_id":15,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"18:11800:12180":{"crate_id":18,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:41270:181":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"6:11891:742":{"crate_id":6,"path":["std","i16"],"kind":"primitive"},"18:12178:12235":{"crate_id":18,"path":["object","macho","SymtabCommand"],"kind":"struct"},"12:279:14867":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:43191:15039":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"18:13721:12692":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"19:644:11780":{"crate_id":19,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"7:1721:13405":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"12:665:11119":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"5:7092:11119":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:9105:112":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"7:6578:14033":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:12418:11571":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"4:0:1652":{"crate_id":4,"path":["digest"],"kind":"module"},"1:47178:14633":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"10:174:22892":{"crate_id":10,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:45498:14606":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:5724:14734":{"crate_id":17,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"18:10823:11868":{"crate_id":18,"path":["object","read","SectionIndex"],"kind":"struct"},"12:768:11541":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"22:0:1964":{"crate_id":22,"path":["crypto_common"],"kind":"module"},"6:959:15350":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"18:12224:12259":{"crate_id":18,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:21792:29543":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:5367:22942":{"crate_id":17,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"18:13419:12591":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"25:0:1807":{"crate_id":25,"path":["block_buffer"],"kind":"module"},"5:1350:5300":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:43112:5312":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"24:1031:17038":{"crate_id":24,"path":["typenum","private","IsLessPrivate"],"kind":"trait"},"7:4698:13599":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"18:13744:12693":{"crate_id":18,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"18:12607:12324":{"crate_id":18,"path":["object","macho","Nlist64"],"kind":"struct"},"7:6821:14149":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:39831:14974":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"7:4629:13586":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:1754:14309":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:43086:5316":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:8142:15337":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"18:12419:12290":{"crate_id":18,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"6:11901:1547":{"crate_id":6,"path":["std","usize"],"kind":"primitive"},"12:2087:15353":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:39207:15506":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"18:9641:15209":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:6854:12887":{"crate_id":17,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"5:5832:17142":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:43099:5317":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:3910:17333":{"crate_id":6,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"18:11861:12192":{"crate_id":18,"path":["object","macho","MachHeader64"],"kind":"struct"},"18:12293:12273":{"crate_id":18,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"18:8389:23890":{"crate_id":18,"path":["object","common","SymbolKind"],"kind":"enum"},"4:294:17037":{"crate_id":4,"path":["digest","core_api","wrapper","sealed","Sealed"],"kind":"trait"},"1:20486:17044":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"4:430:1970":{"crate_id":4,"path":["digest","ExtendableOutput"],"kind":"trait"},"18:13265:12548":{"crate_id":18,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"12:1873:14877":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"18:8823:11902":{"crate_id":18,"path":["object","endian","I32Bytes"],"kind":"struct"},"5:6762:11652":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:8745:14267":{"crate_id":6,"path":["std","process","ExitStatus"],"kind":"struct"},"1:41208:15032":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"6:11900:789":{"crate_id":6,"path":["std","isize"],"kind":"primitive"},"4:330:1816":{"crate_id":4,"path":["digest","core_api","UpdateCore"],"kind":"trait"},"1:40284:15008":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:5797:14739":{"crate_id":17,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:43437:15053":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:21663:14316":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"18:12576:12318":{"crate_id":18,"path":["object","macho","NoteCommand"],"kind":"struct"},"7:4619:13585":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:2879:12769":{"crate_id":17,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:1768:610":{"crate_id":6,"path":["std","env"],"kind":"module"},"1:40009:29578":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"7:1908:18875":{"crate_id":7,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:8214:12949":{"crate_id":17,"path":["gimli","read","value","Value"],"kind":"enum"},"17:7244:38932":{"crate_id":17,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"24:642:5380":{"crate_id":24,"path":["typenum","marker_traits","Integer"],"kind":"trait"},"6:1846:15376":{"crate_id":6,"path":["std","env","ArgsOs"],"kind":"struct"},"6:3880:17331":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"7:5880:13885":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:2836:16547":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"18:10142:23981":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"5:1715:11541":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"18:13865:12722":{"crate_id":18,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:20975:17037":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"6:8168:17329":{"crate_id":6,"path":["std","net","Shutdown"],"kind":"enum"},"1:2809:16544":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"18:10555:14696":{"crate_id":18,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"7:4288:13423":{"crate_id":7,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:44040:16726":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"4:484:5272":{"crate_id":4,"path":["digest","core_api","rt_variable","RtVariableCoreWrapper"],"kind":"struct"},"18:9839:15219":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"7:6016:13955":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"18:10857:23900":{"crate_id":18,"path":["object","read","SymbolSection"],"kind":"enum"},"19:590:11788":{"crate_id":19,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:45450:14605":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"18:13698:12679":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:2502:12753":{"crate_id":17,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:4:1014":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"6:5247:120":{"crate_id":6,"path":["std","path","Display"],"kind":"struct"},"1:21453:16756":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"7:4681:13590":{"crate_id":7,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:43685:15071":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:39241:15507":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"6:1572:11541":{"crate_id":6,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"6:4327:15399":{"crate_id":6,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:21746:14321":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:1819:14312":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"18:13135:12518":{"crate_id":18,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"5:6094:17147":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"12:2060:14844":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"5:5710:11622":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"5:264:11603":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:2345:17282":{"crate_id":6,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:3030:12793":{"crate_id":17,"path":["gimli","common","DwoId"],"kind":"struct"},"1:30252:29644":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"5:5484:11635":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"6:936:17250":{"crate_id":6,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"6:11895:1493":{"crate_id":6,"path":["std","u8"],"kind":"primitive"},"7:6605:14043":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"7:5773:13834":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:6179:15271":{"crate_id":17,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:1982:185":{"crate_id":6,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"18:9409:23909":{"crate_id":18,"path":["object","read","archive","Members"],"kind":"enum"},"6:5354:15405":{"crate_id":6,"path":["std","process","ChildStdout"],"kind":"struct"},"18:12046:12219":{"crate_id":18,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:1895:15377":{"crate_id":6,"path":["std","error","Report"],"kind":"struct"},"1:41346:11119":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"7:6136:13992":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:45666:14612":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:44973:14587":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"12:1843:11119":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:7293:12930":{"crate_id":17,"path":["gimli","read","op","Piece"],"kind":"struct"},"7:4392:13492":{"crate_id":7,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:2868:128":{"crate_id":6,"path":["std","io","error","Error"],"kind":"struct"},"6:7835:119":{"crate_id":6,"path":["std","fs","DirBuilder"],"kind":"struct"},"18:13879:12725":{"crate_id":18,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"6:554:15363":{"crate_id":6,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:1985:184":{"crate_id":6,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:47327:11009":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:42774:14573":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"18:8953:11907":{"crate_id":18,"path":["object","read","util","StringTable"],"kind":"struct"},"1:39837:14975":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"7:4707:13604":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"7:4590:13583":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"18:9424:11915":{"crate_id":18,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"12:744:14874":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"17:5071:12827":{"crate_id":17,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:39992:101":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"6:2207:15380":{"crate_id":6,"path":["std","fs","DirEntry"],"kind":"struct"},"6:11446:14291":{"crate_id":6,"path":["std","alloc","System"],"kind":"struct"},"1:2739:5695":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:21754:14322":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:5402:11897":{"crate_id":17,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"4:418:1966":{"crate_id":4,"path":["digest","Update"],"kind":"trait"},"17:6243:38930":{"crate_id":17,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"18:11299:12063":{"crate_id":18,"path":["object","elf","SectionHeader32"],"kind":"struct"},"7:4813:13656":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:40153:14991":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"7:6830:14152":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"7:541:13245":{"crate_id":7,"path":["libc","unix","iovec"],"kind":"struct"},"5:1313:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"}},"external_crates":{"26":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"23":{"name":"generic_array","html_root_url":null},"20":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"block_buffer","html_root_url":null},"22":{"name":"crypto_common","html_root_url":null},"19":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"digest","html_root_url":null},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"27":{"name":"cpufeatures","html_root_url":null},"24":{"name":"typenum","html_root_url":"https://docs.rs/typenum/1.16.0/"},"21":{"name":"blobby","html_root_url":"https://docs.rs/blobby/0.3.1/"},"18":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"6":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":25}