{"root":"0:0:1678","crate_version":"0.10.6","includes_private":false,"index":{"a:1:2668:217-0:127:1652":{"id":"a:1:2668:217-0:127:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2668:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:98:1667":{"id":"0:98:1667","crate_id":0,"name":"Sha224","span":{"filename":"src/lib.rs","begin":[85,0],"end":[85,84]},"visibility":"public","docs":"SHA-224 hasher.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"CoreWrapper","id":"4:492:1644","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CtVariableCoreWrapper","id":"4:473:1645","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"U28","id":"24:2508:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"OidSha224","id":"0:409:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"0:57:1814":{"id":"0:57:1814","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[60,4],"end":[68,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buffer",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Buffer","id":"4:328:1788","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}}}}],["out",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Output","id":"22:16:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:96-0:127:1652":{"id":"0:96-0:127:1652","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[75,19],"end":[75,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"core_api::Sha256VarCore","name":"Sha256VarCore","id":"0:127:1652","glob":false}},"5:676:27638":{"id":"5:676:27638","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:8186:16451-0:132:1653":{"id":"a:1:8186:16451-0:132:1653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8186:16451","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:11892:28137":{"id":"1:11892:28137","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:11891:28116"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"1:42869:14846","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11954:34384":{"id":"1:11954:34384","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3327-0:127:1652":{"id":"b:1:3327-0:127:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2675:5668","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3325:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3329:1467"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:2682:225-0:132:1653":{"id":"a:1:2682:225-0:132:1653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2682:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2533-0:132:1653":{"id":"b:1:2533-0:132:1653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2507:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2503:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2536:127","1:2537:1454"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11905:11124":{"id":"1:11905:11124","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:40591:176","prim@char":"6:11857:411","self::pattern":"1:11565:16485"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11570:15282","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:135":{"id":"0:135","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[89,9],"end":[89,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2248:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:136:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:24:1171-0:132:1653":{"id":"b:24:1171-0:132:1653","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.16.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"24:1168:5367","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["24:1173:183"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11876:5820":{"id":"1:11876:5820","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:40591:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:46":{"id":"0:46","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[25,0],"end":[27,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"22:22:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:47:1804"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:77":{"id":"0:77","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[145,0],"end":[150,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"22:46:1785","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:78:1827"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[113,0],"end":[115,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"22:33:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:71:1808"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11937:34379":{"id":"1:11937:34379","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11570:15282","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11570:15282","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11585:16492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[95,0],"end":[95,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:357:1797","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2523-0:127:1652":{"id":"b:1:2523-0:127:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2497:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2526:11079"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:0:1678":{"id":"0:0:1678","crate_id":0,"name":"sha2","span":{"filename":"src/lib.rs","begin":[1,0],"end":[95,84]},"visibility":"public","docs":"An implementation of the [SHA-2][1] cryptographic hash algorithms.\n\nThere are 6 standard algorithms specified in the SHA-2 standard: [`Sha224`],\n[`Sha256`], [`Sha512_224`], [`Sha512_256`], [`Sha384`], and [`Sha512`].\n\nAlgorithmically, there are only 2 core algorithms: SHA-256 and SHA-512.\nAll other algorithms are just applications of these with different initial\nhash values, and truncated to different digest bit lengths. The first two\nalgorithms in the list are based on SHA-256, while the last three on SHA-512.\n\n# Usage\n\n```rust\nuse hex_literal::hex;\nuse sha2::{Sha256, Sha512, Digest};\n\n// create a Sha256 object\nlet mut hasher = Sha256::new();\n\n// write input message\nhasher.update(b\"hello world\");\n\n// read hash digest and consume hasher\nlet result = hasher.finalize();\n\nassert_eq!(result[..], hex!(\"\n    b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\n\")[..]);\n\n// same for Sha512\nlet mut hasher = Sha512::new();\nhasher.update(b\"hello world\");\nlet result = hasher.finalize();\n\nassert_eq!(result[..], hex!(\"\n    309ecc489c12d6eb4cc40f50c902f2b4d0ed77ee511a7c7a9bcd3ca86d4cd86f\n    989dd35bc5ff499670da34255b45b0cfd830e81f605dcf7dc5542e93ae9cd76f\n\")[..]);\n```\n\nAlso see [RustCrypto/hashes][2] readme.\n\n[1]: https://en.wikipedia.org/wiki/SHA-2\n[2]: https://github.com/RustCrypto/hashes","links":{"`Sha256`":"0:99:1669","`Sha224`":"0:98:1667","`Sha512`":"0:103:1677","`Sha384`":"0:102:1675","`Sha512_256`":"0:101:1673","`Sha512_224`":"0:100:1671"},"attrs":["#![no_std]","#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\",\nhtml_favicon_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\")]","#![warn(missing_docs, rust_2018_idioms)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:5-4:0:1632","0:6-4:358:1633","0:96-0:127:1652","0:97-0:132:1653","0:98:1667","0:99:1669","0:100:1671","0:101:1673","0:102:1675","0:103:1677"],"is_stripped":false}},"1:2537:1454":{"id":"1:2537:1454","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:40733:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"1:2507:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2529:684":{"id":"1:2529:684","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11949:34382":{"id":"1:11949:34382","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:11565:16485","`DoubleEndedIterator`":"1:7174:120","prim@char":"6:11857:411","str::match_indices":"1:11946:34381"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"1:42754:14839","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11570:15282","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11570:15282","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11585:16492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11959:34387":{"id":"1:11959:34387","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6-4:358:1633":{"id":"0:6-4:358:1633","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,23],"end":[54,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"digest::Digest","name":"Digest","id":"4:358:1633","glob":false}},"1:2541:127":{"id":"1:2541:127","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"1:31689:5989","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"1:11981:34395":{"id":"1:11981:34395","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:11527:126","`FromStr`":"1:11526:16165"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:40733:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"1:11526:16165","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:11526:16165","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2233:1861":{"id":"1:2233:1861","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:47:1804":{"id":"0:47:1804","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[26,4],"end":[26,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5229","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5229","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5229","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5229","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5229","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5229","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5229","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UTerm","id":"24:6363:5230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B1","id":"24:5724:5234","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"1:11890:14697":{"id":"1:11890:14697","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"1:42572:11822","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11899:34370":{"id":"1:11899:34370","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"6:11857:411","self::pattern":"1:11565:16485"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11570:15282","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5315":{"id":"5:5315","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5316:35065","5:5317:11034","5:5320:35066","5:5323:35067","5:5331:35068","5:5332:35069","5:5333:16429","5:5334:15796","5:5335:15797"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11987:34396":{"id":"1:11987:34396","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4514:34396"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"1:42885:14769","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:102:1675":{"id":"0:102:1675","crate_id":0,"name":"Sha384","span":{"filename":"src/lib.rs","begin":[93,0],"end":[93,84]},"visibility":"public","docs":"SHA-384 hasher.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"CoreWrapper","id":"4:492:1644","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CtVariableCoreWrapper","id":"4:473:1645","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"U48","id":"24:2568:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"OidSha384","id":"0:377:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"0:55:1809":{"id":"0:55:1809","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[46,4],"end":[46,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"resolved_path","inner":{"name":"TruncSide","id":"4:512:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}},"0:80:658":{"id":"0:80:658","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[154,4],"end":[156,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:9010:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8999:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2231-0:132:1653":{"id":"b:1:2231-0:132:1653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2675:5668","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2225:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2233:1861"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:61":{"id":"0:61","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[78,0],"end":[83,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9051:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:62:658"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11940:1904":{"id":"1:11940:1904","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:11565:16485","`DoubleEndedIterator`":"1:7174:120","prim@char":"6:11857:411","str::matches":"1:11940:1904"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"1:42790:14841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11570:15282","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11925:34375":{"id":"1:11925:34375","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:11565:16485","str::split":"1:11913:34372","prim@char":"6:11857:411","str::split_terminator":"1:11922:34374"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"1:42654:14835","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11570:15282","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11570:15282","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11585:16492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2542:1453":{"id":"1:2542:1453","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:40733:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"1:2507:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11893:34368":{"id":"1:11893:34368","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"1:42840:14843","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11989:16361":{"id":"1:11989:16361","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4515:16361"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"1:42894:14757","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[17,9],"end":[17,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2248:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:131:415"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11916:28134":{"id":"1:11916:28134","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"6:11857:411","self::pattern":"1:11565:16485"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"1:11389:5295","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11570:15282","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:67:1805":{"id":"0:67:1805","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[102,4],"end":[102,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Eager","id":"25:77:1784","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"1:11983:15795":{"id":"1:11983:15795","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11869:34361":{"id":"1:11869:34361","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:11867:34360"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11984:15799":{"id":"1:11984:15799","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11865:11086":{"id":"1:11865:11086","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11867:34360":{"id":"1:11867:34360","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11978:34394":{"id":"1:11978:34394","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:11857:411","self::pattern":"1:11565:16485"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11570:15282","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11570:15282","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11585:16492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11919:34373":{"id":"1:11919:34373","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:11565:16485","`DoubleEndedIterator`":"1:7174:120","prim@char":"6:11857:411","str::split":"1:11913:34372"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"1:42604:5282","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11570:15282","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11570:15282","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11585:16492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11902:34371":{"id":"1:11902:34371","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"6:11857:411","self::pattern":"1:11565:16485"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11570:15282","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11570:15282","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11585:16492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:64":{"id":"0:64","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[97,0],"end":[99,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"22:22:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:65:1804"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:103:1677":{"id":"0:103:1677","crate_id":0,"name":"Sha512","span":{"filename":"src/lib.rs","begin":[95,0],"end":[95,84]},"visibility":"public","docs":"SHA-512 hasher.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"CoreWrapper","id":"4:492:1644","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CtVariableCoreWrapper","id":"4:473:1645","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"U64","id":"24:2616:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"OidSha512","id":"0:393:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"0:69:1806":{"id":"0:69:1806","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[107,4],"end":[110,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["blocks",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"Block","id":"22:12:1786","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11889:14857":{"id":"1:11889:14857","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"6:11857:411"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"1:42562:14829","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:50":{"id":"0:50","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[33,0],"end":[39,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:330:1792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:51:1806"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:3327-0:132:1653":{"id":"b:1:3327-0:132:1653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2675:5668","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3325:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3329:1467"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:2236:27633":{"id":"1:2236:27633","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11931:34377":{"id":"1:11931:34377","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"6:11857:411","str::splitn":"1:11928:34376","self::pattern":"1:11565:16485"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"1:42708:5276","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11570:15282","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11570:15282","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11585:16492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:62:658":{"id":"0:62:658","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[80,4],"end":[82,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:9010:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8999:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"24:1173:183":{"id":"24:1173:183","crate_id":24,"name":"Output","span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.16.0/src/type_operators.rs","begin":[35,4],"end":[35,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:49:1805":{"id":"0:49:1805","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[30,4],"end":[30,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Eager","id":"25:77:1784","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"1:11894:34369":{"id":"1:11894:34369","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"1:42850:14844","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:56:928":{"id":"0:56:928","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[49,4],"end":[57,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["output_size",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:40733:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"InvalidOutputSize","id":"4:522:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11896:31139":{"id":"1:11896:31139","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"6:11857:411","self::pattern":"1:11565:16485"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11570:15282","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:672-0:127:1652":{"id":"b:5:672-0:127:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2248:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:668:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:674:14708","5:675:27637","5:676:27638"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11956:34385":{"id":"1:11956:34385","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11946:34381":{"id":"1:11946:34381","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:11565:16485","`DoubleEndedIterator`":"1:7174:120","prim@char":"6:11857:411","str::rmatch_indices":"1:11949:34382"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"1:42736:14838","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11570:15282","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2536:127":{"id":"1:2536:127","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"1:2507:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"5:5323:35067":{"id":"5:5323:35067","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7180:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2668:217-0:132:1653":{"id":"a:1:2668:217-0:132:1653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2668:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:11888:14848":{"id":"1:11888:14848","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"6:11857:411"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"1:42556:14828","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11895:28122":{"id":"1:11895:28122","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"1:42878:14847","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11864:801":{"id":"1:11864:801","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"6:11857:411"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:672-0:132:1653":{"id":"b:5:672-0:132:1653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2248:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:668:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:674:14708","5:675:27637","5:676:27638"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:674:14708":{"id":"5:674:14708","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"1:11985:15800":{"id":"1:11985:15800","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2538-0:127:1652":{"id":"b:1:2538-0:127:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2497:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2507:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2541:127","1:2542:1453"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5335:15797":{"id":"5:5335:15797","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:11986:15801"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:72":{"id":"0:72","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[117,0],"end":[143,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:341:1793","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:73:1809","0:74:928","0:75:1814"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11872:34362":{"id":"1:11872:34362","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11133:16493"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11891:28116":{"id":"1:11891:28116","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:11892:28137"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"1:42860:14845","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:675:27637":{"id":"5:675:27637","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:71:1808":{"id":"0:71:1808","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[114,4],"end":[114,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5229","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5229","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5229","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5229","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5229","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5229","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5229","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UTerm","id":"24:6363:5230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B1","id":"24:5724:5234","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"1:11887:34367":{"id":"1:11887:34367","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:11886:34366"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5320:35066":{"id":"5:5320:35066","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7180:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11570:15282","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:65:1804":{"id":"0:65:1804","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[98,4],"end":[98,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5229","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5229","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5229","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5229","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5229","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5229","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5229","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5229","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UTerm","id":"24:6363:5230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B1","id":"24:5724:5234","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"5:5331:35068":{"id":"5:5331:35068","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7180:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2682:225-0:127:1652":{"id":"a:1:2682:225-0:127:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2682:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2234-0:132:1653":{"id":"b:1:2234-0:132:1653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2675:5668","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2228:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2236:27633"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:24:1171-0:127:1652":{"id":"b:24:1171-0:127:1652","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.16.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"24:1168:5367","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["24:1173:183"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:99:1669":{"id":"0:99:1669","crate_id":0,"name":"Sha256","span":{"filename":"src/lib.rs","begin":[87,0],"end":[87,84]},"visibility":"public","docs":"SHA-256 hasher.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"CoreWrapper","id":"4:492:1644","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CtVariableCoreWrapper","id":"4:473:1645","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"U32","id":"24:2520:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"OidSha256","id":"0:361:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"1:11882:15577":{"id":"1:11882:15577","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:11886:34366":{"id":"1:11886:34366","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:11887:34367"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11913:34372":{"id":"1:11913:34372","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:11565:16485","`DoubleEndedIterator`":"1:7174:120","prim@char":"6:11857:411","str::split_whitespace":"1:11891:28116","str::rsplit":"1:11919:34373"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"1:42586:5278","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11570:15282","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11922:34374":{"id":"1:11922:34374","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:11565:16485","str::split":"1:11913:34372","prim@char":"6:11857:411","`DoubleEndedIterator`":"1:7174:120","str::rsplit_terminator":"1:11925:34375"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"1:42636:14834","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11570:15282","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2234-0:127:1652":{"id":"b:1:2234-0:127:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2675:5668","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2228:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2236:27633"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:3329:1467":{"id":"1:3329:1467","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"1:38928:14321","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:75:1814":{"id":"0:75:1814","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[134,4],"end":[142,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buffer",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Buffer","id":"4:328:1788","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}}}}],["out",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Output","id":"22:16:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11952:34383":{"id":"1:11952:34383","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11958:34386":{"id":"1:11958:34386","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5333:16429":{"id":"5:5333:16429","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7180:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2732:5669-0:127:1652":{"id":"a:1:2732:5669-0:127:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2732:5669","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:1:2732:5669-0:132:1653":{"id":"a:1:2732:5669-0:132:1653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2732:5669","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:53:1808":{"id":"0:53:1808","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[42,4],"end":[42,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5229","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5229","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5229","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5229","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5229","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5229","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UTerm","id":"24:6363:5230","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B1","id":"24:5724:5234","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5233","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"1:2526:11079":{"id":"1:2526:11079","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2500:132"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:68":{"id":"0:68","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[105,0],"end":[111,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:330:1792","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:69:1806"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:74:928":{"id":"0:74:928","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[121,4],"end":[131,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["output_size",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:40733:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"InvalidOutputSize","id":"4:522:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:54":{"id":"0:54","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[45,0],"end":[69,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:341:1793","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:55:1809","0:56:928","0:57:1814"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:136:415":{"id":"0:136:415","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[89,9],"end":[89,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2231-0:127:1652":{"id":"b:1:2231-0:127:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2675:5668","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2225:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2233:1861"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11878:15575":{"id":"1:11878:15575","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:40591:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11884:34364":{"id":"1:11884:34364","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"6:11863:1378","str::slice_mut_unchecked":"1:11885:34365","crate::ops::Index":"1:2989:16334"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:5332:35069":{"id":"5:5332:35069","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:277:1950","`String`":"5:7180:221"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:277:1950","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6931:14214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5334:15796":{"id":"5:5334:15796","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:11985:15800"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11969:34391":{"id":"1:11969:34391","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:11857:411","self::pattern":"1:11565:16485"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11570:15282","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11570:15282","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11585:16492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5317:11034":{"id":"5:5317:11034","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7180:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11570:15282","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11873:34363":{"id":"1:11873:34363","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2527-0:132:1653":{"id":"b:1:2527-0:132:1653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2529:684"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:60:1827":{"id":"0:60:1827","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[73,4],"end":[75,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:9010:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8999:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:73:1809":{"id":"0:73:1809","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[118,4],"end":[118,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"resolved_path","inner":{"name":"TruncSide","id":"4:512:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}},"5:5316:35065":{"id":"5:5316:35065","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:277:1950","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6931:14214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:277:1950","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6931:14214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2527-0:127:1652":{"id":"b:1:2527-0:127:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2529:684"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:131:415":{"id":"0:131:415","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[17,9],"end":[17,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2533-0:127:1652":{"id":"b:1:2533-0:127:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2507:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2503:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2536:127","1:2537:1454"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:51:1806":{"id":"0:51:1806","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[35,4],"end":[38,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["blocks",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"Block","id":"22:12:1786","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:127:1652":{"id":"0:127:1652","crate_id":0,"name":"Sha256VarCore","span":{"filename":"src/core_api.rs","begin":[18,0],"end":[21,1]},"visibility":"public","docs":"Core block-level SHA-256 hasher with variable output size.\n\nSupports initialization only for 28 and 32 byte output sizes,\ni.e. 224 and 256 bits respectively.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:8187:16450-0:127:1652","a:1:2682:225-0:127:1652","a:1:8186:16451-0:127:1652","a:1:2732:5669-0:127:1652","a:1:2668:217-0:127:1652","b:1:2231-0:127:1652","b:1:3327-0:127:1652","b:1:2527-0:127:1652","b:1:2538-0:127:1652","b:1:2234-0:127:1652","b:1:2533-0:127:1652","b:1:2523-0:127:1652","b:5:672-0:127:1652","b:24:1171-0:127:1652","0:48","0:61","0:52","0:54","0:130","0:59","0:50","0:46","0:45"]}},"1:11943:34380":{"id":"1:11943:34380","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:11565:16485","`DoubleEndedIterator`":"1:7174:120","prim@char":"6:11857:411","str::matches":"1:11940:1904"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"1:42808:14842","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11570:15282","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11570:15282","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11585:16492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11972:34392":{"id":"1:11972:34392","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:11857:411","self::pattern":"1:11565:16485"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11570:15282","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11570:15282","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11585:16492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11975:34393":{"id":"1:11975:34393","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:11857:411","self::pattern":"1:11565:16485"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11570:15282","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2523-0:132:1653":{"id":"b:1:2523-0:132:1653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2497:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2526:11079"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11874:311":{"id":"1:11874:311","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:11875:5814","`u8`":"6:11874:1475"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11934:34378":{"id":"1:11934:34378","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11570:15282","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11986:15801":{"id":"1:11986:15801","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11863":{"id":"1:11863","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["1:11864:801","1:11865:11086","1:11866:34359","1:11867:34360","1:11869:34361","1:11872:34362","1:11873:34363","1:11874:311","1:11875:5814","1:11876:5820","1:11878:15575","1:11880:15576","1:11882:15577","1:11884:34364","1:11885:34365","1:11886:34366","1:11887:34367","1:11888:14848","1:11889:14857","1:11890:14697","1:11891:28116","1:11892:28137","1:11893:34368","1:11894:34369","1:11895:28122","1:11896:31139","1:11899:34370","1:11902:34371","1:11905:11124","1:11909:11085","1:11913:34372","1:11916:28134","1:11919:34373","1:11922:34374","1:11925:34375","1:11928:34376","1:11931:34377","1:11934:34378","1:11937:34379","1:11940:1904","1:11943:34380","1:11946:34381","1:11949:34382","1:11952:34383","1:11954:34384","1:11956:34385","1:11958:34386","1:11959:34387","1:11960:34388","1:11963:34389","1:11966:34390","1:11969:34391","1:11972:34392","1:11975:34393","1:11978:34394","1:11981:34395","1:11983:15795","1:11984:15799","1:11985:15800","1:11986:15801","1:11987:34396","1:11989:16361","1:11990:34397"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11866:34359":{"id":"1:11866:34359","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11963:34389":{"id":"1:11963:34389","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:11857:411","self::pattern":"1:11565:16485"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11570:15282","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:66":{"id":"0:66","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[101,0],"end":[103,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:332:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:67:1805"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11990:34397":{"id":"1:11990:34397","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4512:34397"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"1:42903:14762","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:101:1673":{"id":"0:101:1673","crate_id":0,"name":"Sha512_256","span":{"filename":"src/lib.rs","begin":[91,0],"end":[91,92]},"visibility":"public","docs":"SHA-512/256 hasher.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"CoreWrapper","id":"4:492:1644","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CtVariableCoreWrapper","id":"4:473:1645","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"U32","id":"24:2520:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"OidSha512_256","id":"0:441:1664","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[41,0],"end":[43,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"22:33:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:53:1808"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:59":{"id":"0:59","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[71,0],"end":[76,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"22:46:1785","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:60:1827"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:8187:16450-0:132:1653":{"id":"a:1:8187:16450-0:132:1653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8187:16450","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:5-4:0:1632":{"id":"0:5-4:0:1632","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,17],"end":[54,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"digest","name":"digest","id":"4:0:1632","glob":false}},"0:45":{"id":"0:45","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[23,0],"end":[23,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:357:1797","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:97-0:132:1653":{"id":"0:97-0:132:1653","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[75,34],"end":[75,47]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"core_api::Sha512VarCore","name":"Sha512VarCore","id":"0:132:1653","glob":false}},"1:11966:34390":{"id":"1:11966:34390","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:11857:411","self::pattern":"1:11565:16485"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11570:15282","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11875:5814":{"id":"1:11875:5814","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"6:11874:1475"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:78:1827":{"id":"0:78:1827","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[147,4],"end":[149,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:9010:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8999:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11928:34376":{"id":"1:11928:34376","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"6:11857:411","self::pattern":"1:11565:16485","str::rsplitn":"1:11931:34377"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"1:42690:5280","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11570:15282","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2538-0:132:1653":{"id":"b:1:2538-0:132:1653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2497:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2507:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2541:127","1:2542:1453"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:132:1653":{"id":"0:132:1653","crate_id":0,"name":"Sha512VarCore","span":{"filename":"src/core_api.rs","begin":[90,0],"end":[93,1]},"visibility":"public","docs":"Core block-level SHA-512 hasher with variable output size.\n\nSupports initialization only for 28, 32, 48, and 64 byte output sizes,\ni.e. 224, 256, 384, and 512 bits respectively.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:8187:16450-0:132:1653","a:1:2682:225-0:132:1653","a:1:8186:16451-0:132:1653","a:1:2732:5669-0:132:1653","a:1:2668:217-0:132:1653","b:1:2231-0:132:1653","b:1:3327-0:132:1653","b:1:2527-0:132:1653","b:1:2538-0:132:1653","b:1:2234-0:132:1653","b:1:2533-0:132:1653","b:1:2523-0:132:1653","b:5:672-0:132:1653","b:24:1171-0:132:1653","0:135","0:63","0:79","0:77","0:68","0:66","0:70","0:72","0:64"]}},"1:11885:34365":{"id":"1:11885:34365","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"6:11863:1378","crate::ops::IndexMut":"1:2993:16335","str::slice_unchecked":"1:11884:34364"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"a:1:8187:16450-0:127:1652":{"id":"a:1:8187:16450-0:127:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8187:16450","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:1:8186:16451-0:127:1652":{"id":"a:1:8186:16451-0:127:1652","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8186:16451","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:48":{"id":"0:48","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[29,0],"end":[31,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:332:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:49:1805"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:79":{"id":"0:79","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[152,0],"end":[157,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9051:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:80:658"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:100:1671":{"id":"0:100:1671","crate_id":0,"name":"Sha512_224","span":{"filename":"src/lib.rs","begin":[89,0],"end":[89,92]},"visibility":"public","docs":"SHA-512/224 hasher.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"CoreWrapper","id":"4:492:1644","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CtVariableCoreWrapper","id":"4:473:1645","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"U28","id":"24:2508:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"OidSha512_224","id":"0:425:1662","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"1:11909:11085":{"id":"1:11909:11085","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:40591:176","prim@char":"6:11857:411","self::pattern":"1:11565:16485"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11570:15282","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11570:15282","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11585:16492","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11960:34388":{"id":"1:11960:34388","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"6:11857:411","self::pattern":"1:11565:16485"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11570:15282","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11570:15282","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:11590:16491","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11880:15576":{"id":"1:11880:15576","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"1:20641:16551":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"6:10946:11515":{"crate_id":6,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"18:11436:12048":{"crate_id":18,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:39551:14791":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:5460:14510":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:10824:13094":{"crate_id":6,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"18:11951:12163":{"crate_id":18,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:1074:15138":{"crate_id":6,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:6171:12746":{"crate_id":17,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"18:13184:12504":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:2679:222":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:39894:14811":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:3121:37797":{"crate_id":6,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"18:13114:12487":{"crate_id":18,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:6704:12792":{"crate_id":17,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:46447:14417":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:45129:14400":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"6:847:5274":{"crate_id":6,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"13:861:15136":{"crate_id":13,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:9997:36892":{"crate_id":6,"path":["std","sys","unix","os","Env"],"kind":"struct"},"6:3281:17059":{"crate_id":6,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"7:4812:988":{"crate_id":7,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"18:12134:12192":{"crate_id":18,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:4001:103":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"6:8252:14157":{"crate_id":6,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"16:175:22686":{"crate_id":16,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"18:13221:12512":{"crate_id":18,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"18:9488:15002":{"crate_id":18,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"6:8230:17101":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:2757:11047":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"22:36:16822":{"crate_id":22,"path":["crypto_common","KeySizeUser"],"kind":"trait"},"7:1695:13308":{"crate_id":7,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"7:4501:13495":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:43317:14878":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:41893:14823":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"25:22:16777":{"crate_id":25,"path":["block_buffer","sealed","Sealed"],"kind":"trait"},"1:9288:144":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:41910:144":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"24:1274:5343":{"crate_id":24,"path":["typenum","type_operators","Logarithm2"],"kind":"trait"},"1:40802:205":{"crate_id":1,"path":["core","sync","atomic","Ordering","Relaxed"],"kind":"foreign_type"},"7:4468:13477":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"0:102:1675":{"crate_id":0,"path":["sha2","Sha384"],"kind":"typedef"},"1:45909:14410":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:558:15148":{"crate_id":6,"path":["std","thread","JoinHandle"],"kind":"struct"},"13:353:11461":{"crate_id":13,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:44948:14396":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"18:1771:14970":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"6:11214:14696":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:11874:1475":{"crate_id":6,"path":["std","u8"],"kind":"primitive"},"7:1589:13234":{"crate_id":7,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:641:15152":{"crate_id":6,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:44184:14369":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"18:9631:15006":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:2487:12656":{"crate_id":17,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:6210:14576":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"18:10532:127":{"crate_id":18,"path":["object","read","Error"],"kind":"struct"},"6:5428:15193":{"crate_id":6,"path":["std","process","Stdio"],"kind":"struct"},"1:22123:174":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"6:4062:38075":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"7:5722:13747":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"18:9283:14988":{"crate_id":18,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:5203:11814":{"crate_id":17,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:43393:16512":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"6:11856:925":{"crate_id":6,"path":["std","never"],"kind":"primitive"},"1:2507:234":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"18:11356:12041":{"crate_id":18,"path":["object","elf","HashHeader"],"kind":"struct"},"22:39:16823":{"crate_id":22,"path":["crypto_common","IvSizeUser"],"kind":"trait"},"24:653:5355":{"crate_id":24,"path":["typenum","marker_traits","TypeArray"],"kind":"trait"},"18:11087:11982":{"crate_id":18,"path":["object","elf","Sym32"],"kind":"struct"},"21:105:16768":{"crate_id":21,"path":["blobby","Blob5Iterator"],"kind":"struct"},"17:4574:12718":{"crate_id":17,"path":["gimli","constants","DwId"],"kind":"struct"},"4:334:5240":{"crate_id":4,"path":["digest","core_api","FixedOutputCore"],"kind":"trait"},"18:12237:12214":{"crate_id":18,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:8170:15224":{"crate_id":6,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:20578:16549":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:3376:16315":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"6:7805:14111":{"crate_id":6,"path":["std","fs","FileTimes"],"kind":"struct"},"1:2934:5671":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:7522:16362":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"18:12934:12440":{"crate_id":18,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:39571:14793":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:29935:5385":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:40421:14331":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"16:193:22687":{"crate_id":16,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:43360:121":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"6:1051:14627":{"crate_id":6,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:2855:16331":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:42452:5291":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:46558:10982":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:2766:16164":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:2771:12668":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:42439:5290":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:5996:15059":{"crate_id":17,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"5:5726:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"5:3076:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"7:567:13172":{"crate_id":7,"path":["libc","unix","sigval"],"kind":"struct"},"1:42654:14835":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"18:10608:11789":{"crate_id":18,"path":["object","read","SectionIndex"],"kind":"struct"},"17:6690:12684":{"crate_id":17,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:3190:30958":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:4303:11582":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:4092:17098":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:39542:14790":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"18:11259:12012":{"crate_id":18,"path":["object","elf","Versym"],"kind":"struct"},"18:11315:12030":{"crate_id":18,"path":["object","elf","Vernaux"],"kind":"struct"},"6:8437:17152":{"crate_id":6,"path":["std","path","Component"],"kind":"enum"},"4:358:1633":{"crate_id":4,"path":["digest","digest","Digest"],"kind":"trait"},"13:2178:13019":{"crate_id":13,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:46543:10981":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"7:6698:14024":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"18:10528:15047":{"crate_id":18,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:39131:14757":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:40906:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:7646:16984":{"crate_id":6,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:588:16980":{"crate_id":6,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:30141:29525":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:2732:5669":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"5:3595:11528":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:21263:5270":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:4092:15276":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:11879:779":{"crate_id":6,"path":["std","isize"],"kind":"primitive"},"1:41106:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"8:32:22499":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"7:487:13124":{"crate_id":7,"path":["libc","unix","timeval"],"kind":"struct"},"1:3177:16338":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"7:1716:13318":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"4:492:1644":{"crate_id":4,"path":["digest","core_api","wrapper","CoreWrapper"],"kind":"struct"},"18:10973:11960":{"crate_id":18,"path":["object","elf","FileHeader64"],"kind":"struct"},"18:9458:14998":{"crate_id":18,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"13:1840:11547":{"crate_id":13,"path":["hashbrown","set","Drain"],"kind":"struct"},"24:1206:5325":{"crate_id":24,"path":["typenum","type_operators","Max"],"kind":"trait"},"21:11:16758":{"crate_id":21,"path":["blobby","BlobIterator"],"kind":"struct"},"1:40725:190":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"7:4743:13569":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:6702:16426":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"15:202:16878":{"crate_id":15,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:6316:14588":{"crate_id":17,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"24:1153:16796":{"crate_id":24,"path":["typenum","private","PrivateLogarithm2"],"kind":"trait"},"7:4662:13528":{"crate_id":7,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"7:525:13149":{"crate_id":7,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:8181:17069":{"crate_id":6,"path":["std","net","Shutdown"],"kind":"enum"},"1:6608:16439":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:42736:14838":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:38651:16343":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"18:9223:23671":{"crate_id":18,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"5:7163:14726":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"18:13340:12561":{"crate_id":18,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"6:4562:13964":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:40801:180":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"6:10222:36887":{"crate_id":6,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"5:7001:14719":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:40649:5274":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"7:4862:13634":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"7:7434:14089":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"18:9805:11913":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:4662:12721":{"crate_id":17,"path":["gimli","constants","DwOrd"],"kind":"struct"},"6:9874:14817":{"crate_id":6,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"22:51:16826":{"crate_id":22,"path":["crypto_common","KeyIvInit"],"kind":"trait"},"18:12836:12416":{"crate_id":18,"path":["object","pe","ImageSymbol"],"kind":"struct"},"5:803:11534":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:4577:16379":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:7956:12694":{"crate_id":17,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"24:6316:5229":{"crate_id":24,"path":["typenum","uint","UInt"],"kind":"struct"},"1:43325:14880":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:29963:67":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:4144:12707":{"crate_id":17,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:46301:14414":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"18:12265:12218":{"crate_id":18,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"19:599:38577":{"crate_id":19,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:6538:11502":{"crate_id":6,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"6:3899:17074":{"crate_id":6,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"7:6059:13888":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"7:5698:13731":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:2360:17027":{"crate_id":6,"path":["std","fs","canonicalize"],"kind":"function"},"1:2906:116":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"18:8561:11817":{"crate_id":18,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:7825:12907":{"crate_id":17,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:6496:23595":{"crate_id":17,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"18:13557:12620":{"crate_id":18,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"18:13459:12595":{"crate_id":18,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"7:1583:13232":{"crate_id":7,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"18:10894:11939":{"crate_id":18,"path":["object","read","CompressedData"],"kind":"struct"},"5:1420:15128":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"5:7028:11091":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"5:1600:11528":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:8613:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"18:13506:12609":{"crate_id":18,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"7:6488:13920":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"18:8055:23639":{"crate_id":18,"path":["object","common","Architecture"],"kind":"enum"},"1:39519:14786":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:9062:11153":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"18:967:14968":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:21636:29504":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"18:10854:23665":{"crate_id":18,"path":["object","read","CompressionFormat"],"kind":"enum"},"7:4733:13565":{"crate_id":7,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:7288:14631":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"7:4656:13525":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:3124:37802":{"crate_id":6,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:11590:16491":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:8218:14672":{"crate_id":6,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"5:951:11528":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:3314:14811":{"crate_id":6,"path":["std","io","util","Repeat"],"kind":"struct"},"17:5411:12679":{"crate_id":17,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"18:10949:11946":{"crate_id":18,"path":["object","elf","FileHeader32"],"kind":"struct"},"7:6649:13986":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"21:92:16767":{"crate_id":21,"path":["blobby","Blob4Iterator"],"kind":"struct"},"19:624:38574":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:7853:15215":{"crate_id":6,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"18:10108:15033":{"crate_id":18,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"7:7498:14104":{"crate_id":7,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"13:1845:11463":{"crate_id":13,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"18:3249:14977":{"crate_id":18,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"5:6692:11577":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:11839:36864":{"crate_id":6,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:11511:14703":{"crate_id":6,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:45026:14398":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"13:985:14627":{"crate_id":13,"path":["hashbrown","map","Entry"],"kind":"enum"},"4:330:1792":{"crate_id":4,"path":["digest","core_api","UpdateCore"],"kind":"trait"},"1:1800:14223":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:3863:17073":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"7:4681:13538":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"19:548:140":{"crate_id":19,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:42860:14845":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"18:12278:12219":{"crate_id":18,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:11241:14699":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"18:10182:11890":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:3665:15179":{"crate_id":6,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:5433:14506":{"crate_id":17,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:2297:185":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:39235:14757":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:1065:15137":{"crate_id":6,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:10820:15211":{"crate_id":6,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"6:6318:15200":{"crate_id":6,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"24:5780:5232":{"crate_id":24,"path":["typenum","int","NInt"],"kind":"struct"},"1:44995:14397":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"6:5545:203":{"crate_id":6,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"3:0:1925":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"6:11033:14199":{"crate_id":6,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"1:2302:124":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"10:382:22616":{"crate_id":10,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"4:357:1797":{"crate_id":4,"path":["digest","digest","HashMarker"],"kind":"trait"},"13:2184:13020":{"crate_id":13,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"5:1030:36531":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"18:9433:14996":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"18:420:11775":{"crate_id":18,"path":["object","read","any","Section"],"kind":"struct"},"17:2367:12651":{"crate_id":17,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"13:1138:15142":{"crate_id":13,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"18:1903:23700":{"crate_id":18,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"9:0:1679":{"crate_id":9,"path":["cfg_if"],"kind":"module"},"1:39463:14704":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:4084:17097":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:4241:15278":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:10699:5293":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"6:939:16990":{"crate_id":6,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"6:8864:17176":{"crate_id":6,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:9544:11477":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"6:8274:13953":{"crate_id":6,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:39888:14809":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:6059:38557":{"crate_id":17,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:5374:12674":{"crate_id":17,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"18:9885:15028":{"crate_id":18,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:11461:14202":{"crate_id":6,"path":["std","alloc","System"],"kind":"struct"},"20:0:1017":{"crate_id":20,"path":["panic_unwind"],"kind":"module"},"18:11330:12036":{"crate_id":18,"path":["object","elf","NoteHeader32"],"kind":"struct"},"5:1201:15138":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:41369:11154":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:4236:15277":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"6:6743:17180":{"crate_id":6,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:21568:14227":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:40438:14333":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"18:12008:12175":{"crate_id":18,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"5:3504:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"6:2475:15166":{"crate_id":6,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:8495:14177":{"crate_id":6,"path":["std","path","Ancestors"],"kind":"struct"},"24:1111:16782":{"crate_id":24,"path":["typenum","private","IsNotEqualPrivate"],"kind":"trait"},"13:1065:38539":{"crate_id":13,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"7:4871:13640":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"5:6535:11574":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"24:612:5323":{"crate_id":24,"path":["typenum","marker_traits","Zero"],"kind":"trait"},"24:6172:5317":{"crate_id":24,"path":["typenum","array","ATerm"],"kind":"struct"},"7:505:13132":{"crate_id":7,"path":["libc","unix","rusage"],"kind":"struct"},"1:9889:5274":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"5:5640:11547":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:3197:15173":{"crate_id":6,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:2455:5990":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:39668:14803":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:2209:15165":{"crate_id":6,"path":["std","fs","DirEntry"],"kind":"struct"},"7:5910:13845":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"7:4539:13497":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"15:7:15124":{"crate_id":15,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"18:10321:11892":{"crate_id":18,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:50214:14421":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"7:4422:13454":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:10929:1954":{"crate_id":6,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"18:3125:14976":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:2282:12641":{"crate_id":17,"path":["gimli","common","Encoding"],"kind":"struct"},"6:7798:14670":{"crate_id":6,"path":["std","fs","OpenOptions"],"kind":"struct"},"18:8418:23659":{"crate_id":18,"path":["object","common","SectionFlags"],"kind":"enum"},"10:19:22581":{"crate_id":10,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"17:5472:12678":{"crate_id":17,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"18:386:14966":{"crate_id":18,"path":["object","read","any","Segment"],"kind":"struct"},"13:1859:14659":{"crate_id":13,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:2342:14219":{"crate_id":6,"path":["std","fs","metadata"],"kind":"function"},"1:2971:16339":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:42392:5284":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:48939:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:41362:11153":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:21775:16166":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:44583:14385":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"0:103:1677":{"crate_id":0,"path":["sha2","Sha512"],"kind":"typedef"},"1:2454:16777":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:9378:15213":{"crate_id":6,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:20856:14225":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"7:4451:13470":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"5:2894:36463":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:7117:38558":{"crate_id":17,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:42885:14769":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:361:15147":{"crate_id":6,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"6:7537:11508":{"crate_id":6,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:7942:15123":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:5995:11490":{"crate_id":6,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:2344:17022":{"crate_id":6,"path":["std","fs","symlink_metadata"],"kind":"function"},"18:8752:11822":{"crate_id":18,"path":["object","read","util","Bytes"],"kind":"struct"},"25:36:1805":{"crate_id":25,"path":["block_buffer","BufferKind"],"kind":"trait"},"17:5815:23591":{"crate_id":17,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"24:5814:5235":{"crate_id":24,"path":["typenum","int","Z0"],"kind":"struct"},"1:40575:14342":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"6:11861:309":{"crate_id":6,"path":["std","array"],"kind":"primitive"},"24:844:16797":{"crate_id":24,"path":["typenum","private","PrivatePow"],"kind":"trait"},"7:6719:14038":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:679:16983":{"crate_id":6,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"5:262:11528":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"19:671:14963":{"crate_id":19,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"5:2904:34116":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"4:430:1945":{"crate_id":4,"path":["digest","ExtendableOutput"],"kind":"trait"},"18:10139:11838":{"crate_id":18,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"7:6541:13949":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"7:6643:13985":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:8101:14152":{"crate_id":6,"path":["std","io","IoSlice"],"kind":"struct"},"17:2631:12662":{"crate_id":17,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"10:896:22516":{"crate_id":10,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"18:8494:11814":{"crate_id":18,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:8816:14181":{"crate_id":6,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:3632:12703":{"crate_id":17,"path":["gimli","constants","DwUt"],"kind":"struct"},"6:6355:14808":{"crate_id":6,"path":["std","sync","once","Once"],"kind":"struct"},"18:9644:15007":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:12147:135":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"18:13059:12471":{"crate_id":18,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"7:0:806":{"crate_id":7,"path":["libc"],"kind":"module"},"18:9712:11847":{"crate_id":18,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:6911:11489":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"24:1195:5340":{"crate_id":24,"path":["typenum","type_operators","Len"],"kind":"trait"},"6:4669:17090":{"crate_id":6,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"0:99:1669":{"crate_id":0,"path":["sha2","Sha256"],"kind":"typedef"},"6:860:5275":{"crate_id":6,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:5596:12734":{"crate_id":17,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:41026:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:7271:38440":{"crate_id":6,"path":["std","panicking","Hook"],"kind":"enum"},"1:41725:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"7:5813:13788":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"18:9193:38564":{"crate_id":18,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:2491:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"18:12617:12344":{"crate_id":18,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"5:5172:16873":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:7278:12687":{"crate_id":17,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:10668:14691":{"crate_id":6,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:29901:5386":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"18:10497:23769":{"crate_id":18,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:39297:14326":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"18:11661:12106":{"crate_id":18,"path":["object","macho","Section32"],"kind":"struct"},"1:43563:14365":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:46512:10979":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:43381:14884":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"18:12816:12408":{"crate_id":18,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"6:8997:36751":{"crate_id":6,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"16:0:1934":{"crate_id":16,"path":["addr2line"],"kind":"module"},"18:13594:12627":{"crate_id":18,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"19:531:14458":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"18:11271:12013":{"crate_id":18,"path":["object","elf","Verdef"],"kind":"struct"},"5:1185:14627":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:5912:203":{"crate_id":6,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"6:9088:14191":{"crate_id":6,"path":["std","time","SystemTime"],"kind":"struct"},"1:4232:204":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"7:7173:14072":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"7:7463:14096":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:29977:29514":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"6:505:11472":{"crate_id":6,"path":["std","thread","PanicGuard"],"kind":"struct"},"18:10434:14491":{"crate_id":18,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:5761:15052":{"crate_id":17,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"7:4618:13505":{"crate_id":7,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:22786:14246":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"18:12322:12226":{"crate_id":18,"path":["object","macho","Nlist64"],"kind":"struct"},"1:39491:14782":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:39654:14802":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:2678:223":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:10940:11514":{"crate_id":6,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:10655:14670":{"crate_id":6,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"6:933:15130":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:7309:12688":{"crate_id":17,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:2680:108":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:21659:14233":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:2574:115":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:38910:15287":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:7136:149":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"18:13231:12517":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:40792:11091":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"6:7793:15213":{"crate_id":6,"path":["std","fs","ReadDir"],"kind":"struct"},"17:5664:14529":{"crate_id":17,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:5122:12730":{"crate_id":17,"path":["gimli","constants","DwOp"],"kind":"struct"},"18:9700:15014":{"crate_id":18,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"7:4369:13429":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:9064:11154":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:2300:12643":{"crate_id":17,"path":["gimli","common","LineEncoding"],"kind":"struct"},"5:4099:11483":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"24:1016:16817":{"crate_id":24,"path":["typenum","private","PrivateMax"],"kind":"trait"},"1:41226:10990":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:31689:5989":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"7:553:13164":{"crate_id":7,"path":["libc","unix","winsize"],"kind":"struct"},"18:13100:12480":{"crate_id":18,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:7567:23600":{"crate_id":17,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"6:8740:15229":{"crate_id":6,"path":["std","process","CommandArgs"],"kind":"struct"},"17:8069:127":{"crate_id":17,"path":["gimli","read","Error"],"kind":"enum"},"18:9831:15020":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"13:810:15143":{"crate_id":13,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:2989:16334":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:21713:29508":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"18:9751:14477":{"crate_id":18,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:9051:111":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"18:11300:12024":{"crate_id":18,"path":["object","elf","Verneed"],"kind":"struct"},"7:473:13116":{"crate_id":7,"path":["libc","unix","group"],"kind":"struct"},"24:2392:16777":{"crate_id":24,"path":["typenum","sealed","Sealed"],"kind":"trait"},"24:1261:5339":{"crate_id":24,"path":["typenum","type_operators","IsGreaterOrEqual"],"kind":"trait"},"1:2675:5668":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"5:7134:29523":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:11880:1528":{"crate_id":6,"path":["std","usize"],"kind":"primitive"},"1:2796:16325":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:8052:15219":{"crate_id":6,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"6:1771:600":{"crate_id":6,"path":["std","env"],"kind":"module"},"18:9328:14992":{"crate_id":18,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"6:8489:5274":{"crate_id":6,"path":["std","path","Iter"],"kind":"struct"},"18:11070:11980":{"crate_id":18,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"13:2190:38540":{"crate_id":13,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:44873:14394":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"18:10332:23767":{"crate_id":18,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"7:6548:13953":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"18:13572:12621":{"crate_id":18,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"18:13354:12567":{"crate_id":18,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"24:5724:5234":{"crate_id":24,"path":["typenum","bit","B1"],"kind":"struct"},"18:10682:11927":{"crate_id":18,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:44851:14393":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:5703:14531":{"crate_id":17,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:20426:30959":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:41639:109":{"crate_id":1,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"6:6922:11504":{"crate_id":6,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:2919:5387":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:2868:12672":{"crate_id":17,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"7:4981:13692":{"crate_id":7,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:39865:14806":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"18:10670:14496":{"crate_id":18,"path":["object","read","SymbolMap"],"kind":"struct"},"6:5309:15186":{"crate_id":6,"path":["std","process","Child"],"kind":"struct"},"7:4396:13441":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:11229:15206":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"24:828:16800":{"crate_id":24,"path":["typenum","private","PrivateSub"],"kind":"trait"},"18:9061:11838":{"crate_id":18,"path":["object","read","any","SymbolTable"],"kind":"struct"},"18:9165:38563":{"crate_id":18,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:48926:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:1898:15162":{"crate_id":6,"path":["std","error","Report"],"kind":"struct"},"6:5168:187":{"crate_id":6,"path":["std","path","Path"],"kind":"struct"},"6:3927:17077":{"crate_id":6,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"14:226:13018":{"crate_id":14,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:3689:12704":{"crate_id":17,"path":["gimli","constants","DwCfa"],"kind":"struct"},"18:12485:12238":{"crate_id":18,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"18:8951:38565":{"crate_id":18,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"10:111:22527":{"crate_id":10,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"1:2792:16321":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"18:12781:12404":{"crate_id":18,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:44274:14373":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"7:62:17214":{"crate_id":7,"path":["libc","unix","DIR"],"kind":"enum"},"19:515:11708":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"18:10845:11902":{"crate_id":18,"path":["object","read","Relocation"],"kind":"struct"},"1:2761:16163":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"6:3159:15172":{"crate_id":6,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"18:10466:14493":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"18:11997:12173":{"crate_id":18,"path":["object","macho","DylibReference"],"kind":"struct"},"6:11166:15255":{"crate_id":6,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:4402:17102":{"crate_id":6,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"6:11823:38435":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"7:4921:13663":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:4630:17102":{"crate_id":6,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:10205:15192":{"crate_id":6,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"18:11939:12161":{"crate_id":18,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"7:4361:13426":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:4357:12712":{"crate_id":17,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:1847:15160":{"crate_id":6,"path":["std","env","Args"],"kind":"struct"},"6:5488:13874":{"crate_id":6,"path":["std","process","exit"],"kind":"function"},"7:5786:13781":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"18:11828:12131":{"crate_id":18,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"18:9658:15008":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:7529:16435":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:4725:11484":{"crate_id":6,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"7:4781:13584":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:6517:14595":{"crate_id":17,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:956:15135":{"crate_id":6,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"6:8151:11822":{"crate_id":6,"path":["std","io","Bytes"],"kind":"struct"},"17:7603:12870":{"crate_id":17,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"7:653:17626":{"crate_id":7,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:1611:579":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"6:8880:17178":{"crate_id":6,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"19:521:27409":{"crate_id":19,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:3566:12701":{"crate_id":17,"path":["gimli","constants","DwSect"],"kind":"struct"},"18:9303:11831":{"crate_id":18,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"18:13158:12498":{"crate_id":18,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:4689:12722":{"crate_id":17,"path":["gimli","constants","DwDsc"],"kind":"struct"},"10:956:22513":{"crate_id":10,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:4244:15183":{"crate_id":6,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"5:3644:14663":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:9107:14682":{"crate_id":6,"path":["std","time","SystemTimeError"],"kind":"struct"},"5:771:11531":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:5675:15194":{"crate_id":6,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"10:800:13078":{"crate_id":10,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"13:387:38534":{"crate_id":13,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"18:8162:23651":{"crate_id":18,"path":["object","common","SectionKind"],"kind":"enum"},"6:2207:128":{"crate_id":6,"path":["std","fs","File"],"kind":"struct"},"5:1230:15142":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"6:8176:15226":{"crate_id":6,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:4:1000":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"17:7847:12908":{"crate_id":17,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"24:613:179":{"crate_id":24,"path":["typenum","marker_traits","Ord"],"kind":"trait"},"6:4316:15184":{"crate_id":6,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:5219:11815":{"crate_id":17,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"5:668:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:2358:17026":{"crate_id":6,"path":["std","fs","read_link"],"kind":"function"},"6:6282:163":{"crate_id":6,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:2509:12657":{"crate_id":17,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"18:9627:15005":{"crate_id":18,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:8802:15231":{"crate_id":6,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:43313:14877":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:38856:200":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:9069:14190":{"crate_id":6,"path":["std","time","Instant"],"kind":"struct"},"6:10833:15193":{"crate_id":6,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:5541:14517":{"crate_id":17,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"12:44:13025":{"crate_id":12,"path":["adler","Adler32"],"kind":"struct"},"18:9118:38561":{"crate_id":18,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"6:1564:5274":{"crate_id":6,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:42484:5287":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"18:11721:12115":{"crate_id":18,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"5:6940:11091":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:920:15143":{"crate_id":6,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"18:12060:12181":{"crate_id":18,"path":["object","macho","RpathCommand"],"kind":"struct"},"18:12695:12387":{"crate_id":18,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"5:2075:14710":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"25:93:127":{"crate_id":25,"path":["block_buffer","Error"],"kind":"struct"},"6:7518:11506":{"crate_id":6,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"24:1272:5350":{"crate_id":24,"path":["typenum","type_operators","SquareRoot"],"kind":"trait"},"17:2341:12650":{"crate_id":17,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:42690:5280":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"4:332:1789":{"crate_id":4,"path":["digest","core_api","BufferKindUser"],"kind":"trait"},"10:592:22531":{"crate_id":10,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"8:0:1518":{"crate_id":8,"path":["unwind"],"kind":"module"},"7:586:13182":{"crate_id":7,"path":["libc","unix","servent"],"kind":"struct"},"1:20828:16542":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"17:7249:15111":{"crate_id":17,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:39316:14775":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:41355:11151":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"18:13047:12465":{"crate_id":18,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:2129:580":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"18:562:11934":{"crate_id":18,"path":["object","read","any","Symbol"],"kind":"struct"},"1:43337:14883":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"18:9820:15019":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"6:8940:36785":{"crate_id":6,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:10172:5280":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"7:1710:13317":{"crate_id":7,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:7135:38560":{"crate_id":17,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"7:7446:14091":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"7:5741:13749":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:5323:15189":{"crate_id":6,"path":["std","process","ChildStdin"],"kind":"struct"},"1:21515:14740":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"7:5752:13757":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"19:491:14457":{"crate_id":19,"path":["memchr","cow","Imp"],"kind":"struct"},"6:10710:14152":{"crate_id":6,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"18:8774:11824":{"crate_id":18,"path":["object","read","util","ByteString"],"kind":"struct"},"1:11119:5260":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"6:925:15128":{"crate_id":6,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"5:7103:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"18:8295:23655":{"crate_id":18,"path":["object","common","RelocationKind"],"kind":"enum"},"6:3603:17070":{"crate_id":6,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"4:328:1788":{"crate_id":4,"path":["digest","core_api","Buffer"],"kind":"typedef"},"5:3713:11463":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"18:11368:12044":{"crate_id":18,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:6719:38555":{"crate_id":17,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"24:2616:1642":{"crate_id":24,"path":["typenum","generated","consts","U64"],"kind":"typedef"},"1:44897:14395":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"18:8981:14980":{"crate_id":18,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"5:6623:241":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"18:9350:11809":{"crate_id":18,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"7:5938:13859":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"5:3979:5275":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"7:6594:13972":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:8922:106":{"crate_id":6,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:22222:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"7:5843:13811":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"7:4483:13484":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"4:160:1646":{"crate_id":4,"path":["digest","impl_oid_carrier"],"kind":"macro"},"6:6359:15201":{"crate_id":6,"path":["std","sync","once","OnceState"],"kind":"struct"},"13:1872:14661":{"crate_id":13,"path":["hashbrown","set","Union"],"kind":"struct"},"24:621:1795":{"crate_id":24,"path":["typenum","marker_traits","Unsigned"],"kind":"trait"},"18:9681:11767":{"crate_id":18,"path":["object","read","elf","note","Note"],"kind":"struct"},"24:2520:1640":{"crate_id":24,"path":["typenum","generated","consts","U32"],"kind":"typedef"},"1:43021:14858":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"7:6757:14057":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:2841:12813":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"7:4457:13473":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"18:9671:15009":{"crate_id":18,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:11263:11518":{"crate_id":6,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"1:11133:16493":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:4606:12719":{"crate_id":17,"path":["gimli","constants","DwCc"],"kind":"struct"},"13:725:14656":{"crate_id":13,"path":["hashbrown","map","Keys"],"kind":"struct"},"10:586:13026":{"crate_id":10,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"7:1617:13253":{"crate_id":7,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:4385:12713":{"crate_id":17,"path":["gimli","constants","DwAccess"],"kind":"struct"},"18:10394:14490":{"crate_id":18,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:355:15146":{"crate_id":6,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:6200:14575":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"7:7475:14098":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:5921:14731":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:40986:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"18:13382:12573":{"crate_id":18,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"5:3146:14658":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"6:8810:11091":{"crate_id":6,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"7:7487:14100":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"18:8911:38569":{"crate_id":18,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"7:1704:13314":{"crate_id":7,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"18:11536:12086":{"crate_id":18,"path":["object","macho","FatArch32"],"kind":"struct"},"18:13031:12463":{"crate_id":18,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:42586:5278":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"6:3389:15178":{"crate_id":6,"path":["std","io","IoSliceMut"],"kind":"struct"},"6:10863:14180":{"crate_id":6,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:39913:14327":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:10845:36839":{"crate_id":6,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"5:2900:34115":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"18:12850:12420":{"crate_id":18,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"18:10642:23663":{"crate_id":18,"path":["object","read","SymbolSection"],"kind":"enum"},"24:998:16776":{"crate_id":24,"path":["typenum","private","PrivateRem"],"kind":"trait"},"1:9204:15283":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"6:11864:1457":{"crate_id":6,"path":["std","tuple"],"kind":"primitive"},"1:2847:16329":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:11868:633":{"crate_id":6,"path":["std","f64"],"kind":"primitive"},"1:39584:14794":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"5:5835:11483":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:2682:225":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"6:1985:182":{"crate_id":6,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"5:2893:14708":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:11882:13":{"crate_id":6,"path":["std","fn"],"kind":"primitive"},"7:4720:13560":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"6:11875:1472":{"crate_id":6,"path":["std","u16"],"kind":"primitive"},"18:11235:12008":{"crate_id":18,"path":["object","elf","Dyn32"],"kind":"struct"},"17:2389:12652":{"crate_id":17,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:20703:16545":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"23:362:5311":{"crate_id":23,"path":["generic_array","ArrayLength"],"kind":"trait"},"18:10546:23661":{"crate_id":18,"path":["object","read","FileKind"],"kind":"enum"},"25:77:1784":{"crate_id":25,"path":["block_buffer","Eager"],"kind":"struct"},"17:3026:11732":{"crate_id":17,"path":["gimli","arch","Arm"],"kind":"struct"},"7:4714:13557":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:10058:5296":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"18:10752:11929":{"crate_id":18,"path":["object","read","Import"],"kind":"struct"},"1:43576:158":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"6:11871:733":{"crate_id":6,"path":["std","i32"],"kind":"primitive"},"5:5746:11558":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:39241:16386":{"crate_id":1,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"6:7788:11768":{"crate_id":6,"path":["std","fs","Metadata"],"kind":"struct"},"1:39401:15289":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:4367:11164":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"15:160:15124":{"crate_id":15,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:12181:33118":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"7:1534:13201":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"7:4489:13486":{"crate_id":7,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"18:11974:12172":{"crate_id":18,"path":["object","macho","DylibModule64"],"kind":"struct"},"18:10583:23662":{"crate_id":18,"path":["object","read","ObjectKind"],"kind":"enum"},"19:0:1937":{"crate_id":19,"path":["memchr"],"kind":"module"},"19:590:11713":{"crate_id":19,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"10:920:22514":{"crate_id":10,"path":["miniz_oxide","MZError"],"kind":"enum"},"18:12291:12220":{"crate_id":18,"path":["object","macho","NoteCommand"],"kind":"struct"},"7:6079:13902":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"5:3937:11528":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:6174:11486":{"crate_id":6,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:42790:14841":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:2800:16323":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"6:5374:15192":{"crate_id":6,"path":["std","process","Command"],"kind":"struct"},"1:38951:11163":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"6:646:16982":{"crate_id":6,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:44729:14389":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"13:2198:13022":{"crate_id":13,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"18:2916:14975":{"crate_id":18,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:8746:183":{"crate_id":6,"path":["std","process","Output"],"kind":"struct"},"6:8144:14802":{"crate_id":6,"path":["std","io","Take"],"kind":"struct"},"6:11872:734":{"crate_id":6,"path":["std","i64"],"kind":"primitive"},"7:5772:13770":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:484:11471":{"crate_id":6,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"22:46:1785":{"crate_id":22,"path":["crypto_common","AlgorithmName"],"kind":"trait"},"6:2865:207":{"crate_id":6,"path":["std","io","error","Result"],"kind":"typedef"},"17:2705:12665":{"crate_id":17,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:3932:11483":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"24:6272:5262":{"crate_id":24,"path":["typenum","Less"],"kind":"struct"},"2:0:435":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"7:4389:13438":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"13:1852:14658":{"crate_id":13,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:1586:14659":{"crate_id":6,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"18:8796:11825":{"crate_id":18,"path":["object","read","util","StringTable"],"kind":"struct"},"18:9371:14982":{"crate_id":18,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:6567:14608":{"crate_id":17,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"18:12087:12185":{"crate_id":18,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"13:1534:15144":{"crate_id":13,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"18:10257:15041":{"crate_id":18,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"18:13082:12476":{"crate_id":18,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:40455:16445":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"7:5959:13865":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"18:9422:14995":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:2940:5672":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:4164:11162":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"6:7939:15217":{"crate_id":6,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"7:6496:13925":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:40540:14672":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:43164:16506":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"18:12337:11902":{"crate_id":18,"path":["object","macho","Relocation"],"kind":"struct"},"6:8397:5943":{"crate_id":6,"path":["std","path","State"],"kind":"enum"},"18:10360:14481":{"crate_id":18,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"4:294:16777":{"crate_id":4,"path":["digest","core_api","wrapper","sealed","Sealed"],"kind":"trait"},"18:11774:12123":{"crate_id":18,"path":["object","macho","SubClientCommand"],"kind":"struct"},"6:7869:14663":{"crate_id":6,"path":["std","io","cursor","Cursor"],"kind":"struct"},"7:6764:14060":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:4413:12714":{"crate_id":17,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:22288:168":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"6:7944:15218":{"crate_id":6,"path":["std","io","error","Custom"],"kind":"struct"},"1:2333:179":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"6:1824:15159":{"crate_id":6,"path":["std","env","SplitPaths"],"kind":"struct"},"1:40733:207":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"24:6250:5261":{"crate_id":24,"path":["typenum","Greater"],"kind":"struct"},"18:9031:38566":{"crate_id":18,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:3205:16341":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:12357:106":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"19:614:38576":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:3453:17054":{"crate_id":6,"path":["std","io","BufRead"],"kind":"trait"},"6:5236:119":{"crate_id":6,"path":["std","path","Display"],"kind":"struct"},"6:5491:17157":{"crate_id":6,"path":["std","process","Termination"],"kind":"trait"},"6:1575:11463":{"crate_id":6,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"18:8368:23657":{"crate_id":18,"path":["object","common","FileFlags"],"kind":"enum"},"7:7469:14097":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:39594:14795":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"7:6628:13979":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:41940:14825":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:42530:14358":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:11585:16492":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"18:10708:14497":{"crate_id":18,"path":["object","read","ObjectMap"],"kind":"struct"},"7:4218:13336":{"crate_id":7,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"18:10445:11902":{"crate_id":18,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"5:6506:11560":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"6:8270:15228":{"crate_id":6,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:3668:15180":{"crate_id":6,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:44827:14392":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:9048:164":{"crate_id":6,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:11354:14840":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:3975:17080":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"7:4346:13419":{"crate_id":7,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:43185:14867":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:5751:11488":{"crate_id":6,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:2548:11477":{"crate_id":6,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"4:383:1953":{"crate_id":4,"path":["digest","digest","DynDigest"],"kind":"trait"},"6:413:162":{"crate_id":6,"path":["std","thread","local","LocalKey"],"kind":"struct"},"18:13478:12600":{"crate_id":18,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:534:14499":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"13:1681:143":{"crate_id":13,"path":["hashbrown","set","HashSet"],"kind":"struct"},"19:652:11705":{"crate_id":19,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:43555:15298":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:11278:14831":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:46051:14411":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:8236:15227":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"18:10506:11907":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"6:2538:11479":{"crate_id":6,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:21275:30885":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"7:1899:18607":{"crate_id":7,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:0:1935":{"crate_id":17,"path":["gimli"],"kind":"module"},"1:21369:16777":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"5:1704:11463":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"1:21371:16544":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"24:1221:5369":{"crate_id":24,"path":["typenum","type_operators","IsEqual"],"kind":"trait"},"5:1046:34088":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"18:13413:12581":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:41066:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:7044:38559":{"crate_id":17,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"18:11125:11988":{"crate_id":18,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:7970:14646":{"crate_id":17,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"18:13536:12617":{"crate_id":18,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"21:66:16764":{"crate_id":21,"path":["blobby","Blob2Iterator"],"kind":"struct"},"5:5762:16881":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:7132:133":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"18:8510:11815":{"crate_id":18,"path":["object","endian","BigEndian"],"kind":"struct"},"7:7511:14105":{"crate_id":7,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:2657:12663":{"crate_id":17,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"23:437:5383":{"crate_id":23,"path":["generic_array","ArrayConsumer"],"kind":"struct"},"5:1983:15262":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"6:8970:15239":{"crate_id":6,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:6123:12673":{"crate_id":17,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:22057:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"6:7700:15211":{"crate_id":6,"path":["std","env","JoinPathsError"],"kind":"struct"},"21:46:127":{"crate_id":21,"path":["blobby","Error"],"kind":"enum"},"5:3112:14659":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:3010:22734":{"crate_id":17,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"19:719:11726":{"crate_id":19,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"24:1091:16781":{"crate_id":24,"path":["typenum","private","IsLessOrEqualPrivate"],"kind":"trait"},"17:2749:12667":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:6528:14596":{"crate_id":17,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:31725:15212":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"18:11186:11998":{"crate_id":18,"path":["object","elf","Rela64"],"kind":"struct"},"7:6791:14066":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:4749:12724":{"crate_id":17,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:1726:14217":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:39328:29523":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:11870:732":{"crate_id":6,"path":["std","i16"],"kind":"primitive"},"18:12361:12236":{"crate_id":18,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"7:5945:13860":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:8776:29583":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:2225:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"13:300:14653":{"crate_id":13,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"19:538:11710":{"crate_id":19,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"5:2896:14211":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:1083:15142":{"crate_id":6,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:2745:11044":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"1:41885:11361":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"7:7428:14088":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"7:6530:13944":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"7:1604:13246":{"crate_id":7,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"24:1151:16799":{"crate_id":24,"path":["typenum","private","PrivateSquareRoot"],"kind":"trait"},"5:6667:11565":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"7:1550:13209":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:10779:1782":{"crate_id":1,"path":["core","slice","raw","from_ref"],"kind":"function"},"1:3977:15274":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:20409:30882":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:42850:14844":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"5:851:11536":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"18:12176:12200":{"crate_id":18,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:40484:14340":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:30516:180":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:11636:16499":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"7:4805:13598":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"5:3105:5274":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:534:11473":{"crate_id":6,"path":["std","thread","Packet"],"kind":"struct"},"18:11734:11857":{"crate_id":18,"path":["object","macho","Dylib"],"kind":"struct"},"7:4301:13397":{"crate_id":7,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"22:75:11700":{"crate_id":22,"path":["crypto_common","InvalidLength"],"kind":"struct"},"23:346:5397":{"crate_id":23,"path":["generic_array","sequence","Concat"],"kind":"trait"},"7:1645:13278":{"crate_id":7,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"15:221:12992":{"crate_id":15,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"18:12148:12194":{"crate_id":18,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:30035:29522":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:43218:14873":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:9066:191":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"18:10075:15031":{"crate_id":18,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"7:1527:13199":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"18:12739:12392":{"crate_id":18,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:41606:70":{"crate_id":1,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"5:1451:15261":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"18:9071:38570":{"crate_id":18,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:9000:11148":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"18:12609:12341":{"crate_id":18,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:5793:14501":{"crate_id":17,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"12:0:1930":{"crate_id":12,"path":["adler"],"kind":"module"},"19:609:14958":{"crate_id":19,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:7388:15118":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"7:1723:13321":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"7:4687:13540":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"18:9274:14987":{"crate_id":18,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"4:512:1791":{"crate_id":4,"path":["digest","core_api","TruncSide"],"kind":"enum"},"6:621:15149":{"crate_id":6,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:38812:199":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:8999:207":{"crate_id":1,"path":["core","fmt","Result"],"kind":"typedef"},"18:10774:11897":{"crate_id":18,"path":["object","read","Export"],"kind":"struct"},"6:7592:15207":{"crate_id":6,"path":["std","thread","Builder"],"kind":"struct"},"7:5917:13846":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"7:4952:13673":{"crate_id":7,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:5184:22704":{"crate_id":17,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:3402:12700":{"crate_id":17,"path":["gimli","arch","X86"],"kind":"struct"},"24:615:5334":{"crate_id":24,"path":["typenum","marker_traits","Bit"],"kind":"trait"},"6:8420:14171":{"crate_id":6,"path":["std","path","PrefixComponent"],"kind":"struct"},"7:4673:13534":{"crate_id":7,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:10047:15243":{"crate_id":6,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"18:10385:14489":{"crate_id":18,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:7059:14345":{"crate_id":17,"path":["gimli","read","op","Location"],"kind":"enum"},"17:5737:14537":{"crate_id":17,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:41922:5943":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"5:5168:5397":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"5:7205:15272":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:14:1905":{"crate_id":1,"path":["core","write"],"kind":"macro"},"17:2993:12695":{"crate_id":17,"path":["gimli","common","DwoId"],"kind":"struct"},"17:7929:15120":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"24:1007:16815":{"crate_id":24,"path":["typenum","private","PrivateMin"],"kind":"trait"},"18:12797:12407":{"crate_id":18,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:8848:17177":{"crate_id":6,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:6735:15088":{"crate_id":17,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"27:0:1680":{"crate_id":27,"path":["cpufeatures"],"kind":"module"},"7:4313:13400":{"crate_id":7,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:20697:16543":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:38944:15288":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:43520:192":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"17:5963:191":{"crate_id":17,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:5450:14729":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:2808:16324":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:4979:15185":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:8794:5274":{"crate_id":6,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"18:9844:15023":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:4262:12709":{"crate_id":17,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:3921:17076":{"crate_id":6,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:39188:14760":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"18:12550:12289":{"crate_id":18,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"5:5124:11528":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:2813:12809":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"7:4962:13678":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:6330:12749":{"crate_id":17,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:20615:16550":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"18:8666:11820":{"crate_id":18,"path":["object","endian","I32Bytes"],"kind":"struct"},"7:4408:13446":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"21:79:16766":{"crate_id":21,"path":["blobby","Blob3Iterator"],"kind":"struct"},"18:12948:12443":{"crate_id":18,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"13:1029:15138":{"crate_id":13,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"18:12046:12180":{"crate_id":18,"path":["object","macho","UuidCommand"],"kind":"struct"},"10:827:22613":{"crate_id":10,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"18:12884:12423":{"crate_id":18,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:22387:14245":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"18:12756:12394":{"crate_id":18,"path":["object","pe","Guid"],"kind":"struct"},"7:1663:13290":{"crate_id":7,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:43605:14368":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"17:153:11454":{"crate_id":17,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:39344:14776":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"23:123:16770":{"crate_id":23,"path":["generic_array","arr","AddLength"],"kind":"trait"},"6:4891:17134":{"crate_id":6,"path":["std","panic","always_abort"],"kind":"function"},"1:11565:16485":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"18:12955:12445":{"crate_id":18,"path":["object","pe","ImageRelocation"],"kind":"struct"},"5:6963:11538":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"23:195:5389":{"crate_id":23,"path":["generic_array","iter","GenericArrayIter"],"kind":"struct"},"13:1836:11091":{"crate_id":13,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"13:1555:15145":{"crate_id":13,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"13:1044:22670":{"crate_id":13,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:11247:14700":{"crate_id":6,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:8164:14843":{"crate_id":6,"path":["std","io","Lines"],"kind":"struct"},"17:2842:12671":{"crate_id":17,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"7:1747:13330":{"crate_id":7,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"7:4261:13364":{"crate_id":7,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"7:4402:13443":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:46161:14412":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"5:4253:242":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"18:8441:23660":{"crate_id":18,"path":["object","common","SymbolFlags"],"kind":"enum"},"23:300:5396":{"crate_id":23,"path":["generic_array","sequence","Shorten"],"kind":"trait"},"6:4566:13968":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"18:11217:12007":{"crate_id":18,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"5:3656:15262":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"24:942:16809":{"crate_id":24,"path":["typenum","private","PrivateDiv"],"kind":"trait"},"6:4100:17099":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"19:727:11729":{"crate_id":19,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:11013:14179":{"crate_id":6,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:5447:15050":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"7:4994:13697":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:39481:14780":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"13:646:5275":{"crate_id":13,"path":["hashbrown","map","IterMut"],"kind":"struct"},"7:1609:13248":{"crate_id":7,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"18:10822:23664":{"crate_id":18,"path":["object","read","RelocationTarget"],"kind":"enum"},"18:11054:11976":{"crate_id":18,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:11878:1471":{"crate_id":6,"path":["std","u128"],"kind":"primitive"},"5:208:11527":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"5:5418:11560":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"18:11606:12097":{"crate_id":18,"path":["object","macho","LcStr"],"kind":"struct"},"1:2864:16333":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:6743:23596":{"crate_id":17,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:21749:14244":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:10650:14685":{"crate_id":6,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"4:440:1947":{"crate_id":4,"path":["digest","VariableOutput"],"kind":"trait"},"1:11791:111":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"19:507:11705":{"crate_id":19,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:39619:11723":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:11504:14703":{"crate_id":6,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"24:0:1794":{"crate_id":24,"path":["typenum"],"kind":"module"},"1:39633:14798":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"24:1168:5367":{"crate_id":24,"path":["typenum","type_operators","Same"],"kind":"trait"},"1:42125:14356":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"18:9339:14993":{"crate_id":18,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:31729:14754":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"18:9526:15003":{"crate_id":18,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"7:5000:13700":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:2820:16326":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"5:277:1950":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"18:9155:14983":{"crate_id":18,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:5981:14568":{"crate_id":17,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:9978:15159":{"crate_id":6,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"6:6468:15202":{"crate_id":6,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:6109:12744":{"crate_id":17,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"24:1211:5244":{"crate_id":24,"path":["typenum","type_operators","IsLess"],"kind":"trait"},"1:7145:5674":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:44518:14383":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:39510:14785":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:9328:11359":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"18:13366:12569":{"crate_id":18,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:12233:15285":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:9445:11592":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:21584:14741":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"5:1969:14663":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:29712:16132":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"6:11869:735":{"crate_id":6,"path":["std","i8"],"kind":"primitive"},"6:9018:14189":{"crate_id":6,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"24:1905:16788":{"crate_id":24,"path":["typenum","uint","SetBit"],"kind":"trait"},"1:20654:16777":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"6:8903:14185":{"crate_id":6,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"18:9778:14479":{"crate_id":18,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"5:4847:11483":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:39146:14759":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:6790:12797":{"crate_id":17,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:10626:15251":{"crate_id":6,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:7237:12852":{"crate_id":17,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:41146:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:2830:16328":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:8092:14151":{"crate_id":6,"path":["std","io","util","Sink"],"kind":"struct"},"1:45365:14404":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:11877:1474":{"crate_id":6,"path":["std","u64"],"kind":"primitive"},"18:11014:11965":{"crate_id":18,"path":["object","elf","SectionHeader32"],"kind":"struct"},"6:10720:36868":{"crate_id":6,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:10131:5283":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"18:12638:12352":{"crate_id":18,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"7:4795:13592":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"7:4274:13374":{"crate_id":7,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"8:79:22506":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"6:7480:15256":{"crate_id":6,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:5235:12732":{"crate_id":17,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"6:5708:15198":{"crate_id":6,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"24:6363:5230":{"crate_id":24,"path":["typenum","uint","UTerm"],"kind":"struct"},"1:12425:139":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:21111:16569":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"22:42:16824":{"crate_id":22,"path":["crypto_common","InnerUser"],"kind":"trait"},"6:7684:17007":{"crate_id":6,"path":["std","env","VarError"],"kind":"enum"},"24:1184:5326":{"crate_id":24,"path":["typenum","type_operators","Pow"],"kind":"trait"},"18:1962:14974":{"crate_id":18,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"6:7597:14110":{"crate_id":6,"path":["std","thread","ThreadId"],"kind":"struct"},"1:39872:14807":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"18:11594:12095":{"crate_id":18,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:6359:14590":{"crate_id":17,"path":["gimli","read","line","LineRows"],"kind":"struct"},"18:12630:12351":{"crate_id":18,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"5:1339:5274":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:2776:12805":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"5:3138:14660":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"24:611:5246":{"crate_id":24,"path":["typenum","marker_traits","NonZero"],"kind":"trait"},"18:12164:12198":{"crate_id":18,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"6:7618:11512":{"crate_id":6,"path":["std","thread","Thread"],"kind":"struct"},"17:6463:14594":{"crate_id":17,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"19:766:27408":{"crate_id":19,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:7469:12691":{"crate_id":17,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:2727:12666":{"crate_id":17,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:8347:14168":{"crate_id":6,"path":["std","path","Prefix"],"kind":"enum"},"17:5388:12677":{"crate_id":17,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:8983:14186":{"crate_id":6,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:39643:14799":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"5:1354:5275":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"7:4910:13657":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"4:339:5242":{"crate_id":4,"path":["digest","core_api","XofReaderCore"],"kind":"trait"},"13:320:11459":{"crate_id":13,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"18:8272:23654":{"crate_id":18,"path":["object","common","SymbolScope"],"kind":"enum"},"6:3446:17035":{"crate_id":6,"path":["std","io","Seek"],"kind":"trait"},"18:487:14967":{"crate_id":18,"path":["object","read","any","Comdat"],"kind":"struct"},"1:39358:16398":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"typedef"},"1:30533:11056":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"6:5010:15185":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:42556:14828":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:4387:11021":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"0:0:1678":{"crate_id":0,"path":["sha2"],"kind":"module"},"17:4217:12708":{"crate_id":17,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:10186:5276":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:2782:16320":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:11343:15179":{"crate_id":6,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:39603:14796":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"7:6053:13887":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:6298:14580":{"crate_id":17,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"13:1628:11468":{"crate_id":13,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"7:4637:13517":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"18:247:14965":{"crate_id":18,"path":["object","read","util","DebugLen"],"kind":"struct"},"7:123:17269":{"crate_id":7,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:2588:127":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"18:12103:12187":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:7525:16434":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:3869:17072":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"7:4248:13354":{"crate_id":7,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:6070:12741":{"crate_id":17,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"26:0:1679":{"crate_id":26,"path":["cfg_if"],"kind":"module"},"13:632:5274":{"crate_id":13,"path":["hashbrown","map","Iter"],"kind":"struct"},"5:6175:11547":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"18:10520:11910":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"5:677:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:7667:14664":{"crate_id":6,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"18:13374:12572":{"crate_id":18,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"18:8596:11818":{"crate_id":18,"path":["object","endian","U64Bytes"],"kind":"struct"},"5:6525:11573":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"18:13007:12454":{"crate_id":18,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:46569:10983":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:929:15129":{"crate_id":6,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"18:9108:14982":{"crate_id":18,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"10:505:22655":{"crate_id":10,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"18:9183:14984":{"crate_id":18,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"12:36:13024":{"crate_id":12,"path":["adler","algo","U32X4"],"kind":"struct"},"6:11089:14190":{"crate_id":6,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"1:39271:14771":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"18:11873:12136":{"crate_id":18,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:8835:14182":{"crate_id":6,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:6865:14626":{"crate_id":17,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"24:1251:5372":{"crate_id":24,"path":["typenum","type_operators","IsNotEqual"],"kind":"trait"},"7:6094:13913":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"7:561:13169":{"crate_id":7,"path":["libc","unix","linger"],"kind":"struct"},"17:6676:12683":{"crate_id":17,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:38768:195":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:44536:14384":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:6284:12693":{"crate_id":17,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"7:4611:13503":{"crate_id":7,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:46584:10984":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"10:188:22554":{"crate_id":10,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"24:1198:5328":{"crate_id":24,"path":["typenum","type_operators","PartialDiv"],"kind":"trait"},"22:44:1954":{"crate_id":22,"path":["crypto_common","Reset"],"kind":"trait"},"6:914:11463":{"crate_id":6,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"6:8225:14673":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"6:870:11091":{"crate_id":6,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:4921:12729":{"crate_id":17,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:11862:1348":{"crate_id":6,"path":["std","slice"],"kind":"primitive"},"6:3983:17082":{"crate_id":6,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:8608:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"18:11813:12128":{"crate_id":18,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"7:4597:13502":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"7:1509:13191":{"crate_id":7,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"18:13492:12602":{"crate_id":18,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:7815:14671":{"crate_id":6,"path":["std","fs","Permissions"],"kind":"struct"},"1:43113:14861":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:3157:15171":{"crate_id":6,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:7511:12861":{"crate_id":17,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:44775:14390":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:39879:14808":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:2825:12670":{"crate_id":17,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"7:1731:13325":{"crate_id":7,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"18:9293:14989":{"crate_id":18,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"6:6222:203":{"crate_id":6,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"7:4416:13451":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:6146:14571":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:3716:12705":{"crate_id":17,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:40527:14820":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"24:933:16807":{"crate_id":24,"path":["typenum","private","PrivateSetBit"],"kind":"trait"},"6:9371:128":{"crate_id":6,"path":["std","sys","unix","fs","File"],"kind":"struct"},"18:9250:14985":{"crate_id":18,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:2719:11043":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"7:5805:13783":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"7:5728:13748":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"18:13126:12490":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"7:7201:14075":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:2851:16330":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"5:868:5274":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:9559:11599":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"6:11320:11520":{"crate_id":6,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:44380:14377":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:9058:11151":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:46607:10985":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"18:11748:12120":{"crate_id":18,"path":["object","macho","DylibCommand"],"kind":"struct"},"7:4439:13464":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"18:10476:23768":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"18:11893:12137":{"crate_id":18,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:5697:31418":{"crate_id":1,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"18:9021:14981":{"crate_id":18,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"6:2572:15167":{"crate_id":6,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"13:1518:22671":{"crate_id":13,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"5:621:15259":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"6:4671:17091":{"crate_id":6,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"18:12307:12222":{"crate_id":18,"path":["object","macho","Nlist32"],"kind":"struct"},"17:6345:12681":{"crate_id":17,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:6087:11497":{"crate_id":6,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"22:33:1790":{"crate_id":22,"path":["crypto_common","OutputSizeUser"],"kind":"trait"},"17:4849:12727":{"crate_id":17,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:7319:14633":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:2835:12812":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:10310:15229":{"crate_id":6,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"19:574:11705":{"crate_id":19,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:7949:17062":{"crate_id":6,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:6395:11501":{"crate_id":6,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:4519:12716":{"crate_id":17,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:7909:14645":{"crate_id":17,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:40866:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"5:2395:14208":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"7:4775:13582":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:10690:129":{"crate_id":6,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"6:11070:14200":{"crate_id":6,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:22024:175":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"13:697:15129":{"crate_id":13,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"6:2612:15168":{"crate_id":6,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"7:4520:13496":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:11479:14203":{"crate_id":6,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"18:13580:12624":{"crate_id":18,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"18:9947:23742":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"18:10490:11906":{"crate_id":18,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"6:4424:17103":{"crate_id":6,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"7:4787:13587":{"crate_id":7,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:46503:5778":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"5:1410:15143":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:7566:29584":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"7:6728:14041":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:3199:15174":{"crate_id":6,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:42869:14846":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:12480:16538":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"7:7440:14090":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:40776:5274":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"19:96:27398":{"crate_id":19,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:11876:1473":{"crate_id":6,"path":["std","u32"],"kind":"primitive"},"7:4379:13435":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:40946:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:10412:15171":{"crate_id":6,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"23:143:5390":{"crate_id":23,"path":["generic_array","functional","MappedGenericSequence"],"kind":"trait"},"6:4552:17077":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"10:863:22515":{"crate_id":10,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"18:8241:23653":{"crate_id":18,"path":["object","common","SymbolKind"],"kind":"enum"},"18:8393:23658":{"crate_id":18,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:40674:14345":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:48887:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"18:9475:15001":{"crate_id":18,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:9070:11156":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"15:0:1933":{"crate_id":15,"path":["rustc_demangle"],"kind":"module"},"5:1401:14657":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:43333:14882":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"24:814:16792":{"crate_id":24,"path":["typenum","private","PrivateAnd"],"kind":"trait"},"1:42413:5292":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:3236:15175":{"crate_id":6,"path":["std","io","stdio","Stderr"],"kind":"struct"},"22:54:16827":{"crate_id":22,"path":["crypto_common","InnerInit"],"kind":"trait"},"5:2157:34080":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"18:11515:12082":{"crate_id":18,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"24:1231:5370":{"crate_id":24,"path":["typenum","type_operators","IsGreater"],"kind":"trait"},"1:39441:15290":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"18:9382:11833":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"5:4331:11553":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:40665:11091":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"7:531:13152":{"crate_id":7,"path":["libc","unix","hostent"],"kind":"struct"},"5:7180:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"18:8871:14978":{"crate_id":18,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"18:8822:38562":{"crate_id":18,"path":["object","read","any","FileInternal"],"kind":"enum"},"5:6221:11528":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:2804:16322":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"23:260:5393":{"crate_id":23,"path":["generic_array","sequence","GenericSequence"],"kind":"trait"},"1:42903:14762":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"18:11547:12089":{"crate_id":18,"path":["object","macho","FatArch64"],"kind":"struct"},"17:6472:12772":{"crate_id":17,"path":["gimli","read","line","LineRow"],"kind":"struct"},"6:5056:188":{"crate_id":6,"path":["std","path","PathBuf"],"kind":"struct"},"18:11559:12091":{"crate_id":18,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:42808:14842":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:10700:118":{"crate_id":6,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:12208:189":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"13:669:15128":{"crate_id":13,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"18:13192:12505":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"7:5990:13873":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:2788:12808":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:5780:14540":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:20428:30962":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"18:10062:15030":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:42402:5285":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:7267:14628":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:31738:11048":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:40784:5275":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"17:5614:14522":{"crate_id":17,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:5525:14515":{"crate_id":17,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:4358:11583":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:42382:5272":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"24:1031:16778":{"crate_id":24,"path":["typenum","private","IsLessPrivate"],"kind":"trait"},"13:98:14649":{"crate_id":13,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:3263:12699":{"crate_id":17,"path":["gimli","arch","RiscV"],"kind":"struct"},"4:418:1941":{"crate_id":4,"path":["digest","Update"],"kind":"trait"},"1:43086:14860":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"18:10796:11931":{"crate_id":18,"path":["object","read","CodeView"],"kind":"struct"},"1:9010:131":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:10093:5282":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"18:10403:11929":{"crate_id":18,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:2320:12649":{"crate_id":17,"path":["gimli","common","Register"],"kind":"struct"},"1:45443:14405":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:41901:11360":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"18:11034:11975":{"crate_id":18,"path":["object","elf","SectionHeader64"],"kind":"struct"},"18:242:14964":{"crate_id":18,"path":["object","read","util","DebugByte"],"kind":"struct"},"18:9691:15011":{"crate_id":18,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:41588:67":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:2993:16335":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"18:10875:11936":{"crate_id":18,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:2385:16907":{"crate_id":6,"path":["std","io"],"kind":"module"},"15:40:11961":{"crate_id":15,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"18:8475:23638":{"crate_id":18,"path":["object","endian","Endianness"],"kind":"enum"},"6:962:15136":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:1988:181":{"crate_id":6,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:46239:14413":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"5:3151:36478":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"18:10455:11905":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:48504:16578":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"6:9115:36858":{"crate_id":6,"path":["std","sys","common","thread_local","fast_local","fast","DtorState"],"kind":"enum"},"6:6119:15199":{"crate_id":6,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:42313:15297":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"18:12211:12212":{"crate_id":18,"path":["object","macho","SymsegCommand"],"kind":"struct"},"7:4877:13643":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"5:7194:14727":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"19:80:27397":{"crate_id":19,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"7:7195:14073":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:42465:5286":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"7:6000:13876":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:6619:12783":{"crate_id":17,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"22:56:16828":{"crate_id":22,"path":["crypto_common","InnerIvInit"],"kind":"trait"},"6:8329:17138":{"crate_id":6,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:4721:12723":{"crate_id":17,"path":["gimli","constants","DwIdx"],"kind":"struct"},"7:5931:13857":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:39137:14758":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"13:853:15135":{"crate_id":13,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:7298:14632":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:7980:23602":{"crate_id":17,"path":["gimli","read","value","ValueType"],"kind":"enum"},"18:11708:12112":{"crate_id":18,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:44805:14391":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:6829:14622":{"crate_id":17,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"18:11149:11992":{"crate_id":18,"path":["object","elf","Rel32"],"kind":"struct"},"1:20666:16541":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"5:2624:14212":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:1712:16313":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:2825:16327":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"18:13134:12493":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:8781:28927":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:38690:16340":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"17:6034:15077":{"crate_id":17,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:10418:15175":{"crate_id":6,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"5:35:11525":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:2771:12807":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"18:9764:14478":{"crate_id":18,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:20695:16777":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:1618:11036":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:12399:202":{"crate_id":1,"path":["core","task","ready","Ready"],"kind":"struct"},"18:12730:12388":{"crate_id":18,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:42604:5282":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:1894:14224":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"7:4988:13695":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"24:1878:16786":{"crate_id":24,"path":["typenum","uint","GetBit"],"kind":"trait"},"24:785:16804":{"crate_id":24,"path":["typenum","private","Trim"],"kind":"trait"},"23:369:5380":{"crate_id":23,"path":["generic_array","GenericArrayImplEven"],"kind":"struct"},"23:317:5278":{"crate_id":23,"path":["generic_array","sequence","Split"],"kind":"trait"},"15:165:22676":{"crate_id":15,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"7:578:13177":{"crate_id":7,"path":["libc","unix","tms"],"kind":"struct"},"17:2557:12659":{"crate_id":17,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:44204:14370":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:22321:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"5:3907:11547":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:9064:216":{"crate_id":6,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"18:11137:11991":{"crate_id":18,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:2930:5670":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"7:4929:13665":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"21:118:16769":{"crate_id":21,"path":["blobby","Blob6Iterator"],"kind":"struct"},"16:214:22691":{"crate_id":16,"path":["addr2line","RangeAttributes"],"kind":"struct"},"18:1931:14971":{"crate_id":18,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:43502:202":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"6:6572:214":{"crate_id":6,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"13:815:15130":{"crate_id":13,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:2930:22733":{"crate_id":17,"path":["gimli","common","SectionId"],"kind":"enum"},"18:12251:12215":{"crate_id":18,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"24:1131:16783":{"crate_id":24,"path":["typenum","private","IsGreaterOrEqualPrivate"],"kind":"trait"},"7:4476:13482":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:6519:1824":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:43305:14875":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"18:12225:12213":{"crate_id":18,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:950:15133":{"crate_id":6,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:44659:14387":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:48861:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:6931:14214":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"13:834:15133":{"crate_id":13,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"18:11639:12105":{"crate_id":18,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:4564:13966":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:46622:10986":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:46409:14416":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"18:11500:12077":{"crate_id":18,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:11857:411":{"crate_id":6,"path":["std","char"],"kind":"primitive"},"17:7637:14635":{"crate_id":17,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:3087:5269":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:6607:15200":{"crate_id":6,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"18:9553:11838":{"crate_id":18,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:21651:14232":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:3171:16336":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:45519:14407":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"7:4649:13524":{"crate_id":7,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"18:11576:12094":{"crate_id":18,"path":["object","macho","MachHeader64"],"kind":"struct"},"18:13436:12594":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:42708:5276":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"18:10721:11928":{"crate_id":18,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"5:6107:11565":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"1:11338:14837":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:22090:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"7:4727:13562":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"4:473:1645":{"crate_id":4,"path":["digest","core_api","ct_variable","CtVariableCoreWrapper"],"kind":"struct"},"1:9736:16777":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:22189:5265":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"13:2080:15138":{"crate_id":13,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"18:8881:38568":{"crate_id":18,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:8963:15238":{"crate_id":6,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:12551:1591":{"crate_id":1,"path":["core","core_arch","arch","x86_64"],"kind":"module"},"7:1677:13301":{"crate_id":7,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:41709:11161":{"crate_id":1,"path":["core","fmt","FlagV1"],"kind":"enum"},"18:10245:15040":{"crate_id":18,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:4297:12710":{"crate_id":17,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:41621:67":{"crate_id":1,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"1:7252:156":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:3238:15176":{"crate_id":6,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:6654:12787":{"crate_id":17,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"24:1279:5327":{"crate_id":24,"path":["typenum","type_operators","ToInt"],"kind":"trait"},"7:6571:13971":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:22255:167":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"5:768:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:7099:16436":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:3428:11148":{"crate_id":6,"path":["std","io","Write"],"kind":"trait"},"6:8296:14158":{"crate_id":6,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"6:4496:17120":{"crate_id":6,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:40826:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:3971:17079":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"6:11867:632":{"crate_id":6,"path":["std","f32"],"kind":"primitive"},"19:481:14456":{"crate_id":19,"path":["memchr","cow","CowBytes"],"kind":"struct"},"7:4559:13499":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:7677:14667":{"crate_id":6,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"6:734:141":{"crate_id":6,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"7:5690:13729":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:2830:11482":{"crate_id":6,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:42562:14829":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:43198:14871":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"6:10353:11511":{"crate_id":6,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"7:7481:14099":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:10020:5279":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"18:8991:38567":{"crate_id":18,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"19:582:11056":{"crate_id":19,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:20381:11056":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"15:31:15124":{"crate_id":15,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:4667:17088":{"crate_id":6,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"18:13176:12502":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"13:1003:15137":{"crate_id":13,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"14:0:1932":{"crate_id":14,"path":["std_detect"],"kind":"module"},"1:41932:14824":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:7845:118":{"crate_id":6,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:38737:14755":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:8506:14679":{"crate_id":6,"path":["std","path","StripPrefixError"],"kind":"struct"},"7:6521:13943":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:42544:14827":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"13:119:11457":{"crate_id":13,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:5359:15191":{"crate_id":6,"path":["std","process","ChildStderr"],"kind":"struct"},"1:2687:5310":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"25:0:1783":{"crate_id":25,"path":["block_buffer"],"kind":"module"},"17:6842:14625":{"crate_id":17,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:43150:14862":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"5:4751:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"5:6946:14718":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:4413:11165":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"22:0:1939":{"crate_id":22,"path":["crypto_common"],"kind":"module"},"5:3264:11463":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"1:46485:14418":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:2937:5267":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:638:15150":{"crate_id":6,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:42878:14847":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"18:8631:11819":{"crate_id":18,"path":["object","endian","I16Bytes"],"kind":"struct"},"18:9722:11848":{"crate_id":18,"path":["object","read","elf","version","Version"],"kind":"struct"},"7:572:13174":{"crate_id":7,"path":["libc","unix","itimerval"],"kind":"struct"},"5:7277:11568":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:8975:15240":{"crate_id":6,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"5:4139:5274":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:43321:14879":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:7890:14642":{"crate_id":17,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:3437:37229":{"crate_id":6,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:11858:1491":{"crate_id":6,"path":["std","unit"],"kind":"primitive"},"1:45489:14406":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:46699:5851":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:5163:12731":{"crate_id":17,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:6668:12789":{"crate_id":17,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"18:12674:12382":{"crate_id":18,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"6:4833:17127":{"crate_id":6,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"4:424:1943":{"crate_id":4,"path":["digest","FixedOutputReset"],"kind":"trait"},"1:21763:14750":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:4817:12726":{"crate_id":17,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:46660:10988":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"18:13168:12501":{"crate_id":18,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:5682:15197":{"crate_id":6,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"6:11160:14692":{"crate_id":6,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"24:821:16802":{"crate_id":24,"path":["typenum","private","PrivateXor"],"kind":"trait"},"1:20823:16777":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:45049:14399":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"18:11288:12021":{"crate_id":18,"path":["object","elf","Verdaux"],"kind":"struct"},"1:11103:5258":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:4721:16396":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"5:4069:11483":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"14:110:38541":{"crate_id":14,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"13:659:11091":{"crate_id":13,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:44499:14382":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"18:11106:11987":{"crate_id":18,"path":["object","elf","Sym64"],"kind":"struct"},"10:33:22582":{"crate_id":10,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"18:10283:15043":{"crate_id":18,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:42894:14757":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:9274:140":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:9527:11594":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:46363:14415":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:4545:12717":{"crate_id":17,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:11052:14191":{"crate_id":6,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:4742:30099":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"23:0:1840":{"crate_id":23,"path":["generic_array"],"kind":"module"},"17:6593:14609":{"crate_id":17,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:2668:217":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"17:7357:12854":{"crate_id":17,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"18:10088:11884":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"5:7075:14720":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:7543:12680":{"crate_id":17,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:3640:11091":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:4298:11483":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:2497:147":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"18:12972:12448":{"crate_id":18,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:2676:11042":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:48900:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:11863:1378":{"crate_id":6,"path":["std","str"],"kind":"primitive"},"23:403:1841":{"crate_id":23,"path":["generic_array","GenericArray"],"kind":"struct"},"1:42474:5289":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:39421:5290":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:6186:12675":{"crate_id":17,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:3770:15181":{"crate_id":6,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"19:690:14464":{"crate_id":19,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"22:12:1786":{"crate_id":22,"path":["crypto_common","Block"],"kind":"typedef"},"6:11881:1110":{"crate_id":6,"path":["std","reference"],"kind":"primitive"},"17:6252:14579":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:10415:15173":{"crate_id":6,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"17:7093:12830":{"crate_id":17,"path":["gimli","read","op","Piece"],"kind":"struct"},"19:699:14465":{"crate_id":19,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:3188:12698":{"crate_id":17,"path":["gimli","arch","AArch64"],"kind":"struct"},"18:11247:12011":{"crate_id":18,"path":["object","elf","Dyn64"],"kind":"struct"},"17:2535:12658":{"crate_id":17,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:4122:14728":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:2433:12654":{"crate_id":17,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:2500:132":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:40707:15291":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:7343:12690":{"crate_id":17,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:12368:11494":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"24:1276:5330":{"crate_id":24,"path":["typenum","type_operators","Gcd"],"kind":"trait"},"18:9930:11852":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:4441:12715":{"crate_id":17,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"6:11199:14201":{"crate_id":6,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:12825:5850":{"crate_id":1,"path":["core","core_arch","x86","cpuid","__cpuid_count"],"kind":"function"},"18:10350:11897":{"crate_id":18,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:42636:14834":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:48913:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:44358:14376":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:11405:15181":{"crate_id":6,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"0:101:1673":{"crate_id":0,"path":["sha2","Sha512_256"],"kind":"typedef"},"17:6877:23597":{"crate_id":17,"path":["gimli","read","op","DieReference"],"kind":"enum"},"5:7022:11091":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"24:924:16794":{"crate_id":24,"path":["typenum","private","PrivateCmp"],"kind":"trait"},"1:9981:5295":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"4:421:1942":{"crate_id":4,"path":["digest","FixedOutput"],"kind":"trait"},"13:1085:15140":{"crate_id":13,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:2503:235":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:8187:16450":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:2494:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"6:7581:14109":{"crate_id":6,"path":["std","thread","local","AccessError"],"kind":"struct"},"6:4164:15182":{"crate_id":6,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"7:4841:13619":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:1581:1344":{"crate_id":1,"path":["core","mem","size_of"],"kind":"function"},"18:12926:12437":{"crate_id":18,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"18:11161:11995":{"crate_id":18,"path":["object","elf","Rela32"],"kind":"struct"},"6:8786:14180":{"crate_id":6,"path":["std","process","ExitCode"],"kind":"struct"},"18:13091:12479":{"crate_id":18,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"18:9601:11846":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:25596:14247":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"7:4820:13604":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"0:100:1671":{"crate_id":0,"path":["sha2","Sha512_224"],"kind":"typedef"},"1:1647:1073":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"6:7469:11934":{"crate_id":6,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:11025:36866":{"crate_id":6,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:42373:5271":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"18:8526:11816":{"crate_id":18,"path":["object","endian","U16Bytes"],"kind":"struct"},"5:2104:14712":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:11143:11516":{"crate_id":6,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"7:6773:14063":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"5:7150:14724":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"24:642:5354":{"crate_id":24,"path":["typenum","marker_traits","Integer"],"kind":"trait"},"1:38937:12849":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"18:8941:14979":{"crate_id":18,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:39198:14761":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:41612:130":{"crate_id":1,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"17:6017:15073":{"crate_id":17,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:39501:14783":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:6880:36893":{"crate_id":6,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"7:7452:14092":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"18:12349:12229":{"crate_id":18,"path":["object","macho","RelocationInfo"],"kind":"struct"},"7:7386:14087":{"crate_id":7,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:44328:14375":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:3854:12706":{"crate_id":17,"path":["gimli","constants","DwTag"],"kind":"struct"},"24:1051:16779":{"crate_id":24,"path":["typenum","private","IsEqualPrivate"],"kind":"trait"},"17:7497:12682":{"crate_id":17,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"18:10221:15038":{"crate_id":18,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:11001:14178":{"crate_id":6,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"24:783:16773":{"crate_id":24,"path":["typenum","private","InternalMarker"],"kind":"trait"},"1:43329:14881":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:45703:14409":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"7:4751:13572":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:40716:16456":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:7197:5673":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"13:0:1931":{"crate_id":13,"path":["hashbrown"],"kind":"module"},"24:1202:5324":{"crate_id":24,"path":["typenum","type_operators","Min"],"kind":"trait"},"5:3515:5274":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"5:3117:36479":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"7:5890:13837":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"24:5702:5233":{"crate_id":24,"path":["typenum","bit","B0"],"kind":"struct"},"6:8758:14178":{"crate_id":6,"path":["std","process","ExitStatus"],"kind":"struct"},"18:11800:12126":{"crate_id":18,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"18:13214:12510":{"crate_id":18,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:6851:12848":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:39921:14812":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"25:106:5243":{"crate_id":25,"path":["block_buffer","BlockBuffer"],"kind":"struct"},"18:13518:12611":{"crate_id":18,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"7:1520:13196":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:40657:5275":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"18:13527:12615":{"crate_id":18,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:2248:105":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"6:1580:14658":{"crate_id":6,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:21624:14745":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:2894:22732":{"crate_id":17,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:9056:119":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"6:8113:17036":{"crate_id":6,"path":["std","io","SeekFrom"],"kind":"enum"},"22:48:16825":{"crate_id":22,"path":["crypto_common","KeyInit"],"kind":"trait"},"6:6823:11518":{"crate_id":6,"path":["std","sys","common","thread_local","fast_local","fast","Key"],"kind":"struct"},"1:41651:127":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"6:1571:11547":{"crate_id":6,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"6:1597:14661":{"crate_id":6,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:11389:5295":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"24:6294:125":{"crate_id":24,"path":["typenum","Equal"],"kind":"struct"},"6:891:14657":{"crate_id":6,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:43512:208":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:48874:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:10458:11512":{"crate_id":6,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"18:0:1936":{"crate_id":18,"path":["object"],"kind":"module"},"6:1849:15161":{"crate_id":6,"path":["std","env","ArgsOs"],"kind":"struct"},"18:12896:12426":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:39682:14804":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:38834:198":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"18:12022:12177":{"crate_id":18,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:8293:15282":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:4635:12720":{"crate_id":17,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:4313:11163":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"18:11617:12098":{"crate_id":18,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:42572:11822":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:7557:14634":{"crate_id":17,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"7:540:13158":{"crate_id":7,"path":["libc","unix","iovec"],"kind":"struct"},"6:4627:17129":{"crate_id":6,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"24:2508:1639":{"crate_id":24,"path":["typenum","generated","consts","U28"],"kind":"typedef"},"1:21676:29512":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"7:4334:13410":{"crate_id":7,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:6816:14619":{"crate_id":17,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"5:6024:16886":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:39278:16387":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"5:3172:14661":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:6376:23594":{"crate_id":17,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"5:1431:15129":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:5510:14512":{"crate_id":17,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:38752:197":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:2605:12661":{"crate_id":17,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:10214:5277":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:11579:14467":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:5628:14523":{"crate_id":17,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"18:9909:11850":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"24:835:16775":{"crate_id":24,"path":["typenum","private","PrivateIntegerAdd"],"kind":"trait"},"1:45283:14403":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:22354:166":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"7:594:13187":{"crate_id":7,"path":["libc","unix","protoent"],"kind":"struct"},"19:113:27399":{"crate_id":19,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:39472:14779":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:7174:120":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:42494:5288":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"5:6985:11091":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"7:4549:13498":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:7661:16985":{"crate_id":6,"path":["std","backtrace","RawFrame"],"kind":"enum"},"5:6971:34075":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"5:1370:11091":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:1927:17017":{"crate_id":6,"path":["std","error","Indented"],"kind":"struct"},"13:274:14650":{"crate_id":13,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"10:676:22523":{"crate_id":10,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"7:1652:13282":{"crate_id":7,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"7:119:17268":{"crate_id":7,"path":["libc","unix","FILE"],"kind":"enum"},"7:481:13121":{"crate_id":7,"path":["libc","unix","utimbuf"],"kind":"struct"},"5:1442:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:39257:14769":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:20447:16784":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"4:427:1944":{"crate_id":4,"path":["digest","XofReader"],"kind":"trait"},"13:444:141":{"crate_id":13,"path":["hashbrown","map","HashMap"],"kind":"struct"},"18:12118:12191":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"18:13393:12578":{"crate_id":18,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:7483:12692":{"crate_id":17,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:8755:658":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"18:12748:12393":{"crate_id":18,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"7:4429:13457":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:6781:15089":{"crate_id":17,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"18:9539:15004":{"crate_id":18,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"10:649:22533":{"crate_id":10,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"18:13327:12555":{"crate_id":18,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:1735:14220":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:4024:16364":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:11315:14836":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"5:6955:11547":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"6:1788:15158":{"crate_id":6,"path":["std","env","VarsOs"],"kind":"struct"},"1:43175:14863":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"6:3913:17075":{"crate_id":6,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"13:1866:14660":{"crate_id":13,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:11873:730":{"crate_id":6,"path":["std","i128"],"kind":"primitive"},"6:3344:11483":{"crate_id":6,"path":["std","io","Guard"],"kind":"struct"},"1:9060:11152":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:39158:29526":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"7:5660:13704":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:7095:5352":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"7:4697:13546":{"crate_id":7,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:6137:14570":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:0:488":{"crate_id":1,"path":["core"],"kind":"module"},"6:9059:215":{"crate_id":6,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"7:7218:14086":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:10680:14111":{"crate_id":6,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"5:7120:14721":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:5527:14730":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"18:9897:15029":{"crate_id":18,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"5:6993:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:3242:16342":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:6903:14186":{"crate_id":17,"path":["gimli","read","op","Operation"],"kind":"enum"},"24:1190:5321":{"crate_id":24,"path":["typenum","type_operators","Cmp"],"kind":"trait"},"13:60:38538":{"crate_id":13,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:44398:14378":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"10:622:22532":{"crate_id":10,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"13:738:14657":{"crate_id":13,"path":["hashbrown","map","Values"],"kind":"struct"},"1:9068:11155":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:229:207":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:7396:23599":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:46532:5934":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:39533:14789":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:20449:16785":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"7:4583:13501":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:46523:10980":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:8928:15234":{"crate_id":6,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"18:13024:12462":{"crate_id":18,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:21697:29528":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"13:2205:14720":{"crate_id":13,"path":["hashbrown","TryReserveError"],"kind":"enum"},"18:10310:15045":{"crate_id":18,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:7372:38554":{"crate_id":17,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"19:736:27407":{"crate_id":19,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:42970:16505":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:5494:23589":{"crate_id":17,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"18:13039:12464":{"crate_id":18,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"7:4900:13656":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:39210:14762":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:878:14656":{"crate_id":6,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:1527:11483":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"19:564:11712":{"crate_id":19,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"18:9263:14986":{"crate_id":18,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:7861:15216":{"crate_id":6,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"7:1514:13193":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"7:5878:13832":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:22156:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:42992:14849":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:44681:14388":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:44459:14380":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:2216:17019":{"crate_id":6,"path":["std","fs","read_to_string"],"kind":"function"},"6:3118:36833":{"crate_id":6,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"13:762:11463":{"crate_id":13,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"5:6294:11091":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"18:13203:12509":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"4:436:1946":{"crate_id":4,"path":["digest","ExtendableOutputReset"],"kind":"trait"},"7:1571:13224":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"18:13404:12579":{"crate_id":18,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:2370:17032":{"crate_id":6,"path":["std","fs","read_dir"],"kind":"function"},"1:9938:5278":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"7:499:13129":{"crate_id":7,"path":["libc","unix","rlimit"],"kind":"struct"},"17:3457:11736":{"crate_id":17,"path":["gimli","arch","X86_64"],"kind":"struct"},"4:336:5241":{"crate_id":4,"path":["digest","core_api","ExtendableOutputCore"],"kind":"trait"},"7:4571:13500":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:2411:12653":{"crate_id":17,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"18:10207:15034":{"crate_id":18,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"6:8479:14674":{"crate_id":6,"path":["std","path","Components"],"kind":"struct"},"17:4786:12725":{"crate_id":17,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:45207:14401":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:10134:17159":{"crate_id":6,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"5:6373:11528":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"7:5902:13844":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"18:11841:12132":{"crate_id":18,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:39391:11584":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"6:3049:15169":{"crate_id":6,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"17:5558:23590":{"crate_id":17,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:7329:12689":{"crate_id":17,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:39903:11590":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"13:1120:15141":{"crate_id":13,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"18:1021:14969":{"crate_id":18,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"6:0:1370":{"crate_id":6,"path":["std"],"kind":"module"},"18:8212:23652":{"crate_id":18,"path":["object","common","ComdatKind"],"kind":"enum"},"1:40398:152":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"5:2065:11472":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:5343:15190":{"crate_id":6,"path":["std","process","ChildStdout"],"kind":"struct"},"7:1541:13204":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"7:5967:13867":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"18:12909:12432":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:39311:101":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:7452:195":{"crate_id":17,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"18:11485:12073":{"crate_id":18,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"18:9501:11831":{"crate_id":18,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:7580:16777":{"crate_id":6,"path":["std","sealed","Sealed"],"kind":"trait"},"17:3599:12702":{"crate_id":17,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:20854:16547":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:11828:16986":{"crate_id":6,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"7:6667:13997":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"5:7087:16854":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:21106:16546":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"24:6192:5318":{"crate_id":24,"path":["typenum","array","TArr"],"kind":"struct"},"6:1436:143":{"crate_id":6,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"7:4703:13549":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:20394:30882":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:44228:14371":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"18:12874:12422":{"crate_id":18,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:3989:15275":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:2683:12664":{"crate_id":17,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"24:654:5322":{"crate_id":24,"path":["typenum","marker_traits","PowerOfTwo"],"kind":"trait"},"6:7704:15212":{"crate_id":6,"path":["std","error","private","Internal"],"kind":"struct"},"18:12033:12178":{"crate_id":18,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"7:5759:13761":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"18:12860:12421":{"crate_id":18,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"19:755:14474":{"crate_id":19,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"5:2177:14715":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"18:13071:12472":{"crate_id":18,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"23:382:5381":{"crate_id":23,"path":["generic_array","GenericArrayImplOdd"],"kind":"struct"},"1:38878:5266":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:42140:14826":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:6052:15085":{"crate_id":17,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"0:98:1667":{"crate_id":0,"path":["sha2","Sha224"],"kind":"typedef"},"17:4888:12728":{"crate_id":17,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:39218:16385":{"crate_id":1,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:3165:134":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"18:10121:11887":{"crate_id":18,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"13:777:11467":{"crate_id":13,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"7:4882:13645":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:4327:12711":{"crate_id":17,"path":["gimli","constants","DwDs"],"kind":"struct"},"5:1216:15137":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"24:989:16774":{"crate_id":24,"path":["typenum","private","PrivateDivInt"],"kind":"trait"},"22:16:183":{"crate_id":22,"path":["crypto_common","Output"],"kind":"typedef"},"17:2579:12660":{"crate_id":17,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"23:422:5382":{"crate_id":23,"path":["generic_array","ArrayBuilder"],"kind":"struct"},"6:8772:14179":{"crate_id":6,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:42840:14843":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"23:295:5395":{"crate_id":23,"path":["generic_array","sequence","Lengthen"],"kind":"trait"},"1:44250:14372":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"18:11761:12121":{"crate_id":18,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:9181:15160":{"crate_id":6,"path":["std","sys","unix","args","Args"],"kind":"struct"},"10:0:1928":{"crate_id":10,"path":["miniz_oxide"],"kind":"module"},"1:4768:785":{"crate_id":1,"path":["core","iter"],"kind":"module"},"18:9857:15025":{"crate_id":18,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"24:1071:16780":{"crate_id":24,"path":["typenum","private","IsGreaterPrivate"],"kind":"trait"},"13:2053:14627":{"crate_id":13,"path":["hashbrown","set","Entry"],"kind":"enum"},"7:1559:13215":{"crate_id":7,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"7:7521:14107":{"crate_id":7,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:11855:368":{"crate_id":6,"path":["std","bool"],"kind":"primitive"},"18:11853:12133":{"crate_id":18,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"18:12980:12450":{"crate_id":18,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"7:4322:13405":{"crate_id":7,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"7:4945:13670":{"crate_id":7,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:41186:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:1592:14660":{"crate_id":6,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:11384:15180":{"crate_id":6,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"18:9401:11835":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"7:6743:14048":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"19:644:11705":{"crate_id":19,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"18:9362:11838":{"crate_id":18,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"7:5823:13795":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:8244:15224":{"crate_id":6,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:40640:11090":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"4:484:5247":{"crate_id":4,"path":["digest","core_api","rt_variable","RtVariableCoreWrapper"],"kind":"struct"},"18:11909:12142":{"crate_id":18,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"18:9446:14997":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:3160:231":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:8056:12916":{"crate_id":17,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"7:4628:13512":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"18:9873:15027":{"crate_id":18,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"4:457:14215":{"crate_id":4,"path":["digest","core_api","ct_variable","NoOid"],"kind":"struct"},"18:13141:12494":{"crate_id":18,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"5:4268:11553":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"24:2808:1796":{"crate_id":24,"path":["typenum","generated","consts","U128"],"kind":"typedef"},"7:4237:13346":{"crate_id":7,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"18:11199:11999":{"crate_id":18,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"18:11174:11997":{"crate_id":18,"path":["object","elf","Rel64"],"kind":"struct"},"1:11526:16165":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"5:5574:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:5878:22705":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"5:4968:11558":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:6655:30673":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"18:11528:12084":{"crate_id":18,"path":["object","macho","FatHeader"],"kind":"struct"},"18:12198:12211":{"crate_id":18,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"22:22:1787":{"crate_id":22,"path":["crypto_common","BlockSizeUser"],"kind":"trait"},"18:9738:14475":{"crate_id":18,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"6:10645:14683":{"crate_id":6,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"5:3528:5275":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:5559:11487":{"crate_id":6,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:11860:1035":{"crate_id":6,"path":["std","pointer"],"kind":"primitive"},"1:45253:14402":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:41673:71":{"crate_id":1,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"6:5552:11486":{"crate_id":6,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"18:12514:12258":{"crate_id":18,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:2339:186":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:4748:17087":{"crate_id":6,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"24:5746:5231":{"crate_id":24,"path":["typenum","int","PInt"],"kind":"struct"},"7:6634:13981":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:8188:15281":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"13:1832:5274":{"crate_id":13,"path":["hashbrown","set","Iter"],"kind":"struct"},"25:85:5309":{"crate_id":25,"path":["block_buffer","Lazy"],"kind":"struct"},"17:7211:12851":{"crate_id":17,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:6471:17171":{"crate_id":6,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"4:0:1632":{"crate_id":4,"path":["digest"],"kind":"module"},"1:20744:14225":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:42754:14839":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"18:8137:23650":{"crate_id":18,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:6524:17173":{"crate_id":6,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"7:6611:13974":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"7:5951:13863":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:9383:11510":{"crate_id":6,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"18:9317:14991":{"crate_id":18,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"18:12768:12399":{"crate_id":18,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:9746:219":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"18:8814:128":{"crate_id":18,"path":["object","read","any","File"],"kind":"struct"},"18:11787:12124":{"crate_id":18,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:10732:5294":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"7:493:13127":{"crate_id":7,"path":["libc","unix","timespec"],"kind":"struct"},"6:2212:11578":{"crate_id":6,"path":["std","fs","read"],"kind":"function"},"18:13148:12495":{"crate_id":18,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"13:822:16990":{"crate_id":13,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:3961:17078":{"crate_id":6,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:38928:14321":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"18:8110:23637":{"crate_id":18,"path":["object","common","AddressSize"],"kind":"enum"},"17:6270:12676":{"crate_id":17,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:10200:5281":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:4113:17100":{"crate_id":6,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:8014:12849":{"crate_id":17,"path":["gimli","read","value","Value"],"kind":"enum"},"19:681:14461":{"crate_id":19,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:6161:23593":{"crate_id":17,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"4:448:1948":{"crate_id":4,"path":["digest","VariableOutputReset"],"kind":"trait"},"18:10420:11901":{"crate_id":18,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"4:341:1793":{"crate_id":4,"path":["digest","core_api","VariableOutputCore"],"kind":"trait"},"1:43593:14887":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:7166:23598":{"crate_id":17,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"7:1687:13307":{"crate_id":7,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:21:671":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"5:7260:11463":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"6:5896:11486":{"crate_id":6,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:3325:68":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"5:1392:14656":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:2465:12655":{"crate_id":17,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:6241:14578":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"6:8134:14778":{"crate_id":6,"path":["std","io","Chain"],"kind":"struct"},"24:1241:5371":{"crate_id":24,"path":["typenum","type_operators","IsLessOrEqual"],"kind":"trait"},"5:1302:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"6:6071:11494":{"crate_id":6,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:29941:11039":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:45553:14408":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"15:187:22681":{"crate_id":15,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"21:0:1938":{"crate_id":21,"path":["blobby"],"kind":"module"},"1:8186:16451":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:39562:14792":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:3505:11547":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"1:40563:14341":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"10:977:13097":{"crate_id":10,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:9913:5275":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"18:10921:11940":{"crate_id":18,"path":["object","archive","Header"],"kind":"struct"},"18:10997:11961":{"crate_id":18,"path":["object","elf","Ident"],"kind":"struct"},"1:12160:16536":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"18:11684:12111":{"crate_id":18,"path":["object","macho","Section64"],"kind":"struct"},"1:2859:16332":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:8917:15232":{"crate_id":6,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"6:3371:14155":{"crate_id":6,"path":["std","io","Read"],"kind":"trait"},"1:44296:14374":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:4842:17128":{"crate_id":6,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:42364:5273":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:20847:16777":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"10:709:5943":{"crate_id":10,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:8085:12848":{"crate_id":6,"path":["std","io","util","Empty"],"kind":"struct"},"1:42144:5303":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:39450:14778":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"13:2069:15137":{"crate_id":13,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:2228:98":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"19:707:14467":{"crate_id":19,"path":["memchr","memmem","Searcher"],"kind":"struct"},"18:10374:14485":{"crate_id":18,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"5:3732:11528":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:44629:14386":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"5:1066:36532":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:7828:129":{"crate_id":6,"path":["std","fs","FileType"],"kind":"struct"},"11:0:1929":{"crate_id":11,"path":["rustc_std_workspace_alloc"],"kind":"module"},"18:10296:15044":{"crate_id":18,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"13:393:38535":{"crate_id":13,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:2793:12669":{"crate_id":17,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:50235:14422":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"18:8701:11821":{"crate_id":18,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:43341:14199":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"7:6512:13937":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"18:12073:12182":{"crate_id":18,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:38958:14322":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"7:5800:13782":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"18:11343:12040":{"crate_id":18,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:7030:38076":{"crate_id":6,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"18:12964:12446":{"crate_id":18,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:7659:23601":{"crate_id":17,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:43007:14855":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"13:751:11547":{"crate_id":13,"path":["hashbrown","map","Drain"],"kind":"struct"},"4:502:5249":{"crate_id":4,"path":["digest","core_api","xof_reader","XofReaderCoreWrapper"],"kind":"struct"},"1:3150:5268":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"18:10159:11889":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:40504:29517":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"7:4757:13573":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"18:10233:15039":{"crate_id":18,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:5839:23592":{"crate_id":17,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"7:5716:13744":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:46637:10987":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"18:9577:11844":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"23:163:5392":{"crate_id":23,"path":["generic_array","functional","FunctionalSequence"],"kind":"trait"},"6:904:11547":{"crate_id":6,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:44429:14379":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:39264:14770":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"4:531:1949":{"crate_id":4,"path":["digest","InvalidBufferSize"],"kind":"struct"},"18:8339:23656":{"crate_id":18,"path":["object","common","RelocationEncoding"],"kind":"enum"},"7:4328:13407":{"crate_id":7,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"7:4850:13625":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:11570:15282":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"24:2568:1641":{"crate_id":24,"path":["typenum","generated","consts","U48"],"kind":"typedef"},"1:44481:14381":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:43038:14859":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"19:660:14959":{"crate_id":19,"path":["memchr","memmem","FindIter"],"kind":"struct"},"7:4353:13423":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:5949:14565":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:9323:11358":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:21742:14747":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"7:4828:13609":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"7:4890:13650":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"7:4307:13398":{"crate_id":7,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:2867:127":{"crate_id":6,"path":["std","io","error","Error"],"kind":"struct"},"18:10270:15042":{"crate_id":18,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"24:1174:5368":{"crate_id":24,"path":["typenum","type_operators","Abs"],"kind":"trait"},"17:7872:14639":{"crate_id":17,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"7:4224:13337":{"crate_id":7,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:38792:196":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:1568:11091":{"crate_id":6,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"18:13279:12554":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"19:636:11725":{"crate_id":19,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:40589:178":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:12826:5849":{"crate_id":1,"path":["core","core_arch","x86","cpuid","__cpuid"],"kind":"function"},"17:7426:15119":{"crate_id":17,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:39174:14325":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:8157:5278":{"crate_id":6,"path":["std","io","Split"],"kind":"struct"},"1:41348:11152":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:43309:14876":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:2261:22706":{"crate_id":17,"path":["gimli","common","Format"],"kind":"enum"},"17:7435:12858":{"crate_id":17,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"4:291:5248":{"crate_id":4,"path":["digest","core_api","wrapper","CoreProxy"],"kind":"trait"},"1:3388:15273":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"7:546:13161":{"crate_id":7,"path":["libc","unix","pollfd"],"kind":"struct"},"6:1786:15157":{"crate_id":6,"path":["std","env","Vars"],"kind":"struct"},"1:21462:14739":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"18:9791:14480":{"crate_id":18,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"4:522:1798":{"crate_id":4,"path":["digest","InvalidOutputSize"],"kind":"struct"},"6:11699:11524":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:21600:14228":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"15:215:14647":{"crate_id":15,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"18:10625:11925":{"crate_id":18,"path":["object","read","SymbolIndex"],"kind":"struct"},"7:4766:13576":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"}},"external_crates":{"26":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"23":{"name":"generic_array","html_root_url":null},"20":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"block_buffer","html_root_url":null},"22":{"name":"crypto_common","html_root_url":null},"19":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"digest","html_root_url":null},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"27":{"name":"cpufeatures","html_root_url":null},"24":{"name":"typenum","html_root_url":"https://docs.rs/typenum/1.16.0/"},"21":{"name":"blobby","html_root_url":"https://docs.rs/blobby/0.3.1/"},"18":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"9":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"6":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}