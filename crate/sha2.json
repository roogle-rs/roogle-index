{"root":"0:0:2070","crate_version":"0.11.0-pre.4","includes_private":false,"index":{"1:13749:16911":{"id":"1:13749:16911","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11552:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11552:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:68:2591":{"id":"0:68:2591","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[66,4],"end":[74,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Buffer","id":"4:359:2555","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Output","id":"21:60:211","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:84:2581":{"id":"0:84:2581","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[151,4],"end":[151,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Eager","id":"24:160:2551","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:1:2787-0:148:2399":{"id":"b:1:2787-0:148:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32804:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2781:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2789:29754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:74":{"id":"0:74","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[91,0],"end":[99,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3580:2605","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:75:696"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:782:16046":{"id":"5:782:16046","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"b:1:3089-0:153:2400":{"id":"b:1:3089-0:153:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3066:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3063:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3092:11904"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3099-0:153:2400":{"id":"b:1:3099-0:153:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3073:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3069:272","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3102:150","1:3103:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:98":{"id":"0:98","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[209,0],"end":[217,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3580:2605","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:99:696"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13733:1027":{"id":"1:13733:1027","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"6:12599:492"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32861:6440-0:148:2399":{"id":"a:1:32861:6440-0:148:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32861:6440","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:3103:1857":{"id":"1:3103:1857","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:42860:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:3073:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67:1212":{"id":"0:67:1212","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[55,4],"end":[63,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["output_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:42860:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"InvalidOutputSize","id":"4:650:2572","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3089-0:148:2399":{"id":"b:1:3089-0:148:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3066:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3063:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3092:11904"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:152:496":{"id":"0:152:496","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71:2603":{"id":"0:71:2603","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[79,4],"end":[81,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10613:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10594:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3315:261-0:153:2400":{"id":"a:1:3315:261-0:153:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3315:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:90:2586":{"id":"0:90:2586","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[168,4],"end":[168,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"TruncSide","id":"4:640:2558","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}}},"1:13747:16910":{"id":"1:13747:16910","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:42594:203"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11552:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11552:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13751:16912":{"id":"1:13751:16912","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11552:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11552:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13756:34425":{"id":"1:13756:34425","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"1:13755:34424","str::split_at_mut_checked":"1:13758:34427"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13822:34448":{"id":"1:13822:34448","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"6:12599:492","self::pattern":"1:13426:17782"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:16652","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13432:16652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:13454:17787","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5719:17090":{"id":"5:5719:17090","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13845:17094"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:64:2585":{"id":"0:64:2585","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[48,4],"end":[48,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"23:9598:6025","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6025","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6025","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6025","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6025","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6025","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"23:9642:6026","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:9019:6030","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"a:1:42689:17750-0:148:2399":{"id":"a:1:42689:17750-0:148:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42689:17750","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[77,0],"end":[82,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"21:114:2552","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:71:2603"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[47,0],"end":[49,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"21:101:2557","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:64:2585"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:94":{"id":"0:94","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[195,0],"end":[200,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"21:114:2552","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:95:2603"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2816-0:153:2400":{"id":"b:1:2816-0:153:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2804:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2814:11848","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2818:29755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13754:34423":{"id":"1:13754:34423","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"6:12605:1770","crate::ops::IndexMut":"1:3621:6108","str::slice_unchecked":"1:13753:34422"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:62:2582":{"id":"0:62:2582","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[40,4],"end":[44,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"Block","id":"21:56:2553","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13770:34431":{"id":"1:13770:34431","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"6:12599:492","self::pattern":"1:13426:17782"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:16652","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5702":{"id":"5:5702","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5703:35196","5:5704:11795","5:5706:35197","5:5708:35198","5:5716:35199","5:5717:35200","5:5718:17663","5:5719:17090","5:5720:17091"],"negative":false,"synthetic":false,"blanket_impl":null}}},"23:1173:211":{"id":"23:1173:211","crate_id":23,"name":"Output","span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/src/type_operators.rs","begin":[35,4],"end":[35,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"b:1:3959-0:153:2400":{"id":"b:1:3959-0:153:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32804:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3957:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3961:1870"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13821:34447":{"id":"1:13821:34447","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13846:17095":{"id":"1:13846:17095","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5708:35198":{"id":"5:5708:35198","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7759:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:148:2399":{"id":"0:148:2399","crate_id":0,"name":"Sha256VarCore","span":{"filename":"src/core_api.rs","begin":[23,0],"end":[26,1]},"visibility":"public","docs":"Core block-level SHA-256 hasher with variable output size.\n\nSupports initialization only for 28 and 32 byte output sizes,\ni.e. 224 and 256 bits respectively.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:32803:249-0:148:2399","a:1:3315:261-0:148:2399","a:1:3350:11853-0:148:2399","a:1:32861:6440-0:148:2399","a:1:42688:17751-0:148:2399","a:1:42689:17750-0:148:2399","b:1:2784-0:148:2399","b:1:2787-0:148:2399","b:1:2816-0:148:2399","b:1:3089-0:148:2399","b:1:3093-0:148:2399","b:1:3099-0:148:2399","b:1:3104-0:148:2399","b:1:3959-0:148:2399","b:5:780-0:148:2399","b:23:1171-0:148:2399","0:151","0:56","0:57","0:59","0:61","0:63","0:65","0:70","0:72","0:74","0:76"]}}},"1:13775:11950":{"id":"1:13775:11950","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:42594:203","prim@char":"6:12599:492","self::pattern":"1:13426:17782"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:16652","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13763:29949":{"id":"1:13763:29949","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:13764:29950"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:44866:16187","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:56":{"id":"0:56","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[28,0],"end":[28,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:389:2571","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:96":{"id":"0:96","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[202,0],"end":[207,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10646:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:97:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:99:696":{"id":"0:99:696","crate_id":0,"name":"drop","span":{"filename":"src/core_api.rs","begin":[210,4],"end":[216,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:118:2416":{"id":"0:118:2416","crate_id":0,"name":"Sha256","span":{"filename":"src/lib.rs","begin":[41,0],"end":[41,84]},"visibility":"public","docs":"SHA-256 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:620:2392","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:601:2393","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U32","id":"23:2525:2388","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha256","id":"0:397:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:13753:34422":{"id":"1:13753:34422","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"6:12605:1770","str::slice_mut_unchecked":"1:13754:34423","crate::ops::Index":"1:40135:6107"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13816:34444":{"id":"1:13816:34444","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13827:34450":{"id":"1:13827:34450","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:12599:492","self::pattern":"1:13426:17782"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:16652","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13837:34454":{"id":"1:13837:34454","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:12599:492","self::pattern":"1:13426:17782"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:16652","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13432:16652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13449:17788","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13791:34435":{"id":"1:13791:34435","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:13426:17782","str::split":"1:13782:2612","prim@char":"6:12599:492","str::split_terminator":"1:13789:34434"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:44660:16177","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:16652","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13432:16652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13449:17788","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:780-0:153:2400":{"id":"b:5:780-0:153:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2804:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:776:264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:782:16046","5:783:29760","5:784:29761"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13743:352":{"id":"1:13743:352","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:13744:6588","`u8`":"6:12618:1901"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5717:35200":{"id":"5:5717:35200","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:297:2737","`String`":"5:7759:257"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:2737","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13845:17094":{"id":"1:13845:17094","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13806:34440":{"id":"1:13806:34440","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:13426:17782","`DoubleEndedIterator`":"1:8387:134","prim@char":"6:12599:492","str::matches":"1:13804:2687"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44814:16184","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:16652","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13432:16652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13449:17788","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3095:860":{"id":"1:3095:860","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:121:2422":{"id":"0:121:2422","crate_id":0,"name":"Sha384","span":{"filename":"src/lib.rs","begin":[47,0],"end":[47,84]},"visibility":"public","docs":"SHA-384 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:620:2392","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:601:2393","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U48","id":"23:2573:2389","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha384","id":"0:414:2403","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:13854:34461":{"id":"1:13854:34461","crate_id":1,"name":"substr_range","span":null,"visibility":"public","docs":"Returns the range that a substring points to.\n\nReturns `None` if `substr` does not point within `self`.\n\nUnlike [`str::find`], **this does not search through the string**.\nInstead, it uses pointer arithmetic to find where in the string\n`substr` is derived from.\n\nThis is useful for extending [`str::split`] and similar methods.\n\nNote that this method may return false positives (typically either\n`Some(0..0)` or `Some(self.len()..self.len())`) if `substr` is a\nzero-length `str` that points at the beginning or end of another,\nindependent, `str`.\n\n# Examples\n```\n#![feature(substr_range)]\n\nlet data = \"a, b, b, a\";\nlet mut iter = data.split(\", \").map(|s| data.substr_range(s).unwrap());\n\nassert_eq!(iter.next(), Some(0..1));\nassert_eq!(iter.next(), Some(3..4));\nassert_eq!(iter.next(), Some(6..7));\nassert_eq!(iter.next(), Some(9..10));\n```","links":{"`str::split`":"1:13782:2612","`str::find`":"1:13775:11950"},"attrs":["#[must_use]","#[unstable(feature = \"substr_range\", issue = \"126769\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["substr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Range","id":"1:40167:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:61":{"id":"0:61","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[38,0],"end":[45,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:361:2559","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:62:2582"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:85":{"id":"0:85","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[154,0],"end":[161,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:361:2559","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:86:2582"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13766:34430":{"id":"1:13766:34430","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44856:16186","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2784-0:148:2399":{"id":"b:1:2784-0:148:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32804:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2778:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2786:2640"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13789:34434":{"id":"1:13789:34434","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:13426:17782","str::split":"1:13782:2612","prim@char":"6:12599:492","`DoubleEndedIterator`":"1:8387:134","str::rsplit_terminator":"1:13791:34435"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:44642:16176","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:16652","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13804:2687":{"id":"1:13804:2687","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:13426:17782","`DoubleEndedIterator`":"1:8387:134","prim@char":"6:12599:492","str::rmatches":"1:13806:34440"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44796:16183","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:16652","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13778:11910":{"id":"1:13778:11910","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:42594:203","prim@char":"6:12599:492","self::pattern":"1:13426:17782"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:16652","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13432:16652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13449:17788","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2816-0:148:2399":{"id":"b:1:2816-0:148:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2804:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2814:11848","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2818:29755"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13852:17674":{"id":"1:13852:17674","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:5060:17674"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:44900:16105","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:66:2586":{"id":"0:66:2586","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[52,4],"end":[52,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"TruncSide","id":"4:640:2558","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}}},"a:1:3350:11853-0:153:2400":{"id":"a:1:3350:11853-0:153:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3350:11853","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:784:29761":{"id":"5:784:29761","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:151":{"id":"0:151","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2804:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:152:496"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2786:2640":{"id":"1:2786:2640","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3959-0:148:2399":{"id":"b:1:3959-0:148:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32804:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3957:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3961:1870"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:0:2070":{"id":"0:0:2070","crate_id":0,"name":"sha2","span":{"filename":"src/lib.rs","begin":[1,0],"end":[49,84]},"visibility":"public","docs":"# RustCrypto: SHA-2\n\n[![crate][crate-image]][crate-link]\n[![Docs][docs-image]][docs-link]\n![Apache2/MIT licensed][license-image]\n![Rust Version][rustc-image]\n[![Project Chat][chat-image]][chat-link]\n[![Build Status][build-image]][build-link]\n\nPure Rust implementation of the [SHA-2] cryptographic hash algorithms.\n\nThere are 6 standard algorithms specified in the SHA-2 standard: \n`Sha224`, `Sha256`, `Sha512_224`, `Sha512_256`, `Sha384`, and `Sha512`.\n\nAlgorithmically, there are only 2 core algorithms: SHA-256 and SHA-512.\nAll other algorithms are just applications of these with different initial\nhash values, and truncated to different digest bit lengths. The first two\nalgorithms in the list are based on SHA-256, while the last four are based\non SHA-512.\n\n## Examples\n\n### One-shot API\n\n```rust\nuse sha2::{Sha256, Digest};\nuse hex_literal::hex;\n\nlet hash = Sha256::digest(b\"hello world\");\nassert_eq!(hash, hex!(\"b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\"));\n\n// Hex-encode hash using https://docs.rs/base16ct\nlet hex_hash = base16ct::lower::encode_string(&hash);\nassert_eq!(hex_hash, \"b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\");\n```\n\n### Incremental API\n\n```rust\nuse sha2::{Sha256, Sha512, Digest};\nuse hex_literal::hex;\n\nlet mut hasher = Sha256::new();\nhasher.update(b\"hello \");\nhasher.update(b\"world\");\nlet hash256 = hasher.finalize();\n\nassert_eq!(hash256, hex!(\"b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\"));\n\nlet mut hasher = Sha512::new();\nhasher.update(b\"hello world\");\nlet hash512 = hasher.finalize();\n\nassert_eq!(hash512, hex!(\n    \"309ecc489c12d6eb4cc40f50c902f2b4d0ed77ee511a7c7a9bcd3ca86d4cd86f\"\n    \"989dd35bc5ff499670da34255b45b0cfd830e81f605dcf7dc5542e93ae9cd76f\"\n));\n```\n\nAlso, see the [examples section] in the RustCrypto/hashes readme.\n\n## Minimum Supported Rust Version\n\nRust **1.72** or higher.\n\nMinimum supported Rust version can be changed in the future, but it will be\ndone with a minor version bump.\n\n## SemVer Policy\n\n- All on-by-default features of this library are covered by SemVer\n- MSRV is considered exempt from SemVer as noted above\n\n## License\n\nThe crate is licensed under either of:\n\n* [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0)\n* [MIT license](http://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall be\ndual licensed as above, without any additional terms or conditions.\n\n[//]: # (badges)\n\n[crate-image]: https://img.shields.io/crates/v/sha2.svg\n[crate-link]: https://crates.io/crates/sha2\n[docs-image]: https://docs.rs/sha2/badge.svg\n[docs-link]: https://docs.rs/sha2/\n[license-image]: https://img.shields.io/badge/license-Apache2.0/MIT-blue.svg\n[rustc-image]: https://img.shields.io/badge/rustc-1.72+-blue.svg\n[chat-image]: https://img.shields.io/badge/zulip-join_chat-blue.svg\n[chat-link]: https://rustcrypto.zulipchat.com/#narrow/stream/260041-hashes\n[build-image]: https://github.com/RustCrypto/hashes/workflows/sha2/badge.svg?branch=master\n[build-link]: https://github.com/RustCrypto/hashes/actions?query=workflow%3Asha2\n\n[//]: # (general links)\n\n[SHA-2]: https://en.wikipedia.org/wiki/SHA-2\n[examples section]: https://github.com/RustCrypto/hashes#Examples","links":{},"attrs":["#![no_std]","#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\",\nhtml_favicon_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\")]","#![warn(missing_docs, rust_2018_idioms)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:5-4:0:2381","0:6-4:390:2382","0:112-0:105:2397","0:113-0:109:2398","0:115-0:148:2399","0:116-0:153:2400","0:117:2414","0:118:2416","0:119:2418","0:120:2420","0:121:2422","0:122:2424"],"is_stripped":false}}},"0:57":{"id":"0:57","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[30,0],"end":[32,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"21:74:2554","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:58:2580"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:81":{"id":"0:81","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[146,0],"end":[148,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"21:74:2554","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:82:2580"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:103:2610":{"id":"0:103:2610","crate_id":0,"name":"deserialize","span":{"filename":"src/core_api.rs","begin":[236,4],"end":[249,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["serialized_state",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"SerializedState","id":"21:24:2565","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42860:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"DeserializeStateError","id":"21:147:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2784-0:153:2400":{"id":"b:1:2784-0:153:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32804:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2778:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2786:2640"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2787-0:153:2400":{"id":"b:1:2787-0:153:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32804:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2781:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2789:29754"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:122:2424":{"id":"0:122:2424","crate_id":0,"name":"Sha512","span":{"filename":"src/lib.rs","begin":[49,0],"end":[49,84]},"visibility":"public","docs":"SHA-512 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:620:2392","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:601:2393","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U64","id":"23:2621:2390","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512","id":"0:431:2405","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:13735:34417":{"id":"1:13735:34417","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13799:34438":{"id":"1:13799:34438","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:16652","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13820:34446":{"id":"1:13820:34446","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:156":{"id":"0:156","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[138,9],"end":[138,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2804:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:157:496"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13794:34436":{"id":"1:13794:34436","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"6:12599:492","self::pattern":"1:13426:17782","str::rsplitn":"1:13796:34437"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:44696:6071","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:16652","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:830":{"id":"0:73:830","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[86,4],"end":[88,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10613:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10594:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13825:34449":{"id":"1:13825:34449","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:12599:492","self::pattern":"1:13426:17782"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:16652","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3108:1855":{"id":"1:3108:1855","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:42860:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:3073:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3093-0:153:2400":{"id":"b:1:3093-0:153:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3066:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3095:860"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:97:830":{"id":"0:97:830","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[204,4],"end":[206,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10613:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10594:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13835:34453":{"id":"1:13835:34453","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:12599:492","self::pattern":"1:13426:17782"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:16652","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13842:17088":{"id":"1:13842:17088","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13849:34458":{"id":"1:13849:34458","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1151:17105"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3104-0:148:2399":{"id":"b:1:3104-0:148:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3063:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3073:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3107:150","1:3108:1855"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5716:35199":{"id":"5:5716:35199","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7759:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13847:34456":{"id":"1:13847:34456","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1151:17105"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86:2582":{"id":"0:86:2582","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[156,4],"end":[160,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"Block","id":"21:56:2553","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13744:6588":{"id":"1:13744:6588","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"6:12618:1901"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:23:1171-0:148:2399":{"id":"b:23:1171-0:148:2399","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"23:1168:6201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["23:1173:211"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42689:17750-0:153:2400":{"id":"a:1:42689:17750-0:153:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42689:17750","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:780-0:148:2399":{"id":"b:5:780-0:148:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2804:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:776:264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:782:16046","5:783:29760","5:784:29761"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:116-0:153:2400":{"id":"0:116-0:153:2400","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[29,34],"end":[29,47]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"core_api::Sha512VarCore","name":"Sha512VarCore","id":"0:153:2400","glob":false}}},"0:119:2418":{"id":"0:119:2418","crate_id":0,"name":"Sha512_224","span":{"filename":"src/lib.rs","begin":[43,0],"end":[43,92]},"visibility":"public","docs":"SHA-512/224 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:620:2392","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:601:2393","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U28","id":"23:2513:2387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512_224","id":"0:465:2409","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"a:1:32803:249-0:153:2400":{"id":"a:1:32803:249-0:153:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32803:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:58:2580":{"id":"0:58:2580","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[31,4],"end":[31,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"23:9598:6025","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6025","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6025","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6025","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6025","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6025","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6025","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"23:9642:6026","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:9019:6030","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"0:72":{"id":"0:72","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[84,0],"end":[89,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10646:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:73:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:75:696":{"id":"0:75:696","crate_id":0,"name":"drop","span":{"filename":"src/core_api.rs","begin":[92,4],"end":[98,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13755:34424":{"id":"1:13755:34424","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_checked":"1:13757:34426","str::split_at_mut":"1:13756:34425"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13734:11911":{"id":"1:13734:11911","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:157:496":{"id":"0:157:496","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[138,9],"end":[138,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13757:34426":{"id":"1:13757:34426","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:13758:34427"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13782:2612":{"id":"1:13782:2612","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:13426:17782","`DoubleEndedIterator`":"1:8387:134","prim@char":"6:12599:492","str::split_whitespace":"1:13763:29949","str::rsplit":"1:13786:34433"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:44592:6069","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:16652","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:105:2397":{"id":"0:105:2397","crate_id":0,"name":"compress256","span":{"filename":"src/sha256.rs","begin":[27,0],"end":[29,1]},"visibility":"public","docs":"Raw SHA-256 compression function.\n\nThis is a low-level \"hazmat\" API which provides direct access to the core\nfunctionality of SHA-256.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"array":{"type":{"primitive":"u32"},"len":"8"}}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"array":{"type":{"primitive":"u8"},"len":"64"}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:115-0:148:2399":{"id":"0:115-0:148:2399","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[29,19],"end":[29,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"core_api::Sha256VarCore","name":"Sha256VarCore","id":"0:148:2399","glob":false}}},"0:78:2607":{"id":"0:78:2607","crate_id":0,"name":"serialize","span":{"filename":"src/core_api.rs","begin":[107,4],"end":[116,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SerializedState","id":"21:24:2565","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32803:249-0:148:2399":{"id":"a:1:32803:249-0:148:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32803:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3350:11853-0:148:2399":{"id":"a:1:3350:11853-0:148:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3350:11853","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:2789:29754":{"id":"1:2789:29754","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[51,0],"end":[75,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:372:2560","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:66:2586","0:67:1212","0:68:2591"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13801:34439":{"id":"1:13801:34439","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:16652","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13432:16652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13449:17788","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:89":{"id":"0:89","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[167,0],"end":[193,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:372:2560","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:90:2586","0:91:1212","0:92:2591"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5720:17091":{"id":"5:5720:17091","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13846:17095"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3092:11904":{"id":"1:3092:11904","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:3066:157"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:101:2606":{"id":"0:101:2606","crate_id":0,"name":"SerializedStateSize","span":{"filename":"src/core_api.rs","begin":[222,4],"end":[222,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"23:9598:6025","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6025","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6025","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6025","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6025","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6025","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6025","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"23:9642:6026","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:9019:6030","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:9019:6030","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"0:5-4:0:2381":{"id":"0:5-4:0:2381","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[10,17],"end":[10,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"digest","name":"digest","id":"4:0:2381","glob":false}}},"1:13844:17093":{"id":"1:13844:17093","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:88:2585":{"id":"0:88:2585","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[164,4],"end":[164,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"23:9598:6025","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6025","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6025","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6025","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6025","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6025","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6025","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"23:9642:6026","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:9019:6030","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"0:91:1212":{"id":"0:91:1212","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[171,4],"end":[181,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["output_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:42860:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"InvalidOutputSize","id":"4:650:2572","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:79:2610":{"id":"0:79:2610","crate_id":0,"name":"deserialize","span":{"filename":"src/core_api.rs","begin":[118,4],"end":[131,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["serialized_state",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"SerializedState","id":"21:24:2565","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42860:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"DeserializeStateError","id":"21:147:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13768:32534":{"id":"1:13768:32534","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"6:12599:492","self::pattern":"1:13426:17782"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:16652","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5703:35196":{"id":"5:5703:35196","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:2737","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:297:2737","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13758:34427":{"id":"1:13758:34427","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:13757:34426"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5718:17663":{"id":"5:5718:17663","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7759:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7759:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3104-0:153:2400":{"id":"b:1:3104-0:153:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3063:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3073:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3107:150","1:3108:1855"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13772:34432":{"id":"1:13772:34432","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"6:12599:492","self::pattern":"1:13426:17782"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:16652","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13432:16652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13449:17788","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13742:34421":{"id":"1:13742:34421","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13840:34455":{"id":"1:13840:34455","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:13386:149","`FromStr`":"1:13385:2753"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42860:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:13385:2753","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:13385:2753","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6-4:390:2382":{"id":"0:6-4:390:2382","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[10,23],"end":[10,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"digest::Digest","name":"Digest","id":"4:390:2382","glob":false}}},"5:783:29760":{"id":"5:783:29760","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13760:16190":{"id":"1:13760:16190","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"6:12599:492"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:44562:16170","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3315:261-0:148:2399":{"id":"a:1:3315:261-0:148:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3315:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:80":{"id":"0:80","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[144,0],"end":[144,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:389:2571","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:87":{"id":"0:87","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[163,0],"end":[165,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"21:101:2557","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:88:2585"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:100":{"id":"0:100","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[221,0],"end":[250,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"SerializableState","id":"21:35:2564","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:101:2606","0:102:2607","0:103:2610"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13762:12606":{"id":"1:13762:12606","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:44578:12766","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13764:29950":{"id":"1:13764:29950","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:13763:29949"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:44875:16188","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13814:34443":{"id":"1:13814:34443","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:153:2400":{"id":"0:153:2400","crate_id":0,"name":"Sha512VarCore","span":{"filename":"src/core_api.rs","begin":[139,0],"end":[142,1]},"visibility":"public","docs":"Core block-level SHA-512 hasher with variable output size.\n\nSupports initialization only for 28, 32, 48, and 64 byte output sizes,\ni.e. 224, 256, 384, and 512 bits respectively.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:32803:249-0:153:2400","a:1:3315:261-0:153:2400","a:1:3350:11853-0:153:2400","a:1:32861:6440-0:153:2400","a:1:42688:17751-0:153:2400","a:1:42689:17750-0:153:2400","b:1:2784-0:153:2400","b:1:2787-0:153:2400","b:1:2816-0:153:2400","b:1:3089-0:153:2400","b:1:3093-0:153:2400","b:1:3099-0:153:2400","b:1:3104-0:153:2400","b:1:3959-0:153:2400","b:5:780-0:153:2400","b:23:1171-0:153:2400","0:156","0:80","0:81","0:83","0:85","0:87","0:89","0:94","0:96","0:98","0:100"]}}},"1:13741:34420":{"id":"1:13741:34420","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12948:17789"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13832:34452":{"id":"1:13832:34452","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:12599:492","self::pattern":"1:13426:17782"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:16652","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13432:16652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13449:17788","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2818:29755":{"id":"1:2818:29755","crate_id":1,"name":"clone_to_uninit","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dst",{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:3107:150":{"id":"1:3107:150","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32727:6044","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:92:2591":{"id":"0:92:2591","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[184,4],"end":[192,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Buffer","id":"4:359:2555","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Output","id":"21:60:211","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13784:29939":{"id":"1:13784:29939","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"6:12599:492","self::pattern":"1:13426:17782"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:13215:6086","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:16652","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3099-0:148:2399":{"id":"b:1:3099-0:148:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3073:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3069:272","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3102:150","1:3103:1857"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:82:2580":{"id":"0:82:2580","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[147,4],"end":[147,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"23:9598:6025","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6025","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6025","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6025","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6025","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6025","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6025","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6025","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"23:9642:6026","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:9019:6030","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"b:23:1171-0:153:2400":{"id":"b:23:1171-0:153:2400","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"23:1168:6201","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["23:1173:211"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:109:2398":{"id":"0:109:2398","crate_id":0,"name":"compress512","span":{"filename":"src/sha512.rs","begin":[27,0],"end":[29,1]},"visibility":"public","docs":"Raw SHA-512 compression function.\n\nThis is a low-level \"hazmat\" API which provides direct access to the core\nfunctionality of SHA-512.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"array":{"type":{"primitive":"u64"},"len":"8"}}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"array":{"type":{"primitive":"u8"},"len":"128"}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13843:17089":{"id":"1:13843:17089","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:40488:17625","Self::is_ascii":"1:13842:17088"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:40488:17625","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5704:11795":{"id":"5:5704:11795","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7759:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7759:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:16652","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13732":{"id":"1:13732","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:13733:1027","1:13734:11911","1:13735:34417","1:13736:34418","1:13738:34419","1:13741:34420","1:13742:34421","1:13743:352","1:13744:6588","1:13745:6591","1:13747:16910","1:13749:16911","1:13751:16912","1:13753:34422","1:13754:34423","1:13755:34424","1:13756:34425","1:13757:34426","1:13758:34427","1:13760:16190","1:13761:16199","1:13762:12606","1:13763:29949","1:13764:29950","1:13765:34429","1:13766:34430","1:13767:29951","1:13768:32534","1:13770:34431","1:13772:34432","1:13775:11950","1:13778:11910","1:13782:2612","1:13784:29939","1:13786:34433","1:13789:34434","1:13791:34435","1:13794:34436","1:13796:34437","1:13799:34438","1:13801:34439","1:13804:2687","1:13806:34440","1:13809:34441","1:13811:34442","1:13814:34443","1:13816:34444","1:13818:34445","1:13820:34446","1:13821:34447","1:13822:34448","1:13825:34449","1:13827:34450","1:13829:34451","1:13832:34452","1:13835:34453","1:13837:34454","1:13840:34455","1:13842:17088","1:13843:17089","1:13844:17093","1:13845:17094","1:13846:17095","1:13847:34456","1:13848:34457","1:13849:34458","1:13850:34459","1:13852:17674","1:13853:34460","1:13854:34461"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5706:35197":{"id":"5:5706:35197","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7759:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7759:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:16652","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13767:29951":{"id":"1:13767:29951","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:44884:16189","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:59":{"id":"0:59","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[34,0],"end":[36,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:363:2556","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:60:2581"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3093-0:148:2399":{"id":"b:1:3093-0:148:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3066:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3095:860"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:83":{"id":"0:83","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[150,0],"end":[152,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:363:2556","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:84:2581"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:120:2420":{"id":"0:120:2420","crate_id":0,"name":"Sha512_256","span":{"filename":"src/lib.rs","begin":[45,0],"end":[45,92]},"visibility":"public","docs":"SHA-512/256 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:620:2392","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:601:2393","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U32","id":"23:2525:2388","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512_256","id":"0:482:2411","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:76":{"id":"0:76","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[104,0],"end":[132,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"SerializableState","id":"21:35:2564","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:77:2606","0:78:2607","0:79:2610"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13745:6591":{"id":"1:13745:6591","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:42594:203"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11552:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11552:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13765:34429":{"id":"1:13765:34429","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44846:16185","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42688:17751-0:148:2399":{"id":"a:1:42688:17751-0:148:2399","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42688:17751","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13796:34437":{"id":"1:13796:34437","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"6:12599:492","str::splitn":"1:13794:34436","self::pattern":"1:13426:17782"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:44714:6067","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:16652","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13432:16652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13449:17788","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42688:17751-0:153:2400":{"id":"a:1:42688:17751-0:153:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42688:17751","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13809:34441":{"id":"1:13809:34441","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:13426:17782","`DoubleEndedIterator`":"1:8387:134","prim@char":"6:12599:492","str::rmatch_indices":"1:13811:34442"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44742:16180","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:16652","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13811:34442":{"id":"1:13811:34442","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:13426:17782","`DoubleEndedIterator`":"1:8387:134","prim@char":"6:12599:492","str::match_indices":"1:13809:34441"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44760:16181","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:16652","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13432:16652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13449:17788","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:117:2414":{"id":"0:117:2414","crate_id":0,"name":"Sha224","span":{"filename":"src/lib.rs","begin":[39,0],"end":[39,84]},"visibility":"public","docs":"SHA-224 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:620:2392","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:601:2393","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2399","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U28","id":"23:2513:2387","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha224","id":"0:448:2407","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:113-0:109:2398":{"id":"0:113-0:109:2398","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[27,0],"end":[27,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"sha512::compress512","name":"compress512","id":"0:109:2398","glob":false}}},"1:3961:1870":{"id":"1:3961:1870","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:40304:15426","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:95:2603":{"id":"0:95:2603","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[197,4],"end":[199,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10613:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10594:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13818:34445":{"id":"1:13818:34445","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13829:34451":{"id":"1:13829:34451","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:12599:492","self::pattern":"1:13426:17782"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42592:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:16652","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13432:16652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13449:17788","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:77:2606":{"id":"0:77:2606","crate_id":0,"name":"SerializedStateSize","span":{"filename":"src/core_api.rs","begin":[105,4],"end":[105,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"23:9598:6025","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6025","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6025","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6025","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6025","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6025","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"23:9642:6026","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:9019:6030","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:9019:6030","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"0:102:2607":{"id":"0:102:2607","crate_id":0,"name":"serialize","span":{"filename":"src/core_api.rs","begin":[224,4],"end":[234,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SerializedState","id":"21:24:2565","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13853:34460":{"id":"1:13853:34460","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:5057:34460"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:44909:16110","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60:2581":{"id":"0:60:2581","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[35,4],"end":[35,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Eager","id":"24:160:2551","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:112-0:105:2397":{"id":"0:112-0:105:2397","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[26,0],"end":[26,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"sha256::compress256","name":"compress256","id":"0:105:2397","glob":false}}},"1:13761:16199":{"id":"1:13761:16199","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"6:12599:492"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:44568:16171","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3102:150":{"id":"1:3102:150","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:3073:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"1:13848:34457":{"id":"1:13848:34457","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1151:17105"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32861:6440-0:153:2400":{"id":"a:1:32861:6440-0:153:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32861:6440","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13736:34418":{"id":"1:13736:34418","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13738:34419":{"id":"1:13738:34419","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"1:13736:34418"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13786:34433":{"id":"1:13786:34433","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:13426:17782","`DoubleEndedIterator`":"1:8387:134","prim@char":"6:12599:492","str::split":"1:13782:2612"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:44610:6073","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13432:16652","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13432:16652","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13449:17788","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13850:34459":{"id":"1:13850:34459","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"1:5059:34459"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:44891:16111","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"6:11065:15295":{"crate_id":6,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"22:31:12358":{"crate_id":22,"path":["hybrid_array","from_fn","Guard"],"kind":"struct"},"1:44428:6075":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:8250:16005":{"crate_id":6,"path":["std","fs","OpenOptions"],"kind":"struct"},"6:5485:215":{"crate_id":6,"path":["std","path","Path"],"kind":"struct"},"7:5051:14517":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:8407:18386":{"crate_id":6,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:3050:12387":{"crate_id":6,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:3832:13763":{"crate_id":17,"path":["gimli","arch","X86"],"kind":"struct"},"7:5604:14741":{"crate_id":7,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:11726:6065":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"7:4805:14380":{"crate_id":7,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:4836:15071":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"7:1530:14244":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:4758:233":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"18:14871:13158":{"crate_id":18,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:47852:15718":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"7:7984:15172":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:23396:29772":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:2658:13719":{"crate_id":17,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:6438:25474":{"crate_id":17,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:23416:29773":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:42908:6066":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"7:7553:15159":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:12609:763":{"crate_id":6,"path":["std","f16"],"kind":"primitive"},"1:31216:29782":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"1:3389:6105":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"17:7027:13816":{"crate_id":17,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"5:1621:222":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:8075:15213":{"crate_id":6,"path":["std","thread","ThreadId"],"kind":"struct"},"18:15135:12854":{"crate_id":18,"path":["object","macho","Relocation"],"kind":"struct"},"18:15869:13440":{"crate_id":18,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"7:8326:15210":{"crate_id":7,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"7:4902:14444":{"crate_id":7,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:40304:15426":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"5:881:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:2028:813":{"crate_id":6,"path":["std","ffi"],"kind":"module"},"17:8011:13752":{"crate_id":17,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:6406:15875":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:43986:16166":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"7:8284:15199":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:10843:16529":{"crate_id":6,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"15:159:16476":{"crate_id":15,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:6273:232":{"crate_id":6,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:40139:16103":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:34316:17641":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:41275:16042":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"12:1118:16493":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:1938:16515":{"crate_id":6,"path":["std","env","Args"],"kind":"struct"},"1:41847:16152":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"18:13305:12882":{"crate_id":18,"path":["object","read","SymbolIndex"],"kind":"struct"},"7:523:14188":{"crate_id":7,"path":["libc","unix","hostent"],"kind":"struct"},"18:10515:25547":{"crate_id":18,"path":["object","endian","Endianness"],"kind":"enum"},"1:3802:17657":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:41171:12766":{"crate_id":1,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"18:14482:13087":{"crate_id":18,"path":["object","macho","Section64"],"kind":"struct"},"5:2575:15311":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"18:12007:12695":{"crate_id":18,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:6820:25476":{"crate_id":17,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"6:4687:18426":{"crate_id":6,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"12:686:16480":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"5:7233:12492":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"7:1625:14313":{"crate_id":7,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"23:821:18121":{"crate_id":23,"path":["typenum","private","PrivateXor"],"kind":"trait"},"12:676:11916":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:924:15993":{"crate_id":6,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:4831:12498":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:2902:207":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"19:589:12629":{"crate_id":19,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:22172:17845":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:31563:208":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:40152:225":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"6:3411:16527":{"crate_id":6,"path":["std","io","stdio","Stdout"],"kind":"struct"},"18:11474:25562":{"crate_id":18,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"18:15857:13439":{"crate_id":18,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"7:7990:15174":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:7156:15931":{"crate_id":17,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"18:12919:15827":{"crate_id":18,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"13:0:2717":{"crate_id":13,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:3404:13875":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"6:12612:761":{"crate_id":6,"path":["std","f128"],"kind":"primitive"},"7:5381:14624":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:2334:151":{"crate_id":6,"path":["std","fs","File"],"kind":"struct"},"17:8633:25486":{"crate_id":17,"path":["gimli","read","value","ValueType"],"kind":"enum"},"18:471:16302":{"crate_id":18,"path":["object","read","any","Segment"],"kind":"struct"},"1:41839:15559":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"18:13265:25549":{"crate_id":18,"path":["object","read","ObjectKind"],"kind":"enum"},"5:4513:12358":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:23309:16089":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:8623:15983":{"crate_id":17,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:6335:15866":{"crate_id":17,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"6:9261:15283":{"crate_id":6,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:5850:14977":{"crate_id":6,"path":["std","process","exit"],"kind":"function"},"6:6039:16550":{"crate_id":6,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:8595:16475":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:6950:15918":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"18:16001:13477":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"5:7708:17725":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"12:2206:15999":{"crate_id":12,"path":["hashbrown","table","HashTable"],"kind":"struct"},"6:2529:18354":{"crate_id":6,"path":["std","fs","exists"],"kind":"function"},"19:531:15773":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:8611:16579":{"crate_id":6,"path":["std","net","tcp","Incoming"],"kind":"struct"},"22:5309:6101":{"crate_id":22,"path":["hybrid_array","iter","TryFromIteratorError"],"kind":"struct"},"7:5088:14529":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"25:191:2555":{"crate_id":25,"path":["const_oid","buffer","Buffer"],"kind":"struct"},"6:7442:12412":{"crate_id":6,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"18:11652:12786":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"18:5130:16314":{"crate_id":18,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"18:10548:12759":{"crate_id":18,"path":["object","endian","BigEndian"],"kind":"struct"},"6:8688:15260":{"crate_id":6,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"1:43703:13950":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:10267:830":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"1:42900:6065":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"2:0:527":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"17:7904:13918":{"crate_id":17,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:3108:13757":{"crate_id":17,"path":["gimli","common","DwoId"],"kind":"struct"},"17:2838:13727":{"crate_id":17,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:6109:15845":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"18:15889:13447":{"crate_id":18,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"25:218:145":{"crate_id":25,"path":["const_oid","encoder","Encoder"],"kind":"struct"},"17:8666:13915":{"crate_id":17,"path":["gimli","read","value","Value"],"kind":"enum"},"18:12346:16368":{"crate_id":18,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:40315:6102":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:11539:18096":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"7:4957:14471":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:4502:16537":{"crate_id":6,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"18:11385:25560":{"crate_id":18,"path":["object","read","archive","Members"],"kind":"enum"},"18:10295:25540":{"crate_id":18,"path":["object","common","RelocationKind"],"kind":"enum"},"1:47823:15717":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"23:1905:18107":{"crate_id":23,"path":["typenum","uint","SetBit"],"kind":"trait"},"7:564:14210":{"crate_id":7,"path":["libc","unix","itimerval"],"kind":"struct"},"12:389:12368":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"7:491:14165":{"crate_id":7,"path":["libc","unix","rlimit"],"kind":"struct"},"18:12698:16379":{"crate_id":18,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:8267:16006":{"crate_id":6,"path":["std","fs","Permissions"],"kind":"struct"},"18:14707:13118":{"crate_id":18,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:40135:6107":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"4:359:2555":{"crate_id":4,"path":["digest","core_api","Buffer"],"kind":"type_alias"},"1:44501:6080":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:41211:17711":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:45217:16210":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:979:16482":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"4:327:18096":{"crate_id":4,"path":["digest","core_api","wrapper","sealed","Sealed"],"kind":"trait"},"7:7580:15165":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:47149:15650":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"7:1643:14325":{"crate_id":7,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"7:5057:14519":{"crate_id":7,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"18:10217:25537":{"crate_id":18,"path":["object","common","ComdatKind"],"kind":"enum"},"1:5406:1007":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:10293:30092":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:7302:13851":{"crate_id":17,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:3139:12651":{"crate_id":17,"path":["gimli","arch","Arm"],"kind":"struct"},"1:45667:15608":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"18:16378:13595":{"crate_id":18,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"6:12621:1895":{"crate_id":6,"path":["std","u64"],"kind":"primitive"},"7:465:14152":{"crate_id":7,"path":["libc","unix","group"],"kind":"struct"},"6:5555:133":{"crate_id":6,"path":["std","path","Display"],"kind":"struct"},"1:22641:6060":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:3551:128":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"7:5617:14747":{"crate_id":7,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"17:5740:12759":{"crate_id":17,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"5:3328:15995":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:10912:12222":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:6995:15919":{"crate_id":17,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"6:950:12452":{"crate_id":6,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:42636:11916":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"23:989:18093":{"crate_id":23,"path":["typenum","private","PrivateDivInt"],"kind":"trait"},"1:41236:6081":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"6:916:11916":{"crate_id":6,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"6:11929:16031":{"crate_id":6,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"0:121:2422":{"crate_id":0,"path":["sha2","Sha384"],"kind":"type_alias"},"7:5349:14611":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"6:5027:18410":{"crate_id":6,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"7:5357:14612":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"17:7041:13743":{"crate_id":17,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"12:859:16488":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:3684:18355":{"crate_id":6,"path":["std","io","Seek"],"kind":"trait"},"17:3124:24614":{"crate_id":17,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"18:16341:13588":{"crate_id":18,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"18:11015:16320":{"crate_id":18,"path":["object","read","any","SectionIterator"],"kind":"struct"},"5:1518:6065":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:43664:15582":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"6:6791:12407":{"crate_id":6,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:45026:16200":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:47338:15673":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:6841:15910":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"18:12292:16363":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:40297:16664":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:8230:25484":{"crate_id":17,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"5:4467:281":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"6:8060:15212":{"crate_id":6,"path":["std","thread","local","AccessError"],"kind":"struct"},"23:2555:2877":{"crate_id":23,"path":["typenum","generated","consts","U42"],"kind":"type_alias"},"4:470:2729":{"crate_id":4,"path":["digest","ExtendableOutput"],"kind":"trait"},"6:10840:16527":{"crate_id":6,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"1:3037:6045":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"18:11732:25581":{"crate_id":18,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"5:7747:12468":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:43326:11809":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"7:8175:15186":{"crate_id":7,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:22129:33324":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:41805:16149":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"18:12991:12858":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:43674:11803":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"4:461:2726":{"crate_id":4,"path":["digest","FixedOutput"],"kind":"trait"},"1:11818:6086":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"18:14071:12995":{"crate_id":18,"path":["object","elf","Verdaux"],"kind":"struct"},"7:4964:14474":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:43424:11977":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"4:370:6038":{"crate_id":4,"path":["digest","core_api","XofReaderCore"],"kind":"trait"},"5:1883:12476":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"14:229:14065":{"crate_id":14,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:12626:13":{"crate_id":6,"path":["std","fn"],"kind":"primitive"},"18:11719:15793":{"crate_id":18,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:10646:123":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"7:5127:14532":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"24:168:6121":{"crate_id":24,"path":["block_buffer","Lazy"],"kind":"struct"},"1:47500:15679":{"crate_id":1,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"21:147:2563":{"crate_id":21,"path":["crypto_common","hazmat","DeserializeStateError"],"kind":"struct"},"1:3073:271":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:8270:6111":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:6638:16408":{"crate_id":17,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"6:12620:1889":{"crate_id":6,"path":["std","u32"],"kind":"primitive"},"21:60:211":{"crate_id":21,"path":["crypto_common","Output"],"kind":"type_alias"},"7:485:14163":{"crate_id":7,"path":["libc","unix","timespec"],"kind":"struct"},"12:292:15987":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:10872:169":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"17:5687:13794":{"crate_id":17,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:40167:222":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"18:15682:13392":{"crate_id":18,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"7:6523:14861":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"7:5462:14674":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:14395:164":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:32891:11855":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"1:13161:16179":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:2618:13717":{"crate_id":17,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:12625:1460":{"crate_id":6,"path":["std","reference"],"kind":"primitive"},"17:6694:16427":{"crate_id":17,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"18:12582:12842":{"crate_id":18,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"4:389:2571":{"crate_id":4,"path":["digest","digest","HashMarker"],"kind":"trait"},"1:40985:16109":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:3474:13876":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"6:8121:18303":{"crate_id":6,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:3456:16530":{"crate_id":6,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:3360:16526":{"crate_id":6,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:8480:13973":{"crate_id":17,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:2094:209":{"crate_id":6,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:11775:6069":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:8387:134":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"21:96:6123":{"crate_id":21,"path":["crypto_common","sealed","BlockSizes"],"kind":"trait"},"18:11162:12792":{"crate_id":18,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:41581:16143":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"5:925:12441":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"6:8135:18304":{"crate_id":6,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:9205:15280":{"crate_id":6,"path":["std","process","ExitStatus"],"kind":"struct"},"6:12571:18305":{"crate_id":6,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:3315:261":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:47765:15715":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"5:1589:16495":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"7:6737:14960":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"0:120:2420":{"crate_id":0,"path":["sha2","Sha512_256"],"kind":"type_alias"},"18:16486:12935":{"crate_id":18,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"17:901:16300":{"crate_id":17,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"18:13870:12956":{"crate_id":18,"path":["object","elf","Sym32"],"kind":"struct"},"25:86:2384":{"crate_id":25,"path":["const_oid","traits","AssociatedOid"],"kind":"trait"},"1:41397:16135":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:12610:766":{"crate_id":6,"path":["std","f32"],"kind":"primitive"},"18:15746:13412":{"crate_id":18,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:46776:15622":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:4576:16538":{"crate_id":6,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"18:15105:13198":{"crate_id":18,"path":["object","macho","Nlist32"],"kind":"struct"},"1:43438:11978":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"23:1168:6201":{"crate_id":23,"path":["typenum","type_operators","Same"],"kind":"trait"},"6:3083:238":{"crate_id":6,"path":["std","io","error","Result"],"kind":"type_alias"},"6:5135:18447":{"crate_id":6,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"6:8156:16568":{"crate_id":6,"path":["std","env","JoinPathsError"],"kind":"struct"},"23:844:18116":{"crate_id":23,"path":["typenum","private","PrivatePow"],"kind":"trait"},"5:3708:6066":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"7:1696:14353":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"18:13397:12885":{"crate_id":18,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:41432:12639":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:23558:15342":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"5:7723:16064":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"18:12710:16380":{"crate_id":18,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"7:6858:14991":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:2722:13722":{"crate_id":17,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"18:16799:12966":{"crate_id":18,"path":["object","xcoff","Rel32"],"kind":"struct"},"18:11629:12784":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"7:5488:14686":{"crate_id":7,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"6:0:1762":{"crate_id":6,"path":["std"],"kind":"module"},"1:34461:17643":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:44866:16187":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:11986:16038":{"crate_id":6,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:5853:18476":{"crate_id":6,"path":["std","process","Termination"],"kind":"trait"},"6:10625:37978":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"1:44470:6081":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"18:15837:13432":{"crate_id":18,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:10655:11977":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"23:8998:6029":{"crate_id":23,"path":["typenum","bit","B0"],"kind":"struct"},"7:1514:14236":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"18:14737:13137":{"crate_id":18,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"15:186:24552":{"crate_id":15,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"19:735:29740":{"crate_id":19,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:41159:16117":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"18:14113:13010":{"crate_id":18,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:5782:16546":{"crate_id":6,"path":["std","process","Stdio"],"kind":"struct"},"18:15805:13422":{"crate_id":18,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"7:6749:14962":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"17:5755:13795":{"crate_id":17,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"6:11394:15299":{"crate_id":6,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"1:32794:16102":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"17:8609:13756":{"crate_id":17,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"7:532:14194":{"crate_id":7,"path":["libc","unix","iovec"],"kind":"struct"},"18:11431:25561":{"crate_id":18,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:46676:15612":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:2948:13732":{"crate_id":17,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"5:998:6065":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:8543:15979":{"crate_id":17,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"12:787:12476":{"crate_id":12,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:43758:150":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:6300:16074":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:41191:16665":{"crate_id":1,"path":["core","ffi","va_list","VaList"],"kind":"struct"},"18:16633:13662":{"crate_id":18,"path":["object","xcoff","Symbol64"],"kind":"struct"},"18:12850:15823":{"crate_id":18,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:7956:15968":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:681:16504":{"crate_id":6,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:10467:16604":{"crate_id":6,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"18:14437:13081":{"crate_id":18,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"18:10166:25536":{"crate_id":18,"path":["object","common","SectionKind"],"kind":"enum"},"1:3063:175":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"5:7512:16057":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"7:5249:14571":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"18:16763:13693":{"crate_id":18,"path":["object","xcoff","StatAux"],"kind":"struct"},"1:41022:17699":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:44481:6082":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"18:13094:12863":{"crate_id":18,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"1:43691:15593":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"5:0:325":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:6157:15847":{"crate_id":17,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:45335:16218":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"7:1551:14259":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"5:6902:12435":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"7:5325:14606":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"18:15063:13194":{"crate_id":18,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"15:201:18187":{"crate_id":15,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"18:11850:16342":{"crate_id":18,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:12619:1883":{"crate_id":6,"path":["std","u16"],"kind":"primitive"},"18:16230:13562":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"5:6813:11916":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:1097:15964":{"crate_id":6,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"7:1584:14281":{"crate_id":7,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:2828:11849":{"crate_id":1,"path":["core","clone","InitializingSlice"],"kind":"struct"},"1:14182:16658":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"18:15898:13448":{"crate_id":18,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:4505:111":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"6:8397:16573":{"crate_id":6,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"5:7653:16060":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"18:13490:12890":{"crate_id":18,"path":["object","read","CodeView"],"kind":"struct"},"18:14334:13062":{"crate_id":18,"path":["object","macho","FatArch32"],"kind":"struct"},"6:1915:16514":{"crate_id":6,"path":["std","env","SplitPaths"],"kind":"struct"},"18:11925:12799":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"12:2126:16490":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:3580:2605":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:6171:15850":{"crate_id":17,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"5:3078:15314":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:6586:13803":{"crate_id":17,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"5:282:12435":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"17:6203:25473":{"crate_id":17,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:7421:25480":{"crate_id":17,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:10595:11975":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"18:12148:15804":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"6:506:12374":{"crate_id":6,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"5:1380:16490":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:40962:15557":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:41262:16119":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:4946:18411":{"crate_id":6,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:2119:696":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"18:15956:13466":{"crate_id":18,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"7:6645:14926":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:13101:16173":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:12616:933":{"crate_id":6,"path":["std","i64"],"kind":"primitive"},"1:3712:223":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"5:1779:12435":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"12:344:39110":{"crate_id":12,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"6:12624:1965":{"crate_id":6,"path":["std","usize"],"kind":"primitive"},"5:6137:12467":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"7:1684:14349":{"crate_id":7,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:10288:32855":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:6850:15911":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"12:102:15986":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:985:18312":{"crate_id":6,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:43445:11979":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:4493:16642":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"18:10629:12762":{"crate_id":18,"path":["object","endian","U64Bytes"],"kind":"struct"},"5:7679:12462":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:22981:11790":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"6:12611:782":{"crate_id":6,"path":["std","f64"],"kind":"primitive"},"6:8945:16018":{"crate_id":6,"path":["std","path","StripPrefixError"],"kind":"struct"},"21:116:6134":{"crate_id":21,"path":["crypto_common","KeyInit"],"kind":"trait"},"7:5441:14659":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"18:11970:16346":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"4:361:2559":{"crate_id":4,"path":["digest","core_api","UpdateCore"],"kind":"trait"},"17:4871:13774":{"crate_id":17,"path":["gimli","constants","DwDs"],"kind":"struct"},"5:1224:34200":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"18:16211:13549":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:45630:16674":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"1:46915:15638":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"19:521:29742":{"crate_id":19,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"18:13969:12972":{"crate_id":18,"path":["object","elf","Rela64"],"kind":"struct"},"1:23657:15351":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"1:12918:6052":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"25:297:2750":{"crate_id":25,"path":["const_oid","ObjectIdentifierRef"],"kind":"struct"},"12:1878:15995":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:22652:33330":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"7:7562:15162":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:700:16507":{"crate_id":6,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"18:11677:16334":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"7:7326:15047":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"23:9535:6055":{"crate_id":23,"path":["typenum","Greater"],"kind":"struct"},"12:1862:11916":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"7:5241:14568":{"crate_id":7,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"4:372:2560":{"crate_id":4,"path":["digest","core_api","VariableOutputCore"],"kind":"trait"},"17:8118:222":{"crate_id":17,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:3012:24612":{"crate_id":17,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:2504:13712":{"crate_id":17,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:11048:15214":{"crate_id":6,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"1:43955:12223":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:697:16505":{"crate_id":6,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:5083:13780":{"crate_id":17,"path":["gimli","constants","DwAddr"],"kind":"struct"},"12:2440:12476":{"crate_id":12,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"6:9413:15288":{"crate_id":6,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:32773:13915":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"6:1111:16489":{"crate_id":6,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:11337:12511":{"crate_id":1,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"1:41363:16132":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"7:5265:14579":{"crate_id":7,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"7:5512:14695":{"crate_id":7,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"1:6995:16080":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:45182:16205":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"5:2287:16050":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:960:12476":{"crate_id":6,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"7:4896:14441":{"crate_id":7,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"7:8266:15196":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:6082:15841":{"crate_id":17,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:966:16495":{"crate_id":6,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"18:14374:13070":{"crate_id":18,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:41181:12500":{"crate_id":1,"path":["core","ffi","va_list","VaListImpl"],"kind":"struct"},"18:12686:16378":{"crate_id":18,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:45343:16220":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"12:1579:16497":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"18:12624:12843":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"18:14392:13071":{"crate_id":18,"path":["object","macho","LoadCommand"],"kind":"struct"},"18:11901:12797":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"7:5575:14722":{"crate_id":7,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"7:517:14185":{"crate_id":7,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"7:5405:14638":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:3887:12656":{"crate_id":17,"path":["gimli","arch","X86_64"],"kind":"struct"},"6:11980:16037":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:1940:16516":{"crate_id":6,"path":["std","env","ArgsOs"],"kind":"struct"},"1:42520:16160":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:43252:91":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"5:4121:12452":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:7379:37303":{"crate_id":6,"path":["std","sys","backtrace","print","DisplayBacktrace"],"kind":"struct"},"7:5036:14510":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:38732:17646":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"18:12735:16382":{"crate_id":18,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:11199:2740":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:41322:16126":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"19:754:15789":{"crate_id":19,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"25:265:15958":{"crate_id":25,"path":["const_oid","parser","Parser"],"kind":"struct"},"5:3444:12476":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"12:1858:6065":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"7:8294:15203":{"crate_id":7,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"18:12055:12800":{"crate_id":18,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"7:497:14168":{"crate_id":7,"path":["libc","unix","rusage"],"kind":"struct"},"18:16705:13680":{"crate_id":18,"path":["object","xcoff","FunAux32"],"kind":"struct"},"1:46629:15609":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"7:7367:15074":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"7:6578:14899":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:2770:13724":{"crate_id":17,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"21:114:2552":{"crate_id":21,"path":["crypto_common","AlgorithmName"],"kind":"trait"},"6:2562:2645":{"crate_id":6,"path":["std","io"],"kind":"module"},"1:31590:11868":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"7:5179:14536":{"crate_id":7,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"12:2340:16500":{"crate_id":12,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"5:3287:6065":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:13658:123":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"10:435:24462":{"crate_id":10,"path":["miniz_oxide","MZError"],"kind":"enum"},"10:380:24463":{"crate_id":10,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:6267:15858":{"crate_id":17,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:8682:16579":{"crate_id":6,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:6887:13737":{"crate_id":17,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"7:4976:14479":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"18:14901:13163":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:42414:15572":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:8274:17738":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:2528:13713":{"crate_id":17,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:9231:15282":{"crate_id":6,"path":["std","process","ExitCode"],"kind":"struct"},"17:7880:13917":{"crate_id":17,"path":["gimli","read","op","Expression"],"kind":"struct"},"18:12982:25680":{"crate_id":18,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"6:2742:12380":{"crate_id":6,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:47951:11771":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"18:12318:16365":{"crate_id":18,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"18:12034:15999":{"crate_id":18,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"18:14806:13151":{"crate_id":18,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:6026:13736":{"crate_id":17,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"21:74:2554":{"crate_id":21,"path":["crypto_common","BlockSizeUser"],"kind":"trait"},"1:43964:169":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:48107:6626":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"18:16752:13691":{"crate_id":18,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"12:357:12366":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:7347:13857":{"crate_id":17,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"7:4921:14457":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:23624:15348":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"6:9507:12410":{"crate_id":6,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"1:42719:15579":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"18:10976:39150":{"crate_id":18,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:44192:16168":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:5346:13789":{"crate_id":17,"path":["gimli","constants","DwLne"],"kind":"struct"},"18:13817:12949":{"crate_id":18,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:2746:13723":{"crate_id":17,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"7:7430:15083":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"18:15438:13325":{"crate_id":18,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"7:6769:14970":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:7800:32300":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"18:15880:13444":{"crate_id":18,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"23:9040:6027":{"crate_id":23,"path":["typenum","int","PInt"],"kind":"struct"},"23:1221:6204":{"crate_id":23,"path":["typenum","type_operators","IsEqual"],"kind":"trait"},"7:4881:14434":{"crate_id":7,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"7:6679:14939":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"7:6602:14911":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"23:1274:6179":{"crate_id":23,"path":["typenum","type_operators","Logarithm2"],"kind":"trait"},"7:5375:14622":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"7:1500:14231":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:44846:16185":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"5:7759:257":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:12592:6088":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"17:8220:15971":{"crate_id":17,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"12:663:6066":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"7:8007:15185":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"19:670:16299":{"crate_id":19,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"12:2519:14068":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:44976:17802":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:44642:16176":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"23:612:6160":{"crate_id":23,"path":["typenum","marker_traits","Zero"],"kind":"trait"},"6:11709:12423":{"crate_id":6,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"18:10777:16316":{"crate_id":18,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"5:7772:16067":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:47293:15672":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:2223:11806":{"crate_id":1,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"6:1662:15998":{"crate_id":6,"path":["std","collections","hash","set","Union"],"kind":"struct"},"5:3294:15996":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"23:1211:6203":{"crate_id":23,"path":["typenum","type_operators","IsLess"],"kind":"trait"},"7:7344:15056":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:2091:1732":{"crate_id":1,"path":["core","mem","size_of"],"kind":"function"},"1:22614:18096":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"6:2728:12382":{"crate_id":6,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"6:9520:174":{"crate_id":6,"path":["std","time","Instant"],"kind":"struct"},"23:2813:2568":{"crate_id":23,"path":["typenum","generated","consts","U128"],"kind":"type_alias"},"6:6582:232":{"crate_id":6,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:6678:16424":{"crate_id":17,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"21:110:6133":{"crate_id":21,"path":["crypto_common","InnerUser"],"kind":"trait"},"17:7728:15577":{"crate_id":17,"path":["gimli","read","op","Location"],"kind":"enum"},"1:46659:15611":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:6747:13806":{"crate_id":17,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:47067:15646":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"7:7292:15028":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:46790:15623":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:9255:11916":{"crate_id":6,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:2858:13728":{"crate_id":17,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"7:4997:14490":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"7:570:14213":{"crate_id":7,"path":["libc","unix","tms"],"kind":"struct"},"5:3682:194":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:45540:163":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:3785:268":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:5202:18453":{"crate_id":6,"path":["std","panic","always_abort"],"kind":"function"},"1:42710:17759":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"22:96:6112":{"crate_id":22,"path":["hybrid_array","traits","ArraySize"],"kind":"trait"},"6:9497:246":{"crate_id":6,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:44438:6076":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"6:7473:12413":{"crate_id":6,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:48068:11778":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"7:7390:15075":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"18:16809:12971":{"crate_id":18,"path":["object","xcoff","Rel64"],"kind":"struct"},"5:212:12434":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"19:598:39159":{"crate_id":19,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"18:15660:13390":{"crate_id":18,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:8102:13924":{"crate_id":17,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"18:13054:12782":{"crate_id":18,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"1:41007:16105":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"12:481:166":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:47521:15680":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:10653:11976":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"18:3719:16312":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:6419:15836":{"crate_id":17,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"4:630:6042":{"crate_id":4,"path":["digest","core_api","xof_reader","XofReaderCoreWrapper"],"kind":"struct"},"6:12598:1208":{"crate_id":6,"path":["std","never"],"kind":"primitive"},"7:6398:14797":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:22231:17844":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:3666:11975":{"crate_id":6,"path":["std","io","Write"],"kind":"trait"},"7:5482:14685":{"crate_id":7,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:10433:11997":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"18:666:12748":{"crate_id":18,"path":["object","read","any","Symbol"],"kind":"struct"},"18:11616:16323":{"crate_id":18,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:13426:17782":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"7:5196:14545":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"7:0:1032":{"crate_id":7,"path":["libc"],"kind":"module"},"1:40227:226":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"6:8663:16012":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"6:9341:15287":{"crate_id":6,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"12:2275:15964":{"crate_id":12,"path":["hashbrown","table","Entry"],"kind":"enum"},"6:12600:1923":{"crate_id":6,"path":["std","unit"],"kind":"primitive"},"6:6447:12399":{"crate_id":6,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:45413:16227":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"5:885:12438":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"19:0:2723":{"crate_id":19,"path":["memchr"],"kind":"module"},"6:11865:6740":{"crate_id":6,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"6:560:18298":{"crate_id":6,"path":["std","thread","thread_name_string","ThreadNameString"],"kind":"struct"},"17:7355:13745":{"crate_id":17,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:12521:6084":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:11930:6073":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:3454:16529":{"crate_id":6,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:7996:12415":{"crate_id":6,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:4709:18427":{"crate_id":6,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:9218:15281":{"crate_id":6,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:8293:131":{"crate_id":6,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:44714:6067":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:41284:16121":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:40488:17625":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"5:3854:16628":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"6:9183:16589":{"crate_id":6,"path":["std","pipe","PipeWriter"],"kind":"struct"},"1:41144:17725":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:5647:13793":{"crate_id":17,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:12932:6054":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"7:5271:14582":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"7:1690:14352":{"crate_id":7,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:22100:11868":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:8809:17737":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"18:12722:16381":{"crate_id":18,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:11018:16022":{"crate_id":6,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"18:10417:25544":{"crate_id":18,"path":["object","common","SectionFlags"],"kind":"enum"},"6:4184:18400":{"crate_id":6,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:43741:11803":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"23:615:6171":{"crate_id":23,"path":["typenum","marker_traits","Bit"],"kind":"trait"},"18:14000:12981":{"crate_id":18,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:44592:6069":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"19:726:12645":{"crate_id":19,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:6460:25475":{"crate_id":17,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"12:2099:15964":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:7916:16463":{"crate_id":17,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"18:15966:13469":{"crate_id":18,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"18:12859:15824":{"crate_id":18,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"18:11591:12741":{"crate_id":18,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:33352:13874":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:3675:38069":{"crate_id":6,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:11077:15255":{"crate_id":6,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"18:12930:12854":{"crate_id":18,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"5:5507:12435":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"5:7695:16061":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:6981:13755":{"crate_id":17,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"7:5117:14531":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:10594:238":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"1:44884:16189":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:8622:18393":{"crate_id":6,"path":["std","net","Shutdown"],"kind":"enum"},"11:36:14072":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"7:5623:14750":{"crate_id":7,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:47894:15720":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"18:11552:16330":{"crate_id":18,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"18:13536:12854":{"crate_id":18,"path":["object","read","Relocation"],"kind":"struct"},"17:7762:13897":{"crate_id":17,"path":["gimli","read","op","Piece"],"kind":"struct"},"4:650:2572":{"crate_id":4,"path":["digest","InvalidOutputSize"],"kind":"struct"},"18:12190:15807":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:22754:18096":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:2679:11790":{"crate_id":1,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"18:12775:16385":{"crate_id":18,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:593:12376":{"crate_id":6,"path":["std","thread","Packet"],"kind":"struct"},"1:41229:16666":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"5:7084:12487":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"6:8707:16583":{"crate_id":6,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"7:5395:14632":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:7734:17702":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"18:11025:39151":{"crate_id":18,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:7946:13749":{"crate_id":17,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:32862:11856":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:43065:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"5:4546:12358":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"18:16249:13563":{"crate_id":18,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:40091:17659":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:44900:16105":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"7:538:14197":{"crate_id":7,"path":["libc","unix","pollfd"],"kind":"struct"},"21:24:2565":{"crate_id":21,"path":["crypto_common","hazmat","SerializedState"],"kind":"type_alias"},"1:42628:6066":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"17:7713:39140":{"crate_id":17,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"6:4228:18402":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:5725:12758":{"crate_id":17,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"18:14572:13099":{"crate_id":18,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:8148:13754":{"crate_id":17,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"12:1866:12452":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:43176:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"7:6631:14924":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"5:2248:12375":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:6645:198":{"crate_id":6,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"4:601:2393":{"crate_id":4,"path":["digest","core_api","ct_variable","CtVariableCoreWrapper"],"kind":"struct"},"12:2354:6065":{"crate_id":12,"path":["hashbrown","table","Iter"],"kind":"struct"},"7:6543:14877":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"7:4914:14453":{"crate_id":7,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"18:14506:13088":{"crate_id":18,"path":["object","macho","Fvmlib"],"kind":"struct"},"18:12305:15812":{"crate_id":18,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"21:120:6135":{"crate_id":21,"path":["crypto_common","KeyIvInit"],"kind":"trait"},"18:13553:12893":{"crate_id":18,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"10:412:24464":{"crate_id":10,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"7:6472:14836":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:22929:17927":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"7:4937:14462":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:12623:996":{"crate_id":6,"path":["std","isize"],"kind":"primitive"},"6:4834:15069":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"7:7439:15087":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"18:13027:16389":{"crate_id":18,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"4:114:2394":{"crate_id":4,"path":["digest","impl_oid_carrier"],"kind":"macro"},"5:3839:16001":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:47977:11773":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:44521:6079":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:7013:15925":{"crate_id":17,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"7:7524:15143":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"18:15417:13317":{"crate_id":18,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:46997:15642":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"18:12961:25679":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"18:11863:16343":{"crate_id":18,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"6:5369:216":{"crate_id":6,"path":["std","path","PathBuf"],"kind":"struct"},"23:2525:2388":{"crate_id":23,"path":["typenum","generated","consts","U32"],"kind":"type_alias"},"18:1338:16305":{"crate_id":18,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:13177:16182":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:8555:18356":{"crate_id":6,"path":["std","io","SeekFrom"],"kind":"enum"},"18:13908:12962":{"crate_id":18,"path":["object","elf","Syminfo32"],"kind":"struct"},"7:7284:15023":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:34182:17640":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:43719:29936":{"crate_id":1,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"7:4829:14398":{"crate_id":7,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:23188:16087":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:42572:15574":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"18:12815:12851":{"crate_id":18,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:2465:13705":{"crate_id":17,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:47940:6731":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:3694:18374":{"crate_id":6,"path":["std","io","BufRead"],"kind":"trait"},"6:9426:37264":{"crate_id":6,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"6:12057:16533":{"crate_id":6,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"7:4792:14371":{"crate_id":7,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"7:6687:14943":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"17:8500:13974":{"crate_id":17,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"6:5911:232":{"crate_id":6,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"18:15035:13190":{"crate_id":18,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"18:12761:16384":{"crate_id":18,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"7:6695:14947":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"6:4421:16536":{"crate_id":6,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:4063:12452":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"18:14519:13091":{"crate_id":18,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"6:10760:12418":{"crate_id":6,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"7:5428:14649":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:22847:17925":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:14338:12396":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"23:2397:18096":{"crate_id":23,"path":["typenum","sealed","Sealed"],"kind":"trait"},"18:15638:13385":{"crate_id":18,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:8617:16581":{"crate_id":6,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"18:16077:13522":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:2803:16524":{"crate_id":6,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:1657:15997":{"crate_id":6,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"7:5557:14715":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:41133:16116":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:32805:258":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"5:4482:12459":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:6121:13740":{"crate_id":17,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"18:10140:25535":{"crate_id":18,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:47405:15676":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"18:16716:13685":{"crate_id":18,"path":["object","xcoff","FunAux64"],"kind":"struct"},"5:3695:6065":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"18:12370:12805":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:41293:16122":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"7:5585:14727":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:6751:16149":{"crate_id":6,"path":["std","sync","once","Once"],"kind":"struct"},"7:5295:14595":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"7:1494:14228":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:11023:16024":{"crate_id":6,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"17:3585:13761":{"crate_id":17,"path":["gimli","arch","MIPS"],"kind":"struct"},"1:3193:16640":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"1:42688:17751":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"18:14219:13022":{"crate_id":18,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"15:40:12936":{"crate_id":15,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:3621:6108":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"21:0:2561":{"crate_id":21,"path":["crypto_common"],"kind":"module"},"6:5918:12400":{"crate_id":6,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"6:906:6066":{"crate_id":6,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:3036:18096":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:8025:13920":{"crate_id":17,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:42620:6065":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"7:5186:14538":{"crate_id":7,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:6500:24583":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"12:1083:16492":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"20:0:1327":{"crate_id":20,"path":["panic_unwind"],"kind":"module"},"6:3627:16532":{"crate_id":6,"path":["std","io","IoSliceMut"],"kind":"struct"},"5:7060:12472":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"18:14326:13060":{"crate_id":18,"path":["object","macho","FatHeader"],"kind":"struct"},"6:9354:16592":{"crate_id":6,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:44349:16671":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:6571:15902":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:4118:13764":{"crate_id":17,"path":["gimli","constants","DwSect"],"kind":"struct"},"18:15974:13470":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:2665:697":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:12617:914":{"crate_id":6,"path":["std","i128"],"kind":"primitive"},"1:34249:17639":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"18:14298:13056":{"crate_id":18,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"6:4025:16535":{"crate_id":6,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:2818:13726":{"crate_id":17,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:45230:16214":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:45355:16223":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:23032:11790":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"18:13192:16395":{"crate_id":18,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"7:1703:14356":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"18:16164:13537":{"crate_id":18,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"23:5711:6153":{"crate_id":23,"path":["typenum","generated","generic_const_mappings","Const"],"kind":"struct"},"1:22118:33321":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"5:5281:12467":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:44909:16110":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:45196:17803":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"23:998:18095":{"crate_id":23,"path":["typenum","private","PrivateRem"],"kind":"trait"},"7:5205:14550":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"7:7962:15171":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:3141:127":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"18:16262:13568":{"crate_id":18,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"18:15724:13406":{"crate_id":18,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"5:3076:34203":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:44696:6071":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:41110:15558":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"25:271:2385":{"crate_id":25,"path":["const_oid","ObjectIdentifier"],"kind":"struct"},"12:750:15993":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"6:12186:37276":{"crate_id":6,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"18:10842:12769":{"crate_id":18,"path":["object","read","util","StringTable"],"kind":"struct"},"6:8668:18425":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:23602:15346":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"7:5165:14535":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"18:15694:13395":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:11968:6074":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"4:673:2741":{"crate_id":4,"path":["digest","hashwriter","HashWriter"],"kind":"struct"},"5:6158:18190":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"18:11984:16347":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"6:12034:12425":{"crate_id":6,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"11:44:14073":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"18:11231:25562":{"crate_id":18,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:44511:6078":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"18:11578:16332":{"crate_id":18,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"7:1569:14269":{"crate_id":7,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:11058:152":{"crate_id":6,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"5:1395:16489":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:2681:11791":{"crate_id":1,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"6:11554:16618":{"crate_id":6,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"4:467:2728":{"crate_id":4,"path":["digest","XofReader"],"kind":"trait"},"6:9278:15284":{"crate_id":6,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"18:14611:13104":{"crate_id":18,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"7:6802:14979":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"18:0:2722":{"crate_id":18,"path":["object"],"kind":"module"},"18:13426:12886":{"crate_id":18,"path":["object","read","ObjectMapFile"],"kind":"struct"},"17:5447:13792":{"crate_id":17,"path":["gimli","constants","DwRle"],"kind":"struct"},"7:4947:14468":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:47388:15675":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"11:0:2715":{"crate_id":11,"path":["adler"],"kind":"module"},"18:15778:13418":{"crate_id":18,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"18:10331:25541":{"crate_id":18,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:41102:16115":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"struct"},"6:535:12375":{"crate_id":6,"path":["std","thread","PanicGuard"],"kind":"struct"},"18:14083:12998":{"crate_id":18,"path":["object","elf","Verneed"],"kind":"struct"},"18:14559:13097":{"crate_id":18,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:46828:15625":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:42991:97":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"18:11290:39155":{"crate_id":18,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"18:3502:16311":{"crate_id":18,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"18:11357:25559":{"crate_id":18,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"7:7445:15088":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:45131:16204":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"23:9461:6150":{"crate_id":23,"path":["typenum","array","ATerm"],"kind":"struct"},"7:5217:14557":{"crate_id":7,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"18:14691:13113":{"crate_id":18,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:4762:16644":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:47920:11769":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:4402:13769":{"crate_id":17,"path":["gimli","constants","DwTag"],"kind":"struct"},"18:1219:16304":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"5:4286:12358":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"6:5292:16539":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:42819:226":{"crate_id":1,"path":["core","range","RangeInclusive"],"kind":"struct"},"2:234:238":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:22967:17928":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"1:8803:17701":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:4232:18403":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:2504:18346":{"crate_id":6,"path":["std","fs","read_link"],"kind":"function"},"6:8257:15214":{"crate_id":6,"path":["std","fs","FileTimes"],"kind":"struct"},"18:13591:12898":{"crate_id":18,"path":["object","read","CompressedFileRange"],"kind":"struct"},"5:5406:12469":{"crate_id":5,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"1:40947:29798":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"18:16311:13583":{"crate_id":18,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"7:6459:14827":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:10342:16157":{"crate_id":6,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"18:12043:16355":{"crate_id":18,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:8733:15261":{"crate_id":6,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"5:3075:16046":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:47471:15678":{"crate_id":1,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"6:5323:16539":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:2091:210":{"crate_id":6,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"7:5301:14598":{"crate_id":7,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:6711:16429":{"crate_id":17,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:2021:18337":{"crate_id":6,"path":["std","error","Indented"],"kind":"struct"},"1:40906:16106":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:14042:16657":{"crate_id":1,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"1:2224:11779":{"crate_id":1,"path":["core","ptr","metadata","metadata"],"kind":"function"},"4:659:2736":{"crate_id":4,"path":["digest","InvalidBufferSize"],"kind":"struct"},"17:4692:13770":{"crate_id":17,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:6606:218":{"crate_id":17,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"6:3085:150":{"crate_id":6,"path":["std","io","error","Error"],"kind":"struct"},"18:14283:13051":{"crate_id":18,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"18:11705:16336":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:5712:16545":{"crate_id":6,"path":["std","process","ChildStderr"],"kind":"struct"},"18:11308:16325":{"crate_id":18,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"18:14831:13154":{"crate_id":18,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"4:458:2725":{"crate_id":4,"path":["digest","Update"],"kind":"trait"},"1:42332:182":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"12:813:16482":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"7:5568:14720":{"crate_id":7,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"18:15159:13209":{"crate_id":18,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"18:15990:13473":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:11327:15280":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"18:14357:13067":{"crate_id":18,"path":["object","macho","MachHeader32"],"kind":"struct"},"7:7494:15126":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:1629:6065":{"crate_id":6,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:705:18301":{"crate_id":6,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"4:439:2738":{"crate_id":4,"path":["digest","digest","DynDigestWithOid"],"kind":"trait"},"1:23108:17922":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1:3533:17658":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:6110:12358":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"5:1208:37049":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:32804:251":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"6:12618:1901":{"crate_id":6,"path":["std","u8"],"kind":"primitive"},"6:7941:12748":{"crate_id":6,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:4182:13766":{"crate_id":17,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:42370:15565":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"6:8279:152":{"crate_id":6,"path":["std","fs","FileType"],"kind":"struct"},"7:7308:15040":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:10448:16514":{"crate_id":6,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"1:41829:12506":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"7:6878:15005":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"18:16180:13541":{"crate_id":18,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"12:832:16485":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"18:13920:12965":{"crate_id":18,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:47128:15649":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:10661:218":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:22225:17841":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"18:10486:25546":{"crate_id":18,"path":["object","common","RelocationFlags"],"kind":"enum"},"23:642:6187":{"crate_id":23,"path":["typenum","marker_traits","Integer"],"kind":"trait"},"17:6300:15864":{"crate_id":17,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:23347:16093":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"8:31:24449":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:2230:11804":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"18:10563:12760":{"crate_id":18,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:23668:15352":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"1:42354:15563":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"18:10662:12763":{"crate_id":18,"path":["object","endian","I16Bytes"],"kind":"struct"},"7:5366:14616":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:906:16301":{"crate_id":17,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"5:7544:16058":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"21:56:2553":{"crate_id":21,"path":["crypto_common","Block"],"kind":"type_alias"},"1:46708:15614":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"18:12839:15819":{"crate_id":18,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"23:9019:6030":{"crate_id":23,"path":["typenum","bit","B1"],"kind":"struct"},"6:9446:15291":{"crate_id":6,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"18:15912:13455":{"crate_id":18,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:7786:39141":{"crate_id":17,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"21:127:6137":{"crate_id":21,"path":["crypto_common","InnerIvInit"],"kind":"trait"},"6:12217:12429":{"crate_id":6,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"6:6941:12408":{"crate_id":6,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"18:11776:15796":{"crate_id":18,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"6:8592:12766":{"crate_id":6,"path":["std","io","Bytes"],"kind":"struct"},"4:464:2727":{"crate_id":4,"path":["digest","FixedOutputReset"],"kind":"trait"},"21:83:6123":{"crate_id":21,"path":["crypto_common","BlockSizes"],"kind":"trait"},"1:43779:11986":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"18:15707:13401":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:2336:16521":{"crate_id":6,"path":["std","fs","DirEntry"],"kind":"struct"},"7:1489:14226":{"crate_id":7,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:42860:238":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:42679:16668":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:6736:39138":{"crate_id":17,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:6431:12396":{"crate_id":6,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"6:10608:116":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"4:612:6040":{"crate_id":4,"path":["digest","core_api","rt_variable","RtVariableCoreWrapper"],"kind":"struct"},"6:937:15994":{"crate_id":6,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:4340:18421":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"7:5658:14763":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:1864:722":{"crate_id":6,"path":["std","env"],"kind":"module"},"1:2778:103":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"6:5728:116":{"crate_id":6,"path":["std","process","Command"],"kind":"struct"},"15:7:16476":{"crate_id":15,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"12:321:15990":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"18:12175:15806":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:45371:15298":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"5:297:2737":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"12:1027:16490":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:39476:17650":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:8562:15982":{"crate_id":17,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"12:983:15964":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:2908:214":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"18:15076:13195":{"crate_id":18,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"18:12233:12868":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"7:5319:14605":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"18:15932:13461":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:11039:16030":{"crate_id":6,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"1:47099:15648":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"7:553:14205":{"crate_id":7,"path":["libc","unix","linger"],"kind":"struct"},"1:23018:17929":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"6:9512:12411":{"crate_id":6,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"6:8575:16119":{"crate_id":6,"path":["std","io","Chain"],"kind":"struct"},"1:6800:16075":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:11201:12510":{"crate_id":1,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"7:5139:14533":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"18:11447:16327":{"crate_id":18,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"18:10273:25539":{"crate_id":18,"path":["object","common","SymbolScope"],"kind":"enum"},"1:15:2688":{"crate_id":1,"path":["core","write"],"kind":"macro"},"0:0:2070":{"crate_id":0,"path":["sha2"],"kind":"module"},"18:15495:13360":{"crate_id":18,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"6:9469:199":{"crate_id":6,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"18:14098:13004":{"crate_id":18,"path":["object","elf","Vernaux"],"kind":"struct"},"5:6555:18200":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"7:6670:14933":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"6:5925:16002":{"crate_id":6,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:3419:17653":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"1:9479:16651":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"23:1241:6206":{"crate_id":23,"path":["typenum","type_operators","IsLessOrEqual"],"kind":"trait"},"6:1645:15995":{"crate_id":6,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"7:5503:14694":{"crate_id":7,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"18:11997:16348":{"crate_id":18,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"5:981:12443":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"18:11877:12792":{"crate_id":18,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:3060:77":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"23:1231:6205":{"crate_id":23,"path":["typenum","type_operators","IsGreater"],"kind":"trait"},"6:9502:247":{"crate_id":6,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"6:12614:921":{"crate_id":6,"path":["std","i16"],"kind":"primitive"},"1:3152:150":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"6:7224:18496":{"crate_id":6,"path":["std","std_float","StdFloat"],"kind":"trait"},"18:11756:25582":{"crate_id":18,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"18:11464:15790":{"crate_id":18,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"6:12385:12431":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"18:15548:13366":{"crate_id":18,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:155:12361":{"crate_id":17,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:5121:18446":{"crate_id":6,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"7:5224:14558":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:4900:13775":{"crate_id":17,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:40267:6058":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:45640:192":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:44562:16170":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"19:573:12621":{"crate_id":19,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"18:13069:12792":{"crate_id":18,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"21:1182:6138":{"crate_id":21,"path":["crypto_common","InvalidLength"],"kind":"struct"},"18:15674:13391":{"crate_id":18,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:2126:11843":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"17:7398:39139":{"crate_id":17,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"7:5539:14707":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:6534:12400":{"crate_id":6,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"7:8237:15189":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:47050:15645":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"5:6688:12452":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:996:16485":{"crate_id":6,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"18:12647:12844":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:12118:16535":{"crate_id":6,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:46886:15629":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:2964:13733":{"crate_id":17,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"18:14042:12986":{"crate_id":18,"path":["object","elf","Versym"],"kind":"struct"},"6:8093:12419":{"crate_id":6,"path":["std","thread","Thread"],"kind":"struct"},"19:491:15772":{"crate_id":19,"path":["memchr","cow","Imp"],"kind":"struct"},"7:1657:14336":{"crate_id":7,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"12:1042:24542":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"23:9642:6026":{"crate_id":23,"path":["typenum","uint","UTerm"],"kind":"struct"},"6:8299:16007":{"crate_id":6,"path":["std","hash","random","RandomState"],"kind":"struct"},"1:45339:16219":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"7:6756:14963":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"7:559:14208":{"crate_id":7,"path":["libc","unix","sigval"],"kind":"struct"},"12:1063:39118":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"6:8312:16571":{"crate_id":6,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"5:4356:6065":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:6623:15905":{"crate_id":17,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"18:16534:13643":{"crate_id":18,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"1:13385:2753":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"18:15409:13314":{"crate_id":18,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:22349:17842":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"18:3853:16313":{"crate_id":18,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"5:3788:12435":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:7540:38037":{"crate_id":6,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:33564:13872":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"6:11620:14130":{"crate_id":6,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"1:41591:16144":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"7:4984:14484":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:648:18299":{"crate_id":6,"path":["std","ascii","AsciiExt"],"kind":"trait"},"7:5311:14602":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"18:13013:16387":{"crate_id":18,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"1:10665:11981":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:7220:15933":{"crate_id":17,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:3815:32373":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"4:324:6041":{"crate_id":4,"path":["digest","core_api","wrapper","CoreProxy"],"kind":"trait"},"18:11787:16337":{"crate_id":18,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"6:12599:492":{"crate_id":6,"path":["std","char"],"kind":"primitive"},"18:10695:12764":{"crate_id":18,"path":["object","endian","I32Bytes"],"kind":"struct"},"18:12905:12853":{"crate_id":18,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"18:13360:12884":{"crate_id":18,"path":["object","read","SymbolMapName"],"kind":"struct"},"23:9577:148":{"crate_id":23,"path":["typenum","Equal"],"kind":"struct"},"19:538:12626":{"crate_id":19,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"19:548:165":{"crate_id":19,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:6996:245":{"crate_id":6,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"7:8225:15187":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"4:390:2382":{"crate_id":4,"path":["digest","digest","Digest"],"kind":"trait"},"1:12598:2548":{"crate_id":1,"path":["core","slice","raw","from_ref"],"kind":"function"},"18:11280:16324":{"crate_id":18,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"5:4151:12435":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:3693:13762":{"crate_id":17,"path":["gimli","arch","RiscV"],"kind":"struct"},"6:8585:16143":{"crate_id":6,"path":["std","io","Take"],"kind":"struct"},"23:1051:18098":{"crate_id":23,"path":["typenum","private","IsEqualPrivate"],"kind":"trait"},"12:2394:11916":{"crate_id":12,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"5:7612:11916":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"10:470:24461":{"crate_id":10,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"23:1276:6167":{"crate_id":23,"path":["typenum","type_operators","Gcd"],"kind":"trait"},"18:15539:13365":{"crate_id":18,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:2988:13734":{"crate_id":17,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:43139:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"12:427:39114":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:40055:17660":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"19:113:29733":{"crate_id":19,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"7:578:14218":{"crate_id":7,"path":["libc","unix","servent"],"kind":"struct"},"18:15120:13202":{"crate_id":18,"path":["object","macho","Nlist64"],"kind":"struct"},"7:5494:14688":{"crate_id":7,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"1:43733:74":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"5:1409:16494":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"18:14772:13148":{"crate_id":18,"path":["object","macho","DylibModule64"],"kind":"struct"},"4:620:2392":{"crate_id":4,"path":["digest","core_api","wrapper","CoreWrapper"],"kind":"struct"},"1:14550:2043":{"crate_id":1,"path":["core","core_arch","arch","x86_64"],"kind":"module"},"18:13040:16390":{"crate_id":18,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"1:4528:17675":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"23:611:202":{"crate_id":23,"path":["typenum","marker_traits","NonZero"],"kind":"trait"},"6:10885:12419":{"crate_id":6,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"17:8708:13982":{"crate_id":17,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"18:12279:16361":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:8264:13936":{"crate_id":17,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"18:10860:151":{"crate_id":18,"path":["object","read","any","File"],"kind":"enum"},"7:6500:14848":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:42840:224":{"crate_id":1,"path":["core","range","RangeFrom"],"kind":"struct"},"5:7857:12480":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:4897:11989":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:12051:6068":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:23358:29770":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"7:5477:14683":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:45598:16672":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"18:14311:13058":{"crate_id":18,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"18:14054:12987":{"crate_id":18,"path":["object","elf","Verdef"],"kind":"struct"},"18:13289:12716":{"crate_id":18,"path":["object","read","SectionIndex"],"kind":"struct"},"1:44409:6062":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"23:5714:6154":{"crate_id":23,"path":["typenum","generated","generic_const_mappings","ToUInt"],"kind":"trait"},"1:23547:15341":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"1:47166:15651":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"7:4875:14432":{"crate_id":7,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"18:15946:13463":{"crate_id":18,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:42954:90":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:44997:16191":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:5142:13782":{"crate_id":17,"path":["gimli","constants","DwCc"],"kind":"struct"},"7:4869:14431":{"crate_id":7,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:44551:16169":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:4218:18401":{"crate_id":6,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:7383:13859":{"crate_id":17,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:8295:15972":{"crate_id":17,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:4481:16641":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"23:942:18128":{"crate_id":23,"path":["typenum","private","PrivateDiv"],"kind":"trait"},"23:1190:6158":{"crate_id":23,"path":["typenum","type_operators","Cmp"],"kind":"trait"},"18:12523:16370":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"0:122:2424":{"crate_id":0,"path":["sha2","Sha512"],"kind":"type_alias"},"7:6659:14931":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"18:12896:15826":{"crate_id":18,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:45351:16222":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"18:15556:13367":{"crate_id":18,"path":["object","pe","Guid"],"kind":"struct"},"23:783:18092":{"crate_id":23,"path":["typenum","private","InternalMarker"],"kind":"trait"},"1:41375:16133":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:42498:29803":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"7:5550:14713":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:41345:16130":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"19:698:15780":{"crate_id":19,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:4265:13768":{"crate_id":17,"path":["gimli","constants","DwChildren"],"kind":"struct"},"18:14671:13112":{"crate_id":18,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:8674:16582":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:47966:11772":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"7:6422:14813":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:10659:11979":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:6967:13738":{"crate_id":17,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:42727:16162":{"crate_id":1,"path":["core","range","iter","IterRange"],"kind":"struct"},"18:13144:16391":{"crate_id":18,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"22:143:2549":{"crate_id":22,"path":["hybrid_array","Array"],"kind":"struct"},"18:15924:13458":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"12:1898:15998":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"26:0:2425":{"crate_id":26,"path":["cfg_if"],"kind":"module"},"17:7935:15965":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"18:14626:13107":{"crate_id":18,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"6:4832:15067":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"1:24126:248":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:41061:16113":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"6:3547:16151":{"crate_id":6,"path":["std","io","util","Repeat"],"kind":"struct"},"1:41814:16150":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:11220:12422":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:31190:11846":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:22351:15322":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:8766:16584":{"crate_id":6,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"23:1198:6165":{"crate_id":23,"path":["typenum","type_operators","PartialDiv"],"kind":"trait"},"1:46723:15615":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"12:1136:16494":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"18:15350:13262":{"crate_id":18,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:22170:18096":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"7:6617:14913":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:9807:16569":{"crate_id":6,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"1:44891:16111":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:5345:454":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:23241:16088":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"5:1244:37050":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"7:5025:14506":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:38787:17647":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"7:5255:14573":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:3577:12358":{"crate_id":6,"path":["std","io","Guard"],"kind":"struct"},"18:11690:16335":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"7:6513:14854":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:4808:13772":{"crate_id":17,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:6111:12390":{"crate_id":6,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:7858:37306":{"crate_id":6,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"1:41605:16145":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:1881:16513":{"crate_id":6,"path":["std","env","VarsOs"],"kind":"struct"},"18:14858:13157":{"crate_id":18,"path":["object","macho","RpathCommand"],"kind":"struct"},"6:11941:15308":{"crate_id":6,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:4909:18426":{"crate_id":6,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"7:8304:15204":{"crate_id":7,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"18:14532:12812":{"crate_id":18,"path":["object","macho","Dylib"],"kind":"struct"},"17:7055:15927":{"crate_id":17,"path":["gimli","read","line","LineRows"],"kind":"struct"},"7:6505:14849":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:3775:6059":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"25:236:150":{"crate_id":25,"path":["const_oid","error","Error"],"kind":"enum"},"7:8249:15191":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"24:160:2551":{"crate_id":24,"path":["block_buffer","Eager"],"kind":"struct"},"7:8316:15208":{"crate_id":7,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"10:490:14133":{"crate_id":10,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:45248:16216":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:23591:15345":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"6:5676:16543":{"crate_id":6,"path":["std","process","ChildStdin"],"kind":"struct"},"6:893:6065":{"crate_id":6,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:6755:16553":{"crate_id":6,"path":["std","sync","once","OnceState"],"kind":"struct"},"7:1563:14267":{"crate_id":7,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"7:4929:14460":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:6901:15914":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:7575:15288":{"crate_id":17,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:23646:15350":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"18:505:12702":{"crate_id":18,"path":["object","read","any","Section"],"kind":"struct"},"1:43947:16165":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"4:365:6036":{"crate_id":4,"path":["digest","core_api","FixedOutputCore"],"kind":"trait"},"1:3830:115":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:1992:16517":{"crate_id":6,"path":["std","error","Report"],"kind":"struct"},"7:473:14157":{"crate_id":7,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:6792:15907":{"crate_id":17,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"7:5471:14680":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:6835:16440":{"crate_id":17,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:5707:25471":{"crate_id":17,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:45679:16231":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:4981:13778":{"crate_id":17,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:10907:12221":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"18:11957:16345":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"18:15530:13361":{"crate_id":18,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"18:14151:13018":{"crate_id":18,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:41123:107":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"6:9393:16598":{"crate_id":6,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:6187:16073":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"6:8878:18470":{"crate_id":6,"path":["std","path","Component"],"kind":"enum"},"18:13514:25551":{"crate_id":18,"path":["object","read","RelocationTarget"],"kind":"enum"},"23:785:18123":{"crate_id":23,"path":["typenum","private","Trim"],"kind":"trait"},"7:5044:14515":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:46936:15639":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:45012:16197":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"5:2360:16053":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"18:12408:25654":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:26526:283":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:7256:15945":{"crate_id":17,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:6257:12400":{"crate_id":6,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"6:2516:18352":{"crate_id":6,"path":["std","fs","read_dir"],"kind":"function"},"1:48015:11775":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"18:10728:12765":{"crate_id":18,"path":["object","endian","I64Bytes"],"kind":"struct"},"6:12603:351":{"crate_id":6,"path":["std","array"],"kind":"primitive"},"7:5341:14610":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"16:394:24575":{"crate_id":16,"path":["addr2line","DebugFile"],"kind":"enum"},"5:7258:12495":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"18:16619:13658":{"crate_id":18,"path":["object","xcoff","Symbol32"],"kind":"struct"},"1:47367:15674":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"18:14126:13014":{"crate_id":18,"path":["object","elf","NoteHeader64"],"kind":"struct"},"18:12549:12839":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"10:226:6740":{"crate_id":10,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:1640:12476":{"crate_id":6,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:3320:11852":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"7:8231:15188":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"18:321:16301":{"crate_id":18,"path":["object","read","util","DebugLen"],"kind":"struct"},"7:1539:14250":{"crate_id":7,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:3957:71":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"19:718:12642":{"crate_id":19,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:2781:104":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:5377:13790":{"crate_id":17,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:32894:278":{"crate_id":1,"path":["core","marker","UnsizedConstParamTy"],"kind":"trait"},"5:5552:18181":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:12037:6072":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:22144:18104":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"5:7584:16059":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"5:1630:16627":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:34634:17644":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"19:96:29732":{"crate_id":19,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"18:13569:25552":{"crate_id":18,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:47911:6552":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:8245:16569":{"crate_id":6,"path":["std","fs","ReadDir"],"kind":"struct"},"22:0:2724":{"crate_id":22,"path":["hybrid_array"],"kind":"module"},"1:41416:16137":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"18:2226:16306":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"23:2669:2570":{"crate_id":23,"path":["typenum","generated","consts","U80"],"kind":"type_alias"},"1:43939:12224":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"8:0:1955":{"crate_id":8,"path":["unwind"],"kind":"module"},"6:2488:11779":{"crate_id":6,"path":["std","fs","metadata"],"kind":"function"},"1:13432:16652":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:3394:6109":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"5:7576:222":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"18:13609:12901":{"crate_id":18,"path":["object","read","CompressedData"],"kind":"struct"},"1:42930:208":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"6:4120:18396":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:7468:13864":{"crate_id":17,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"18:16611:13657":{"crate_id":18,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"18:13005:12861":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:7459:16442":{"crate_id":17,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"10:49:24480":{"crate_id":10,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:8206:13742":{"crate_id":17,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"18:14962:13174":{"crate_id":18,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"18:316:16300":{"crate_id":18,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:22223:18096":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:22154:33328":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"18:13180:16394":{"crate_id":18,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"12:2323:16490":{"crate_id":12,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"16:0:2720":{"crate_id":16,"path":["addr2line"],"kind":"module"},"17:6237:13798":{"crate_id":17,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"6:1636:12452":{"crate_id":6,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"6:1120:16490":{"crate_id":6,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"7:8272:15197":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"18:11951:16344":{"crate_id":18,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:34115:17642":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:43102:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:6032:16547":{"crate_id":6,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:4888:12499":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"18:13156:16392":{"crate_id":18,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"7:4816:14388":{"crate_id":7,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"18:14639:13108":{"crate_id":18,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:8083:12391":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"18:11172:39154":{"crate_id":18,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:45543:176":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:7492:15956":{"crate_id":17,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:3796:17655":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:47018:15643":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"7:5521:14696":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:44742:16180":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"5:5556:18182":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:12009:6071":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"18:12825:15815":{"crate_id":18,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"18:14018:12982":{"crate_id":18,"path":["object","elf","Dyn32"],"kind":"struct"},"6:12622:1877":{"crate_id":6,"path":["std","u128"],"kind":"primitive"},"1:47873:15719":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:6911:15915":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"19:689:15779":{"crate_id":19,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"18:13944:12969":{"crate_id":18,"path":["object","elf","Rela32"],"kind":"struct"},"17:3985:12664":{"crate_id":17,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"18:12334:16367":{"crate_id":18,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"6:9365:16594":{"crate_id":6,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:44196:6094":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:8792:15271":{"crate_id":6,"path":["std","path","Prefix"],"kind":"enum"},"1:31152:6103":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:7165:13839":{"crate_id":17,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:7209:15932":{"crate_id":17,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:14130:32941":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:4948:18413":{"crate_id":6,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:7977:13750":{"crate_id":17,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"18:13853:12954":{"crate_id":18,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"5:3354:15998":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:3923:16534":{"crate_id":6,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:7735:17703":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"5:7185:280":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:3592:155":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"18:10114:25534":{"crate_id":18,"path":["object","common","AddressSize"],"kind":"enum"},"19:765:29741":{"crate_id":19,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"5:6502:12475":{"crate_id":5,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"6:8070:16564":{"crate_id":6,"path":["std","thread","Builder"],"kind":"struct"},"7:5640:14754":{"crate_id":7,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"7:6710:14949":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"12:2525:39109":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"5:4196:6066":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"6:11969:16561":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"7:6486:14847":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:2339:6116":{"crate_id":6,"path":["std","fs","read"],"kind":"function"},"7:1675:14343":{"crate_id":7,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:8317:25485":{"crate_id":17,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:9800:151":{"crate_id":6,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"18:11804:16340":{"crate_id":18,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:288:24564":{"crate_id":16,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"18:10927:16319":{"crate_id":18,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:42386:17744":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:44610:6073":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:3057:78":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"7:5230:14561":{"crate_id":7,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"7:6610:14912":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:44400:6064":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"18:13982:12973":{"crate_id":18,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"12:1871:12476":{"crate_id":12,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"23:1174:6202":{"crate_id":23,"path":["typenum","type_operators","Abs"],"kind":"trait"},"17:6864:25477":{"crate_id":17,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"5:3258:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:48030:11776":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:13454:17787":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:6729:16437":{"crate_id":17,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:23458:16095":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:7189:25479":{"crate_id":17,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"18:13546:16397":{"crate_id":18,"path":["object","read","RelocationMap"],"kind":"struct"},"1:43289:98":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"18:13661:12908":{"crate_id":18,"path":["object","archive","AixHeader"],"kind":"struct"},"1:23465:15340":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:2898:13730":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:2568:13715":{"crate_id":17,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:6066:16551":{"crate_id":6,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:8800:162":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:11351:37295":{"crate_id":6,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"7:5282:14590":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:14025:16654":{"crate_id":1,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"18:11817:16341":{"crate_id":18,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:23075:17923":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"18:12224:15811":{"crate_id":18,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"18:14415:13074":{"crate_id":18,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"18:15822:13430":{"crate_id":18,"path":["object","pe","ImageImportByName"],"kind":"struct"},"7:5107:14530":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"0:118:2416":{"crate_id":0,"path":["sha2","Sha256"],"kind":"type_alias"},"12:123:12364":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"4:480:2731":{"crate_id":4,"path":["digest","VariableOutput"],"kind":"trait"},"1:23103:17924":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"23:1261:6175":{"crate_id":23,"path":["typenum","type_operators","IsGreaterOrEqual"],"kind":"trait"},"7:5630:14753":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"18:12107:15801":{"crate_id":18,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:32861:6440":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"5:1610:16481":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:6656:16418":{"crate_id":17,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:45547:231":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"18:10596:12761":{"crate_id":18,"path":["object","endian","U32Bytes"],"kind":"struct"},"19:608:16294":{"crate_id":19,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"18:15430:13324":{"crate_id":18,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"5:6263:12358":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:5312:30759":{"crate_id":1,"path":["core","ffi","va_list","sealed_trait","VaArgSafe"],"kind":"trait"},"18:15314:13231":{"crate_id":18,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:45535:15604":{"crate_id":1,"path":["core","future","async_drop","Noop"],"kind":"struct"},"7:586:14222":{"crate_id":7,"path":["libc","unix","protoent"],"kind":"struct"},"1:42532:16011":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"7:7407:15076":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:5662:16540":{"crate_id":6,"path":["std","process","Child"],"kind":"struct"},"1:34807:17645":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"21:35:2564":{"crate_id":21,"path":["crypto_common","hazmat","SerializableState"],"kind":"trait"},"18:13797:12939":{"crate_id":18,"path":["object","elf","SectionHeader32"],"kind":"struct"},"7:6852:14990":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"18:16592:12949":{"crate_id":18,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"18:10096:25533":{"crate_id":18,"path":["object","common","SubArchitecture"],"kind":"enum"},"23:814:18111":{"crate_id":23,"path":["typenum","private","PrivateAnd"],"kind":"trait"},"17:8162:13744":{"crate_id":17,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:11123:16546":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"18:13889:12961":{"crate_id":18,"path":["object","elf","Sym64"],"kind":"struct"},"24:101:2581":{"crate_id":24,"path":["block_buffer","BufferKind"],"kind":"trait"},"18:16645:13664":{"crate_id":18,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:10663:11980":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"23:9104:6031":{"crate_id":23,"path":["typenum","int","Z0"],"kind":"struct"},"7:1507:14234":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:5222:13785":{"crate_id":17,"path":["gimli","constants","DwDsc"],"kind":"struct"},"18:12569:16373":{"crate_id":18,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"7:5664:14766":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"18:13168:16393":{"crate_id":18,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"17:7966:15969":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"23:1195:6176":{"crate_id":23,"path":["typenum","type_operators","Len"],"kind":"trait"},"18:14345:13065":{"crate_id":18,"path":["object","macho","FatArch64"],"kind":"struct"},"23:1206:6162":{"crate_id":23,"path":["typenum","type_operators","Max"],"kind":"trait"},"18:14932:13168":{"crate_id":18,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"18:15770:13416":{"crate_id":18,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:3439:13760":{"crate_id":17,"path":["gimli","arch","LoongArch"],"kind":"struct"},"6:4950:18414":{"crate_id":6,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"18:12786:12846":{"crate_id":18,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:6873:13813":{"crate_id":17,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:41820:16151":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:8711:15056":{"crate_id":6,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"5:3086:34202":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"18:16125:13523":{"crate_id":18,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"7:5387:14627":{"crate_id":7,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:4170:18398":{"crate_id":6,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"8:78:24456":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:14358:12513":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"18:15023:13189":{"crate_id":18,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:8304:16010":{"crate_id":6,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"1:42648:15577":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"18:13732:12921":{"crate_id":18,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:7369:13746":{"crate_id":17,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"7:4890:14439":{"crate_id":7,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"18:13691:12912":{"crate_id":18,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:5127:17693":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"5:7504:11916":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:7884:37308":{"crate_id":6,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"1:41446:16139":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:7505:15959":{"crate_id":17,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:1129:16494":{"crate_id":6,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:23489:17479":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"6:2490:18342":{"crate_id":6,"path":["std","fs","symlink_metadata"],"kind":"function"},"18:14546:13096":{"crate_id":18,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:12597:436":{"crate_id":6,"path":["std","bool"],"kind":"primitive"},"1:14315:119":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"6:9812:12417":{"crate_id":6,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"23:9480:6151":{"crate_id":23,"path":["typenum","array","TArr"],"kind":"struct"},"1:7851:17730":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"18:12940:12856":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"18:16138:13529":{"crate_id":18,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"4:363:2556":{"crate_id":4,"path":["digest","core_api","BufferKindUser"],"kind":"trait"},"1:14450:17838":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:0:585":{"crate_id":1,"path":["core"],"kind":"module"},"6:11442:15300":{"crate_id":6,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"6:6872:18488":{"crate_id":6,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"23:1184:6163":{"crate_id":23,"path":["typenum","type_operators","Pow"],"kind":"trait"},"21:107:6132":{"crate_id":21,"path":["crypto_common","IvSizeUser"],"kind":"trait"},"1:47931:11770":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"18:14651:13109":{"crate_id":18,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:10657:11978":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:45557:239":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:22108:33321":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1:44660:16177":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"0:117:2414":{"crate_id":0,"path":["sha2","Sha224"],"kind":"type_alias"},"1:23431:29774":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"17:6387:16401":{"crate_id":17,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"18:13450:12888":{"crate_id":18,"path":["object","read","Import"],"kind":"struct"},"1:23380:15329":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"7:5412:1279":{"crate_id":7,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"23:924:18113":{"crate_id":23,"path":["typenum","private","PrivateCmp"],"kind":"trait"},"6:8055:18096":{"crate_id":6,"path":["std","sealed","Sealed"],"kind":"trait"},"18:10393:25543":{"crate_id":18,"path":["object","common","SegmentFlags"],"kind":"enum"},"18:13756:12935":{"crate_id":18,"path":["object","elf","FileHeader64"],"kind":"struct"},"5:5811:12472":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"18:16356:13589":{"crate_id":18,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"18:16152:13535":{"crate_id":18,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"18:13780:12936":{"crate_id":18,"path":["object","elf","Ident"],"kind":"struct"},"12:808:16495":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"21:125:6136":{"crate_id":21,"path":["crypto_common","InnerInit"],"kind":"trait"},"5:7568:11916":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"7:6390:14795":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:3858:18394":{"crate_id":6,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:38842:17648":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:41313:16124":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:4767:16645":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"12:718:16481":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:2156:1397":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:45367:16226":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:45389:135":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"24:0:2550":{"crate_id":24,"path":["block_buffer"],"kind":"module"},"6:9641:16515":{"crate_id":6,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"7:8243:15190":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:7072:25478":{"crate_id":17,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:6806:13735":{"crate_id":17,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"5:4559:12459":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"6:9405:16600":{"crate_id":6,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"18:15585:13373":{"crate_id":18,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"18:11064:16321":{"crate_id":18,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:4644:16072":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:5058:13779":{"crate_id":17,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:44568:16171":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:11214:12421":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:45606:15605":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:3569:17651":{"crate_id":1,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"6:5696:16544":{"crate_id":6,"path":["std","process","ChildStdout"],"kind":"struct"},"5:7841:12476":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"23:1091:18100":{"crate_id":23,"path":["typenum","private","IsLessOrEqualPrivate"],"kind":"trait"},"1:45424:17813":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:5316:13788":{"crate_id":17,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:8928:6065":{"crate_id":6,"path":["std","path","Iter"],"kind":"struct"},"6:4156:18397":{"crate_id":6,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"12:2297:16489":{"crate_id":12,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"5:3921:12476":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"18:11318:39156":{"crate_id":18,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:43976:6740":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"18:5304:16315":{"crate_id":18,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"12:2540:16060":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"18:16738:13687":{"crate_id":18,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"17:6366:15872":{"crate_id":17,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:9372:37263":{"crate_id":6,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"23:933:18126":{"crate_id":23,"path":["typenum","private","PrivateSetBit"],"kind":"trait"},"15:31:16476":{"crate_id":15,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:3609:15258":{"crate_id":6,"path":["std","io","Read"],"kind":"trait"},"17:4239:13767":{"crate_id":17,"path":["gimli","constants","DwCfa"],"kind":"struct"},"18:15572:13368":{"crate_id":18,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"4:415:2739":{"crate_id":4,"path":["digest","digest","DynDigest"],"kind":"trait"},"6:9305:18492":{"crate_id":6,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:11377:15292":{"crate_id":6,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"1:46968:15641":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:43213:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"12:820:18312":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"5:4316:12358":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"18:13384:15832":{"crate_id":18,"path":["object","read","ObjectMap"],"kind":"struct"},"7:6416:14810":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"18:15147:13205":{"crate_id":18,"path":["object","macho","RelocationInfo"],"kind":"struct"},"18:10783:16317":{"crate_id":18,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"1:3066:157":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"7:4842:14408":{"crate_id":7,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:12174:15309":{"crate_id":6,"path":["std","alloc","System"],"kind":"struct"},"18:14268:13047":{"crate_id":18,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:46811:15624":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"19:706:15782":{"crate_id":19,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:11359:15298":{"crate_id":6,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"1:31205:11803":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:7518:15962":{"crate_id":17,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"18:13081:16323":{"crate_id":18,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"18:11502:12781":{"crate_id":18,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"18:12134:15803":{"crate_id":18,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:8605:16185":{"crate_id":6,"path":["std","io","Lines"],"kind":"struct"},"6:8863:15274":{"crate_id":6,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:34980:13879":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:4842:13773":{"crate_id":17,"path":["gimli","constants","DwLle"],"kind":"struct"},"5:2340:34088":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"23:2621:2390":{"crate_id":23,"path":["typenum","generated","consts","U64"],"kind":"type_alias"},"18:14916:13167":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"6:12615:927":{"crate_id":6,"path":["std","i32"],"kind":"primitive"},"1:47426:15677":{"crate_id":1,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"6:2253:133":{"crate_id":6,"path":["std","ffi","os_str","Display"],"kind":"struct"},"1:45359:16224":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:5170:13783":{"crate_id":17,"path":["gimli","constants","DwInl"],"kind":"struct"},"6:7870:37307":{"crate_id":6,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"23:835:18094":{"crate_id":23,"path":["typenum","private","PrivateIntegerAdd"],"kind":"trait"},"18:10245:25538":{"crate_id":18,"path":["object","common","SymbolKind"],"kind":"enum"},"19:613:39160":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"5:2165:16629":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"5:776:264":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"7:6792:14976":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"23:9072:6028":{"crate_id":23,"path":["typenum","int","NInt"],"kind":"struct"},"1:46691:15613":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"6:3920:16533":{"crate_id":6,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"5:7604:11916":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:4240:18405":{"crate_id":6,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:9442:16650":{"crate_id":1,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"1:43028:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"18:2377:25609":{"crate_id":18,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:41798:16148":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"18:11605:12792":{"crate_id":18,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"5:6020:12452":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:11028:16005":{"crate_id":6,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"10:345:24477":{"crate_id":10,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"6:4318:38036":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:47675:15713":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"24:32:6124":{"crate_id":24,"path":["block_buffer","read","ReadBuffer"],"kind":"struct"},"7:7463:15099":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:22131:33326":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:13443:15782":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:13449:17788":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:7279:15946":{"crate_id":17,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"7:6719:14952":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"1:23580:15344":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"17:8055:16470":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:11155:15282":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"18:16574:12939":{"crate_id":18,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"18:12094:15800":{"crate_id":18,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:3589:154":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"18:13718:12920":{"crate_id":18,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"6:11114:16613":{"crate_id":6,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"6:4348:18422":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:23569:15343":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"6:6869:16554":{"crate_id":6,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:14157:217":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"6:1002:16487":{"crate_id":6,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:5196:13784":{"crate_id":17,"path":["gimli","constants","DwOrd"],"kind":"struct"},"25:16:2751":{"crate_id":25,"path":["const_oid","arcs","Arcs"],"kind":"struct"},"1:47720:15714":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:41331:16127":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"18:11456:12780":{"crate_id":18,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"17:6254:15857":{"crate_id":17,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:42592:206":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:44538:15597":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:381:16502":{"crate_id":6,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"6:9320:18494":{"crate_id":6,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"18:16364:13592":{"crate_id":18,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"7:1727:14365":{"crate_id":7,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:42931:236":{"crate_id":1,"path":["core","sync","atomic","Ordering","Relaxed"],"kind":"variant"},"6:12602:1352":{"crate_id":6,"path":["std","pointer"],"kind":"primitive"},"5:1549:11916":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"15:164:24548":{"crate_id":15,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:3586:153":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"14:110:39120":{"crate_id":14,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:44578:12766":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:45619:30019":{"crate_id":1,"path":["core","task","wake","ExtData"],"kind":"enum"},"7:6651:14929":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"7:5611:14744":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"6:9538:15292":{"crate_id":6,"path":["std","time","SystemTime"],"kind":"struct"},"1:41253:16667":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:8308:158":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"18:15049:13191":{"crate_id":18,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:23613:15347":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"18:15845:13433":{"crate_id":18,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"6:7951:16562":{"crate_id":6,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"23:1279:6164":{"crate_id":23,"path":["typenum","type_operators","ToInt"],"kind":"trait"},"18:14749:13139":{"crate_id":18,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:2418:11807":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:2448:13703":{"crate_id":17,"path":["gimli","common","Encoding"],"kind":"struct"},"1:11552:252":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:4126:18395":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:3416:17652":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"1:32787:11988":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"18:12536:16371":{"crate_id":18,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"5:7554:34085":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"23:1111:18101":{"crate_id":23,"path":["typenum","private","IsNotEqualPrivate"],"kind":"trait"},"18:14974:13176":{"crate_id":18,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:2918:13731":{"crate_id":17,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"18:12358:16369":{"crate_id":18,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"5:7534:12446":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"18:11074:39152":{"crate_id":18,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"23:654:6159":{"crate_id":23,"path":["typenum","marker_traits","PowerOfTwo"],"kind":"trait"},"18:15474:13355":{"crate_id":18,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"6:975:16481":{"crate_id":6,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"0:119:2418":{"crate_id":0,"path":["sha2","Sha512_224"],"kind":"type_alias"},"7:6893:15016":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:7788:38014":{"crate_id":6,"path":["std","panicking","Hook"],"kind":"enum"},"1:13215:6086":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"6:8240:12696":{"crate_id":6,"path":["std","fs","Metadata"],"kind":"struct"},"17:4764:13771":{"crate_id":17,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:43431:11976":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:8582:16472":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"4:488:2732":{"crate_id":4,"path":["digest","VariableOutputReset"],"kind":"trait"},"19:623:39161":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:4178:18399":{"crate_id":6,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"6:2506:18347":{"crate_id":6,"path":["std","fs","canonicalize"],"kind":"function"},"27:0:2426":{"crate_id":27,"path":["cpufeatures"],"kind":"module"},"6:9556:16021":{"crate_id":6,"path":["std","time","SystemTimeError"],"kind":"struct"},"7:1597:14288":{"crate_id":7,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:36856:13880":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"24:110:6039":{"crate_id":24,"path":["block_buffer","BlockBuffer"],"kind":"struct"},"1:41456:16140":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"6:9482:12358":{"crate_id":6,"path":["std","sync","poison","Guard"],"kind":"struct"},"17:6779:13809":{"crate_id":17,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:46872:15628":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"5:6105:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:2484:13711":{"crate_id":17,"path":["gimli","common","Register"],"kind":"struct"},"1:2804:114":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"18:582:16303":{"crate_id":18,"path":["object","read","any","Comdat"],"kind":"struct"},"18:13221:25548":{"crate_id":18,"path":["object","read","FileKind"],"kind":"enum"},"18:14844:13156":{"crate_id":18,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:41354:16131":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"7:7424:15081":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"12:1542:24543":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"18:13321:25550":{"crate_id":18,"path":["object","read","SymbolSection"],"kind":"enum"},"18:14139:13015":{"crate_id":18,"path":["object","elf","HashHeader"],"kind":"struct"},"1:8023:12614":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:8525:15976":{"crate_id":17,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"5:3333:34198":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"23:2549:2569":{"crate_id":23,"path":["typenum","generated","consts","U40"],"kind":"type_alias"},"1:8319:177":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"18:13470:12851":{"crate_id":18,"path":["object","read","Export"],"kind":"struct"},"1:40189:224":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:4692:11987":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"23:1878:18105":{"crate_id":23,"path":["typenum","uint","GetBit"],"kind":"trait"},"12:1558:16496":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:23061:18096":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"7:1667:14342":{"crate_id":7,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:4954:13777":{"crate_id":17,"path":["gimli","constants","DwVis"],"kind":"struct"},"19:643:12621":{"crate_id":19,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"18:16661:13669":{"crate_id":18,"path":["object","xcoff","FileAux64"],"kind":"struct"},"1:23294:15323":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:4356:18423":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"18:13348:15831":{"crate_id":18,"path":["object","read","SymbolMap"],"kind":"struct"},"5:7094:12488":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"6:4822:18400":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:6479:16552":{"crate_id":6,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"5:1599:16480":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"18:15620:13377":{"crate_id":18,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"10:168:24528":{"crate_id":10,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"23:0:2566":{"crate_id":23,"path":["typenum"],"kind":"module"},"7:5420:14644":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:2702:13721":{"crate_id":17,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"18:11221:16323":{"crate_id":18,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"5:3320:15997":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:32727:6044":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"6:9474:12404":{"crate_id":6,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"18:10937:39149":{"crate_id":18,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:2221:11805":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"18:15601:13376":{"crate_id":18,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:32780:16663":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:47082:15647":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:42554:15573":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:47276:15671":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"5:3299:34197":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:42767:16163":{"crate_id":1,"path":["core","range","iter","IterRangeInclusive"],"kind":"struct"},"1:42689:17750":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:11412:174":{"crate_id":6,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"25:88:2752":{"crate_id":25,"path":["const_oid","traits","DynAssociatedOid"],"kind":"trait"},"5:5126:12358":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:3424:17654":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"1:2866:213":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:8775:18457":{"crate_id":6,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"7:5334:14609":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"1:40936:16107":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:32769:16662":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"5:5950:265":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:8847:32854":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"19:515:12624":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:14065:16130":{"crate_id":1,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"1:3357:11802":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"17:7539:15963":{"crate_id":17,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"18:11830:12782":{"crate_id":18,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:46644:15610":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"18:10367:25542":{"crate_id":18,"path":["object","common","FileFlags"],"kind":"enum"},"6:12193:16041":{"crate_id":6,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:8402:16574":{"crate_id":6,"path":["std","io","error","Custom"],"kind":"struct"},"17:8720:150":{"crate_id":17,"path":["gimli","read","Error"],"kind":"enum"},"1:40900:16105":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"6:8320:16572":{"crate_id":6,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"23:1031:18097":{"crate_id":23,"path":["typenum","private","IsLessPrivate"],"kind":"trait"},"6:10469:16603":{"crate_id":6,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"17:8040:39145":{"crate_id":17,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:47598:15712":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"18:10792:12647":{"crate_id":18,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"23:1071:18099":{"crate_id":23,"path":["typenum","private","IsGreaterPrivate"],"kind":"trait"},"5:7495:15317":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:22891:17926":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"18:11420:16326":{"crate_id":18,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:7835:25482":{"crate_id":17,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:2297:201":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:3790:159":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"7:545:14200":{"crate_id":7,"path":["libc","unix","winsize"],"kind":"struct"},"1:12023:6067":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:4787:18444":{"crate_id":6,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:8918:16013":{"crate_id":6,"path":["std","path","Components"],"kind":"struct"},"1:40247:228":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"18:15762:13414":{"crate_id":18,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:5364:16648":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"12:2414:12452":{"crate_id":12,"path":["hashbrown","table","Drain"],"kind":"struct"},"1:41015:16111":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"6:8840:6740":{"crate_id":6,"path":["std","path","State"],"kind":"enum"},"6:12097:16534":{"crate_id":6,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"21:101:2557":{"crate_id":21,"path":["crypto_common","OutputSizeUser"],"kind":"trait"},"1:2871:147":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:13138:16178":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"6:8546:15255":{"crate_id":6,"path":["std","io","IoSlice"],"kind":"struct"},"1:41384:16134":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"12:0:2716":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"12:851:16487":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:46843:15626":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"23:2513:2387":{"crate_id":23,"path":["typenum","generated","consts","U28"],"kind":"type_alias"},"18:16019:13480":{"crate_id":18,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:22756:17843":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"18:2405:16307":{"crate_id":18,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:22619:17847":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"17:4927:13776":{"crate_id":17,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:41407:16136":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:40999:16110":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"18:13204:16396":{"crate_id":18,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"18:12951:15829":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"12:2507:14066":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:10717:16590":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:11340:15281":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:7997:13751":{"crate_id":17,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"18:15982:13472":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"5:1364:15964":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:7804:39142":{"crate_id":17,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"22:99:6113":{"crate_id":22,"path":["hybrid_array","traits","AssocArraySize"],"kind":"trait"},"6:2656:16522":{"crate_id":6,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"9:0:2425":{"crate_id":9,"path":["cfg_if"],"kind":"module"},"1:3350:11853":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"4:640:2558":{"crate_id":4,"path":["digest","core_api","TruncSide"],"kind":"enum"},"17:6939:15917":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"18:16172:13540":{"crate_id":18,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:4906:18448":{"crate_id":6,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:4547:17676":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"1:22979:33542":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"18:16727:13686":{"crate_id":18,"path":["object","xcoff","ExpAux"],"kind":"struct"},"1:23635:15349":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"15:0:2719":{"crate_id":15,"path":["rustc_demangle"],"kind":"module"},"1:23372:15328":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:6096:16399":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"18:16276:13570":{"crate_id":18,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:6040:13739":{"crate_id":17,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"16:327:24569":{"crate_id":16,"path":["addr2line","RangeAttributes"],"kind":"struct"},"18:12885:15825":{"crate_id":18,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"19:563:12628":{"crate_id":19,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:7551:25481":{"crate_id":17,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:544:15834":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"15:219:14060":{"crate_id":15,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:7987:15970":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"6:3321:38127":{"crate_id":6,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:32803:249":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:41791:16147":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"7:1589:14283":{"crate_id":7,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"19:680:15776":{"crate_id":19,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:6142:25472":{"crate_id":17,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"7:5652:14761":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:47794:15716":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"6:11935:16619":{"crate_id":6,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:12550:16622":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"18:12259:25653":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"1:3308:277":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"24:68:18096":{"crate_id":24,"path":["block_buffer","sealed","Sealed"],"kind":"trait"},"6:11102:16583":{"crate_id":6,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"7:6702:14948":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"7:7337:15052":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"5:3082:34201":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:0:2721":{"crate_id":17,"path":["gimli"],"kind":"module"},"19:651:12621":{"crate_id":19,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"25:0:2383":{"crate_id":25,"path":["const_oid"],"kind":"module"},"23:1153:18115":{"crate_id":23,"path":["typenum","private","PrivateLogarithm2"],"kind":"trait"},"18:14598:13102":{"crate_id":18,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:47035:15644":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:10613:156":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"6:1651:15996":{"crate_id":6,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"18:16302:13579":{"crate_id":18,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:41303:146":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"10:0:2714":{"crate_id":10,"path":["miniz_oxide"],"kind":"module"},"1:4841:11988":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"6:3413:16528":{"crate_id":6,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"7:5151:14534":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"18:14459:13082":{"crate_id":18,"path":["object","macho","Section32"],"kind":"struct"},"5:2140:16001":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"25:226:6740":{"crate_id":25,"path":["const_oid","encoder","State"],"kind":"enum"},"7:8260:15195":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:40207:227":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:8176:13927":{"crate_id":17,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:6989:16081":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"6:3318:38126":{"crate_id":6,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"18:16012:13478":{"crate_id":18,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"18:14996:13187":{"crate_id":18,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:47226:15669":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"18:16775:13696":{"crate_id":18,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"5:722:16625":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"5:1571:15993":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:12606:1860":{"crate_id":6,"path":["std","tuple"],"kind":"primitive"},"17:5415:13791":{"crate_id":17,"path":["gimli","constants","DwMacro"],"kind":"struct"},"6:12200:16041":{"crate_id":6,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"12:1001:16489":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"12:2513:14067":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:11138:37272":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"5:7735:16066":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:23478:16098":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"3:0:2711":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"12:1892:15997":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"12:1703:168":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:45656:16230":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"5:2258:16048":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:9592:16652":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"6:9247:16591":{"crate_id":6,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"18:12203:15808":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"18:15732:13409":{"crate_id":18,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:23510:18096":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"1:46857:15627":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:13502:17796":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"18:14404:13073":{"crate_id":18,"path":["object","macho","LcStr"],"kind":"struct"},"19:481:15771":{"crate_id":19,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:2040:12358":{"crate_id":1,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"1:22142:18103":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"6:8528:12614":{"crate_id":6,"path":["std","io","util","Empty"],"kind":"struct"},"4:367:6037":{"crate_id":4,"path":["digest","core_api","ExtendableOutputCore"],"kind":"trait"},"6:1879:16512":{"crate_id":6,"path":["std","env","Vars"],"kind":"struct"},"6:5112:18445":{"crate_id":6,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:4:1292":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:43994:16167":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:2588:13716":{"crate_id":17,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:44814:16184":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:3358:16525":{"crate_id":6,"path":["std","io","stdio","Stdin"],"kind":"struct"},"18:12748:16383":{"crate_id":18,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:46744:15620":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"7:5069:14528":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:38897:17649":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"18:16473:12921":{"crate_id":18,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"18:14946:13170":{"crate_id":18,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"18:13837:12950":{"crate_id":18,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"5:1580:15994":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:3564:6106":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:30922:17414":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"1:47255:15670":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"18:12975:12857":{"crate_id":18,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"6:8598:6069":{"crate_id":6,"path":["std","io","Split"],"kind":"struct"},"1:47992:11774":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"18:11400:12776":{"crate_id":18,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"19:80:29731":{"crate_id":19,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"12:2533:14070":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:11536:15304":{"crate_id":6,"path":["std","sys","exit_guard","PThread"],"kind":"struct"},"17:5111:13781":{"crate_id":17,"path":["gimli","constants","DwId"],"kind":"struct"},"1:45039:16201":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:44875:16188":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"23:613:207":{"crate_id":23,"path":["typenum","marker_traits","Ord"],"kind":"trait"},"6:8934:15279":{"crate_id":6,"path":["std","path","Ancestors"],"kind":"struct"},"17:2682:13720":{"crate_id":17,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:46953:15640":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"18:12797:25678":{"crate_id":18,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"5:6536:18198":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"24:176:150":{"crate_id":24,"path":["block_buffer","Error"],"kind":"struct"},"7:1711:14360":{"crate_id":7,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"18:12121:15802":{"crate_id":18,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"4:476:2730":{"crate_id":4,"path":["digest","ExtendableOutputReset"],"kind":"trait"},"18:16678:13671":{"crate_id":18,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"18:12017:16349":{"crate_id":18,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"23:1272:6185":{"crate_id":23,"path":["typenum","type_operators","SquareRoot"],"kind":"trait"},"6:617:16503":{"crate_id":6,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:8537:15254":{"crate_id":6,"path":["std","io","util","Sink"],"kind":"struct"},"1:45347:16221":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"7:1521:14239":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:10102:85":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:6355:12392":{"crate_id":6,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:9194:211":{"crate_id":6,"path":["std","process","Output"],"kind":"struct"},"19:635:12641":{"crate_id":19,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:3315:38097":{"crate_id":6,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"6:3504:18381":{"crate_id":6,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"18:10030:25532":{"crate_id":18,"path":["object","common","Architecture"],"kind":"enum"},"17:894:16398":{"crate_id":17,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"1:45363:16225":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"7:6428:14814":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:9239:6065":{"crate_id":6,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:971:16480":{"crate_id":6,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:2764:16523":{"crate_id":6,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"7:8278:15198":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:5280:13787":{"crate_id":17,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"18:11538:12782":{"crate_id":18,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"5:1533:6066":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"6:10837:16525":{"crate_id":6,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"23:828:18119":{"crate_id":23,"path":["typenum","private","PrivateSub"],"kind":"trait"},"5:4982:229":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"23:9556:6056":{"crate_id":23,"path":["typenum","Less"],"kind":"struct"},"6:9359:119":{"crate_id":6,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:10107:92":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"18:14820:13153":{"crate_id":18,"path":["object","macho","TwolevelHint"],"kind":"struct"},"18:16191:13546":{"crate_id":18,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:12566:38015":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"18:12027:16350":{"crate_id":18,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"6:9290:18493":{"crate_id":6,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"6:8656:16011":{"crate_id":6,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:2343:18339":{"crate_id":6,"path":["std","fs","read_to_string"],"kind":"function"},"12:423:39113":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"18:13118:12864":{"crate_id":18,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"6:11110:16568":{"crate_id":6,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"18:10802:12766":{"crate_id":18,"path":["object","read","util","Bytes"],"kind":"struct"},"12:776:12452":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:4405:12358":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"1:44760:16181":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"5:7664:18161":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"12:2115:16489":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:12605:1770":{"crate_id":6,"path":["std","str"],"kind":"primitive"},"1:2814:11848":{"crate_id":1,"path":["core","clone","CloneToUninit"],"kind":"trait"},"6:6927:16557":{"crate_id":6,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"25:178:12605":{"crate_id":25,"path":["const_oid","arcs","RootArcs"],"kind":"struct"},"6:8328:16001":{"crate_id":6,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:8141:18327":{"crate_id":6,"path":["std","env","VarError"],"kind":"enum"},"4:491:2733":{"crate_id":4,"path":["digest","CustomizedInit"],"kind":"trait"},"1:4163:11916":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"6:11086:37292":{"crate_id":6,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"5:785:122":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"18:12391:12807":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:42611:185":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:41095:16114":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"6:9400:16599":{"crate_id":6,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:2878:13729":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"5:6734:12435":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:12554:6085":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"6:9188:16590":{"crate_id":6,"path":["std","process","CommandArgs"],"kind":"struct"},"18:15089:13196":{"crate_id":18,"path":["object","macho","NoteCommand"],"kind":"struct"},"18:10822:12768":{"crate_id":18,"path":["object","read","util","ByteString"],"kind":"struct"},"18:12672:16374":{"crate_id":18,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"18:16320:13585":{"crate_id":18,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"12:1885:15996":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:786:166":{"crate_id":6,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:45207:16206":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"6:375:16501":{"crate_id":6,"path":["std","thread","scoped","Scope"],"kind":"struct"},"18:15285:13211":{"crate_id":18,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"18:13208:150":{"crate_id":18,"path":["object","read","Error"],"kind":"struct"},"19:581:11868":{"crate_id":19,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:47181:15652":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:44418:6063":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"5:39:12432":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"18:14795:13149":{"crate_id":18,"path":["object","macho","DylibReference"],"kind":"struct"},"18:12604:12792":{"crate_id":18,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:4150:13765":{"crate_id":17,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"14:0:2718":{"crate_id":14,"path":["std_detect"],"kind":"module"},"7:1632:14317":{"crate_id":7,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"23:621:2567":{"crate_id":23,"path":["typenum","marker_traits","Unsigned"],"kind":"trait"},"1:3069:272":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"17:8093:16471":{"crate_id":17,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"18:16691:13677":{"crate_id":18,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"6:12582:37291":{"crate_id":6,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"5:7524:12452":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"18:14585:13100":{"crate_id":18,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:909:202":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"19:507:12621":{"crate_id":19,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"5:1481:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:33776:17637":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:11066:12508":{"crate_id":1,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"1:4950:11990":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:40975:16108":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:34048:17638":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"18:15829:13431":{"crate_id":18,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"18:2436:16310":{"crate_id":18,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"6:1633:11916":{"crate_id":6,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"7:7317:15046":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"7:5288:14593":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"18:12868:12888":{"crate_id":18,"path":["object","read","pe","import","Import"],"kind":"enum"},"6:1008:16488":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:906:17466":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"1:11750:6066":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"23:2573:2389":{"crate_id":23,"path":["typenum","generated","consts","U48"],"kind":"type_alias"},"7:479:14160":{"crate_id":7,"path":["libc","unix","timeval"],"kind":"struct"},"5:7782:16639":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:1918:17584":{"crate_id":1,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"1:22953:18096":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"17:2794:13725":{"crate_id":17,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:11857:6070":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:5253:13786":{"crate_id":17,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:2548:13714":{"crate_id":17,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:6062:13741":{"crate_id":17,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"18:12248:16360":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:44856:16186":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:12604:1736":{"crate_id":6,"path":["std","slice"],"kind":"primitive"},"18:16029:13485":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"18:14030:12985":{"crate_id":18,"path":["object","elf","Dyn64"],"kind":"struct"},"6:4369:18424":{"crate_id":6,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:3867:132":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"23:653:6188":{"crate_id":23,"path":["typenum","marker_traits","TypeArray"],"kind":"trait"},"18:15009:13188":{"crate_id":18,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:44449:6083":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:8440:6438":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:11194:12509":{"crate_id":1,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"1:46761:15621":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:42916:11916":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"18:12081:15798":{"crate_id":18,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:8063:25483":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:22243:15322":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:31184:6104":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:48045:11777":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"6:9178:16588":{"crate_id":6,"path":["std","pipe","PipeReader"],"kind":"struct"},"18:15939:13462":{"crate_id":18,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"7:7539:15150":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"23:1007:18134":{"crate_id":23,"path":["typenum","private","PrivateMin"],"kind":"trait"},"23:1131:18102":{"crate_id":23,"path":["typenum","private","IsGreaterOrEqualPrivate"],"kind":"trait"},"7:7515:15140":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"7:5007:14497":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:45565:219":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:10651:133":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"7:6744:14961":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"12:1652:12370":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:44796:16183":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"6:1503:168":{"crate_id":6,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"18:16499:13613":{"crate_id":18,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"1:4613:16643":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"4:682:2742":{"crate_id":4,"path":["digest","hashreader","HashReader"],"kind":"struct"},"10:318:14110":{"crate_id":10,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:22:845":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"12:649:6065":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"7:5019:14503":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"23:1151:18118":{"crate_id":23,"path":["typenum","private","PrivateSquareRoot"],"kind":"trait"},"6:5004:12388":{"crate_id":6,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"18:16202:13547":{"crate_id":18,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"7:4970:14476":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"18:15753:13413":{"crate_id":18,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:306:24565":{"crate_id":16,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:2413:24584":{"crate_id":17,"path":["gimli","common","Format"],"kind":"enum"},"18:14885:13161":{"crate_id":18,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:3306:13702":{"crate_id":17,"path":["gimli","arch","AArch64"],"kind":"struct"},"21:104:6131":{"crate_id":21,"path":["crypto_common","KeySizeUser"],"kind":"trait"},"19:659:16295":{"crate_id":19,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:7413:16441":{"crate_id":17,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:8328:6439":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:7629:2600":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"23:1016:18136":{"crate_id":23,"path":["typenum","private","PrivateMax"],"kind":"trait"},"23:1202:6161":{"crate_id":23,"path":["typenum","type_operators","Min"],"kind":"trait"},"18:11526:16329":{"crate_id":18,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:23324:15324":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"18:13932:12966":{"crate_id":18,"path":["object","elf","Rel32"],"kind":"struct"},"25:11:72":{"crate_id":25,"path":["const_oid","arcs","Arc"],"kind":"type_alias"},"1:11895:6087":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"18:11565:16331":{"crate_id":18,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"5:2154:16628":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"6:9829:131":{"crate_id":6,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"18:13634:12902":{"crate_id":18,"path":["object","archive","Header"],"kind":"struct"},"7:6360:14770":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"18:12065:12801":{"crate_id":18,"path":["object","read","elf","version","Version"],"kind":"struct"},"6:10999:16612":{"crate_id":6,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"18:10441:25545":{"crate_id":18,"path":["object","common","SymbolFlags"],"kind":"enum"},"7:6727:14953":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"1:44179:15595":{"crate_id":1,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"18:16789:13697":{"crate_id":18,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"5:1119:12435":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:7846:37304":{"crate_id":6,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"1:8495:190":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"5:2806:15315":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"23:9598:6025":{"crate_id":23,"path":["typenum","uint","UInt"],"kind":"struct"},"4:0:2381":{"crate_id":4,"path":["digest"],"kind":"module"},"1:12948:17789":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"18:13957:12971":{"crate_id":18,"path":["object","elf","Rel64"],"kind":"struct"},"1:42785:16164":{"crate_id":1,"path":["core","range","iter","IterRangeFrom"],"kind":"struct"},"15:213:15984":{"crate_id":15,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:2433:24611":{"crate_id":17,"path":["gimli","common","Vendor"],"kind":"enum"},"1:4919:11832":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:10864:165":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"18:12162:15805":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"12:763:15994":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"17:6186:15852":{"crate_id":17,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"18:12215:15810":{"crate_id":18,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"7:4990:14487":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:42795:222":{"crate_id":1,"path":["core","range","Range"],"kind":"struct"},"7:5529:14701":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:7000:2555":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"17:3046:24613":{"crate_id":17,"path":["gimli","common","SectionId"],"kind":"enum"},"18:11514:16328":{"crate_id":18,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:45097:16203":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"7:5450:14665":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"18:10533:12758":{"crate_id":18,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:32893:118":{"crate_id":1,"path":["core","marker","ConstParamTy_"],"kind":"trait"},"7:6452:14823":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:2638:13718":{"crate_id":17,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:11955:16035":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"23:1251:6207":{"crate_id":23,"path":["typenum","type_operators","IsNotEqual"],"kind":"trait"},"7:6441:14815":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:11094:37294":{"crate_id":6,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:7334:13855":{"crate_id":17,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"18:15652:13389":{"crate_id":18,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"18:11113:16322":{"crate_id":18,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"18:16290:13577":{"crate_id":18,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"18:11123:39153":{"crate_id":18,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:8134:13753":{"crate_id":17,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:22339:18096":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"12:2374:6066":{"crate_id":12,"path":["hashbrown","table","IterMut"],"kind":"struct"},"1:44492:6077":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"7:6590:14904":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:12613:939":{"crate_id":6,"path":["std","i8"],"kind":"primitive"},"7:6638:14925":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"21:112:2740":{"crate_id":21,"path":["crypto_common","Reset"],"kind":"trait"},"4:586:15318":{"crate_id":4,"path":["digest","core_api","ct_variable","NoOid"],"kind":"struct"},"6:434:197":{"crate_id":6,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:3310:121":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"}},"external_crates":{"26":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"23":{"name":"typenum","html_root_url":"https://docs.rs/typenum/1.17.0/"},"20":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"const_oid","html_root_url":null},"22":{"name":"hybrid_array","html_root_url":null},"19":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"digest","html_root_url":null},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"27":{"name":"cpufeatures","html_root_url":null},"24":{"name":"block_buffer","html_root_url":null},"21":{"name":"crypto_common","html_root_url":null},"18":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"6":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":32}