{"root":"0:0:2044","crate_version":"0.11.0-pre.3","includes_private":false,"index":{"0:51:2189":{"id":"0:51:2189","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[30,4],"end":[30,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"23:9598:5629","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5629","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5629","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5629","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5629","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5629","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5629","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"23:9642:5630","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:9019:5634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5633","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5633","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5633","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5633","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5633","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5633","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"1:13289:34281":{"id":"1:13289:34281","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:12330:471","self::pattern":"1:12873:17411"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41984:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:16263","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"23:1173:199":{"id":"23:1173:199","crate_id":23,"name":"Output","span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/src/type_operators.rs","begin":[35,4],"end":[35,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:74":{"id":"0:74","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[123,0],"end":[130,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:357:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:75:2191"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:57:2194":{"id":"0:57:2194","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[47,4],"end":[47,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"23:9598:5629","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5629","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5629","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5629","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5629","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5629","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"23:9642:5630","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:9019:5634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5633","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5633","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5633","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5633","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5633","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"0:71:2189":{"id":"0:71:2189","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[116,4],"end":[116,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"23:9598:5629","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5629","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5629","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5629","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5629","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5629","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5629","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5629","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"23:9642:5630","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:9019:5634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5633","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5633","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5633","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5633","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5633","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5633","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5633","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"0:86:801":{"id":"0:86:801","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[173,4],"end":[175,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10278:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10259:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:97-0:90:2016":{"id":"0:97-0:90:2016","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[26,0],"end":[26,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"sha256::compress256","name":"compress256","id":"0:90:2016","glob":false}}},"0:80:1177":{"id":"0:80:1177","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[140,4],"end":[150,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["output_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:42117:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"InvalidOutputSize","id":"4:557:2180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3756-0:133:2018":{"id":"b:1:3756-0:133:2018","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32217:6027","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3754:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3758:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:73:2190":{"id":"0:73:2190","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[120,4],"end":[120,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Eager","id":"24:135:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:101-0:138:2019":{"id":"0:101-0:138:2019","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[29,34],"end":[29,47]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"core_api::Sha512VarCore","name":"Sha512VarCore","id":"0:138:2019","glob":false}}},"0:105:2039":{"id":"0:105:2039","crate_id":0,"name":"Sha512_256","span":{"filename":"src/lib.rs","begin":[45,0],"end":[45,92]},"visibility":"public","docs":"SHA-512/256 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:527:2011","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:508:2012","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U32","id":"23:2525:2007","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512_256","id":"0:470:2030","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"a:1:42079:17377-0:138:2019":{"id":"a:1:42079:17377-0:138:2019","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42079:17377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13214:31006":{"id":"1:13214:31006","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:13215:31002"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:44150:15807","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13286:35567":{"id":"1:13286:35567","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:12330:471","self::pattern":"1:12873:17411"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:16263","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2646:29390":{"id":"1:2646:29390","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32275:6028-0:138:2019":{"id":"a:1:32275:6028-0:138:2019","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32275:6028","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13317:35573":{"id":"1:13317:35573","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4942:35573"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:44193:15732","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5630:17358":{"id":"5:5630:17358","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7641:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13222:34279":{"id":"1:13222:34279","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"6:12330:471","self::pattern":"1:12873:17411"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:16263","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60:1177":{"id":"0:60:1177","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[54,4],"end":[62,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["output_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:42117:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"InvalidOutputSize","id":"4:557:2180","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13186:35548":{"id":"1:13186:35548","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13192:34171":{"id":"1:13192:34171","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12420:17418"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[115,0],"end":[117,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"21:72:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:71:2189"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:133:2018":{"id":"0:133:2018","crate_id":0,"name":"Sha256VarCore","span":{"filename":"src/core_api.rs","begin":[22,0],"end":[25,1]},"visibility":"public","docs":"Core block-level SHA-256 hasher with variable output size.\n\nSupports initialization only for 28 and 32 byte output sizes,\ni.e. 224 and 256 bits respectively.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:42079:17377-0:133:2018","a:1:32275:6028-0:133:2018","a:1:42078:17378-0:133:2018","a:1:3172:11478-0:133:2018","a:1:32216:237-0:133:2018","a:1:3137:247-0:133:2018","b:1:3756-0:133:2018","b:1:2929-0:133:2018","b:1:2924-0:133:2018","b:1:2644-0:133:2018","b:1:2641-0:133:2018","b:1:2918-0:133:2018","b:1:2914-0:133:2018","b:5:736-0:133:2018","b:23:1171-0:133:2018","0:56","0:63","0:52","0:49","0:65","0:54","0:50","0:67","0:136","0:58"]}}},"a:1:32216:237-0:138:2019":{"id":"a:1:32216:237-0:138:2019","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32216:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:75:2191":{"id":"0:75:2191","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[125,4],"end":[129,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"Block","id":"21:56:2168","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[76,0],"end":[81,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"21:112:2167","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:64:2213"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13266:35558":{"id":"1:13266:35558","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12873:17411","`DoubleEndedIterator`":"1:8256:129","prim@char":"6:12330:471","str::matches":"1:13263:2294"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44098:15804","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:16263","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12879:16263","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12894:17417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13196:6187":{"id":"1:13196:6187","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41986:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41984:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10963:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10963:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13298:35569":{"id":"1:13298:35569","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:12330:471","self::pattern":"1:12873:17411"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:16263","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:64:2213":{"id":"0:64:2213","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[78,4],"end":[80,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10278:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10259:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13217:35555":{"id":"1:13217:35555","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44140:15806","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3172:11478-0:138:2019":{"id":"a:1:3172:11478-0:138:2019","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3172:11478","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5613:36278":{"id":"5:5613:36278","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:304:2341","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:304:2341","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5614:11419":{"id":"5:5614:11419","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7641:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:16263","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13185:11536":{"id":"1:13185:11536","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13279:35563":{"id":"1:13279:35563","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:56":{"id":"0:56","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[46,0],"end":[48,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"21:99:2172","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:57:2194"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:68:671":{"id":"0:68:671","crate_id":0,"name":"drop","span":{"filename":"src/core_api.rs","begin":[91,4],"end":[97,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13211:15810":{"id":"1:13211:15810","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"6:12330:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43846:15790","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13275:35561":{"id":"1:13275:35561","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2933:1805":{"id":"1:2933:1805","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:42117:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2898:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2643:2246":{"id":"1:2643:2246","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:49":{"id":"0:49","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[27,0],"end":[27,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:385:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13219:31632":{"id":"1:13219:31632","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"6:12330:471","self::pattern":"1:12873:17411"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:16263","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13316:17299":{"id":"1:13316:17299","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4945:17299"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:44184:15727","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3758:1820":{"id":"1:3758:1820","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39699:15059","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:141":{"id":"0:141","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[107,9],"end":[107,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2657:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:142:475"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13184:996":{"id":"1:13184:996","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"6:12330:471"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5620:36280":{"id":"5:5620:36280","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7641:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5629:36282":{"id":"5:5629:36282","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:304:2341","`String`":"5:7641:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:304:2341","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42078:17378-0:133:2018":{"id":"a:1:42078:17378-0:133:2018","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42078:17378","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:79:2195":{"id":"0:79:2195","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[137,4],"end":[137,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"TruncSide","id":"4:547:2173","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}}},"1:13202:16549":{"id":"1:13202:16549","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10963:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10963:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13239:31001":{"id":"1:13239:31001","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"6:12330:471","self::pattern":"1:12873:17411"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12688:5689","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:16263","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3137:247-0:133:2018":{"id":"a:1:3137:247-0:133:2018","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3137:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13200:16548":{"id":"1:13200:16548","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10963:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10963:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:88:671":{"id":"0:88:671","crate_id":0,"name":"drop","span":{"filename":"src/core_api.rs","begin":[179,4],"end":[185,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:85":{"id":"0:85","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[171,0],"end":[176,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10304:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:86:801"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42079:17377-0:133:2018":{"id":"a:1:42079:17377-0:133:2018","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42079:17377","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13263:2294":{"id":"1:13263:2294","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12873:17411","`DoubleEndedIterator`":"1:8256:129","prim@char":"6:12330:471","str::rmatches":"1:13266:35558"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44080:15803","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:16263","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:78":{"id":"0:78","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[136,0],"end":[162,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:368:2175","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:79:2195","0:80:1177","0:81:2200"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13277:35562":{"id":"1:13277:35562","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32216:237-0:133:2018":{"id":"a:1:32216:237-0:133:2018","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32216:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:738:15671":{"id":"5:738:15671","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:13208:34266":{"id":"1:13208:34266","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:13209:34267"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:41984:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:50":{"id":"0:50","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[29,0],"end":[31,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"21:72:2169","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:51:2189"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:104:2037":{"id":"0:104:2037","crate_id":0,"name":"Sha512_224","span":{"filename":"src/lib.rs","begin":[43,0],"end":[43,92]},"visibility":"public","docs":"SHA-512/224 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:527:2011","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:508:2012","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U28","id":"23:2513:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512_224","id":"0:453:2028","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:100-0:133:2018":{"id":"0:100-0:133:2018","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[29,19],"end":[29,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"core_api::Sha256VarCore","name":"Sha256VarCore","id":"0:133:2018","glob":false}}},"1:13193:35551":{"id":"1:13193:35551","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:136":{"id":"0:136","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[21,9],"end":[21,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2657:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:137:475"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13232:11535":{"id":"1:13232:11535","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41986:191","prim@char":"6:12330:471","self::pattern":"1:12873:17411"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41984:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:16263","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12879:16263","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12894:17417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:98-0:94:2017":{"id":"0:98-0:94:2017","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[27,0],"end":[27,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"sha512::compress512","name":"compress512","id":"0:94:2017","glob":false}}},"1:13215:31002":{"id":"1:13215:31002","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:13214:31006"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:44159:15808","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67":{"id":"0:67","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[90,0],"end":[98,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3374:2215","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:68:671"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13245:35556":{"id":"1:13245:35556","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12873:17411","str::split":"1:13236:34268","prim@char":"6:12330:471","`DoubleEndedIterator`":"1:8256:129","str::rsplit_terminator":"1:13248:35557"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43926:15796","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:16263","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:94:2017":{"id":"0:94:2017","crate_id":0,"name":"compress512","span":{"filename":"src/sha512.rs","begin":[27,0],"end":[29,1]},"visibility":"public","docs":"Raw SHA-512 compression function.\n\nThis is a low-level \"hazmat\" API which provides direct access to the core\nfunctionality of SHA-512.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"array":{"type":{"primitive":"u64"},"len":"8"}}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"array":{"type":{"primitive":"u8"},"len":"128"}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13225:34280":{"id":"1:13225:34280","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"6:12330:471","self::pattern":"1:12873:17411"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:16263","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12879:16263","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12894:17417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2918-0:138:2019":{"id":"b:1:2918-0:138:2019","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2891:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2920:831"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13272:35560":{"id":"1:13272:35560","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12873:17411","`DoubleEndedIterator`":"1:8256:129","prim@char":"6:12330:471","str::match_indices":"1:13269:35559"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44044:15801","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:16263","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12879:16263","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12894:17417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13218:31015":{"id":"1:13218:31015","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:44168:15809","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13216:35554":{"id":"1:13216:35554","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44130:15805","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2641-0:138:2019":{"id":"b:1:2641-0:138:2019","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32217:6027","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2635:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2643:2246"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13282:35565":{"id":"1:13282:35565","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13308:16727":{"id":"1:13308:16727","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13309:16728":{"id":"1:13309:16728","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13311:35412":{"id":"1:13311:35412","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:992:16739"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:107:2043":{"id":"0:107:2043","crate_id":0,"name":"Sha512","span":{"filename":"src/lib.rs","begin":[49,0],"end":[49,84]},"visibility":"public","docs":"SHA-512 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:527:2011","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:508:2012","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U64","id":"23:2621:2009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512","id":"0:419:2024","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:69":{"id":"0:69","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[113,0],"end":[113,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:385:2179","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13183":{"id":"1:13183","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:13184:996","1:13185:11536","1:13186:35548","1:13187:35549","1:13189:35550","1:13192:34171","1:13193:35551","1:13194:336","1:13195:6181","1:13196:6187","1:13198:16547","1:13200:16548","1:13202:16549","1:13204:35552","1:13205:35553","1:13206:34262","1:13207:34263","1:13208:34266","1:13209:34267","1:13211:15810","1:13212:15819","1:13213:12232","1:13214:31006","1:13215:31002","1:13216:35554","1:13217:35555","1:13218:31015","1:13219:31632","1:13222:34279","1:13225:34280","1:13228:11574","1:13232:11535","1:13236:34268","1:13239:31001","1:13242:34271","1:13245:35556","1:13248:35557","1:13251:34273","1:13254:34275","1:13257:34277","1:13260:34278","1:13263:2294","1:13266:35558","1:13269:35559","1:13272:35560","1:13275:35561","1:13277:35562","1:13279:35563","1:13281:35564","1:13282:35565","1:13283:35566","1:13286:35567","1:13289:34281","1:13292:34282","1:13295:35568","1:13298:35569","1:13301:35570","1:13304:35571","1:13306:16722","1:13307:16723","1:13308:16727","1:13309:16728","1:13310:16729","1:13311:35412","1:13312:35413","1:13313:35414","1:13314:35572","1:13316:17299","1:13317:35573"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3756-0:138:2019":{"id":"b:1:3756-0:138:2019","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32217:6027","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3754:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3758:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13283:35566":{"id":"1:13283:35566","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"6:12330:471","self::pattern":"1:12873:17411"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:16263","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12879:16263","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12899:17416","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:84:2213":{"id":"0:84:2213","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[166,4],"end":[168,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10278:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10259:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2918-0:133:2018":{"id":"b:1:2918-0:133:2018","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2891:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2920:831"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:55:2191":{"id":"0:55:2191","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[39,4],"end":[43,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"Block","id":"21:56:2168","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:61:2200":{"id":"0:61:2200","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[65,4],"end":[73,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Buffer","id":"4:355:2170","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Output","id":"21:60:199","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3137:247-0:138:2019":{"id":"a:1:3137:247-0:138:2019","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3137:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:72":{"id":"0:72","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[119,0],"end":[121,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:359:2171","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:73:2190"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13248:35557":{"id":"1:13248:35557","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12873:17411","str::split":"1:13236:34268","prim@char":"6:12330:471","str::split_terminator":"1:13245:35556"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43944:15797","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:16263","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12879:16263","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12894:17417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13292:34282":{"id":"1:13292:34282","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:12330:471","self::pattern":"1:12873:17411"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41984:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:16263","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12879:16263","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12894:17417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5631:16724":{"id":"5:5631:16724","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13309:16728"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2914-0:138:2019":{"id":"b:1:2914-0:138:2019","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2891:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2888:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2917:11529"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:77:2194":{"id":"0:77:2194","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[133,4],"end":[133,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"23:9598:5629","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5629","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5629","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5629","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5629","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5629","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5629","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"23:9642:5630","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:9019:5634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5633","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5633","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5633","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5633","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5633","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5633","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"5:739:29395":{"id":"5:739:29395","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2914-0:133:2018":{"id":"b:1:2914-0:133:2018","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2891:144","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2888:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2917:11529"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:90:2016":{"id":"0:90:2016","crate_id":0,"name":"compress256","span":{"filename":"src/sha256.rs","begin":[27,0],"end":[29,1]},"visibility":"public","docs":"Raw SHA-256 compression function.\n\nThis is a low-level \"hazmat\" API which provides direct access to the core\nfunctionality of SHA-256.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"array":{"type":{"primitive":"u32"},"len":"8"}}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"array":{"type":{"primitive":"u8"},"len":"64"}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13187:35549":{"id":"1:13187:35549","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[83,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10304:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:66:801"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13312:35413":{"id":"1:13312:35413","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:992:16739"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13204:35552":{"id":"1:13204:35552","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"6:12336:1720","str::slice_mut_unchecked":"1:13205:35553","crate::ops::Index":"1:39530:5712"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13306:16722":{"id":"1:13306:16722","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2927:137":{"id":"1:2927:137","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2898:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:58":{"id":"0:58","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[50,0],"end":[74,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:368:2175","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:59:2195","0:60:1177","0:61:2200"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2644-0:133:2018":{"id":"b:1:2644-0:133:2018","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32217:6027","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2638:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2646:29390"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13254:34275":{"id":"1:13254:34275","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"6:12330:471","str::splitn":"1:13251:34273","self::pattern":"1:12873:17411"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43998:5670","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:16263","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12879:16263","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12894:17417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:102:2033":{"id":"0:102:2033","crate_id":0,"name":"Sha224","span":{"filename":"src/lib.rs","begin":[39,0],"end":[39,84]},"visibility":"public","docs":"SHA-224 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:527:2011","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:508:2012","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U28","id":"23:2513:2006","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha224","id":"0:436:2026","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:138:2019":{"id":"0:138:2019","crate_id":0,"name":"Sha512VarCore","span":{"filename":"src/core_api.rs","begin":[108,0],"end":[111,1]},"visibility":"public","docs":"Core block-level SHA-512 hasher with variable output size.\n\nSupports initialization only for 28, 32, 48, and 64 byte output sizes,\ni.e. 224, 256, 384, and 512 bits respectively.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:42079:17377-0:138:2019","a:1:32275:6028-0:138:2019","a:1:42078:17378-0:138:2019","a:1:3172:11478-0:138:2019","a:1:32216:237-0:138:2019","a:1:3137:247-0:138:2019","b:1:3756-0:138:2019","b:1:2929-0:138:2019","b:1:2924-0:138:2019","b:1:2644-0:138:2019","b:1:2641-0:138:2019","b:1:2918-0:138:2019","b:1:2914-0:138:2019","b:5:736-0:138:2019","b:23:1171-0:138:2019","0:87","0:70","0:74","0:72","0:76","0:69","0:78","0:141","0:83","0:85"]}}},"b:1:2644-0:138:2019":{"id":"b:1:2644-0:138:2019","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32217:6027","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2638:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2646:29390"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13189:35550":{"id":"1:13189:35550","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:13187:35549"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13242:34271":{"id":"1:13242:34271","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12873:17411","`DoubleEndedIterator`":"1:8256:129","prim@char":"6:12330:471","str::split":"1:13236:34268"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43894:5676","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:16263","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12879:16263","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12894:17417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13295:35568":{"id":"1:13295:35568","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:12330:471","self::pattern":"1:12873:17411"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:16263","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12879:16263","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12894:17417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5617:36279":{"id":"5:5617:36279","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7641:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:16263","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:66:801":{"id":"0:66:801","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[85,4],"end":[87,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10278:143","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10259:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:54":{"id":"0:54","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[37,0],"end":[44,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:357:2174","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:55:2191"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13195:6181":{"id":"1:13195:6181","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"6:12349:1850"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5628:36281":{"id":"5:5628:36281","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7641:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:142:475":{"id":"0:142:475","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[107,9],"end":[107,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:137:475":{"id":"0:137:475","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[21,9],"end":[21,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:59:2195":{"id":"0:59:2195","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[51,4],"end":[51,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"TruncSide","id":"4:547:2173","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}}},"b:1:2929-0:138:2019":{"id":"b:1:2929-0:138:2019","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2888:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2898:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2932:137","1:2933:1805"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13207:34263":{"id":"1:13207:34263","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:13206:34262","str::split_at_mut_checked":"1:13209:34267"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13251:34273":{"id":"1:13251:34273","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"6:12330:471","self::pattern":"1:12873:17411","str::rsplitn":"1:13254:34275"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43980:5674","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:16263","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:87":{"id":"0:87","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[178,0],"end":[186,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3374:2215","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:88:671"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13269:35559":{"id":"1:13269:35559","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12873:17411","`DoubleEndedIterator`":"1:8256:129","prim@char":"6:12330:471","str::rmatch_indices":"1:13272:35560"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44026:15800","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:16263","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2920:831":{"id":"1:2920:831","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5632:16725":{"id":"5:5632:16725","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13310:16729"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7641:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5612":{"id":"5:5612","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5613:36278","5:5614:11419","5:5617:36279","5:5620:36280","5:5628:36281","5:5629:36282","5:5630:17358","5:5631:16724","5:5632:16725"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32275:6028-0:133:2018":{"id":"a:1:32275:6028-0:133:2018","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32275:6028","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13313:35414":{"id":"1:13313:35414","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:992:16739"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13257:34277":{"id":"1:13257:34277","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41984:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:16263","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13314:35572":{"id":"1:13314:35572","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4944:35572"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:44175:15733","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2932:137":{"id":"1:2932:137","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32140:13701","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:5:736-0:133:2018":{"id":"b:5:736-0:133:2018","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2657:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:732:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:738:15671","5:739:29395","5:740:29396"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13206:34262":{"id":"1:13206:34262","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"1:13208:34266","str::split_at_mut":"1:13207:34263"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2929-0:133:2018":{"id":"b:1:2929-0:133:2018","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2888:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2898:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2932:137","1:2933:1805"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:736-0:138:2019":{"id":"b:5:736-0:138:2019","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2657:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:732:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:738:15671","5:739:29395","5:740:29396"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13209:34267":{"id":"1:13209:34267","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:13208:34266"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:41984:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13281:35564":{"id":"1:13281:35564","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13213:12232":{"id":"1:13213:12232","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43862:12387","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[33,0],"end":[35,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:359:2171","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:53:2190"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:83":{"id":"0:83","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[164,0],"end":[169,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"21:112:2167","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:84:2213"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2924-0:133:2018":{"id":"b:1:2924-0:133:2018","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2898:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2894:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2927:137","1:2928:1807"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13310:16729":{"id":"1:13310:16729","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:23:1171-0:133:2018":{"id":"b:23:1171-0:133:2018","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"23:1168:5790","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["23:1173:199"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3172:11478-0:133:2018":{"id":"a:1:3172:11478-0:133:2018","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3172:11478","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:76":{"id":"0:76","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[132,0],"end":[134,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"21:99:2172","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:77:2194"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:103:2035":{"id":"0:103:2035","crate_id":0,"name":"Sha256","span":{"filename":"src/lib.rs","begin":[41,0],"end":[41,84]},"visibility":"public","docs":"SHA-256 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:527:2011","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:508:2012","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U32","id":"23:2525:2007","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha256","id":"0:385:2020","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:5-4:0:2000":{"id":"0:5-4:0:2000","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[10,17],"end":[10,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"digest","name":"digest","id":"4:0:2000","glob":false}}},"0:6-4:386:2001":{"id":"0:6-4:386:2001","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[10,23],"end":[10,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"digest::Digest","name":"Digest","id":"4:386:2001","glob":false}}},"5:740:29396":{"id":"5:740:29396","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2044":{"id":"0:0:2044","crate_id":0,"name":"sha2","span":{"filename":"src/lib.rs","begin":[1,0],"end":[49,84]},"visibility":"public","docs":"# RustCrypto: SHA-2\n\n[![crate][crate-image]][crate-link]\n[![Docs][docs-image]][docs-link]\n![Apache2/MIT licensed][license-image]\n![Rust Version][rustc-image]\n[![Project Chat][chat-image]][chat-link]\n[![Build Status][build-image]][build-link]\n\nPure Rust implementation of the [SHA-2] cryptographic hash algorithms.\n\nThere are 6 standard algorithms specified in the SHA-2 standard: \n`Sha224`, `Sha256`, `Sha512_224`, `Sha512_256`, `Sha384`, and `Sha512`.\n\nAlgorithmically, there are only 2 core algorithms: SHA-256 and SHA-512.\nAll other algorithms are just applications of these with different initial\nhash values, and truncated to different digest bit lengths. The first two\nalgorithms in the list are based on SHA-256, while the last four are based\non SHA-512.\n\n## Examples\n\n### One-shot API\n\n```rust\nuse sha2::{Sha256, Digest};\nuse hex_literal::hex;\n\nlet hash = Sha256::digest(b\"hello world\");\nassert_eq!(hash, hex!(\"b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\"));\n```\n\n### Incremental API\n\n```rust\nuse sha2::{Sha256, Sha512, Digest};\nuse hex_literal::hex;\n\nlet mut hasher = Sha256::new();\nhasher.update(b\"hello world\");\nlet hash256 = hasher.finalize();\n\nassert_eq!(hash256, hex!(\"b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\"));\n\nlet mut hasher = Sha512::new();\nhasher.update(b\"hello world\");\nlet hash512 = hasher.finalize();\n\nassert_eq!(hash512, hex!(\n    \"309ecc489c12d6eb4cc40f50c902f2b4d0ed77ee511a7c7a9bcd3ca86d4cd86f\"\n    \"989dd35bc5ff499670da34255b45b0cfd830e81f605dcf7dc5542e93ae9cd76f\"\n));\n```\n\nAlso, see the [examples section] in the RustCrypto/hashes readme.\n\n## Minimum Supported Rust Version\n\nRust **1.72** or higher.\n\nMinimum supported Rust version can be changed in the future, but it will be\ndone with a minor version bump.\n\n## SemVer Policy\n\n- All on-by-default features of this library are covered by SemVer\n- MSRV is considered exempt from SemVer as noted above\n\n## License\n\nThe crate is licensed under either of:\n\n* [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0)\n* [MIT license](http://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall be\ndual licensed as above, without any additional terms or conditions.\n\n[//]: # (badges)\n\n[crate-image]: https://img.shields.io/crates/v/sha2.svg\n[crate-link]: https://crates.io/crates/sha2\n[docs-image]: https://docs.rs/sha2/badge.svg\n[docs-link]: https://docs.rs/sha2/\n[license-image]: https://img.shields.io/badge/license-Apache2.0/MIT-blue.svg\n[rustc-image]: https://img.shields.io/badge/rustc-1.72+-blue.svg\n[chat-image]: https://img.shields.io/badge/zulip-join_chat-blue.svg\n[chat-link]: https://rustcrypto.zulipchat.com/#narrow/stream/260041-hashes\n[build-image]: https://github.com/RustCrypto/hashes/workflows/sha2/badge.svg?branch=master\n[build-link]: https://github.com/RustCrypto/hashes/actions?query=workflow%3Asha2\n\n[//]: # (general links)\n\n[SHA-2]: https://en.wikipedia.org/wiki/SHA-2\n[examples section]: https://github.com/RustCrypto/hashes#Examples","links":{},"attrs":["#![no_std]","#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\",\nhtml_favicon_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\")]","#![warn(missing_docs, rust_2018_idioms)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:5-4:0:2000","0:6-4:386:2001","0:97-0:90:2016","0:98-0:94:2017","0:100-0:133:2018","0:101-0:138:2019","0:102:2033","0:103:2035","0:104:2037","0:105:2039","0:106:2041","0:107:2043"],"is_stripped":false}}},"1:13194:336":{"id":"1:13194:336","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:13195:6181","`u8`":"6:12349:1850"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2917:11529":{"id":"1:2917:11529","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2891:144"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13205:35553":{"id":"1:13205:35553","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"6:12336:1720","crate::ops::IndexMut":"1:3415:5713","str::slice_unchecked":"1:13204:35552"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13260:34278":{"id":"1:13260:34278","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41984:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:16263","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12879:16263","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12894:17417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13307:16723":{"id":"1:13307:16723","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39885:17251","Self::is_ascii":"1:13306:16722"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41984:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39885:17251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2641-0:133:2018":{"id":"b:1:2641-0:133:2018","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32217:6027","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2635:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2018","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2643:2246"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2928:1807":{"id":"1:2928:1807","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:42117:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2898:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13301:35570":{"id":"1:13301:35570","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:12330:471","self::pattern":"1:12873:17411"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:16263","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12879:16263","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12894:17417","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42078:17378-0:138:2019":{"id":"a:1:42078:17378-0:138:2019","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42078:17378","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13198:16547":{"id":"1:13198:16547","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41986:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41984:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10963:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10963:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13304:35571":{"id":"1:13304:35571","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12834:136","`FromStr`":"1:12833:2355"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42117:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12833:2355","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12833:2355","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:23:1171-0:138:2019":{"id":"b:23:1171-0:138:2019","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"23:1168:5790","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["23:1173:199"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:53:2190":{"id":"0:53:2190","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[34,4],"end":[34,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Eager","id":"24:135:2166","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:1:2924-0:138:2019":{"id":"b:1:2924-0:138:2019","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2898:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2894:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2927:137","1:2928:1807"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:106:2041":{"id":"0:106:2041","crate_id":0,"name":"Sha384","span":{"filename":"src/lib.rs","begin":[47,0],"end":[47,84]},"visibility":"public","docs":"SHA-384 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:527:2011","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:508:2012","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2019","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U48","id":"23:2573:2008","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha384","id":"0:402:2022","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:13228:11574":{"id":"1:13228:11574","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41986:191","prim@char":"6:12330:471","self::pattern":"1:12873:17411"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41984:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:16263","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13212:15819":{"id":"1:13212:15819","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"6:12330:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43852:15791","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13236:34268":{"id":"1:13236:34268","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12873:17411","`DoubleEndedIterator`":"1:8256:129","prim@char":"6:12330:471","str::split_whitespace":"1:13214:31006","str::rsplit":"1:13242:34271"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43876:5672","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12879:16263","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:81:2200":{"id":"0:81:2200","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[153,4],"end":[161,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Buffer","id":"4:355:2170","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Output","id":"21:60:199","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"4:368:2175":{"crate_id":4,"path":["digest","core_api","VariableOutputCore"],"kind":"trait"},"17:6991:38619":{"crate_id":17,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"25:235:132":{"crate_id":25,"path":["const_oid","encoder","Encoder"],"kind":"struct"},"17:7686:16088":{"crate_id":17,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:41912:15782":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"7:5290:14227":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:23120:14979":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"6:3330:16142":{"crate_id":6,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:40382:15731":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:12634:15799":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"18:14372:12780":{"crate_id":18,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:23175:14984":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"23:5711:5741":{"crate_id":23,"path":["typenum","generated","generic_const_mappings","Const"],"kind":"struct"},"1:11405:5670":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"18:16269:12585":{"crate_id":18,"path":["object","xcoff","Rel64"],"kind":"struct"},"6:650:16121":{"crate_id":6,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:23065:14974":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"18:9858:25185":{"crate_id":18,"path":["object","common","ComdatKind"],"kind":"enum"},"23:1231:5794":{"crate_id":23,"path":["typenum","type_operators","IsGreater"],"kind":"trait"},"18:0:2328":{"crate_id":18,"path":["object"],"kind":"module"},"7:7984:14803":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:3218:17279":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"1:38182:17272":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:44159:15808":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:23007:17111":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"7:5306:14234":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:5367:25116":{"crate_id":17,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:42068:16279":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:752:154":{"crate_id":6,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:41197:15771":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"23:844:17746":{"crate_id":23,"path":["typenum","private","PrivatePow"],"kind":"trait"},"6:4762:18087":{"crate_id":6,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"12:396:11992":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:2067:198":{"crate_id":6,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:1853:16129":{"crate_id":6,"path":["std","env","Vars"],"kind":"struct"},"1:9964:31580":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"4:463:2335":{"crate_id":4,"path":["digest","XofReader"],"kind":"trait"},"6:10325:16131":{"crate_id":6,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"18:13325:12570":{"crate_id":18,"path":["object","elf","Sym32"],"kind":"struct"},"6:6842:16174":{"crate_id":6,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"6:3519:15773":{"crate_id":6,"path":["std","io","util","Repeat"],"kind":"struct"},"1:22267:17726":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"18:14475:12802":{"crate_id":18,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:43998:5670":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:21639:29449":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"18:15376:13077":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:12354:965":{"crate_id":6,"path":["std","isize"],"kind":"primitive"},"7:5160:14167":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"18:13015:12472":{"crate_id":18,"path":["object","read","Relocation"],"kind":"struct"},"17:5995:15493":{"crate_id":17,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:46842:15345":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:4994:18053":{"crate_id":6,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"11:44:13705":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"18:9938:25188":{"crate_id":18,"path":["object","common","RelocationKind"],"kind":"enum"},"1:39562:210":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"18:11242:15951":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:44800:219":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"10:178:24173":{"crate_id":10,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"18:13146:12526":{"crate_id":18,"path":["object","archive","AixFileHeader"],"kind":"struct"},"12:1025:16106":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"10:447:24106":{"crate_id":10,"path":["miniz_oxide","MZError"],"kind":"enum"},"15:187:24198":{"crate_id":15,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:4876:18069":{"crate_id":6,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"18:11702:15434":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"23:9480:5739":{"crate_id":23,"path":["typenum","array","TArr"],"kind":"struct"},"1:43783:5683":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:22534:17558":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"18:11730:15436":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"5:2206:11999":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"23:814:17741":{"crate_id":23,"path":["typenum","private","PrivateAnd"],"kind":"trait"},"21:105:17775":{"crate_id":21,"path":["crypto_common","IvSizeUser"],"kind":"trait"},"18:15596:13151":{"crate_id":18,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"18:15463:13096":{"crate_id":18,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:7878:16231":{"crate_id":6,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"7:6775:14595":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"12:687:5669":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:8170:5716":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:1631:15622":{"crate_id":6,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:13859:152":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:4809:14701":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"1:12888:15414":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:2748:13346":{"crate_id":17,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:4775:12117":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"5:7606:15689":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"18:12443:12475":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"6:10638:12044":{"crate_id":6,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"18:11293:25221":{"crate_id":18,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:11108:5668":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:40799:15758":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"6:9544:16132":{"crate_id":6,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"7:1503:13866":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:11216:37168":{"crate_id":6,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"6:10948:139":{"crate_id":6,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"19:521:29377":{"crate_id":19,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:11912:15666":{"crate_id":6,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"18:12543:16006":{"crate_id":18,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"6:3385:16145":{"crate_id":6,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:33510:17267":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:8071:17970":{"crate_id":6,"path":["std","env","VarError"],"kind":"enum"},"17:6160:24229":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:6246:206":{"crate_id":17,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"5:4113:12059":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"5:7401:12076":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:43980:5674":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"18:14560:12814":{"crate_id":18,"path":["object","macho","Nlist64"],"kind":"struct"},"7:5122:14164":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:6802:15557":{"crate_id":17,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:8256:129":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:562:12000":{"crate_id":6,"path":["std","thread","Packet"],"kind":"struct"},"5:835:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:1614:12095":{"crate_id":6,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"7:8317:14835":{"crate_id":7,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:2636:13341":{"crate_id":17,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:47144:11397":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:43761:5685":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"23:2813:2178":{"crate_id":23,"path":["typenum","generated","consts","U128"],"kind":"type_alias"},"6:9282:16203":{"crate_id":6,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"5:3036:33940":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:47061:15352":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"18:12949:12469":{"crate_id":18,"path":["object","read","Export"],"kind":"struct"},"18:15214:13032":{"crate_id":18,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:32218:244":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:7639:17329":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"19:659:15913":{"crate_id":19,"path":["memchr","memmem","FindIter"],"kind":"struct"},"5:5418:12059":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:40618:16277":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:2087:11429":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:43701:5678":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:43218:15785":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"12:430:38599":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:46638:15309":{"crate_id":1,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"17:8136:15604":{"crate_id":17,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"7:5212:14189":{"crate_id":7,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"21:35:17784":{"crate_id":21,"path":["crypto_common","hazmat","SerializableState"],"kind":"trait"},"7:5536:14333":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"7:5400:14270":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"5:1474:5668":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"7:5225:14193":{"crate_id":7,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:11307:14932":{"crate_id":6,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:4412:17300":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:12899:17416":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"21:60:199":{"crate_id":21,"path":["crypto_common","Output"],"kind":"type_alias"},"18:13272:12563":{"crate_id":18,"path":["object","elf","SectionHeader64"],"kind":"struct"},"18:12572:12411":{"crate_id":18,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"1:22890:14961":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"6:11277:162":{"crate_id":6,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"18:11605:12420":{"crate_id":18,"path":["object","read","elf","version","Version"],"kind":"struct"},"18:15116:13006":{"crate_id":18,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"7:5039:14147":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:10967:14887":{"crate_id":6,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"1:40393:15732":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:44618:15845":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"19:113:29367":{"crate_id":19,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"6:674:17943":{"crate_id":6,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:8541:15805":{"crate_id":6,"path":["std","io","Lines"],"kind":"struct"},"18:11853:15984":{"crate_id":18,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"18:12056:12456":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"7:8294:14829":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:3669:12282":{"crate_id":17,"path":["gimli","arch","X86_64"],"kind":"struct"},"18:437:12329":{"crate_id":18,"path":["object","read","any","Section"],"kind":"struct"},"6:9237:18136":{"crate_id":6,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:5037:13407":{"crate_id":17,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:40746:15753":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:42479:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"18:12342:15446":{"crate_id":18,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:8227:6026":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"7:5277:14222":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"18:10612:15935":{"crate_id":18,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:44893:180":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:2888:163":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:41946:15205":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"12:856:16102":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:23087:14976":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"7:4942:14100":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"18:13497:12600":{"crate_id":18,"path":["object","elf","Versym"],"kind":"struct"},"1:8364:178":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:21836:17471":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:6900:2170":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"7:5502:14326":{"crate_id":7,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"5:6608:12059":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"18:15799:13204":{"crate_id":18,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"6:2488:17995":{"crate_id":6,"path":["std","fs","read_dir"],"kind":"function"},"6:2534:2253":{"crate_id":6,"path":["std","io"],"kind":"module"},"1:22865:15715":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"22:146:2164":{"crate_id":22,"path":["hybrid_array","Array"],"kind":"struct"},"7:6621:14543":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:47197:11400":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"7:6447:14446":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:12352:1844":{"crate_id":6,"path":["std","u64"],"kind":"primitive"},"12:1142:16110":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:9172:11540":{"crate_id":6,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"18:13797:12679":{"crate_id":18,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:8301:13599":{"crate_id":17,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:32747:13491":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:11920:15666":{"crate_id":6,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"6:9207:18135":{"crate_id":6,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:46667:15310":{"crate_id":1,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"1:46333:15282":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"18:11674:15432":{"crate_id":18,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:44373:15823":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"18:1207:15923":{"crate_id":18,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"6:4151:18042":{"crate_id":6,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:6385:13425":{"crate_id":17,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"12:2369:16117":{"crate_id":12,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"18:15616:13156":{"crate_id":18,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"18:12969:12507":{"crate_id":18,"path":["object","read","CodeView"],"kind":"struct"},"1:40297:15727":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"6:8258:15626":{"crate_id":6,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:3657:17998":{"crate_id":6,"path":["std","io","Seek"],"kind":"trait"},"7:1547:13891":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"7:5102:14162":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:6278:16025":{"crate_id":17,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:41778:17371":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"18:16121:13285":{"crate_id":18,"path":["object","xcoff","FileAux64"],"kind":"struct"},"7:6698:14571":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"18:12671:16009":{"crate_id":18,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"12:102:15611":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"23:1195:5764":{"crate_id":23,"path":["typenum","type_operators","Len"],"kind":"trait"},"23:1206:5750":{"crate_id":23,"path":["typenum","type_operators","Max"],"kind":"trait"},"6:896:15618":{"crate_id":6,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"6:1914:16132":{"crate_id":6,"path":["std","env","Args"],"kind":"struct"},"0:102:2033":{"crate_id":0,"path":["sha2","Sha224"],"kind":"type_alias"},"1:6895:15702":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"18:10720:38638":{"crate_id":18,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:22467:17726":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"12:299:15612":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"6:4917:18057":{"crate_id":6,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"18:3264:15929":{"crate_id":18,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"18:11227:15950":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:1607:11540":{"crate_id":6,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"23:989:17723":{"crate_id":23,"path":["typenum","private","PrivateDivInt"],"kind":"trait"},"23:835:17724":{"crate_id":23,"path":["typenum","private","PrivateIntegerAdd"],"kind":"trait"},"1:21610:29457":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:44590:15838":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"1:40489:15736":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"17:4062:13386":{"crate_id":17,"path":["gimli","constants","DwTag"],"kind":"struct"},"15:31:16093":{"crate_id":15,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:4830:13400":{"crate_id":17,"path":["gimli","constants","DwInl"],"kind":"struct"},"7:5112:14163":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:32193:16274":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"5:1536:15619":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:10743:12128":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"7:5244:14203":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"18:15760:13195":{"crate_id":18,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"7:5477:14317":{"crate_id":7,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"19:608:15912":{"crate_id":19,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:40776:15756":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"5:1735:12059":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:42078:17378":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:3380:140":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:41964:15206":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"6:12281:16234":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"7:6417:14429":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"4:484:2339":{"crate_id":4,"path":["digest","VariableOutputReset"],"kind":"trait"},"1:44503:15836":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:7656:25128":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"18:15151:13016":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"23:621:2177":{"crate_id":23,"path":["typenum","marker_traits","Unsigned"],"kind":"trait"},"7:7339:14678":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:1092:16107":{"crate_id":6,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:40685:15744":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"7:6524:14481":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:5697:16163":{"crate_id":6,"path":["std","process","Stdio"],"kind":"struct"},"1:31005:11493":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"18:11367:12401":{"crate_id":18,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"5:219:12058":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:8242:16186":{"crate_id":6,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"6:8643:16198":{"crate_id":6,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"21:123:17779":{"crate_id":21,"path":["crypto_common","InnerInit"],"kind":"trait"},"1:2882:77":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:41239:15774":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:1855:16130":{"crate_id":6,"path":["std","env","VarsOs"],"kind":"struct"},"7:4811:14020":{"crate_id":7,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:12356:1418":{"crate_id":6,"path":["std","reference"],"kind":"primitive"},"1:5209:33023":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:11951:5688":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"23:785:17753":{"crate_id":23,"path":["typenum","private","Trim"],"kind":"trait"},"17:8155:15607":{"crate_id":17,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"4:566:2340":{"crate_id":4,"path":["digest","InvalidBufferSize"],"kind":"struct"},"5:3280:15622":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"5:7739:12099":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:9454:16263":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"5:935:12067":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"18:10915:38637":{"crate_id":18,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"23:9072:5632":{"crate_id":23,"path":["typenum","int","NInt"],"kind":"struct"},"6:9462:15646":{"crate_id":6,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:12343:732":{"crate_id":6,"path":["std","f128"],"kind":"primitive"},"5:4248:11982":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"5:7445:11540":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:7888:15597":{"crate_id":17,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:8174:17365":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:3612:31387":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:4344:18067":{"crate_id":6,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"18:15400:13082":{"crate_id":18,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"7:7452:14715":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:15:2295":{"crate_id":1,"path":["core","write"],"kind":"macro"},"6:8521:15765":{"crate_id":6,"path":["std","io","Take"],"kind":"struct"},"1:43029:137":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"23:1051:17728":{"crate_id":23,"path":["typenum","private","IsEqualPrivate"],"kind":"trait"},"5:4447:12083":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"6:8790:14906":{"crate_id":6,"path":["std","path","PrefixComponent"],"kind":"struct"},"18:15608:13153":{"crate_id":18,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"12:1910:15621":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"18:11567:15965":{"crate_id":18,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"6:6707:12031":{"crate_id":6,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"18:13553:12618":{"crate_id":18,"path":["object","elf","Vernaux"],"kind":"struct"},"1:10311:11600":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"5:4477:11982":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"18:14038:12714":{"crate_id":18,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:23186:14985":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"18:14876:12940":{"crate_id":18,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"7:491:13797":{"crate_id":7,"path":["libc","unix","rlimit"],"kind":"struct"},"18:11841:15983":{"crate_id":18,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:5817:15474":{"crate_id":17,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:39547:213":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"18:13399:12583":{"crate_id":18,"path":["object","elf","Rela32"],"kind":"struct"},"1:6077:15695":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"18:12362:15451":{"crate_id":18,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:3132:117":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"19:698:15412":{"crate_id":19,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"18:15836:13211":{"crate_id":18,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:44909:15850":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:6872:15571":{"crate_id":17,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:47019:15350":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"18:15701:13179":{"crate_id":18,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:2898:257":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:39450:17287":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"19:538:12254":{"crate_id":19,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"6:4315:18064":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:10412:18119":{"crate_id":6,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"7:5415:14276":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:46990:15349":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:8073:13590":{"crate_id":17,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:5954:16167":{"crate_id":6,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"6:9258:14919":{"crate_id":6,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"18:14855:12932":{"crate_id":18,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"7:7485:14731":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"18:13723:12661":{"crate_id":18,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"5:304:2341":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:44308:15820":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:9408:235":{"crate_id":6,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"7:8328:14836":{"crate_id":7,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"18:11115:15947":{"crate_id":18,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:750:190":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"21:99:2172":{"crate_id":21,"path":["crypto_common","OutputSizeUser"],"kind":"trait"},"18:12485:25316":{"crate_id":18,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:33171:17262":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:2064:11430":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"18:13187:12535":{"crate_id":18,"path":["object","elf","FileHeader32"],"kind":"struct"},"5:40:12056":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:21838:14955":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"18:9671:25169":{"crate_id":18,"path":["object","common","Architecture"],"kind":"enum"},"18:15822:13208":{"crate_id":18,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:7799:13360":{"crate_id":17,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"18:11142:12411":{"crate_id":18,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:42598:11434":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"23:1221:5793":{"crate_id":23,"path":["typenum","type_operators","IsEqual"],"kind":"trait"},"6:6856:12032":{"crate_id":6,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"7:1723:13997":{"crate_id":7,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"7:4800:14012":{"crate_id":7,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:4856:13401":{"crate_id":17,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:10963:239":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"5:1164:36745":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"7:7584:14794":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"24:0:2165":{"crate_id":24,"path":["block_buffer"],"kind":"module"},"17:4424:13388":{"crate_id":17,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:9386:187":{"crate_id":6,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"7:5020:14138":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"12:1007:15589":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"7:559:13840":{"crate_id":7,"path":["libc","unix","sigval"],"kind":"struct"},"6:9195:14916":{"crate_id":6,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"12:1087:38591":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"19:481:15403":{"crate_id":19,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:44872:31532":{"crate_id":1,"path":["core","task","wake","ExtData"],"kind":"enum"},"1:44130:15805":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:7986:12015":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"18:15324:13060":{"crate_id":18,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:7590:13369":{"crate_id":17,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"18:12808:12501":{"crate_id":18,"path":["object","read","SymbolIndex"],"kind":"struct"},"23:1174:5791":{"crate_id":23,"path":["typenum","type_operators","Abs"],"kind":"trait"},"7:5031:14142":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:7580:15595":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:6813:15558":{"crate_id":17,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:14018:1985":{"crate_id":1,"path":["core","core_arch","arch","x86_64"],"kind":"module"},"18:14325:12773":{"crate_id":18,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:32207:15724":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:44184:15727":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"18:15206:13030":{"crate_id":18,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:2355:13323":{"crate_id":17,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:2902:24257":{"crate_id":17,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:46460:15303":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"18:12422:15454":{"crate_id":18,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"7:5352:14244":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"18:597:12376":{"crate_id":18,"path":["object","read","any","Symbol"],"kind":"struct"},"1:39534:15725":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"7:5174:14168":{"crate_id":7,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:4502:13390":{"crate_id":17,"path":["gimli","constants","DwLle"],"kind":"struct"},"7:1699:13988":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"25:290:2004":{"crate_id":25,"path":["const_oid","ObjectIdentifier"],"kind":"struct"},"1:40570:17337":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"18:11324:15952":{"crate_id":18,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:44080:15803":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"5:1555:16097":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"7:1496:13863":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:10315:11602":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:9391:12028":{"crate_id":6,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"21:110:2344":{"crate_id":21,"path":["crypto_common","Reset"],"kind":"trait"},"19:573:12249":{"crate_id":19,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"5:680:16237":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"18:12388:15452":{"crate_id":18,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:8720:32146":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:12345:890":{"crate_id":6,"path":["std","i16"],"kind":"primitive"},"21:145:12247":{"crate_id":21,"path":["crypto_common","hazmat","DeserializeStateError"],"kind":"struct"},"1:10677:12126":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:46249:15278":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"18:11595:12419":{"crate_id":18,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:10321:11604":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"18:10769:38633":{"crate_id":18,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:10104:11621":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"1:40625:5684":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"6:5437:203":{"crate_id":6,"path":["std","path","Path"],"kind":"struct"},"16:0:2326":{"crate_id":16,"path":["addr2line"],"kind":"module"},"18:13844:12685":{"crate_id":18,"path":["object","macho","LcStr"],"kind":"struct"},"3:0:2317":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"18:13509:12601":{"crate_id":18,"path":["object","elf","Verdef"],"kind":"struct"},"6:11351:16225":{"crate_id":6,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"18:15368:13074":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"7:1680:13981":{"crate_id":7,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"18:14271:12766":{"crate_id":18,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"6:8610:16197":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"5:4083:12076":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:1083:16106":{"crate_id":6,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:46688:15311":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"7:5565:14347":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"18:13606:12632":{"crate_id":18,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:43257:15786":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"18:14189:12751":{"crate_id":18,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:33443:17263":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:21659:17474":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"5:7654:15692":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"18:14986:12981":{"crate_id":18,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:4647:221":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"22:99:5718":{"crate_id":22,"path":["hybrid_array","traits","AssocArraySize"],"kind":"trait"},"6:8234:15635":{"crate_id":6,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"18:11051:15943":{"crate_id":18,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"5:3046:33837":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:5505:128":{"crate_id":6,"path":["std","path","Display"],"kind":"struct"},"1:44044:15801":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"6:11776:16150":{"crate_id":6,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:669:16124":{"crate_id":6,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"7:7389:14706":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"5:3801:15626":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"7:8006:14804":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:6667:15771":{"crate_id":6,"path":["std","sync","once","Once"],"kind":"struct"},"6:9135:14913":{"crate_id":6,"path":["std","process","ExitStatusError"],"kind":"struct"},"12:1582:16113":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:2698:12006":{"crate_id":6,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:4771:13398":{"crate_id":17,"path":["gimli","constants","DwId"],"kind":"struct"},"1:22:816":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"17:6849:15570":{"crate_id":17,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"18:12328:15442":{"crate_id":18,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"7:7561:14782":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"18:11189:12405":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:42003:173":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:0:563":{"crate_id":1,"path":["core"],"kind":"module"},"18:15748:13193":{"crate_id":18,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:39712:5707":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"18:10573:38635":{"crate_id":18,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:40409:15733":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:40496:15737":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"struct"},"1:21571:11493":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"5:1566:16098":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:8005:14845":{"crate_id":6,"path":["std","thread","ThreadId"],"kind":"struct"},"17:2708:13344":{"crate_id":17,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"7:6880:14623":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"7:5236:14200":{"crate_id":7,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:46932:15347":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:3179:11426":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"1:13109:119":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:45890:15246":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:12330:471":{"crate_id":6,"path":["std","char"],"kind":"primitive"},"12:837:16099":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"18:13387:12580":{"crate_id":18,"path":["object","elf","Rel32"],"kind":"struct"},"17:5722:13359":{"crate_id":17,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:3358:5711":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"23:1905:17737":{"crate_id":23,"path":["typenum","uint","SetBit"],"kind":"trait"},"1:46103:15270":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:41724:170":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"6:4093:18039":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"23:942:17758":{"crate_id":23,"path":["typenum","private","PrivateDiv"],"kind":"trait"},"7:5320:14238":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:8313:137":{"crate_id":17,"path":["gimli","read","Error"],"kind":"enum"},"7:5624:14376":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"6:6785:16171":{"crate_id":6,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:3329:13378":{"crate_id":17,"path":["gimli","arch","LoongArch"],"kind":"struct"},"7:6689:14565":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"18:12454:15456":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"6:367:16118":{"crate_id":6,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:32182:16273":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"12:1903:15620":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:3022:12011":{"crate_id":6,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"18:10317:12385":{"crate_id":18,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:40676:15743":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:2078:14951":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:43210:11848":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:8558:18036":{"crate_id":6,"path":["std","net","Shutdown"],"kind":"enum"},"19:613:38644":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"24:143:5726":{"crate_id":24,"path":["block_buffer","Lazy"],"kind":"struct"},"7:6746:14585":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"6:3648:36957":{"crate_id":6,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:47040:15351":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:4804:11457":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"5:1320:15589":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:3198:13492":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"18:14066:12719":{"crate_id":18,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"7:5002:14129":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"12:811:12095":{"crate_id":12,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"15:202:17837":{"crate_id":15,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:43050:11610":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:13802:12020":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:41183:15769":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"5:952:5668":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"5:6689:11540":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:44462:15826":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"7:1692:13985":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:46185:15274":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"18:14246:12763":{"crate_id":18,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"7:5483:14318":{"crate_id":7,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"17:7823:25129":{"crate_id":17,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:42440:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:4323:18065":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"18:12768:25171":{"crate_id":18,"path":["object","read","ObjectKind"],"kind":"enum"},"1:21625:17733":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"6:10712:16144":{"crate_id":6,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"23:783:17722":{"crate_id":23,"path":["typenum","private","InternalMarker"],"kind":"trait"},"7:6900:14637":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:41762:15197":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"18:11166:12403":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"6:9122:14912":{"crate_id":6,"path":["std","process","ExitStatus"],"kind":"struct"},"17:542:15461":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:44622:15846":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:10976:37170":{"crate_id":6,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"18:2175:25248":{"crate_id":18,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"5:3644:182":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"6:10996:16183":{"crate_id":6,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"18:12659:16008":{"crate_id":18,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"12:2562:13702":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"23:1131:17732":{"crate_id":23,"path":["typenum","private","IsGreaterOrEqualPrivate"],"kind":"trait"},"5:1336:16107":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:46572:15307":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:8332:16188":{"crate_id":6,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"20:0:1290":{"crate_id":20,"path":["panic_unwind"],"kind":"module"},"6:2306:138":{"crate_id":6,"path":["std","fs","File"],"kind":"struct"},"1:23028:17726":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"1:46024:15258":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"18:13855:12686":{"crate_id":18,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:6749:15556":{"crate_id":17,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:9276:115":{"crate_id":6,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:11239:5673":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:42157:5668":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"18:15333:13063":{"crate_id":18,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"7:6915:14648":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:22269:17472":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:6300:16040":{"crate_id":17,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"18:14503:12806":{"crate_id":18,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:42117:226":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"7:5436:14291":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"7:5146:14166":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"5:289:12059":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:8845:15638":{"crate_id":6,"path":["std","path","Components"],"kind":"struct"},"15:160:16093":{"crate_id":15,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:8086:16183":{"crate_id":6,"path":["std","env","JoinPathsError"],"kind":"struct"},"23:1279:5752":{"crate_id":23,"path":["typenum","type_operators","ToInt"],"kind":"trait"},"18:10982:25202":{"crate_id":18,"path":["object","read","archive","Members"],"kind":"enum"},"7:5472:14315":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:11998:2163":{"crate_id":1,"path":["core","slice","raw","from_ref"],"kind":"function"},"17:7741:13372":{"crate_id":17,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"6:8197:15631":{"crate_id":6,"path":["std","fs","Permissions"],"kind":"struct"},"10:53:24124":{"crate_id":10,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"4:366:5642":{"crate_id":4,"path":["digest","core_api","XofReaderCore"],"kind":"trait"},"18:12464:25315":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:45843:15243":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"18:15102:13005":{"crate_id":18,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"18:10251:12383":{"crate_id":18,"path":["object","endian","U64Bytes"],"kind":"struct"},"24:163:5643":{"crate_id":24,"path":["block_buffer","BlockBuffer"],"kind":"struct"},"6:8175:16184":{"crate_id":6,"path":["std","fs","ReadDir"],"kind":"struct"},"18:11497:15960":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"21:56:2168":{"crate_id":21,"path":["crypto_common","Block"],"kind":"type_alias"},"17:7509:16079":{"crate_id":17,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:8188:16092":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:951:16099":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"18:13292:12564":{"crate_id":18,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:3861:12076":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"6:12342:753":{"crate_id":6,"path":["std","f64"],"kind":"primitive"},"23:1153:17745":{"crate_id":23,"path":["typenum","private","PrivateLogarithm2"],"kind":"trait"},"18:13412:12585":{"crate_id":18,"path":["object","elf","Rel64"],"kind":"struct"},"18:14489:12803":{"crate_id":18,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"7:7446:14713":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:12116:12055":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:932:12095":{"crate_id":6,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:43793:5681":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:12333:1313":{"crate_id":6,"path":["std","pointer"],"kind":"primitive"},"1:44788:15235":{"crate_id":1,"path":["core","future","async_drop","Noop"],"kind":"struct"},"7:5598:14359":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:22934:31098":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:4641:13395":{"crate_id":17,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"18:15410:13085":{"crate_id":18,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:32200:11612":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"6:5628:16162":{"crate_id":6,"path":["std","process","ChildStderr"],"kind":"struct"},"7:7314:14660":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"18:4821:15932":{"crate_id":18,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"1:22914:31108":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:3363:17276":{"crate_id":1,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"23:611:190":{"crate_id":23,"path":["typenum","marker_traits","NonZero"],"kind":"trait"},"6:1997:17980":{"crate_id":6,"path":["std","error","Indented"],"kind":"struct"},"1:21826:17726":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"18:14868:12939":{"crate_id":18,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"18:12278:16001":{"crate_id":18,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:12331:1872":{"crate_id":6,"path":["std","unit"],"kind":"primitive"},"10:357:24121":{"crate_id":10,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"5:1505:11540":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:43622:16286":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"4:359:2171":{"crate_id":4,"path":["digest","core_api","BufferKindUser"],"kind":"trait"},"7:4897:14076":{"crate_id":7,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:3582:14890":{"crate_id":6,"path":["std","io","Read"],"kind":"trait"},"6:865:5668":{"crate_id":6,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"18:14212:12760":{"crate_id":18,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:46135:15272":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:4656:16257":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:2508:13335":{"crate_id":17,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"18:15931:12535":{"crate_id":18,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"18:13814:12682":{"crate_id":18,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:30599:5709":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:11157:5672":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:44883:16289":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"18:14599:12824":{"crate_id":18,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:3600:16149":{"crate_id":6,"path":["std","io","IoSliceMut"],"kind":"struct"},"6:4662:18069":{"crate_id":6,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:41221:12124":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"16:288:24210":{"crate_id":16,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:12404:5656":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:46053:15260":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"18:15138:13010":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"18:15992:13259":{"crate_id":18,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"6:8065:17947":{"crate_id":6,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:43894:5676":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"24:151:137":{"crate_id":24,"path":["block_buffer","Error"],"kind":"struct"},"6:11905:37195":{"crate_id":6,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:23109:14978":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"17:4940:13404":{"crate_id":17,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"7:5581:14352":{"crate_id":7,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:5006:13406":{"crate_id":17,"path":["gimli","constants","DwLne"],"kind":"struct"},"5:6172:11982":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:3587:146":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"7:473:13789":{"crate_id":7,"path":["libc","unix","utimbuf"],"kind":"struct"},"23:0:2176":{"crate_id":23,"path":["typenum"],"kind":"module"},"1:10304:119":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"4:527:2011":{"crate_id":4,"path":["digest","core_api","wrapper","CoreWrapper"],"kind":"struct"},"19:80:29365":{"crate_id":19,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"12:875:16104":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:2638:103":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"5:3293:33870":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"23:1031:17727":{"crate_id":23,"path":["typenum","private","IsLessPrivate"],"kind":"trait"},"18:12724:25192":{"crate_id":18,"path":["object","read","FileKind"],"kind":"enum"},"18:14994:12982":{"crate_id":18,"path":["object","pe","Guid"],"kind":"struct"},"23:2525:2007":{"crate_id":23,"path":["typenum","generated","consts","U32"],"kind":"type_alias"},"18:16198:13303":{"crate_id":18,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"21:108:17776":{"crate_id":21,"path":["crypto_common","InnerUser"],"kind":"trait"},"18:9807:25174":{"crate_id":18,"path":["object","common","SectionKind"],"kind":"enum"},"17:7379:38626":{"crate_id":17,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:7570:13368":{"crate_id":17,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:7769:13544":{"crate_id":17,"path":["gimli","read","UnitOffset"],"kind":"struct"},"18:11583:15970":{"crate_id":18,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"5:1577:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:2936:24258":{"crate_id":17,"path":["gimli","common","SectionId"],"kind":"enum"},"7:6441:14445":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:44679:17442":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"7:5665:14393":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"18:12433:12472":{"crate_id":18,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:46202:15275":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"12:123:11988":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:747:17098":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"1:3374:2215":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"5:2098:15626":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:30978:196":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"5:6047:12089":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:46422:15301":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:6665:25123":{"crate_id":17,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"18:13173:12534":{"crate_id":18,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:4377:16254":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"18:11493:15959":{"crate_id":18,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:5831:15477":{"crate_id":17,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:41924:15636":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:11577:16226":{"crate_id":6,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"7:5046:14149":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"18:9886:25186":{"crate_id":18,"path":["object","common","SymbolKind"],"kind":"enum"},"6:11503:12049":{"crate_id":6,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"19:765:29376":{"crate_id":19,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:34375:13496":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"12:490:154":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"6:7396:12037":{"crate_id":6,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:4:1255":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:44594:15839":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:8767:6363":{"crate_id":6,"path":["std","path","State"],"kind":"enum"},"7:4891:14073":{"crate_id":7,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"7:479:13792":{"crate_id":7,"path":["libc","unix","timeval"],"kind":"struct"},"1:21712:17470":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:43004:73":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:44451:17432":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"7:0:1001":{"crate_id":7,"path":["libc"],"kind":"module"},"1:3188:5714":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:4143:18041":{"crate_id":6,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"18:10170:12380":{"crate_id":18,"path":["object","endian","BigEndian"],"kind":"struct"},"6:4331:18066":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"7:6542:14493":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"18:14025:12712":{"crate_id":18,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:6574:13373":{"crate_id":17,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"23:1184:5751":{"crate_id":23,"path":["typenum","type_operators","Pow"],"kind":"trait"},"1:22109:17726":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"1:47133:11396":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"6:3057:137":{"crate_id":6,"path":["std","io","error","Error"],"kind":"struct"},"7:1671:13975":{"crate_id":7,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"23:9104:5635":{"crate_id":23,"path":["typenum","int","Z0"],"kind":"struct"},"23:1202:5749":{"crate_id":23,"path":["typenum","type_operators","Min"],"kind":"trait"},"6:8702:18099":{"crate_id":6,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"18:11075:12401":{"crate_id":18,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"18:2234:15928":{"crate_id":18,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"18:15197:13029":{"crate_id":18,"path":["object","pe","ImageRelocation"],"kind":"struct"},"23:2397:17726":{"crate_id":23,"path":["typenum","sealed","Sealed"],"kind":"trait"},"17:5846:15479":{"crate_id":17,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"7:7575:14791":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:0:505":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"18:12993:25194":{"crate_id":18,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:42717:11603":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:7539:13367":{"crate_id":17,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:43265:15787":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:3925:13385":{"crate_id":17,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:5415:13412":{"crate_id":17,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:7132:15588":{"crate_id":17,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"6:2004:784":{"crate_id":6,"path":["std","ffi"],"kind":"module"},"18:11788:15975":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"5:2123:16241":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"6:12348:883":{"crate_id":6,"path":["std","i128"],"kind":"primitive"},"6:1636:15623":{"crate_id":6,"path":["std","collections","hash","set","Union"],"kind":"struct"},"18:12695:16011":{"crate_id":18,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"17:2478:13334":{"crate_id":17,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:2394:13330":{"crate_id":17,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:40504:15190":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:4882:13402":{"crate_id":17,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:10918:15630":{"crate_id":6,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"12:2548:13699":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"18:12043:15987":{"crate_id":18,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:7324:12036":{"crate_id":6,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"21:112:2167":{"crate_id":21,"path":["crypto_common","AlgorithmName"],"kind":"trait"},"1:41231:15191":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:9772:84":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:12335:1686":{"crate_id":6,"path":["std","slice"],"kind":"primitive"},"6:7982:14844":{"crate_id":6,"path":["std","thread","local","AccessError"],"kind":"struct"},"18:11214:15949":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"18:14402:12786":{"crate_id":18,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"5:1545:16112":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:4807:14699":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"1:44818:207":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"6:5592:16160":{"crate_id":6,"path":["std","process","ChildStdin"],"kind":"struct"},"1:47087:11393":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:8229:15632":{"crate_id":6,"path":["std","hash","random","RandomState"],"kind":"struct"},"6:5248:16156":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"8:32:24092":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"5:1437:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"18:12597:12482":{"crate_id":18,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"1:41190:15770":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:12833:2355":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"5:1586:16239":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:46010:15257":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:6962:13364":{"crate_id":17,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:40522:15738":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"25:0:2002":{"crate_id":25,"path":["const_oid"],"kind":"module"},"18:13774:12674":{"crate_id":18,"path":["object","macho","FatArch32"],"kind":"struct"},"18:10534:38631":{"crate_id":18,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:3593:17280":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"18:12621:12483":{"crate_id":18,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"7:578:13850":{"crate_id":7,"path":["libc","unix","servent"],"kind":"struct"},"22:31:11982":{"crate_id":22,"path":["hybrid_array","from_fn","Guard"],"kind":"struct"},"18:13437:12587":{"crate_id":18,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:5325:204":{"crate_id":6,"path":["std","path","PathBuf"],"kind":"struct"},"1:39885:17251":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"18:10439:12390":{"crate_id":18,"path":["object","read","util","StringTable"],"kind":"struct"},"1:2691:201":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:46505:15304":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"5:3288:15620":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"7:5336:14242":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"1:3572:5661":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:44598:15840":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"18:12516:16003":{"crate_id":18,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"6:11081:2344":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:46961:15348":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"6:8528:12387":{"crate_id":6,"path":["std","io","Bytes"],"kind":"struct"},"5:6930:12092":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"4:466:2336":{"crate_id":4,"path":["digest","ExtendableOutput"],"kind":"trait"},"18:15624:13157":{"crate_id":18,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"18:13344:12575":{"crate_id":18,"path":["object","elf","Sym64"],"kind":"struct"},"18:14575:12472":{"crate_id":18,"path":["object","macho","Relocation"],"kind":"struct"},"23:1111:17731":{"crate_id":23,"path":["typenum","private","IsNotEqualPrivate"],"kind":"trait"},"6:12350:1832":{"crate_id":6,"path":["std","u16"],"kind":"primitive"},"6:9310:16206":{"crate_id":6,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"23:1198:5753":{"crate_id":23,"path":["typenum","type_operators","PartialDiv"],"kind":"trait"},"17:6532:15541":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:5400:12380":{"crate_id":17,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"18:15039:12991":{"crate_id":18,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:21710:17726":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:1625:15621":{"crate_id":6,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:39662:5660":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:45957:15254":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:44932:15851":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"18:11419:12411":{"crate_id":18,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:7910:25130":{"crate_id":17,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"4:547:2173":{"crate_id":4,"path":["digest","core_api","TruncSide"],"kind":"enum"},"7:1580:13913":{"crate_id":7,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:617:17941":{"crate_id":6,"path":["std","ascii","AsciiExt"],"kind":"trait"},"5:7562:12084":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:860:16015":{"crate_id":17,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"17:7633:38620":{"crate_id":17,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:12357:13":{"crate_id":6,"path":["std","fn"],"kind":"primitive"},"6:878:5669":{"crate_id":6,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"6:2476:17989":{"crate_id":6,"path":["std","fs","read_link"],"kind":"function"},"4:472:2337":{"crate_id":4,"path":["digest","ExtendableOutputReset"],"kind":"trait"},"18:11063:15944":{"crate_id":18,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:22579:17726":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"18:12900:12504":{"crate_id":18,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"23:8998:5633":{"crate_id":23,"path":["typenum","bit","B0"],"kind":"struct"},"6:11036:14914":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"1:3142:11477":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"18:9737:25168":{"crate_id":18,"path":["object","common","SubArchitecture"],"kind":"enum"},"5:4511:12083":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"23:615:5759":{"crate_id":23,"path":["typenum","marker_traits","Bit"],"kind":"trait"},"17:7813:15596":{"crate_id":17,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"25:11:71":{"crate_id":25,"path":["const_oid","arcs","Arc"],"kind":"type_alias"},"7:5677:14398":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:1475:156":{"crate_id":6,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:30350:17059":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"6:3896:16151":{"crate_id":6,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"18:10419:12389":{"crate_id":18,"path":["object","read","util","ByteString"],"kind":"struct"},"17:4560:13392":{"crate_id":17,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:10715:16146":{"crate_id":6,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"1:21581:29453":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1:43450:15226":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:22481:17557":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"1:22949:31106":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"12:2403:5669":{"crate_id":12,"path":["hashbrown","table","IterMut"],"kind":"struct"},"18:11153:15938":{"crate_id":18,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"6:2478:17990":{"crate_id":6,"path":["std","fs","canonicalize"],"kind":"function"},"17:7755:13362":{"crate_id":17,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"18:16259:12580":{"crate_id":18,"path":["object","xcoff","Rel32"],"kind":"struct"},"5:7372:14948":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"23:1241:5795":{"crate_id":23,"path":["typenum","type_operators","IsLessOrEqual"],"kind":"trait"},"6:9736:127":{"crate_id":6,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"22:5356:5706":{"crate_id":22,"path":["hybrid_array","iter","TryFromIteratorError"],"kind":"struct"},"6:5102:18090":{"crate_id":6,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:32275:6028":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"18:14111:12724":{"crate_id":18,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:9959:32147":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"19:589:12257":{"crate_id":19,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"12:1891:12076":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"18:13235:12550":{"crate_id":18,"path":["object","elf","Ident"],"kind":"struct"},"18:14260:12765":{"crate_id":18,"path":["object","macho","TwolevelHint"],"kind":"struct"},"18:14414:12788":{"crate_id":18,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"19:531:15405":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"19:706:15414":{"crate_id":19,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:34029:17269":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:43852:15791":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:42182:196":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"18:10671:38634":{"crate_id":18,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:46039:15259":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:7497:13535":{"crate_id":17,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"18:15010:12983":{"crate_id":18,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:7397:38625":{"crate_id":17,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:43846:15790":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:40789:15757":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"23:1878:17735":{"crate_id":23,"path":["typenum","uint","GetBit"],"kind":"trait"},"23:1151:17748":{"crate_id":23,"path":["typenum","private","PrivateSquareRoot"],"kind":"trait"},"4:457:2333":{"crate_id":4,"path":["digest","FixedOutput"],"kind":"trait"},"17:6047:16018":{"crate_id":17,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:7014:25125":{"crate_id":17,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"7:6657:14557":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:7111:15587":{"crate_id":17,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:5247:16260":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:4529:15694":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"18:11773:12487":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:6480:13355":{"crate_id":17,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"10:238:6363":{"crate_id":10,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:3172:11478":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:42109:15211":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:38127:17271":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"7:8306:14831":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"12:328:15615":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"7:5617:14373":{"crate_id":7,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"5:7411:12070":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"18:14341:12775":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"12:1728:156":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"18:15383:13078":{"crate_id":18,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"12:700:11540":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:43944:15797":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"18:13526:12609":{"crate_id":18,"path":["object","elf","Verdaux"],"kind":"struct"},"6:3476:18024":{"crate_id":6,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"18:14051:12716":{"crate_id":18,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:43012:11428":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"5:6015:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"7:1628:13949":{"crate_id":7,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:44606:15842":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"7:8197:14818":{"crate_id":7,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"12:2304:15589":{"crate_id":12,"path":["hashbrown","table","Entry"],"kind":"enum"},"5:6068:17840":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"23:9535:5657":{"crate_id":23,"path":["typenum","Greater"],"kind":"struct"},"17:4468:13389":{"crate_id":17,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:3754:70":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"0:107:2043":{"crate_id":0,"path":["sha2","Sha512"],"kind":"type_alias"},"17:6335:16052":{"crate_id":17,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:43748:5684":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:40588:12118":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:12947:17425":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:45811:15241":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"18:11825:15981":{"crate_id":18,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:867:15918":{"crate_id":17,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"18:15769:13199":{"crate_id":18,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:32305:11480":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"17:2338:13321":{"crate_id":17,"path":["gimli","common","Encoding"],"kind":"struct"},"4:537:5646":{"crate_id":4,"path":["digest","core_api","xof_reader","XofReaderCoreWrapper"],"kind":"struct"},"7:5457:14306":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"8:79:24099":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"6:10908:15647":{"crate_id":6,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"19:515:12252":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"5:7431:33796":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"5:1489:5669":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"18:15521:13138":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:5863:25118":{"crate_id":17,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:5643:113":{"crate_id":6,"path":["std","process","Command"],"kind":"struct"},"7:6471:14455":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:10319:206":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:8309:6025":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"7:5266:14214":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:6188:220":{"crate_id":6,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:10520:153":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"6:8872:15643":{"crate_id":6,"path":["std","path","StripPrefixError"],"kind":"struct"},"6:12349:1850":{"crate_id":6,"path":["std","u8"],"kind":"primitive"},"18:15168:13021":{"crate_id":18,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"18:15289:13049":{"crate_id":18,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:3196:13320":{"crate_id":17,"path":["gimli","arch","AArch64"],"kind":"struct"},"4:454:2332":{"crate_id":4,"path":["digest","Update"],"kind":"trait"},"18:13674:12636":{"crate_id":18,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:42100:17386":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:22826:15711":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:44610:15843":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:12388:5654":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"7:6629:14544":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"18:11755:15440":{"crate_id":18,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"27:0:2046":{"crate_id":27,"path":["cpufeatures"],"kind":"module"},"7:4876:14066":{"crate_id":7,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"5:3254:15621":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"7:7461:14719":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"7:4932:14094":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"7:8265:14822":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:6271:12016":{"crate_id":6,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"7:5014:14135":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"12:710:16097":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"22:0:2331":{"crate_id":22,"path":["hybrid_array"],"kind":"module"},"1:41212:15773":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"7:5671:14395":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:10346:16211":{"crate_id":6,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"12:1883:5668":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:5904:11982":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:4288:11982":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"18:12494:12477":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"21:102:17774":{"crate_id":21,"path":["crypto_common","KeySizeUser"],"kind":"trait"},"1:8676:17327":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"5:3259:33868":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"18:16032:12553":{"crate_id":18,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"6:4191:18044":{"crate_id":6,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"23:9040:5631":{"crate_id":23,"path":["typenum","int","PInt"],"kind":"struct"},"7:564:13842":{"crate_id":7,"path":["libc","unix","itimerval"],"kind":"struct"},"1:3383:141":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:11205:14913":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"5:1527:15618":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"23:828:17749":{"crate_id":23,"path":["typenum","private","PrivateSub"],"kind":"trait"},"7:4885:14071":{"crate_id":7,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:34202:17270":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"7:4787:14003":{"crate_id":7,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:3415:5713":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:1968:16134":{"crate_id":6,"path":["std","error","Report"],"kind":"struct"},"7:6562:14509":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"23:1007:17764":{"crate_id":23,"path":["typenum","private","PrivateMin"],"kind":"trait"},"1:44796:164":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"25:329:2352":{"crate_id":25,"path":["const_oid","ObjectIdentifierRef"],"kind":"struct"},"17:7321:15209":{"crate_id":17,"path":["gimli","read","op","Location"],"kind":"enum"},"6:4477:16154":{"crate_id":6,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"5:7453:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"18:13252:12553":{"crate_id":18,"path":["object","elf","SectionHeader32"],"kind":"struct"},"5:7481:11540":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"7:7366:14688":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"5:3042:33838":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"18:13581:12628":{"crate_id":18,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:44175:15733":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"18:15434:13089":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:7926:12240":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"6:8481:14887":{"crate_id":6,"path":["std","io","IoSlice"],"kind":"struct"},"1:9343:16262":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:3386:142":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:1603:5668":{"crate_id":6,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:11616:16228":{"crate_id":6,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"7:5200:14182":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"7:5064:14160":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:22405:17555":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"7:4985:14119":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"5:5226:12089":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"18:11877:12422":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"7:5515:14327":{"crate_id":7,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"1:45875:15245":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:13495:16265":{"crate_id":1,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"18:12107:12411":{"crate_id":18,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"18:12584:15938":{"crate_id":18,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"17:7711:210":{"crate_id":17,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:8209:139":{"crate_id":6,"path":["std","fs","FileType"],"kind":"struct"},"6:2462:17985":{"crate_id":6,"path":["std","fs","symlink_metadata"],"kind":"function"},"18:15390:13079":{"crate_id":18,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"7:8341:14840":{"crate_id":7,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"4:357:2174":{"crate_id":4,"path":["digest","core_api","UpdateCore"],"kind":"trait"},"1:46393:15300":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:9403:234":{"crate_id":6,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"6:5840:15627":{"crate_id":6,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"5:2535:14942":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"13:0:2323":{"crate_id":13,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:22361:17554":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:44810:227":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"23:1071:17729":{"crate_id":23,"path":["typenum","private","IsGreaterPrivate"],"kind":"trait"},"17:6026:15499":{"crate_id":17,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:5686:13354":{"crate_id":17,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:10528:157":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:21608:29446":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"6:11816:16151":{"crate_id":6,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"6:7353:36975":{"crate_id":6,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"6:9426:162":{"crate_id":6,"path":["std","time","Instant"],"kind":"struct"},"6:11242:14924":{"crate_id":6,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"17:6066:15502":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"18:261:15919":{"crate_id":18,"path":["object","read","util","DebugLen"],"kind":"struct"},"18:11341:15955":{"crate_id":18,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:2635:102":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:42936:15214":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"12:1066:24187":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:2592:13339":{"crate_id":17,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:6700:15697":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"23:1272:5774":{"crate_id":23,"path":["typenum","type_operators","SquareRoot"],"kind":"trait"},"18:11313:15425":{"crate_id":18,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"4:323:17726":{"crate_id":4,"path":["digest","core_api","wrapper","sealed","Sealed"],"kind":"trait"},"18:513:15921":{"crate_id":18,"path":["object","read","any","Comdat"],"kind":"struct"},"6:9111:199":{"crate_id":6,"path":["std","process","Output"],"kind":"struct"},"6:7716:38150":{"crate_id":6,"path":["std","panicking","Hook"],"kind":"enum"},"18:14933:12975":{"crate_id":18,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"18:15301:13055":{"crate_id":18,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:22758:15710":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"12:2423:11540":{"crate_id":12,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"18:11688:15433":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"18:10350:12386":{"crate_id":18,"path":["object","endian","I64Bytes"],"kind":"struct"},"5:7547:17811":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:3639:11599":{"crate_id":6,"path":["std","io","Write"],"kind":"trait"},"1:42183:224":{"crate_id":1,"path":["core","sync","atomic","Ordering","Relaxed"],"kind":"variant"},"18:12189:15994":{"crate_id":18,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"5:7641:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"5:2245:15675":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:11643:14939":{"crate_id":6,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:12334:335":{"crate_id":6,"path":["std","array"],"kind":"primitive"},"5:5860:251":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:41806:15204":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"0:0:2044":{"crate_id":0,"path":["sha2"],"kind":"module"},"17:2323:24256":{"crate_id":17,"path":["gimli","common","Vendor"],"kind":"enum"},"1:43722:5686":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:41984:194":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"7:5653:14386":{"crate_id":7,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"18:15190:13027":{"crate_id":18,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"12:787:15619":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"6:7981:17726":{"crate_id":6,"path":["std","sealed","Sealed"],"kind":"trait"},"6:8170:12322":{"crate_id":6,"path":["std","fs","Metadata"],"kind":"struct"},"18:15273:13047":{"crate_id":18,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"6:11224:14930":{"crate_id":6,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"17:4352:13387":{"crate_id":17,"path":["gimli","constants","DwAt"],"kind":"struct"},"12:351:38592":{"crate_id":12,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:3327:17283":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"5:7591:17351":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"7:6756:14592":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"18:14529:12808":{"crate_id":18,"path":["object","macho","NoteCommand"],"kind":"struct"},"18:14079:12720":{"crate_id":18,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:938:16112":{"crate_id":6,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:3627:17285":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:6450:12024":{"crate_id":6,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"5:2318:15678":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:40344:31099":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:46534:15305":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:10709:16142":{"crate_id":6,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"0:105:2039":{"crate_id":0,"path":["sha2","Sha512_256"],"kind":"type_alias"},"1:42362:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"12:774:15618":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:40767:15755":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"7:8029:14817":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:2572:13338":{"crate_id":17,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"6:3893:16150":{"crate_id":6,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:10929:15655":{"crate_id":6,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"7:1585:13915":{"crate_id":7,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:8216:15608":{"crate_id":17,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"5:3038:14945":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"15:220:13677":{"crate_id":15,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"5:5073:11982":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:586:16120":{"crate_id":6,"path":["std","thread","JoinHandle"],"kind":"struct"},"7:5445:14297":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:10323:11605":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:40654:15741":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"7:1707:13992":{"crate_id":7,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"19:643:12249":{"crate_id":19,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:21593:29453":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"16:327:24215":{"crate_id":16,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:2612:13340":{"crate_id":17,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:22114:17476":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"7:8351:14842":{"crate_id":7,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:8534:5672":{"crate_id":6,"path":["std","io","Split"],"kind":"struct"},"17:5347:13411":{"crate_id":17,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:2891:144":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"18:12707:16012":{"crate_id":18,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"7:6460:14447":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"11:0:2321":{"crate_id":11,"path":["adler"],"kind":"module"},"18:12264:16000":{"crate_id":18,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:8805:18112":{"crate_id":6,"path":["std","path","Component"],"kind":"enum"},"26:0:2045":{"crate_id":26,"path":["cfg_if"],"kind":"module"},"1:44644:130":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"7:5636:14382":{"crate_id":7,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:40598:16276":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:2153:189":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:44140:15806":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"7:1686:13984":{"crate_id":7,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"18:15266:13046":{"crate_id":18,"path":["object","pe","ImageImportByName"],"kind":"struct"},"18:11392:15957":{"crate_id":18,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:6079:15463":{"crate_id":17,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:47159:11398":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:4913:13403":{"crate_id":17,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:5947:16164":{"crate_id":6,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"23:612:5748":{"crate_id":23,"path":["typenum","marker_traits","Zero"],"kind":"trait"},"17:6317:16044":{"crate_id":17,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"7:6505:14479":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"18:11089:15945":{"crate_id":18,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"18:12530:16005":{"crate_id":18,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"1:22898:14962":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"10:392:24107":{"crate_id":10,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:6000:11982":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"18:13568:12624":{"crate_id":18,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:3426:16146":{"crate_id":6,"path":["std","io","stdio","Stderr"],"kind":"struct"},"7:7330:14672":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"18:14131:12725":{"crate_id":18,"path":["object","macho","SymtabCommand"],"kind":"struct"},"7:1639:13957":{"crate_id":7,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"7:6491:14468":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:2303:24230":{"crate_id":17,"path":["gimli","common","Format"],"kind":"enum"},"1:30567:5708":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:4976:13405":{"crate_id":17,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:8604:18068":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"6:11657:15660":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:11093:12047":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:8647:14688":{"crate_id":6,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:947:16098":{"crate_id":6,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"7:5361:14248":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:2861:17726":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"12:1051:16107":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:22493:31913":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"1:23638:236":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"7:4924:14092":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:4157:18043":{"crate_id":6,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"7:5052:14151":{"crate_id":7,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"21:1180:12248":{"crate_id":21,"path":["crypto_common","InvalidLength"],"kind":"struct"},"7:6609:14536":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:44668:15847":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"7:7412:14707":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"4:114:2013":{"crate_id":4,"path":["digest","impl_oid_carrier"],"kind":"macro"},"17:4743:13397":{"crate_id":17,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:9399:11982":{"crate_id":6,"path":["std","sync","poison","Guard"],"kind":"struct"},"18:9916:25187":{"crate_id":18,"path":["object","common","SymbolScope"],"kind":"enum"},"17:3810:13382":{"crate_id":17,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:46348:15283":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:44602:15841":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:11350:5677":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"18:14311:12770":{"crate_id":18,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"18:15569:13139":{"crate_id":18,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"7:6714:14579":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"1:44258:17431":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:13597:33104":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"19:563:12256":{"crate_id":19,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"18:11256:15422":{"crate_id":18,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:1962:671":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"12:2443:12076":{"crate_id":12,"path":["hashbrown","table","Drain"],"kind":"struct"},"7:8012:14806":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"7:4952:14103":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"12:364:11990":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"6:9714:16184":{"crate_id":6,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"17:4718:13396":{"crate_id":17,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:40517:106":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"6:922:12076":{"crate_id":6,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"12:2140:16106":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"5:5462:17831":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"18:14298:12769":{"crate_id":18,"path":["object","macho","RpathCommand"],"kind":"struct"},"6:8592:15636":{"crate_id":6,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:7139:18138":{"crate_id":6,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:7549:15593":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:42963:15224":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"24:85:2190":{"crate_id":24,"path":["block_buffer","BufferKind"],"kind":"trait"},"17:5781:13358":{"crate_id":17,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:3509:211":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:43876:5672":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"17:5927:15485":{"crate_id":17,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"7:5296:14230":{"crate_id":7,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"0:103:2035":{"crate_id":0,"path":["sha2","Sha256"],"kind":"type_alias"},"18:11443:12416":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"7:5376:14256":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:39584:212":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"18:12213:15996":{"crate_id":18,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:47118:11395":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"5:4318:5668":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"18:14968:12976":{"crate_id":18,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:6342:38629":{"crate_id":17,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:11277:5690":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:1610:12076":{"crate_id":6,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"6:4913:18054":{"crate_id":6,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:7618:13537":{"crate_id":17,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:4971:12012":{"crate_id":6,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"18:15814:13205":{"crate_id":18,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"18:10018:25170":{"crate_id":18,"path":["object","common","FileFlags"],"kind":"enum"},"1:38871:17275":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"23:1168:5790":{"crate_id":23,"path":["typenum","type_operators","Same"],"kind":"trait"},"7:4992:14122":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"23:2573:2008":{"crate_id":23,"path":["typenum","generated","consts","U48"],"kind":"type_alias"},"6:4551:16155":{"crate_id":6,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"18:15058:12992":{"crate_id":18,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"6:980:16105":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:8491:17999":{"crate_id":6,"path":["std","io","SeekFrom"],"kind":"enum"},"17:6494:15538":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"7:7602:14797":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"5:2216:15673":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"12:844:17953":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"15:7:16093":{"crate_id":15,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"18:14284:12768":{"crate_id":18,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:2311:5721":{"crate_id":6,"path":["std","fs","read"],"kind":"function"},"1:4389:109":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:32140:13701":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:30605:11472":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"18:10068:25173":{"crate_id":18,"path":["object","common","SectionFlags"],"kind":"enum"},"1:38292:17274":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"7:4959:14106":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:8855:5668":{"crate_id":6,"path":["std","path","Iter"],"kind":"struct"},"7:586:13854":{"crate_id":7,"path":["libc","unix","protoent"],"kind":"struct"},"18:14723:12826":{"crate_id":18,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"18:14147:12730":{"crate_id":18,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:4811:14703":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"12:883:16105":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"18:14386:12782":{"crate_id":18,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:22593:17552":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"7:5546:14339":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:2838:13350":{"crate_id":17,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"18:16249:13313":{"crate_id":18,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"1:32276:11481":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:22842:14957":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:45911:15251":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:44614:15844":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"4:460:2334":{"crate_id":4,"path":["digest","FixedOutputReset"],"kind":"trait"},"17:0:2327":{"crate_id":17,"path":["gimli"],"kind":"module"},"1:44279:15811":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:11918:5687":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:21718:17473":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:7703:31022":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:3055:226":{"crate_id":6,"path":["std","io","error","Result"],"kind":"type_alias"},"18:11799:15976":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:2418:13331":{"crate_id":17,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"18:13738:12665":{"crate_id":18,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:6191:15696":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"23:933:17756":{"crate_id":23,"path":["typenum","private","PrivateSetBit"],"kind":"trait"},"6:7868:12376":{"crate_id":6,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:47212:11401":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"18:13089:12516":{"crate_id":18,"path":["object","archive","Header"],"kind":"struct"},"17:7648:16087":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:42946:11428":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"6:6395:16169":{"crate_id":6,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"18:10092:25191":{"crate_id":18,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:7061:13481":{"crate_id":17,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:42206:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"5:3247:5668":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:40560:12387":{"crate_id":1,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"6:9271:16201":{"crate_id":6,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"18:12399:15453":{"crate_id":18,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"4:0:2000":{"crate_id":4,"path":["digest"],"kind":"module"},"4:519:5644":{"crate_id":4,"path":["digest","core_api","rt_variable","RtVariableCoreWrapper"],"kind":"struct"},"1:12420:17418":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"18:13785:12677":{"crate_id":18,"path":["object","macho","FatArch64"],"kind":"struct"},"1:10278:143":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"6:373:16119":{"crate_id":6,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:42173:11540":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"10:330:13742":{"crate_id":10,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"18:12201:15995":{"crate_id":18,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:12340:734":{"crate_id":6,"path":["std","f16"],"kind":"primitive"},"1:44472:15830":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:11671:16178":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"23:1261:5763":{"crate_id":23,"path":["typenum","type_operators","IsGreaterOrEqual"],"kind":"trait"},"18:12175:15990":{"crate_id":18,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:39692:16275":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:10568:11846":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:22495:11414":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"18:16212:13307":{"crate_id":18,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"18:12792:12343":{"crate_id":18,"path":["object","read","SectionIndex"],"kind":"struct"},"1:2977:137":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:22876:31115":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"23:1251:5796":{"crate_id":23,"path":["typenum","type_operators","IsNotEqual"],"kind":"trait"},"18:11467:12418":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"23:998:17725":{"crate_id":23,"path":["typenum","private","PrivateRem"],"kind":"trait"},"1:3599:17282":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:10889:16220":{"crate_id":6,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"1:10563:11845":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"5:6562:12076":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"18:12824:25193":{"crate_id":18,"path":["object","read","SymbolSection"],"kind":"enum"},"5:0:309":{"crate_id":5,"path":["alloc"],"kind":"module"},"18:10828:38630":{"crate_id":18,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:45796:15240":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:46266:15279":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"18:12408:12471":{"crate_id":18,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:5914:15484":{"crate_id":17,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:7604:13370":{"crate_id":17,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:11419:5675":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"19:635:12269":{"crate_id":19,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:494:11998":{"crate_id":6,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"18:16138:13287":{"crate_id":18,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"7:545:13832":{"crate_id":7,"path":["libc","unix","winsize"],"kind":"struct"},"18:14177:12749":{"crate_id":18,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:6231:15529":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:8259:13532":{"crate_id":17,"path":["gimli","read","value","Value"],"kind":"enum"},"18:10661:15936":{"crate_id":18,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:46765:15344":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:40548:15739":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:2528:13336":{"crate_id":17,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:2773:16141":{"crate_id":6,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:7695:13541":{"crate_id":17,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"18:13485:12599":{"crate_id":18,"path":["object","elf","Dyn64"],"kind":"struct"},"18:15342:13064":{"crate_id":18,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:6889:15703":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"14:110:38601":{"crate_id":14,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"23:9461:5738":{"crate_id":23,"path":["typenum","array","ATerm"],"kind":"struct"},"1:32307:114":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"11:36:13704":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"24:135:2166":{"crate_id":24,"path":["block_buffer","Eager"],"kind":"struct"},"1:40416:17324":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:12650:15802":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:3332:16143":{"crate_id":6,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:974:16104":{"crate_id":6,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"18:13999:12709":{"crate_id":18,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:40333:15729":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"18:15720:13184":{"crate_id":18,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:3549:11982":{"crate_id":6,"path":["std","io","Guard"],"kind":"struct"},"18:15092:13004":{"crate_id":18,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"7:4837:14040":{"crate_id":7,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:46217:15276":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:2458:13333":{"crate_id":17,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"7:6435:14442":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"0:106:2041":{"crate_id":0,"path":["sha2","Sha384"],"kind":"type_alias"},"5:3881:12095":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"16:306:24211":{"crate_id":16,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:6634:13361":{"crate_id":17,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"7:1526:13876":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:6098:25119":{"crate_id":17,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"18:13832:12683":{"crate_id":18,"path":["object","macho","LoadCommand"],"kind":"struct"},"15:0:2325":{"crate_id":15,"path":["rustc_demangle"],"kind":"module"},"7:5250:14205":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"7:6874:14622":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"7:8282:14827":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:4498:16255":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:909:15619":{"crate_id":6,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:4205:18046":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"5:4432:265":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"4:361:5640":{"crate_id":4,"path":["digest","core_api","FixedOutputCore"],"kind":"trait"},"5:7489:11540":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"5:1351:16106":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:4730:11612":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"23:9556:5658":{"crate_id":23,"path":["typenum","Less"],"kind":"struct"},"6:4129:18040":{"crate_id":6,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:5897:13415":{"crate_id":17,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"7:6738:14584":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"5:6410:17845":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"7:8271:14823":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"6:957:17953":{"crate_id":6,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:46555:15306":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"7:5314:14237":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"12:2124:15589":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:2696:134":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"18:16223:13309":{"crate_id":18,"path":["object","xcoff","StatAux"],"kind":"struct"},"7:7359:14684":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:4915:18056":{"crate_id":6,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"4:363:5641":{"crate_id":4,"path":["digest","core_api","ExtendableOutputCore"],"kind":"trait"},"1:23098:14977":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"18:13375:12579":{"crate_id":18,"path":["object","elf","Syminfo64"],"kind":"struct"},"12:2326:16106":{"crate_id":12,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:11132:5669":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"4:476:2338":{"crate_id":4,"path":["digest","VariableOutput"],"kind":"trait"},"18:16079:13274":{"crate_id":18,"path":["object","xcoff","Symbol32"],"kind":"struct"},"18:13308:12568":{"crate_id":18,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:3899:13384":{"crate_id":17,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:40997:15767":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"18:2203:15925":{"crate_id":18,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"18:11621:15427":{"crate_id":18,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:3778:13381":{"crate_id":17,"path":["gimli","constants","DwSect"],"kind":"struct"},"6:4201:18045":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"23:9598:5629":{"crate_id":23,"path":["typenum","uint","UInt"],"kind":"struct"},"17:2438:13332":{"crate_id":17,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"18:13946:12700":{"crate_id":18,"path":["object","macho","Fvmlib"],"kind":"struct"},"18:13363:12576":{"crate_id":18,"path":["object","elf","Syminfo32"],"kind":"struct"},"7:5557:14345":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"21:114:17777":{"crate_id":21,"path":["crypto_common","KeyInit"],"kind":"trait"},"6:12336:1720":{"crate_id":6,"path":["std","str"],"kind":"primitive"},"17:2854:13351":{"crate_id":17,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:12302:17948":{"crate_id":6,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:3183:5710":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"17:5756:16016":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"6:6172:12024":{"crate_id":6,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"18:14449:12800":{"crate_id":18,"path":["object","macho","SymsegCommand"],"kind":"struct"},"7:8259:14821":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"19:548:153":{"crate_id":19,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:12688:5689":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:21657:17726":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"18:14091:12721":{"crate_id":18,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:3614:13380":{"crate_id":17,"path":["gimli","arch","X86"],"kind":"struct"},"6:11893:14940":{"crate_id":6,"path":["std","alloc","System"],"kind":"struct"},"6:8337:16189":{"crate_id":6,"path":["std","io","error","Custom"],"kind":"struct"},"1:4365:16253":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"7:5588:14354":{"crate_id":7,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:30631:31104":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"7:5370:14254":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"18:13922:12699":{"crate_id":18,"path":["object","macho","Section64"],"kind":"struct"},"6:2712:12004":{"crate_id":6,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:13535:15752":{"crate_id":1,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"6:8553:16196":{"crate_id":6,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:45978:15255":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"18:12318:12469":{"crate_id":18,"path":["object","read","pe","export","Export"],"kind":"struct"},"6:3293:36875":{"crate_id":6,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"7:8300:14830":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"18:13986:12708":{"crate_id":18,"path":["object","macho","DylibCommand"],"kind":"struct"},"5:7421:15683":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"1:12574:15793":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"21:81:5728":{"crate_id":21,"path":["crypto_common","BlockSizes"],"kind":"trait"},"1:45826:15242":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"18:15957:13229":{"crate_id":18,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"18:10137:25167":{"crate_id":18,"path":["object","endian","Endianness"],"kind":"enum"},"12:2536:13697":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"8:0:1901":{"crate_id":8,"path":["unwind"],"kind":"module"},"17:7355:13514":{"crate_id":17,"path":["gimli","read","op","Piece"],"kind":"struct"},"6:5981:16168":{"crate_id":6,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"7:7306:14655":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:6427:16055":{"crate_id":17,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"18:4986:15933":{"crate_id":18,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"1:2535:11414":{"crate_id":1,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"19:689:15411":{"crate_id":19,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"7:4971:14111":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"18:13594:12629":{"crate_id":18,"path":["object","elf","HashHeader"],"kind":"struct"},"6:11004:16163":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"18:14012:12711":{"crate_id":18,"path":["object","macho","SubClientCommand"],"kind":"struct"},"12:2151:16107":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:44150:15807":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"18:10954:25201":{"crate_id":18,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:7473:13534":{"crate_id":17,"path":["gimli","read","op","Expression"],"kind":"struct"},"18:256:15918":{"crate_id":18,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:44193:15732":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"18:11661:15431":{"crate_id":18,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"18:16050:12563":{"crate_id":18,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"7:6706:14575":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"6:12344:908":{"crate_id":6,"path":["std","i8"],"kind":"primitive"},"6:10938:14846":{"crate_id":6,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"18:16235:13312":{"crate_id":18,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"18:15426:13088":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:2070:197":{"crate_id":6,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"23:9577:135":{"crate_id":23,"path":["typenum","Equal"],"kind":"struct"},"1:39642:216":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"18:14516:12807":{"crate_id":18,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"18:16187:13302":{"crate_id":18,"path":["object","xcoff","ExpAux"],"kind":"struct"},"7:6763:14593":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"7:497:13800":{"crate_id":7,"path":["libc","unix","rusage"],"kind":"struct"},"23:642:5776":{"crate_id":23,"path":["typenum","marker_traits","Integer"],"kind":"trait"},"17:6412:25121":{"crate_id":17,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"18:11865:15985":{"crate_id":18,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:1762:17216":{"crate_id":1,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"1:46120:15271":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:1101:16111":{"crate_id":6,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"18:15944:12549":{"crate_id":18,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"6:521:11999":{"crate_id":6,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:39622:214":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"18:11764:15441":{"crate_id":18,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"5:732:250":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:8180:15630":{"crate_id":6,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:10313:11601":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:44626:14930":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"5:3816:16240":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:234:226":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:5578:16157":{"crate_id":6,"path":["std","process","Child"],"kind":"struct"},"12:1107:16109":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:13914:17467":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"18:15456:13094":{"crate_id":18,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"5:7630:12090":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"7:1535:13882":{"crate_id":7,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"7:5191:14177":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:22976:15717":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:5700:13357":{"crate_id":17,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"18:12300:25314":{"crate_id":18,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"7:5466:14312":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:7428:25127":{"crate_id":17,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"7:4979:14116":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:23142:14981":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"17:4614:13394":{"crate_id":17,"path":["gimli","constants","DwVis"],"kind":"struct"},"12:2469:12095":{"crate_id":12,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"17:6353:13422":{"crate_id":17,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"23:1274:5767":{"crate_id":23,"path":["typenum","type_operators","Logarithm2"],"kind":"trait"},"6:4873:18091":{"crate_id":6,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"18:14977:12980":{"crate_id":18,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"7:5344:14243":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"1:44485:15834":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:3268:13493":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:40667:15667":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:8624:14892":{"crate_id":6,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"18:12150:12462":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:42975:13567":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"18:12851:15458":{"crate_id":18,"path":["object","read","SymbolMap"],"kind":"struct"},"25:89:2354":{"crate_id":25,"path":["const_oid","traits","DynAssociatedOid"],"kind":"trait"},"18:14788:12877":{"crate_id":18,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"23:2555:2480":{"crate_id":23,"path":["typenum","generated","consts","U42"],"kind":"type_alias"},"17:6948:13363":{"crate_id":17,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:1619:15620":{"crate_id":6,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:43465:15788":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:3029:12277":{"crate_id":17,"path":["gimli","arch","Arm"],"kind":"struct"},"12:2554:38589":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"6:8472:14886":{"crate_id":6,"path":["std","io","util","Sink"],"kind":"struct"},"15:40:12550":{"crate_id":15,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:39530:5712":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"18:15445:13093":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:3130:11476":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"12:434:38595":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:42020:5669":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"7:5528:14328":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"12:1603:16114":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:12346:896":{"crate_id":6,"path":["std","i32"],"kind":"primitive"},"18:13424:12586":{"crate_id":18,"path":["object","elf","Rela64"],"kind":"struct"},"18:15222:13034":{"crate_id":18,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:10503:37395":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"1:44920:15239":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:45943:15253":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:8207:145":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"18:10905:15940":{"crate_id":18,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"18:15023:12988":{"crate_id":18,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"23:613:195":{"crate_id":23,"path":["typenum","marker_traits","Ord"],"kind":"trait"},"1:8682:17364":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"0:104:2037":{"crate_id":0,"path":["sha2","Sha512_224"],"kind":"type_alias"},"1:3345:124":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:3994:11540":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"7:5407:1242":{"crate_id":7,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"5:7103:12111":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"7:6650:14556":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:3582:254":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:9178:14915":{"crate_id":6,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:10260:11599":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"23:821:17751":{"crate_id":23,"path":["typenum","private","PrivateXor"],"kind":"trait"},"5:1839:12095":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"18:15356:13071":{"crate_id":18,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:3213:17278":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"18:10997:12398":{"crate_id":18,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"18:11128:12369":{"crate_id":18,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"18:13473:12596":{"crate_id":18,"path":["object","elf","Dyn32"],"kind":"struct"},"1:33577:17265":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:1969:11469":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"5:3657:5668":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:10775:12133":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"4:385:2179":{"crate_id":4,"path":["digest","digest","HashMarker"],"kind":"trait"},"1:2885:76":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:10259:226":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"5:741:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"4:508:2012":{"crate_id":4,"path":["digest","core_api","ct_variable","CtVariableCoreWrapper"],"kind":"struct"},"18:13046:12512":{"crate_id":18,"path":["object","read","CompressedFileRange"],"kind":"struct"},"15:165:24194":{"crate_id":15,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:40723:15749":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:9156:5668":{"crate_id":6,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"4:320:5645":{"crate_id":4,"path":["digest","core_api","wrapper","CoreProxy"],"kind":"trait"},"1:40645:16278":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:5158:18095":{"crate_id":6,"path":["std","panic","always_abort"],"kind":"function"},"17:7727:13371":{"crate_id":17,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"18:3597:15931":{"crate_id":18,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"19:581:11493":{"crate_id":19,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"18:15655:13165":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"5:6964:12107":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"6:8599:15637":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"6:3667:18017":{"crate_id":6,"path":["std","io","BufRead"],"kind":"trait"},"18:13211:12549":{"crate_id":18,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:3137:247":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"18:13877:12693":{"crate_id":18,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:8342:18029":{"crate_id":6,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:13624:205":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"5:1365:16111":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"5:6429:17847":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"5:7618:15691":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"6:9363:14923":{"crate_id":6,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"18:15313:13056":{"crate_id":18,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:8202:13374":{"crate_id":17,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:10953:17726":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"5:879:12065":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:39486:17284":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"6:6498:220":{"crate_id":6,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:43926:15796":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"18:15582:13145":{"crate_id":18,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:5107:13409":{"crate_id":17,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:6911:233":{"crate_id":6,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:8511:15741":{"crate_id":6,"path":["std","io","Chain"],"kind":"struct"},"1:47107:6354":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"18:11915:25290":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"6:968:16102":{"crate_id":6,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"7:5134:14165":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"7:7546:14775":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"7:4824:14030":{"crate_id":7,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"12:1923:15623":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"6:7937:12041":{"crate_id":6,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:5769:15472":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"18:12127:12461":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"12:1896:12095":{"crate_id":12,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"25:245:6363":{"crate_id":25,"path":["const_oid","encoder","State"],"kind":"enum"},"1:43862:12387":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:8719:14903":{"crate_id":6,"path":["std","path","Prefix"],"kind":"enum"},"1:45928:15252":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:6561:186":{"crate_id":6,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"7:6768:14594":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"7:6478:14459":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"23:1016:17766":{"crate_id":23,"path":["typenum","private","PrivateMax"],"kind":"trait"},"5:4934:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:43682:5665":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"18:12929:12505":{"crate_id":18,"path":["object","read","Import"],"kind":"struct"},"18:12238:15998":{"crate_id":18,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"18:13753:12670":{"crate_id":18,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"18:14912:12970":{"crate_id":18,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:44098:15804":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:40401:15727":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"7:1621:13945":{"crate_id":7,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:11433:5671":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"12:2569:15685":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"18:11634:15429":{"crate_id":18,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:7006:16056":{"crate_id":17,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"18:12289:12464":{"crate_id":18,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"18:11812:15979":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:11682:15662":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"12:2542:13698":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"18:14587:12817":{"crate_id":18,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:12355:1911":{"crate_id":6,"path":["std","usize"],"kind":"primitive"},"6:0:1712":{"crate_id":6,"path":["std"],"kind":"module"},"1:45858:15244":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"18:12647:16007":{"crate_id":18,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"1:40303:15728":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"7:532:13826":{"crate_id":7,"path":["libc","unix","iovec"],"kind":"struct"},"17:6398:13353":{"crate_id":17,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:43235:157":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"9:0:2045":{"crate_id":9,"path":["cfg_if"],"kind":"module"},"1:47274:6224":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"12:0:2322":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"23:2621:2009":{"crate_id":23,"path":["typenum","generated","consts","U64"],"kind":"type_alias"},"6:9330:14920":{"crate_id":6,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"18:13538:12612":{"crate_id":18,"path":["object","elf","Verneed"],"kind":"struct"},"7:6811:14608":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"18:15418:13086":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:44437:15825":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"18:9755:25166":{"crate_id":18,"path":["object","common","AddressSize"],"kind":"enum"},"1:3664:17286":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:6504:15539":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"5:4158:5669":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"18:403:15920":{"crate_id":18,"path":["object","read","any","Segment"],"kind":"struct"},"18:10887:38636":{"crate_id":18,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"18:15635:13162":{"crate_id":18,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"7:8288:14828":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"23:1276:5755":{"crate_id":23,"path":["typenum","type_operators","Gcd"],"kind":"trait"},"7:1510:13868":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"18:15126:13007":{"crate_id":18,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:42165:5669":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:41206:15772":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:3383:16144":{"crate_id":6,"path":["std","io","stdio","Stdout"],"kind":"struct"},"7:6636:14545":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:4531:13391":{"crate_id":17,"path":["gimli","constants","DwDs"],"kind":"struct"},"6:9719:12043":{"crate_id":6,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"1:2894:258":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:4577:11611":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"6:10218:15779":{"crate_id":6,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"17:3842:13383":{"crate_id":17,"path":["gimli","constants","DwUt"],"kind":"struct"},"7:1485:13858":{"crate_id":7,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:3475:13379":{"crate_id":17,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:21627:17734":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:23076:14975":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"6:4684:18070":{"crate_id":6,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:7472:38560":{"crate_id":6,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"7:4965:14108":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"7:553:13837":{"crate_id":7,"path":["libc","unix","linger"],"kind":"struct"},"5:7578:15686":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"18:12863:12503":{"crate_id":18,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:7754:17355":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:40372:15730":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:43835:15789":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:38237:17273":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"7:5630:14379":{"crate_id":7,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"5:1200:36746":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"23:5714:5742":{"crate_id":23,"path":["typenum","generated","generic_const_mappings","ToUInt"],"kind":"trait"},"18:14356:12779":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"18:12371:12505":{"crate_id":18,"path":["object","read","pe","import","Import"],"kind":"enum"},"23:1091:17730":{"crate_id":23,"path":["typenum","private","IsLessOrEqualPrivate"],"kind":"trait"},"18:11269:25220":{"crate_id":18,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"18:15249:13038":{"crate_id":18,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:1999:1357":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"5:839:12062":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"18:15473:13101":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"7:1663:13974":{"crate_id":7,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"12:800:12076":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"18:11898:12424":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"6:11610:15656":{"crate_id":6,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"7:485:13795":{"crate_id":7,"path":["libc","unix","timespec"],"kind":"struct"},"6:12351:1838":{"crate_id":6,"path":["std","u32"],"kind":"primitive"},"23:1211:5792":{"crate_id":23,"path":["typenum","type_operators","IsLess"],"kind":"trait"},"1:40983:15766":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:2878:13352":{"crate_id":17,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"7:1517:13871":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"4:386:2001":{"crate_id":4,"path":["digest","digest","Digest"],"kind":"trait"},"1:11200:5689":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:39602:215":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"18:1098:15922":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"7:6519:14480":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:36251:13497":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:7085:15581":{"crate_id":17,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:33644:17264":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:5088:18089":{"crate_id":6,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"5:7055:264":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"6:8023:12045":{"crate_id":6,"path":["std","thread","Thread"],"kind":"struct"},"1:32959:13489":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"6:11259:14931":{"crate_id":6,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"1:4784:11613":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"6:11192:14912":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"18:13064:12515":{"crate_id":18,"path":["object","read","CompressedData"],"kind":"struct"},"23:1190:5746":{"crate_id":23,"path":["typenum","type_operators","Cmp"],"kind":"trait"},"4:493:14949":{"crate_id":4,"path":["digest","core_api","ct_variable","NoOid"],"kind":"struct"},"1:46316:15281":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"21:94:5728":{"crate_id":21,"path":["crypto_common","sealed","BlockSizes"],"kind":"trait"},"17:3014:24259":{"crate_id":17,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:42028:11540":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"12:832:16112":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:5279:16156":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:8861:14911":{"crate_id":6,"path":["std","path","Ancestors"],"kind":"struct"},"25:16:2353":{"crate_id":25,"path":["const_oid","arcs","Arcs"],"kind":"struct"},"7:1593:13920":{"crate_id":7,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"18:14235:12761":{"crate_id":18,"path":["object","macho","DylibReference"],"kind":"struct"},"18:14545:12810":{"crate_id":18,"path":["object","macho","Nlist32"],"kind":"struct"},"21:72:2169":{"crate_id":21,"path":["crypto_common","BlockSizeUser"],"kind":"trait"},"6:5833:12024":{"crate_id":6,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:2274:11432":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:666:16122":{"crate_id":6,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:6927:13471":{"crate_id":17,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"7:5423:14281":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"19:507:12249":{"crate_id":19,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:40737:15752":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:43822:15228":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:10309:128":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"19:670:15917":{"crate_id":19,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"15:214:15609":{"crate_id":15,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"7:4864:14063":{"crate_id":7,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:12611:15798":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"23:2513:2006":{"crate_id":23,"path":["typenum","generated","consts","U28"],"kind":"type_alias"},"17:6620:13432":{"crate_id":17,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"10:482:24105":{"crate_id":10,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:2628:16139":{"crate_id":6,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:8547:16194":{"crate_id":6,"path":["std","net","tcp","Incoming"],"kind":"struct"},"18:13899:12694":{"crate_id":18,"path":["object","macho","Section32"],"kind":"struct"},"23:654:5747":{"crate_id":23,"path":["typenum","marker_traits","PowerOfTwo"],"kind":"trait"},"18:13024:25195":{"crate_id":18,"path":["object","read","CompressionFormat"],"kind":"enum"},"6:12328:417":{"crate_id":6,"path":["std","bool"],"kind":"primitive"},"6:8669:14893":{"crate_id":6,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:23153:14982":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"6:10595:16199":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:872:15919":{"crate_id":17,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"1:44793:150":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:40824:12267":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:5075:13408":{"crate_id":17,"path":["gimli","constants","DwMacro"],"kind":"struct"},"6:5612:16161":{"crate_id":6,"path":["std","process","ChildStdout"],"kind":"struct"},"1:5015:17318":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"6:12353:1826":{"crate_id":6,"path":["std","u128"],"kind":"primitive"},"6:9444:14924":{"crate_id":6,"path":["std","time","SystemTime"],"kind":"struct"},"18:10284:12384":{"crate_id":18,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:6588:15543":{"crate_id":17,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"18:11026:25203":{"crate_id":18,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"6:11413:13762":{"crate_id":6,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"1:44859:15236":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"18:10457:138":{"crate_id":18,"path":["object","read","any","File"],"kind":"enum"},"1:2733:202":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"5:7536:15685":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:40533:17351":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:10486:113":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"18:16069:13273":{"crate_id":18,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"19:491:15404":{"crate_id":19,"path":["memchr","cow","Imp"],"kind":"struct"},"21:0:2330":{"crate_id":21,"path":["crypto_common"],"kind":"module"},"17:7052:16057":{"crate_id":17,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"18:15734:13186":{"crate_id":18,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:4797:18043":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"5:3670:5669":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"5:3406:12095":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"7:465:13784":{"crate_id":7,"path":["libc","unix","group"],"kind":"struct"},"1:22996:15720":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"10:424:24108":{"crate_id":10,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"18:12508:12480":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:33711:17266":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:9938:801":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"7:4870:14064":{"crate_id":7,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:22621:17553":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1:44026:15800":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"24:30:5729":{"crate_id":24,"path":["block_buffer","read","ReadBuffer"],"kind":"struct"},"1:42037:15209":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:43247:6363":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"5:2298:33771":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:4396:16153":{"crate_id":6,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"7:8247:14819":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:5742:15468":{"crate_id":17,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"5:3035:15671":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:11688:15663":{"crate_id":6,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"18:14847:12929":{"crate_id":18,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:7857:13553":{"crate_id":17,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:9418:12035":{"crate_id":6,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"17:4587:13393":{"crate_id":17,"path":["gimli","constants","DwAccess"],"kind":"struct"},"18:11510:15961":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:42710:11602":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"19:735:29375":{"crate_id":19,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"18:10877:15939":{"crate_id":18,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:40755:15754":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"19:598:38647":{"crate_id":19,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:46593:15308":{"crate_id":1,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"6:1838:695":{"crate_id":6,"path":["std","env"],"kind":"module"},"1:26038:267":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:150:11985":{"crate_id":17,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"18:11557:15964":{"crate_id":18,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"1:5289:976":{"crate_id":1,"path":["core","iter"],"kind":"module"},"18:12030:15986":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:12341:737":{"crate_id":6,"path":["std","f32"],"kind":"primitive"},"6:3287:37596":{"crate_id":6,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"18:12711:137":{"crate_id":18,"path":["object","read","Error"],"kind":"struct"},"7:6379:14402":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:6466:13429":{"crate_id":17,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:8093:13591":{"crate_id":17,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"18:10759:12411":{"crate_id":18,"path":["object","read","any","SymbolTable"],"kind":"struct"},"18:13766:12672":{"crate_id":18,"path":["object","macho","FatHeader"],"kind":"struct"},"1:32186:13532":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"1:46295:15280":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"5:7461:15684":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:40808:15759":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:32217:6027":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"7:5219:14190":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"18:11743:15437":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:44294:15817":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:4431:17301":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"19:96:29366":{"crate_id":19,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"7:7348:14679":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"25:284:15583":{"crate_id":25,"path":["const_oid","parser","Parser"],"kind":"struct"},"17:6895:13467":{"crate_id":17,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:47098:11394":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:12879:16263":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"5:7389:15682":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:42323:93":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:12313:37103":{"crate_id":6,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"7:7516:14758":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:8118:15601":{"crate_id":17,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:46234:15277":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"18:9781:25184":{"crate_id":18,"path":["object","common","BinaryFormat"],"kind":"enum"},"5:2766:14946":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"12:1887:11540":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"7:6729:14581":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"5:3218:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"18:10399:12387":{"crate_id":18,"path":["object","read","util","Bytes"],"kind":"struct"},"1:2521:672":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"14:229:13696":{"crate_id":14,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:5385:12379":{"crate_id":17,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"23:9642:5630":{"crate_id":23,"path":["typenum","uint","UTerm"],"kind":"struct"},"18:14463:12801":{"crate_id":18,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:42559:97":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"7:6670:14561":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"24:61:17726":{"crate_id":24,"path":["block_buffer","sealed","Sealed"],"kind":"trait"},"1:40705:15746":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:11992:5691":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"5:7381:11540":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:2728:13345":{"crate_id":17,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"7:4909:14085":{"crate_id":7,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"18:16176:13301":{"crate_id":18,"path":["object","xcoff","FunAux64"],"kind":"struct"},"25:193:2170":{"crate_id":25,"path":["const_oid","buffer","Buffer"],"kind":"struct"},"17:7144:25126":{"crate_id":17,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:6782:25124":{"crate_id":17,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:2660:13342":{"crate_id":17,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"22:96:5717":{"crate_id":22,"path":["hybrid_array","traits","ArraySize"],"kind":"trait"},"17:5960:15491":{"crate_id":17,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:40695:133":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"7:5283:14225":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:4802:13399":{"crate_id":17,"path":["gimli","constants","DwCc"],"kind":"struct"},"18:10622:38632":{"crate_id":18,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:33856:17268":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:6788:18130":{"crate_id":6,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:1886:11982":{"crate_id":1,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"1:22983:14973":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"7:5083:14161":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:8463:12240":{"crate_id":6,"path":["std","io","util","Empty"],"kind":"struct"},"5:1073:12059":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"7:538:13829":{"crate_id":7,"path":["libc","unix","pollfd"],"kind":"struct"},"17:2374:13329":{"crate_id":17,"path":["gimli","common","Register"],"kind":"struct"},"18:16151:13293":{"crate_id":18,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"6:5765:14609":{"crate_id":6,"path":["std","process","exit"],"kind":"function"},"1:42520:90":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:22548:11414":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"18:14436:12799":{"crate_id":18,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:40455:15735":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"6:4213:18048":{"crate_id":6,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"6:5079:18088":{"crate_id":6,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"18:12683:16010":{"crate_id":18,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"1:46082:15269":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"7:6678:14563":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"19:726:12273":{"crate_id":19,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:43711:5679":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:8218:165":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"5:7664:16251":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"7:5643:14385":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:888:11540":{"crate_id":6,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:22136:5662":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"7:1490:13860":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:9164:16200":{"crate_id":6,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:47182:11399":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"18:11102:15946":{"crate_id":18,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"19:718:12270":{"crate_id":19,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"6:6026:12014":{"crate_id":6,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"18:12557:12401":{"crate_id":18,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"6:3831:18037":{"crate_id":6,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:40973:15765":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:11837:16152":{"crate_id":6,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"18:13116:12522":{"crate_id":18,"path":["object","archive","AixHeader"],"kind":"struct"},"1:41746:15195":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"18:10524:15934":{"crate_id":18,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:47235:11402":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:6456:25122":{"crate_id":17,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:43774:5680":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:5802:25117":{"crate_id":17,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"6:9707:138":{"crate_id":6,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"18:2037:15924":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:30620:11428":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"14:0:2324":{"crate_id":14,"path":["std_detect"],"kind":"module"},"23:924:17743":{"crate_id":23,"path":["typenum","private","PrivateCmp"],"kind":"trait"},"7:1565:13901":{"crate_id":7,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:3998:16152":{"crate_id":6,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:9148:14914":{"crate_id":6,"path":["std","process","ExitCode"],"kind":"struct"},"5:6954:12106":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"5:3314:15623":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"7:1653:13968":{"crate_id":7,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"7:4916:14089":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"12:1566:24188":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"18:15678:13178":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:42284:86":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:22811:14956":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:11099:12048":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"6:8618:16194":{"crate_id":6,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:43226:11847":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:426:185":{"crate_id":6,"path":["std","thread","local","LocalKey"],"kind":"struct"},"18:11574:15624":{"crate_id":18,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"18:15778:13201":{"crate_id":18,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:8223:127":{"crate_id":6,"path":["std","fs","DirBuilder"],"kind":"struct"},"7:523:13820":{"crate_id":7,"path":["libc","unix","hostent"],"kind":"struct"},"7:7429:14708":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"7:6721:14580":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"16:394:24221":{"crate_id":16,"path":["addr2line","DebugFile"],"kind":"enum"},"18:16093:13278":{"crate_id":18,"path":["object","xcoff","Symbol64"],"kind":"struct"},"6:6671:16170":{"crate_id":6,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:9317:16207":{"crate_id":6,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"4:355:2170":{"crate_id":4,"path":["digest","core_api","Buffer"],"kind":"type_alias"},"17:6433:15534":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"21:118:17778":{"crate_id":21,"path":["crypto_common","KeyIvInit"],"kind":"trait"},"6:9289:36977":{"crate_id":6,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:41890:31095":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:46887:15346":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:4835:11614":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:42079:17377":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:6263:15532":{"crate_id":17,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"18:11647:15430":{"crate_id":18,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"7:6532:14486":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"19:651:12249":{"crate_id":19,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"18:12353:15450":{"crate_id":18,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:2966:123":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"6:12329:1173":{"crate_id":6,"path":["std","never"],"kind":"primitive"},"6:10955:14927":{"crate_id":6,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"18:12478:12476":{"crate_id":18,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"6:1069:15589":{"crate_id":6,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:22626:17551":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"19:0:2329":{"crate_id":19,"path":["memchr"],"kind":"module"},"12:673:5668":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"18:11715:15435":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"6:4293:38563":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:10344:16212":{"crate_id":6,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"12:2231:15624":{"crate_id":12,"path":["hashbrown","table","HashTable"],"kind":"struct"},"17:8175:16089":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"7:7537:14772":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"18:10710:15937":{"crate_id":18,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:32216:237":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:2066:11431":{"crate_id":1,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"1:44168:15809":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:8000:16179":{"crate_id":6,"path":["std","thread","Builder"],"kind":"struct"},"1:46164:15273":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:42703:11600":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:11599:37113":{"crate_id":6,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"7:5390:14264":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:7168:14920":{"crate_id":17,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:4099:18038":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:2862:17058":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"7:6788:14602":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:22148:29443":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:7638:17328":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"25:180:12231":{"crate_id":25,"path":["const_oid","arcs","RootArcs"],"kind":"struct"},"5:5725:12092":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"5:7128:12114":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:6363:12023":{"crate_id":6,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"7:6821:14611":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:10985:37172":{"crate_id":6,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"6:943:16097":{"crate_id":6,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:6940:13473":{"crate_id":17,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:2657:112":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"18:15176:13024":{"crate_id":18,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:2727:195":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"19:754:15421":{"crate_id":19,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"18:13972:12429":{"crate_id":18,"path":["object","macho","Dylib"],"kind":"struct"},"1:12894:17417":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:13512:16268":{"crate_id":1,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"18:16165:13296":{"crate_id":18,"path":["object","xcoff","FunAux32"],"kind":"struct"},"6:9413:12034":{"crate_id":6,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"23:9019:5634":{"crate_id":23,"path":["typenum","bit","B1"],"kind":"struct"},"1:10317:11603":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:3290:36883":{"crate_id":6,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"5:1180:33877":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"18:16105:13280":{"crate_id":18,"path":["object","xcoff","FileAux32"],"kind":"struct"},"6:2460:11403":{"crate_id":6,"path":["std","fs","metadata"],"kind":"function"},"1:13649:16269":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:7528:15590":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"18:15646:13163":{"crate_id":18,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:45995:15256":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:8673:149":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:5826:220":{"crate_id":6,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"6:12337:1810":{"crate_id":6,"path":["std","tuple"],"kind":"primitive"},"6:8187:14846":{"crate_id":6,"path":["std","fs","FileTimes"],"kind":"struct"},"6:11019:37108":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:40359:15189":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"19:680:15408":{"crate_id":19,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:44325:15821":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:7533:2210":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:2734:16140":{"crate_id":6,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:2768:13347":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:13779:115":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"17:7559:15594":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:11312:5676":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"18:14752:12846":{"crate_id":18,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:6120:25120":{"crate_id":17,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"18:11524:15962":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:47078:6145":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:23164:14983":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"19:623:38646":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:1934:1682":{"crate_id":1,"path":["core","mem","size_of"],"kind":"function"},"1:23131:14980":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"5:2112:16240":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:46443:15302":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:12347:902":{"crate_id":6,"path":["std","i64"],"kind":"primitive"},"18:10185:12381":{"crate_id":18,"path":["object","endian","U16Bytes"],"kind":"struct"},"7:6597:14531":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:7098:15584":{"crate_id":17,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:42696:11601":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:42401:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:2548:13337":{"crate_id":17,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:42245:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"4:557:2180":{"crate_id":4,"path":["digest","InvalidOutputSize"],"kind":"struct"},"5:3750:12059":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:42991:31904":{"crate_id":1,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"23:653:5777":{"crate_id":23,"path":["typenum","marker_traits","TypeArray"],"kind":"trait"},"6:10755:12045":{"crate_id":6,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"5:5466:17832":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:40714:15748":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"12:1160:16111":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"18:15078:13000":{"crate_id":18,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:6758:13455":{"crate_id":17,"path":["gimli","read","line","LineRow"],"kind":"struct"},"6:3428:16147":{"crate_id":6,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"10:502:13765":{"crate_id":10,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:44400:15824":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:5188:435":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"17:6606:15550":{"crate_id":17,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:43691:5666":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"18:9984:25189":{"crate_id":18,"path":["object","common","RelocationEncoding"],"kind":"enum"},"18:10155:12379":{"crate_id":18,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:2684:13343":{"crate_id":17,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"12:1917:15622":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:2998:13375":{"crate_id":17,"path":["gimli","common","DwoId"],"kind":"struct"},"18:10218:12382":{"crate_id":18,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:2308:16138":{"crate_id":6,"path":["std","fs","DirEntry"],"kind":"struct"},"6:10913:15649":{"crate_id":6,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"18:13959:12703":{"crate_id":18,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:6543:15542":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"18:12251:15999":{"crate_id":18,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"6:9322:16208":{"crate_id":6,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"7:8253:14820":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"18:12887:15459":{"crate_id":18,"path":["object","read","ObjectMap"],"kind":"struct"},"18:11537:15963":{"crate_id":18,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:10760:12004":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"6:9105:16199":{"crate_id":6,"path":["std","process","CommandArgs"],"kind":"struct"},"18:11405:15958":{"crate_id":18,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:3018:16252":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"1:4720:12116":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"7:517:13817":{"crate_id":7,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:13822:12139":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"18:11016:15941":{"crate_id":18,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"5:7723:12095":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"5:4278:11982":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:11391:5674":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"5:5930:12076":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:21730:14955":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"18:10044:25190":{"crate_id":18,"path":["object","common","SegmentFlags"],"kind":"enum"},"18:11042:15942":{"crate_id":18,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"4:435:2342":{"crate_id":4,"path":["digest","digest","DynDigestWithOid"],"kind":"trait"},"18:10818:15938":{"crate_id":18,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"6:1916:16133":{"crate_id":6,"path":["std","env","ArgsOs"],"kind":"struct"},"6:9222:18134":{"crate_id":6,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:40838:15761":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:44851:16287":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"7:6664:14558":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:8226:25131":{"crate_id":17,"path":["gimli","read","value","ValueType"],"kind":"enum"},"25:87:2003":{"crate_id":25,"path":["const_oid","traits","AssociatedOid"],"kind":"trait"},"18:12076:15989":{"crate_id":18,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:3210:17277":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"1:40848:15762":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"18:12225:15997":{"crate_id":18,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"7:5382:14259":{"crate_id":7,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:22443:17556":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"6:6347:12020":{"crate_id":6,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"4:411:2343":{"crate_id":4,"path":["digest","digest","DynDigest"],"kind":"trait"},"1:4651:16256":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"25:255:137":{"crate_id":25,"path":["const_oid","error","Error"],"kind":"enum"},"17:6442:15535":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"18:15281:13048":{"crate_id":18,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:5307:13410":{"crate_id":17,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:43469:5699":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:8051:17946":{"crate_id":6,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:5768:18117":{"crate_id":6,"path":["std","process","Termination"],"kind":"trait"},"10:0:2320":{"crate_id":10,"path":["miniz_oxide"],"kind":"module"},"12:2352:16107":{"crate_id":12,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"12:2383:5668":{"crate_id":12,"path":["hashbrown","table","Iter"],"kind":"struct"},"7:1559:13899":{"crate_id":7,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:43673:5667":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"18:3473:15930":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:9777:91":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:43803:5682":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"6:2225:128":{"crate_id":6,"path":["std","ffi","os_str","Display"],"kind":"struct"},"6:11753:12051":{"crate_id":6,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"7:5181:14170":{"crate_id":7,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:6560:13356":{"crate_id":17,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"18:13455:12595":{"crate_id":18,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"7:5489:14320":{"crate_id":7,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"6:8250:16187":{"crate_id":6,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:9343:36953":{"crate_id":6,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:6648:15552":{"crate_id":17,"path":["gimli","read","line","LineRows"],"kind":"struct"},"6:12297:38163":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:2808:13349":{"crate_id":17,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"7:6409:14427":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"5:6771:12059":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"18:12089:12459":{"crate_id":18,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:22705:15709":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"7:570:13845":{"crate_id":7,"path":["libc","unix","tms"],"kind":"struct"},"12:742:16098":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:42012:5668":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"7:5329:14241":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"17:6976:13476":{"crate_id":17,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:12873:17411":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"17:2788:13348":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:7306:38627":{"crate_id":17,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"21:125:17780":{"crate_id":21,"path":["crypto_common","InnerIvInit"],"kind":"trait"},"6:2315:17982":{"crate_id":6,"path":["std","fs","read_to_string"],"kind":"function"},"12:1676:11994":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"7:5260:14211":{"crate_id":7,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"18:11547:12321":{"crate_id":18,"path":["object","read","elf","note","Note"],"kind":"struct"},"6:1891:16131":{"crate_id":6,"path":["std","env","SplitPaths"],"kind":"struct"},"7:7467:14720":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:39699:15059":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"6:7918:12039":{"crate_id":6,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"18:11354:15956":{"crate_id":18,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:2537:11415":{"crate_id":1,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"}},"external_crates":{"26":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"23":{"name":"typenum","html_root_url":"https://docs.rs/typenum/1.17.0/"},"20":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"const_oid","html_root_url":null},"22":{"name":"hybrid_array","html_root_url":null},"19":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"digest","html_root_url":null},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"27":{"name":"cpufeatures","html_root_url":null},"24":{"name":"block_buffer","html_root_url":null},"21":{"name":"crypto_common","html_root_url":null},"18":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"6":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":29}