{"root":"0:0:1727","crate_version":"0.10.7","includes_private":false,"index":{"b:24:1171-0:127:1701":{"id":"b:24:1171-0:127:1701","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.16.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"24:1168:5428","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1701","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["24:1173:186"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:683:27913":{"id":"5:683:27913","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12152:32144":{"id":"1:12152:32144","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"1:12150:32143"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2557:128":{"id":"1:2557:128","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32169:6072","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"1:12270:16068":{"id":"1:12270:16068","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67:1864":{"id":"0:67:1864","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[102,4],"end":[102,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Eager","id":"25:77:1843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"1:12246:32172":{"id":"1:12246:32172","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:11991:420","self::pattern":"1:11848:16694"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11853:15589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12273:16577":{"id":"1:12273:16577","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4539:16577"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:43936:15056","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12168:32148":{"id":"1:12168:32148","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"6:11997:1418","crate::ops::IndexMut":"1:2984:16550","str::slice_unchecked":"1:12167:32147"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12226:32163":{"id":"1:12226:32163","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:11848:16694","`DoubleEndedIterator`":"1:7306:121","prim@char":"6:11991:420","str::matches":"1:12223:1964"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43850:15137","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11853:15589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11853:15589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11868:16700","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2539-0:127:1701":{"id":"b:1:2539-0:127:1701","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2516:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2513:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1701","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2542:11153"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12214:32160":{"id":"1:12214:32160","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"6:11991:420","str::splitn":"1:12211:32159","self::pattern":"1:11848:16694"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43750:5336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11853:15589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11853:15589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11868:16700","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12271:32179":{"id":"1:12271:32179","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4538:32179"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:43927:15062","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65:1863":{"id":"0:65:1863","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[98,4],"end":[98,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"24:6316:5287","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5287","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5287","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5287","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5287","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5287","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5287","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5287","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"24:6363:5288","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"24:5724:5292","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5291","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5291","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5291","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5291","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5291","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5291","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5291","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"a:1:2740:5730-0:127:1701":{"id":"a:1:2740:5730-0:127:1701","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2740:5730","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1701","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:135":{"id":"0:135","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[89,9],"end":[89,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2265:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:136:424"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:47:1863":{"id":"0:47:1863","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[26,4],"end":[26,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"24:6316:5287","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5287","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5287","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5287","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5287","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5287","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5287","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"24:6363:5288","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"24:5724:5292","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5291","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5291","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5291","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5291","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5291","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5291","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"0:74:949":{"id":"0:74:949","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[121,4],"end":[131,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["output_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:41811:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"InvalidOutputSize","id":"4:522:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12169:32149":{"id":"1:12169:32149","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"1:12170:32150"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2558:1498":{"id":"1:2558:1498","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:41811:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2523:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46":{"id":"0:46","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[25,0],"end":[27,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"22:22:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1701","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:47:1863"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8381:16662-0:132:1702":{"id":"a:1:8381:16662-0:132:1702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8381:16662","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:5:680-0:132:1702":{"id":"b:5:680-0:132:1702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2265:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:15005","5:683:27913","5:684:27914"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[113,0],"end":[115,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"22:33:1849","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:71:1867"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[95,0],"end":[95,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:357:1856","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:77":{"id":"0:77","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[145,0],"end":[150,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"22:46:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:78:1886"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:682:15005":{"id":"5:682:15005","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"b:1:2249-0:132:1702":{"id":"b:1:2249-0:132:1702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:5729","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2243:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2251:1920"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12156:32146":{"id":"1:12156:32146","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12150:32143":{"id":"1:12150:32143","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2543-0:127:1701":{"id":"b:1:2543-0:127:1701","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2516:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1701","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2545:700"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:127:1701":{"id":"0:127:1701","crate_id":0,"name":"Sha256VarCore","span":{"filename":"src/core_api.rs","begin":[18,0],"end":[21,1]},"visibility":"public","docs":"Core block-level SHA-256 hasher with variable output size.\n\nSupports initialization only for 28 and 32 byte output sizes,\ni.e. 224 and 256 bits respectively.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:2683:220-0:127:1701","a:1:2700:228-0:127:1701","a:1:2740:5730-0:127:1701","a:1:8381:16662-0:127:1701","a:1:8382:16661-0:127:1701","b:1:2252-0:127:1701","b:1:2554-0:127:1701","b:1:3319-0:127:1701","b:1:2549-0:127:1701","b:1:2539-0:127:1701","b:1:2249-0:127:1701","b:1:2543-0:127:1701","b:5:680-0:127:1701","b:24:1171-0:127:1701","0:52","0:46","0:45","0:59","0:54","0:48","0:130","0:50","0:61"]}}},"b:1:2554-0:127:1701":{"id":"b:1:2554-0:127:1701","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2513:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2523:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1701","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2557:128","1:2558:1498"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2549-0:127:1701":{"id":"b:1:2549-0:127:1701","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2523:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2519:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1701","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2552:128","1:2553:1499"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2683:220-0:132:1702":{"id":"a:1:2683:220-0:132:1702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12167:32147":{"id":"1:12167:32147","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"6:11997:1418","str::slice_mut_unchecked":"1:12168:32148","crate::ops::Index":"1:2980:16549"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12161:15845":{"id":"1:12161:15845","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41669:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41667:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9942:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9942:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12155:32145":{"id":"1:12155:32145","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11408:16701"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12188:11198":{"id":"1:12188:11198","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41669:179","prim@char":"6:11991:420","self::pattern":"1:11848:16694"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41667:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11853:15589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12205:32157":{"id":"1:12205:32157","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:11848:16694","str::split":"1:12196:32155","prim@char":"6:11991:420","`DoubleEndedIterator`":"1:7306:121","str::rsplit_terminator":"1:12208:32158"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43678:15129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11853:15589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12237:32167":{"id":"1:12237:32167","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3319-0:127:1701":{"id":"b:1:3319-0:127:1701","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:5729","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1701","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3321:1512"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8382:16661-0:132:1702":{"id":"a:1:8382:16661-0:132:1702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8382:16661","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:132:1702":{"id":"0:132:1702","crate_id":0,"name":"Sha512VarCore","span":{"filename":"src/core_api.rs","begin":[90,0],"end":[93,1]},"visibility":"public","docs":"Core block-level SHA-512 hasher with variable output size.\n\nSupports initialization only for 28, 32, 48, and 64 byte output sizes,\ni.e. 224, 256, 384, and 512 bits respectively.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:2683:220-0:132:1702","a:1:2700:228-0:132:1702","a:1:2740:5730-0:132:1702","a:1:8381:16662-0:132:1702","a:1:8382:16661-0:132:1702","b:1:2252-0:132:1702","b:1:2554-0:132:1702","b:1:3319-0:132:1702","b:1:2549-0:132:1702","b:1:2539-0:132:1702","b:1:2249-0:132:1702","b:1:2543-0:132:1702","b:5:680-0:132:1702","b:24:1171-0:132:1702","0:72","0:68","0:64","0:63","0:70","0:79","0:66","0:77","0:135"]}}},"0:6-4:358:1682":{"id":"0:6-4:358:1682","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[55,23],"end":[55,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"digest::Digest","name":"Digest","id":"4:358:1682","glob":false}}},"1:12148:11160":{"id":"1:12148:11160","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:78:1886":{"id":"0:78:1886","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[147,4],"end":[149,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9250:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9239:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:57:1873":{"id":"0:57:1873","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[60,4],"end":[68,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Buffer","id":"4:328:1847","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Output","id":"22:16:186","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12175:29762":{"id":"1:12175:29762","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12174:29758"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:43911:15141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12177:32152":{"id":"1:12177:32152","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:43892:15139","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:680-0:127:1701":{"id":"b:5:680-0:127:1701","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2265:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1701","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:15005","5:683:27913","5:684:27914"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12178:29763":{"id":"1:12178:29763","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:43920:15142","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5531:16064":{"id":"5:5531:16064","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12270:16068"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2539-0:132:1702":{"id":"b:1:2539-0:132:1702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2516:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2513:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2542:11153"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12220:32162":{"id":"1:12220:32162","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41667:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11853:15589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11853:15589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11868:16700","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:61":{"id":"0:61","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[78,0],"end":[83,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9275:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1701","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:62:674"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12171:15143":{"id":"1:12171:15143","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"6:11991:420"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43598:15123","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69:1865":{"id":"0:69:1865","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[107,4],"end":[110,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"Block","id":"22:12:1845","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5511":{"id":"5:5511","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5512:32857","5:5513:11108","5:5516:32858","5:5519:32859","5:5527:32860","5:5528:32861","5:5529:16640","5:5530:16063","5:5531:16064"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12266:16061":{"id":"1:12266:16061","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12182:32153":{"id":"1:12182:32153","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"6:11991:420","self::pattern":"1:11848:16694"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11853:15589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[17,9],"end":[17,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2265:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1701","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:131:424"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3319-0:132:1702":{"id":"b:1:3319-0:132:1702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:5729","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3317:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3321:1512"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12208:32158":{"id":"1:12208:32158","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:11848:16694","str::split":"1:12196:32155","prim@char":"6:11991:420","str::split_terminator":"1:12205:32157"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43696:15130","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11853:15589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11853:15589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11868:16700","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12199:29754":{"id":"1:12199:29754","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"6:11991:420","self::pattern":"1:11848:16694"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:11664:5355","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11853:15589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:100:1720":{"id":"0:100:1720","crate_id":0,"name":"Sha512_224","span":{"filename":"src/lib.rs","begin":[90,0],"end":[90,92]},"visibility":"public","docs":"SHA-512/224 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:492:1693","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:473:1694","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U28","id":"24:2508:1688","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512_224","id":"0:440:1711","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:0:1727":{"id":"0:0:1727","crate_id":0,"name":"sha2","span":{"filename":"src/lib.rs","begin":[1,0],"end":[96,84]},"visibility":"public","docs":"An implementation of the [SHA-2][1] cryptographic hash algorithms.\n\nThere are 6 standard algorithms specified in the SHA-2 standard: [`Sha224`],\n[`Sha256`], [`Sha512_224`], [`Sha512_256`], [`Sha384`], and [`Sha512`].\n\nAlgorithmically, there are only 2 core algorithms: SHA-256 and SHA-512.\nAll other algorithms are just applications of these with different initial\nhash values, and truncated to different digest bit lengths. The first two\nalgorithms in the list are based on SHA-256, while the last four are based\non SHA-512.\n\n# Usage\n\n```rust\nuse hex_literal::hex;\nuse sha2::{Sha256, Sha512, Digest};\n\n// create a Sha256 object\nlet mut hasher = Sha256::new();\n\n// write input message\nhasher.update(b\"hello world\");\n\n// read hash digest and consume hasher\nlet result = hasher.finalize();\n\nassert_eq!(result[..], hex!(\"\n    b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\n\")[..]);\n\n// same for Sha512\nlet mut hasher = Sha512::new();\nhasher.update(b\"hello world\");\nlet result = hasher.finalize();\n\nassert_eq!(result[..], hex!(\"\n    309ecc489c12d6eb4cc40f50c902f2b4d0ed77ee511a7c7a9bcd3ca86d4cd86f\n    989dd35bc5ff499670da34255b45b0cfd830e81f605dcf7dc5542e93ae9cd76f\n\")[..]);\n```\n\nAlso see [RustCrypto/hashes][2] readme.\n\n[1]: https://en.wikipedia.org/wiki/SHA-2\n[2]: https://github.com/RustCrypto/hashes","links":{"`Sha256`":"0:99:1718","`Sha224`":"0:98:1716","`Sha512`":"0:103:1726","`Sha384`":"0:102:1724","`Sha512_256`":"0:101:1722","`Sha512_224`":"0:100:1720"},"attrs":["#![no_std]","#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\",\nhtml_favicon_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\")]","#![warn(missing_docs, rust_2018_idioms)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:5-4:0:1681","0:6-4:358:1682","0:96-0:127:1701","0:97-0:132:1702","0:98:1716","0:99:1718","0:100:1720","0:101:1722","0:102:1724","0:103:1726"],"is_stripped":false}}},"1:12223:1964":{"id":"1:12223:1964","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:11848:16694","`DoubleEndedIterator`":"1:7306:121","prim@char":"6:11991:420","str::rmatches":"1:12226:32163"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43832:15136","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11853:15589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:64":{"id":"0:64","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[97,0],"end":[99,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"22:22:1846","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:65:1863"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2700:228-0:127:1701":{"id":"a:1:2700:228-0:127:1701","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1701","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:50":{"id":"0:50","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[33,0],"end":[39,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:330:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1701","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:51:1865"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2252-0:127:1701":{"id":"b:1:2252-0:127:1701","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:5729","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2246:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1701","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2254:27908"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:3321:1512":{"id":"1:3321:1512","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39490:14466","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51:1865":{"id":"0:51:1865","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[35,4],"end":[38,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"Block","id":"22:12:1845","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12268:16066":{"id":"1:12268:16066","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5529:16640":{"id":"5:5529:16640","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7451:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2254:27908":{"id":"1:2254:27908","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2249-0:127:1701":{"id":"b:1:2249-0:127:1701","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:5729","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2243:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1701","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2251:1920"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5527:32860":{"id":"5:5527:32860","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7451:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12173:14994":{"id":"1:12173:14994","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43614:11959","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62:674":{"id":"0:62:674","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[80,4],"end":[82,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9250:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9239:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:101:1722":{"id":"0:101:1722","crate_id":0,"name":"Sha512_256","span":{"filename":"src/lib.rs","begin":[92,0],"end":[92,92]},"visibility":"public","docs":"SHA-512/256 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:492:1693","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:473:1694","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U32","id":"24:2520:1689","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512_256","id":"0:456:1713","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:98:1716":{"id":"0:98:1716","crate_id":0,"name":"Sha224","span":{"filename":"src/lib.rs","begin":[86,0],"end":[86,84]},"visibility":"public","docs":"SHA-224 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:492:1693","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:473:1694","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1701","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U28","id":"24:2508:1688","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha224","id":"0:424:1709","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:12176:32151":{"id":"1:12176:32151","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:43882:15138","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:102:1724":{"id":"0:102:1724","crate_id":0,"name":"Sha384","span":{"filename":"src/lib.rs","begin":[94,0],"end":[94,84]},"visibility":"public","docs":"SHA-384 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:492:1693","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:473:1694","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U48","id":"24:2568:1690","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha384","id":"0:392:1705","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:12192:11159":{"id":"1:12192:11159","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41669:179","prim@char":"6:11991:420","self::pattern":"1:11848:16694"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41667:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11853:15589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11853:15589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11868:16700","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8382:16661-0:127:1701":{"id":"a:1:8382:16661-0:127:1701","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8382:16661","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1701","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12147:821":{"id":"1:12147:821","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"6:11991:420"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12264:32178":{"id":"1:12264:32178","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:11809:127","`FromStr`":"1:11808:16381"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41811:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:11808:16381","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:11808:16381","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12258:32176":{"id":"1:12258:32176","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:11991:420","self::pattern":"1:11848:16694"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11853:15589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12239:32168":{"id":"1:12239:32168","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2683:220-0:127:1701":{"id":"a:1:2683:220-0:127:1701","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2683:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1701","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12241:32169":{"id":"1:12241:32169","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2545:700":{"id":"1:2545:700","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:1868":{"id":"0:73:1868","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[118,4],"end":[118,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"TruncSide","id":"4:512:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}}},"0:72":{"id":"0:72","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[117,0],"end":[143,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:341:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:73:1868","0:74:949","0:75:1873"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12232:32165":{"id":"1:12232:32165","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:11848:16694","`DoubleEndedIterator`":"1:7306:121","prim@char":"6:11991:420","str::match_indices":"1:12229:32164"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43796:15134","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11853:15589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11853:15589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11868:16700","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12157:315":{"id":"1:12157:315","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12158:314","`u8`":"6:12008:1521"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2554-0:132:1702":{"id":"b:1:2554-0:132:1702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2513:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2523:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2557:128","1:2558:1498"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12269:16067":{"id":"1:12269:16067","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12146":{"id":"1:12146","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12147:821","1:12148:11160","1:12149:32142","1:12150:32143","1:12152:32144","1:12155:32145","1:12156:32146","1:12157:315","1:12158:314","1:12159:5878","1:12161:15845","1:12163:15846","1:12165:15847","1:12167:32147","1:12168:32148","1:12169:32149","1:12170:32150","1:12171:15143","1:12172:15152","1:12173:14994","1:12174:29758","1:12175:29762","1:12176:32151","1:12177:32152","1:12178:29763","1:12179:30800","1:12182:32153","1:12185:32154","1:12188:11198","1:12192:11159","1:12196:32155","1:12199:29754","1:12202:32156","1:12205:32157","1:12208:32158","1:12211:32159","1:12214:32160","1:12217:32161","1:12220:32162","1:12223:1964","1:12226:32163","1:12229:32164","1:12232:32165","1:12235:32166","1:12237:32167","1:12239:32168","1:12241:32169","1:12242:32170","1:12243:32171","1:12246:32172","1:12249:32173","1:12252:32174","1:12255:32175","1:12258:32176","1:12261:32177","1:12264:32178","1:12266:16061","1:12267:16062","1:12268:16066","1:12269:16067","1:12270:16068","1:12271:32179","1:12273:16577","1:12274:32180"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:99:1718":{"id":"0:99:1718","crate_id":0,"name":"Sha256","span":{"filename":"src/lib.rs","begin":[88,0],"end":[88,84]},"visibility":"public","docs":"SHA-256 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:492:1693","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:473:1694","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1701","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U32","id":"24:2520:1689","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha256","id":"0:376:1703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:55:1868":{"id":"0:55:1868","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[46,4],"end":[46,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"TruncSide","id":"4:512:1850","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}}},"0:131:424":{"id":"0:131:424","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[17,9],"end":[17,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1701","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12243:32171":{"id":"1:12243:32171","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"6:11991:420","self::pattern":"1:11848:16694"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11853:15589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11853:15589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:11873:16699","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:75:1873":{"id":"0:75:1873","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[134,4],"end":[142,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Buffer","id":"4:328:1847","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Output","id":"22:16:186","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:103:1726":{"id":"0:103:1726","crate_id":0,"name":"Sha512","span":{"filename":"src/lib.rs","begin":[96,0],"end":[96,84]},"visibility":"public","docs":"SHA-512 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:492:1693","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:473:1694","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U64","id":"24:2616:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512","id":"0:408:1707","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:136:424":{"id":"0:136:424","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[89,9],"end":[89,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5512:32857":{"id":"5:5512:32857","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2008","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7184:14359","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2008","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7184:14359","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2740:5730-0:132:1702":{"id":"a:1:2740:5730-0:132:1702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2740:5730","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12211:32159":{"id":"1:12211:32159","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"6:11991:420","self::pattern":"1:11848:16694","str::rsplitn":"1:12214:32160"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43732:5340","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11853:15589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12249:32173":{"id":"1:12249:32173","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:11991:420","self::pattern":"1:11848:16694"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41667:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11853:15589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2543-0:132:1702":{"id":"b:1:2543-0:132:1702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2516:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2545:700"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:96-0:127:1701":{"id":"0:96-0:127:1701","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[76,19],"end":[76,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"core_api::Sha256VarCore","name":"Sha256VarCore","id":"0:127:1701","glob":false}}},"1:12172:15152":{"id":"1:12172:15152","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"6:11991:420"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43604:15124","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5516:32858":{"id":"5:5516:32858","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7451:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11853:15589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71:1867":{"id":"0:71:1867","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[114,4],"end":[114,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"24:6316:5287","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5287","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5287","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5287","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5287","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5287","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5287","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"24:6363:5288","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"24:5724:5292","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5291","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5291","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5291","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5291","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5291","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5291","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"1:12159:5878":{"id":"1:12159:5878","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41669:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41667:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9942:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9942:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68":{"id":"0:68","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[105,0],"end":[111,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:330:1851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:69:1865"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12165:15847":{"id":"1:12165:15847","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9942:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9942:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12267:16062":{"id":"1:12267:16062","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39698:28123","Self::is_ascii":"1:12266:16061"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41667:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39698:28123","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5530:16063":{"id":"5:5530:16063","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12269:16067"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:54":{"id":"0:54","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[45,0],"end":[69,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:341:1852","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1701","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:55:1868","0:56:949","0:57:1873"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:80:674":{"id":"0:80:674","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[154,4],"end":[156,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9250:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9239:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12252:32174":{"id":"1:12252:32174","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:11991:420","self::pattern":"1:11848:16694"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41667:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11853:15589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11853:15589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11868:16700","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60:1886":{"id":"0:60:1886","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[73,4],"end":[75,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9250:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9239:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12170:32150":{"id":"1:12170:32150","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"1:12169:32149"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5519:32859":{"id":"5:5519:32859","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7451:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"24:1173:186":{"id":"24:1173:186","crate_id":24,"name":"Output","span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.16.0/src/type_operators.rs","begin":[35,4],"end":[35,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"5:5528:32861":{"id":"5:5528:32861","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2008","`String`":"5:7451:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2008","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7184:14359","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5513:11108":{"id":"5:5513:11108","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7451:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7451:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11853:15589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2700:228-0:132:1702":{"id":"a:1:2700:228-0:132:1702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2700:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12158:314":{"id":"1:12158:314","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"6:12008:1521"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2549-0:132:1702":{"id":"b:1:2549-0:132:1702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2523:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2519:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2552:128","1:2553:1499"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12196:32155":{"id":"1:12196:32155","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:11848:16694","`DoubleEndedIterator`":"1:7306:121","prim@char":"6:11991:420","str::split_whitespace":"1:12174:29758","str::rsplit":"1:12202:32156"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43628:5338","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11853:15589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:24:1171-0:132:1702":{"id":"b:24:1171-0:132:1702","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.16.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"24:1168:5428","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["24:1173:186"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12229:32164":{"id":"1:12229:32164","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:11848:16694","`DoubleEndedIterator`":"1:7306:121","prim@char":"6:11991:420","str::rmatch_indices":"1:12232:32165"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43778:15133","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11853:15589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53:1867":{"id":"0:53:1867","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[42,4],"end":[42,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"24:6316:5287","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5287","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5287","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5287","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5287","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5287","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"24:6363:5288","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"24:5724:5292","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5291","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5291","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5291","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5291","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5291","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"1:2251:1920":{"id":"1:2251:1920","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:684:27914":{"id":"5:684:27914","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2252-0:132:1702":{"id":"b:1:2252-0:132:1702","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2690:5729","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2246:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2254:27908"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12174:29758":{"id":"1:12174:29758","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12175:29762"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:43902:15140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12242:32170":{"id":"1:12242:32170","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12274:32180":{"id":"1:12274:32180","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4536:32180"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:43945:15061","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:97-0:132:1702":{"id":"0:97-0:132:1702","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[76,34],"end":[76,47]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"core_api::Sha512VarCore","name":"Sha512VarCore","id":"0:132:1702","glob":false}}},"0:56:949":{"id":"0:56:949","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[49,4],"end":[57,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["output_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:41811:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"InvalidOutputSize","id":"4:522:1857","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:66":{"id":"0:66","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[101,0],"end":[103,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:332:1848","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:67:1864"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12149:32142":{"id":"1:12149:32142","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5-4:0:1681":{"id":"0:5-4:0:1681","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[55,17],"end":[55,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"digest","name":"digest","id":"4:0:1681","glob":false}}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[41,0],"end":[43,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"22:33:1849","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1701","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:53:1867"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:59":{"id":"0:59","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[71,0],"end":[76,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"22:46:1844","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1701","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:60:1886"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8381:16662-0:127:1701":{"id":"a:1:8381:16662-0:127:1701","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8381:16662","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1701","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12185:32154":{"id":"1:12185:32154","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"6:11991:420","self::pattern":"1:11848:16694"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11853:15589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11853:15589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11868:16700","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:45":{"id":"0:45","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[23,0],"end":[23,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:357:1856","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1701","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12235:32166":{"id":"1:12235:32166","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12255:32175":{"id":"1:12255:32175","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:11991:420","self::pattern":"1:11848:16694"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11853:15589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11853:15589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11868:16700","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12261:32177":{"id":"1:12261:32177","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:11991:420","self::pattern":"1:11848:16694"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11853:15589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11853:15589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11868:16700","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2542:11153":{"id":"1:2542:11153","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2516:133"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:49:1864":{"id":"0:49:1864","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[30,4],"end":[30,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Eager","id":"25:77:1843","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"1:2552:128":{"id":"1:2552:128","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2523:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"1:2553:1499":{"id":"1:2553:1499","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41811:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2523:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12202:32156":{"id":"1:12202:32156","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:11848:16694","`DoubleEndedIterator`":"1:7306:121","prim@char":"6:11991:420","str::split":"1:12196:32155"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43646:5342","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11853:15589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11853:15589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11868:16700","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:48":{"id":"0:48","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[29,0],"end":[31,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:332:1848","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1701","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:49:1864"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:79":{"id":"0:79","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[152,0],"end":[157,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9275:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1702","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:80:674"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12217:32161":{"id":"1:12217:32161","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41667:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11853:15589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12179:30800":{"id":"1:12179:30800","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"6:11991:420","self::pattern":"1:11848:16694"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11853:15589","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12163:15846":{"id":"1:12163:15846","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9942:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9942:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"6:8280:14970":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"7:4854:13725":{"crate_id":7,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"7:1702:13458":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:9284:11224":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"6:4736:17344":{"crate_id":6,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"6:8189:15072":{"crate_id":6,"path":["std","io","Chain"],"kind":"struct"},"7:4754:13678":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"7:5849:13912":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:45915:14654":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"4:531:2007":{"crate_id":4,"path":["digest","InvalidBufferSize"],"kind":"struct"},"1:9539:11434":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:26044:14392":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"22:33:1849":{"crate_id":22,"path":["crypto_common","OutputSizeUser"],"kind":"trait"},"6:9146:14979":{"crate_id":6,"path":["std","time","SystemTimeError"],"kind":"struct"},"8:0:1565":{"crate_id":8,"path":["unwind"],"kind":"module"},"6:3994:17331":{"crate_id":6,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:7915:15517":{"crate_id":6,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:3179:35935":{"crate_id":6,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"15:40:12116":{"crate_id":15,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"18:9977:15279":{"crate_id":18,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:7073:23854":{"crate_id":17,"path":["gimli","read","op","DieReference"],"kind":"enum"},"7:6726:14127":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"18:10499:14772":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"18:13830:12604":{"crate_id":18,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:44660:15184":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"7:4723:13664":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:43646:5342":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"19:609:15255":{"crate_id":19,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"18:9223:11958":{"crate_id":18,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:3744:12852":{"crate_id":17,"path":["gimli","constants","DwSect"],"kind":"struct"},"6:4311:15486":{"crate_id":6,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"19:515:11831":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:48094:11069":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:8219:15138":{"crate_id":6,"path":["std","io","Lines"],"kind":"struct"},"18:9153:11956":{"crate_id":18,"path":["object","endian","I16Bytes"],"kind":"struct"},"23:123:17025":{"crate_id":23,"path":["generic_array","arr","AddLength"],"kind":"trait"},"1:2510:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"6:6424:15503":{"crate_id":6,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:21280:16749":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"18:9706:15280":{"crate_id":18,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"18:12354:12240":{"crate_id":18,"path":["object","macho","FatArch32"],"kind":"struct"},"17:4441:12860":{"crate_id":17,"path":["gimli","constants","DwAte"],"kind":"struct"},"18:13043:12367":{"crate_id":18,"path":["object","macho","IdentCommand"],"kind":"struct"},"5:7284:11165":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:41743:11165":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:39525:14467":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"7:4695:13651":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:30381:5447":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"24:2392:17032":{"crate_id":24,"path":["typenum","sealed","Sealed"],"kind":"trait"},"24:1276:5391":{"crate_id":24,"path":["typenum","type_operators","Gcd"],"kind":"trait"},"1:46877:14678":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:12493:192":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"12:1501:22919":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"12:798:15432":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"18:10339:15314":{"crate_id":18,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:634:15455":{"crate_id":6,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"7:4872:13736":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"6:8307:14302":{"crate_id":6,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"6:11265:14989":{"crate_id":6,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:2152:591":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"5:5977:17137":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:2352:12799":{"crate_id":17,"path":["gimli","common","Register"],"kind":"struct"},"1:40128:28291":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"4:332:1848":{"crate_id":4,"path":["digest","core_api","BufferKindUser"],"kind":"trait"},"6:6536:17424":{"crate_id":6,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"15:215:14944":{"crate_id":15,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"16:327:22946":{"crate_id":16,"path":["addr2line","RangeAttributes"],"kind":"struct"},"18:12727:12296":{"crate_id":18,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:7584:15420":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"18:11852:12129":{"crate_id":18,"path":["object","elf","SectionHeader64"],"kind":"struct"},"6:10775:14256":{"crate_id":6,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"5:6771:11682":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:7539:12840":{"crate_id":17,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:40352:15595":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"17:7025:14919":{"crate_id":17,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:8561:14976":{"crate_id":6,"path":["std","path","StripPrefixError"],"kind":"struct"},"24:2568:1690":{"crate_id":24,"path":["typenum","generated","consts","U48"],"kind":"typedef"},"17:6531:11584":{"crate_id":17,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"6:8212:5338":{"crate_id":6,"path":["std","io","Split"],"kind":"struct"},"6:11991:420":{"crate_id":6,"path":["std","char"],"kind":"primitive"},"6:6188:15502":{"crate_id":6,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"4:160:1695":{"crate_id":4,"path":["digest","impl_oid_carrier"],"kind":"macro"},"18:14341:12761":{"crate_id":18,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"6:9068:14334":{"crate_id":6,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"7:5793:13886":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:44618:161":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"6:11136:14348":{"crate_id":6,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"1:9491:141":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"20:0:1041":{"crate_id":20,"path":["panic_unwind"],"kind":"module"},"1:48071:11068":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"6:1557:11667":{"crate_id":6,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:22113:28292":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:41499:14603":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"18:0:1994":{"crate_id":18,"path":["object"],"kind":"module"},"6:11957:36127":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:47919:14691":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:42948:145":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"12:1838:14955":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:4785:12870":{"crate_id":17,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:4144:15026":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"7:1631:13418":{"crate_id":7,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"18:11832:12119":{"crate_id":18,"path":["object","elf","SectionHeader32"],"kind":"struct"},"7:119:17521":{"crate_id":7,"path":["libc","unix","FILE"],"kind":"enum"},"7:7546:14238":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:48018:11065":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"7:562:13309":{"crate_id":7,"path":["libc","unix","linger"],"kind":"struct"},"1:40484:15084":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:551:15451":{"crate_id":6,"path":["std","thread","JoinHandle"],"kind":"struct"},"18:11109:14785":{"crate_id":18,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:21621:5329":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:42939:11435":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"5:3570:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"10:330:13214":{"crate_id":10,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:11475:15483":{"crate_id":6,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:6789:14906":{"crate_id":17,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"18:13167:12383":{"crate_id":18,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:6900:12944":{"crate_id":17,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"5:3722:14960":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"5:1011:11651":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"10:426:22839":{"crate_id":10,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:11104:14323":{"crate_id":6,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"24:1202:5385":{"crate_id":24,"path":["typenum","type_operators","Min"],"kind":"trait"},"18:10223:11987":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:3777:12853":{"crate_id":17,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:40522:15088":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:43406:5333":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:42177:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:41785:15597":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:8225:15525":{"crate_id":6,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:2637:12811":{"crate_id":17,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"5:2962:14356":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"18:11164:12042":{"crate_id":18,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:46331:14668":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:8252:13068":{"crate_id":17,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:6332:14869":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"18:14007:12654":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"23:422:5443":{"crate_id":23,"path":["generic_array","ArrayBuilder"],"kind":"struct"},"18:11591:12043":{"crate_id":18,"path":["object","read","Relocation"],"kind":"struct"},"1:6651:1883":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"18:12303:12227":{"crate_id":18,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"7:7575:14245":{"crate_id":7,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"7:6171:14055":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"4:430:2003":{"crate_id":4,"path":["digest","ExtendableOutput"],"kind":"trait"},"5:6790:11695":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"5:35:11648":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"18:14380:12770":{"crate_id":18,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:41718:11164":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"18:11872:12130":{"crate_id":18,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:40570:11846":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"18:11753:12100":{"crate_id":18,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"7:4704:13656":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:2715:12814":{"crate_id":17,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:46923:14679":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"7:7529:14233":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"6:833:5334":{"crate_id":6,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"5:2959:15005":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"18:11600:23921":{"crate_id":18,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:2773:16535":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"18:12840:12331":{"crate_id":18,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:7359:5734":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"6:1037:14924":{"crate_id":6,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"5:6487:11651":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"15:0:1991":{"crate_id":15,"path":["rustc_demangle"],"kind":"module"},"17:4996:12877":{"crate_id":17,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:8265:128":{"crate_id":17,"path":["gimli","read","Error"],"kind":"enum"},"1:46115:14661":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:5737:23847":{"crate_id":17,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"7:6796:14179":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"23:295:5456":{"crate_id":23,"path":["generic_array","sequence","Lengthen"],"kind":"trait"},"1:5471:11607":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:46641:14674":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:22000:14373":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:48133:5916":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"18:14395:12771":{"crate_id":18,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:9294:11228":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"18:12966:12348":{"crate_id":18,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:40401:15072":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"18:10609:15328":{"crate_id":18,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"18:12412:12249":{"crate_id":18,"path":["object","macho","LoadCommand"],"kind":"struct"},"24:642:5415":{"crate_id":24,"path":["typenum","marker_traits","Integer"],"kind":"trait"},"18:13303:12392":{"crate_id":18,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"4:473:1694":{"crate_id":4,"path":["digest","core_api","ct_variable","CtVariableCoreWrapper"],"kind":"struct"},"1:0:498":{"crate_id":1,"path":["core"],"kind":"module"},"6:3980:17329":{"crate_id":6,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:30451:28289":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"6:3837:15484":{"crate_id":6,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:47977:11062":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"18:10097:15297":{"crate_id":18,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:46460:14671":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"18:2105:23972":{"crate_id":18,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:11613:15132":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"7:4992:13803":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:46209:14663":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"7:4535:13616":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:5882:14829":{"crate_id":17,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"6:358:15450":{"crate_id":6,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"18:14044:12662":{"crate_id":18,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"18:2164:15271":{"crate_id":18,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"7:6130:14029":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:47946:11060":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:41562:14612":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:2689:12813":{"crate_id":17,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"18:10581:15325":{"crate_id":18,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"7:4506:13603":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:5994:23848":{"crate_id":17,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"21:66:17020":{"crate_id":21,"path":["blobby","Blob2Iterator"],"kind":"struct"},"6:12013:797":{"crate_id":6,"path":["std","isize"],"kind":"primitive"},"6:11128:36375":{"crate_id":6,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:0:444":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"7:6671:14114":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:2804:12961":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"17:5553:12824":{"crate_id":17,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"6:1051:15439":{"crate_id":6,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"7:4395:13546":{"crate_id":7,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"18:13368:12443":{"crate_id":18,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"7:1590:13386":{"crate_id":7,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:3255:15476":{"crate_id":6,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:2811:16541":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"24:1151:17054":{"crate_id":24,"path":["typenum","private","PrivateSquareRoot"],"kind":"trait"},"18:11767:12101":{"crate_id":18,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:22097:28288":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:5704:14813":{"crate_id":17,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:6303:12823":{"crate_id":17,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:7445:15413":{"crate_id":17,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:5965:11610":{"crate_id":6,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:6931:15390":{"crate_id":17,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"24:5702:5291":{"crate_id":24,"path":["typenum","bit","B0"],"kind":"struct"},"6:6637:217":{"crate_id":6,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:3025:12845":{"crate_id":17,"path":["gimli","common","DwoId"],"kind":"struct"},"1:40267:15069":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:3382:15106":{"crate_id":6,"path":["std","io","util","Repeat"],"kind":"struct"},"5:782:11654":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"5:4166:11607":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:44240:15167":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:40158:15059":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"7:1733:13470":{"crate_id":7,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:4734:17342":{"crate_id":6,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:43481:5350":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"19:690:14751":{"crate_id":19,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:498:11596":{"crate_id":6,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:9942:222":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"18:11888:12134":{"crate_id":18,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:856:11165":{"crate_id":6,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:41476:155":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:41904:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:46987:14681":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"12:805:17245":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:9047:35100":{"crate_id":6,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:5775:12885":{"crate_id":17,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"6:2913:210":{"crate_id":6,"path":["std","io","error","Result"],"kind":"typedef"},"18:11007:15343":{"crate_id":18,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"6:9275:15463":{"crate_id":6,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:46261:14665":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:11032:2012":{"crate_id":6,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:5673:23846":{"crate_id":17,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"7:6618:14091":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:6667:12923":{"crate_id":17,"path":["gimli","read","line","LineRow"],"kind":"struct"},"6:7726:14961":{"crate_id":6,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"7:4794:13700":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:11408:16701":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"24:1153:17051":{"crate_id":24,"path":["typenum","private","PrivateLogarithm2"],"kind":"trait"},"6:2488:15469":{"crate_id":6,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:4753:12869":{"crate_id":17,"path":["gimli","constants","DwId"],"kind":"struct"},"7:4770:13687":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:2743:11119":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"7:4550:13623":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"5:6441:11667":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:12686:140":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:10509:15474":{"crate_id":6,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"6:900:11685":{"crate_id":6,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:47735:14687":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:5651:12828":{"crate_id":17,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"10:507:13237":{"crate_id":10,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:11564:36393":{"crate_id":6,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"7:7540:14237":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"18:14417:12777":{"crate_id":18,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"6:11043:11639":{"crate_id":6,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:8865:11165":{"crate_id":6,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"18:10529:12055":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:6692:23852":{"crate_id":17,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:8983:15535":{"crate_id":6,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"18:8794:23911":{"crate_id":18,"path":["object","common","RelocationKind"],"kind":"enum"},"1:42021:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"12:399:36667":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:5440:15495":{"crate_id":6,"path":["std","process","Command"],"kind":"struct"},"1:30190:16348":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"1:2243:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"6:3735:15483":{"crate_id":6,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:21130:16748":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"18:11520:12038":{"crate_id":18,"path":["object","read","Export"],"kind":"struct"},"18:13778:12595":{"crate_id":18,"path":["object","pe","ImageRelocation"],"kind":"struct"},"6:5375:15489":{"crate_id":6,"path":["std","process","Child"],"kind":"struct"},"1:2799:16539":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:43614:11959":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"5:6308:17142":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:42923:11436":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"7:6841:14201":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:48056:11067":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"5:4428:11674":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"7:4616:13637":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"24:1251:5433":{"crate_id":24,"path":["typenum","type_operators","IsNotEqual"],"kind":"trait"},"1:44375:15178":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:44192:15158":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"5:6888:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:4811:803":{"crate_id":1,"path":["core","iter"],"kind":"module"},"7:5829:13899":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"7:5080:13842":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"18:12659:12286":{"crate_id":18,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:3215:15474":{"crate_id":6,"path":["std","io","stdio","Stdin"],"kind":"struct"},"6:4038:17333":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"18:9296:11961":{"crate_id":18,"path":["object","read","util","ByteString"],"kind":"struct"},"6:5557:17410":{"crate_id":6,"path":["std","process","Termination"],"kind":"trait"},"1:4254:207":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"18:13923:12630":{"crate_id":18,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"18:11276:128":{"crate_id":18,"path":["object","read","Error"],"kind":"struct"},"18:11241:24041":{"crate_id":18,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"24:1211:5302":{"crate_id":24,"path":["typenum","type_operators","IsLess"],"kind":"trait"},"1:41727:5334":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"5:4848:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:6571:23851":{"crate_id":17,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:21524:16755":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"19:624:36710":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:8402:14313":{"crate_id":6,"path":["std","path","Prefix"],"kind":"enum"},"7:4304:13485":{"crate_id":7,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"18:8711:23908":{"crate_id":18,"path":["object","common","ComdatKind"],"kind":"enum"},"7:4380:13539":{"crate_id":7,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:22721:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"7:541:13298":{"crate_id":7,"path":["libc","unix","iovec"],"kind":"struct"},"1:10294:5342":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:40168:15060":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:6540:12831":{"crate_id":17,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:10401:5341":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"7:579:13317":{"crate_id":7,"path":["libc","unix","tms"],"kind":"struct"},"12:311:14950":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:9292:11227":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"5:3596:5335":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:6396:14873":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"18:14403:12774":{"crate_id":18,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:2443:12803":{"crate_id":17,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:4841:12872":{"crate_id":17,"path":["gimli","constants","DwOrd"],"kind":"struct"},"7:494:13267":{"crate_id":7,"path":["libc","unix","timespec"],"kind":"struct"},"6:8534:14971":{"crate_id":6,"path":["std","path","Components"],"kind":"struct"},"1:20739:17040":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"18:11542:12073":{"crate_id":18,"path":["object","read","CodeView"],"kind":"struct"},"17:2519:12806":{"crate_id":17,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"12:2180:13172":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"5:1374:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"5:1492:15430":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"5:6932:11697":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"19:113:27866":{"crate_id":19,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:5531:15027":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:39490:14466":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"6:2627:15471":{"crate_id":6,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:4724:12868":{"crate_id":17,"path":["gimli","constants","DwAddr"],"kind":"struct"},"7:4638:13639":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:21058:16516":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"17:4323:12858":{"crate_id":17,"path":["gimli","constants","DwAt"],"kind":"struct"},"7:488:13264":{"crate_id":7,"path":["libc","unix","timeval"],"kind":"struct"},"6:6420:15103":{"crate_id":6,"path":["std","sync","once","Once"],"kind":"struct"},"18:12757:12315":{"crate_id":18,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:22655:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:6386:14872":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:5990:15029":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"7:4740:13673":{"crate_id":7,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"12:1048:36673":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"7:4446:13574":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"18:11118:14786":{"crate_id":18,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:7331:36696":{"crate_id":17,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:3441:12850":{"crate_id":17,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:2791:16538":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"18:10403:14765":{"crate_id":18,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"18:10969:15340":{"crate_id":18,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"18:12479:12260":{"crate_id":18,"path":["object","macho","Section32"],"kind":"struct"},"6:11271:15557":{"crate_id":6,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:44402:122":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"18:12133:12184":{"crate_id":18,"path":["object","elf","Vernaux"],"kind":"struct"},"17:5626:15350":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"4:336:5299":{"crate_id":4,"path":["digest","core_api","ExtendableOutputCore"],"kind":"trait"},"6:948:15438":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:43455:5352":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:3233:16557":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"7:4650:13640":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:4258:15584":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"19:548:141":{"crate_id":19,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"7:4917:13763":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"5:1464:14953":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:6804:17433":{"crate_id":6,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:1069:15445":{"crate_id":6,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"18:13971:12645":{"crate_id":18,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:2900:12822":{"crate_id":17,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:10091:35066":{"crate_id":6,"path":["std","sys","unix","os","Env"],"kind":"struct"},"7:4518:13609":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:20720:28228":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:2318:125":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:39224:16558":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:10948:35682":{"crate_id":6,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:21:687":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"18:9665:36704":{"crate_id":18,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"6:4231:15485":{"crate_id":6,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"7:5008:13808":{"crate_id":7,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:7731:14964":{"crate_id":6,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"6:11496:15484":{"crate_id":6,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"23:382:5442":{"crate_id":23,"path":["generic_array","GenericArrayImplOdd"],"kind":"struct"},"5:276:2008":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:3670:17325":{"crate_id":6,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"18:12318:12231":{"crate_id":18,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"4:330:1851":{"crate_id":4,"path":["digest","core_api","UpdateCore"],"kind":"trait"},"17:5793:14820":{"crate_id":17,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"5:4236:5334":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"7:568:13312":{"crate_id":7,"path":["libc","unix","sigval"],"kind":"struct"},"17:6160:14866":{"crate_id":17,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"7:6625:14095":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"18:13707:12573":{"crate_id":18,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:10141:15545":{"crate_id":6,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"5:5364:5458":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"5:7384:15019":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:40144:14597":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:46953:14680":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"18:14037:12660":{"crate_id":18,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"7:6598:14085":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:40513:15087":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"5:1473:14954":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:41582:28270":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"24:1231:5431":{"crate_id":24,"path":["typenum","type_operators","IsGreater"],"kind":"trait"},"24:613:182":{"crate_id":24,"path":["typenum","marker_traits","Ord"],"kind":"trait"},"19:644:11828":{"crate_id":19,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:936:15435":{"crate_id":6,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:10114:5335":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"22:22:1846":{"crate_id":22,"path":["crypto_common","BlockSizeUser"],"kind":"trait"},"6:10927:13234":{"crate_id":6,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:2928:5326":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:7799:13022":{"crate_id":17,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"4:357:1856":{"crate_id":4,"path":["digest","digest","HashMarker"],"kind":"trait"},"13:0:1989":{"crate_id":13,"path":["rustc_std_workspace_alloc"],"kind":"module"},"6:4697:17356":{"crate_id":6,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"12:119:11586":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:46063:14659":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:3058:11856":{"crate_id":17,"path":["gimli","arch","Arm"],"kind":"struct"},"0:100:1720":{"crate_id":0,"path":["sha2","Sha512_224"],"kind":"typedef"},"6:3456:15481":{"crate_id":6,"path":["std","io","IoSliceMut"],"kind":"struct"},"24:2616:1691":{"crate_id":24,"path":["typenum","generated","consts","U64"],"kind":"typedef"},"6:9127:14336":{"crate_id":6,"path":["std","time","SystemTime"],"kind":"struct"},"1:41803:193":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:3998:15581":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"18:12118:12178":{"crate_id":18,"path":["object","elf","Verneed"],"kind":"struct"},"6:2878:11606":{"crate_id":6,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:6986:12949":{"crate_id":17,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"7:7517:14231":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"7:6156:14044":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:8168:17291":{"crate_id":6,"path":["std","io","SeekFrom"],"kind":"enum"},"6:1550:5334":{"crate_id":6,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"18:13749:12587":{"crate_id":18,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"7:5068:13837":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"25:22:17032":{"crate_id":25,"path":["block_buffer","sealed","Sealed"],"kind":"trait"},"1:42418:11224":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"6:12004:749":{"crate_id":6,"path":["std","i16"],"kind":"primitive"},"4:328:1847":{"crate_id":4,"path":["digest","core_api","Buffer"],"kind":"typedef"},"17:5916:14835":{"crate_id":17,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"7:595:13327":{"crate_id":7,"path":["libc","unix","protoent"],"kind":"struct"},"7:474:13256":{"crate_id":7,"path":["libc","unix","group"],"kind":"struct"},"24:1016:17072":{"crate_id":24,"path":["typenum","private","PrivateMax"],"kind":"trait"},"17:5612:14804":{"crate_id":17,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:6243:11610":{"crate_id":6,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:46563:14673":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"6:7852:14967":{"crate_id":6,"path":["std","fs","OpenOptions"],"kind":"struct"},"6:12010:1519":{"crate_id":6,"path":["std","u32"],"kind":"primitive"},"6:5981:206":{"crate_id":6,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:2850:16547":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:7494:14929":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"21:79:17021":{"crate_id":21,"path":["blobby","Blob3Iterator"],"kind":"struct"},"1:40964:15106":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:7038:14922":{"crate_id":17,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"7:123:17522":{"crate_id":7,"path":["libc","unix","fpos_t"],"kind":"enum"},"7:6834:14198":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:47881:14690":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"7:7295:14227":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"7:506:13272":{"crate_id":7,"path":["libc","unix","rusage"],"kind":"struct"},"17:6347:23850":{"crate_id":17,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:4814:12871":{"crate_id":17,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:21174:17032":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"18:12394:12248":{"crate_id":18,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:21968:14372":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:10302:15495":{"crate_id":6,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:3295:12849":{"crate_id":17,"path":["gimli","arch","LoongArch"],"kind":"struct"},"18:8899:23914":{"crate_id":18,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:2826:12964":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:1732:16528":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:2980:16549":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"6:9108:14335":{"crate_id":6,"path":["std","time","Instant"],"kind":"struct"},"24:821:17057":{"crate_id":24,"path":["typenum","private","PrivateXor"],"kind":"trait"},"1:46429:14670":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:3156:135":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:8108:15520":{"crate_id":6,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"6:11973:35687":{"crate_id":6,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"4:512:1850":{"crate_id":4,"path":["digest","core_api","TruncSide"],"kind":"enum"},"5:3238:14958":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:40229:16601":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"18:14301:12750":{"crate_id":18,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:3141:5327":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"4:334:5298":{"crate_id":4,"path":["digest","core_api","FixedOutputCore"],"kind":"trait"},"18:13591:12549":{"crate_id":18,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"6:12001:646":{"crate_id":6,"path":["std","f32"],"kind":"primitive"},"6:3176:35039":{"crate_id":6,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"7:4781:13695":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"18:13083:12372":{"crate_id":18,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:8550:14322":{"crate_id":6,"path":["std","path","Ancestors"],"kind":"struct"},"5:7223:11661":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"5:4350:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"7:1717:13465":{"crate_id":7,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:3647:11165":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"6:4151:17351":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:8382:16661":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:4785:28262":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"6:4469:17356":{"crate_id":6,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"4:522:1857":{"crate_id":4,"path":["digest","InvalidOutputSize"],"kind":"struct"},"1:9282:11223":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"17:6057:22960":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"7:1545:13355":{"crate_id":7,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:7754:15512":{"crate_id":6,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:12006:751":{"crate_id":6,"path":["std","i64"],"kind":"primitive"},"1:40196:15062":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:40752:15099":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:2962:16554":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"6:7859:14256":{"crate_id":6,"path":["std","fs","FileTimes"],"kind":"struct"},"18:12579:12275":{"crate_id":18,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:1774:15461":{"crate_id":6,"path":["std","env","VarsOs"],"kind":"struct"},"1:46163:14662":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:582:17234":{"crate_id":6,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:9013:15538":{"crate_id":6,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"17:7525:12839":{"crate_id":17,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:2470:17032":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:7569:11631":{"crate_id":6,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"24:6172:5378":{"crate_id":24,"path":["typenum","array","ATerm"],"kind":"struct"},"6:7907:15516":{"crate_id":6,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"24:1111:17037":{"crate_id":24,"path":["typenum","private","IsNotEqualPrivate"],"kind":"trait"},"1:43678:15129":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:42425:11223":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:2897:117":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:2757:16380":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"21:92:17022":{"crate_id":21,"path":["blobby","Blob4Iterator"],"kind":"struct"},"11:0:1987":{"crate_id":11,"path":["adler"],"kind":"module"},"5:5956:11679":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:5382:11951":{"crate_id":17,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:30615:28274":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"6:3106:15472":{"crate_id":6,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"17:6815:12935":{"crate_id":17,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"7:1536:13349":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:7553:13006":{"crate_id":17,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:8492:17405":{"crate_id":6,"path":["std","path","Component"],"kind":"enum"},"1:41982:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:4028:17332":{"crate_id":6,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"6:6460:11625":{"crate_id":6,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"18:10555:15320":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:41752:14617":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"6:10805:14297":{"crate_id":6,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:12074:112":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:40452:15078":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:6156:11621":{"crate_id":6,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"23:317:5338":{"crate_id":23,"path":["generic_array","sequence","Split"],"kind":"trait"},"6:8199:15097":{"crate_id":6,"path":["std","io","Take"],"kind":"struct"},"10:237:6026":{"crate_id":10,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"18:13771:12593":{"crate_id":18,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"7:4887:13742":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"6:2551:11603":{"crate_id":6,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:45684:14645":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"24:814:17047":{"crate_id":24,"path":["typenum","private","PrivateAnd"],"kind":"trait"},"17:2759:12816":{"crate_id":17,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:7707:13013":{"crate_id":17,"path":["gimli","read","UnitOffset"],"kind":"struct"},"5:1273:15441":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"5:5925:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:30415:5446":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:7648:198":{"crate_id":17,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:46483:14672":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:44371:15177":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:3151:234":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:2565:11601":{"crate_id":6,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"24:615:5395":{"crate_id":24,"path":["typenum","marker_traits","Bit"],"kind":"trait"},"15:221:13146":{"crate_id":15,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:32169:6072":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"18:10994:15342":{"crate_id":18,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"18:9399:15275":{"crate_id":18,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:6983:13000":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:47843:14689":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"18:14216:12728":{"crate_id":18,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:7231:16647":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:7882:130":{"crate_id":6,"path":["std","fs","FileType"],"kind":"struct"},"1:44351:15172":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:11590:15131":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"7:4824:13711":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"7:4949:13783":{"crate_id":7,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"7:7564:14241":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:9286:11225":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:4738:17345":{"crate_id":6,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"7:4389:13544":{"crate_id":7,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"5:7233:34892":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:5342:12882":{"crate_id":17,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"12:1121:15445":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"6:11049:11640":{"crate_id":6,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:40973:11713":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:4010:15582":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:2795:16537":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"16:394:22952":{"crate_id":16,"path":["addr2line","DebugFile"],"kind":"enum"},"1:21299:17032":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"12:1818:5334":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:3042:22989":{"crate_id":17,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"15:202:17134":{"crate_id":15,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:1884:15465":{"crate_id":6,"path":["std","error","Report"],"kind":"struct"},"17:6915:36691":{"crate_id":17,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"19:699:14752":{"crate_id":19,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:47937:5837":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:3894:12856":{"crate_id":17,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:6317:15389":{"crate_id":17,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"16:0:1992":{"crate_id":16,"path":["addr2line"],"kind":"module"},"1:5383:11607":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"5:7367:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:9288:11226":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:41879:183":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"24:2520:1689":{"crate_id":24,"path":["typenum","generated","consts","U32"],"kind":"typedef"},"18:13604:12554":{"crate_id":18,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:5618:11610":{"crate_id":6,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"7:4929:13772":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:2519:238":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:2838:16544":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"12:2049:15439":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"18:11354:11918":{"crate_id":18,"path":["object","read","SectionIndex"],"kind":"struct"},"7:4606:13636":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"7:7586:14246":{"crate_id":7,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"0:99:1718":{"crate_id":0,"path":["sha2","Sha256"],"kind":"typedef"},"18:13566:12547":{"crate_id":18,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"7:4833:13714":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:12003:752":{"crate_id":6,"path":["std","i8"],"kind":"primitive"},"26:0:1728":{"crate_id":26,"path":["cfg_if"],"kind":"module"},"6:6589:17426":{"crate_id":6,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"6:1578:14957":{"crate_id":6,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"5:1411:5334":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:43927:15062":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"18:10280:15304":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:46382:14669":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"18:10417:14766":{"crate_id":18,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"22:42:17079":{"crate_id":22,"path":["crypto_common","InnerUser"],"kind":"trait"},"19:636:11848":{"crate_id":19,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"18:12826:12329":{"crate_id":18,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"18:10654:11993":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"6:1810:15462":{"crate_id":6,"path":["std","env","SplitPaths"],"kind":"struct"},"6:5554:14016":{"crate_id":6,"path":["std","process","exit"],"kind":"function"},"17:55:13049":{"crate_id":17,"path":["gimli","endianity","Endianity"],"kind":"trait"},"1:43945:15061":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"5:2223:34922":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"12:447:142":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:44155:15157":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:7255:14617":{"crate_id":17,"path":["gimli","read","op","Location"],"kind":"enum"},"17:8166:14943":{"crate_id":17,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:10555:11637":{"crate_id":6,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"6:9093:167":{"crate_id":6,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"5:7193:11165":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:9250:132":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:20925:16516":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"6:7123:35056":{"crate_id":6,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:11629:15135":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:8325:15529":{"crate_id":6,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:7061:14923":{"crate_id":17,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:4928:12875":{"crate_id":17,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:39263:16555":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:11868:16700":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"7:500:13269":{"crate_id":7,"path":["libc","unix","rlimit"],"kind":"struct"},"6:3513:17290":{"crate_id":6,"path":["std","io","Seek"],"kind":"trait"},"19:0:1995":{"crate_id":19,"path":["memchr"],"kind":"module"},"5:3212:14955":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"7:6711:14122":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:6872:12833":{"crate_id":17,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"12:1012:15441":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:6713:14892":{"crate_id":17,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:6456:12826":{"crate_id":17,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"12:0:1988":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"1:11919:16708":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"7:5775:13873":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:6214:15378":{"crate_id":17,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:11774:11647":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"7:7609:14252":{"crate_id":7,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"4:341:1852":{"crate_id":4,"path":["digest","core_api","VariableOutputCore"],"kind":"trait"},"5:1523:15568":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:22142:15046":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:6372:12825":{"crate_id":17,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"18:11272:15347":{"crate_id":18,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:10373:5340":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:639:17236":{"crate_id":6,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:846:5335":{"crate_id":6,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"6:7998:15519":{"crate_id":6,"path":["std","io","error","Custom"],"kind":"struct"},"1:47485:14684":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"18:13179:12390":{"crate_id":18,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:3217:15475":{"crate_id":6,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"18:14259:12744":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:39518:11234":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"12:1027:22918":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:44063:15153":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"18:14189:12719":{"crate_id":18,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:32209:15053":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"18:10444:14768":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:7833:14932":{"crate_id":17,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"18:13435:12498":{"crate_id":18,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"18:10832:15333":{"crate_id":18,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"12:630:5334":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:11996:1388":{"crate_id":6,"path":["std","slice"],"kind":"primitive"},"18:10799:15331":{"crate_id":18,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"23:143:5451":{"crate_id":23,"path":["generic_array","functional","MappedGenericSequence"],"kind":"trait"},"7:4420:13562":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:43911:15141":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:22622:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"12:365:11590":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:40372:5350":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"10:357:22852":{"crate_id":10,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:40295:15070":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"18:14359:12767":{"crate_id":18,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"7:4973:13795":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"12:644:5335":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"5:3142:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:22051:14377":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"18:12905:12339":{"crate_id":18,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"7:587:13322":{"crate_id":7,"path":["libc","unix","servent"],"kind":"struct"},"24:989:17029":{"crate_id":24,"path":["typenum","private","PrivateDivInt"],"kind":"trait"},"24:835:17030":{"crate_id":24,"path":["typenum","private","PrivateIntegerAdd"],"kind":"trait"},"1:39310:15054":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"7:526:13289":{"crate_id":7,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"21:118:17024":{"crate_id":21,"path":["blobby","Blob6Iterator"],"kind":"struct"},"1:41516:14605":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:3810:12854":{"crate_id":17,"path":["gimli","constants","DwUt"],"kind":"struct"},"10:486:22836":{"crate_id":10,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:41605:15115":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"6:8156:14297":{"crate_id":6,"path":["std","io","IoSlice"],"kind":"struct"},"1:40991:15107":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:4536:12863":{"crate_id":17,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:11552:14351":{"crate_id":6,"path":["std","alloc","System"],"kind":"struct"},"18:14282:12745":{"crate_id":18,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:7753:14931":{"crate_id":17,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"5:3671:11651":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:4396:12859":{"crate_id":17,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:9103:219":{"crate_id":6,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"6:1975:184":{"crate_id":6,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:3339:17314":{"crate_id":6,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"7:4685:13644":{"crate_id":7,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:9534:11433":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:4900:12874":{"crate_id":17,"path":["gimli","constants","DwIdx"],"kind":"struct"},"7:482:13261":{"crate_id":7,"path":["libc","unix","utimbuf"],"kind":"struct"},"18:1184:15266":{"crate_id":18,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:44128:15156":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:39341:198":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"6:6351:166":{"crate_id":6,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"18:9744:36701":{"crate_id":18,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"7:7511:14230":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"7:7505:14229":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:2246:98":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:4605:16594":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:0:1993":{"crate_id":17,"path":["gimli"],"kind":"module"},"6:4383:15487":{"crate_id":6,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"7:6648:14113":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:5720:14815":{"crate_id":17,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:8043:13060":{"crate_id":17,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:7505:12838":{"crate_id":17,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"6:2383:17287":{"crate_id":6,"path":["std","fs","read_dir"],"kind":"function"},"6:7632:14254":{"crate_id":6,"path":["std","thread","local","AccessError"],"kind":"struct"},"18:10313:15307":{"crate_id":18,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"6:10740:14980":{"crate_id":6,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:10259:5356":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"18:9475:15276":{"crate_id":18,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:3373:16530":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"5:6639:11651":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:11989:373":{"crate_id":6,"path":["std","bool"],"kind":"primitive"},"18:13016:12365":{"crate_id":18,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:8935:17431":{"crate_id":6,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:6516:12900":{"crate_id":17,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"6:1972:185":{"crate_id":6,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"23:437:5444":{"crate_id":23,"path":["generic_array","ArrayConsumer"],"kind":"struct"},"7:6077:14018":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:43892:15139":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:5589:15028":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:20707:27957":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"12:657:11165":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:5639:14808":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"5:6957:11700":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:11248:11641":{"crate_id":6,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:40442:15077":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"5:4076:5335":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:39504:13001":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"17:2465:12804":{"crate_id":17,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"18:11696:12088":{"crate_id":18,"path":["object","archive","AixHeader"],"kind":"struct"},"18:13069:12369":{"crate_id":18,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:45832:14651":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"12:2168:13170":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"5:1302:15445":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:9280:120":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"18:9614:36705":{"crate_id":18,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:42741:128":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"21:105:17023":{"crate_id":21,"path":["blobby","Blob5Iterator"],"kind":"struct"},"18:12921:12341":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"18:12691:12290":{"crate_id":18,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:7484:14928":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:3182:35932":{"crate_id":6,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"23:369:5441":{"crate_id":23,"path":["generic_array","GenericArrayImplEven"],"kind":"struct"},"6:4159:17352":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:11298:14350":{"crate_id":6,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:41854:5334":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:42698:13036":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"6:2355:14364":{"crate_id":6,"path":["std","fs","metadata"],"kind":"function"},"17:6427:14875":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:41862:5335":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"6:3257:15477":{"crate_id":6,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"18:9604:11980":{"crate_id":18,"path":["object","read","any","SymbolTable"],"kind":"struct"},"7:6589:14079":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"18:582:11948":{"crate_id":18,"path":["object","read","any","Symbol"],"kind":"struct"},"18:10458:14769":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"6:4694:17383":{"crate_id":6,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"6:11994:1059":{"crate_id":6,"path":["std","pointer"],"kind":"primitive"},"5:2170:15009":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"15:7:15426":{"crate_id":15,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"7:6015:14001":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"24:621:1854":{"crate_id":24,"path":["typenum","marker_traits","Unsigned"],"kind":"trait"},"19:707:14754":{"crate_id":19,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:2693:226":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:7899:119":{"crate_id":6,"path":["std","fs","DirBuilder"],"kind":"struct"},"6:7677:11637":{"crate_id":6,"path":["std","thread","Thread"],"kind":"struct"},"1:47966:6017":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:4909:17382":{"crate_id":6,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"7:4401:13549":{"crate_id":7,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"7:4879:1011":{"crate_id":7,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"18:10633:11991":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:22556:174":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:22059:14378":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:40309:16611":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"typedef"},"24:1168:5428":{"crate_id":24,"path":["typenum","type_operators","Same"],"kind":"trait"},"19:590:11836":{"crate_id":19,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:1572:14956":{"crate_id":6,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"18:9777:23927":{"crate_id":18,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"12:1517:15447":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:10319:35691":{"crate_id":6,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"18:8659:23907":{"crate_id":18,"path":["object","common","SectionKind"],"kind":"enum"},"1:10974:1909":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:40248:14598":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:21114:17032":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:40414:15001":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:12002:648":{"crate_id":6,"path":["std","f64"],"kind":"primitive"},"6:8003:17317":{"crate_id":6,"path":["std","io","error","ErrorKind"],"kind":"enum"},"18:9083:11954":{"crate_id":18,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:4965:12876":{"crate_id":17,"path":["gimli","constants","DwLns"],"kind":"struct"},"0:0:1727":{"crate_id":0,"path":["sha2"],"kind":"module"},"1:11808:16381":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:2212:17274":{"crate_id":6,"path":["std","fs","read_to_string"],"kind":"function"},"18:1075:15265":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"18:13492:12536":{"crate_id":18,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"18:12365:12243":{"crate_id":18,"path":["object","macho","FatArch64"],"kind":"struct"},"18:504:15264":{"crate_id":18,"path":["object","read","any","Comdat"],"kind":"struct"},"18:11189:12043":{"crate_id":18,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"18:11416:14794":{"crate_id":18,"path":["object","read","SymbolMap"],"kind":"struct"},"1:10415:5337":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"18:9734:15281":{"crate_id":18,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"25:85:5369":{"crate_id":25,"path":["block_buffer","Lazy"],"kind":"struct"},"7:4848:13722":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:7012:14916":{"crate_id":17,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:10182:5355":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"18:13448:12505":{"crate_id":18,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"15:165:22924":{"crate_id":15,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:40107:15057":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"12:836:15437":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"6:6140:11618":{"crate_id":6,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"18:9571:36698":{"crate_id":18,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"18:13574:12548":{"crate_id":18,"path":["object","pe","Guid"],"kind":"struct"},"18:11210:14791":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:6834:16637":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"5:2461:14353":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"7:547:13301":{"crate_id":7,"path":["libc","unix","pollfd"],"kind":"struct"},"17:5414:12883":{"crate_id":17,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:4476:12861":{"crate_id":17,"path":["gimli","constants","DwLle"],"kind":"struct"},"18:10123:11973":{"crate_id":18,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:40423:15074":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:40594:15094":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"18:12035:12161":{"crate_id":18,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"19:727:11852":{"crate_id":19,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"18:10080:15294":{"crate_id":18,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"18:9518:15277":{"crate_id":18,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:32296:11122":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:46717:14676":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"15:31:15426":{"crate_id":15,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:6289:12895":{"crate_id":17,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:2516:133":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"24:6316:5287":{"crate_id":24,"path":["typenum","uint","UInt"],"kind":"struct"},"1:39451:5325":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"18:10361:11989":{"crate_id":18,"path":["object","read","elf","version","Version"],"kind":"struct"},"18:10511:14775":{"crate_id":18,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:5940:15352":{"crate_id":17,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"5:1102:32063":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:7622:15421":{"crate_id":17,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"12:1611:11592":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"19:582:11130":{"crate_id":19,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:22523:177":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:40554:15091":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"6:7993:15518":{"crate_id":6,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"7:1500:13333":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"7:1673:13447":{"crate_id":7,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:1554:11165":{"crate_id":6,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"7:6775:14165":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:44383:14348":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"6:9020:15539":{"crate_id":6,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:10332:5343":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"12:1103:15444":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:6175:15359":{"crate_id":17,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:10407:15530":{"crate_id":6,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:11553:15126":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:21984:15040":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:42296:11071":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"18:14163:12711":{"crate_id":18,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"6:615:15452":{"crate_id":6,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:2357:17277":{"crate_id":6,"path":["std","fs","symlink_metadata"],"kind":"function"},"24:1174:5429":{"crate_id":24,"path":["typenum","type_operators","Abs"],"kind":"trait"},"1:11848:16694":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"18:13847:12612":{"crate_id":18,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:41533:16656":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:2781:12817":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:2293:22961":{"crate_id":17,"path":["gimli","common","Format"],"kind":"enum"},"6:8299:15525":{"crate_id":6,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:8990:35026":{"crate_id":6,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"24:1031:17033":{"crate_id":24,"path":["typenum","private","IsLessPrivate"],"kind":"trait"},"4:448:2006":{"crate_id":4,"path":["digest","VariableOutputReset"],"kind":"trait"},"12:793:15446":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:7631:13010":{"crate_id":17,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"22:0:1997":{"crate_id":22,"path":["crypto_common"],"kind":"module"},"24:933:17062":{"crate_id":24,"path":["typenum","private","PrivateSetBit"],"kind":"trait"},"18:3186:15272":{"crate_id":18,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:2925:5732":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:12741:16745":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"7:4475:13585":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"6:4815:17341":{"crate_id":6,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"18:8605:23893":{"crate_id":18,"path":["object","common","AddressSize"],"kind":"enum"},"22:51:17081":{"crate_id":22,"path":["crypto_common","KeyIvInit"],"kind":"trait"},"24:1279:5388":{"crate_id":24,"path":["typenum","type_operators","ToInt"],"kind":"trait"},"17:2874:12821":{"crate_id":17,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:22163:15049":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"7:5955:13974":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"7:7599:14250":{"crate_id":7,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:43526:5347":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:43182:5363":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"12:1826:11667":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"18:9336:129":{"crate_id":18,"path":["object","read","any","File"],"kind":"struct"},"18:13949:12640":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:7738:17262":{"crate_id":6,"path":["std","env","VarError"],"kind":"enum"},"24:612:5384":{"crate_id":24,"path":["typenum","marker_traits","Zero"],"kind":"trait"},"1:2691:11116":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"18:10038:15291":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"18:11669:12082":{"crate_id":18,"path":["object","archive","Header"],"kind":"struct"},"7:7552:14239":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"7:1663:13441":{"crate_id":7,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:44367:15176":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:43732:5340":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"18:10931:15334":{"crate_id":18,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:42723:68":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"18:12017:12153":{"crate_id":18,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:3988:17330":{"crate_id":6,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:44355:15173":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"24:5780:5290":{"crate_id":24,"path":["typenum","int","NInt"],"kind":"struct"},"1:2265:105":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"5:3330:11685":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"18:10110:15298":{"crate_id":18,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"5:2049:15569":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"19:521:27876":{"crate_id":19,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:11962:17241":{"crate_id":6,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:2762:12959":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"18:11155:14788":{"crate_id":18,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:6939:23853":{"crate_id":17,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:2332:12793":{"crate_id":17,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:2695:109":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:43163:14629":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"7:4368:13536":{"crate_id":7,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"18:11234:12047":{"crate_id":18,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"4:294:17032":{"crate_id":4,"path":["digest","core_api","wrapper","sealed","Sealed"],"kind":"trait"},"5:1442:11165":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:2497:12805":{"crate_id":17,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:43628:5338":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:10139:5338":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"6:6533:15504":{"crate_id":6,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:5122:191":{"crate_id":6,"path":["std","path","PathBuf"],"kind":"struct"},"1:2779:12960":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"5:7476:15579":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"18:14177:12717":{"crate_id":18,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:2846:16546":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"19:660:15256":{"crate_id":19,"path":["memchr","memmem","FindIter"],"kind":"struct"},"14:0:1990":{"crate_id":14,"path":["std_detect"],"kind":"module"},"18:12435:12252":{"crate_id":18,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"18:11791:12115":{"crate_id":18,"path":["object","elf","FileHeader64"],"kind":"struct"},"6:2208:11701":{"crate_id":6,"path":["std","fs","read"],"kind":"function"},"12:332:11588":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"7:4428:13565":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"18:14315:12752":{"crate_id":18,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"7:5979:13986":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"18:13427:12495":{"crate_id":18,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:4045:16579":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"18:11924:12141":{"crate_id":18,"path":["object","elf","Sym64"],"kind":"struct"},"5:4987:11607":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:44217:15159":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:5843:14827":{"crate_id":17,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"18:8771:23910":{"crate_id":18,"path":["object","common","SymbolScope"],"kind":"enum"},"1:43434:5344":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:2783:16536":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"4:358:1682":{"crate_id":4,"path":["digest","digest","Digest"],"kind":"trait"},"24:1071:17035":{"crate_id":24,"path":["typenum","private","IsGreaterPrivate"],"kind":"trait"},"1:39407:201":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:39385:202":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"18:13548:12542":{"crate_id":18,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:43936:15056":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"18:261:15262":{"crate_id":18,"path":["object","read","util","DebugLen"],"kind":"struct"},"18:11098:14781":{"crate_id":18,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:21182:16752":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"18:12592:12277":{"crate_id":18,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:21745:16751":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"7:1649:13430":{"crate_id":7,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:2398:17161":{"crate_id":6,"path":["std","io"],"kind":"module"},"18:13456:12506":{"crate_id":18,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:4619:17331":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"19:531:14745":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:44359:15174":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:906:15446":{"crate_id":6,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"18:9806:23928":{"crate_id":18,"path":["object","read","archive","Members"],"kind":"enum"},"1:41880:208":{"crate_id":1,"path":["core","sync","atomic","Ordering","Relaxed"],"kind":"foreign_type"},"12:2186:36674":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:44379:15179":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:410:165":{"crate_id":6,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:288:22941":{"crate_id":16,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:9290:194":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"25:77:1843":{"crate_id":25,"path":["block_buffer","Eager"],"kind":"struct"},"6:5774:15501":{"crate_id":6,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"7:4729:13667":{"crate_id":7,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:2162:16516":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"6:4629:14106":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"6:5611:206":{"crate_id":6,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:7714:16578":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"24:5814:5293":{"crate_id":24,"path":["typenum","int","Z0"],"kind":"struct"},"17:6763:14905":{"crate_id":17,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:30437:68":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:911:15430":{"crate_id":6,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:46687:14675":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:9753:11722":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:2602:128":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"18:13882:12621":{"crate_id":18,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"6:3495:11222":{"crate_id":6,"path":["std","io","Write"],"kind":"trait"},"18:10520:14776":{"crate_id":18,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"5:3217:34890":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:2513:149":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"25:0:1842":{"crate_id":25,"path":["block_buffer"],"kind":"module"},"7:4469:13582":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:10814:36373":{"crate_id":6,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"7:4842:13720":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"18:12864:12334":{"crate_id":18,"path":["object","macho","UuidCommand"],"kind":"struct"},"12:760:11685":{"crate_id":12,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"1:45933:14655":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:0:1410":{"crate_id":6,"path":["std"],"kind":"module"},"7:4963:13789":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"18:13659:12566":{"crate_id":18,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:2787:16540":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:6658:14891":{"crate_id":17,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"18:10253:15302":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"18:11568:23920":{"crate_id":18,"path":["object","read","RelocationTarget"],"kind":"enum"},"12:817:15435":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:8871:14326":{"crate_id":6,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:8138:15425":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"7:4496:13596":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"18:11034:15345":{"crate_id":18,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:20967:16761":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"17:6502:14885":{"crate_id":17,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:6197:15374":{"crate_id":17,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:46285:14666":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"18:14197:12722":{"crate_id":18,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:7855:23858":{"crate_id":17,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:10795:119":{"crate_id":6,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"19:652:11828":{"crate_id":19,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"18:12952:12346":{"crate_id":18,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"5:3737:15569":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:12847:1639":{"crate_id":1,"path":["core","core_arch","arch","x86_64"],"kind":"module"},"6:5302:120":{"crate_id":6,"path":["std","path","Display"],"kind":"struct"},"6:7705:17239":{"crate_id":6,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:44435:16721":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"18:12566:12274":{"crate_id":18,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:40215:15064":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"18:9913:15287":{"crate_id":18,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"5:2131:11596":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:42714:71":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:12431:136":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:43796:15134":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:7515:14930":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:45792:14649":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"5:7201:15016":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"5:1503:15431":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:20737:17039":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"4:339:5300":{"crate_id":4,"path":["digest","core_api","XofReaderCore"],"kind":"trait"},"7:5836:13903":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"18:11056:24039":{"crate_id":18,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"5:1138:32068":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:10450:11636":{"crate_id":6,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"18:8872:23913":{"crate_id":18,"path":["object","common","FileFlags"],"kind":"enum"},"7:5920:13953":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"7:6820:14189":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"5:7339:15018":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"18:12346:12238":{"crate_id":18,"path":["object","macho","FatHeader"],"kind":"struct"},"5:676:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"18:12065:12165":{"crate_id":18,"path":["object","elf","Dyn64"],"kind":"struct"},"5:6800:11696":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"18:11329:23918":{"crate_id":18,"path":["object","read","ObjectKind"],"kind":"enum"},"18:14350:12765":{"crate_id":18,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"7:5074:13839":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:12466:29819":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"18:13639:12558":{"crate_id":18,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"18:11992:12151":{"crate_id":18,"path":["object","elf","Rel64"],"kind":"struct"},"1:21176:16750":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:1820:14368":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:11997:1418":{"crate_id":6,"path":["std","str"],"kind":"primitive"},"7:4764:13684":{"crate_id":7,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:41794:16667":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"18:10621:15329":{"crate_id":18,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:6484:14877":{"crate_id":17,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"27:0:1729":{"crate_id":27,"path":["cpufeatures"],"kind":"module"},"18:13719:12576":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"18:13862:12614":{"crate_id":18,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:14:1965":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:20875:16754":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"18:12174:12195":{"crate_id":18,"path":["object","elf","HashHeader"],"kind":"struct"},"5:2966:34460":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:8125:15422":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"24:2508:1688":{"crate_id":24,"path":["typenum","generated","consts","U28"],"kind":"typedef"},"1:42978:15120":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:44544:205":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"1:41943:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:2541:12807":{"crate_id":17,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:10933:5354":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"22:75:11823":{"crate_id":22,"path":["crypto_common","InvalidLength"],"kind":"struct"},"24:1272:5411":{"crate_id":24,"path":["typenum","type_operators","SquareRoot"],"kind":"trait"},"7:4810:13707":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"6:915:15431":{"crate_id":6,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:8475:14316":{"crate_id":6,"path":["std","path","PrefixComponent"],"kind":"struct"},"19:491:14744":{"crate_id":19,"path":["memchr","cow","Imp"],"kind":"struct"},"7:5051:13833":{"crate_id":7,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"10:177:22904":{"crate_id":10,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:43415:5331":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"18:12711:12291":{"crate_id":18,"path":["object","macho","SymtabCommand"],"kind":"struct"},"7:6607:14086":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"7:4436:13568":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"4:457:14360":{"crate_id":4,"path":["digest","core_api","ct_variable","NoOid"],"kind":"struct"},"24:654:5383":{"crate_id":24,"path":["typenum","marker_traits","PowerOfTwo"],"kind":"trait"},"5:7531:11685":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"6:8351:14303":{"crate_id":6,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:5363:23845":{"crate_id":17,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"12:1831:11685":{"crate_id":12,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"7:7463:14228":{"crate_id":7,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:7592:23856":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:12649:11618":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"7:5015:13811":{"crate_id":7,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"5:5368:17129":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"6:9195:14340":{"crate_id":6,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:7240:36693":{"crate_id":17,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"6:7651:15508":{"crate_id":6,"path":["std","thread","Builder"],"kind":"struct"},"6:5748:15500":{"crate_id":6,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"18:9821:11970":{"crate_id":18,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:7463:14925":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:49939:16765":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:42060:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:1755:14365":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"6:9098:218":{"crate_id":6,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"6:11434:15482":{"crate_id":6,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"18:9990:11975":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"7:5967:13979":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"24:5724:5292":{"crate_id":24,"path":["typenum","bit","B1"],"kind":"struct"},"17:3220:12848":{"crate_id":17,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:11853:15589":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"18:14227:12729":{"crate_id":18,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:11411:11643":{"crate_id":6,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"18:13096:12373":{"crate_id":18,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:21275:17032":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:9655:11715":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"6:7758:15513":{"crate_id":6,"path":["std","error","private","Internal"],"kind":"struct"},"24:1007:17070":{"crate_id":24,"path":["typenum","private","PrivateMin"],"kind":"trait"},"17:2663:12812":{"crate_id":17,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"7:6705:14120":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"7:1709:13461":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"7:4818:13710":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:6142:194":{"crate_id":17,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:20679:11130":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:9185:35918":{"crate_id":6,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"7:4524:13612":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:7847:15514":{"crate_id":6,"path":["std","fs","ReadDir"],"kind":"struct"},"17:3635:11860":{"crate_id":17,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:44605:14638":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"24:611:5304":{"crate_id":24,"path":["typenum","marker_traits","NonZero"],"kind":"trait"},"17:6357:12897":{"crate_id":17,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"7:6022:14002":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:8919:17429":{"crate_id":6,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"7:4568:13634":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:8068:14936":{"crate_id":17,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"5:685:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:2355:189":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:8857:15532":{"crate_id":6,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"6:12014:1575":{"crate_id":6,"path":["std","usize"],"kind":"primitive"},"17:6850:12939":{"crate_id":17,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"12:2194:13174":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"21:46:128":{"crate_id":21,"path":["blobby","Error"],"kind":"enum"},"7:4800:13703":{"crate_id":7,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:42960:6026":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:42658:14620":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:22175:16382":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"18:10013:11977":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"7:6850:14204":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:8813:14323":{"crate_id":6,"path":["std","process","ExitStatus"],"kind":"struct"},"5:1288:15439":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:2825:12819":{"crate_id":17,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"23:260:5454":{"crate_id":23,"path":["generic_array","sequence","GenericSequence"],"kind":"trait"},"17:2421:12802":{"crate_id":17,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"18:14054:12667":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:10387:5336":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:1060:15441":{"crate_id":6,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"7:1696:13457":{"crate_id":7,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"18:13125:12376":{"crate_id":18,"path":["object","macho","Nlist32"],"kind":"struct"},"7:4463:13580":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:8145:14296":{"crate_id":6,"path":["std","io","util","Sink"],"kind":"struct"},"5:7213:11667":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"18:10845:12028":{"crate_id":18,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"22:44:2012":{"crate_id":22,"path":["crypto_common","Reset"],"kind":"trait"},"7:4716:13663":{"crate_id":7,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:3410:11607":{"crate_id":6,"path":["std","io","Guard"],"kind":"struct"},"18:9528:36697":{"crate_id":18,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"4:484:5305":{"crate_id":4,"path":["digest","core_api","rt_variable","RtVariableCoreWrapper"],"kind":"struct"},"18:14205:12723":{"crate_id":18,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"7:4678:13642":{"crate_id":7,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"10:393:22838":{"crate_id":10,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"12:2033:14924":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"18:14102:12704":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:8231:15527":{"crate_id":6,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:39511:15594":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"7:7250:14213":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"12:986:15439":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:6740:16650":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:5067:12879":{"crate_id":17,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:46239:14664":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:10936:15496":{"crate_id":6,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"6:4491:17357":{"crate_id":6,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"5:3178:14956":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"6:11992:1537":{"crate_id":6,"path":["std","unit"],"kind":"primitive"},"17:7665:12841":{"crate_id":17,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:44635:15183":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:12016:13":{"crate_id":6,"path":["std","fn"],"kind":"primitive"},"6:12009:1518":{"crate_id":6,"path":["std","u16"],"kind":"primitive"},"18:11388:23919":{"crate_id":18,"path":["object","read","SymbolSection"],"kind":"enum"},"7:6565:14062":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:6977:15391":{"crate_id":17,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"25:93:128":{"crate_id":25,"path":["block_buffer","Error"],"kind":"struct"},"6:919:15432":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:3732:15482":{"crate_id":6,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"18:9939:15289":{"crate_id":18,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"18:13140:12380":{"crate_id":18,"path":["object","macho","Nlist64"],"kind":"struct"},"6:8206:11959":{"crate_id":6,"path":["std","io","Bytes"],"kind":"struct"},"17:2399:12801":{"crate_id":17,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:5301:12881":{"crate_id":17,"path":["gimli","constants","DwOp"],"kind":"struct"},"18:9032:11952":{"crate_id":18,"path":["object","endian","BigEndian"],"kind":"struct"},"5:2243:15012":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:43832:15136":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"6:8849:5334":{"crate_id":6,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:11998:1502":{"crate_id":6,"path":["std","tuple"],"kind":"primitive"},"7:6136:14030":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:5425:15494":{"crate_id":6,"path":["std","process","ChildStderr"],"kind":"struct"},"5:7451:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"4:418:1999":{"crate_id":4,"path":["digest","Update"],"kind":"trait"},"17:4592:12865":{"crate_id":17,"path":["gimli","constants","DwVis"],"kind":"struct"},"18:10863:11980":{"crate_id":18,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:5234:190":{"crate_id":6,"path":["std","path","Path"],"kind":"struct"},"1:7758:31558":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:4263:15585":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"0:103:1726":{"crate_id":0,"path":["sha2","Sha512"],"kind":"typedef"},"5:1482:15446":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:44597:15604":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:6064:11614":{"crate_id":6,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"18:9952:11941":{"crate_id":18,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"5:4365:11674":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"18:14015:12655":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"7:5737:13846":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:9472:15514":{"crate_id":6,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"6:10721:15553":{"crate_id":6,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:43424:5332":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"18:13803:12600":{"crate_id":18,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:43444:5345":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"6:6889:11628":{"crate_id":6,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"6:4167:17353":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"18:11979:12149":{"crate_id":18,"path":["object","elf","Rela32"],"kind":"struct"},"7:1569:13372":{"crate_id":7,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"18:13981:12648":{"crate_id":18,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:7679:12842":{"crate_id":17,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"18:11020:15344":{"crate_id":18,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"18:11467:12070":{"crate_id":18,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"18:9118:11955":{"crate_id":18,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:21196:14370":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"7:6008:13999":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:11862:14754":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"5:3204:14957":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:149:11581":{"crate_id":17,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:3930:17327":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"5:1426:5335":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"18:13870:12615":{"crate_id":18,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:43850:15137":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"4:424:2001":{"crate_id":4,"path":["digest","FixedOutputReset"],"kind":"trait"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:925:17245":{"crate_id":6,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:4698:12867":{"crate_id":17,"path":["gimli","constants","DwLang"],"kind":"struct"},"18:11454:14795":{"crate_id":18,"path":["object","read","ObjectMap"],"kind":"struct"},"6:5494:15496":{"crate_id":6,"path":["std","process","Stdio"],"kind":"struct"},"6:7720:17240":{"crate_id":6,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:9477:11635":{"crate_id":6,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"18:11084:14777":{"crate_id":18,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"4:421:2000":{"crate_id":4,"path":["digest","FixedOutput"],"kind":"trait"},"18:12769:12317":{"crate_id":18,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:8950:674":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"12:2060:15441":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:43696:15130":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"18:11199:12046":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:8152:12844":{"crate_id":17,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:7264:134":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:11340:14996":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"18:13937:12637":{"crate_id":18,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:45662:14644":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:8210:13001":{"crate_id":17,"path":["gimli","read","value","Value"],"kind":"enum"},"1:2832:12965":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:9240:11222":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"6:10745:14982":{"crate_id":6,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"7:7278:14216":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"7:1911:18870":{"crate_id":7,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"4:440:2005":{"crate_id":4,"path":["digest","VariableOutput"],"kind":"trait"},"5:261:11651":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:10980:1841":{"crate_id":1,"path":["core","slice","raw","from_ref"],"kind":"function"},"5:1514:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:7313:36694":{"crate_id":17,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:2910:5448":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"18:13795:12598":{"crate_id":18,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"18:10351:11988":{"crate_id":18,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:43507:5346":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"18:3395:15273":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"5:4196:11607":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"18:13557:12546":{"crate_id":18,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"7:5799:13889":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:41618:14969":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:21308:14370":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"18:12161:12194":{"crate_id":18,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:7842:11897":{"crate_id":6,"path":["std","fs","Metadata"],"kind":"struct"},"24:1091:17036":{"crate_id":24,"path":["typenum","private","IsLessOrEqualPrivate"],"kind":"trait"},"1:30509:28280":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:39429:203":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"18:10323:15308":{"crate_id":18,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"4:291:5306":{"crate_id":4,"path":["digest","core_api","wrapper","CoreProxy"],"kind":"trait"},"24:1051:17034":{"crate_id":24,"path":["typenum","private","IsEqualPrivate"],"kind":"trait"},"24:1905:17043":{"crate_id":24,"path":["typenum","uint","SetBit"],"kind":"trait"},"12:749:11667":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:48003:11064":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"15:187:22929":{"crate_id":15,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:40342:11707":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"18:8997:23894":{"crate_id":18,"path":["object","endian","Endianness"],"kind":"enum"},"1:32205:15513":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"17:5972:14799":{"crate_id":17,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:8808:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:5389:15492":{"crate_id":6,"path":["std","process","ChildStdin"],"kind":"struct"},"1:40935:15101":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"6:7518:11948":{"crate_id":6,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"7:6044:14009":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"7:1557:13364":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:7631:17032":{"crate_id":6,"path":["std","sealed","Sealed"],"kind":"trait"},"5:5614:11682":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"24:5746:5289":{"crate_id":24,"path":["typenum","int","PInt"],"kind":"struct"},"17:7739:12830":{"crate_id":17,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:4:1024":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:2507:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"23:0:1899":{"crate_id":23,"path":["generic_array"],"kind":"module"},"1:40279:28284":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:40188:15056":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"0:101:1722":{"crate_id":0,"path":["sha2","Sha512_256"],"kind":"typedef"},"1:3317:69":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"17:530:14797":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"6:3296:15479":{"crate_id":6,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:2373:12800":{"crate_id":17,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:11990:946":{"crate_id":6,"path":["std","never"],"kind":"primitive"},"6:2371:17281":{"crate_id":6,"path":["std","fs","read_link"],"kind":"function"},"6:10923:15512":{"crate_id":6,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:41641:14613":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:720:142":{"crate_id":6,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"6:10763:14988":{"crate_id":6,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:11873:16699":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"18:10148:15299":{"crate_id":18,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:6864:12941":{"crate_id":17,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:40949:15103":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"24:1206:5386":{"crate_id":24,"path":["typenum","type_operators","Max"],"kind":"trait"},"1:7227:5413":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"18:12891:12336":{"crate_id":18,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"7:4944:13781":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:21915:15039":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"5:207:11650":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"7:62:17467":{"crate_id":7,"path":["libc","unix","DIR"],"kind":"enum"},"7:7272:14214":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"12:1538:15448":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"15:160:15426":{"crate_id":15,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:1422:144":{"crate_id":6,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"18:12106:12175":{"crate_id":18,"path":["object","elf","Verdaux"],"kind":"struct"},"7:532:13292":{"crate_id":7,"path":["libc","unix","hostent"],"kind":"struct"},"1:22688:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"5:629:15566":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"6:4563:17374":{"crate_id":6,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:1583:14958":{"crate_id":6,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:1917:14369":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:45863:14652":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:4900:17381":{"crate_id":6,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:39483:15593":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"18:9966:11980":{"crate_id":18,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"18:14150:12705":{"crate_id":18,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"7:4291:13476":{"crate_id":7,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:11394:5319":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"7:5994:13988":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"19:80:27864":{"crate_id":19,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"18:12815:12327":{"crate_id":18,"path":["object","macho","DylibReference"],"kind":"struct"},"2:234:210":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:3580:12851":{"crate_id":17,"path":["gimli","arch","X86"],"kind":"struct"},"18:10330:15311":{"crate_id":18,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:2523:237":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"17:7693:12832":{"crate_id":17,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"7:1513:13339":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:10966:14325":{"crate_id":6,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"17:6438:14876":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"5:4395:11607":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"18:11498:12071":{"crate_id":18,"path":["object","read","Import"],"kind":"struct"},"25:106:5301":{"crate_id":25,"path":["block_buffer","BlockBuffer"],"kind":"struct"},"7:6744:14138":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:2373:17282":{"crate_id":6,"path":["std","fs","canonicalize"],"kind":"function"},"22:39:17078":{"crate_id":22,"path":["crypto_common","IvSizeUser"],"kind":"trait"},"1:40461:15080":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"18:13332:12412":{"crate_id":18,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"18:12792:12326":{"crate_id":18,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:42763:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"17:6128:14863":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:43178:15121":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:11995:312":{"crate_id":6,"path":["std","array"],"kind":"primitive"},"6:8384:17392":{"crate_id":6,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"7:4456:13577":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:43572:14631":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:7869:14968":{"crate_id":6,"path":["std","fs","Permissions"],"kind":"struct"},"19:719:11849":{"crate_id":19,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"24:1241:5432":{"crate_id":24,"path":["typenum","type_operators","IsLessOrEqual"],"kind":"trait"},"1:3181:30096":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:2590:116":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:4022:103":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:43750:5336":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:46799:14677":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"18:9409:36706":{"crate_id":18,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:6787:29755":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"18:12077:12166":{"crate_id":18,"path":["object","elf","Versym"],"kind":"struct"},"17:2737:12815":{"crate_id":17,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:21011:16762":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:40470:15081":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"5:1672:11651":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:1599:1384":{"crate_id":1,"path":["core","mem","size_of"],"kind":"function"},"1:2931:5733":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"18:10249:15301":{"crate_id":18,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"18:10671:24014":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:40116:15058":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:45638:14643":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"24:844:17052":{"crate_id":24,"path":["typenum","private","PrivatePow"],"kind":"trait"},"19:671:15260":{"crate_id":19,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"18:10161:15300":{"crate_id":18,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"22:54:17082":{"crate_id":22,"path":["crypto_common","InnerInit"],"kind":"trait"},"24:998:17031":{"crate_id":24,"path":["typenum","private","PrivateRem"],"kind":"trait"},"5:878:11659":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:2740:5730":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"17:3867:12855":{"crate_id":17,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:20692:27957":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:3078:5328":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:39325:200":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"12:723:14953":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"6:942:15437":{"crate_id":6,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"19:766:27875":{"crate_id":19,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:42099:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:8329:14095":{"crate_id":6,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"7:6573:14067":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:9033:14331":{"crate_id":6,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:21743:17032":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"18:13905:12626":{"crate_id":18,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"18:11178:14789":{"crate_id":18,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"6:1772:15460":{"crate_id":6,"path":["std","env","Vars"],"kind":"struct"},"1:3513:11667":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"8:32:22823":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"19:481:14743":{"crate_id":19,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:8841:14325":{"crate_id":6,"path":["std","process","ExitCode"],"kind":"struct"},"16:306:22942":{"crate_id":16,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"5:7263:15017":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:10823:36377":{"crate_id":6,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"6:5741:15497":{"crate_id":6,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:6250:12892":{"crate_id":17,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"7:1527:13344":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"5:7255:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"5:1118:34454":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"18:1973:15267":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"5:3183:34887":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:44080:15154":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"21:0:1996":{"crate_id":21,"path":["blobby"],"kind":"module"},"18:11623:12078":{"crate_id":18,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:5625:11611":{"crate_id":6,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:7656:14255":{"crate_id":6,"path":["std","thread","ThreadId"],"kind":"struct"},"1:45762:14648":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:6724:14893":{"crate_id":17,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"18:3519:15274":{"crate_id":18,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"18:12502:12265":{"crate_id":18,"path":["object","macho","Section64"],"kind":"struct"},"18:13991:12651":{"crate_id":18,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:11192:14335":{"crate_id":6,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"24:6250:5320":{"crate_id":24,"path":["typenum","Greater"],"kind":"struct"},"18:400:15263":{"crate_id":18,"path":["object","read","any","Segment"],"kind":"struct"},"1:22036:28276":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"18:9875:15284":{"crate_id":18,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:40958:15104":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"18:14236:12731":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:47137:14682":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"24:1221:5430":{"crate_id":24,"path":["typenum","type_operators","IsEqual"],"kind":"trait"},"1:45952:14656":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"18:9188:11957":{"crate_id":18,"path":["object","endian","I32Bytes"],"kind":"struct"},"18:8949:23916":{"crate_id":18,"path":["object","common","SymbolFlags"],"kind":"enum"},"7:5877:13924":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"7:4483:13590":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:11940:15563":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:2349:182":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"5:895:5334":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"6:4042:17334":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:5819:11612":{"crate_id":6,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"5:7427:15024":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:22149:14389":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:2816:16542":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"5:7414:15022":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:10221:5339":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:39698:28123":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:5590:12829":{"crate_id":17,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"4:502:5307":{"crate_id":4,"path":["digest","core_api","xof_reader","XofReaderCoreWrapper"],"kind":"struct"},"6:8977:107":{"crate_id":6,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"7:554:13304":{"crate_id":7,"path":["libc","unix","winsize"],"kind":"struct"},"1:20722:28230":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:40584:15093":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:43494:5351":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:4325:11705":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:39365:199":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:7433:13004":{"crate_id":17,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:527:11597":{"crate_id":6,"path":["std","thread","Packet"],"kind":"struct"},"6:8452:6026":{"crate_id":6,"path":["std","path","State"],"kind":"enum"},"4:436:2004":{"crate_id":4,"path":["digest","ExtendableOutputReset"],"kind":"trait"},"7:4556:13625":{"crate_id":7,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"18:9850:23929":{"crate_id":18,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:2855:16548":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"18:11428:12069":{"crate_id":18,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:2752:16379":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"18:13673:12570":{"crate_id":18,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"18:12148:12190":{"crate_id":18,"path":["object","elf","NoteHeader32"],"kind":"struct"},"18:9442:36703":{"crate_id":18,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"18:10981:15341":{"crate_id":18,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:4764:390":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"18:13957:12643":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"19:538:11833":{"crate_id":19,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"24:828:17055":{"crate_id":24,"path":["typenum","private","PrivateSub"],"kind":"trait"},"23:300:5457":{"crate_id":23,"path":["generic_array","sequence","Shorten"],"kind":"trait"},"12:1852:14957":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"18:10957:15339":{"crate_id":18,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:7306:121":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:42931:15118":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"7:5987:13987":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:8803:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"12:844:15438":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"7:5890:13930":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"22:56:17083":{"crate_id":22,"path":["crypto_common","InnerIvInit"],"kind":"trait"},"1:43586:15122":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"24:653:5416":{"crate_id":24,"path":["typenum","marker_traits","TypeArray"],"kind":"trait"},"18:9485:36699":{"crate_id":18,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:7474:12837":{"crate_id":17,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:477:11595":{"crate_id":6,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:6470:12843":{"crate_id":17,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:4389:11235":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:2705:5370":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"18:10051:15292":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:11571:15000":{"crate_id":6,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:2164:16517":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"14:110:36675":{"crate_id":14,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:8795:15530":{"crate_id":6,"path":["std","process","CommandArgs"],"kind":"struct"},"6:2915:128":{"crate_id":6,"path":["std","io","error","Error"],"kind":"struct"},"6:10750:14967":{"crate_id":6,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"8:79:22830":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"24:1190:5382":{"crate_id":24,"path":["typenum","type_operators","Cmp"],"kind":"trait"},"17:4564:12864":{"crate_id":17,"path":["gimli","constants","DwAccess"],"kind":"struct"},"18:9344:36702":{"crate_id":18,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:4113:15583":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:22076:28283":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"5:2960:34461":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"18:10266:15303":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:7289:12982":{"crate_id":17,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:44554:211":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:20923:29856":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"18:10066:15293":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:6323:14868":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:42218:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:8488:15589":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"18:8542:23895":{"crate_id":18,"path":["object","common","Architecture"],"kind":"enum"},"24:6294:126":{"crate_id":24,"path":["typenum","Equal"],"kind":"struct"},"1:9275:112":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:40392:15596":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"24:1274:5404":{"crate_id":24,"path":["typenum","type_operators","Logarithm2"],"kind":"trait"},"12:97:14946":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:8827:14324":{"crate_id":6,"path":["std","process","ExitStatusError"],"kind":"struct"},"18:10430:14767":{"crate_id":18,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"18:13109:12374":{"crate_id":18,"path":["object","macho","NoteCommand"],"kind":"struct"},"24:1131:17038":{"crate_id":24,"path":["typenum","private","IsGreaterOrEqualPrivate"],"kind":"trait"},"1:1629:590":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"18:11264:12051":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"7:1690:13454":{"crate_id":7,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"7:5767:13871":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"19:507:11828":{"crate_id":19,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:8136:13000":{"crate_id":6,"path":["std","io","util","Empty"],"kind":"struct"},"6:11155:14336":{"crate_id":6,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"24:1195:5401":{"crate_id":24,"path":["typenum","type_operators","Len"],"kind":"trait"},"7:4895:13747":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:2821:16543":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:22490:176":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:8086:14939":{"crate_id":17,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:12007:747":{"crate_id":6,"path":["std","i128"],"kind":"primitive"},"12:1068:15443":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:43902:15140":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"7:1575:13374":{"crate_id":7,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"0:102:1724":{"crate_id":0,"path":["sha2","Sha384"],"kind":"typedef"},"18:11220:24040":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:5028:12878":{"crate_id":17,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:40493:15085":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"5:1257:14924":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:3168:16553":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"24:1184:5387":{"crate_id":24,"path":["typenum","type_operators","Pow"],"kind":"trait"},"5:2690:14357":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:1666:1097":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"23:163:5453":{"crate_id":23,"path":["generic_array","functional","FunctionalSequence"],"kind":"trait"},"24:785:17059":{"crate_id":24,"path":["typenum","private","Trim"],"kind":"trait"},"24:2808:1855":{"crate_id":24,"path":["typenum","generated","consts","U128"],"kind":"typedef"},"1:4436:11236":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:44049:15150":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:12638:107":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"7:1681:13448":{"crate_id":7,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"18:9926:15288":{"crate_id":18,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:46093:14660":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"7:5882:13925":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"7:4315:13493":{"crate_id":7,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:40222:15065":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:40502:15086":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:44647:14641":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:12518:15591":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:11378:5317":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:9465:129":{"crate_id":6,"path":["std","sys","unix","fs","File"],"kind":"struct"},"17:7099:14331":{"crate_id":17,"path":["gimli","read","op","Operation"],"kind":"enum"},"7:4374:13537":{"crate_id":7,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:890:11667":{"crate_id":6,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:4186:11233":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"22:12:1845":{"crate_id":22,"path":["crypto_common","Block"],"kind":"typedef"},"1:8381:16662":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"23:362:5371":{"crate_id":23,"path":["generic_array","ArrayLength"],"kind":"trait"},"6:8273:14969":{"crate_id":6,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:20873:17032":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"17:2926:22987":{"crate_id":17,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"18:11250:12048":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"5:7351:17110":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:42439:11226":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"7:4862:13730":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:9163:15542":{"crate_id":6,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"1:31013:11130":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"7:5900:13937":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:4050:17336":{"crate_id":6,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:21529:16763":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:47673:14686":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:10785:130":{"crate_id":6,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:44260:15169":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"18:13683:12571":{"crate_id":18,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:23234:14391":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:3934:11607":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"1:40262:101":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:5689:14810":{"crate_id":17,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"5:2141:15007":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"18:10293:15305":{"crate_id":18,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"7:4626:13638":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:6603:11626":{"crate_id":6,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"6:12012:1517":{"crate_id":6,"path":["std","u128"],"kind":"primitive"},"17:5398:11952":{"crate_id":17,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"18:8841:23912":{"crate_id":18,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:4380:11706":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:1561:11685":{"crate_id":6,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"18:14026:12659":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:42257:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:2203:129":{"crate_id":6,"path":["std","fs","File"],"kind":"struct"},"6:7529:15560":{"crate_id":6,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"6:5409:15493":{"crate_id":6,"path":["std","process","ChildStdout"],"kind":"struct"},"10:52:22855":{"crate_id":10,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:7043:11613":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:42138:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"5:7184:14359":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:4506:12862":{"crate_id":17,"path":["gimli","constants","DwDs"],"kind":"struct"},"18:13055:12368":{"crate_id":18,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"7:6028:14005":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"7:1595:13388":{"crate_id":7,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:2767:12957":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"18:10377:14762":{"crate_id":18,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:7414:159":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:22787:14390":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:4868:12873":{"crate_id":17,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:8383:15588":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:7588:11633":{"crate_id":6,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:22457:175":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:43604:15124":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"18:10812:12025":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"18:10486:14771":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"23:403:1900":{"crate_id":23,"path":["generic_array","GenericArray"],"kind":"struct"},"1:41811:210":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"17:8021:13059":{"crate_id":17,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:43882:15138":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"6:5045:15488":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:12011:1520":{"crate_id":6,"path":["std","u64"],"kind":"primitive"},"3:0:1985":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"7:1520:13341":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"24:1198:5389":{"crate_id":24,"path":["typenum","type_operators","PartialDiv"],"kind":"trait"},"6:3294:15478":{"crate_id":6,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:7923:14960":{"crate_id":6,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:12015:1141":{"crate_id":6,"path":["std","reference"],"kind":"primitive"},"1:22424:178":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"6:352:15449":{"crate_id":6,"path":["std","thread","scoped","Scope"],"kind":"struct"},"6:631:15453":{"crate_id":6,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"18:10303:11896":{"crate_id":18,"path":["object","read","elf","note","Note"],"kind":"struct"},"6:8903:17430":{"crate_id":6,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"18:8740:23909":{"crate_id":18,"path":["object","common","SymbolKind"],"kind":"enum"},"1:41667:181":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"5:6081:11607":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"5:3583:5334":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:43778:15133":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"12:2174:13171":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"5:5320:11651":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"18:9887:15285":{"crate_id":18,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"6:8236:17324":{"crate_id":6,"path":["std","net","Shutdown"],"kind":"enum"},"1:30985:183":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:42432:11225":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"5:6560:11165":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:2842:16545":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"18:12982:12352":{"crate_id":18,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"5:5771:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"22:36:17077":{"crate_id":22,"path":["crypto_common","KeySizeUser"],"kind":"trait"},"4:492:1693":{"crate_id":4,"path":["digest","core_api","wrapper","CoreWrapper"],"kind":"struct"},"18:12457:12259":{"crate_id":18,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"19:736:27874":{"crate_id":19,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"18:9274:11959":{"crate_id":18,"path":["object","read","util","Bytes"],"kind":"struct"},"6:3936:17326":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"12:1845:14956":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"24:6192:5379":{"crate_id":24,"path":["typenum","array","TArr"],"kind":"struct"},"18:12526:12266":{"crate_id":18,"path":["object","macho","Fvmlib"],"kind":"struct"},"18:10906:12031":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:41735:5335":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"18:13513:12541":{"crate_id":18,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:47992:11063":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:44423:15180":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"18:11127:12071":{"crate_id":18,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:9721:11717":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"6:1835:15464":{"crate_id":6,"path":["std","env","ArgsOs"],"kind":"struct"},"5:7465:15025":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"6:1757:613":{"crate_id":6,"path":["std","env"],"kind":"module"},"12:285:14947":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"7:6805:14182":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:12008:1521":{"crate_id":6,"path":["std","u8"],"kind":"primitive"},"0:98:1716":{"crate_id":0,"path":["sha2","Sha224"],"kind":"typedef"},"6:8544:5334":{"crate_id":6,"path":["std","path","Iter"],"kind":"struct"},"6:10072:15462":{"crate_id":6,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"9:0:1728":{"crate_id":9,"path":["cfg_if"],"kind":"module"},"17:7407:13003":{"crate_id":17,"path":["gimli","read","op","Expression"],"kind":"struct"},"18:12424:12251":{"crate_id":18,"path":["object","macho","LcStr"],"kind":"struct"},"5:5841:11667":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:21862:15038":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"7:4984:13801":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"12:403:36668":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"6:11313:14993":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:7362:23855":{"crate_id":17,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:6239:36695":{"crate_id":17,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:43536:5348":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"6:10512:15476":{"crate_id":6,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:2313:188":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"7:573:13314":{"crate_id":7,"path":["libc","unix","itimerval"],"kind":"struct"},"1:45730:14647":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"5:3171:5334":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"11:44:13177":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"4:0:1681":{"crate_id":4,"path":["digest"],"kind":"module"},"18:8632:23906":{"crate_id":18,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:10900:5353":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"18:12646:12285":{"crate_id":18,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"18:14329:12759":{"crate_id":18,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:11173:14349":{"crate_id":6,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:2921:5731":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:45893:14653":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"18:11815:12116":{"crate_id":18,"path":["object","elf","Ident"],"kind":"struct"},"1:47343:14683":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:4032:12857":{"crate_id":17,"path":["gimli","constants","DwTag"],"kind":"struct"},"18:11045:12033":{"crate_id":18,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:6232:15386":{"crate_id":17,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:3162:16551":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:6973:35936":{"crate_id":6,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"6:3966:17328":{"crate_id":6,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:864:14953":{"crate_id":6,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"18:11371:12067":{"crate_id":18,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:3385:15580":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"11:36:13176":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"18:9899:11973":{"crate_id":18,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:41653:14614":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"7:4328:13503":{"crate_id":7,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:42686:110":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"7:5044:13830":{"crate_id":7,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"18:10471:14770":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:47797:14688":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:40101:15056":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:1746:14362":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"10:0:1986":{"crate_id":10,"path":["miniz_oxide"],"kind":"module"},"1:40942:15102":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"6:8890:14327":{"crate_id":6,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"18:10199:11985":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:4129:35064":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"21:11:17014":{"crate_id":21,"path":["blobby","BlobIterator"],"kind":"struct"},"1:4409:11094":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"5:2035:14960":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"5:7547:11689":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"22:16:186":{"crate_id":22,"path":["crypto_common","Output"],"kind":"typedef"},"1:40535:15089":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"18:8924:23915":{"crate_id":18,"path":["object","common","SectionFlags"],"kind":"enum"},"1:9499:145":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:2984:16550":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"24:783:17028":{"crate_id":24,"path":["typenum","private","InternalMarker"],"kind":"trait"},"17:2611:12810":{"crate_id":17,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"23:346:5458":{"crate_id":23,"path":["generic_array","sequence","Concat"],"kind":"trait"},"1:43516:5349":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"19:574:11828":{"crate_id":19,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"18:9716:36700":{"crate_id":18,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:7763:23857":{"crate_id":17,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:45814:14650":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"7:6720:14126":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"19:96:27865":{"crate_id":19,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"18:2133:15268":{"crate_id":18,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:4335:11234":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:22754:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:47957:11061":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:44012:16714":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:1566:14955":{"crate_id":6,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"7:5863:13923":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"4:427:2002":{"crate_id":4,"path":["digest","XofReader"],"kind":"trait"},"1:40724:15097":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"18:13854:12613":{"crate_id":18,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"7:6868:14207":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:6554:14887":{"crate_id":17,"path":["gimli","read","line","LineRows"],"kind":"struct"},"18:9318:11962":{"crate_id":18,"path":["object","read","util","StringTable"],"kind":"struct"},"1:7721:16646":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"25:36:1864":{"crate_id":25,"path":["block_buffer","BufferKind"],"kind":"trait"},"18:12878:12335":{"crate_id":18,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:44227:15163":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"18:9561:15278":{"crate_id":18,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"24:6272:5321":{"crate_id":24,"path":["typenum","Less"],"kind":"struct"},"7:5058:13836":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:11578:15000":{"crate_id":6,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"7:4543:13621":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:9025:15540":{"crate_id":6,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:2690:5729":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"12:695:15431":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"7:5805:13890":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"18:12994:12354":{"crate_id":18,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"18:10786:15330":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:5959:14838":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"7:4664:13641":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:7277:5735":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"18:10883:12030":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"18:12186:12198":{"crate_id":18,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"5:4034:11651":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"18:11642:12081":{"crate_id":18,"path":["object","read","CompressedData"],"kind":"struct"},"6:3520:17309":{"crate_id":6,"path":["std","io","BufRead"],"kind":"trait"},"6:7015:11629":{"crate_id":6,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"7:7523:14232":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"5:822:11657":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"5:7398:28284":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"24:6363:5288":{"crate_id":24,"path":["typenum","uint","UTerm"],"kind":"struct"},"17:2962:22988":{"crate_id":17,"path":["gimli","common","SectionId"],"kind":"enum"},"7:6067:14015":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"24:942:17064":{"crate_id":24,"path":["typenum","private","PrivateDiv"],"kind":"trait"},"18:9016:11951":{"crate_id":18,"path":["object","endian","LittleEndian"],"kind":"struct"},"12:2201:15018":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"19:599:36709":{"crate_id":19,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"5:3802:11685":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"6:4792:11608":{"crate_id":6,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"6:3504:35662":{"crate_id":6,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"18:12936:12345":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:7568:36690":{"crate_id":17,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"24:1261:5400":{"crate_id":24,"path":["typenum","type_operators","IsGreaterOrEqual"],"kind":"trait"},"18:12631:12282":{"crate_id":18,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"6:4180:17354":{"crate_id":6,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:12444:151":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:2567:12808":{"crate_id":17,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"7:4413:13558":{"crate_id":7,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"7:1506:13336":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"19:564:11835":{"crate_id":19,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"14:226:13169":{"crate_id":14,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"18:11967:12146":{"crate_id":18,"path":["object","elf","Rel32"],"kind":"struct"},"18:10568:15323":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"18:13155:12043":{"crate_id":18,"path":["object","macho","Relocation"],"kind":"struct"},"6:10231:17412":{"crate_id":6,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:2694:225":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"18:10945:15338":{"crate_id":18,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:40738:15098":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"18:11955:12145":{"crate_id":18,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:44562:195":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:9738:11601":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"6:4958:17388":{"crate_id":6,"path":["std","panic","always_abort"],"kind":"function"},"6:8958:14330":{"crate_id":6,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"7:4341:13513":{"crate_id":7,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"18:13029:12366":{"crate_id":18,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:3438:14300":{"crate_id":6,"path":["std","io","Read"],"kind":"trait"},"7:4787:13698":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"18:10175:11980":{"crate_id":18,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"18:9655:15279":{"crate_id":18,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"5:1776:11685":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:7717:16645":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:4633:14110":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"19:614:36707":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:10515:15478":{"crate_id":6,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"22:48:17080":{"crate_id":22,"path":["crypto_common","KeyInit"],"kind":"trait"},"12:667:15430":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"18:12539:12269":{"crate_id":18,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"18:13787:12596":{"crate_id":18,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:2745:106":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"6:11328:15507":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"12:968:14924":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"6:2205:15468":{"crate_id":6,"path":["std","fs","DirEntry"],"kind":"struct"},"1:3196:16556":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"18:9840:15282":{"crate_id":18,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:8285:17355":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"6:1913:17272":{"crate_id":6,"path":["std","error","Indented"],"kind":"struct"},"17:8176:23859":{"crate_id":17,"path":["gimli","read","value","ValueType"],"kind":"enum"},"18:13620:12557":{"crate_id":18,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"19:755:14761":{"crate_id":19,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:2803:12818":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"19:681:14748":{"crate_id":19,"path":["memchr","memmem","Finder"],"kind":"struct"},"18:13732:12582":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:9968:15112":{"crate_id":6,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"6:6291:206":{"crate_id":6,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:43598:15123":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"17:6018:23849":{"crate_id":17,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"18:9048:11953":{"crate_id":18,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:40983:14599":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:2737:11117":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"17:5807:14821":{"crate_id":17,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"5:2970:34462":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:9932:17032":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:2748:11121":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"1:40545:15090":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:4620:12866":{"crate_id":17,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"7:6688:14115":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"18:13914:12629":{"crate_id":18,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"18:12053:12162":{"crate_id":18,"path":["object","elf","Dyn32"],"kind":"struct"},"18:11726:12092":{"crate_id":18,"path":["object","archive","AixFileHeader"],"kind":"struct"},"18:13999:12652":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:44363:15175":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"5:5130:11679":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:4631:14108":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"18:11074:12038":{"crate_id":18,"path":["object","read","pe","export","Export"],"kind":"struct"},"24:924:17049":{"crate_id":24,"path":["typenum","private","PrivateCmp"],"kind":"trait"},"17:2589:12809":{"crate_id":17,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:42668:68":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"18:12605:12278":{"crate_id":18,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"18:11943:12142":{"crate_id":18,"path":["object","elf","Syminfo32"],"kind":"struct"},"10:450:22837":{"crate_id":10,"path":["miniz_oxide","MZError"],"kind":"enum"},"18:12004:12152":{"crate_id":18,"path":["object","elf","Rela64"],"kind":"struct"},"18:11144:14787":{"crate_id":18,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"7:4587:13635":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:1636:11110":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"24:1878:17041":{"crate_id":24,"path":["typenum","uint","GetBit"],"kind":"trait"},"1:42970:15119":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"7:0:826":{"crate_id":7,"path":["libc"],"kind":"module"},"22:46:1844":{"crate_id":22,"path":["crypto_common","AlgorithmName"],"kind":"trait"},"4:383:2011":{"crate_id":4,"path":["digest","digest","DynDigest"],"kind":"trait"},"6:2587:15470":{"crate_id":6,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"5:7440:11680":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"6:5076:15488":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:12005:750":{"crate_id":6,"path":["std","i32"],"kind":"primitive"},"1:46307:14667":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:45970:14657":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"5:7247:11165":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:5100:12880":{"crate_id":17,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:22024:15044":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"7:4938:13778":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:2471:6073":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"18:10390:14764":{"crate_id":18,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"18:10544:15319":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:22589:5324":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:8976:30406":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"18:13964:12644":{"crate_id":18,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"18:12552:11998":{"crate_id":18,"path":["object","macho","Dylib"],"kind":"struct"},"1:11664:5355":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:1543:11607":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"12:1822:11165":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"18:10597:15327":{"crate_id":18,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:30421:11113":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"18:12618:12280":{"crate_id":18,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:44034:15144":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"18:12377:12245":{"crate_id":18,"path":["object","macho","MachHeader32"],"kind":"struct"},"7:4908:13757":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:21044:16757":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:20911:16756":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"17:6886:12834":{"crate_id":17,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:2683:220":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"18:11905:12136":{"crate_id":18,"path":["object","elf","Sym32"],"kind":"struct"},"1:21633:27960":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:40203:16600":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:44347:15171":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"1:47595:14685":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"18:12671:12287":{"crate_id":18,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"18:12089:12167":{"crate_id":18,"path":["object","elf","Verdef"],"kind":"struct"},"1:45708:14646":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"6:11116:14324":{"crate_id":6,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"18:13697:12572":{"crate_id":18,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"6:877:14954":{"crate_id":6,"path":["std","collections","hash","map","Values"],"kind":"struct"},"5:4004:11667":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:44206:16715":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"12:1663:144":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:5567:12827":{"crate_id":17,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"7:4955:13784":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:8971:31524":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"24:0:1853":{"crate_id":24,"path":["typenum"],"kind":"module"},"6:8972:15533":{"crate_id":6,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:43920:15142":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"18:13894:12622":{"crate_id":18,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:48041:11066":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:11346:14997":{"crate_id":6,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:2314:12791":{"crate_id":17,"path":["gimli","common","Encoding"],"kind":"struct"},"1:41870:11165":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"5:7292:11165":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"7:7558:14240":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"7:4489:13593":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:21097:16753":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"7:653:17879":{"crate_id":7,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:2700:228":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"6:7367:36126":{"crate_id":6,"path":["std","panicking","Hook"],"kind":"enum"},"1:10090:5334":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"7:4748:13676":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"7:5818:13891":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:7268:152":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"18:256:15261":{"crate_id":18,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:45618:14642":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:9239:210":{"crate_id":1,"path":["core","fmt","Result"],"kind":"typedef"},"1:43355:15603":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"12:1858:14958":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"1:21306:16758":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:40180:15061":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"12:736:14954":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"6:8801:186":{"crate_id":6,"path":["std","process","Output"],"kind":"struct"},"7:6036:14007":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:8291:15528":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"7:1495:13331":{"crate_id":7,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"18:12254:12202":{"crate_id":18,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"18:12851:12332":{"crate_id":18,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"23:195:5450":{"crate_id":23,"path":["generic_array","iter","GenericArrayIter"],"kind":"struct"},"6:1920:659":{"crate_id":6,"path":["std","ffi"],"kind":"module"},"18:12333:12236":{"crate_id":18,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"18:13757:12590":{"crate_id":18,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"7:1638:13422":{"crate_id":7,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:40432:15075":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"7:1603:13393":{"crate_id":7,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"18:11290:23917":{"crate_id":18,"path":["object","read","FileKind"],"kind":"enum"},"18:434:11904":{"crate_id":18,"path":["object","read","any","Section"],"kind":"struct"},"6:1833:15463":{"crate_id":6,"path":["std","env","Args"],"kind":"struct"},"1:46017:14658":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"18:9866:15283":{"crate_id":18,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:2857:12820":{"crate_id":17,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:8105:14942":{"crate_id":17,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"7:5025:13816":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"}},"external_crates":{"26":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"23":{"name":"generic_array","html_root_url":null},"20":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"block_buffer","html_root_url":null},"22":{"name":"crypto_common","html_root_url":null},"19":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"digest","html_root_url":null},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"27":{"name":"cpufeatures","html_root_url":null},"24":{"name":"typenum","html_root_url":"https://docs.rs/typenum/1.16.0/"},"21":{"name":"blobby","html_root_url":"https://docs.rs/blobby/0.3.1/"},"18":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"6":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}