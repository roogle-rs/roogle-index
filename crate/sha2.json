{"root":"0:0:1813","crate_version":"0.10.8","includes_private":false,"index":{"0:49:1954":{"id":"0:49:1954","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[30,4],"end":[30,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Eager","id":"25:77:1933","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:75:1963":{"id":"0:75:1963","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[134,4],"end":[142,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Buffer","id":"4:328:1937","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Output","id":"22:16:201","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12385:15092":{"id":"1:12385:15092","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43415:12053","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12400:11293":{"id":"1:12400:11293","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41469:194","prim@char":"6:12051:446","self::pattern":"1:12060:16713"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41467:196","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12065:15678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:55:1958":{"id":"0:55:1958","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[46,4],"end":[46,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"TruncSide","id":"4:512:1940","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}}},"a:1:2832:5820-0:127:1787":{"id":"a:1:2832:5820-0:127:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2832:5820","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8560:16678-0:132:1788":{"id":"a:1:8560:16678-0:132:1788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8560:16678","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12359:864":{"id":"1:12359:864","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"6:12051:446"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:101:1808":{"id":"0:101:1808","crate_id":0,"name":"Sha512_256","span":{"filename":"src/lib.rs","begin":[92,0],"end":[92,92]},"visibility":"public","docs":"SHA-512/256 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:492:1779","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:473:1780","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U32","id":"24:2520:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512_256","id":"0:456:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:12368:32271":{"id":"1:12368:32271","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12470:32301":{"id":"1:12470:32301","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:12051:446","self::pattern":"1:12060:16713"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12065:15678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71:1957":{"id":"0:71:1957","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[114,4],"end":[114,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"24:6316:5379","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5379","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5379","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5379","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5379","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5379","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5379","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"24:6363:5380","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"24:5724:5384","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5383","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5383","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5383","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5383","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5383","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5383","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"0:135":{"id":"0:135","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[89,9],"end":[89,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2276:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:136:450"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12429:32286":{"id":"1:12429:32286","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41467:196","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12065:15678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12380:32273":{"id":"1:12380:32273","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"6:12057:1496","crate::ops::IndexMut":"1:3076:16571","str::slice_unchecked":"1:12379:32272"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12447:32291":{"id":"1:12447:32291","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46":{"id":"0:46","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[25,0],"end":[27,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"22:22:1936","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:47:1953"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[113,0],"end":[115,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"22:33:1939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:71:1957"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:77":{"id":"0:77","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[145,0],"end":[150,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"22:46:1934","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:78:1976"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:5-4:0:1767":{"id":"0:5-4:0:1767","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[55,17],"end":[55,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"digest","name":"digest","id":"4:0:1767","glob":false}}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[95,0],"end":[95,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:357:1946","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12449:32292":{"id":"1:12449:32292","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:127:1787":{"id":"0:127:1787","crate_id":0,"name":"Sha256VarCore","span":{"filename":"src/core_api.rs","begin":[18,0],"end":[21,1]},"visibility":"public","docs":"Core block-level SHA-256 hasher with variable output size.\n\nSupports initialization only for 28 and 32 byte output sizes,\ni.e. 224 and 256 bits respectively.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:8560:16678-0:127:1787","a:1:8561:16677-0:127:1787","a:1:2792:249-0:127:1787","a:1:2775:240-0:127:1787","a:1:2832:5820-0:127:1787","b:1:2260-0:127:1787","b:1:2566-0:127:1787","b:1:2570-0:127:1787","b:1:3411-0:127:1787","b:1:2263-0:127:1787","b:1:2581-0:127:1787","b:1:2576-0:127:1787","b:5:680-0:127:1787","b:24:1171-0:127:1787","0:54","0:130","0:61","0:52","0:46","0:45","0:48","0:50","0:59"]}}},"1:12483:32304":{"id":"1:12483:32304","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4559:32304"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:43728:15162","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12358":{"id":"1:12358","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12359:864","1:12360:11254","1:12361:32267","1:12362:32268","1:12364:32269","1:12367:32270","1:12368:32271","1:12369:338","1:12370:337","1:12371:5967","1:12373:15946","1:12375:15947","1:12377:15948","1:12379:32272","1:12380:32273","1:12381:32274","1:12382:32275","1:12383:15243","1:12384:15252","1:12385:15092","1:12386:29044","1:12387:29042","1:12388:32276","1:12389:32277","1:12390:29030","1:12391:28157","1:12394:32278","1:12397:32279","1:12400:11293","1:12404:11253","1:12408:32280","1:12411:29029","1:12414:32281","1:12417:32282","1:12420:32283","1:12423:32284","1:12426:32285","1:12429:32286","1:12432:32287","1:12435:2056","1:12438:32288","1:12441:32289","1:12444:32290","1:12447:32291","1:12449:32292","1:12451:32293","1:12453:32294","1:12454:32295","1:12455:32296","1:12458:32297","1:12461:32298","1:12464:32299","1:12467:32300","1:12470:32301","1:12473:32302","1:12476:32303","1:12478:16071","1:12479:16072","1:12480:16076","1:12481:16077","1:12482:16078","1:12483:32304","1:12485:16591","1:12486:32305"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3411-0:132:1788":{"id":"b:1:3411-0:132:1788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:5819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3409:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3413:1593"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5516":{"id":"5:5516","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5517:32980","5:5518:11197","5:5521:32981","5:5524:32982","5:5532:32983","5:5533:32984","5:5534:16656","5:5535:16073","5:5536:16074"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:132:1788":{"id":"0:132:1788","crate_id":0,"name":"Sha512VarCore","span":{"filename":"src/core_api.rs","begin":[90,0],"end":[93,1]},"visibility":"public","docs":"Core block-level SHA-512 hasher with variable output size.\n\nSupports initialization only for 28, 32, 48, and 64 byte output sizes,\ni.e. 224, 256, 384, and 512 bits respectively.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:8560:16678-0:132:1788","a:1:8561:16677-0:132:1788","a:1:2792:249-0:132:1788","a:1:2775:240-0:132:1788","a:1:2832:5820-0:132:1788","b:1:2260-0:132:1788","b:1:2566-0:132:1788","b:1:2570-0:132:1788","b:1:3411-0:132:1788","b:1:2263-0:132:1788","b:1:2581-0:132:1788","b:1:2576-0:132:1788","b:5:680-0:132:1788","b:24:1171-0:132:1788","0:70","0:68","0:77","0:64","0:135","0:66","0:63","0:79","0:72"]}}},"1:12360:11254":{"id":"1:12360:11254","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12386:29044":{"id":"1:12386:29044","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12387:29042"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:43703:15240","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67:1954":{"id":"0:67:1954","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[102,4],"end":[102,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Eager","id":"25:77:1933","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"1:2265:27957":{"id":"1:2265:27957","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:682:15103":{"id":"5:682:15103","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"b:1:2576-0:132:1788":{"id":"b:1:2576-0:132:1788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2550:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2546:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2579:132","1:2580:1580"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12388:32276":{"id":"1:12388:32276","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:43683:15238","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12420:32283":{"id":"1:12420:32283","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12060:16713","str::split":"1:12408:32280","prim@char":"6:12051:446","str::split_terminator":"1:12417:32282"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43497:15230","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12065:15678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12065:15678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12080:16719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12384:15252":{"id":"1:12384:15252","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"6:12051:446"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43405:15224","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6-4:358:1768":{"id":"0:6-4:358:1768","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[55,23],"end":[55,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"digest::Digest","name":"Digest","id":"4:358:1768","glob":false}}},"1:12441:32289":{"id":"1:12441:32289","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12060:16713","`DoubleEndedIterator`":"1:7476:125","prim@char":"6:12051:446","str::rmatch_indices":"1:12444:32290"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43579:15233","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12065:15678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12453:32294":{"id":"1:12453:32294","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12482:16078":{"id":"1:12482:16078","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5518:11197":{"id":"5:5518:11197","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7487:245"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12065:15678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:61":{"id":"0:61","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[78,0],"end":[83,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9485:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:62:710"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:53:1957":{"id":"0:53:1957","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[42,4],"end":[42,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"24:6316:5379","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5379","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5379","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5379","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5379","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5379","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"24:6363:5380","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"24:5724:5384","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5383","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5383","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5383","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5383","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5383","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"0:136:450":{"id":"0:136:450","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[89,9],"end":[89,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12464:32299":{"id":"1:12464:32299","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:12051:446","self::pattern":"1:12060:16713"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41467:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12065:15678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12065:15678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12080:16719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:131:450":{"id":"0:131:450","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[17,9],"end":[17,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[17,9],"end":[17,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2276:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:131:450"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2775:240-0:132:1788":{"id":"a:1:2775:240-0:132:1788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2775:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12423:32284":{"id":"1:12423:32284","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"6:12051:446","self::pattern":"1:12060:16713","str::rsplitn":"1:12426:32285"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43533:5430","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12065:15678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12478:16071":{"id":"1:12478:16071","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12375:15947":{"id":"1:12375:15947","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12404:11253":{"id":"1:12404:11253","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41469:194","prim@char":"6:12051:446","self::pattern":"1:12060:16713"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41467:196","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12065:15678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12065:15678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12080:16719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5536:16074":{"id":"5:5536:16074","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12482:16078"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2585:1578":{"id":"1:2585:1578","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:41612:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2550:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12438:32288":{"id":"1:12438:32288","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12060:16713","`DoubleEndedIterator`":"1:7476:125","prim@char":"6:12051:446","str::matches":"1:12435:2056"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43651:15237","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12065:15678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12065:15678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12080:16719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"24:1173:201":{"id":"24:1173:201","crate_id":24,"name":"Output","span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/src/type_operators.rs","begin":[35,4],"end":[35,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:99:1804":{"id":"0:99:1804","crate_id":0,"name":"Sha256","span":{"filename":"src/lib.rs","begin":[88,0],"end":[88,84]},"visibility":"public","docs":"SHA-256 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:492:1779","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:473:1780","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U32","id":"24:2520:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha256","id":"0:376:1789","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"a:1:8561:16677-0:127:1787":{"id":"a:1:8561:16677-0:127:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8561:16677","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:64":{"id":"0:64","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[97,0],"end":[99,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"22:22:1936","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:65:1953"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:3413:1593":{"id":"1:3413:1593","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39314:14557","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51:1955":{"id":"0:51:1955","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[35,4],"end":[38,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"Block","id":"22:12:1935","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:50":{"id":"0:50","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[33,0],"end":[39,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:330:1941","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:51:1955"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:60:1976":{"id":"0:60:1976","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[73,4],"end":[75,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9460:136","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9441:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:103:1812":{"id":"0:103:1812","crate_id":0,"name":"Sha512","span":{"filename":"src/lib.rs","begin":[96,0],"end":[96,84]},"visibility":"public","docs":"SHA-512 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:492:1779","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:473:1780","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U64","id":"24:2616:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512","id":"0:408:1793","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"5:5524:32982":{"id":"5:5524:32982","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7487:245"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12473:32302":{"id":"1:12473:32302","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:12051:446","self::pattern":"1:12060:16713"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12065:15678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12065:15678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12080:16719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2792:249-0:127:1787":{"id":"a:1:2792:249-0:127:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2792:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:2572:736":{"id":"1:2572:736","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1813":{"id":"0:0:1813","crate_id":0,"name":"sha2","span":{"filename":"src/lib.rs","begin":[1,0],"end":[96,84]},"visibility":"public","docs":"An implementation of the [SHA-2][1] cryptographic hash algorithms.\n\nThere are 6 standard algorithms specified in the SHA-2 standard: [`Sha224`],\n[`Sha256`], [`Sha512_224`], [`Sha512_256`], [`Sha384`], and [`Sha512`].\n\nAlgorithmically, there are only 2 core algorithms: SHA-256 and SHA-512.\nAll other algorithms are just applications of these with different initial\nhash values, and truncated to different digest bit lengths. The first two\nalgorithms in the list are based on SHA-256, while the last four are based\non SHA-512.\n\n# Usage\n\n```rust\nuse hex_literal::hex;\nuse sha2::{Sha256, Sha512, Digest};\n\n// create a Sha256 object\nlet mut hasher = Sha256::new();\n\n// write input message\nhasher.update(b\"hello world\");\n\n// read hash digest and consume hasher\nlet result = hasher.finalize();\n\nassert_eq!(result[..], hex!(\"\n    b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\n\")[..]);\n\n// same for Sha512\nlet mut hasher = Sha512::new();\nhasher.update(b\"hello world\");\nlet result = hasher.finalize();\n\nassert_eq!(result[..], hex!(\"\n    309ecc489c12d6eb4cc40f50c902f2b4d0ed77ee511a7c7a9bcd3ca86d4cd86f\n    989dd35bc5ff499670da34255b45b0cfd830e81f605dcf7dc5542e93ae9cd76f\n\")[..]);\n```\n\nAlso see [RustCrypto/hashes][2] readme.\n\n[1]: https://en.wikipedia.org/wiki/SHA-2\n[2]: https://github.com/RustCrypto/hashes","links":{"`Sha256`":"0:99:1804","`Sha224`":"0:98:1802","`Sha512`":"0:103:1812","`Sha384`":"0:102:1810","`Sha512_256`":"0:101:1808","`Sha512_224`":"0:100:1806"},"attrs":["#![no_std]","#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\",\nhtml_favicon_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\")]","#![warn(missing_docs, rust_2018_idioms)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:5-4:0:1767","0:6-4:358:1768","0:96-0:127:1787","0:97-0:132:1788","0:98:1802","0:99:1804","0:100:1806","0:101:1808","0:102:1810","0:103:1812"],"is_stripped":false}}},"5:5533:32984":{"id":"5:5533:32984","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2100","`String`":"5:7487:245"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2100","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7220:14454","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:684:27959":{"id":"5:684:27959","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65:1953":{"id":"0:65:1953","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[98,4],"end":[98,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"24:6316:5379","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5379","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5379","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5379","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5379","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5379","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5379","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5379","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"24:6363:5380","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"24:5724:5384","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5383","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5383","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5383","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5383","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5383","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5383","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5383","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"0:80:710":{"id":"0:80:710","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[154,4],"end":[156,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9460:136","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9441:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12390:29030":{"id":"1:12390:29030","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:43721:15242","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:57:1963":{"id":"0:57:1963","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[60,4],"end":[68,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Buffer","id":"4:328:1937","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Output","id":"22:16:201","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:56:993":{"id":"0:56:993","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[49,4],"end":[57,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["output_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:41612:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"InvalidOutputSize","id":"4:522:1947","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2569:11247":{"id":"1:2569:11247","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2543:137"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12480:16076":{"id":"1:12480:16076","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5521:32981":{"id":"5:5521:32981","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7487:245"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7487:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12065:15678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:102:1810":{"id":"0:102:1810","crate_id":0,"name":"Sha384","span":{"filename":"src/lib.rs","begin":[94,0],"end":[94,84]},"visibility":"public","docs":"SHA-384 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:492:1779","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:473:1780","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U48","id":"24:2568:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha384","id":"0:392:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"a:1:2775:240-0:127:1787":{"id":"a:1:2775:240-0:127:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2775:240","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2263-0:127:1787":{"id":"b:1:2263-0:127:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:5819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2257:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2265:27957"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12426:32285":{"id":"1:12426:32285","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"6:12051:446","str::splitn":"1:12423:32284","self::pattern":"1:12060:16713"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43551:5426","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12065:15678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12065:15678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12080:16719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12455:32296":{"id":"1:12455:32296","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"6:12051:446","self::pattern":"1:12060:16713"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12065:15678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12065:15678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12085:16718","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:98:1802":{"id":"0:98:1802","crate_id":0,"name":"Sha224","span":{"filename":"src/lib.rs","begin":[86,0],"end":[86,84]},"visibility":"public","docs":"SHA-224 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:492:1779","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:473:1780","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U28","id":"24:2508:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha224","id":"0:424:1795","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:12467:32300":{"id":"1:12467:32300","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:12051:446","self::pattern":"1:12060:16713"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12065:15678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12065:15678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12080:16719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2566-0:132:1788":{"id":"b:1:2566-0:132:1788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2569:11247"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3411-0:127:1787":{"id":"b:1:3411-0:127:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:5819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3409:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3413:1593"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12479:16072":{"id":"1:12479:16072","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39501:28283","Self::is_ascii":"1:12478:16071"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41467:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39501:28283","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:24:1171-0:132:1788":{"id":"b:24:1171-0:132:1788","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"24:1168:5518","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["24:1173:201"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:97-0:132:1788":{"id":"0:97-0:132:1788","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[76,34],"end":[76,47]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"core_api::Sha512VarCore","name":"Sha512VarCore","id":"0:132:1788","glob":false}}},"0:72":{"id":"0:72","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[117,0],"end":[143,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:341:1942","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:73:1958","0:74:993","0:75:1963"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:73:1958":{"id":"0:73:1958","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[118,4],"end":[118,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"TruncSide","id":"4:512:1940","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}}},"1:12367:32270":{"id":"1:12367:32270","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11620:16720"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12387:29042":{"id":"1:12387:29042","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12386:29044"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:43712:15241","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12417:32282":{"id":"1:12417:32282","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12060:16713","str::split":"1:12408:32280","prim@char":"6:12051:446","`DoubleEndedIterator`":"1:7476:125","str::rsplit_terminator":"1:12420:32283"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43479:15229","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12065:15678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535:16073":{"id":"5:5535:16073","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12481:16077"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:680-0:127:1787":{"id":"b:5:680-0:127:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2276:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:252","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:15103","5:683:27958","5:684:27959"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:96-0:127:1787":{"id":"0:96-0:127:1787","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[76,19],"end":[76,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"core_api::Sha256VarCore","name":"Sha256VarCore","id":"0:127:1787","glob":false}}},"0:62:710":{"id":"0:62:710","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[80,4],"end":[82,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9460:136","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9441:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12414:32281":{"id":"1:12414:32281","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12060:16713","`DoubleEndedIterator`":"1:7476:125","prim@char":"6:12051:446","str::split":"1:12408:32280"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43447:5432","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12065:15678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12065:15678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12080:16719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:24:1171-0:127:1787":{"id":"b:24:1171-0:127:1787","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"24:1168:5518","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["24:1173:201"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2566-0:127:1787":{"id":"b:1:2566-0:127:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2569:11247"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12397:32279":{"id":"1:12397:32279","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"6:12051:446","self::pattern":"1:12060:16713"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12065:15678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12065:15678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12080:16719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2260-0:132:1788":{"id":"b:1:2260-0:132:1788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:5819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2254:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2262:2012"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:69:1955":{"id":"0:69:1955","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[107,4],"end":[110,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"Block","id":"22:12:1935","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12364:32269":{"id":"1:12364:32269","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"1:12362:32268"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12481:16077":{"id":"1:12481:16077","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12382:32275":{"id":"1:12382:32275","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"1:12381:32274"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2260-0:127:1787":{"id":"b:1:2260-0:127:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:5819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2254:99","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2262:2012"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12391:28157":{"id":"1:12391:28157","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"6:12051:446","self::pattern":"1:12060:16713"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12065:15678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12458:32297":{"id":"1:12458:32297","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:12051:446","self::pattern":"1:12060:16713"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12065:15678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:100:1806":{"id":"0:100:1806","crate_id":0,"name":"Sha512_224","span":{"filename":"src/lib.rs","begin":[90,0],"end":[90,92]},"visibility":"public","docs":"SHA-512/224 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:492:1779","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:473:1780","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U28","id":"24:2508:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512_224","id":"0:440:1797","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:12373:15946":{"id":"1:12373:15946","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41469:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41467:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68":{"id":"0:68","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[105,0],"end":[111,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:330:1941","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:69:1955"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12394:32278":{"id":"1:12394:32278","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"6:12051:446","self::pattern":"1:12060:16713"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12065:15678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12432:32287":{"id":"1:12432:32287","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41467:196","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12065:15678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12065:15678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12080:16719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:54":{"id":"0:54","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[45,0],"end":[69,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:341:1942","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:55:1958","0:56:993","0:57:1963"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:74:993":{"id":"0:74:993","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[121,4],"end":[131,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["output_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:41612:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"InvalidOutputSize","id":"4:522:1947","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12370:337":{"id":"1:12370:337","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"6:12068:1602"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5517:32980":{"id":"5:5517:32980","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2100","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7220:14454","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2100","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7220:14454","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2832:5820-0:132:1788":{"id":"a:1:2832:5820-0:132:1788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2832:5820","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:2262:2012":{"id":"1:2262:2012","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8560:16678-0:127:1787":{"id":"a:1:8560:16678-0:127:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8560:16678","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12381:32274":{"id":"1:12381:32274","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"1:12382:32275"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12389:32277":{"id":"1:12389:32277","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:43693:15239","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12369:338":{"id":"1:12369:338","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12370:337","`u8`":"6:12068:1602"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12435:2056":{"id":"1:12435:2056","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12060:16713","`DoubleEndedIterator`":"1:7476:125","prim@char":"6:12051:446","str::rmatches":"1:12438:32288"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43633:15236","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12065:15678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12454:32295":{"id":"1:12454:32295","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12485:16591":{"id":"1:12485:16591","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4560:16591"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:43737:15156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2570-0:132:1788":{"id":"b:1:2570-0:132:1788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2572:736"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:47:1953":{"id":"0:47:1953","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[26,4],"end":[26,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"24:6316:5379","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5379","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5379","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5379","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5379","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5379","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5379","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"24:6363:5380","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"24:5724:5384","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5383","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5383","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5383","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5383","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5383","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5383","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"b:1:2576-0:127:1787":{"id":"b:1:2576-0:127:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2550:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2546:259","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2579:132","1:2580:1580"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2581-0:132:1788":{"id":"b:1:2581-0:132:1788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2550:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2584:132","1:2585:1578"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:680-0:132:1788":{"id":"b:5:680-0:132:1788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2276:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:252","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:15103","5:683:27958","5:684:27959"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:66":{"id":"0:66","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[101,0],"end":[103,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:332:1938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:67:1954"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2570-0:127:1787":{"id":"b:1:2570-0:127:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2543:137","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2572:736"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12371:5967":{"id":"1:12371:5967","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41469:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41467:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12383:15243":{"id":"1:12383:15243","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"6:12051:446"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43399:15223","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[41,0],"end":[43,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"22:33:1939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:53:1957"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:59":{"id":"0:59","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[71,0],"end":[76,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"22:46:1934","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:60:1976"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8561:16677-0:132:1788":{"id":"a:1:8561:16677-0:132:1788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8561:16677","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12362:32268":{"id":"1:12362:32268","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2580:1580":{"id":"1:2580:1580","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41612:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2550:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:45":{"id":"0:45","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[23,0],"end":[23,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:357:1946","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2792:249-0:132:1788":{"id":"a:1:2792:249-0:132:1788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2792:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2263-0:132:1788":{"id":"b:1:2263-0:132:1788","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2782:5819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2257:100","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2265:27957"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12379:32272":{"id":"1:12379:32272","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"6:12057:1496","str::slice_mut_unchecked":"1:12380:32273","crate::ops::Index":"1:3072:16570"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12377:15948":{"id":"1:12377:15948","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10150:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:683:27958":{"id":"5:683:27958","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12408:32280":{"id":"1:12408:32280","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12060:16713","`DoubleEndedIterator`":"1:7476:125","prim@char":"6:12051:446","str::split_whitespace":"1:12386:29044","str::rsplit":"1:12414:32281"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43429:5428","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12065:15678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12444:32290":{"id":"1:12444:32290","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12060:16713","`DoubleEndedIterator`":"1:7476:125","prim@char":"6:12051:446","str::match_indices":"1:12441:32289"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43597:15234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12065:15678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12065:15678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12080:16719","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12461:32298":{"id":"1:12461:32298","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:12051:446","self::pattern":"1:12060:16713"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41467:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12065:15678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2581-0:127:1787":{"id":"b:1:2581-0:127:1787","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2540:156","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2550:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2584:132","1:2585:1578"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12476:32303":{"id":"1:12476:32303","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12021:131","`FromStr`":"1:12020:16397"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41612:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12020:16397","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12020:16397","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12361:32267":{"id":"1:12361:32267","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12486:32305":{"id":"1:12486:32305","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4557:32305"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:43746:15161","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12411:29029":{"id":"1:12411:29029","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"6:12051:446","self::pattern":"1:12060:16713"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:11876:5445","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12065:15678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:48":{"id":"0:48","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[29,0],"end":[31,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:332:1938","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1787","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:49:1954"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:79":{"id":"0:79","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[152,0],"end":[157,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9485:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:80:710"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:78:1976":{"id":"0:78:1976","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[147,4],"end":[149,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9460:136","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9441:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2579:132":{"id":"1:2579:132","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2550:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"1:12451:32293":{"id":"1:12451:32293","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5532:32983":{"id":"5:5532:32983","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7487:245"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5534:16656":{"id":"5:5534:16656","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7487:245"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7487:245","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2584:132":{"id":"1:2584:132","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:31972:6161","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"paths":{"5:1374:96":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"18:10265:15386":{"crate_id":18,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:4585:12961":{"crate_id":17,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:47762:11150":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:40346:15190":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:10540:5433":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"19:681:14839":{"crate_id":19,"path":["memchr","memmem","Finder"],"kind":"struct"},"18:9137:12048":{"crate_id":18,"path":["object","endian","U32Bytes"],"kind":"struct"},"18:14001:12718":{"crate_id":18,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"24:653:5506":{"crate_id":24,"path":["typenum","marker_traits","TypeArray"],"kind":"trait"},"23:163:5543":{"crate_id":23,"path":["generic_array","functional","FunctionalSequence"],"kind":"trait"},"19:481:14834":{"crate_id":19,"path":["memchr","cow","CowBytes"],"kind":"struct"},"18:8794:23939":{"crate_id":18,"path":["object","common","SymbolKind"],"kind":"enum"},"1:43728:15162":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:3744:15570":{"crate_id":6,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:47797:11152":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"18:13667:12639":{"crate_id":18,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"18:10059:12071":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:42761:6115":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"6:5091:15575":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:45597:14740":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"24:1202:5475":{"crate_id":24,"path":["typenum","type_operators","Min"],"kind":"trait"},"18:8978:23945":{"crate_id":18,"path":["object","common","SectionFlags"],"kind":"enum"},"17:5363:12979":{"crate_id":17,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"6:12056:1464":{"crate_id":6,"path":["std","slice"],"kind":"primitive"},"17:4527:12959":{"crate_id":17,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:30218:5536":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"7:4718:13760":{"crate_id":7,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:4138:36439":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"5:1464:15050":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:7645:14350":{"crate_id":6,"path":["std","thread","local","AccessError"],"kind":"struct"},"18:12945:12426":{"crate_id":18,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"15:187:22957":{"crate_id":15,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:7669:14351":{"crate_id":6,"path":["std","thread","ThreadId"],"kind":"struct"},"1:43703:15240":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"7:7520:14326":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:42487:113":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:1671:1146":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"18:12810:12387":{"crate_id":18,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:22137:14466":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:8488:14412":{"crate_id":6,"path":["std","path","PrefixComponent"],"kind":"struct"},"19:690:14842":{"crate_id":19,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"5:7420:15117":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"6:2409:17180":{"crate_id":6,"path":["std","io"],"kind":"module"},"24:1168:5518":{"crate_id":24,"path":["typenum","type_operators","Same"],"kind":"trait"},"5:822:11750":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"24:1111:17056":{"crate_id":24,"path":["typenum","private","IsNotEqualPrivate"],"kind":"trait"},"18:14090:12742":{"crate_id":18,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"19:699:14843":{"crate_id":19,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"12:2194:13272":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"18:12876:12412":{"crate_id":18,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:8854:14421":{"crate_id":6,"path":["std","process","ExitCode"],"kind":"struct"},"1:12643:142":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:39945:14688":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"22:22:1936":{"crate_id":22,"path":["crypto_common","BlockSizeUser"],"kind":"trait"},"18:9488:36854":{"crate_id":18,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"5:6511:11744":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"6:11625:36098":{"crate_id":6,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:45968:14753":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"0:0:1813":{"crate_id":0,"path":["sha2"],"kind":"module"},"17:5673:12926":{"crate_id":17,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"5:676:252":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:21345:16769":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"7:6574:14158":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"18:14522:12871":{"crate_id":18,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:22220:14471":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"6:12000:15652":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"6:8971:14426":{"crate_id":6,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"7:1681:13546":{"crate_id":7,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"7:6680:14210":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"18:9350:12055":{"crate_id":18,"path":["object","read","util","ByteString"],"kind":"struct"},"18:13162:12464":{"crate_id":18,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:3447:14396":{"crate_id":6,"path":["std","io","Read"],"kind":"trait"},"4:436:2096":{"crate_id":4,"path":["digest","ExtendableOutputReset"],"kind":"trait"},"6:6650:236":{"crate_id":6,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:10802:15086":{"crate_id":6,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"6:6473:11718":{"crate_id":6,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"24:1905:17062":{"crate_id":24,"path":["typenum","uint","SetBit"],"kind":"trait"},"6:949:15524":{"crate_id":6,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:20876:29437":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:45513:14737":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:47899:11158":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"18:9985:15376":{"crate_id":18,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:6545:12998":{"crate_id":17,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"24:989:17048":{"crate_id":24,"path":["typenum","private","PrivateDivInt"],"kind":"trait"},"7:7287:14312":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"8:32:22851":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:47742:5926":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:5137:206":{"crate_id":6,"path":["std","path","PathBuf"],"kind":"struct"},"1:43479:15229":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"18:10012:12078":{"crate_id":18,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"7:4545:13718":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:234:229":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"18:14460:12858":{"crate_id":18,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"12:630:5424":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"18:400:15350":{"crate_id":18,"path":["object","read","any","Segment"],"kind":"struct"},"18:10165:23977":{"crate_id":18,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"7:4491:13690":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:44160:15274":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"18:2209:15358":{"crate_id":18,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"7:4666:13738":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:6192:15132":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"6:3419:11701":{"crate_id":6,"path":["std","io","Guard"],"kind":"struct"},"1:3020:5417":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:4915:17400":{"crate_id":6,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"23:382:5532":{"crate_id":23,"path":["generic_array","GenericArrayImplOdd"],"kind":"struct"},"18:12724:12375":{"crate_id":18,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:7581:11724":{"crate_id":6,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"18:12778:12383":{"crate_id":18,"path":["object","macho","ThreadCommand"],"kind":"struct"},"18:9531:36856":{"crate_id":18,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"18:13148:12463":{"crate_id":18,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:2543:137":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"17:3830:12951":{"crate_id":17,"path":["gimli","constants","DwUt"],"kind":"struct"},"12:657:11259":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"12:403:36825":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:43651:15237":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"18:14282:12808":{"crate_id":18,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:6792:15002":{"crate_id":17,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:43399:15223":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"18:11845:12189":{"crate_id":18,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:40749:15203":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:6153:11710":{"crate_id":6,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"24:1174:5519":{"crate_id":24,"path":["typenum","type_operators","Abs"],"kind":"trait"},"1:12286:115":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"18:12711:12374":{"crate_id":18,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:39989:15156":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"18:12267:12287":{"crate_id":18,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:30240:68":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"5:3720:15057":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"7:5858:14009":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"12:2060:15528":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:2550:258":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:40535:15198":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"18:10370:15389":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"18:10023:15366":{"crate_id":18,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"18:11281:12138":{"crate_id":18,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"18:14355:12828":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:21449:16768":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"18:12252:12281":{"crate_id":18,"path":["object","elf","Vernaux"],"kind":"struct"},"12:2201:15116":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:2406:12899":{"crate_id":17,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"18:11244:12168":{"crate_id":18,"path":["object","read","pe","import","Import"],"kind":"enum"},"5:6332:17161":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:22318:14483":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:7534:12936":{"crate_id":17,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:44007:16734":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:43721:15242":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:10814:14352":{"crate_id":6,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"7:4640:13736":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:3679:17344":{"crate_id":6,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"7:5808:13986":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:22344:16398":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"18:13890:12690":{"crate_id":18,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"18:9086:12046":{"crate_id":18,"path":["object","endian","BigEndian"],"kind":"struct"},"4:522:1947":{"crate_id":4,"path":["digest","InvalidOutputSize"],"kind":"struct"},"5:207:11743":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:47648:14780":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"5:3183:34994":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"18:11389:15434":{"crate_id":18,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"6:10107:15632":{"crate_id":6,"path":["std","sys","unix","os","Env"],"kind":"struct"},"6:8932:17448":{"crate_id":6,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:6361:14966":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"18:12373:12299":{"crate_id":18,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:2540:156":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"5:1492:15517":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"18:13298:12487":{"crate_id":18,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"18:10903:15417":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:47876:11157":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:3797:12950":{"crate_id":17,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"18:13575:12603":{"crate_id":18,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:22758:193":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:40233:15175":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"7:1702:13556":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:44156:15273":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"11:44:13275":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"18:11617:12168":{"crate_id":18,"path":["object","read","Import"],"kind":"struct"},"6:2382:17300":{"crate_id":6,"path":["std","fs","read_link"],"kind":"function"},"6:11072:11733":{"crate_id":6,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"18:11327:14887":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:44018:15259":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"7:6045:14103":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"7:7618:14348":{"crate_id":7,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:8239:13099":{"crate_id":17,"path":["gimli","read","value","Value"],"kind":"enum"},"6:1429:150":{"crate_id":6,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:12065:15678":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"12:399:36824":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"18:10410:15392":{"crate_id":18,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"18:9933:15372":{"crate_id":18,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"6:10844:14393":{"crate_id":6,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:39307:15683":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"7:6145:14126":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:41680:198":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"6:6256:11714":{"crate_id":6,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"7:482:13359":{"crate_id":7,"path":["libc","unix","utimbuf"],"kind":"struct"},"7:5886:14021":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"5:2959:15103":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:3529:17328":{"crate_id":6,"path":["std","io","BufRead"],"kind":"trait"},"7:1590:13484":{"crate_id":7,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"7:587:13420":{"crate_id":7,"path":["libc","unix","servent"],"kind":"struct"},"12:844:15525":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"18:14076:12740":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"7:4317:13591":{"crate_id":7,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"7:6829:14285":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:9026:15624":{"crate_id":6,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"7:4986:13898":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:12953:16764":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:4277:15674":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:43429:5428":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"19:80:27901":{"crate_id":19,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"7:4965:13886":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:4240:15572":{"crate_id":6,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"7:5976:14076":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:39087:16576":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"6:12076:13":{"crate_id":6,"path":["std","fn"],"kind":"primitive"},"6:3305:15566":{"crate_id":6,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"24:783:17047":{"crate_id":24,"path":["typenum","private","InternalMarker"],"kind":"trait"},"1:44061:15269":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"7:4856:13822":{"crate_id":7,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:364:15537":{"crate_id":6,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"7:4498:13693":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:6433:15203":{"crate_id":6,"path":["std","sync","once","Once"],"kind":"struct"},"4:473:1780":{"crate_id":4,"path":["digest","core_api","ct_variable","CtVariableCoreWrapper"],"kind":"struct"},"19:538:11926":{"crate_id":19,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"4:448:2098":{"crate_id":4,"path":["digest","VariableOutputReset"],"kind":"trait"},"1:7529:5824":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"19:727:11945":{"crate_id":19,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"5:4234:5424":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"18:11316:12142":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:40049:14689":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"4:484:5397":{"crate_id":4,"path":["digest","core_api","rt_variable","RtVariableCoreWrapper"],"kind":"struct"},"1:2879:16561":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:7621:23886":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:45619:14741":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"12:1845:15053":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"12:1611:11686":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"18:14134:12752":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:416:177":{"crate_id":6,"path":["std","thread","local","LocalKey"],"kind":"struct"},"24:6192:5469":{"crate_id":24,"path":["typenum","array","TArr"],"kind":"struct"},"6:646:17255":{"crate_id":6,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:40355:15191":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:42019:87":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:12656:158":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"19:582:11222":{"crate_id":19,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"21:79:17040":{"crate_id":21,"path":["blobby","Blob3Iterator"],"kind":"struct"},"17:4862:12969":{"crate_id":17,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:2548:12905":{"crate_id":17,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:2924:13063":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"25:77:1933":{"crate_id":25,"path":["block_buffer","Eager"],"kind":"struct"},"7:4850:13819":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"5:1503:15518":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"23:362:5461":{"crate_id":23,"path":["generic_array","ArrayLength"],"kind":"trait"},"7:4889:13839":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"7:6805:14275":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:32033:15153":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:47290:14775":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"7:5776:13968":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:6304:223":{"crate_id":6,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"21:46:132":{"crate_id":21,"path":["blobby","Error"],"kind":"enum"},"18:13286:12480":{"crate_id":18,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:43712:15241":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"24:828:17074":{"crate_id":24,"path":["typenum","private","PrivateSub"],"kind":"trait"},"1:3013:5821":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"22:39:17097":{"crate_id":22,"path":["crypto_common","IvSizeUser"],"kind":"trait"},"1:40336:15189":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"7:5996:14084":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:9176:15628":{"crate_id":6,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"18:11393:132":{"crate_id":18,"path":["object","read","Error"],"kind":"struct"},"18:13244:12473":{"crate_id":18,"path":["object","macho","Nlist32"],"kind":"struct"},"18:261:15349":{"crate_id":18,"path":["object","read","util","DebugLen"],"kind":"struct"},"18:9102:12047":{"crate_id":18,"path":["object","endian","U16Bytes"],"kind":"struct"},"6:10109:15631":{"crate_id":6,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"6:3975:17347":{"crate_id":6,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:2810:12916":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:41671:11259":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"6:12058:1583":{"crate_id":6,"path":["std","tuple"],"kind":"primitive"},"18:14420:12847":{"crate_id":18,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:2989:121":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"24:6316:5379":{"crate_id":24,"path":["typenum","uint","UInt"],"kind":"struct"},"17:8205:23889":{"crate_id":17,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:44423:173":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"24:642:5505":{"crate_id":24,"path":["typenum","marker_traits","Integer"],"kind":"trait"},"18:10468:12086":{"crate_id":18,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"6:4059:17355":{"crate_id":6,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"24:1016:17091":{"crate_id":24,"path":["typenum","private","PrivateMax"],"kind":"trait"},"1:2170:16533":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"1:40224:15174":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:40395:15194":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"24:924:17068":{"crate_id":24,"path":["typenum","private","PrivateCmp"],"kind":"trait"},"6:8016:17336":{"crate_id":6,"path":["std","io","error","ErrorKind"],"kind":"enum"},"7:1631:13516":{"crate_id":7,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:8050:13157":{"crate_id":17,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"7:6003:14085":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"4:502:5399":{"crate_id":4,"path":["digest","core_api","xof_reader","XofReaderCoreWrapper"],"kind":"struct"},"7:4812:13804":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"7:6634:14191":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"18:13071:12443":{"crate_id":18,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:2871:13058":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:43683:15238":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"9:0:1814":{"crate_id":9,"path":["cfg_if"],"kind":"module"},"18:13758:12655":{"crate_id":18,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"5:7403:104":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"24:1276:5481":{"crate_id":24,"path":["typenum","type_operators","Gcd"],"kind":"trait"},"7:5010:13905":{"crate_id":7,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:10322:5425":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"18:12196:12263":{"crate_id":18,"path":["object","elf","Versym"],"kind":"struct"},"6:8996:15621":{"crate_id":6,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"6:8364:14399":{"crate_id":6,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:22593:192":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:6818:15003":{"crate_id":17,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:5982:14933":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"7:7561:14335":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:7872:14352":{"crate_id":6,"path":["std","fs","FileTimes"],"kind":"struct"},"7:1649:13528":{"crate_id":7,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"24:5702:5383":{"crate_id":24,"path":["typenum","bit","B0"],"kind":"struct"},"18:10240:12067":{"crate_id":18,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:12062:684":{"crate_id":6,"path":["std","f64"],"kind":"primitive"},"1:43282:5440":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:2254:99":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:7897:16662":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:6901:12931":{"crate_id":17,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"7:1520:13439":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:41467:196":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"25:85:5459":{"crate_id":25,"path":["block_buffer","Lazy"],"kind":"struct"},"18:10603:14867":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"18:12280:12291":{"crate_id":18,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:3017:5822":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"0:99:1804":{"crate_id":0,"path":["sha2","Sha256"],"kind":"type_alias"},"6:1557:5424":{"crate_id":6,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:5613:15126":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:8342:14191":{"crate_id":6,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"7:595:13425":{"crate_id":7,"path":["libc","unix","protoent"],"kind":"struct"},"5:1102:35035":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"6:5787:15587":{"crate_id":6,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:2832:12917":{"crate_id":17,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:3888:12952":{"crate_id":17,"path":["gimli","constants","DwCfa"],"kind":"struct"},"18:10036:12069":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"5:3212:15052":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"6:8870:15618":{"crate_id":6,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"23:346:5548":{"crate_id":23,"path":["generic_array","sequence","Concat"],"kind":"trait"},"1:4787:415":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"6:3939:17346":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:43245:5435":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"6:1983:200":{"crate_id":6,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:6817:17452":{"crate_id":6,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:534:11691":{"crate_id":6,"path":["std","thread","Packet"],"kind":"struct"},"15:7:15513":{"crate_id":15,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:41316:14696":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"18:12111:12248":{"crate_id":18,"path":["object","elf","Rel64"],"kind":"struct"},"1:2934:16566":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:9172:29746":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"18:12062:12239":{"crate_id":18,"path":["object","elf","Syminfo32"],"kind":"struct"},"5:4002:11760":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"18:9945:12067":{"crate_id":18,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:2744:12913":{"crate_id":17,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:10390:5445":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"18:11872:12197":{"crate_id":18,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"6:907:11778":{"crate_id":6,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"18:13838:12673":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:2797:5460":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"7:4802:13800":{"crate_id":7,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:8097:15033":{"crate_id":17,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"5:3142:97":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"18:10478:12087":{"crate_id":18,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:43337:5438":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"21:66:17039":{"crate_id":21,"path":["blobby","Blob2Iterator"],"kind":"struct"},"4:531:2099":{"crate_id":4,"path":["digest","InvalidBufferSize"],"kind":"struct"},"22:42:17098":{"crate_id":22,"path":["crypto_common","InnerUser"],"kind":"trait"},"18:14469:12862":{"crate_id":18,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"19:755:14852":{"crate_id":19,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"24:1153:17070":{"crate_id":24,"path":["typenum","private","PrivateLogarithm2"],"kind":"trait"},"17:2670:12910":{"crate_id":17,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:7041:15013":{"crate_id":17,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:3243:255":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"22:33:1939":{"crate_id":22,"path":["crypto_common","OutputSizeUser"],"kind":"trait"},"6:11557:15571":{"crate_id":6,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"18:12123:12249":{"crate_id":18,"path":["object","elf","Rela64"],"kind":"struct"},"19:599:36864":{"crate_id":19,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:7895:134":{"crate_id":6,"path":["std","fs","FileType"],"kind":"struct"},"24:1007:17089":{"crate_id":24,"path":["typenum","private","PrivateMin"],"kind":"trait"},"6:3264:15563":{"crate_id":6,"path":["std","io","stdio","Stdout"],"kind":"struct"},"18:10520:14861":{"crate_id":18,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"18:13685:12644":{"crate_id":18,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"18:12830:12388":{"crate_id":18,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:8281:13166":{"crate_id":17,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"6:3945:17345":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:8219:12053":{"crate_id":6,"path":["std","io","Bytes"],"kind":"struct"},"18:3232:15359":{"crate_id":18,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:2368:17296":{"crate_id":6,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:10167:15633":{"crate_id":6,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"12:1663:150":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:6513:14974":{"crate_id":17,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:6795:1973":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:2923:132":{"crate_id":6,"path":["std","io","error","Error"],"kind":"struct"},"6:12033:35767":{"crate_id":6,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"18:9998:12035":{"crate_id":18,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:5743:14910":{"crate_id":17,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:30184:5537":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"18:12513:12345":{"crate_id":18,"path":["object","macho","MachHeader64"],"kind":"struct"},"5:7229:11259":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:1986:199":{"crate_id":6,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"18:9607:15365":{"crate_id":18,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"7:7538:14329":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:21044:16773":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:39134:15154":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:9504:11323":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:22193:15144":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:43447:5432":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"18:12846:12393":{"crate_id":18,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:44452:14732":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"7:4772:13784":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"7:6859:14300":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:6401:12923":{"crate_id":17,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:8134:15039":{"crate_id":17,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"18:11367:12144":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:40215:15099":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:5495:11701":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"18:10440:15395":{"crate_id":18,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"7:7304:14323":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:47846:11155":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:3997:17349":{"crate_id":6,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"7:5988:14083":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"7:4403:13647":{"crate_id":7,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"18:14269:12802":{"crate_id":18,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"5:6098:11701":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"24:2508:1774":{"crate_id":24,"path":["typenum","generated","consts","U28"],"kind":"type_alias"},"17:4986:12973":{"crate_id":17,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:6083:22988":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:22205:29709":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:41362:14703":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:40068:15169":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:9198:36420":{"crate_id":6,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"6:9481:133":{"crate_id":6,"path":["std","sys","unix","fs","File"],"kind":"struct"},"17:6583:14984":{"crate_id":17,"path":["gimli","read","line","LineRows"],"kind":"struct"},"7:7514:14325":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:7651:15508":{"crate_id":17,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:30816:11222":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"18:14100:12745":{"crate_id":18,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:46604:14768":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"18:8953:23944":{"crate_id":18,"path":["object","common","SegmentFlags"],"kind":"enum"},"22:54:17101":{"crate_id":22,"path":["crypto_common","InnerInit"],"kind":"trait"},"1:46728:14770":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"7:4415:13656":{"crate_id":7,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"24:654:5473":{"crate_id":24,"path":["typenum","marker_traits","PowerOfTwo"],"kind":"trait"},"17:5696:23876":{"crate_id":17,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"18:10097:15379":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:46187:14760":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"18:14378:12841":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:12861:11710":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:42979:15221":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:3522:17309":{"crate_id":6,"path":["std","io","Seek"],"kind":"trait"},"12:97:15043":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:5712:14905":{"crate_id":17,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:4392:15574":{"crate_id":6,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:45535:14738":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:44203:126":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"17:3600:12948":{"crate_id":17,"path":["gimli","arch","X86"],"kind":"struct"},"18:12465:12335":{"crate_id":18,"path":["object","macho","FatHeader"],"kind":"struct"},"6:840:5424":{"crate_id":6,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:5088:12976":{"crate_id":17,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:40385:15193":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:9033:15625":{"crate_id":6,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"7:5909:14034":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"7:4343:13611":{"crate_id":7,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:12068:1602":{"crate_id":6,"path":["std","u8"],"kind":"primitive"},"12:2186:36823":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"18:12685:12371":{"crate_id":18,"path":["object","macho","DylibCommand"],"kind":"struct"},"7:4391:13642":{"crate_id":7,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"7:4652:13737":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"18:9780:15368":{"crate_id":18,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"18:9390:133":{"crate_id":18,"path":["object","read","any","File"],"kind":"enum"},"17:6171:209":{"crate_id":17,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:7660:13108":{"crate_id":17,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"6:8826:14419":{"crate_id":6,"path":["std","process","ExitStatus"],"kind":"struct"},"7:1717:13563":{"crate_id":7,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"7:562:13407":{"crate_id":7,"path":["libc","unix","linger"],"kind":"struct"},"17:8195:15040":{"crate_id":17,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:6742:14989":{"crate_id":17,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"7:1506:13434":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"7:7526:14327":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"5:2170:15107":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"5:7512:15668":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"18:14083:12741":{"crate_id":18,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:7736:13111":{"crate_id":17,"path":["gimli","read","UnitOffset"],"kind":"struct"},"18:14173:12764":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"7:1545:13453":{"crate_id":7,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:7865:15065":{"crate_id":6,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:40525:15197":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"5:1514:213":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"24:1195:5491":{"crate_id":24,"path":["typenum","type_operators","Len"],"kind":"trait"},"1:22332:15149":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:11536:15570":{"crate_id":6,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:4396:11799":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"18:11742:12175":{"crate_id":18,"path":["object","read","CompressedFileRange"],"kind":"struct"},"12:1027:22946":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:12065:789":{"crate_id":6,"path":["std","i32"],"kind":"primitive"},"18:9372:12056":{"crate_id":18,"path":["object","read","util","StringTable"],"kind":"struct"},"18:13188:12466":{"crate_id":18,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"18:12074:12242":{"crate_id":18,"path":["object","elf","Syminfo64"],"kind":"struct"},"7:5814:13987":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:7751:17281":{"crate_id":6,"path":["std","env","VarError"],"kind":"enum"},"5:3171:5424":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:3655:11954":{"crate_id":17,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:11841:15235":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:47540:14778":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:22890:185":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"6:5249:205":{"crate_id":6,"path":["std","path","Path"],"kind":"struct"},"18:13802:12668":{"crate_id":18,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:2832:5820":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"24:6272:5413":{"crate_id":24,"path":["typenum","Less"],"kind":"struct"},"7:7555:14334":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:5574:12922":{"crate_id":17,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:7503:12935":{"crate_id":17,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"21:11:17033":{"crate_id":21,"path":["blobby","BlobIterator"],"kind":"struct"},"6:5978:11714":{"crate_id":6,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:2359:12897":{"crate_id":17,"path":["gimli","common","Register"],"kind":"struct"},"16:394:22980":{"crate_id":16,"path":["addr2line","DebugFile"],"kind":"enum"},"18:12911:12423":{"crate_id":18,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:3054:16575":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"5:7320:11259":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"21:105:17042":{"crate_id":21,"path":["blobby","Blob5Iterator"],"kind":"struct"},"1:3170:214":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:8574:15074":{"crate_id":6,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:9749:11528":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"5:7283:11259":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:11472:11736":{"crate_id":6,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"15:215:15041":{"crate_id":15,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:10486:11729":{"crate_id":6,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"6:8808:15616":{"crate_id":6,"path":["std","process","CommandArgs"],"kind":"struct"},"6:11008:14421":{"crate_id":6,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"18:12576:12356":{"crate_id":18,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"7:573:13412":{"crate_id":7,"path":["libc","unix","itimerval"],"kind":"struct"},"1:22311:15146":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:2696:12911":{"crate_id":17,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"7:7595:14342":{"crate_id":7,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"5:2960:35019":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:3266:15564":{"crate_id":6,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"7:62:17486":{"crate_id":7,"path":["libc","unix","DIR"],"kind":"enum"},"6:2366:14459":{"crate_id":6,"path":["std","fs","metadata"],"kind":"function"},"15:221:13244":{"crate_id":15,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"12:736:15051":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"24:2808:1945":{"crate_id":24,"path":["typenum","generated","consts","U128"],"kind":"type_alias"},"12:798:15519":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:43207:5423":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:6198:15131":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"5:6956:11790":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:1573:15052":{"crate_id":6,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"23:195:5540":{"crate_id":23,"path":["generic_array","iter","GenericArrayIter"],"kind":"struct"},"17:7054:15016":{"crate_id":17,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:2644:12909":{"crate_id":17,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:2472:12902":{"crate_id":17,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"5:5135:11772":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:40202:15172":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:4425:11183":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:43415:12053":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:44148:15271":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"24:613:197":{"crate_id":24,"path":["typenum","marker_traits","Ord"],"kind":"trait"},"7:5872:14020":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:2384:17301":{"crate_id":6,"path":["std","fs","canonicalize"],"kind":"function"},"5:4164:11701":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"5:1257:15021":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:3939:11701":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"18:14401:12842":{"crate_id":18,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:41453:14705":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"6:11332:15646":{"crate_id":6,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"7:4520:13706":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:12064:788":{"crate_id":6,"path":["std","i16"],"kind":"primitive"},"6:10548:15563":{"crate_id":6,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"7:4618:13734":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"5:3178:15053":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:41382:29711":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:42058:94":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"24:2568:1776":{"crate_id":24,"path":["typenum","generated","consts","U48"],"kind":"type_alias"},"1:46014:14754":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:12075:1206":{"crate_id":6,"path":["std","reference"],"kind":"primitive"},"6:932:17264":{"crate_id":6,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:40004:16616":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"6:4753:17364":{"crate_id":6,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:8320:14398":{"crate_id":6,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"18:9207:12050":{"crate_id":18,"path":["object","endian","I16Bytes"],"kind":"struct"},"7:4306:13583":{"crate_id":7,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:41441:14704":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:2787:112":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"12:1103:15531":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:40193:15685":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:11177:14420":{"crate_id":6,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:2628:132":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"24:2616:1777":{"crate_id":24,"path":["typenum","generated","consts","U64"],"kind":"type_alias"},"1:21094:16533":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"12:986:15526":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:3065:11949":{"crate_id":17,"path":["gimli","arch","Arm"],"kind":"struct"},"23:422:5533":{"crate_id":23,"path":["generic_array","ArrayBuilder"],"kind":"struct"},"5:1118:35018":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:11359:14445":{"crate_id":6,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"11:0:2079":{"crate_id":11,"path":["adler"],"kind":"module"},"1:2896:13059":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"5:4032:11744":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:11326:15087":{"crate_id":6,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"18:10561:14864":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"18:10980:12078":{"crate_id":18,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:22266:28631":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"12:1831:11778":{"crate_id":12,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"15:0:2083":{"crate_id":15,"path":["rustc_demangle"],"kind":"module"},"12:723:15050":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"19:644:11921":{"crate_id":19,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"24:942:17083":{"crate_id":24,"path":["typenum","private","PrivateDiv"],"kind":"trait"},"24:5746:5381":{"crate_id":24,"path":["typenum","int","PInt"],"kind":"struct"},"7:4919:13860":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:9948:11695":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"6:8465:6115":{"crate_id":6,"path":["std","path","State"],"kind":"enum"},"5:1776:11778":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"25:22:17051":{"crate_id":25,"path":["block_buffer","sealed","Sealed"],"kind":"trait"},"6:12061:682":{"crate_id":6,"path":["std","f32"],"kind":"primitive"},"18:13897:12692":{"crate_id":18,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:5555:15125":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:4745:12965":{"crate_id":17,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:22824:183":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:22857:184":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"6:2223:17293":{"crate_id":6,"path":["std","fs","read_to_string"],"kind":"function"},"1:3072:16570":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"5:7299:15115":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:853:5425":{"crate_id":6,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"6:922:15518":{"crate_id":6,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:7541:15649":{"crate_id":6,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"7:5017:13908":{"crate_id":7,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"18:14156:12757":{"crate_id":18,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"19:96:27902":{"crate_id":19,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"19:707:14845":{"crate_id":19,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:46288:14763":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:44164:15275":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"18:11934:12213":{"crate_id":18,"path":["object","elf","Ident"],"kind":"struct"},"4:160:1781":{"crate_id":4,"path":["digest","impl_oid_carrier"],"kind":"macro"},"18:13487:12540":{"crate_id":18,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:3076:16571":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"7:5838:13996":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"7:6627:14187":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:47771:6106":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:22084:15139":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:2907:12920":{"crate_id":17,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"18:11535:14889":{"crate_id":18,"path":["object","read","SymbolMap"],"kind":"struct"},"6:8244:15613":{"crate_id":6,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"7:5746:13943":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"18:13055:12442":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"7:6616:14182":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"18:13422:12489":{"crate_id":18,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:4:1070":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:42499:13134":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"6:871:15050":{"crate_id":6,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"18:10397:15391":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"5:1523:15657":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"18:11407:23947":{"crate_id":18,"path":["object","read","FileKind"],"kind":"enum"},"1:39048:16579":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:21351:16771":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:7568:12938":{"crate_id":17,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:44180:15279":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:12074:14845":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:7767:15598":{"crate_id":6,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:943:15522":{"crate_id":6,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"12:1822:11259":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"18:13723:12651":{"crate_id":18,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:39908:15157":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"23:295:5546":{"crate_id":23,"path":["generic_array","sequence","Lengthen"],"kind":"trait"},"1:42749:151":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"18:10456:15401":{"crate_id":18,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:9931:11810":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"5:3594:5425":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:43579:15233":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"7:4766:13781":{"crate_id":7,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:0:527":{"crate_id":1,"path":["core"],"kind":"module"},"4:492:1779":{"crate_id":4,"path":["digest","core_api","wrapper","CoreWrapper"],"kind":"struct"},"1:45822:14749":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:9500:209":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"6:9116:238":{"crate_id":6,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:21283:17051":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"17:6531:14982":{"crate_id":17,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"6:12074:1658":{"crate_id":6,"path":["std","usize"],"kind":"primitive"},"6:11632:15098":{"crate_id":6,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"7:6582:14163":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"18:11162:12131":{"crate_id":18,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"5:778:98":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:2324:203":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:40285:15184":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"18:13676:12643":{"crate_id":18,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:5760:23877":{"crate_id":17,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"5:4194:11701":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:7434:138":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:4807:11702":{"crate_id":6,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"6:9288:15550":{"crate_id":6,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:44465:15284":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"7:500:13367":{"crate_id":7,"path":["libc","unix","rlimit"],"kind":"struct"},"1:40783:14690":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:3002:5538":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:6879:13037":{"crate_id":17,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"6:483:11689":{"crate_id":6,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"18:10962:12126":{"crate_id":18,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"18:12024:12233":{"crate_id":18,"path":["object","elf","Sym32"],"kind":"struct"},"24:1241:5522":{"crate_id":24,"path":["typenum","type_operators","IsLessOrEqual"],"kind":"trait"},"7:7573:14337":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"18:9959:15374":{"crate_id":18,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"7:4946:13878":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"7:5827:13988":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:10259:17431":{"crate_id":6,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"7:4438:13665":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:4835:12968":{"crate_id":17,"path":["gimli","constants","DwInl"],"kind":"struct"},"7:526:13387":{"crate_id":7,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:6915:12932":{"crate_id":17,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"18:9912:15370":{"crate_id":18,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"22:12:1935":{"crate_id":22,"path":["crypto_common","Block"],"kind":"type_alias"},"1:40764:15206":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"5:4846:220":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"19:590:11929":{"crate_id":19,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"18:11306:12139":{"crate_id":18,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"21:92:17041":{"crate_id":21,"path":["blobby","Blob4Iterator"],"kind":"struct"},"7:4706:13753":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:8298:17374":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"14:0:2082":{"crate_id":14,"path":["std_detect"],"kind":"module"},"12:2049:15526":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:2562:11697":{"crate_id":6,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"6:9060:35773":{"crate_id":6,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"7:7608:14346":{"crate_id":7,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:6560:11678":{"crate_id":17,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"12:2174:13269":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:6983:16653":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"18:1075:15352":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"7:4756:13775":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"4:457:14455":{"crate_id":4,"path":["digest","core_api","ct_variable","NoOid"],"kind":"struct"},"7:1536:13447":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:4557:12960":{"crate_id":17,"path":["gimli","constants","DwEnd"],"kind":"struct"},"7:579:13415":{"crate_id":7,"path":["libc","unix","tms"],"kind":"struct"},"7:6165:14140":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:2329:129":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"6:10591:11730":{"crate_id":6,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"7:4589:13732":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"7:6053:14105":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"6:926:15519":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"18:10916:15418":{"crate_id":18,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"18:10383:15390":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"18:8848:23941":{"crate_id":18,"path":["object","common","RelocationKind"],"kind":"enum"},"6:11639:15098":{"crate_id":6,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:40153:15684":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"17:6386:12995":{"crate_id":17,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:21180:16781":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:4011:15670":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"18:10771:12091":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"12:2168:13268":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:45738:14746":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"18:14110:12748":{"crate_id":18,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"4:291:5398":{"crate_id":4,"path":["digest","core_api","wrapper","CoreProxy"],"kind":"trait"},"6:12022:17260":{"crate_id":6,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:9140:14431":{"crate_id":6,"path":["std","time","SystemTime"],"kind":"struct"},"1:2782:5819":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"21:118:17043":{"crate_id":21,"path":["blobby","Blob6Iterator"],"kind":"struct"},"1:10347:5428":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:42983:5453":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"18:9752:15367":{"crate_id":18,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:5612:12927":{"crate_id":17,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"7:6753:14234":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:7090:15020":{"crate_id":17,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"5:6795:11775":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"23:0:1989":{"crate_id":23,"path":["generic_array"],"kind":"module"},"7:4844:13817":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"5:7375:15116":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:7401:16663":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"19:507:11921":{"crate_id":19,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"24:1221:5520":{"crate_id":24,"path":["typenum","type_operators","IsEqual"],"kind":"trait"},"6:7771:15599":{"crate_id":6,"path":["std","error","private","Internal"],"kind":"struct"},"7:7532:14328":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"15:31:15513":{"crate_id":15,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:2497:17051":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:6201:15588":{"crate_id":6,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"7:4382:13637":{"crate_id":7,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"7:4951:13880":{"crate_id":7,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"18:10316:12083":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:45423:14733":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:11108:5443":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:9460:136":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:32012:13099":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"6:6987:35782":{"crate_id":6,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"18:11886:12198":{"crate_id":18,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:5419:12046":{"crate_id":17,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"4:430:2095":{"crate_id":4,"path":["digest","ExtendableOutput"],"kind":"trait"},"12:749:11760":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"12:793:15533":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"19:636:11941":{"crate_id":19,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"5:5858:11760":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:8884:14422":{"crate_id":6,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:20906:17058":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"15:40:12213":{"crate_id":15,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:2669:15669":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"6:8862:5424":{"crate_id":6,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:11309:11734":{"crate_id":6,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:4417:12956":{"crate_id":17,"path":["gimli","constants","DwForm"],"kind":"struct"},"24:611:5396":{"crate_id":24,"path":["typenum","marker_traits","NonZero"],"kind":"trait"},"7:5076:13936":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"12:1012:15528":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:4035:105":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"25:36:1954":{"crate_id":25,"path":["block_buffer","BufferKind"],"kind":"trait"},"6:8985:15619":{"crate_id":6,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"18:9823:23957":{"crate_id":18,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:6226:15461":{"crate_id":17,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:8916:17449":{"crate_id":6,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"0:101:1808":{"crate_id":0,"path":["sha2","Sha512_256"],"kind":"type_alias"},"18:14448:12856":{"crate_id":18,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"18:11448:23948":{"crate_id":18,"path":["object","read","ObjectKind"],"kind":"enum"},"1:39165:213":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"6:5390:15576":{"crate_id":6,"path":["std","process","Child"],"kind":"struct"},"6:8547:15069":{"crate_id":6,"path":["std","path","Components"],"kind":"struct"},"1:8985:81":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:7006:15478":{"crate_id":17,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:9494:11319":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"5:1138:35036":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:4160:17370":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:40271:15181":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:21343:17051":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:45920:14752":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"7:4731:13764":{"crate_id":7,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:10966:13332":{"crate_id":6,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"6:9046:14427":{"crate_id":6,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"24:1279:5478":{"crate_id":24,"path":["typenum","type_operators","ToInt"],"kind":"trait"},"1:44349:222":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"5:2035:15057":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"7:4485:13687":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:13059:1725":{"crate_id":1,"path":["core","core_arch","arch","x86_64"],"kind":"module"},"17:3049:23018":{"crate_id":17,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:2596:12907":{"crate_id":17,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:6456:14972":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"18:13040:12438":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"5:276:2100":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"5:7487:245":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:9492:11318":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:9744:11527":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:2875:16557":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"18:12934:12424":{"crate_id":18,"path":["object","macho","DylibReference"],"kind":"struct"},"1:22245:28644":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:21080:16775":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"5:3581:5424":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"7:4370:13634":{"crate_id":7,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"22:16:201":{"crate_id":22,"path":["crypto_common","Output"],"kind":"type_alias"},"18:13202:12469":{"crate_id":18,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:1564:11760":{"crate_id":6,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:4127:15672":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:11590:5409":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:30418:28638":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"12:1818:5424":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:10609:5431":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"18:12098:12246":{"crate_id":18,"path":["object","elf","Rela32"],"kind":"struct"},"4:328:1937":{"crate_id":4,"path":["digest","core_api","Buffer"],"kind":"type_alias"},"6:2394:17306":{"crate_id":6,"path":["std","fs","read_dir"],"kind":"function"},"1:21266:16772":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"7:1673:13545":{"crate_id":7,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"7:4508:13700":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:21698:16782":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:8990:88":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:8181:12942":{"crate_id":17,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:46792:14772":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:12131:16727":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:6189:14963":{"crate_id":17,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:4709:17402":{"crate_id":6,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"6:1764:649":{"crate_id":6,"path":["std","env"],"kind":"module"},"18:12658:12366":{"crate_id":18,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:41585:15686":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"24:998:17050":{"crate_id":24,"path":["typenum","private","PrivateRem"],"kind":"trait"},"17:6279:12990":{"crate_id":17,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"18:9660:36853":{"crate_id":18,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:21693:16774":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:43497:15230":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:43993:15258":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"18:12737:12377":{"crate_id":18,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"0:100:1806":{"crate_id":0,"path":["sha2","Sha512_224"],"kind":"type_alias"},"6:12066:790":{"crate_id":6,"path":["std","i64"],"kind":"primitive"},"1:40030:16617":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:7492:15022":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:5049:12975":{"crate_id":17,"path":["gimli","constants","DwLnct"],"kind":"struct"},"6:12073:840":{"crate_id":6,"path":["std","isize"],"kind":"primitive"},"12:1826:11760":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"23:369:5531":{"crate_id":23,"path":["generic_array","GenericArrayImplEven"],"kind":"struct"},"6:4051:17353":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:10443:15616":{"crate_id":6,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:884:15051":{"crate_id":6,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:1641:11199":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:21468:17051":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"20:0:1087":{"crate_id":20,"path":["panic_unwind"],"kind":"module"},"6:7644:17051":{"crate_id":6,"path":["std","sealed","Sealed"],"kind":"trait"},"1:11765:15226":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"18:12621:12362":{"crate_id":18,"path":["object","macho","Section64"],"kind":"struct"},"22:75:11916":{"crate_id":22,"path":["crypto_common","InvalidLength"],"kind":"struct"},"1:3288:16577":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:44367:210":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"24:844:17071":{"crate_id":24,"path":["typenum","private","PrivatePow"],"kind":"trait"},"18:11719:23951":{"crate_id":18,"path":["object","read","CompressionFormat"],"kind":"enum"},"7:653:17898":{"crate_id":7,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:4949:12972":{"crate_id":17,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"24:1251:5523":{"crate_id":24,"path":["typenum","type_operators","IsNotEqual"],"kind":"trait"},"7:6017:14096":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"18:2012:15354":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"18:12997:12432":{"crate_id":18,"path":["object","macho","RpathCommand"],"kind":"struct"},"6:8338:15615":{"crate_id":6,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"7:4376:13635":{"crate_id":7,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:40262:15180":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:43956:15257":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"7:7281:14310":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:20889:29593":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:21912:17051":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"7:4552:13720":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:7912:123":{"crate_id":6,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:41333:16672":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:32026:11329":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"1:43405:15224":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:6569:12929":{"crate_id":17,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:8561:16677":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"5:1442:11259":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:7936:15057":{"crate_id":6,"path":["std","io","cursor","Cursor"],"kind":"struct"},"18:11788:12179":{"crate_id":18,"path":["object","archive","Header"],"kind":"struct"},"18:14335:12825":{"crate_id":18,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"5:5325:11744":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"18:14296:12814":{"crate_id":18,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:44168:15276":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"12:1858:15055":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"18:8765:23938":{"crate_id":18,"path":["object","common","ComdatKind"],"kind":"enum"},"18:14346:12826":{"crate_id":18,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"18:13906:12693":{"crate_id":18,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:46368:14764":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:30788:198":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"22:51:17100":{"crate_id":22,"path":["crypto_common","KeyIvInit"],"kind":"trait"},"12:2180:13270":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:2947:16569":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"18:12484:12340":{"crate_id":18,"path":["object","macho","FatArch64"],"kind":"struct"},"1:3409:69":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"5:895:5424":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"7:568:13410":{"crate_id":7,"path":["libc","unix","sigval"],"kind":"struct"},"6:8169:14393":{"crate_id":6,"path":["std","io","IoSlice"],"kind":"struct"},"7:4465:13677":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:9485:115":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:47686:14781":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"18:12959:12428":{"crate_id":18,"path":["object","macho","TwolevelHint"],"kind":"struct"},"7:4725:13761":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:7862:15029":{"crate_id":17,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"18:13228:12471":{"crate_id":18,"path":["object","macho","NoteCommand"],"kind":"struct"},"4:418:2091":{"crate_id":4,"path":["digest","Update"],"kind":"trait"},"5:3238:15055":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"5:7571:11778":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"12:817:15522":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"5:6912:265":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:2276:107":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"24:612:5474":{"crate_id":24,"path":["typenum","marker_traits","Zero"],"kind":"trait"},"6:12057:1496":{"crate_id":6,"path":["std","str"],"kind":"primitive"},"17:4497:12958":{"crate_id":17,"path":["gimli","constants","DwLle"],"kind":"struct"},"5:2223:35088":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:40253:15178":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"18:13922:12697":{"crate_id":18,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:7513:15025":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:5995:14894":{"crate_id":17,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"25:106:5393":{"crate_id":25,"path":["block_buffer","BlockBuffer"],"kind":"struct"},"5:5973:11772":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"18:11490:12164":{"crate_id":18,"path":["object","read","SymbolIndex"],"kind":"struct"},"7:4826:13808":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:7029:11722":{"crate_id":6,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"7:4397:13644":{"crate_id":7,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:12020:16397":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"7:4687:13741":{"crate_id":7,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"5:2962:14451":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:10334:108":{"crate_id":6,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"5:5373:17148":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:3915:12953":{"crate_id":17,"path":["gimli","constants","DwChildren"],"kind":"struct"},"7:5027:13913":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"18:11062:15425":{"crate_id":18,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:5634:14899":{"crate_id":17,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"7:6814:14278":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"5:4363:11767":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"6:7928:15603":{"crate_id":6,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:8560:16678":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"18:11261:14883":{"crate_id":18,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:2172:16534":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"22:44:2104":{"crate_id":22,"path":["crypto_common","Reset"],"kind":"trait"},"18:12645:12363":{"crate_id":18,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:7128:14427":{"crate_id":17,"path":["gimli","read","op","Operation"],"kind":"enum"},"7:6850:14297":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"25:93:132":{"crate_id":25,"path":["block_buffer","Error"],"kind":"struct"},"1:40303:15186":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"7:4293:13574":{"crate_id":7,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:49744:16784":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:44359:230":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:45720:14745":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:2546:259":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"6:10824:134":{"crate_id":6,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"18:13851:12679":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:2913:16564":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:8011:15605":{"crate_id":6,"path":["std","io","error","Custom"],"kind":"struct"},"1:41681:227":{"crate_id":1,"path":["core","sync","atomic","Ordering","Relaxed"],"kind":"foreign_type"},"7:6607:14181":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"24:5780:5382":{"crate_id":24,"path":["typenum","int","NInt"],"kind":"struct"},"7:7584:14341":{"crate_id":7,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"5:2970:35016":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"5:2141:15105":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"24:933:17081":{"crate_id":24,"path":["typenum","private","PrivateSetBit"],"kind":"trait"},"18:13816:12669":{"crate_id":18,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:2783:11205":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"19:766:27912":{"crate_id":19,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:2859:13055":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"17:2933:23016":{"crate_id":17,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:41276:164":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"7:6180:14151":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"24:621:1944":{"crate_id":24,"path":["typenum","marker_traits","Unsigned"],"kind":"trait"},"1:2785:247":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:40110:16627":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"18:13611:12633":{"crate_id":18,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"12:836:15524":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:5661:14903":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:7381:35176":{"crate_id":6,"path":["std","panicking","Hook"],"kind":"enum"},"6:1561:11259":{"crate_id":6,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"6:3504:11317":{"crate_id":6,"path":["std","io","Write"],"kind":"trait"},"1:40243:15177":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:5440:15581":{"crate_id":6,"path":["std","process","ChildStderr"],"kind":"struct"},"18:12543:12348":{"crate_id":18,"path":["object","macho","LcStr"],"kind":"struct"},"24:1231:5521":{"crate_id":24,"path":["typenum","type_operators","IsGreater"],"kind":"trait"},"1:42219:11319":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:3273:31623":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"5:2690:14452":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:8814:201":{"crate_id":6,"path":["std","process","Output"],"kind":"struct"},"7:5060:13933":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"19:624:36865":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"7:4994:13900":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"5:6663:11744":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"5:35:11741":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"24:1151:17073":{"crate_id":24,"path":["typenum","private","PrivateSquareRoot"],"kind":"trait"},"1:10429:5429":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"18:13024:12436":{"crate_id":18,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"7:4422:13660":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:1590:15055":{"crate_id":6,"path":["std","collections","hash","set","Union"],"kind":"struct"},"18:11910:12212":{"crate_id":18,"path":["object","elf","FileHeader64"],"kind":"struct"},"18:13710:12646":{"crate_id":18,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"7:532:13390":{"crate_id":7,"path":["libc","unix","hostent"],"kind":"struct"},"18:10420:11990":{"crate_id":18,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:2837:109":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"6:8121:15606":{"crate_id":6,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"18:12970:12429":{"crate_id":18,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:7269:36850":{"crate_id":17,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:45898:14751":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"18:13567:12602":{"crate_id":18,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"18:9886:15369":{"crate_id":18,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:7213:11705":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"6:9488:15600":{"crate_id":6,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"6:7739:15059":{"crate_id":6,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"24:1131:17057":{"crate_id":24,"path":["typenum","private","IsGreaterOrEqualPrivate"],"kind":"trait"},"19:548:147":{"crate_id":19,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"19:660:15343":{"crate_id":19,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:2380:12898":{"crate_id":17,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:21365:14464":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"18:12554:12349":{"crate_id":18,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"6:7690:11730":{"crate_id":6,"path":["std","thread","Thread"],"kind":"struct"},"1:2537:76":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"6:9081:14430":{"crate_id":6,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"6:11495:15569":{"crate_id":6,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:10789:15065":{"crate_id":6,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:42740:11529":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"5:261:11744":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"18:12888:12414":{"crate_id":18,"path":["object","macho","DylibModule32"],"kind":"struct"},"10:177:22932":{"crate_id":10,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:4351:11329":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:8562:15677":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:897:11760":{"crate_id":6,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"18:10949:15420":{"crate_id":18,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:3315:12946":{"crate_id":17,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:12850:110":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"18:10494:14858":{"crate_id":18,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:11606:5411":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:32120:11211":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"5:4348:266":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"6:3465:15568":{"crate_id":6,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:39189:215":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"7:4910:13854":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"17:6893:13039":{"crate_id":17,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:2865:16556":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:42459:14711":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"18:13274:12139":{"crate_id":18,"path":["object","macho","Relocation"],"kind":"struct"},"1:39981:15161":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:4806:12967":{"crate_id":17,"path":["gimli","constants","DwCc"],"kind":"struct"},"7:6784:14261":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:2339:12891":{"crate_id":17,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:7067:15019":{"crate_id":17,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:40735:15201":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"4:332:1938":{"crate_id":4,"path":["digest","core_api","BufferKindUser"],"kind":"trait"},"18:10637:14872":{"crate_id":18,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:47478:14777":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"11:36:13274":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"18:13215:12470":{"crate_id":18,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"5:7587:11782":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:5939:14930":{"crate_id":17,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"16:306:22970":{"crate_id":16,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"24:6363:5380":{"crate_id":24,"path":["typenum","uint","UTerm"],"kind":"struct"},"24:6172:5468":{"crate_id":24,"path":["typenum","array","ATerm"],"kind":"struct"},"7:5845:14000":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:4405:11330":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"7:6139:14125":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:10140:17051":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"7:6697:14211":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:8212:15197":{"crate_id":6,"path":["std","io","Take"],"kind":"struct"},"18:9070:12045":{"crate_id":18,"path":["object","endian","LittleEndian"],"kind":"struct"},"18:9972:15375":{"crate_id":18,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"14:226:13267":{"crate_id":14,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:2829:11206":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"6:5575:14112":{"crate_id":6,"path":["std","process","exit"],"kind":"function"},"7:4537:13713":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"18:11351:12143":{"crate_id":18,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:5727:14908":{"crate_id":17,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"18:14024:12723":{"crate_id":18,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:22169:14467":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:6169:11713":{"crate_id":6,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"6:5424:15580":{"crate_id":6,"path":["std","process","ChildStdout"],"kind":"struct"},"1:41861:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:2499:15556":{"crate_id":6,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"18:13085:12445":{"crate_id":18,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"18:12983:12431":{"crate_id":18,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:5648:15437":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"4:358:1768":{"crate_id":4,"path":["digest","digest","Digest"],"kind":"trait"},"7:7259:14309":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"18:8895:23942":{"crate_id":18,"path":["object","common","RelocationEncoding"],"kind":"enum"},"23:437:5534":{"crate_id":23,"path":["generic_array","ArrayConsumer"],"kind":"struct"},"24:1051:17053":{"crate_id":24,"path":["typenum","private","IsEqualPrivate"],"kind":"trait"},"6:955:15525":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:42097:11160":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:10298:5424":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"18:2178:15355":{"crate_id":18,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:46234:14761":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"10:237:6115":{"crate_id":10,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:8903:14423":{"crate_id":6,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"18:13101:12449":{"crate_id":18,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"12:1501:22947":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"12:0:2080":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"6:7600:11726":{"crate_id":6,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"10:52:22883":{"crate_id":10,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:45443:14734":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:6017:23878":{"crate_id":17,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"6:3226:15562":{"crate_id":6,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"18:9521:15363":{"crate_id":18,"path":["object","read","any","SectionIterator"],"kind":"struct"},"18:2150:24004":{"crate_id":18,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"18:11507:23949":{"crate_id":18,"path":["object","read","SymbolSection"],"kind":"enum"},"6:4320:15573":{"crate_id":6,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"6:10862:35770":{"crate_id":6,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"6:4037:17351":{"crate_id":6,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"5:5994:17156":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:41655:5424":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"12:1838:15052":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:40323:15188":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"19:0:2087":{"crate_id":19,"path":["memchr"],"kind":"module"},"24:1190:5472":{"crate_id":24,"path":["typenum","type_operators","Cmp"],"kind":"trait"},"17:2864:12918":{"crate_id":17,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:5317:124":{"crate_id":6,"path":["std","path","Display"],"kind":"struct"},"7:506:13370":{"crate_id":7,"path":["libc","unix","rusage"],"kind":"struct"},"7:6086:14114":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:39501:28283":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"7:6024:14097":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:3254:16572":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:9151:710":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"1:47602:14779":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"18:13554:12595":{"crate_id":18,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:6261:15473":{"crate_id":17,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:43881:15254":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:3224:15561":{"crate_id":6,"path":["std","io","stdio","Stdin"],"kind":"struct"},"6:11374:15091":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:7597:36847":{"crate_id":17,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:4058:16593":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"7:4558:13722":{"crate_id":7,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:40742:15202":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"19:531:14836":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:10834:123":{"crate_id":6,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"6:5060:15575":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:12055:335":{"crate_id":6,"path":["std","array"],"kind":"primitive"},"1:6203:1937":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"7:554:13402":{"crate_id":7,"path":["libc","unix","winsize"],"kind":"struct"},"6:3115:15559":{"crate_id":6,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"19:609:15342":{"crate_id":19,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"18:14033:12726":{"crate_id":18,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"18:13010:12433":{"crate_id":18,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"10:450:22865":{"crate_id":10,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:11825:15232":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"5:5942:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:1568:11778":{"crate_id":6,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:6268:36851":{"crate_id":17,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:7582:13104":{"crate_id":17,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"18:12496:12342":{"crate_id":18,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:44041:15267":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"6:9208:14435":{"crate_id":6,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:44152:15272":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"18:13546:12592":{"crate_id":18,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:8225:5428":{"crate_id":6,"path":["std","io","Split"],"kind":"struct"},"4:336:5391":{"crate_id":4,"path":["digest","core_api","ExtendableOutputCore"],"kind":"trait"},"1:40063:103":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"7:6598:14175":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"18:14499:12867":{"crate_id":18,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:29969:16359":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"6:558:15538":{"crate_id":6,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:8294:132":{"crate_id":17,"path":["gimli","read","Error"],"kind":"enum"},"18:13259:12477":{"crate_id":18,"path":["object","macho","Nlist64"],"kind":"struct"},"1:44402:15694":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:47751:11149":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:41663:5425":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"7:4430:13663":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:7677:213":{"crate_id":17,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:1779:15547":{"crate_id":6,"path":["std","env","Vars"],"kind":"struct"},"6:11407:15095":{"crate_id":6,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:7284:14708":{"crate_id":17,"path":["gimli","read","op","Location"],"kind":"enum"},"6:8397:17411":{"crate_id":6,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:22923:182":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"6:10760:15641":{"crate_id":6,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"5:685:114":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"4:357:1946":{"crate_id":4,"path":["digest","digest","HashMarker"],"kind":"trait"},"6:1067:15528":{"crate_id":6,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:42469:68":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"6:7744:15062":{"crate_id":6,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"17:5905:14924":{"crate_id":17,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"6:11835:11740":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:4648:14206":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"24:5724:5384":{"crate_id":24,"path":["typenum","bit","B1"],"kind":"struct"},"6:8249:17343":{"crate_id":6,"path":["std","net","Shutdown"],"kind":"enum"},"1:45567:14739":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:2930:16565":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:9441:229":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"7:4975:13892":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:43156:15693":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:12085:16718":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:12049:397":{"crate_id":6,"path":["std","bool"],"kind":"primitive"},"6:12017:35191":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:2366:204":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:41783:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:10502:5432":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:2617:120":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:43633:15236":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:46446:14765":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:7530:12042":{"crate_id":6,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:3518:11760":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"1:1825:181":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:43295:5441":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:45467:14735":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"7:7472:14324":{"crate_id":7,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"24:821:17076":{"crate_id":24,"path":["typenum","private","PrivateXor"],"kind":"trait"},"1:6932:31327":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:3023:5823":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:7768:12928":{"crate_id":17,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"5:0:309":{"crate_id":5,"path":["alloc"],"kind":"module"},"6:8006:15604":{"crate_id":6,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"15:165:22952":{"crate_id":15,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"6:8149:13098":{"crate_id":6,"path":["std","io","util","Empty"],"kind":"struct"},"18:3441:15360":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"23:403:1990":{"crate_id":23,"path":["generic_array","GenericArray"],"kind":"struct"},"17:2450:12901":{"crate_id":17,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:2284:22989":{"crate_id":17,"path":["gimli","common","Format"],"kind":"enum"},"1:21299:16767":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"4:0:1767":{"crate_id":4,"path":["digest"],"kind":"module"},"18:13113:12451":{"crate_id":18,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"18:10661:15406":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"18:9852:23958":{"crate_id":18,"path":["object","read","archive","Members"],"kind":"enum"},"1:4834:846":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:4272:15673":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"5:4393:11701":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:0:471":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"7:6735:14223":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"5:2243:15110":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:9498:11321":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"24:1198:5479":{"crate_id":24,"path":["typenum","type_operators","PartialDiv"],"kind":"trait"},"24:1206:5476":{"crate_id":24,"path":["typenum","type_operators","Max"],"kind":"trait"},"1:44240:16740":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"18:12473:12337":{"crate_id":18,"path":["object","macho","FatArch32"],"kind":"struct"},"17:5830:14916":{"crate_id":17,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:41527:5424":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:10623:5427":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:3233:5418":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"18:12136:12250":{"crate_id":18,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:6376:23880":{"crate_id":17,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:44176:15278":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:4626:16610":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:6687:14988":{"crate_id":17,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:4341:11798":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"18:12698:12372":{"crate_id":18,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:7792:23887":{"crate_id":17,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:4452:11331":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"12:447:148":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"6:3513:36502":{"crate_id":6,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:39253:219":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"7:4874:13833":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:39231:217":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"6:641:15542":{"crate_id":6,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"6:1044:15021":{"crate_id":6,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"5:3217:35002":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"6:3191:36611":{"crate_id":6,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"18:11971:12226":{"crate_id":18,"path":["object","elf","SectionHeader64"],"kind":"struct"},"18:10726:15415":{"crate_id":18,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:10545:15561":{"crate_id":6,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"6:10853:35760":{"crate_id":6,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"18:10214:15384":{"crate_id":18,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:11188:1931":{"crate_id":1,"path":["core","slice","raw","from_ref"],"kind":"function"},"17:5816:14915":{"crate_id":17,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"18:11201:14873":{"crate_id":18,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:149:11675":{"crate_id":17,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:7733:17259":{"crate_id":6,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:6929:13042":{"crate_id":17,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"18:13989:12712":{"crate_id":18,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"6:10351:36195":{"crate_id":6,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"18:13973:12710":{"crate_id":18,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"18:12043:12238":{"crate_id":18,"path":["object","elf","Sym64"],"kind":"struct"},"18:10685:15410":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:21136:16780":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"24:0:1943":{"crate_id":24,"path":["typenum"],"kind":"module"},"6:7137:36436":{"crate_id":6,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"6:2219:11794":{"crate_id":6,"path":["std","fs","read"],"kind":"function"},"6:10962:15598":{"crate_id":6,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"18:11547:12166":{"crate_id":18,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:41535:5425":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:41744:93":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:40758:15204":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:7694:12939":{"crate_id":17,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:2786:246":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"6:1058:15526":{"crate_id":6,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"18:14042:12727":{"crate_id":18,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:39902:15156":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:2938:16567":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"6:10551:15565":{"crate_id":6,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"18:12452:12333":{"crate_id":18,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"18:10278:15387":{"crate_id":18,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"18:14013:12719":{"crate_id":18,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"7:541:13396":{"crate_id":7,"path":["libc","unix","iovec"],"kind":"struct"},"7:5899:14027":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"23:123:17044":{"crate_id":23,"path":["generic_array","arr","AddLength"],"kind":"trait"},"7:5784:13970":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"18:10616:14868":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"12:644:5425":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"7:5046:13927":{"crate_id":7,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"7:4796:13797":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"18:11710:12139":{"crate_id":18,"path":["object","read","Relocation"],"kind":"struct"},"1:46492:14766":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"7:1495:13429":{"crate_id":7,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:6721:23882":{"crate_id":17,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"7:6877:14303":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:8840:14420":{"crate_id":6,"path":["std","process","ExitStatusError"],"kind":"struct"},"7:5053:13930":{"crate_id":7,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"6:2921:229":{"crate_id":6,"path":["std","io","error","Result"],"kind":"type_alias"},"1:43308:5436":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:8158:14392":{"crate_id":6,"path":["std","io","util","Sink"],"kind":"struct"},"18:11573:14890":{"crate_id":18,"path":["object","read","ObjectMap"],"kind":"struct"},"6:11253:155":{"crate_id":6,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"1:12060:16713":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"18:12007:12231":{"crate_id":18,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:3303:15565":{"crate_id":6,"path":["std","io","stdio","Stderr"],"kind":"struct"},"18:10197:15381":{"crate_id":18,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:41418:15067":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"18:13868:12684":{"crate_id":18,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"18:9242:12051":{"crate_id":18,"path":["object","endian","I32Bytes"],"kind":"struct"},"18:14068:12737":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:47400:14776":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"24:1272:5501":{"crate_id":24,"path":["typenum","type_operators","SquareRoot"],"kind":"trait"},"18:3565:15361":{"crate_id":18,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"6:6546:15590":{"crate_id":6,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:43235:5434":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:2888:11700":{"crate_id":6,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:1924:17291":{"crate_id":6,"path":["std","error","Indented"],"kind":"struct"},"18:11215:14877":{"crate_id":18,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"6:4751:17363":{"crate_id":6,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"7:488:13362":{"crate_id":7,"path":["libc","unix","timeval"],"kind":"struct"},"1:10150:242":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"4:427:2094":{"crate_id":4,"path":["digest","XofReader"],"kind":"trait"},"6:8557:5424":{"crate_id":6,"path":["std","path","Iter"],"kind":"struct"},"1:12678:31378":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"18:10714:15414":{"crate_id":18,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"24:1211:5394":{"crate_id":24,"path":["typenum","type_operators","IsLess"],"kind":"trait"},"1:46066:14756":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"18:13966:12709":{"crate_id":18,"path":["object","pe","ImageImportByName"],"kind":"struct"},"18:10788:24046":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"6:11189:35768":{"crate_id":6,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"7:5964:14071":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:10779:15078":{"crate_id":6,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"6:5404:15579":{"crate_id":6,"path":["std","process","ChildStdin"],"kind":"struct"},"1:46682:14769":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:12080:16719":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:8878:11259":{"crate_id":6,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:5121:12977":{"crate_id":17,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:7855:11991":{"crate_id":6,"path":["std","fs","Metadata"],"kind":"struct"},"1:44028:15263":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"5:1473:15051":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:2854:13057":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"7:1911:18889":{"crate_id":7,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"6:8304:15614":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:11401:15094":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:5963:15439":{"crate_id":17,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:41604:208":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"6:1842:15551":{"crate_id":6,"path":["std","env","ArgsOs"],"kind":"struct"},"18:14308:12816":{"crate_id":18,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"22:0:2089":{"crate_id":22,"path":["crypto_common"],"kind":"module"},"18:13451:12509":{"crate_id":18,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"6:7882:15066":{"crate_id":6,"path":["std","fs","Permissions"],"kind":"struct"},"18:14118:12749":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"7:474:13354":{"crate_id":7,"path":["libc","unix","group"],"kind":"struct"},"18:10588:14866":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"7:6076:14111":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"18:10750:12089":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"18:9701:15366":{"crate_id":18,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"18:11586:12167":{"crate_id":18,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:46090:14757":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:8990:110":{"crate_id":6,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:20861:29437":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"17:3032:12943":{"crate_id":17,"path":["gimli","common","DwoId"],"kind":"struct"},"5:3735:15658":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"5:2461:14448":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:42542:132":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"18:12422:12324":{"crate_id":18,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"6:4973:17407":{"crate_id":6,"path":["std","panic","always_abort"],"kind":"function"},"18:9574:36858":{"crate_id":18,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"12:1538:15535":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"24:5814:5385":{"crate_id":24,"path":["typenum","int","Z0"],"kind":"struct"},"1:40173:5440":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"18:12750:12379":{"crate_id":18,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:22725:188":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"18:11048:15421":{"crate_id":18,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"18:434:11998":{"crate_id":18,"path":["object","read","any","Section"],"kind":"struct"},"1:43813:16733":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:1931:695":{"crate_id":6,"path":["std","ffi"],"kind":"module"},"6:11613:14446":{"crate_id":6,"path":["std","alloc","System"],"kind":"struct"},"18:9455:36859":{"crate_id":18,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"7:4835:13811":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"12:1852:15054":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"7:4477:13682":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"6:11163:14419":{"crate_id":6,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:7722:12930":{"crate_id":17,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:5455:108":{"crate_id":6,"path":["std","process","Command"],"kind":"struct"},"5:6981:11793":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:1922:14463":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:12898:146":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:47724:14782":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:6696:13021":{"crate_id":17,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:21092:28993":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"1:1604:1460":{"crate_id":1,"path":["core","mem","size_of"],"kind":"function"},"18:10139:23976":{"crate_id":18,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"5:1273:15528":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"18:11098:15428":{"crate_id":18,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:12054:1107":{"crate_id":6,"path":["std","pointer"],"kind":"primitive"},"6:6549:17443":{"crate_id":6,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:12050:990":{"crate_id":6,"path":["std","never"],"kind":"primitive"},"17:2305:23015":{"crate_id":17,"path":["gimli","common","Vendor"],"kind":"enum"},"6:12067:786":{"crate_id":6,"path":["std","i128"],"kind":"primitive"},"1:42233:11320":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"18:9867:12064":{"crate_id":18,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"18:11473:12012":{"crate_id":18,"path":["object","read","SectionIndex"],"kind":"struct"},"1:39314:14557":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"7:1527:13442":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"5:6814:11788":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"26:0:1814":{"crate_id":26,"path":["cfg_if"],"kind":"module"},"17:5322:12978":{"crate_id":17,"path":["gimli","constants","DwOp"],"kind":"struct"},"18:8713:23937":{"crate_id":18,"path":["object","common","SectionKind"],"kind":"enum"},"12:2033:15021":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:1751:14457":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:4158:15124":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:43746:15161":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:12730:15680":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:9493:11728":{"crate_id":6,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:2840:11210":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"19:515:11924":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:41543:11259":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:39328:14558":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:7102:23884":{"crate_id":17,"path":["gimli","read","op","DieReference"],"kind":"enum"},"18:12172:12259":{"crate_id":18,"path":["object","elf","Dyn32"],"kind":"struct"},"1:9490:124":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"6:4924:17401":{"crate_id":6,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"6:5632:223":{"crate_id":6,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:5435:12980":{"crate_id":17,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:41299:14694":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"18:13174:12465":{"crate_id":18,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:11620:16720":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"18:11000:12128":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:30224:11202":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:4268:224":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"18:11951:12216":{"crate_id":18,"path":["object","elf","SectionHeader32"],"kind":"struct"},"18:9650:12078":{"crate_id":18,"path":["object","read","any","SymbolTable"],"kind":"struct"},"6:1781:15548":{"crate_id":6,"path":["std","env","VarsOs"],"kind":"struct"},"7:0:869":{"crate_id":7,"path":["libc"],"kind":"module"},"18:10340:12085":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:7828:13120":{"crate_id":17,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:4613:12962":{"crate_id":17,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:21790:5419":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"22:36:17096":{"crate_id":22,"path":["crypto_common","KeySizeUser"],"kind":"trait"},"17:3232:12888":{"crate_id":17,"path":["gimli","arch","AArch64"],"kind":"struct"},"18:9564:15364":{"crate_id":18,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:6753:14990":{"crate_id":17,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:42771:15219":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:40143:11800":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"8:79:22858":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:39929:28639":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"24:1274:5494":{"crate_id":24,"path":["typenum","type_operators","Logarithm2"],"kind":"trait"},"12:1048:36830":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:7554:12937":{"crate_id":17,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"5:3330:11778":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:22282:28635":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"6:12063:791":{"crate_id":6,"path":["std","i8"],"kind":"primitive"},"1:2160:626":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:43317:5439":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:2792:249":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"12:760:11778":{"crate_id":12,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"6:1895:15552":{"crate_id":6,"path":["std","error","Report"],"kind":"struct"},"1:4023:15671":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:2942:16568":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"7:6843:14294":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"18:10738:15416":{"crate_id":18,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:536:14892":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"18:11358:24072":{"crate_id":18,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"18:11337:24071":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"24:1878:17060":{"crate_id":24,"path":["typenum","uint","GetBit"],"kind":"trait"},"6:5832:11704":{"crate_id":6,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:2766:12914":{"crate_id":17,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:3461:12947":{"crate_id":17,"path":["gimli","arch","RiscV"],"kind":"struct"},"7:4783:13792":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"14:110:36831":{"crate_id":14,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:6902:11721":{"crate_id":6,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"10:0:2078":{"crate_id":10,"path":["miniz_oxide"],"kind":"module"},"1:43387:15222":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"22:56:17102":{"crate_id":22,"path":["crypto_common","InnerIvInit"],"kind":"trait"},"17:5017:12974":{"crate_id":17,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:45668:14743":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"18:9277:12052":{"crate_id":18,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:2891:16560":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"18:10672:15407":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"10:330:13312":{"crate_id":10,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"5:1672:11744":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"5:5631:11775":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"24:1184:5477":{"crate_id":24,"path":["typenum","type_operators","Pow"],"kind":"trait"},"1:43216:5421":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:3260:16574":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"18:10575:14865":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"17:8115:15036":{"crate_id":17,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"7:5929:14050":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:15:2057":{"crate_id":1,"path":["core","write"],"kind":"macro"},"6:6616:11719":{"crate_id":6,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:41705:86":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"18:14434:12849":{"crate_id":18,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"18:11191:12136":{"crate_id":18,"path":["object","read","pe","export","Export"],"kind":"struct"},"18:8594:23925":{"crate_id":18,"path":["object","common","Architecture"],"kind":"enum"},"1:41612:229":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"7:4697:13748":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:589:17253":{"crate_id":6,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:2257:100":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"7:1500:13431":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:42724:11530":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"18:12790:12384":{"crate_id":18,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"18:13826:12670":{"crate_id":18,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"7:4957:13881":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"6:11197:14443":{"crate_id":6,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"4:424:2093":{"crate_id":4,"path":["digest","FixedOutputReset"],"kind":"trait"},"18:8926:23943":{"crate_id":18,"path":["object","common","FileFlags"],"kind":"enum"},"5:6824:11789":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"6:8563:14418":{"crate_id":6,"path":["std","path","Ancestors"],"kind":"struct"},"18:9445:15362":{"crate_id":18,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"18:9172:12049":{"crate_id":18,"path":["object","endian","U64Bytes"],"kind":"struct"},"23:143:5541":{"crate_id":23,"path":["generic_array","functional","MappedGenericSequence"],"kind":"trait"},"5:7269:35000":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:43533:5430":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:7438:159":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"6:8202:15172":{"crate_id":6,"path":["std","io","Chain"],"kind":"struct"},"1:47148:14774":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:9502:11322":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:21042:17051":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"24:6294:130":{"crate_id":24,"path":["typenum","Equal"],"kind":"struct"},"5:7450:15120":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:6960:15477":{"crate_id":17,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"5:3669:11744":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"5:1011:11744":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:4641:12963":{"crate_id":17,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:44410:14729":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"7:4458:13674":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"18:8686:23936":{"crate_id":18,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:21475:16777":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"7:4526:13709":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:42564:74":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:43373:14722":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"19:652:11921":{"crate_id":19,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:2428:12900":{"crate_id":17,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"7:1513:13437":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:22228:14472":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:5407:11701":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"17:2574:12906":{"crate_id":17,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"5:6584:11259":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:47861:11156":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"7:1690:13552":{"crate_id":7,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:11234:14444":{"crate_id":6,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:41518:11258":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:21802:29441":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"18:11815:12185":{"crate_id":18,"path":["object","archive","AixHeader"],"kind":"struct"},"5:629:15655":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"18:13778:12663":{"crate_id":18,"path":["object","pe","ImageSymbol"],"kind":"struct"},"12:365:11684":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"7:1575:13472":{"crate_id":7,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"5:7220:14454":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"5:7501:15123":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:6499:12941":{"crate_id":17,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"12:1121:15532":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"18:11639:12136":{"crate_id":18,"path":["object","read","Export"],"kind":"struct"},"18:10507:14860":{"crate_id":18,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"18:14221:12801":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:358:15536":{"crate_id":6,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:46112:14758":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"10:426:22867":{"crate_id":10,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:7708:12940":{"crate_id":17,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:41978:92":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:45637:14742":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"7:1663:13539":{"crate_id":7,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"6:918:15517":{"crate_id":6,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:43737:15156":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"18:13135:12462":{"crate_id":18,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"19:113:27903":{"crate_id":19,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"6:9038:15626":{"crate_id":6,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"6:2638:15558":{"crate_id":6,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"19:736:27911":{"crate_id":19,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:6204:15446":{"crate_id":17,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:7342:36848":{"crate_id":17,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:43850:15250":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:42515:72":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:2903:16562":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:22626:189":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"0:103:1812":{"crate_id":0,"path":["sha2","Sha512"],"kind":"type_alias"},"18:10126:14853":{"crate_id":18,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"7:1733:13568":{"crate_id":7,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:6364:178":{"crate_id":6,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"6:8232:15238":{"crate_id":6,"path":["std","io","Lines"],"kind":"struct"},"18:13792:12667":{"crate_id":18,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:8181:17310":{"crate_id":6,"path":["std","io","SeekFrom"],"kind":"enum"},"17:7782:15028":{"crate_id":17,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:44172:15277":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:2526:12904":{"crate_id":17,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"24:1091:17055":{"crate_id":24,"path":["typenum","private","IsLessOrEqualPrivate"],"kind":"trait"},"18:14536:12874":{"crate_id":18,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:21213:16776":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:39917:15158":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:2534:77":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"18:10628:14871":{"crate_id":18,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"6:9121:155":{"crate_id":6,"path":["std","time","Instant"],"kind":"struct"},"7:4931:13869":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"6:4634:17350":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:9003:35137":{"crate_id":6,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"18:13949:12701":{"crate_id":18,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"18:14126:12751":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:5588:12925":{"crate_id":17,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:22791:186":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"19:491:14835":{"crate_id":19,"path":["memchr","cow","Imp"],"kind":"struct"},"6:4830:17360":{"crate_id":6,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"7:4628:13735":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:9111:237":{"crate_id":6,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"24:2392:17051":{"crate_id":24,"path":["typenum","sealed","Sealed"],"kind":"trait"},"1:23403:239":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:40080:29710":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:1302:15532":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"6:913:15533":{"crate_id":6,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:2321:12889":{"crate_id":17,"path":["gimli","common","Encoding"],"kind":"struct"},"17:6467:14973":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:7474:15500":{"crate_id":17,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"18:12154:12258":{"crate_id":18,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"18:9617:36857":{"crate_id":18,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:4889:12970":{"crate_id":17,"path":["gimli","constants","DwDsc"],"kind":"struct"},"18:11124:15430":{"crate_id":18,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"23:300:5547":{"crate_id":23,"path":["generic_array","sequence","Shorten"],"kind":"trait"},"1:9709:151":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"6:4047:17352":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"18:8659:23923":{"crate_id":18,"path":["object","common","AddressSize"],"kind":"enum"},"7:5802:13983":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"23:260:5544":{"crate_id":23,"path":["generic_array","sequence","GenericSequence"],"kind":"trait"},"5:3204:15054":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:7613:15507":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:22153:15140":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:10467:5446":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:1760:14460":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"24:814:17066":{"crate_id":24,"path":["typenum","private","PrivateAnd"],"kind":"trait"},"1:43864:15253":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"18:11226:14881":{"crate_id":18,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"5:7259:11754":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:7318:13080":{"crate_id":17,"path":["gimli","read","op","Piece"],"kind":"struct"},"6:12072:1598":{"crate_id":6,"path":["std","u128"],"kind":"primitive"},"6:622:15539":{"crate_id":6,"path":["std","backtrace","Backtrace"],"kind":"struct"},"7:5070:13934":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"18:11381:12147":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:10581:5430":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:9963:11815":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"10:507:13335":{"crate_id":10,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:21227:16533":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"10:486:22864":{"crate_id":10,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"18:9790:36860":{"crate_id":18,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"7:4330:13601":{"crate_id":7,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"13:0:2081":{"crate_id":13,"path":["rustc_std_workspace_alloc"],"kind":"module"},"6:3989:17348":{"crate_id":6,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"18:11111:15429":{"crate_id":18,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"5:3800:11778":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"12:695:15518":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:8072:13158":{"crate_id":17,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"6:1840:15550":{"crate_id":6,"path":["std","env","Args"],"kind":"struct"},"5:7476:11773":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"6:10088:15549":{"crate_id":6,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"7:6729:14222":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"18:10698:15412":{"crate_id":18,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:5403:12045":{"crate_id":17,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"6:4578:17393":{"crate_id":6,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"18:11173:24070":{"crate_id":18,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"18:10292:12078":{"crate_id":18,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:45868:14750":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"4:339:5392":{"crate_id":4,"path":["digest","core_api","XofReaderCore"],"kind":"trait"},"18:12237:12275":{"crate_id":18,"path":["object","elf","Verneed"],"kind":"struct"},"1:2498:6162":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"24:785:17078":{"crate_id":24,"path":["typenum","private","Trim"],"kind":"trait"},"1:46044:14755":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:12069:1599":{"crate_id":6,"path":["std","u16"],"kind":"primitive"},"7:494:13365":{"crate_id":7,"path":["libc","unix","timespec"],"kind":"struct"},"6:11066:11732":{"crate_id":6,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"18:10447:15398":{"crate_id":18,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:9865:11808":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:43256:5442":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:3652:11259":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:21477:14464":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:45775:14748":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:4921:12971":{"crate_id":17,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:11141:5444":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"23:317:5428":{"crate_id":23,"path":["generic_array","sequence","Split"],"kind":"trait"},"1:39209:218":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"6:0:1488":{"crate_id":6,"path":["std"],"kind":"module"},"18:11074:15426":{"crate_id":18,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"18:11661:12170":{"crate_id":18,"path":["object","read","CodeView"],"kind":"struct"},"1:44184:14443":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"18:9051:23924":{"crate_id":18,"path":["object","endian","Endianness"],"kind":"enum"},"18:12086:12243":{"crate_id":18,"path":["object","elf","Rel32"],"kind":"struct"},"6:4712:17375":{"crate_id":6,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:47808:11153":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:12051:446":{"crate_id":6,"path":["std","char"],"kind":"primitive"},"5:1482:15533":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"5:1411:5424":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"6:4168:17371":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:6415:14969":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:8154:15509":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:47938:6005":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"16:0:2084":{"crate_id":16,"path":["addr2line"],"kind":"module"},"17:4719:12964":{"crate_id":17,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:2887:16558":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:7934:29747":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:7664:15594":{"crate_id":6,"path":["std","thread","Builder"],"kind":"struct"},"1:21914:16770":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"18:14514:12868":{"crate_id":18,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"24:615:5485":{"crate_id":24,"path":["typenum","marker_traits","Bit"],"kind":"trait"},"19:564:11928":{"crate_id":19,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:6346:15476":{"crate_id":17,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:6014:15127":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"6:11055:2104":{"crate_id":6,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:44440:15283":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"3:0:2077":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"18:11086:15427":{"crate_id":18,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:7462:13102":{"crate_id":17,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:1737:16544":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:8312:15611":{"crate_id":6,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"24:1031:17052":{"crate_id":24,"path":["typenum","private","IsLessPrivate"],"kind":"trait"},"1:46942:14773":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:22659:190":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"7:4940:13875":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"0:98:1802":{"crate_id":0,"path":["sha2","Sha224"],"kind":"type_alias"},"1:44228:15280":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"22:48:17099":{"crate_id":22,"path":["crypto_common","KeyInit"],"kind":"trait"},"18:12208:12264":{"crate_id":18,"path":["object","elf","Verdef"],"kind":"struct"},"4:330:1941":{"crate_id":4,"path":["digest","core_api","UpdateCore"],"kind":"trait"},"5:5369:5548":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:10784:15080":{"crate_id":6,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"7:6031:14098":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"7:123:17541":{"crate_id":7,"path":["libc","unix","fpos_t"],"kind":"enum"},"5:782:11747":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"18:8825:23940":{"crate_id":18,"path":["object","common","SymbolScope"],"kind":"enum"},"6:7920:15602":{"crate_id":6,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"6:6602:17445":{"crate_id":6,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:45757:14747":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"18:13739:12654":{"crate_id":18,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:39959:15159":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:40023:15165":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"24:1261:5490":{"crate_id":24,"path":["typenum","type_operators","IsGreaterOrEqual"],"kind":"trait"},"17:7436:13101":{"crate_id":17,"path":["gimli","read","op","Expression"],"kind":"struct"},"18:10430:15394":{"crate_id":18,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"6:11216:14431":{"crate_id":6,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"17:6844:13033":{"crate_id":17,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"25:0:1932":{"crate_id":25,"path":["block_buffer"],"kind":"module"},"18:10084:15378":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"16:288:22969":{"crate_id":16,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:22956:187":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"6:7860:15600":{"crate_id":6,"path":["std","fs","ReadDir"],"kind":"struct"},"6:8293:15068":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:2504:12903":{"crate_id":17,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:638:15540":{"crate_id":6,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"18:13632:12638":{"crate_id":18,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"6:6077:11706":{"crate_id":6,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"18:10646:12152":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"18:10547:14863":{"crate_id":18,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:43929:15256":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:40549:15199":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:8670:15678":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:9442:11317":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"18:11991:12227":{"crate_id":18,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:727:148":{"crate_id":6,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"4:341:1942":{"crate_id":4,"path":["digest","core_api","VariableOutputCore"],"kind":"trait"},"1:40773:11806":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:12705:207":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"17:3764:12949":{"crate_id":17,"path":["gimli","constants","DwSect"],"kind":"struct"},"6:3348:17333":{"crate_id":6,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:5384:23875":{"crate_id":17,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"12:1517:15534":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:2918:13062":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"5:2049:15658":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:21444:17051":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"18:14145:12756":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:46265:14762":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:46522:14767":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:5646:15058":{"crate_id":6,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"5:1426:5425":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:6600:23881":{"crate_id":17,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"7:4750:13773":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"18:13981:12711":{"crate_id":18,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:4053:12954":{"crate_id":17,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:20908:17059":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"7:4897:13844":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:7360:36849":{"crate_id":17,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"7:4680:13739":{"crate_id":7,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:40791:15207":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:3325:16578":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:2844:16395":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"7:4608:13733":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"27:0:1815":{"crate_id":27,"path":["cpufeatures"],"kind":"module"},"7:1709:13559":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"18:11235:14882":{"crate_id":18,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"4:334:5390":{"crate_id":4,"path":["digest","core_api","FixedOutputCore"],"kind":"trait"},"17:6425:14970":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"7:4789:13795":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"5:2131:11690":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"7:119:17540":{"crate_id":7,"path":["libc","unix","FILE"],"kind":"enum"},"19:521:27913":{"crate_id":19,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:4478:17375":{"crate_id":6,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"12:119:11680":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"18:9762:36861":{"crate_id":18,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"18:10366:15388":{"crate_id":18,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:10990:35765":{"crate_id":6,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"24:1071:17054":{"crate_id":24,"path":["typenum","private","IsGreaterPrivate"],"kind":"trait"},"5:7434:29710":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:41822:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:2849:16396":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:4644:14202":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:9177:28746":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:4003:17350":{"crate_id":6,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:40016:15164":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:46758:14771":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:2576:11695":{"crate_id":6,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"7:6037:14101":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:43551:5426":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:9106:179":{"crate_id":6,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"7:4820:13807":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"15:202:17153":{"crate_id":15,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:10975:15582":{"crate_id":6,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"5:7463:15122":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:47782:11151":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"6:12071:1601":{"crate_id":6,"path":["std","u64"],"kind":"primitive"},"18:12225:12272":{"crate_id":18,"path":["object","elf","Verdaux"],"kind":"struct"},"7:1696:13555":{"crate_id":7,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:3741:15569":{"crate_id":6,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:40294:15185":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"18:10929:12123":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:22:723":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"4:512:1940":{"crate_id":4,"path":["digest","core_api","TruncSide"],"kind":"enum"},"1:6884:16666":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"7:6714:14216":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:4500:17376":{"crate_id":6,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"7:1595:13486":{"crate_id":7,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:3188:36600":{"crate_id":6,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:6968:23883":{"crate_id":17,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:41552:14708":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"6:3391:15206":{"crate_id":6,"path":["std","io","util","Repeat"],"kind":"struct"},"6:12052:1618":{"crate_id":6,"path":["std","unit"],"kind":"primitive"},"6:5760:15586":{"crate_id":6,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"18:12437:12328":{"crate_id":18,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:3185:36202":{"crate_id":6,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:40096:15170":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:0:2085":{"crate_id":17,"path":["gimli"],"kind":"module"},"1:3248:139":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"5:878:11752":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"7:5082:13939":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:5639:11714":{"crate_id":6,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:6156:14960":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"24:6250:5412":{"crate_id":24,"path":["typenum","Greater"],"kind":"struct"},"1:47823:11154":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:39969:15160":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:6332:12921":{"crate_id":17,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:40371:11939":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:32019:15682":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"18:11272:14884":{"crate_id":18,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"6:1585:15054":{"crate_id":6,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:25805:268":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"7:4881:1056":{"crate_id":7,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"6:9984:15212":{"crate_id":6,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:7391:23885":{"crate_id":17,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:22692:191":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"6:5578:17429":{"crate_id":6,"path":["std","process","Termination"],"kind":"trait"},"18:14316:12819":{"crate_id":18,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"5:7328:11259":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"18:13914:12695":{"crate_id":18,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:31972:6161":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"17:2788:12915":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"18:12293:12292":{"crate_id":18,"path":["object","elf","HashHeader"],"kind":"struct"},"18:9328:12053":{"crate_id":18,"path":["object","read","util","Bytes"],"kind":"struct"},"18:10186:14856":{"crate_id":18,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"18:504:15351":{"crate_id":18,"path":["object","read","any","Comdat"],"kind":"struct"},"19:671:15347":{"crate_id":19,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"18:9003:23946":{"crate_id":18,"path":["object","common","SymbolFlags"],"kind":"enum"},"18:9896:23959":{"crate_id":18,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"12:805:17264":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:9159:15077":{"crate_id":6,"path":["std","time","SystemTimeError"],"kind":"struct"},"12:285:15044":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:7523:15026":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"4:421:2092":{"crate_id":4,"path":["digest","FixedOutput"],"kind":"trait"},"5:3568:175":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"6:5753:15583":{"crate_id":6,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:7476:125":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:8505:17424":{"crate_id":6,"path":["std","path","Component"],"kind":"enum"},"17:5798:12983":{"crate_id":17,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"18:14324:12820":{"crate_id":18,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:5866:14922":{"crate_id":17,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"18:582:12042":{"crate_id":18,"path":["object","read","any","Symbol"],"kind":"struct"},"5:7237:15114":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:2618:12908":{"crate_id":17,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:8238:15611":{"crate_id":6,"path":["std","net","tcp","Incoming"],"kind":"struct"},"18:12305:12295":{"crate_id":18,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"12:332:11682":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"18:14163:12759":{"crate_id":18,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"19:614:36862":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:5509:15582":{"crate_id":6,"path":["std","process","Stdio"],"kind":"struct"},"1:30312:28629":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:22031:15138":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:41405:15215":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:7544:15027":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"12:667:15517":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:11182:2001":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"5:2966:35015":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:4774:12966":{"crate_id":17,"path":["gimli","constants","DwId"],"kind":"struct"},"6:1817:15549":{"crate_id":6,"path":["std","env","SplitPaths"],"kind":"struct"},"18:9921:15371":{"crate_id":18,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"7:1569:13470":{"crate_id":7,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:6485:12924":{"crate_id":17,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:42226:11318":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:42524:68":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"19:719:11942":{"crate_id":19,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:6944:36846":{"crate_id":17,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:4200:11328":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"6:1579:15053":{"crate_id":6,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"18:0:2086":{"crate_id":18,"path":["object"],"kind":"module"},"18:12184:12262":{"crate_id":18,"path":["object","elf","Dyn64"],"kind":"struct"},"17:6041:23879":{"crate_id":17,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:43327:5437":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"12:1068:15530":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"7:6720:14218":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:12070:1600":{"crate_id":6,"path":["std","u32"],"kind":"primitive"},"1:45489:14736":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:2835:11208":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"1:32008:15599":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:4808:30018":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"6:505:11690":{"crate_id":6,"path":["std","thread","PanicGuard"],"kind":"struct"},"7:7549:14333":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:41939:85":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:7015:13047":{"crate_id":17,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:7890:16592":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"4:294:17051":{"crate_id":4,"path":["digest","core_api","wrapper","sealed","Sealed"],"kind":"trait"},"1:40314:15187":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"18:12598:12357":{"crate_id":18,"path":["object","macho","Section32"],"kind":"struct"},"6:2598:15557":{"crate_id":6,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:6352:14965":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"24:2520:1775":{"crate_id":24,"path":["typenum","generated","consts","U32"],"kind":"type_alias"},"6:4176:17372":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"5:5788:253":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:45698:14744":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:7585:171":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:6318:12993":{"crate_id":17,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:2883:16559":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"5:7291:213":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"21:0:2088":{"crate_id":21,"path":["blobby"],"kind":"module"},"1:20848:11222":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:8415:14409":{"crate_id":6,"path":["std","path","Prefix"],"kind":"enum"},"6:4646:14204":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:42964:14720":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"10:393:22866":{"crate_id":10,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:6437:15589":{"crate_id":6,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:4749:17361":{"crate_id":6,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"18:11295:14885":{"crate_id":18,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"5:4426:11767":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"19:574:11921":{"crate_id":19,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"5:6465:11760":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:1634:625":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"17:7884:23888":{"crate_id":17,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"18:11687:23950":{"crate_id":18,"path":["object","read","RelocationTarget"],"kind":"enum"},"18:10112:15380":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"18:13693:12645":{"crate_id":18,"path":["object","pe","Guid"],"kind":"struct"},"6:8948:17450":{"crate_id":6,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:4462:12957":{"crate_id":17,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:7893:16661":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"7:4742:13770":{"crate_id":7,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"4:383:2103":{"crate_id":4,"path":["digest","digest","DynDigest"],"kind":"trait"},"6:4189:17373":{"crate_id":6,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"18:11137:15431":{"crate_id":18,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"5:4985:11701":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:9701:147":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:43835:15244":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:2908:16563":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"7:4570:13731":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"10:357:22880":{"crate_id":10,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"6:3846:15571":{"crate_id":6,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:8167:15512":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:11802:15231":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"5:7387:17129":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:2969:23017":{"crate_id":17,"path":["gimli","common","SectionId"],"kind":"enum"},"7:6657:14209":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:43225:5422":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:2214:133":{"crate_id":6,"path":["std","fs","File"],"kind":"struct"},"1:7153:13098":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"24:835:17049":{"crate_id":24,"path":["typenum","private","PrivateIntegerAdd"],"kind":"trait"},"5:7249:11760":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"6:863:11259":{"crate_id":6,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"18:11151:15432":{"crate_id":18,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"0:102:1810":{"crate_id":0,"path":["sha2","Sha384"],"kind":"type_alias"},"1:43597:15234":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"5:4074:5425":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:20891:29591":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:42240:11321":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"18:9711:36855":{"crate_id":18,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"7:1557:13462":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:2775:240":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:10595:5426":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"15:160:15513":{"crate_id":15,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:11389:15593":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:6243:15465":{"crate_id":17,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:1076:15532":{"crate_id":6,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"22:46:1934":{"crate_id":22,"path":["crypto_common","AlgorithmName"],"kind":"trait"},"8:0:1648":{"crate_id":8,"path":["unwind"],"kind":"module"},"18:11023:12129":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:41900:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"18:11761:12178":{"crate_id":18,"path":["object","read","CompressedData"],"kind":"struct"},"7:1638:13520":{"crate_id":7,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"18:1184:15353":{"crate_id":18,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:43693:15239":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"12:968:15021":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"6:7718:17258":{"crate_id":6,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:4344:12955":{"crate_id":17,"path":["gimli","constants","DwAt"],"kind":"struct"},"7:1603:13491":{"crate_id":7,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:39149:216":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"12:311:15047":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"7:5891:14022":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:42732:15218":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"18:12765:12382":{"crate_id":18,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"18:12671:12096":{"crate_id":18,"path":["object","macho","Dylib"],"kind":"struct"},"18:256:15348":{"crate_id":18,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:7447:5825":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:11876:5445":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:2360:197":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"7:7567:14336":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"18:10227:15385":{"crate_id":18,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"18:10534:14862":{"crate_id":18,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:1548:11701":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"5:1288:15526":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"6:8286:15067":{"crate_id":6,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:2722:12912":{"crate_id":17,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:39997:15162":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"18:14478:12864":{"crate_id":18,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"18:12531:12346":{"crate_id":18,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:42779:15220":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"7:4864:13827":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:41595:16686":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:5994:223":{"crate_id":6,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"4:440:2097":{"crate_id":4,"path":["digest","VariableOutput"],"kind":"trait"},"18:14056:12734":{"crate_id":18,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"7:4448:13671":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:2216:15555":{"crate_id":6,"path":["std","fs","DirEntry"],"kind":"struct"},"17:2881:12919":{"crate_id":17,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"7:4471:13679":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"7:547:13399":{"crate_id":7,"path":["libc","unix","pollfd"],"kind":"struct"},"1:7397:5503":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"18:13876:12687":{"crate_id":18,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:9496:11320":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:30254:28634":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"16:327:22974":{"crate_id":16,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:46136:14759":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:39275:5416":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"}},"external_crates":{"26":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"23":{"name":"generic_array","html_root_url":null},"20":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"block_buffer","html_root_url":null},"22":{"name":"crypto_common","html_root_url":null},"19":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"digest","html_root_url":null},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"27":{"name":"cpufeatures","html_root_url":null},"24":{"name":"typenum","html_root_url":"https://docs.rs/typenum/1.17.0/"},"21":{"name":"blobby","html_root_url":"https://docs.rs/blobby/0.3.1/"},"18":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"6":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}