{"root":"0:0:1844","crate_version":"0.10.8","includes_private":false,"index":{"1:12719:867":{"id":"1:12719:867","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"6:12034:448"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2300-0:127:1818":{"id":"b:1:2300-0:127:1818","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2822:5853","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2294:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2302:2043"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:78:2007":{"id":"0:78:2007","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[147,4],"end":[149,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9811:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9792:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3450-0:132:1819":{"id":"b:1:3450-0:132:1819","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2822:5853","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3448:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3452:1625"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:51:1986":{"id":"0:51:1986","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[35,4],"end":[38,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"Block","id":"22:12:1966","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2606-0:127:1818":{"id":"b:1:2606-0:127:1818","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2583:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2580:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2609:11279"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12830:33975":{"id":"1:12830:33975","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:12034:448","self::pattern":"1:12415:16918"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12420:16121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12786:32485":{"id":"1:12786:32485","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"6:12034:448","str::splitn":"1:12783:32483","self::pattern":"1:12415:16918"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43973:5460","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12420:16121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12420:16121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12435:16924","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2606-0:132:1819":{"id":"b:1:2606-0:132:1819","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2583:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2580:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2609:11279"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:135":{"id":"0:135","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[89,9],"end":[89,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2316:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:136:452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8879:16883-0:132:1819":{"id":"a:1:8879:16883-0:132:1819","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8879:16883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:24:1171-0:132:1819":{"id":"b:24:1171-0:132:1819","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"24:1168:5552","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["24:1173:205"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:73:1989":{"id":"0:73:1989","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[118,4],"end":[118,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"TruncSide","id":"4:512:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}}},"0:46":{"id":"0:46","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[25,0],"end":[27,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"22:22:1967","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:47:1984"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[113,0],"end":[115,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"22:33:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:71:1988"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:77":{"id":"0:77","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[145,0],"end":[150,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"22:46:1965","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:78:2007"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2302:2043":{"id":"1:2302:2043","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[95,0],"end":[95,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:357:1977","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2624:134":{"id":"1:2624:134","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32351:6193","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:97-0:132:1819":{"id":"0:97-0:132:1819","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[76,34],"end":[76,47]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"core_api::Sha512VarCore","name":"Sha512VarCore","id":"0:132:1819","glob":false}}},"1:12744:15697":{"id":"1:12744:15697","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"6:12034:448"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43827:15669","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12795:2089":{"id":"1:12795:2089","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12415:16918","`DoubleEndedIterator`":"1:7785:127","prim@char":"6:12034:448","str::rmatches":"1:12798:33964"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44055:15681","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12420:16121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12801:33965":{"id":"1:12801:33965","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12415:16918","`DoubleEndedIterator`":"1:7785:127","prim@char":"6:12034:448","str::rmatch_indices":"1:12804:33966"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44001:15678","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12420:16121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5544:16496":{"id":"5:5544:16496","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12841:16500"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7524:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:100:1837":{"id":"0:100:1837","crate_id":0,"name":"Sha512_224","span":{"filename":"src/lib.rs","begin":[90,0],"end":[90,92]},"visibility":"public","docs":"SHA-512/224 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:492:1810","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:473:1811","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U28","id":"24:2508:1805","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512_224","id":"0:440:1828","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:71:1988":{"id":"0:71:1988","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[114,4],"end":[114,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"24:6316:5414","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5414","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5414","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5414","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5414","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5414","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5414","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"24:6363:5415","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"24:5724:5419","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"5:684:15549":{"id":"5:684:15549","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:12733:16394":{"id":"1:12733:16394","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41931:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41929:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10500:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10500:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2872:5854-0:127:1818":{"id":"a:1:2872:5854-0:127:1818","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2872:5854","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12777:33962":{"id":"1:12777:33962","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12415:16918","str::split":"1:12768:32478","prim@char":"6:12034:448","`DoubleEndedIterator`":"1:7785:127","str::rsplit_terminator":"1:12780:33963"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43901:15674","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12420:16121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:96-0:127:1818":{"id":"0:96-0:127:1818","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[76,19],"end":[76,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"core_api::Sha256VarCore","name":"Sha256VarCore","id":"0:127:1818","glob":false}}},"1:12747:28451":{"id":"1:12747:28451","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12746:28288"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:44134:15686","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2621-0:127:1818":{"id":"b:1:2621-0:127:1818","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2580:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2590:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2624:134","1:2625:1610"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:75:1994":{"id":"0:75:1994","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[134,4],"end":[142,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Buffer","id":"4:328:1968","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Output","id":"22:16:205","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12792:32488":{"id":"1:12792:32488","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41929:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12420:16121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12420:16121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12435:16924","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12729:339":{"id":"1:12729:339","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12730:5993","`u8`":"6:12051:1634"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:61":{"id":"0:61","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[78,0],"end":[83,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9836:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:62:712"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2300-0:132:1819":{"id":"b:1:2300-0:132:1819","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2822:5853","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2294:102","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2302:2043"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12737:16396":{"id":"1:12737:16396","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10500:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10500:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12771:28444":{"id":"1:12771:28444","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"6:12034:448","self::pattern":"1:12415:16918"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12231:5479","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12420:16121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5542:34651":{"id":"5:5542:34651","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2135","`String`":"5:7524:249"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2135","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7524:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[17,9],"end":[17,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2316:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:131:452"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:99:1835":{"id":"0:99:1835","crate_id":0,"name":"Sha256","span":{"filename":"src/lib.rs","begin":[88,0],"end":[88,84]},"visibility":"public","docs":"SHA-256 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:492:1810","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:473:1811","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U32","id":"24:2520:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha256","id":"0:376:1820","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:55:1989":{"id":"0:55:1989","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[46,4],"end":[46,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"TruncSide","id":"4:512:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}}},"0:65:1984":{"id":"0:65:1984","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[98,4],"end":[98,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"24:6316:5414","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5414","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5414","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5414","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5414","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5414","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5414","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5414","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"24:6363:5415","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"24:5724:5419","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"1:12836:33977":{"id":"1:12836:33977","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12376:133","`FromStr`":"1:12375:16591"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42074:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12375:16591","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12375:16591","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:64":{"id":"0:64","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[97,0],"end":[99,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"22:22:1967","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:65:1984"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:50":{"id":"0:50","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[33,0],"end":[39,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:330:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:51:1986"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:67:1985":{"id":"0:67:1985","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[102,4],"end":[102,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Eager","id":"25:77:1964","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"1:12743:15688":{"id":"1:12743:15688","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"6:12034:448"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43821:15668","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:685:28214":{"id":"5:685:28214","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12722:33955":{"id":"1:12722:33955","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2610-0:132:1819":{"id":"b:1:2610-0:132:1819","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2583:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2612:739"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:57:1994":{"id":"0:57:1994","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[60,4],"end":[68,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Buffer","id":"4:328:1968","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Output","id":"22:16:205","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2616-0:127:1818":{"id":"b:1:2616-0:127:1818","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2590:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2586:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2619:134","1:2620:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:682-0:132:1819":{"id":"b:5:682-0:132:1819","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2316:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:15549","5:685:28214","5:686:28215"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:102:1841":{"id":"0:102:1841","crate_id":0,"name":"Sha384","span":{"filename":"src/lib.rs","begin":[94,0],"end":[94,84]},"visibility":"public","docs":"SHA-384 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:492:1810","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:473:1811","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U48","id":"24:2568:1807","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha384","id":"0:392:1822","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:12730:5993":{"id":"1:12730:5993","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"6:12051:1634"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12739:33958":{"id":"1:12739:33958","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"6:12040:1529","str::slice_mut_unchecked":"1:12740:33959","crate::ops::Index":"1:3112:16774"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:101:1839":{"id":"0:101:1839","crate_id":0,"name":"Sha512_256","span":{"filename":"src/lib.rs","begin":[92,0],"end":[92,92]},"visibility":"public","docs":"SHA-512/256 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:492:1810","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:473:1811","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U32","id":"24:2520:1806","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512_256","id":"0:456:1830","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:12749:33961":{"id":"1:12749:33961","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44115:15684","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12841:16500":{"id":"1:12841:16500","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12721:33954":{"id":"1:12721:33954","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12754:32489":{"id":"1:12754:32489","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"6:12034:448","self::pattern":"1:12415:16918"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12420:16121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5526:34647":{"id":"5:5526:34647","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2135","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2135","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12720:11286":{"id":"1:12720:11286","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74:1029":{"id":"0:74:1029","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[121,4],"end":[131,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["output_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:42074:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"InvalidOutputSize","id":"4:522:1978","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2303-0:132:1819":{"id":"b:1:2303-0:132:1819","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2822:5853","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2297:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2305:28213"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:132:1819":{"id":"0:132:1819","crate_id":0,"name":"Sha512VarCore","span":{"filename":"src/core_api.rs","begin":[90,0],"end":[93,1]},"visibility":"public","docs":"Core block-level SHA-512 hasher with variable output size.\n\nSupports initialization only for 28, 32, 48, and 64 byte output sizes,\ni.e. 224, 256, 384, and 512 bits respectively.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:8878:16884-0:132:1819","a:1:8879:16883-0:132:1819","a:1:2872:5854-0:132:1819","a:1:2832:253-0:132:1819","a:1:2815:243-0:132:1819","b:1:2300-0:132:1819","b:1:2616-0:132:1819","b:1:2606-0:132:1819","b:1:3450-0:132:1819","b:1:2610-0:132:1819","b:1:2621-0:132:1819","b:1:2303-0:132:1819","b:5:682-0:132:1819","b:24:1171-0:132:1819","0:135","0:72","0:70","0:63","0:64","0:77","0:68","0:66","0:79"]}}},"1:12718":{"id":"1:12718","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12719:867","1:12720:11286","1:12721:33954","1:12722:33955","1:12724:33956","1:12727:32410","1:12728:33957","1:12729:339","1:12730:5993","1:12731:5999","1:12733:16394","1:12735:16395","1:12737:16396","1:12739:33958","1:12740:33959","1:12741:32470","1:12742:32471","1:12743:15688","1:12744:15697","1:12745:15538","1:12746:28288","1:12747:28451","1:12748:33960","1:12749:33961","1:12750:28913","1:12751:31543","1:12754:32489","1:12757:32490","1:12760:11324","1:12764:11285","1:12768:32478","1:12771:28444","1:12774:32481","1:12777:33962","1:12780:33963","1:12783:32483","1:12786:32485","1:12789:32487","1:12792:32488","1:12795:2089","1:12798:33964","1:12801:33965","1:12804:33966","1:12807:33967","1:12809:33968","1:12811:33969","1:12813:33970","1:12814:33971","1:12815:33972","1:12818:33973","1:12821:32491","1:12824:32492","1:12827:33974","1:12830:33975","1:12833:33976","1:12836:33977","1:12838:16494","1:12839:16495","1:12840:16499","1:12841:16500","1:12842:16501","1:12843:33978","1:12845:16795","1:12846:33979"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12740:33959":{"id":"1:12740:33959","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"6:12040:1529","crate::ops::IndexMut":"1:3116:16775","str::slice_unchecked":"1:12739:33958"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:5-4:0:1798":{"id":"0:5-4:0:1798","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[55,17],"end":[55,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"digest","name":"digest","id":"4:0:1798","glob":false}}},"1:12818:33973":{"id":"1:12818:33973","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:12034:448","self::pattern":"1:12415:16918"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12420:16121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2872:5854-0:132:1819":{"id":"a:1:2872:5854-0:132:1819","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2872:5854","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:53:1988":{"id":"0:53:1988","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[42,4],"end":[42,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"24:6316:5414","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5414","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5414","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5414","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5414","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5414","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"24:6363:5415","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"24:5724:5419","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"0:136:452":{"id":"0:136:452","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[89,9],"end":[89,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2612:739":{"id":"1:2612:739","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72":{"id":"0:72","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[117,0],"end":[143,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:341:1973","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:73:1989","0:74:1029","0:75:1994"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12838:16494":{"id":"1:12838:16494","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2619:134":{"id":"1:2619:134","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2590:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"1:12727:32410":{"id":"1:12727:32410","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11970:16925"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12742:32471":{"id":"1:12742:32471","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:12741:32470"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3450-0:127:1818":{"id":"b:1:3450-0:127:1818","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2822:5853","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3448:70","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3452:1625"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12768:32478":{"id":"1:12768:32478","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12415:16918","`DoubleEndedIterator`":"1:7785:127","prim@char":"6:12034:448","str::split_whitespace":"1:12746:28288","str::rsplit":"1:12774:32481"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43851:5462","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12420:16121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12804:33966":{"id":"1:12804:33966","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12415:16918","`DoubleEndedIterator`":"1:7785:127","prim@char":"6:12034:448","str::match_indices":"1:12801:33965"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44019:15679","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12420:16121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12420:16121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12435:16924","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12741:32470":{"id":"1:12741:32470","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:12742:32471"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69:1986":{"id":"0:69:1986","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[107,4],"end":[110,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"Block","id":"22:12:1966","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12774:32481":{"id":"1:12774:32481","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12415:16918","`DoubleEndedIterator`":"1:7785:127","prim@char":"6:12034:448","str::split":"1:12768:32478"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43869:5466","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12420:16121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12420:16121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12435:16924","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12813:33970":{"id":"1:12813:33970","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:24:1171-0:127:1818":{"id":"b:24:1171-0:127:1818","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"24:1168:5552","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["24:1173:205"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"24:1173:205":{"id":"24:1173:205","crate_id":24,"name":"Output","span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/src/type_operators.rs","begin":[35,4],"end":[35,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"a:1:8879:16883-0:127:1818":{"id":"a:1:8879:16883-0:127:1818","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8879:16883","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:6-4:358:1799":{"id":"0:6-4:358:1799","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[55,23],"end":[55,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"digest::Digest","name":"Digest","id":"4:358:1799","glob":false}}},"b:5:682-0:127:1818":{"id":"b:5:682-0:127:1818","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2316:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:678:256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:684:15549","5:685:28214","5:686:28215"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:47:1984":{"id":"0:47:1984","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[26,4],"end":[26,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"24:6316:5414","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5414","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5414","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5414","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5414","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5414","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5414","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"24:6363:5415","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"24:5724:5419","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5418","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"0:0:1844":{"id":"0:0:1844","crate_id":0,"name":"sha2","span":{"filename":"src/lib.rs","begin":[1,0],"end":[96,84]},"visibility":"public","docs":"An implementation of the [SHA-2][1] cryptographic hash algorithms.\n\nThere are 6 standard algorithms specified in the SHA-2 standard: [`Sha224`],\n[`Sha256`], [`Sha512_224`], [`Sha512_256`], [`Sha384`], and [`Sha512`].\n\nAlgorithmically, there are only 2 core algorithms: SHA-256 and SHA-512.\nAll other algorithms are just applications of these with different initial\nhash values, and truncated to different digest bit lengths. The first two\nalgorithms in the list are based on SHA-256, while the last four are based\non SHA-512.\n\n# Usage\n\n```rust\nuse hex_literal::hex;\nuse sha2::{Sha256, Sha512, Digest};\n\n// create a Sha256 object\nlet mut hasher = Sha256::new();\n\n// write input message\nhasher.update(b\"hello world\");\n\n// read hash digest and consume hasher\nlet result = hasher.finalize();\n\nassert_eq!(result[..], hex!(\"\n    b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\n\")[..]);\n\n// same for Sha512\nlet mut hasher = Sha512::new();\nhasher.update(b\"hello world\");\nlet result = hasher.finalize();\n\nassert_eq!(result[..], hex!(\"\n    309ecc489c12d6eb4cc40f50c902f2b4d0ed77ee511a7c7a9bcd3ca86d4cd86f\n    989dd35bc5ff499670da34255b45b0cfd830e81f605dcf7dc5542e93ae9cd76f\n\")[..]);\n```\n\nAlso see [RustCrypto/hashes][2] readme.\n\n[1]: https://en.wikipedia.org/wiki/SHA-2\n[2]: https://github.com/RustCrypto/hashes","links":{"`Sha256`":"0:99:1835","`Sha224`":"0:98:1833","`Sha512`":"0:103:1843","`Sha384`":"0:102:1841","`Sha512_256`":"0:101:1839","`Sha512_224`":"0:100:1837"},"attrs":["#![no_std]","#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\",\nhtml_favicon_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\")]","#![warn(missing_docs, rust_2018_idioms)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:5-4:0:1798","0:6-4:358:1799","0:96-0:127:1818","0:97-0:132:1819","0:98:1833","0:99:1835","0:100:1837","0:101:1839","0:102:1841","0:103:1843"],"is_stripped":false}}},"1:12845:16795":{"id":"1:12845:16795","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4616:16795"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:44159:15602","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12746:28288":{"id":"1:12746:28288","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12747:28451"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:44125:15685","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12748:33960":{"id":"1:12748:33960","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44105:15683","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5543:16861":{"id":"5:5543:16861","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7524:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7524:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5545:16497":{"id":"5:5545:16497","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12842:16501"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7524:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:56:1029":{"id":"0:56:1029","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[49,4],"end":[57,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["output_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:42074:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"InvalidOutputSize","id":"4:522:1978","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12735:16395":{"id":"1:12735:16395","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10500:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10500:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12821:32491":{"id":"1:12821:32491","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:12034:448","self::pattern":"1:12415:16918"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41929:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12420:16121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12840:16499":{"id":"1:12840:16499","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5533:34649":{"id":"5:5533:34649","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7524:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7524:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5525":{"id":"5:5525","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5526:34647","5:5527:11229","5:5530:34648","5:5533:34649","5:5541:34650","5:5542:34651","5:5543:16861","5:5544:16496","5:5545:16497"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2620:1612":{"id":"1:2620:1612","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:42074:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2590:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62:712":{"id":"0:62:712","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[80,4],"end":[82,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9811:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9792:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68":{"id":"0:68","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[105,0],"end":[111,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:330:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:69:1986"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8878:16884-0:132:1819":{"id":"a:1:8878:16884-0:132:1819","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8878:16884","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12728:33957":{"id":"1:12728:33957","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:54":{"id":"0:54","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[45,0],"end":[69,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:341:1973","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:55:1989","0:56:1029","0:57:1994"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2832:253-0:132:1819":{"id":"a:1:2832:253-0:132:1819","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2832:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2832:253-0:127:1818":{"id":"a:1:2832:253-0:127:1818","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2832:253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:686:28215":{"id":"5:686:28215","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2815:243-0:132:1819":{"id":"a:1:2815:243-0:132:1819","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2815:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12745:15538":{"id":"1:12745:15538","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43837:12497","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12757:32490":{"id":"1:12757:32490","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"6:12034:448","self::pattern":"1:12415:16918"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12420:16121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12420:16121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12435:16924","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12809:33968":{"id":"1:12809:33968","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12750:28913":{"id":"1:12750:28913","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:44143:15687","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12839:16495":{"id":"1:12839:16495","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39878:28633","Self::is_ascii":"1:12838:16494"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41929:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39878:28633","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12842:16501":{"id":"1:12842:16501","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2815:243-0:127:1818":{"id":"a:1:2815:243-0:127:1818","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2815:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2621-0:132:1819":{"id":"b:1:2621-0:132:1819","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2580:159","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2590:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2624:134","1:2625:1610"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:3452:1625":{"id":"1:3452:1625","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39691:15004","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12751:31543":{"id":"1:12751:31543","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"6:12034:448","self::pattern":"1:12415:16918"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12420:16121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12760:11324":{"id":"1:12760:11324","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41931:197","prim@char":"6:12034:448","self::pattern":"1:12415:16918"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41929:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12420:16121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12764:11285":{"id":"1:12764:11285","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41931:197","prim@char":"6:12034:448","self::pattern":"1:12415:16918"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41929:200","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12420:16121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12420:16121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12435:16924","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12789:32487":{"id":"1:12789:32487","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41929:200","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12420:16121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12798:33964":{"id":"1:12798:33964","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12415:16918","`DoubleEndedIterator`":"1:7785:127","prim@char":"6:12034:448","str::matches":"1:12795:2089"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44073:15682","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12420:16121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12420:16121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12435:16924","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2616-0:132:1819":{"id":"b:1:2616-0:132:1819","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2590:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2586:264","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2619:134","1:2620:1612"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12807:33967":{"id":"1:12807:33967","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2625:1610":{"id":"1:2625:1610","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:42074:232","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2590:263","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12827:33974":{"id":"1:12827:33974","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:12034:448","self::pattern":"1:12415:16918"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12420:16121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12420:16121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12435:16924","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12824:32492":{"id":"1:12824:32492","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:12034:448","self::pattern":"1:12415:16918"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41929:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12420:16121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12420:16121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12435:16924","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:131:452":{"id":"0:131:452","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[17,9],"end":[17,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:66":{"id":"0:66","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[101,0],"end":[103,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:332:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:67:1985"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5541:34650":{"id":"5:5541:34650","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7524:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7524:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2303-0:127:1818":{"id":"b:1:2303-0:127:1818","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2822:5853","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2297:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2305:28213"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:60:2007":{"id":"0:60:2007","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[73,4],"end":[75,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9811:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9792:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2609:11279":{"id":"1:2609:11279","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2583:141"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:59":{"id":"0:59","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[71,0],"end":[76,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"22:46:1965","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:60:2007"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[41,0],"end":[43,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"22:33:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:53:1988"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:45":{"id":"0:45","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[23,0],"end":[23,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:357:1977","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:103:1843":{"id":"0:103:1843","crate_id":0,"name":"Sha512","span":{"filename":"src/lib.rs","begin":[96,0],"end":[96,84]},"visibility":"public","docs":"SHA-512 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:492:1810","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:473:1811","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U64","id":"24:2616:1808","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512","id":"0:408:1824","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:12731:5999":{"id":"1:12731:5999","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41931:197"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41929:200","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10500:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10500:245","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12815:33972":{"id":"1:12815:33972","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"6:12034:448","self::pattern":"1:12415:16918"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12420:16121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12420:16121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12440:16923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12833:33976":{"id":"1:12833:33976","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:12034:448","self::pattern":"1:12415:16918"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12420:16121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12420:16121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12435:16924","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12846:33979":{"id":"1:12846:33979","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4613:33979"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:44168:15607","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:127:1818":{"id":"0:127:1818","crate_id":0,"name":"Sha256VarCore","span":{"filename":"src/core_api.rs","begin":[18,0],"end":[21,1]},"visibility":"public","docs":"Core block-level SHA-256 hasher with variable output size.\n\nSupports initialization only for 28 and 32 byte output sizes,\ni.e. 224 and 256 bits respectively.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:8878:16884-0:127:1818","a:1:8879:16883-0:127:1818","a:1:2872:5854-0:127:1818","a:1:2832:253-0:127:1818","a:1:2815:243-0:127:1818","b:1:2300-0:127:1818","b:1:2616-0:127:1818","b:1:2606-0:127:1818","b:1:3450-0:127:1818","b:1:2610-0:127:1818","b:1:2621-0:127:1818","b:1:2303-0:127:1818","b:5:682-0:127:1818","b:24:1171-0:127:1818","0:48","0:54","0:61","0:50","0:46","0:59","0:52","0:130","0:45"]}}},"1:12811:33969":{"id":"1:12811:33969","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5530:34648":{"id":"5:5530:34648","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7524:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7524:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12420:16121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12724:33956":{"id":"1:12724:33956","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:12722:33955"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8878:16884-0:127:1818":{"id":"a:1:8878:16884-0:127:1818","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8878:16884","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:2305:28213":{"id":"1:2305:28213","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:98:1833":{"id":"0:98:1833","crate_id":0,"name":"Sha224","span":{"filename":"src/lib.rs","begin":[86,0],"end":[86,84]},"visibility":"public","docs":"SHA-224 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:492:1810","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:473:1811","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U28","id":"24:2508:1805","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha224","id":"0:424:1826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:12814:33971":{"id":"1:12814:33971","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2610-0:127:1818":{"id":"b:1:2610-0:127:1818","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2583:141","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2612:739"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:80:712":{"id":"0:80:712","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[154,4],"end":[156,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9811:140","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9792:232","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12780:33963":{"id":"1:12780:33963","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12415:16918","str::split":"1:12768:32478","prim@char":"6:12034:448","str::split_terminator":"1:12777:33962"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43919:15675","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12420:16121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12420:16121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12435:16924","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12783:32483":{"id":"1:12783:32483","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"6:12034:448","self::pattern":"1:12415:16918","str::rsplitn":"1:12786:32485"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43955:5464","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12420:16121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:48":{"id":"0:48","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[29,0],"end":[31,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:332:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1818","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:49:1985"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:79":{"id":"0:79","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[152,0],"end":[157,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9836:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1819","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:80:712"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12843:33978":{"id":"1:12843:33978","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4615:33978"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:44150:15608","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:11229":{"id":"5:5527:11229","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7524:249"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7524:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12420:16121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:49:1985":{"id":"0:49:1985","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[30,4],"end":[30,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Eager","id":"25:77:1964","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"paths":{"5:6861:12237":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"6:7866:15508":{"crate_id":6,"path":["std","fs","Permissions"],"kind":"struct"},"6:5502:16025":{"crate_id":6,"path":["std","process","Stdio"],"kind":"struct"},"7:4351:14018":{"crate_id":7,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:21832:16978":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"1:9851:212":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:12231:5479":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"7:6741:14659":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:7884:24168":{"crate_id":17,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"24:2568:1807":{"crate_id":24,"path":["typenum","generated","consts","U48"],"kind":"type_alias"},"6:504:12138":{"crate_id":6,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:9165:16069":{"crate_id":6,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"6:6985:37099":{"crate_id":6,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"18:11743:12619":{"crate_id":18,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:2974:16770":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"19:96:28183":{"crate_id":19,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:39608:220":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"7:4914:14266":{"crate_id":7,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:21423:16972":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:2364:207":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"12:832:15975":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"10:52:23163":{"crate_id":10,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"25:77:1964":{"crate_id":25,"path":["block_buffer","Eager"],"kind":"struct"},"18:261:15792":{"crate_id":18,"path":["object","read","util","DebugLen"],"kind":"struct"},"6:6359:182":{"crate_id":6,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"6:12000:36526":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"24:1174:5553":{"crate_id":24,"path":["typenum","type_operators","Abs"],"kind":"trait"},"7:4724:14182":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"18:10411:15835":{"crate_id":18,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"15:0:2118":{"crate_id":15,"path":["rustc_demangle"],"kind":"module"},"7:4989:14313":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:21421:17255":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"24:1241:5556":{"crate_id":24,"path":["typenum","type_operators","IsLessOrEqual"],"kind":"trait"},"18:10371:15832":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:41853:15660":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:12435:16924":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:12375:16591":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:5641:15504":{"crate_id":6,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"5:1490:15975":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"18:14002:13162":{"crate_id":18,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:46683:15210":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:7474:15942":{"crate_id":17,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:22151:17058":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"24:1272:5535":{"crate_id":24,"path":["typenum","type_operators","SquareRoot"],"kind":"trait"},"6:8275:15513":{"crate_id":6,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"7:7657:14787":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"7:4543:14131":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"7:5928:14450":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:42125:5459":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"6:8974:16060":{"crate_id":6,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"5:2178:15553":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:4641:14656":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"18:11618:12612":{"crate_id":18,"path":["object","read","Import"],"kind":"struct"},"4:427:2129":{"crate_id":4,"path":["digest","XofReader"],"kind":"trait"},"18:11328:15332":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"23:382:5566":{"crate_id":23,"path":["generic_array","GenericArrayImplOdd"],"kind":"struct"},"18:9456:37178":{"crate_id":18,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"5:4994:12148":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"5:3225:35308":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"6:6646:239":{"crate_id":6,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"4:418:2126":{"crate_id":4,"path":["digest","Update"],"kind":"trait"},"18:14402:13286":{"crate_id":18,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"18:12137:12694":{"crate_id":18,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:22580:15590":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"12:2383:5458":{"crate_id":12,"path":["hashbrown","table","Iter"],"kind":"struct"},"6:11309:15533":{"crate_id":6,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"7:6228:14576":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"7:5969:14471":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:46910:15214":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"18:9753:15810":{"crate_id":18,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:8454:6147":{"crate_id":6,"path":["std","path","State"],"kind":"enum"},"18:14449:13300":{"crate_id":18,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"18:11359:24352":{"crate_id":18,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:2936:13503":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"18:12238:12719":{"crate_id":18,"path":["object","elf","Verneed"],"kind":"struct"},"18:12971:12873":{"crate_id":18,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:23321:11957":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"6:9481:12175":{"crate_id":6,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"18:8795:24219":{"crate_id":18,"path":["object","common","SymbolKind"],"kind":"enum"},"1:43851:5462":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"18:11317:12586":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"7:1576:13916":{"crate_id":7,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"18:14043:13171":{"crate_id":18,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"7:7556:14774":{"crate_id":7,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:5588:13369":{"crate_id":17,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:4497:13402":{"crate_id":17,"path":["gimli","constants","DwLle"],"kind":"struct"},"5:7424:17333":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:1644:629":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:32405:11363":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"5:7306:35143":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:41119:15647":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"6:8960:14875":{"crate_id":6,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"23:195:5574":{"crate_id":23,"path":["generic_array","iter","GenericArrayIter"],"kind":"struct"},"18:11216:15322":{"crate_id":18,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"7:6700:14632":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:7613:15949":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:3282:260":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:9476:16042":{"crate_id":6,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"19:727:12389":{"crate_id":19,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:40426:15136":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"7:1604:13935":{"crate_id":7,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:3162:36486":{"crate_id":6,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:40346:15606":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:47022:15216":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:3986:12148":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"12:1910:15498":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:43594:16138":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:7462:13542":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"5:3150:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:44134:15686":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"7:4686:14179":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"18:11887:12642":{"crate_id":18,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:646:17458":{"crate_id":6,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"5:6993:12238":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"18:13793:13111":{"crate_id":18,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"24:1221:5554":{"crate_id":24,"path":["typenum","type_operators","IsEqual"],"kind":"trait"},"1:40294:15604":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"4:531:2134":{"crate_id":4,"path":["digest","InvalidBufferSize"],"kind":"struct"},"17:3065:12393":{"crate_id":17,"path":["gimli","arch","Arm"],"kind":"struct"},"7:1496:13873":{"crate_id":7,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:12056:842":{"crate_id":6,"path":["std","isize"],"kind":"primitive"},"17:2618:13352":{"crate_id":17,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:21549:16973":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:6898:12168":{"crate_id":6,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"18:11307:12583":{"crate_id":18,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:9836:117":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"17:3232:13332":{"crate_id":17,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:8494:17632":{"crate_id":6,"path":["std","path","Component"],"kind":"enum"},"7:1691:13996":{"crate_id":7,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:6901:13375":{"crate_id":17,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"5:7328:216":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"5:1531:16098":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:43683:5469":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:10740:5479":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"0:98:1833":{"crate_id":0,"path":["sha2","Sha224"],"kind":"type_alias"},"1:40933:15645":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:45907:15184":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"24:998:17254":{"crate_id":24,"path":["typenum","private","PrivateRem"],"kind":"trait"},"1:44566:15716":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"16:288:23249":{"crate_id":16,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"24:0:1974":{"crate_id":24,"path":["typenum"],"kind":"module"},"6:10794:14802":{"crate_id":6,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"24:615:5519":{"crate_id":24,"path":["typenum","marker_traits","Bit"],"kind":"trait"},"1:47210:15220":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"3:0:2111":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"18:12485:12784":{"crate_id":18,"path":["object","macho","FatArch64"],"kind":"struct"},"7:4977:14304":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"7:507:13814":{"crate_id":7,"path":["libc","unix","rusage"],"kind":"struct"},"5:3179:5458":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:7176:16872":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"15:31:15955":{"crate_id":15,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"19:564:12372":{"crate_id":19,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"22:56:17306":{"crate_id":22,"path":["crypto_common","InnerIvInit"],"kind":"trait"},"1:22719:15595":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:7360:37167":{"crate_id":17,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:2583:141":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"17:7677:216":{"crate_id":17,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:7513:15470":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:21180:31302":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"7:4908:14263":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:149:12126":{"crate_id":17,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"7:5885:14433":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"18:12811:12831":{"crate_id":18,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"12:328:15492":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:5661:15348":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:6439:15578":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:2369:131":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"17:7269:37169":{"crate_id":17,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"18:14222:13245":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:5782:16030":{"crate_id":6,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:48356:6037":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"7:1507:13878":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"7:7388:14773":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"5:7357:11290":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"21:92:17245":{"crate_id":21,"path":["blobby","Blob4Iterator"],"kind":"struct"},"24:1153:17274":{"crate_id":24,"path":["typenum","private","PrivateLogarithm2"],"kind":"trait"},"18:1075:15795":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:41700:15143":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"6:7669:14801":{"crate_id":6,"path":["std","thread","ThreadId"],"kind":"struct"},"6:10942:16041":{"crate_id":6,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"17:6915:13376":{"crate_id":17,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"6:10764:15526":{"crate_id":6,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"17:6189:15408":{"crate_id":17,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"18:11163:12575":{"crate_id":18,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"7:5052:14344":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"19:652:12365":{"crate_id":19,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"9:0:1845":{"crate_id":9,"path":["cfg_if"],"kind":"module"},"19:481:15279":{"crate_id":19,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:44658:16945":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"6:8892:14872":{"crate_id":6,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"6:9110:158":{"crate_id":6,"path":["std","time","Instant"],"kind":"struct"},"17:2881:13363":{"crate_id":17,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:11478:16012":{"crate_id":6,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:3243:16007":{"crate_id":6,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:46940:15215":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"15:40:12657":{"crate_id":15,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"7:1639:13964":{"crate_id":7,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"7:7692:14796":{"crate_id":7,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:482:12137":{"crate_id":6,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"12:1728:152":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"18:12877:12856":{"crate_id":18,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"5:4242:5458":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"7:119:17748":{"crate_id":7,"path":["libc","unix","FILE"],"kind":"enum"},"18:400:15793":{"crate_id":18,"path":["object","read","any","Segment"],"kind":"struct"},"5:7296:12201":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:3839:16014":{"crate_id":6,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:1558:12148":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"7:4480:14104":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:5830:15361":{"crate_id":17,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:6844:13477":{"crate_id":17,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:12048:791":{"crate_id":6,"path":["std","i32"],"kind":"primitive"},"7:1664:13983":{"crate_id":7,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"18:10963:12570":{"crate_id":18,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:6156:15405":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:7782:15473":{"crate_id":17,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"7:5974:14472":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:5939:15375":{"crate_id":17,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:6299:226":{"crate_id":6,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:7568:13382":{"crate_id":17,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"6:12054:1633":{"crate_id":6,"path":["std","u64"],"kind":"primitive"},"1:13315:16969":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:46156:15194":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:41167:15137":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"19:614:37183":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"18:11001:12572":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"5:6949:269":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:4070:16112":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:47146:15218":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"12:687:5459":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"6:3982:17556":{"crate_id":6,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:5322:13422":{"crate_id":17,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:48226:11185":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:46240:15197":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:9792:232":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"18:10950:15862":{"crate_id":18,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"5:7549:16109":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:40358:15607":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"12:1891:12207":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"18:12712:12818":{"crate_id":18,"path":["object","macho","SubClientCommand"],"kind":"struct"},"6:7381:36533":{"crate_id":6,"path":["std","panicking","Hook"],"kind":"enum"},"19:538:12370":{"crate_id":19,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"6:10946:13776":{"crate_id":6,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:40530:16128":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"7:5023:14330":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:44785:213":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"19:766:28193":{"crate_id":19,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:13039:31532":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"18:11227:15326":{"crate_id":18,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"12:2151:15970":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:2923:16763":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"5:1522:216":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"18:14084:13185":{"crate_id":18,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:44820:16139":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:42949:29470":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:8134:15484":{"crate_id":17,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"24:1071:17258":{"crate_id":24,"path":["typenum","private","IsGreaterPrivate"],"kind":"trait"},"17:7128:14876":{"crate_id":17,"path":["gimli","read","op","Operation"],"kind":"enum"},"18:9661:37171":{"crate_id":18,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:7651:15950":{"crate_id":17,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:7582:13548":{"crate_id":17,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:11595:14895":{"crate_id":6,"path":["std","alloc","System"],"kind":"struct"},"18:13803:13112":{"crate_id":18,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:2766:13358":{"crate_id":17,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:1822:15996":{"crate_id":6,"path":["std","env","ArgsOs"],"kind":"struct"},"6:2210:17497":{"crate_id":6,"path":["std","fs","read_to_string"],"kind":"function"},"24:1251:5557":{"crate_id":24,"path":["typenum","type_operators","IsNotEqual"],"kind":"trait"},"7:6248:14590":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:9070:14879":{"crate_id":6,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"24:933:17285":{"crate_id":24,"path":["typenum","private","PrivateSetBit"],"kind":"trait"},"6:12041:1615":{"crate_id":6,"path":["std","tuple"],"kind":"primitive"},"18:11762:12622":{"crate_id":18,"path":["object","read","CompressedData"],"kind":"struct"},"6:641:15987":{"crate_id":6,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:7462:13546":{"crate_id":17,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"4:330:1972":{"crate_id":4,"path":["digest","core_api","UpdateCore"],"kind":"trait"},"7:4529:14123":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:7597:37165":{"crate_id":17,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"7:4764:14197":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"18:10398:15834":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:10973:5461":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:8985:16062":{"crate_id":6,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"6:12016:36449":{"crate_id":6,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"18:13056:12886":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"5:3743:16099":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"6:8233:16054":{"crate_id":6,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:44777:233":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:42005:11290":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:43645:5457":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:40336:15605":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:5905:15369":{"crate_id":17,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"18:10098:15822":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"18:14537:13318":{"crate_id":18,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:7534:13380":{"crate_id":17,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:2832:253":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"6:1568:15500":{"crate_id":6,"path":["std","collections","hash","set","Union"],"kind":"struct"},"18:10113:15823":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"18:8595:24205":{"crate_id":18,"path":["object","common","Architecture"],"kind":"enum"},"1:43663:5456":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"7:4698:14180":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"7:7371:14762":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"18:10548:15308":{"crate_id":18,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"19:491:15280":{"crate_id":19,"path":["memchr","cow","Imp"],"kind":"struct"},"1:41929:200":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"18:11992:12671":{"crate_id":18,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:40473:15616":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"18:10917:15860":{"crate_id":18,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"18:12738:12821":{"crate_id":18,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:2788:13359":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"5:7500:15568":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:1772:14909":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"12:1883:5458":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:46864:15213":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:3655:12398":{"crate_id":17,"path":["gimli","arch","X86_64"],"kind":"struct"},"19:755:15297":{"crate_id":19,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:46086:15191":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:8829:14869":{"crate_id":6,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:5963:15881":{"crate_id":17,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:2428:13344":{"crate_id":17,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"5:4356:270":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"6:12040:1529":{"crate_id":6,"path":["std","str"],"kind":"primitive"},"6:8301:16052":{"crate_id":6,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:46037:15189":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:39684:16127":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"7:1528:13886":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:21429:16975":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"7:1710:14003":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"12:742:15960":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"5:7412:15562":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:952:15967":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"19:699:15288":{"crate_id":19,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:44143:15687":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:10249:17639":{"crate_id":6,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:48104:15229":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"18:12532:12790":{"crate_id":18,"path":["object","macho","LoadCommand"],"kind":"struct"},"18:10228:15828":{"crate_id":18,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"5:2139:12138":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:46554:15207":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:44268:15695":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:42167:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:2958:13506":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"18:12791:12828":{"crate_id":18,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"12:2369:15980":{"crate_id":12,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"5:2469:14897":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"6:1055:15968":{"crate_id":6,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:7708:13384":{"crate_id":17,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"6:8201:15643":{"crate_id":6,"path":["std","io","Take"],"kind":"struct"},"1:10959:5465":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"24:821:17280":{"crate_id":24,"path":["typenum","private","PrivateXor"],"kind":"trait"},"18:10662:15848":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:22705:14930":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"7:6813:14672":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"12:434:37143":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:39526:219":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"18:12686:12815":{"crate_id":18,"path":["object","macho","DylibCommand"],"kind":"struct"},"10:0:2113":{"crate_id":10,"path":["miniz_oxide"],"kind":"module"},"10:357:23160":{"crate_id":10,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"6:11292:12181":{"crate_id":6,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"19:548:149":{"crate_id":19,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"18:11972:12670":{"crate_id":18,"path":["object","elf","SectionHeader64"],"kind":"struct"},"18:12831:12832":{"crate_id":18,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:12033:1025":{"crate_id":6,"path":["std","never"],"kind":"primitive"},"18:13633:13082":{"crate_id":18,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"18:10727:15857":{"crate_id":18,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:2472:13346":{"crate_id":17,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:1651:11231":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:8991:16121":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"18:14347:13270":{"crate_id":18,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:44411:15703":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:48215:11184":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"12:1917:15499":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:4058:16111":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:21168:31302":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"18:10293:12522":{"crate_id":18,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:7660:13552":{"crate_id":17,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:40487:16831":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"18:12946:12870":{"crate_id":18,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:44621:128":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"5:5334:12191":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:4321:227":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"17:8205:24169":{"crate_id":17,"path":["gimli","read","value","ValueType"],"kind":"enum"},"7:7651:14786":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"6:929:17468":{"crate_id":6,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"0:103:1843":{"crate_id":0,"path":["sha2","Sha512"],"kind":"type_alias"},"17:5760:24157":{"crate_id":17,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:7522:12152":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"6:10078:15994":{"crate_id":6,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:15:2090":{"crate_id":1,"path":["core","write"],"kind":"macro"},"7:5117:14377":{"crate_id":7,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"7:7668:14791":{"crate_id":7,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:11532:2032":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"6:6072:12153":{"crate_id":6,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"24:1231:5555":{"crate_id":24,"path":["typenum","type_operators","IsGreater"],"kind":"trait"},"18:10686:15852":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:868:15495":{"crate_id":6,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:22:726":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"17:2380:13342":{"crate_id":17,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:40407:16821":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"7:6159:14561":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"5:1019:12191":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"4:448:2133":{"crate_id":4,"path":["digest","VariableOutputReset"],"kind":"trait"},"1:3031:16779":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"18:11449:24228":{"crate_id":18,"path":["object","read","ObjectKind"],"kind":"enum"},"18:10604:15312":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"6:1557:15498":{"crate_id":6,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"18:12253:12725":{"crate_id":18,"path":["object","elf","Vernaux"],"kind":"struct"},"1:43441:15666":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"18:12672:12540":{"crate_id":18,"path":["object","macho","Dylib"],"kind":"struct"},"6:940:15964":{"crate_id":6,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"4:424:2128":{"crate_id":4,"path":["digest","FixedOutputReset"],"kind":"trait"},"1:2538:6194":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"18:11394:134":{"crate_id":18,"path":["object","read","Error"],"kind":"struct"},"6:2381:17510":{"crate_id":6,"path":["std","fs","read_dir"],"kind":"function"},"7:6682:14625":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:4505:11365":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"4:294:17255":{"crate_id":4,"path":["digest","core_api","wrapper","sealed","Sealed"],"kind":"trait"},"5:7457:15563":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:21212:17262":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"6:4917:17609":{"crate_id":6,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"7:5897:14437":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"18:12124:12693":{"crate_id":18,"path":["object","elf","Rela64"],"kind":"struct"},"5:687:116":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"18:13287:12924":{"crate_id":18,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:1749:16748":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"12:1582:15976":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:43694:5476":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:41830:28806":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"18:11192:12580":{"crate_id":18,"path":["object","read","pe","export","Export"],"kind":"struct"},"5:3589:5458":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"18:13245:12917":{"crate_id":18,"path":["object","macho","Nlist32"],"kind":"struct"},"16:327:23254":{"crate_id":16,"path":["addr2line","RangeAttributes"],"kind":"struct"},"18:10617:15313":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"26:0:1845":{"crate_id":26,"path":["cfg_if"],"kind":"module"},"1:46116:15192":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:4161:17579":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:4921:13415":{"crate_id":17,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:2210:16737":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"6:5755:16029":{"crate_id":6,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"18:13086:12889":{"crate_id":18,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"18:14146:13200":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:44574:15718":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"19:507:12365":{"crate_id":19,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:6386:13439":{"crate_id":17,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:2709:16110":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"17:4774:13410":{"crate_id":17,"path":["gimli","constants","DwId"],"kind":"struct"},"24:5780:5417":{"crate_id":24,"path":["typenum","int","NInt"],"kind":"struct"},"1:43211:153":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:1614:1492":{"crate_id":1,"path":["core","mem","size_of"],"kind":"function"},"6:8287:17582":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"6:4040:17560":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:47100:15217":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"18:12912:12867":{"crate_id":18,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:21979:17255":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"6:11199:14880":{"crate_id":6,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:1840:185":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"12:1676:12135":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"18:12063:12683":{"crate_id":18,"path":["object","elf","Syminfo32"],"kind":"struct"},"18:10495:15303":{"crate_id":18,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:40655:15627":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"18:13907:13137":{"crate_id":18,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:30633:28825":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"18:13114:12895":{"crate_id":18,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"4:502:5434":{"crate_id":4,"path":["digest","core_api","xof_reader","XofReaderCoreWrapper"],"kind":"struct"},"1:45931:15185":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"4:421:2127":{"crate_id":4,"path":["digest","FixedOutput"],"kind":"trait"},"1:48066:15228":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"4:473:1811":{"crate_id":4,"path":["digest","core_api","ct_variable","CtVariableCoreWrapper"],"kind":"struct"},"17:6560:12128":{"crate_id":17,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"17:5017:13418":{"crate_id":17,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:40586:15618":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"18:10508:15305":{"crate_id":18,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:12039:1496":{"crate_id":6,"path":["std","slice"],"kind":"primitive"},"7:1734:14012":{"crate_id":7,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"18:10673:15849":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:1797:15994":{"crate_id":6,"path":["std","env","SplitPaths"],"kind":"struct"},"18:13189:12910":{"crate_id":18,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:40599:15545":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"7:6136:14555":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:40720:15635":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:41717:16878":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"7:6711:14637":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"13:0:2116":{"crate_id":13,"path":["rustc_std_workspace_alloc"],"kind":"module"},"18:434:12442":{"crate_id":18,"path":["object","read","any","Section"],"kind":"struct"},"7:6961:14753":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"18:582:12486":{"crate_id":18,"path":["object","read","any","Symbol"],"kind":"struct"},"6:8227:16052":{"crate_id":6,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:40739:15637":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:41683:15141":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"18:12889:12858":{"crate_id":18,"path":["object","macho","DylibModule32"],"kind":"struct"},"7:6868:14711":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:7530:12486":{"crate_id":6,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"7:7604:14776":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"7:4428:14078":{"crate_id":7,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:12047:790":{"crate_id":6,"path":["std","i16"],"kind":"primitive"},"5:2251:15556":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:12052:1631":{"crate_id":6,"path":["std","u16"],"kind":"primitive"},"7:5955:14470":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"7:6934:14747":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"5:7266:11290":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:46706:15211":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"7:5140:14384":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"22:12:1966":{"crate_id":22,"path":["crypto_common","Block"],"kind":"type_alias"},"17:5435:13424":{"crate_id":17,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"7:4440:14081":{"crate_id":7,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"5:7608:12226":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"18:8660:24203":{"crate_id":18,"path":["object","common","AddressSize"],"kind":"enum"},"1:40730:15636":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:13211:113":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:44870:15180":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"15:202:17357":{"crate_id":15,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:43654:5455":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:4253:11362":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"6:12046:793":{"crate_id":6,"path":["std","i8"],"kind":"primitive"},"12:2304:15466":{"crate_id":12,"path":["hashbrown","table","Entry"],"kind":"enum"},"5:1680:12191":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"5:2968:35378":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"18:10241:12511":{"crate_id":18,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:8552:14867":{"crate_id":6,"path":["std","path","Ancestors"],"kind":"struct"},"1:41148:15651":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"4:291:5433":{"crate_id":4,"path":["digest","core_api","wrapper","CoreProxy"],"kind":"trait"},"1:2657:122":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:43720:5474":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:12120:15671":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"15:221:13688":{"crate_id":15,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:43026:11361":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"12:787:15496":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"17:6268:37168":{"crate_id":17,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:2825:251":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:4986:13417":{"crate_id":17,"path":["gimli","constants","DwLns"],"kind":"struct"},"6:5084:16018":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"18:9138:12492":{"crate_id":18,"path":["object","endian","U32Bytes"],"kind":"struct"},"7:1913:19099":{"crate_id":7,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"18:14356:13272":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:6542:16033":{"crate_id":6,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"12:396:12133":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"7:4939:1092":{"crate_id":7,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:2815:243":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:42921:15159":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"18:11587:12611":{"crate_id":18,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:7694:13383":{"crate_id":17,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:2880:11242":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"7:5075:14352":{"crate_id":7,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:2574:77":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"5:4401:12148":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"6:6598:17653":{"crate_id":6,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"17:8281:13610":{"crate_id":17,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:7710:16869":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"24:6294:132":{"crate_id":24,"path":["typenum","Equal"],"kind":"struct"},"17:2574:13350":{"crate_id":17,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"18:12622:12806":{"crate_id":18,"path":["object","macho","Section64"],"kind":"struct"},"18:11873:12641":{"crate_id":18,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:11458:5477":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"6:2355:17500":{"crate_id":6,"path":["std","fs","symlink_metadata"],"kind":"function"},"18:10085:15821":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:48020:15227":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"18:10789:24326":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"4:332:1969":{"crate_id":4,"path":["digest","core_api","BufferKindUser"],"kind":"trait"},"1:3692:11290":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"18:13175:12909":{"crate_id":18,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:2915:16761":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:2297:103":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:8158:14843":{"crate_id":6,"path":["std","io","IoSlice"],"kind":"struct"},"1:22669:28830":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"7:4783:14205":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"7:5009:14324":{"crate_id":7,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"4:341:1973":{"crate_id":4,"path":["digest","core_api","VariableOutputCore"],"kind":"trait"},"1:10817:5480":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:12050:788":{"crate_id":6,"path":["std","i128"],"kind":"primitive"},"1:2406:208":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"4:492:1810":{"crate_id":4,"path":["digest","core_api","wrapper","CoreWrapper"],"kind":"struct"},"1:45953:15186":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"18:12438:12772":{"crate_id":18,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"18:11024:12573":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"12:1066:23226":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"18:9618:37172":{"crate_id":18,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:4527:13403":{"crate_id":17,"path":["gimli","constants","DwDs"],"kind":"struct"},"12:2326:15968":{"crate_id":12,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"5:5951:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"10:450:23145":{"crate_id":10,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:7849:15507":{"crate_id":6,"path":["std","fs","OpenOptions"],"kind":"struct"},"18:11408:24227":{"crate_id":18,"path":["object","read","FileKind"],"kind":"enum"},"6:1535:5458":{"crate_id":6,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:44436:15704":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"18:12112:12692":{"crate_id":18,"path":["object","elf","Rel64"],"kind":"struct"},"17:3032:13387":{"crate_id":17,"path":["gimli","common","DwoId"],"kind":"struct"},"18:10981:12522":{"crate_id":18,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:3112:16774":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"18:9351:12499":{"crate_id":18,"path":["object","read","util","ByteString"],"kind":"struct"},"18:11846:12633":{"crate_id":18,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:22980:195":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"5:3576:179":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"6:363:15982":{"crate_id":6,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:4806:13411":{"crate_id":17,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:7102:24164":{"crate_id":17,"path":["gimli","read","op","DieReference"],"kind":"enum"},"4:336:5426":{"crate_id":4,"path":["digest","core_api","ExtendableOutputCore"],"kind":"trait"},"1:2580:159":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"18:13216:12914":{"crate_id":18,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"18:9575:37174":{"crate_id":18,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:10298:12142":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:46432:15202":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"7:569:13854":{"crate_id":7,"path":["libc","unix","sigval"],"kind":"struct"},"1:7747:162":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:42520:97":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:2822:5853":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:47958:15226":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"19:636:12385":{"crate_id":19,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:2927:16762":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"7:5921:14446":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"7:6798:14666":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"7:6837:14684":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:3272:5451":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"18:14461:13302":{"crate_id":18,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"6:3201:16004":{"crate_id":6,"path":["std","io","stdio","Stdin"],"kind":"struct"},"25:106:5428":{"crate_id":25,"path":["block_buffer","BlockBuffer"],"kind":"struct"},"6:2371:17505":{"crate_id":6,"path":["std","fs","canonicalize"],"kind":"function"},"24:6272:5448":{"crate_id":24,"path":["typenum","Less"],"kind":"struct"},"7:4745:14185":{"crate_id":7,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"18:8849:24221":{"crate_id":18,"path":["object","common","RelocationKind"],"kind":"enum"},"5:6474:12207":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:7856:14802":{"crate_id":6,"path":["std","fs","FileTimes"],"kind":"struct"},"1:2978:16771":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:42481:90":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"12:2554:37138":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"5:6594:11290":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"23:123:17248":{"crate_id":23,"path":["generic_array","arr","AddLength"],"kind":"trait"},"6:11047:12179":{"crate_id":6,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"4:436:2131":{"crate_id":4,"path":["digest","ExtendableOutputReset"],"kind":"trait"},"18:12577:12800":{"crate_id":18,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"7:4549:14134":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"7:6804:14668":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"7:7633:14783":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:7828:13564":{"crate_id":17,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"18:12725:12819":{"crate_id":18,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"18:12766:12826":{"crate_id":18,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"7:7343:14759":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:1407:152":{"crate_id":6,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"6:2519:16001":{"crate_id":6,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:41660:167":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"15:165:23232":{"crate_id":15,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:7722:13374":{"crate_id":17,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:8843:14870":{"crate_id":6,"path":["std","process","ExitCode"],"kind":"struct"},"1:48264:11187":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"18:13817:13113":{"crate_id":18,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"6:12037:1142":{"crate_id":6,"path":["std","pointer"],"kind":"primitive"},"24:613:201":{"crate_id":24,"path":["typenum","marker_traits","Ord"],"kind":"trait"},"12:1887:11290":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"7:4878:14251":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"18:10166:24257":{"crate_id":18,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"19:609:15785":{"crate_id":19,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"24:6250:5447":{"crate_id":24,"path":["typenum","Greater"],"kind":"struct"},"17:3764:13393":{"crate_id":17,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:23197:187":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"18:2178:15798":{"crate_id":18,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:3312:31234":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"18:9887:15812":{"crate_id":18,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:6083:23268":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"18:11138:15873":{"crate_id":18,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:41746:15150":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:2596:13351":{"crate_id":17,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:7240:28527":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:7924:16045":{"crate_id":6,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"7:4616:14166":{"crate_id":7,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:23042:193":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"6:7028:12169":{"crate_id":6,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"6:7739:17485":{"crate_id":6,"path":["std","env","VarError"],"kind":"enum"},"7:4860:14244":{"crate_id":7,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:11146:14868":{"crate_id":6,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:10945:5460":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"12:1896:12226":{"crate_id":12,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"24:2616:1808":{"crate_id":24,"path":["typenum","generated","consts","U64"],"kind":"type_alias"},"1:44073:15682":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:13222:12157":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"24:1091:17259":{"crate_id":24,"path":["typenum","private","IsLessOrEqualPrivate"],"kind":"trait"},"1:42931:11360":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"18:11125:15872":{"crate_id":18,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"6:1744:653":{"crate_id":6,"path":["std","env"],"kind":"module"},"18:10562:15309":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"7:1546:13897":{"crate_id":7,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"7:4710:14181":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"7:4830:14228":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:638:15985":{"crate_id":6,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:5828:15572":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:6468:12165":{"crate_id":6,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"12:811:12226":{"crate_id":12,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"6:4044:17561":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"7:6889:14725":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:44479:15714":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"18:8826:24220":{"crate_id":18,"path":["object","common","SymbolScope"],"kind":"enum"},"1:40698:15633":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:7070:2004":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"5:3728:15503":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:3990:17557":{"crate_id":6,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"6:4800:12149":{"crate_id":6,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"18:13163:12908":{"crate_id":18,"path":["object","macho","IdentCommand"],"kind":"struct"},"4:484:5432":{"crate_id":4,"path":["digest","core_api","rt_variable","RtVariableCoreWrapper"],"kind":"struct"},"12:123:12129":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"24:2520:1806":{"crate_id":24,"path":["typenum","generated","consts","U32"],"kind":"type_alias"},"1:47360:15221":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"6:8309:14848":{"crate_id":6,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"6:5570:14562":{"crate_id":6,"path":["std","process","exit"],"kind":"function"},"24:1276:5515":{"crate_id":24,"path":["typenum","type_operators","Gcd"],"kind":"trait"},"6:7690:12177":{"crate_id":6,"path":["std","thread","Thread"],"kind":"struct"},"17:3461:13391":{"crate_id":17,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:32387:16125":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:41142:15650":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:44159:15602":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"18:11236:15327":{"crate_id":18,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:44019:15679":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"18:10140:24256":{"crate_id":18,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"7:4884:14252":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"7:4523:14121":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:4344:13399":{"crate_id":17,"path":["gimli","constants","DwAt"],"kind":"struct"},"19:671:15790":{"crate_id":19,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:21827:17255":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"24:1016:17295":{"crate_id":24,"path":["typenum","private","PrivateMax"],"kind":"trait"},"17:6687:15433":{"crate_id":17,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"18:11474:12456":{"crate_id":18,"path":["object","read","SectionIndex"],"kind":"struct"},"17:2864:13362":{"crate_id":17,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"12:2548:13714":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:10100:11563":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"18:10279:15830":{"crate_id":18,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"5:785:12194":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:10540:16008":{"crate_id":6,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"24:1279:5512":{"crate_id":24,"path":["typenum","type_operators","ToInt"],"kind":"trait"},"6:12032:399":{"crate_id":6,"path":["std","bool"],"kind":"primitive"},"7:4506:14115":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"18:13011:12877":{"crate_id":18,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:22592:28820":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:306:23250":{"crate_id":16,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"6:724:150":{"crate_id":6,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:2907:13364":{"crate_id":17,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:9811:140":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"17:7284:15155":{"crate_id":17,"path":["gimli","read","op","Location"],"kind":"enum"},"6:11983:16093":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"5:3602:5459":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:2905:16760":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"18:256:15791":{"crate_id":18,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:9498:29531":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"7:4473:14100":{"crate_id":7,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"18:10367:15831":{"crate_id":18,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:7932:15503":{"crate_id":6,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:3325:17541":{"crate_id":6,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"18:2012:15797":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"18:13724:13095":{"crate_id":18,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:2919:16765":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"15:7:15955":{"crate_id":15,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"22:36:17300":{"crate_id":22,"path":["crypto_common","KeySizeUser"],"kind":"trait"},"1:2212:16738":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"6:915:15959":{"crate_id":6,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"5:207:12190":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"5:1511:15960":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"12:673:5458":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"18:12099:12690":{"crate_id":18,"path":["object","elf","Rela32"],"kind":"struct"},"17:4585:13405":{"crate_id":17,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:5827:12151":{"crate_id":6,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:23228:188":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"6:10534:16004":{"crate_id":6,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"6:11236:158":{"crate_id":6,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"1:44231:16938":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:2722:13356":{"crate_id":17,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"7:563:13851":{"crate_id":7,"path":["libc","unix","linger"],"kind":"struct"},"17:5403:12489":{"crate_id":17,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:6204:15888":{"crate_id":17,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:2931:16764":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:2889:16590":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"18:12960:12872":{"crate_id":18,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:11538:1962":{"crate_id":1,"path":["core","slice","raw","from_ref"],"kind":"function"},"1:40637:15624":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:42133:11290":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"17:8115:15481":{"crate_id":17,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"5:2043:15503":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"10:330:13756":{"crate_id":10,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"5:5867:12207":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:7718:17461":{"crate_id":6,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"5:5378:5582":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"5:0:313":{"crate_id":5,"path":["alloc"],"kind":"module"},"24:1202:5509":{"crate_id":24,"path":["typenum","type_operators","Min"],"kind":"trait"},"18:12226:12716":{"crate_id":18,"path":["object","elf","Verdaux"],"kind":"struct"},"6:3282:16009":{"crate_id":6,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"18:11338:24351":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"18:13102:12893":{"crate_id":18,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:3049:123":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"18:10930:12567":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"24:612:5508":{"crate_id":24,"path":["typenum","marker_traits","Zero"],"kind":"trait"},"1:10697:5462":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:2982:16772":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:2827:115":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"18:9986:15819":{"crate_id":18,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:41157:12254":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:4478:11215":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:22067:17056":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"5:7624:12230":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:12646:117":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:10475:12176":{"crate_id":6,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"18:11245:12612":{"crate_id":18,"path":["object","read","pe","import","Import"],"kind":"enum"},"6:1910:699":{"crate_id":6,"path":["std","ffi"],"kind":"module"},"6:3968:17555":{"crate_id":6,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"18:10060:12515":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"12:2562:13716":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:5973:12161":{"crate_id":6,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:2644:13353":{"crate_id":17,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"6:3368:15651":{"crate_id":6,"path":["std","io","util","Repeat"],"kind":"struct"},"6:4746:17572":{"crate_id":6,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:3484:11349":{"crate_id":6,"path":["std","io","Write"],"kind":"trait"},"6:2946:232":{"crate_id":6,"path":["std","io","error","Result"],"kind":"type_alias"},"12:837:15961":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:2877:112":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:7006:15920":{"crate_id":17,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:8873:14871":{"crate_id":6,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:3073:5855":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:5634:12161":{"crate_id":6,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"24:835:17253":{"crate_id":24,"path":["typenum","private","PrivateIntegerAdd"],"kind":"trait"},"6:4233:16015":{"crate_id":6,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"5:781:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:4404:11363":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"24:785:17282":{"crate_id":24,"path":["typenum","private","Trim"],"kind":"trait"},"1:12486:16932":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:5696:24156":{"crate_id":17,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"7:4535:14126":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:22112:17057":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"6:3445:16011":{"crate_id":6,"path":["std","io","IoSliceMut"],"kind":"struct"},"7:1501:13875":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:10782:15532":{"crate_id":6,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:6261:15915":{"crate_id":17,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"6:12035:1650":{"crate_id":6,"path":["std","unit"],"kind":"primitive"},"18:9329:12497":{"crate_id":18,"path":["object","read","util","Bytes"],"kind":"struct"},"1:47708:15223":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"18:10127:15298":{"crate_id":18,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:4682:16814":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"6:7541:16090":{"crate_id":6,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"18:11262:15328":{"crate_id":18,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:11614:15544":{"crate_id":6,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:12034:448":{"crate_id":6,"path":["std","char"],"kind":"primitive"},"6:4052:17563":{"crate_id":6,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"7:4789:14208":{"crate_id":7,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"18:13686:13088":{"crate_id":18,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"18:9791:37177":{"crate_id":18,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:11818:12187":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"7:7622:14779":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"18:10441:15838":{"crate_id":18,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"7:5152:14389":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:3932:17554":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"12:299:15489":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"5:3808:12226":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"24:1211:5429":{"crate_id":24,"path":["typenum","type_operators","IsLess"],"kind":"trait"},"1:3448:70":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:44841:177":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:46175:15195":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:40755:12383":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:9845:11351":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:41133:15649":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:8992:36000":{"crate_id":6,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:44646:15725":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"7:5123:14380":{"crate_id":7,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"7:548:13843":{"crate_id":7,"path":["libc","unix","pollfd"],"kind":"struct"},"5:7440:12215":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:12440:16923":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"7:4610:14164":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"18:0:2121":{"crate_id":18,"path":["object"],"kind":"module"},"18:13149:12907":{"crate_id":18,"path":["object","macho","SymsegCommand"],"kind":"struct"},"18:12025:12677":{"crate_id":18,"path":["object","elf","Sym32"],"kind":"struct"},"7:6263:14601":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:8867:11290":{"crate_id":6,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:23259:189":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:44168:15607":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"7:6079:14534":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"11:0:2114":{"crate_id":11,"path":["adler"],"kind":"module"},"5:1296:15968":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:42362:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"7:1674:13989":{"crate_id":7,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"7:4922:14271":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:40769:15639":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:11160:14869":{"crate_id":6,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"7:4488:14107":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:42559:11192":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"18:11296:15330":{"crate_id":18,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:3077:137":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"18:9946:12511":{"crate_id":18,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"18:13891:13134":{"crate_id":18,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:8191:15618":{"crate_id":6,"path":["std","io","Chain"],"kind":"struct"},"1:5542:12148":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"24:844:17275":{"crate_id":24,"path":["typenum","private","PrivatePow"],"kind":"trait"},"6:910:15975":{"crate_id":6,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:10060:153":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"4:383:2138":{"crate_id":4,"path":["digest","digest","DynDigest"],"kind":"trait"},"17:2305:23295":{"crate_id":17,"path":["gimli","common","Vendor"],"kind":"enum"},"1:10281:12258":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"25:0:1963":{"crate_id":25,"path":["block_buffer"],"kind":"module"},"24:6316:5414":{"crate_id":24,"path":["typenum","uint","UInt"],"kind":"struct"},"24:1274:5528":{"crate_id":24,"path":["typenum","type_operators","Logarithm2"],"kind":"trait"},"7:5982:14477":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"7:4584:14153":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:40381:16820":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:44767:225":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"24:653:5540":{"crate_id":24,"path":["typenum","marker_traits","TypeArray"],"kind":"trait"},"5:1481:15496":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"7:6107:14547":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:47566:15222":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"12:2352:15970":{"crate_id":12,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"5:6520:12191":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:39566:218":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:1546:12226":{"crate_id":6,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"18:10448:15501":{"crate_id":18,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"7:4870:14248":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"18:14317:13263":{"crate_id":18,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:4742:17569":{"crate_id":6,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:8214:5462":{"crate_id":6,"path":["std","io","Split"],"kind":"struct"},"1:30691:28805":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"18:9446:15805":{"crate_id":18,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"4:358:1799":{"crate_id":4,"path":["digest","digest","Digest"],"kind":"trait"},"12:2403:5459":{"crate_id":12,"path":["hashbrown","table","IterMut"],"kind":"struct"},"6:2427:2050":{"crate_id":6,"path":["std","io"],"kind":"module"},"1:22653:28832":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:8072:13602":{"crate_id":17,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"4:457:14904":{"crate_id":4,"path":["digest","core_api","ct_variable","NoOid"],"kind":"struct"},"1:42142:202":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:8248:31832":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:2969:23297":{"crate_id":17,"path":["gimli","common","SectionId"],"kind":"enum"},"18:9208:12494":{"crate_id":18,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:3938:17553":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"7:4955:14288":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"5:1419:5458":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"25:22:17255":{"crate_id":25,"path":["block_buffer","sealed","Sealed"],"kind":"trait"},"1:40374:15608":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:46138:15193":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:44578:15719":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"19:0:2122":{"crate_id":19,"path":["memchr"],"kind":"module"},"1:23766:242":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:6171:212":{"crate_id":17,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:5121:13421":{"crate_id":17,"path":["gimli","constants","DwRle"],"kind":"struct"},"18:8766:24218":{"crate_id":18,"path":["object","common","ComdatKind"],"kind":"enum"},"6:1542:12207":{"crate_id":6,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"7:6071:14533":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"7:1591:13928":{"crate_id":7,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"18:12599:12801":{"crate_id":18,"path":["object","macho","Section32"],"kind":"struct"},"1:39513:15600":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:42681:11351":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"7:4496:14109":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:43901:15674":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:22556:14914":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:0:473":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:46605:15208":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:8404:14859":{"crate_id":6,"path":["std","path","Prefix"],"kind":"enum"},"7:4824:14225":{"crate_id":7,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"4:339:5427":{"crate_id":4,"path":["digest","core_api","XofReaderCore"],"kind":"trait"},"6:4153:17578":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:8563:15520":{"crate_id":6,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:42143:230":{"crate_id":1,"path":["core","sync","atomic","Ordering","Relaxed"],"kind":"foreign_type"},"1:22304:17054":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"6:5573:17637":{"crate_id":6,"path":["std","process","Termination"],"kind":"trait"},"6:5627:226":{"crate_id":6,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:2872:5854":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"6:5130:210":{"crate_id":6,"path":["std","path","PathBuf"],"kind":"struct"},"1:44374:15702":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"16:394:23260":{"crate_id":16,"path":["addr2line","DebugFile"],"kind":"enum"},"1:11940:5444":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:2823:11237":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"17:6243:15907":{"crate_id":17,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:48160:5957":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:3116:16775":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:40617:15621":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"7:6691:14631":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:8803:205":{"crate_id":6,"path":["std","process","Output"],"kind":"struct"},"18:14470:13306":{"crate_id":18,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:48169:11181":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:13091:16123":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:5363:13423":{"crate_id":17,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"6:9973:15657":{"crate_id":6,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:5995:15339":{"crate_id":17,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:5612:13371":{"crate_id":17,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:3830:13395":{"crate_id":17,"path":["gimli","constants","DwUt"],"kind":"struct"},"4:440:2132":{"crate_id":4,"path":["digest","VariableOutput"],"kind":"trait"},"1:2316:110":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"17:2670:13354":{"crate_id":17,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"7:1596:13930":{"crate_id":7,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:2294:102":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"12:2443:12207":{"crate_id":12,"path":["hashbrown","table","Drain"],"kind":"struct"},"5:6107:12148":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:3280:16008":{"crate_id":6,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:40440:106":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"6:4823:17568":{"crate_id":6,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"7:1703:14000":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"6:6813:17660":{"crate_id":6,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:7503:13379":{"crate_id":17,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:10537:16006":{"crate_id":6,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"24:611:5431":{"crate_id":24,"path":["typenum","marker_traits","NonZero"],"kind":"trait"},"1:2884:16589":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"7:489:13806":{"crate_id":7,"path":["libc","unix","timeval"],"kind":"struct"},"18:12935:12868":{"crate_id":18,"path":["object","macho","DylibReference"],"kind":"struct"},"24:989:17252":{"crate_id":24,"path":["typenum","private","PrivateDivInt"],"kind":"trait"},"1:42057:16892":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"19:644:12365":{"crate_id":19,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:22731:16592":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:13004:146":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:45861:15182":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:9855:11355":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"18:9712:37179":{"crate_id":18,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:12415:16918":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"18:13982:13155":{"crate_id":18,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"18:10187:15301":{"crate_id":18,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"18:3565:15804":{"crate_id":18,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"24:1111:17260":{"crate_id":24,"path":["typenum","private","IsNotEqualPrivate"],"kind":"trait"},"7:5033:14336":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:39705:15005":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"6:9015:16065":{"crate_id":6,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"6:4493:17584":{"crate_id":6,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"18:9922:15814":{"crate_id":18,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:21540:17255":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:42047:16131":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"18:9960:15817":{"crate_id":18,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:4449:12247":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"18:10013:12522":{"crate_id":18,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:5242:209":{"crate_id":6,"path":["std","path","Path"],"kind":"struct"},"1:10052:149":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"6:9022:16066":{"crate_id":6,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:23290:186":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:45985:15187":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:3797:13394":{"crate_id":17,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"18:8979:24225":{"crate_id":18,"path":["object","common","SectionFlags"],"kind":"enum"},"12:1107:15972":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"5:3212:15499":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:41989:5458":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"24:6172:5502":{"crate_id":24,"path":["typenum","array","ATerm"],"kind":"struct"},"0:0:1844":{"crate_id":0,"path":["sha2"],"kind":"module"},"17:6792:15447":{"crate_id":17,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"18:10384:15833":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"18:13488:12984":{"crate_id":18,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:21197:31298":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:10099:16072":{"crate_id":6,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"5:5797:257":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"24:2808:1976":{"crate_id":24,"path":["typenum","generated","consts","U128"],"kind":"type_alias"},"6:11518:16013":{"crate_id":6,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"6:1759:15992":{"crate_id":6,"path":["std","env","Vars"],"kind":"struct"},"18:13740:13098":{"crate_id":18,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:8208:12497":{"crate_id":6,"path":["std","io","Bytes"],"kind":"struct"},"18:14523:13315":{"crate_id":18,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"5:1126:35313":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"7:527:13831":{"crate_id":7,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:9276:15995":{"crate_id":6,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:4862:13413":{"crate_id":17,"path":["gimli","constants","DwOrd"],"kind":"struct"},"6:11372:16036":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:4639:14654":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"5:7538:15569":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"25:36:1985":{"crate_id":25,"path":["block_buffer","BufferKind"],"kind":"trait"},"1:22202:28923":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"6:1539:11290":{"crate_id":6,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"18:12998:12876":{"crate_id":18,"path":["object","macho","RpathCommand"],"kind":"struct"},"18:14069:13181":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"24:2392:17255":{"crate_id":24,"path":["typenum","sealed","Sealed"],"kind":"trait"},"24:5814:5420":{"crate_id":24,"path":["typenum","int","Z0"],"kind":"struct"},"7:5146:14386":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"7:6927:14744":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"6:8851:5458":{"crate_id":6,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:588:17456":{"crate_id":6,"path":["std","ascii","AsciiExt"],"kind":"trait"},"12:351:37139":{"crate_id":12,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:43919:15675":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:7896:125":{"crate_id":6,"path":["std","fs","DirBuilder"],"kind":"struct"},"6:919:15960":{"crate_id":6,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:41866:15513":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:11539:16014":{"crate_id":6,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:6041:24159":{"crate_id":17,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"22:54:17305":{"crate_id":22,"path":["crypto_common","InnerInit"],"kind":"trait"},"6:5053:16018":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"21:66:17243":{"crate_id":21,"path":["blobby","Blob2Iterator"],"kind":"struct"},"1:32351:6193":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"6:9100:240":{"crate_id":6,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:10215:12256":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"18:10341:12529":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:9095:183":{"crate_id":6,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:9148:15523":{"crate_id":6,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:9841:126":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"18:11063:15867":{"crate_id":18,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:4557:13404":{"crate_id":17,"path":["gimli","constants","DwEnd"],"kind":"struct"},"19:719:12386":{"crate_id":19,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"6:3672:17552":{"crate_id":6,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:9849:11353":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"7:4401:14055":{"crate_id":7,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"18:14515:13312":{"crate_id":18,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"18:12544:12792":{"crate_id":18,"path":["object","macho","LcStr"],"kind":"struct"},"1:21981:16974":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:5419:12490":{"crate_id":17,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"7:7702:14798":{"crate_id":7,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:881:15496":{"crate_id":6,"path":["std","collections","hash","map","Values"],"kind":"struct"},"5:261:12191":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:43194:15663":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:8880:16120":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"18:12075:12686":{"crate_id":18,"path":["object","elf","Syminfo64"],"kind":"struct"},"4:522:1978":{"crate_id":4,"path":["digest","InvalidOutputSize"],"kind":"struct"},"24:5702:5418":{"crate_id":24,"path":["typenum","bit","B0"],"kind":"struct"},"22:48:17303":{"crate_id":22,"path":["crypto_common","KeyInit"],"kind":"trait"},"10:486:23144":{"crate_id":10,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:7785:127":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:9027:16067":{"crate_id":6,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"18:11282:12582":{"crate_id":18,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"18:14297:13258":{"crate_id":18,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"7:4755:14192":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"24:783:17251":{"crate_id":24,"path":["typenum","private","InternalMarker"],"kind":"trait"},"1:41175:15652":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:13066:211":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"18:13423:12933":{"crate_id":18,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:7554:13381":{"crate_id":17,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"18:10521:15306":{"crate_id":18,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"5:6851:12236":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"6:8797:16057":{"crate_id":6,"path":["std","process","CommandArgs"],"kind":"struct"},"1:46462:15203":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"7:4738:14183":{"crate_id":7,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"4:328:1968":{"crate_id":4,"path":["digest","core_api","Buffer"],"kind":"type_alias"},"6:7600:12173":{"crate_id":6,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"6:10824:14843":{"crate_id":6,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:6531:15427":{"crate_id":17,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:7768:13372":{"crate_id":17,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"18:2150:24284":{"crate_id":18,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"5:6676:12191":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:9847:11352":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"18:14309:13260":{"crate_id":18,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:4458:11364":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"6:7664:16037":{"crate_id":6,"path":["std","thread","Builder"],"kind":"struct"},"1:26168:272":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"24:1007:17293":{"crate_id":24,"path":["typenum","private","PrivateMin"],"kind":"trait"},"7:7598:14775":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:4908:17608":{"crate_id":6,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"5:5144:12220":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:48241:11186":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"12:883:15967":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"7:4808:14217":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"16:0:2119":{"crate_id":16,"path":["addr2line"],"kind":"module"},"6:2203:16000":{"crate_id":6,"path":["std","fs","DirEntry"],"kind":"struct"},"1:12420:16121":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"6:7733:17462":{"crate_id":6,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:3915:13397":{"crate_id":17,"path":["gimli","constants","DwChildren"],"kind":"struct"},"7:4449:14086":{"crate_id":7,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:46286:15198":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:10931:5464":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"18:14034:13170":{"crate_id":18,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"18:12497:12786":{"crate_id":18,"path":["object","macho","MachHeader32"],"kind":"struct"},"6:3203:16005":{"crate_id":6,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:7581:12171":{"crate_id":6,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"18:9913:15813":{"crate_id":18,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:40322:15135":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:6017:24158":{"crate_id":17,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"6:4385:16017":{"crate_id":6,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"24:1261:5524":{"crate_id":24,"path":["typenum","type_operators","IsGreaterOrEqual"],"kind":"trait"},"1:21226:31307":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"17:6352:15410":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:22175:17255":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"17:7862:15474":{"crate_id":17,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:21857:5453":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"24:924:17272":{"crate_id":24,"path":["typenum","private","PrivateCmp"],"kind":"trait"},"1:22258:16737":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"12:2231:15501":{"crate_id":12,"path":["hashbrown","table","HashTable"],"kind":"struct"},"21:118:17247":{"crate_id":21,"path":["blobby","Blob6Iterator"],"kind":"struct"},"7:501:13811":{"crate_id":7,"path":["libc","unix","rlimit"],"kind":"struct"},"1:23166:190":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"18:12555:12793":{"crate_id":18,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:8167:15954":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"7:6114:14548":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"18:12044:12682":{"crate_id":18,"path":["object","elf","Sym64"],"kind":"struct"},"18:10266:15829":{"crate_id":18,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:2577:76":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"23:346:5582":{"crate_id":23,"path":["generic_array","sequence","Concat"],"kind":"trait"},"6:4966:17615":{"crate_id":6,"path":["std","panic","always_abort"],"kind":"function"},"6:6432:16032":{"crate_id":6,"path":["std","sync","once","OnceState"],"kind":"struct"},"15:215:15486":{"crate_id":15,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:12045:688":{"crate_id":6,"path":["std","f64"],"kind":"primitive"},"6:7916:16044":{"crate_id":6,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"18:14421:13291":{"crate_id":18,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"18:10576:15310":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"18:13299:12931":{"crate_id":18,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"18:10198:15824":{"crate_id":18,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:6583:15429":{"crate_id":17,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:4105:16797":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:2400:201":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"18:8896:24222":{"crate_id":18,"path":["object","common","RelocationEncoding"],"kind":"enum"},"7:6100:14546":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"4:0:1798":{"crate_id":4,"path":["digest"],"kind":"module"},"1:44883:15729":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"6:3502:17513":{"crate_id":6,"path":["std","io","Seek"],"kind":"trait"},"1:39691:15004":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"24:6192:5503":{"crate_id":24,"path":["typenum","array","TArr"],"kind":"struct"},"1:44105:15683":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:1681:1179":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:40909:15643":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:43223:6147":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"5:7274:15560":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"5:4172:12148":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:6721:24162":{"crate_id":17,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:4169:17580":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"6:11036:2139":{"crate_id":6,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:6253:15573":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"24:1198:5513":{"crate_id":24,"path":["typenum","type_operators","PartialDiv"],"kind":"trait"},"1:40445:15615":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:6612:12166":{"crate_id":6,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"6:8138:13542":{"crate_id":6,"path":["std","io","util","Empty"],"kind":"struct"},"6:5448:111":{"crate_id":6,"path":["std","process","Command"],"kind":"struct"},"1:40285:15603":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"24:1206:5510":{"crate_id":24,"path":["typenum","type_operators","Max"],"kind":"trait"},"5:6832:12223":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"6:8937:17658":{"crate_id":6,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"24:1190:5506":{"crate_id":24,"path":["typenum","type_operators","Cmp"],"kind":"trait"},"23:300:5581":{"crate_id":23,"path":["generic_array","sequence","Shorten"],"kind":"trait"},"6:4744:17571":{"crate_id":6,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"24:1031:17256":{"crate_id":24,"path":["typenum","private","IsLessPrivate"],"kind":"trait"},"18:3441:15803":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:31167:202":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"7:0:872":{"crate_id":7,"path":["libc"],"kind":"module"},"17:2504:13347":{"crate_id":17,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:894:12207":{"crate_id":6,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"6:7644:17255":{"crate_id":6,"path":["std","sealed","Sealed"],"kind":"trait"},"18:11049:15863":{"crate_id":18,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"7:4375:14035":{"crate_id":7,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"19:736:28192":{"crate_id":19,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:42066:15157":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"18:9087:12490":{"crate_id":18,"path":["object","endian","BigEndian"],"kind":"struct"},"1:43755:5473":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"6:6251:12161":{"crate_id":6,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:39466:16780":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"7:6012:14500":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"23:260:5578":{"crate_id":23,"path":["generic_array","sequence","GenericSequence"],"kind":"trait"},"17:6425:15415":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:2586:264":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"6:9049:35873":{"crate_id":6,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"18:11548:12610":{"crate_id":18,"path":["object","read","SymbolMapName"],"kind":"struct"},"14:0:2117":{"crate_id":14,"path":["std_detect"],"kind":"module"},"18:12646:12807":{"crate_id":18,"path":["object","macho","Fvmlib"],"kind":"struct"},"6:11172:36917":{"crate_id":6,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"6:7645:14800":{"crate_id":6,"path":["std","thread","local","AccessError"],"kind":"struct"},"18:11911:12656":{"crate_id":18,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:2911:13502":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:4325:16114":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"6:3996:17558":{"crate_id":6,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"19:590:12373":{"crate_id":19,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:11180:14892":{"crate_id":6,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"7:6086:14535":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"24:6363:5415":{"crate_id":24,"path":["typenum","uint","UTerm"],"kind":"struct"},"6:10804:136":{"crate_id":6,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"5:4202:12148":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:4:1105":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"12:2124:15466":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:21869:31305":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:4179:16113":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"8:0:1679":{"crate_id":8,"path":["unwind"],"kind":"module"},"22:0:2124":{"crate_id":22,"path":["crypto_common"],"kind":"module"},"12:2423:11290":{"crate_id":12,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"5:5982:12220":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"18:3232:15802":{"crate_id":18,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"18:11152:15874":{"crate_id":18,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:4641:13407":{"crate_id":17,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"18:13136:12906":{"crate_id":18,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"5:1472:15495":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:12196:15680":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:40557:5474":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"6:1820:15995":{"crate_id":6,"path":["std","env","Args"],"kind":"struct"},"1:45885:15183":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:5743:15355":{"crate_id":17,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"6:5433:16024":{"crate_id":6,"path":["std","process","ChildStderr"],"kind":"struct"},"1:8879:16883":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"5:2974:35255":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"22:16:205":{"crate_id":22,"path":["crypto_common","Output"],"kind":"type_alias"},"17:2359:13341":{"crate_id":17,"path":["gimli","common","Register"],"kind":"struct"},"18:9071:12489":{"crate_id":18,"path":["object","endian","LittleEndian"],"kind":"struct"},"24:642:5539":{"crate_id":24,"path":["typenum","marker_traits","Integer"],"kind":"trait"},"6:2369:17504":{"crate_id":6,"path":["std","fs","read_link"],"kind":"function"},"10:426:23147":{"crate_id":10,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"12:2569:15562":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:39427:16783":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:12005:17463":{"crate_id":6,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:533:12139":{"crate_id":6,"path":["std","thread","Packet"],"kind":"struct"},"1:44828:15177":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"18:9702:15809":{"crate_id":18,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:46193:15196":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:2353:14908":{"crate_id":6,"path":["std","fs","metadata"],"kind":"function"},"18:12514:12789":{"crate_id":18,"path":["object","macho","MachHeader64"],"kind":"struct"},"5:7286:12207":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"18:13576:13047":{"crate_id":18,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:9129:14880":{"crate_id":6,"path":["std","time","SystemTime"],"kind":"struct"},"6:11357:15537":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:3315:13390":{"crate_id":17,"path":["gimli","arch","LoongArch"],"kind":"struct"},"7:542:13840":{"crate_id":7,"path":["libc","unix","iovec"],"kind":"struct"},"23:362:5495":{"crate_id":23,"path":["generic_array","ArrayLength"],"kind":"trait"},"18:9897:24239":{"crate_id":18,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:6696:13465":{"crate_id":17,"path":["gimli","read","line","LineRow"],"kind":"struct"},"19:80:28182":{"crate_id":19,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:536:15337":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:42977:73":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"5:1281:15970":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"18:13711:13090":{"crate_id":18,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"18:9608:15808":{"crate_id":18,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"6:923:15961":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:8979:113":{"crate_id":6,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"7:6943:14750":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:40779:15640":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:22471:15585":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"7:5004:14322":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"18:13923:13141":{"crate_id":18,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"18:8687:24216":{"crate_id":18,"path":["object","common","BinaryFormat"],"kind":"enum"},"18:10904:15859":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:4082:107":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"18:11368:12588":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:2964:13507":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"6:4702:17610":{"crate_id":6,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"18:10469:12530":{"crate_id":18,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"6:3168:36954":{"crate_id":6,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"6:2663:16003":{"crate_id":6,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"18:10431:15837":{"crate_id":18,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"7:4516:14118":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:10490:17255":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:9472:712":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"1:12157:15676":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"7:4628:14175":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:4949:13416":{"crate_id":17,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"22:22:1967":{"crate_id":22,"path":["crypto_common","BlockSizeUser"],"kind":"trait"},"23:163:5577":{"crate_id":23,"path":["generic_array","functional","FunctionalSequence"],"kind":"trait"},"17:8195:15485":{"crate_id":17,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"5:2149:15551":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"6:6164:12160":{"crate_id":6,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"18:10638:15317":{"crate_id":18,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"5:1382:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"18:9103:12491":{"crate_id":18,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:3364:16782":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:7090:15465":{"crate_id":17,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"12:700:11290":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:13260:148":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"7:654:18107":{"crate_id":7,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"24:654:5507":{"crate_id":24,"path":["typenum","marker_traits","PowerOfTwo"],"kind":"trait"},"14:226:13711":{"crate_id":14,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:904:12226":{"crate_id":6,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"6:10740:16082":{"crate_id":6,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:30797:28816":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"18:14164:13203":{"crate_id":18,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"4:430:2130":{"crate_id":4,"path":["digest","ExtendableOutput"],"kind":"trait"},"12:875:15966":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"7:4902:14261":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"8:31:23131":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:43673:5468":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:30621:11360":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"21:11:17237":{"crate_id":21,"path":["blobby","BlobIterator"],"kind":"struct"},"17:4417:13400":{"crate_id":17,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:6318:13437":{"crate_id":17,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:44582:15720":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:41980:170":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"6:11217:14893":{"crate_id":6,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:39542:216":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:22524:14913":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"18:12008:12675":{"crate_id":18,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:5727:15353":{"crate_id":17,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:2200:630":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:8204:16867":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"7:574:13856":{"crate_id":7,"path":["libc","unix","itimerval"],"kind":"struct"},"17:5049:13419":{"crate_id":17,"path":["gimli","constants","DwLnct"],"kind":"struct"},"6:6428:15649":{"crate_id":6,"path":["std","sync","once","Once"],"kind":"struct"},"18:12699:12816":{"crate_id":18,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:8815:14868":{"crate_id":6,"path":["std","process","ExitStatus"],"kind":"struct"},"6:5383:16019":{"crate_id":6,"path":["std","process","Child"],"kind":"struct"},"1:22338:17053":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"7:5941:14459":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"11:36:13718":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"7:1537:13891":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:5798:13427":{"crate_id":17,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"7:4578:14150":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:5634:15344":{"crate_id":17,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:43426:15168":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"18:9999:12479":{"crate_id":18,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:8878:16884":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:32499:11243":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:3287:143":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"18:9824:24237":{"crate_id":18,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"7:6819:14673":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"18:11935:12657":{"crate_id":18,"path":["object","elf","Ident"],"kind":"struct"},"6:8859:16059":{"crate_id":6,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"24:5746:5416":{"crate_id":24,"path":["typenum","int","PInt"],"kind":"struct"},"6:7902:15509":{"crate_id":6,"path":["std","hash","random","RandomState"],"kind":"struct"},"7:533:13834":{"crate_id":7,"path":["libc","unix","hostent"],"kind":"struct"},"17:5866:15367":{"crate_id":17,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:44858:15728":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"18:9934:15815":{"crate_id":18,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"12:2542:13713":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"18:13967:13153":{"crate_id":18,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:3241:16006":{"crate_id":6,"path":["std","io","stdio","Stdout"],"kind":"struct"},"6:11053:12180":{"crate_id":6,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"18:14135:13196":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:44055:15681":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"7:6913:14735":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"7:6666:14613":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:10833:36919":{"crate_id":6,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"18:10772:12535":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"18:11352:12587":{"crate_id":18,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:32398:16126":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"7:5891:14436":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:40678:15631":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:2696:13355":{"crate_id":17,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:11390:15541":{"crate_id":6,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:13017:161":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"18:13025:12880":{"crate_id":18,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:44150:15608":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"22:51:17304":{"crate_id":22,"path":["crypto_common","KeyIvInit"],"kind":"trait"},"7:5992:14484":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:40520:12248":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"18:14127:13195":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:13421:1756":{"crate_id":1,"path":["core","core_arch","arch","x86_64"],"kind":"module"},"19:690:15287":{"crate_id":19,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"18:9373:12500":{"crate_id":18,"path":["object","read","util","StringTable"],"kind":"struct"},"6:1041:15466":{"crate_id":6,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:2206:12242":{"crate_id":6,"path":["std","fs","read"],"kind":"function"},"6:10955:16025":{"crate_id":6,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"18:11508:24229":{"crate_id":18,"path":["object","read","SymbolSection"],"kind":"enum"},"7:5015:14325":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"18:13990:13156":{"crate_id":18,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"7:495:13809":{"crate_id":7,"path":["libc","unix","timespec"],"kind":"struct"},"4:512:1971":{"crate_id":4,"path":["digest","core_api","TruncSide"],"kind":"enum"},"17:6226:15903":{"crate_id":17,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:12055:1630":{"crate_id":6,"path":["std","u128"],"kind":"primitive"},"18:14101:13189":{"crate_id":18,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"7:4893:14255":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:946:15966":{"crate_id":6,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:9306:84":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:2948:134":{"crate_id":6,"path":["std","io","error","Error"],"kind":"struct"},"6:8536:15515":{"crate_id":6,"path":["std","path","Components"],"kind":"struct"},"7:6764:14660":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:8386:17619":{"crate_id":6,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:44570:15717":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"18:14325:13264":{"crate_id":18,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"5:7487:15566":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:7894:175":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:8353:14849":{"crate_id":6,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"7:5867:14420":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:3427:14846":{"crate_id":6,"path":["std","io","Read"],"kind":"trait"},"1:21551:14912":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:6499:13385":{"crate_id":17,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"7:4647:14176":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:46386:15201":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"18:13759:13099":{"crate_id":18,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:4719:13408":{"crate_id":17,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:8905:17657":{"crate_id":6,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"7:6898:14728":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:1551:15497":{"crate_id":6,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:7844:16042":{"crate_id":6,"path":["std","fs","ReadDir"],"kind":"struct"},"18:13260:12921":{"crate_id":18,"path":["object","macho","Nlist64"],"kind":"struct"},"18:11112:15871":{"crate_id":18,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"10:177:23212":{"crate_id":10,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:45841:15181":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:3165:36965":{"crate_id":6,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"7:483:13803":{"crate_id":7,"path":["libc","unix","utimbuf"],"kind":"struct"},"21:79:17244":{"crate_id":21,"path":["blobby","Blob3Iterator"],"kind":"struct"},"1:40306:28813":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"5:5382:17352":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:43233:15664":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:32412:15599":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"18:13547:13036":{"crate_id":18,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:1563:15499":{"crate_id":6,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"18:14091:13186":{"crate_id":18,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:8050:13601":{"crate_id":17,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:4030:17559":{"crate_id":6,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:6445:15577":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"17:7736:13555":{"crate_id":17,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:42440:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"18:13869:13128":{"crate_id":18,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"18:12087:12687":{"crate_id":18,"path":["object","elf","Rel32"],"kind":"struct"},"1:46786:15212":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"24:1184:5511":{"crate_id":24,"path":["typenum","type_operators","Pow"],"kind":"trait"},"7:5829:14393":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"18:11087:15869":{"crate_id":18,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:42961:13578":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:42695:11352":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:2526:13348":{"crate_id":17,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:42986:11360":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"6:9105:241":{"crate_id":6,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"12:800:12207":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"18:8927:24223":{"crate_id":18,"path":["object","common","FileFlags"],"kind":"enum"},"18:12374:12743":{"crate_id":18,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"5:5640:12223":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"6:557:15983":{"crate_id":6,"path":["std","thread","JoinHandle"],"kind":"struct"},"5:7336:15561":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:6148:12157":{"crate_id":6,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:42206:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"10:507:13779":{"crate_id":10,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:1761:15993":{"crate_id":6,"path":["std","env","VarsOs"],"kind":"struct"},"6:8546:5458":{"crate_id":6,"path":["std","path","Iter"],"kind":"struct"},"7:4676:14178":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"18:9781:15811":{"crate_id":18,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:21368:17255":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"17:7523:15471":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:44347:15701":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"6:850:5459":{"crate_id":6,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:21442:14912":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"4:357:1977":{"crate_id":4,"path":["digest","digest","HashMarker"],"kind":"trait"},"18:12281:12735":{"crate_id":18,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:4313:16016":{"crate_id":6,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"5:7018:12241":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:10842:36921":{"crate_id":6,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"7:4968:14298":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"12:1007:15466":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"12:1025:15968":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:22333:17055":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1:4330:16115":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"5:825:12197":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:8210:16868":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:6485:13368":{"crate_id":17,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"5:4371:12214":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:2339:13335":{"crate_id":17,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:3083:139":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"18:13852:13123":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:2943:16766":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"12:1603:15977":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:2537:17255":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:39586:221":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:6818:15448":{"crate_id":17,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"0:99:1835":{"crate_id":0,"path":["sha2","Sha256"],"kind":"type_alias"},"1:42323:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"19:624:37185":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"19:531:15281":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"18:13072:12887":{"crate_id":18,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:3062:5572":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:4637:14652":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"6:8147:14842":{"crate_id":6,"path":["std","io","util","Sink"],"kind":"struct"},"17:6513:15419":{"crate_id":17,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:43795:15170":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:3396:12148":{"crate_id":6,"path":["std","io","Guard"],"kind":"struct"},"1:2826:250":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"0:102:1841":{"crate_id":0,"path":["sha2","Sha384"],"kind":"type_alias"},"1:46484:15204":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:7755:16041":{"crate_id":6,"path":["std","env","JoinPathsError"],"kind":"struct"},"5:2978:35254":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:10814:125":{"crate_id":6,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:46652:15209":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:11970:16925":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"22:42:17302":{"crate_id":22,"path":["crypto_common","InnerUser"],"kind":"trait"},"5:1146:35251":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"5:3220:15497":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"18:10479:12531":{"crate_id":18,"path":["object","read","elf","version","Version"],"kind":"struct"},"7:7616:14778":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"18:10037:12513":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"5:35:12188":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:2548:13349":{"crate_id":17,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"17:5982:15378":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:8294:134":{"crate_id":17,"path":["gimli","read","Error"],"kind":"enum"},"1:2987:16773":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:7839:12435":{"crate_id":6,"path":["std","fs","Metadata"],"kind":"struct"},"17:5384:24155":{"crate_id":17,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:42688:11350":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:6960:15919":{"crate_id":17,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:7041:15458":{"crate_id":17,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:10852:5466":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:3888:13396":{"crate_id":17,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:6401:13367":{"crate_id":17,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:10432:16057":{"crate_id":6,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"18:13915:13139":{"crate_id":18,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:6600:24161":{"crate_id":17,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"18:9973:15818":{"crate_id":18,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:10095:11562":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:11607:36620":{"crate_id":6,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:9493:31834":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"5:7513:12221":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:40646:15626":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"7:1521:13883":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:10672:5459":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"6:8921:17656":{"crate_id":6,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:6929:13486":{"crate_id":17,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:40687:15632":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"12:774:15495":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:22698:15592":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"5:7257:14903":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"18:13275:12583":{"crate_id":18,"path":["object","macho","Relocation"],"kind":"struct"},"18:11816:12629":{"crate_id":18,"path":["object","archive","AixHeader"],"kind":"struct"},"17:6569:13373":{"crate_id":17,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:7054:15461":{"crate_id":17,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:2953:16768":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:30605:11234":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"5:1110:35250":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"23:369:5565":{"crate_id":23,"path":["generic_array","GenericArrayImplEven"],"kind":"struct"},"1:43765:5471":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:43809:15667":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:21158:11254":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:5816:15360":{"crate_id":17,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:40400:15611":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"18:10647:12596":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"18:12779:12827":{"crate_id":18,"path":["object","macho","ThreadCommand"],"kind":"struct"},"18:1184:15796":{"crate_id":18,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"7:4947:14283":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:43746:5470":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:3512:17533":{"crate_id":6,"path":["std","io","BufRead"],"kind":"trait"},"17:4613:13406":{"crate_id":17,"path":["gimli","constants","DwVis"],"kind":"struct"},"23:295:5580":{"crate_id":23,"path":["generic_array","sequence","Lengthen"],"kind":"trait"},"12:2140:15968":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"5:2231:35140":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"7:4364:14027":{"crate_id":7,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"23:143:5575":{"crate_id":23,"path":["generic_array","functional","MappedGenericSequence"],"kind":"trait"},"18:8954:24224":{"crate_id":18,"path":["object","common","SegmentFlags"],"kind":"enum"},"24:1878:17264":{"crate_id":24,"path":["typenum","uint","GetBit"],"kind":"trait"},"24:1051:17257":{"crate_id":24,"path":["typenum","private","IsEqualPrivate"],"kind":"trait"},"7:6047:14521":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"5:7320:11290":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:10313:12263":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:44586:15721":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"18:12847:12837":{"crate_id":18,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"7:4461:14091":{"crate_id":7,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"7:5130:14383":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:10097:16073":{"crate_id":6,"path":["std","sys","unix","os","Env"],"kind":"struct"},"12:102:15488":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:22607:14918":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:2810:13360":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"23:437:5568":{"crate_id":23,"path":["generic_array","ArrayConsumer"],"kind":"struct"},"18:14077:13184":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"19:660:15786":{"crate_id":19,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:2948:16767":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:10988:14870":{"crate_id":6,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"21:46:134":{"crate_id":21,"path":["blobby","Error"],"kind":"enum"},"6:8170:17514":{"crate_id":6,"path":["std","io","SeekFrom"],"kind":"enum"},"17:8097:15478":{"crate_id":17,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"5:1450:11290":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:39652:5450":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"5:2967:15549":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:6968:24163":{"crate_id":17,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"7:4434:14079":{"crate_id":7,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:6415:15414":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"7:5044:14342":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"24:1151:17277":{"crate_id":24,"path":["typenum","private","PrivateSquareRoot"],"kind":"trait"},"18:14270:13246":{"crate_id":18,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"7:4603:14162":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"7:6718:14641":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:8221:15683":{"crate_id":6,"path":["std","io","Lines"],"kind":"struct"},"12:1566:23227":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"7:5068:14349":{"crate_id":7,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"7:1570:13914":{"crate_id":7,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:30338:16553":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"1:6450:1968":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:43821:15668":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"6:12038:338":{"crate_id":6,"path":["std","array"],"kind":"primitive"},"18:11574:15335":{"crate_id":18,"path":["object","read","ObjectMap"],"kind":"struct"},"5:6341:17365":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:9035:14876":{"crate_id":6,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:6456:15417":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:7391:24165":{"crate_id":17,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"18:11640:12580":{"crate_id":18,"path":["object","read","Export"],"kind":"struct"},"1:44594:15723":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"24:828:17278":{"crate_id":24,"path":["typenum","private","PrivateSub"],"kind":"trait"},"24:621:1975":{"crate_id":24,"path":["typenum","marker_traits","Unsigned"],"kind":"trait"},"7:6222:14575":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"18:13950:13145":{"crate_id":18,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:7907:15512":{"crate_id":6,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"18:11952:12660":{"crate_id":18,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:2744:13357":{"crate_id":17,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:43186:11565":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"18:11382:12591":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:10500:245":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:12059:13":{"crate_id":6,"path":["std","fn"],"kind":"primitive"},"24:1905:17266":{"crate_id":24,"path":["typenum","uint","SetBit"],"kind":"trait"},"1:44001:15678":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"5:7524:249":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"12:1142:15973":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:2875:11240":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"17:7318:13524":{"crate_id":17,"path":["gimli","read","op","Piece"],"kind":"struct"},"6:11455:12183":{"crate_id":6,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"7:7610:14777":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"10:393:23146":{"crate_id":10,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"19:582:11254":{"crate_id":19,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"18:14119:13193":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"18:12306:12739":{"crate_id":18,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"7:1514:13881":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"12:1087:37142":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:9793:11349":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"7:4847:14239":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"19:707:15290":{"crate_id":19,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:41126:15648":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"18:9763:37175":{"crate_id":18,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"5:4040:12191":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:2590:263":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"0:101:1839":{"crate_id":0,"path":["sha2","Sha512_256"],"kind":"type_alias"},"5:1784:12226":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"7:4814:14219":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:7743:142":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"5:3186:15498":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"22:75:12360":{"crate_id":22,"path":["crypto_common","InvalidLength"],"kind":"struct"},"18:10024:15809":{"crate_id":18,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:44115:15684":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"18:9853:24238":{"crate_id":18,"path":["object","read","archive","Members"],"kind":"enum"},"1:47818:15224":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"18:13827:13114":{"crate_id":18,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"18:14057:13178":{"crate_id":18,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:6361:15411":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:6879:13481":{"crate_id":17,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"18:10699:15854":{"crate_id":18,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"6:837:5458":{"crate_id":6,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"5:629:16096":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"18:13555:13039":{"crate_id":18,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"5:898:5458":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:30565:5571":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:2933:23296":{"crate_id":17,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:39630:222":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"25:93:134":{"crate_id":25,"path":["block_buffer","Error"],"kind":"struct"},"19:599:37186":{"crate_id":19,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:0:2120":{"crate_id":17,"path":["gimli"],"kind":"module"},"1:4210:15570":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"6:1874:15997":{"crate_id":6,"path":["std","error","Report"],"kind":"struct"},"1:23104:191":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"19:681:15284":{"crate_id":19,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:40279:15602":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"18:9868:12508":{"crate_id":18,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:1064:15970":{"crate_id":6,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:48317:11190":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:860:11290":{"crate_id":6,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"6:0:1521":{"crate_id":6,"path":["std"],"kind":"module"},"7:1632:13960":{"crate_id":7,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:42401:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:46508:15205":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"18:10715:15856":{"crate_id":18,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:43869:5466":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:11384:15540":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:415:181":{"crate_id":6,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:7067:15464":{"crate_id":17,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:6545:13442":{"crate_id":17,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:7838:5856":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:22190:17059":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"6:8002:16046":{"crate_id":6,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"6:12058:1238":{"crate_id":6,"path":["std","reference"],"kind":"primitive"},"1:23011:192":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"12:1051:15970":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"18:12423:12768":{"crate_id":18,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"7:6128:14553":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:0:528":{"crate_id":1,"path":["core"],"kind":"module"},"18:10589:15311":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"18:14174:13208":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"12:2536:13712":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"18:10317:12527":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:22540:15586":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"18:9391:135":{"crate_id":18,"path":["object","read","any","File"],"kind":"enum"},"7:5859:14418":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"7:4388:14045":{"crate_id":7,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"24:1168:5552":{"crate_id":24,"path":["typenum","type_operators","Same"],"kind":"trait"},"1:48189:6138":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:4627:17558":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:6376:24160":{"crate_id":17,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:5088:13420":{"crate_id":17,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:2899:13499":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:44459:15712":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"5:2698:14901":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"24:5724:5419":{"crate_id":24,"path":["typenum","bit","B1"],"kind":"struct"},"1:44253:15689":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:4864:31473":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:3299:16778":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:7792:24167":{"crate_id":17,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"6:5748:16026":{"crate_id":6,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:4843:417":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:3557:12207":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"17:6346:15918":{"crate_id":17,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"5:678:256":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:2201:135":{"crate_id":6,"path":["std","fs","File"],"kind":"struct"},"7:6781:14661":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:41997:5459":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:44125:15685":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:10779:5463":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:4902:16118":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"6:4471:17583":{"crate_id":6,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"6:622:15984":{"crate_id":6,"path":["std","backtrace","Backtrace"],"kind":"struct"},"7:123:17749":{"crate_id":7,"path":["libc","unix","fpos_t"],"kind":"enum"},"6:12053:1632":{"crate_id":6,"path":["std","u32"],"kind":"primitive"},"1:21370:16976":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"23:422:5567":{"crate_id":23,"path":["generic_array","ArrayBuilder"],"kind":"struct"},"5:4434:12214":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"6:2913:12147":{"crate_id":6,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:40627:15623":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"12:1903:15497":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:43955:5464":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:3600:13392":{"crate_id":17,"path":["gimli","arch","X86"],"kind":"struct"},"18:2209:15801":{"crate_id":18,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"0:100:1837":{"crate_id":0,"path":["sha2","Sha512_224"],"kind":"type_alias"},"27:0:1846":{"crate_id":27,"path":["cpufeatures"],"kind":"module"},"18:12453:12777":{"crate_id":18,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"18:11720:24231":{"crate_id":18,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:40577:16130":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:3327:16781":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:42702:11353":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:4745:13409":{"crate_id":17,"path":["gimli","constants","DwAddr"],"kind":"struct"},"23:0:2020":{"crate_id":23,"path":["generic_array"],"kind":"module"},"7:4854:14241":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:8181:13386":{"crate_id":17,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"18:10535:15307":{"crate_id":18,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:40366:15602":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:9197:14884":{"crate_id":6,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:21214:17263":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"6:12044:686":{"crate_id":6,"path":["std","f32"],"kind":"primitive"},"1:46055:15190":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:48294:11189":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:43241:15665":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"18:10215:15827":{"crate_id":18,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:5397:16022":{"crate_id":6,"path":["std","process","ChildStdin"],"kind":"struct"},"7:4776:14204":{"crate_id":7,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:4394:12246":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:42117:5458":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"17:5574:13366":{"crate_id":17,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"18:13898:13136":{"crate_id":18,"path":["object","pe","ImageRelocation"],"kind":"struct"},"18:13041:12882":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"7:4595:14157":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:5637:12148":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"19:515:12368":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:42284:93":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:3737:16013":{"crate_id":6,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:1961:11607":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"7:596:13869":{"crate_id":7,"path":["libc","unix","protoent"],"kind":"struct"},"8:78:23138":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"5:4082:5459":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"6:12057:1689":{"crate_id":6,"path":["std","usize"],"kind":"primitive"},"1:43775:5472":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"7:1650:13972":{"crate_id":7,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:6467:15418":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:48200:11183":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:6944:37164":{"crate_id":17,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"18:13203:12913":{"crate_id":18,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"22:39:17301":{"crate_id":22,"path":["crypto_common","IvSizeUser"],"kind":"trait"},"7:588:13864":{"crate_id":7,"path":["libc","unix","servent"],"kind":"struct"},"18:12294:12736":{"crate_id":18,"path":["object","elf","HashHeader"],"kind":"struct"},"22:44:2139":{"crate_id":22,"path":["crypto_common","Reset"],"kind":"trait"},"18:13694:13089":{"crate_id":18,"path":["object","pe","Guid"],"kind":"struct"},"6:11621:15544":{"crate_id":6,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"4:160:1812":{"crate_id":4,"path":["digest","impl_oid_carrier"],"kind":"macro"},"5:3338:12226":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"5:1500:15959":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:8238:17551":{"crate_id":6,"path":["std","net","Shutdown"],"kind":"enum"},"14:110:37148":{"crate_id":14,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:10759:15524":{"crate_id":6,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"7:4841:14236":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"5:6003:17360":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:9311:91":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"18:9489:37176":{"crate_id":18,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:47896:15225":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"18:10629:15316":{"crate_id":18,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"6:10323:111":{"crate_id":6,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:41889:15151":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"18:13229:12915":{"crate_id":18,"path":["object","macho","NoteCommand"],"kind":"struct"},"18:9278:12496":{"crate_id":18,"path":["object","endian","I64Bytes"],"kind":"struct"},"7:4666:14177":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:2837:5494":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"18:13612:13077":{"crate_id":18,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:43202:11564":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:40608:15620":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"7:4998:14319":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:41908:15152":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"18:11202:15318":{"crate_id":18,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:40457:28810":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:9853:11354":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"18:14157:13201":{"crate_id":18,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"18:12173:12703":{"crate_id":18,"path":["object","elf","Dyn32"],"kind":"struct"},"17:7544:15472":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"18:14336:13269":{"crate_id":18,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:7492:15467":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"18:9004:24226":{"crate_id":18,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:21195:31309":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:44602:14892":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"18:9243:12495":{"crate_id":18,"path":["object","endian","I32Bytes"],"kind":"struct"},"18:13974:13154":{"crate_id":18,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:44425:16939":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:23135:196":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"5:4010:12207":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"18:9052:24204":{"crate_id":18,"path":["object","endian","Endianness"],"kind":"enum"},"17:4462:13401":{"crate_id":17,"path":["gimli","constants","DwAte"],"kind":"struct"},"15:187:23237":{"crate_id":15,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"24:814:17270":{"crate_id":24,"path":["typenum","private","PrivateAnd"],"kind":"trait"},"12:1923:15500":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"7:5910:14438":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"18:12984:12875":{"crate_id":18,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:5989:226":{"crate_id":6,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:2970:16769":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:48142:15230":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:4835:13412":{"crate_id":17,"path":["gimli","constants","DwInl"],"kind":"struct"},"10:237:6147":{"crate_id":10,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"18:10751:12533":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"12:856:15964":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:10340:36655":{"crate_id":6,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"6:8477:14862":{"crate_id":6,"path":["std","path","PrefixComponent"],"kind":"struct"},"18:13452:12953":{"crate_id":18,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:234:232":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:42014:15155":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"7:6059:14526":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"7:4455:14088":{"crate_id":7,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"18:9565:15807":{"crate_id":18,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"18:12209:12708":{"crate_id":18,"path":["object","elf","Verdef"],"kind":"struct"},"6:2623:16002":{"crate_id":6,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:7879:136":{"crate_id":6,"path":["std","fs","FileType"],"kind":"struct"},"22:46:1965":{"crate_id":22,"path":["crypto_common","AlgorithmName"],"kind":"trait"},"5:1434:5459":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:40707:15634":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:12049:792":{"crate_id":6,"path":["std","i64"],"kind":"primitive"},"7:7365:14760":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"15:160:15955":{"crate_id":15,"path":["rustc_demangle","Demangle"],"kind":"struct"},"18:11491:12608":{"crate_id":18,"path":["object","read","SymbolIndex"],"kind":"struct"},"18:8714:24217":{"crate_id":18,"path":["object","common","SectionKind"],"kind":"enum"},"7:1682:13990":{"crate_id":7,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"7:6120:14551":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:3049:23298":{"crate_id":17,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:7436:13545":{"crate_id":17,"path":["gimli","read","op","Expression"],"kind":"struct"},"7:6169:14564":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:22615:14919":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"7:5111:14374":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"1:3080:138":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"18:9522:15806":{"crate_id":18,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:43973:5460":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:7292:16858":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"6:1967:204":{"crate_id":6,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"18:9651:12522":{"crate_id":18,"path":["object","read","any","SymbolTable"],"kind":"struct"},"6:3493:36758":{"crate_id":6,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:43827:15669":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"7:475:13798":{"crate_id":7,"path":["libc","unix","group"],"kind":"struct"},"23:403:2021":{"crate_id":23,"path":["generic_array","GenericArray"],"kind":"struct"},"1:7756:5857":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"5:881:12199":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:5715:15571":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:43733:5475":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"5:2057:16099":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"6:4131:36576":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:12051:1634":{"crate_id":6,"path":["std","u8"],"kind":"primitive"},"18:10739:15858":{"crate_id":18,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"7:1558:13906":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"20:0:1122":{"crate_id":20,"path":["panic_unwind"],"kind":"module"},"18:14435:13293":{"crate_id":18,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:11315:16087":{"crate_id":6,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:2284:23269":{"crate_id":17,"path":["gimli","common","Format"],"kind":"enum"},"18:9173:12493":{"crate_id":18,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:1970:203":{"crate_id":6,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"7:5104:14371":{"crate_id":7,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"18:12155:12702":{"crate_id":18,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"18:14283:13252":{"crate_id":18,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"5:3246:15500":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"21:0:2123":{"crate_id":21,"path":["blobby"],"kind":"module"},"6:2587:12144":{"crate_id":6,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"18:11099:15870":{"crate_id":18,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"5:1265:15466":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:30599:5570":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"18:14379:13285":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"18:11536:15334":{"crate_id":18,"path":["object","read","SymbolMap"],"kind":"struct"},"7:1697:13999":{"crate_id":7,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:8327:16056":{"crate_id":6,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"7:580:13859":{"crate_id":7,"path":["libc","unix","tms"],"kind":"struct"},"7:4800:14214":{"crate_id":7,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:44299:15699":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"12:2469:12226":{"crate_id":12,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"7:5085:14357":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:2601:12142":{"crate_id":6,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"24:1195:5525":{"crate_id":24,"path":["typenum","type_operators","Len"],"kind":"trait"},"18:14500:13311":{"crate_id":18,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:2406:13343":{"crate_id":17,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"12:364:12131":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"18:13668:13083":{"crate_id":18,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"5:7471:28810":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"7:555:13846":{"crate_id":7,"path":["libc","unix","winsize"],"kind":"struct"},"6:4571:17601":{"crate_id":6,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:22632:28817":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"24:942:17287":{"crate_id":24,"path":["typenum","private","PrivateDiv"],"kind":"trait"},"1:42245:86":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:43004:134":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:46015:15188":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"18:11174:24350":{"crate_id":18,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:46316:15199":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"18:12659:12810":{"crate_id":18,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:4053:13398":{"crate_id":17,"path":["gimli","constants","DwTag"],"kind":"struct"},"18:12474:12781":{"crate_id":18,"path":["object","macho","FatArch32"],"kind":"struct"},"18:13877:13131":{"crate_id":18,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:8012:17544":{"crate_id":6,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:44446:15708":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"12:0:2115":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"12:430:37147":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:7015:13491":{"crate_id":17,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"18:11273:15329":{"crate_id":18,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:48279:11188":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:2668:134":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"23:317:5462":{"crate_id":23,"path":["generic_array","sequence","Split"],"kind":"trait"},"18:504:15794":{"crate_id":18,"path":["object","read","any","Comdat"],"kind":"struct"},"18:12197:12707":{"crate_id":18,"path":["object","elf","Versym"],"kind":"struct"},"1:4943:848":{"crate_id":1,"path":["core","iter"],"kind":"module"},"18:13779:13107":{"crate_id":18,"path":["object","pe","ImageSymbol"],"kind":"struct"},"19:521:28194":{"crate_id":19,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"18:12466:12779":{"crate_id":18,"path":["object","macho","FatHeader"],"kind":"struct"},"5:3677:12191":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:11491:5478":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"24:2508:1805":{"crate_id":24,"path":["typenum","generated","consts","U28"],"kind":"type_alias"},"1:10890:5467":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:40919:15644":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:40669:15630":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:10648:5458":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"6:6196:16031":{"crate_id":6,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"6:10970:36451":{"crate_id":6,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:2869:11238":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"21:105:17246":{"crate_id":21,"path":["blobby","Blob5Iterator"],"kind":"struct"},"5:276:2135":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:357:15981":{"crate_id":6,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:6753:15435":{"crate_id":17,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"18:9532:37173":{"crate_id":18,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:11342:14894":{"crate_id":6,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:5417:16023":{"crate_id":6,"path":["std","process","ChildStdout"],"kind":"struct"},"1:12429:15290":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"11:44:13719":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"1:22204:16737":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"1:22289:17255":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"6:4705:17583":{"crate_id":6,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:8154:15951":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:9843:11350":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"22:33:1970":{"crate_id":22,"path":["crypto_common","OutputSizeUser"],"kind":"trait"},"1:23073:194":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"17:2832:13361":{"crate_id":17,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"18:14479:13308":{"crate_id":18,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"17:6279:13434":{"crate_id":17,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:8239:13543":{"crate_id":17,"path":["gimli","read","value","Value"],"kind":"enum"},"12:710:15959":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"12:1160:15974":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"7:6658:14608":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:5648:15879":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:3293:16776":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"18:10457:15843":{"crate_id":18,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"18:13677:13087":{"crate_id":18,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:32391:13543":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"1:22418:15584":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"24:1131:17261":{"crate_id":24,"path":["typenum","private","IsGreaterOrEqualPrivate"],"kind":"trait"},"7:7679:14792":{"crate_id":7,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"12:844:17468":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:8293:16055":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:1073:15974":{"crate_id":6,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:22244:17060":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:44590:15722":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"18:14111:13192":{"crate_id":18,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:48180:11182":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"18:10421:12434":{"crate_id":18,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:42074:232":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"18:14014:13163":{"crate_id":18,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:2894:13501":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:1903:17495":{"crate_id":6,"path":["std","error","Indented"],"kind":"struct"},"19:113:28184":{"crate_id":19,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:7621:24166":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"18:11390:15876":{"crate_id":18,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"6:8007:16047":{"crate_id":6,"path":["std","io","error","Custom"],"kind":"struct"},"1:40550:16129":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"7:1718:14007":{"crate_id":7,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:5310:126":{"crate_id":6,"path":["std","path","Display"],"kind":"struct"},"1:8201:16796":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"18:11075:15868":{"crate_id":18,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:11956:5446":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:12180:15677":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:46530:15206":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"18:14025:13167":{"crate_id":18,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"5:7365:11290":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"19:574:12365":{"crate_id":19,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:5712:15350":{"crate_id":17,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:44598:15724":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"4:334:5425":{"crate_id":4,"path":["digest","core_api","FixedOutputCore"],"kind":"trait"},"6:3734:16012":{"crate_id":6,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:9638:11372":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"5:4855:223":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"18:13839:13117":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:1763:14906":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:8282:15514":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"6:9469:135":{"crate_id":6,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:43837:12497":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"18:11789:12623":{"crate_id":18,"path":["object","archive","Header"],"kind":"struct"},"5:2970:14900":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:7137:36581":{"crate_id":6,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"7:7639:14784":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"5:1310:15974":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"6:10769:15507":{"crate_id":6,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"5:3191:35311":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"6:8331:14641":{"crate_id":6,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:44282:15698":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:39878:28633":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"17:5673:13370":{"crate_id":17,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"18:13568:13046":{"crate_id":18,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"7:62:17694":{"crate_id":7,"path":["libc","unix","DIR"],"kind":"enum"},"1:47176:15219":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:6332:13365":{"crate_id":17,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:6893:13483":{"crate_id":17,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:46338:15200":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:7706:5537":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"7:4566:14144":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"25:85:5493":{"crate_id":25,"path":["block_buffer","Lazy"],"kind":"struct"},"7:4932:14277":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"18:12268:12731":{"crate_id":18,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:10580:12177":{"crate_id":6,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:7342:37166":{"crate_id":17,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"6:10157:16074":{"crate_id":6,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:2321:13333":{"crate_id":17,"path":["gimli","common","Encoding"],"kind":"struct"},"12:490:150":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:40393:15610":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"7:4556:14137":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:9187:36456":{"crate_id":6,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"17:6742:15434":{"crate_id":17,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:31195:11254":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"17:4889:13414":{"crate_id":17,"path":["gimli","constants","DwDsc"],"kind":"struct"},"18:12185:12706":{"crate_id":18,"path":["object","elf","Dyn64"],"kind":"struct"},"6:4182:17581":{"crate_id":6,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"7:7645:14785":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"18:11711:12583":{"crate_id":18,"path":["object","read","Relocation"],"kind":"struct"},"18:11662:12614":{"crate_id":18,"path":["object","read","CodeView"],"kind":"struct"},"18:12751:12823":{"crate_id":18,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:2450:13345":{"crate_id":17,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:6545:17651":{"crate_id":6,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:3209:217":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:43445:5487":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"18:11688:24230":{"crate_id":18,"path":["object","read","RelocationTarget"],"kind":"enum"}},"external_crates":{"26":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"23":{"name":"generic_array","html_root_url":null},"20":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"block_buffer","html_root_url":null},"22":{"name":"crypto_common","html_root_url":null},"19":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"digest","html_root_url":null},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"27":{"name":"cpufeatures","html_root_url":null},"24":{"name":"typenum","html_root_url":"https://docs.rs/typenum/1.17.0/"},"21":{"name":"blobby","html_root_url":"https://docs.rs/blobby/0.3.1/"},"18":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"6":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}