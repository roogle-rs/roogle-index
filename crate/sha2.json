{"root":"0:0:1660","crate_version":"0.10.6","includes_private":false,"index":{"5:5241:11756":{"id":"5:5241:11756","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7098:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7098:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11423:35080":{"id":"1:11423:35080","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7739:11806-0:132:1635":{"id":"a:1:7739:11806-0:132:1635","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7739:11806","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:11546:11660":{"id":"1:11546:11660","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4470:11660"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"1:50362:11659","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11535:35105":{"id":"1:11535:35105","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"1:11122:11840","prim@char":"6:12308:409"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11127:11841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11127:11841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11142:11844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:683-0:127:1634":{"id":"b:5:683-0:127:1634","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:679:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:685:12314","5:686:27478","5:687:27479"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:78:1808":{"id":"0:78:1808","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[147,4],"end":[149,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8562:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8551:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2241-0:127:1634":{"id":"b:1:2241-0:127:1634","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2666:5672","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2243:27474"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11473:30437":{"id":"1:11473:30437","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"6:12308:409","self::pattern":"1:11122:11840"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"1:10946:5282","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11127:11841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:98:1649":{"id":"0:98:1649","crate_id":0,"name":"Sha224","span":{"filename":"src/lib.rs","begin":[85,0],"end":[85,84]},"visibility":"public","docs":"SHA-224 hasher.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"CoreWrapper","id":"4:492:1626","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CtVariableCoreWrapper","id":"4:473:1627","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"U28","id":"24:2508:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"OidSha224","id":"0:409:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"5:5242:26893":{"id":"5:5242:26893","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:11542:26897"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7098:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:60:1808":{"id":"0:60:1808","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[73,4],"end":[75,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8562:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8551:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11470:33680":{"id":"1:11470:33680","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:11122:11840","str::rsplit":"1:11476:33683","prim@char":"6:12308:409","`DoubleEndedIterator`":"1:7078:120","str::split_whitespace":"1:11448:30438"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"1:50054:5265","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11127:11841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11529:35103":{"id":"1:11529:35103","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"1:11122:11840","prim@char":"6:12308:409"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11127:11841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11127:11841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11142:11844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11517:35101":{"id":"1:11517:35101","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"1:11122:11840","prim@char":"6:12308:409"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11127:11841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11127:11841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:11147:11845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2240:1842":{"id":"1:2240:1842","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1660":{"id":"0:0:1660","crate_id":0,"name":"sha2","span":{"filename":"src/lib.rs","begin":[1,0],"end":[95,84]},"visibility":"public","docs":"An implementation of the [SHA-2][1] cryptographic hash algorithms.\n\nThere are 6 standard algorithms specified in the SHA-2 standard: [`Sha224`],\n[`Sha256`], [`Sha512_224`], [`Sha512_256`], [`Sha384`], and [`Sha512`].\n\nAlgorithmically, there are only 2 core algorithms: SHA-256 and SHA-512.\nAll other algorithms are just applications of these with different initial\nhash values, and truncated to different digest bit lengths. The first two\nalgorithms in the list are based on SHA-256, while the last three on SHA-512.\n\n# Usage\n\n```rust\nuse hex_literal::hex;\nuse sha2::{Sha256, Sha512, Digest};\n\n// create a Sha256 object\nlet mut hasher = Sha256::new();\n\n// write input message\nhasher.update(b\"hello world\");\n\n// read hash digest and consume hasher\nlet result = hasher.finalize();\n\nassert_eq!(result[..], hex!(\"\n    b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\n\")[..]);\n\n// same for Sha512\nlet mut hasher = Sha512::new();\nhasher.update(b\"hello world\");\nlet result = hasher.finalize();\n\nassert_eq!(result[..], hex!(\"\n    309ecc489c12d6eb4cc40f50c902f2b4d0ed77ee511a7c7a9bcd3ca86d4cd86f\n    989dd35bc5ff499670da34255b45b0cfd830e81f605dcf7dc5542e93ae9cd76f\n\")[..]);\n```\n\nAlso see [RustCrypto/hashes][2] readme.\n\n[1]: https://en.wikipedia.org/wiki/SHA-2\n[2]: https://github.com/RustCrypto/hashes","links":{"`Sha512_224`":"0:100:1653","`Sha224`":"0:98:1649","`Sha256`":"0:99:1651","`Sha512`":"0:103:1659","`Sha512_256`":"0:101:1655","`Sha384`":"0:102:1657"},"attrs":["#![no_std]","#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\",\nhtml_favicon_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\")]","#![warn(missing_docs, rust_2018_idioms)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:5","0:6","0:96","0:97","0:98:1649","0:99:1651","0:100:1653","0:101:1655","0:102:1657","0:103:1659"],"is_stripped":false}},"5:5225:11031":{"id":"5:5225:11031","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7098:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7098:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11127:11841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11520:35102":{"id":"1:11520:35102","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"1:11122:11840","prim@char":"6:12308:409"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11127:11841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5224:35767":{"id":"5:5224:35767","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:1930","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6849:12301","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:1930","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6849:12301","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:686:27478":{"id":"5:686:27478","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:99:1651":{"id":"0:99:1651","crate_id":0,"name":"Sha256","span":{"filename":"src/lib.rs","begin":[87,0],"end":[87,84]},"visibility":"public","docs":"SHA-256 hasher.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"CoreWrapper","id":"4:492:1626","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CtVariableCoreWrapper","id":"4:473:1627","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"U32","id":"24:2520:1622","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"OidSha256","id":"0:361:1636","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"1:2528:127":{"id":"1:2528:127","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"1:39330:5984","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"a:1:2673:225-0:132:1635":{"id":"a:1:2673:225-0:132:1635","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2673:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:2516:680":{"id":"1:2516:680","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11513:35098":{"id":"1:11513:35098","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11433:5823":{"id":"1:11433:5823","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:48080:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48078:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9304:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9304:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:69:1787":{"id":"0:69:1787","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[107,4],"end":[110,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["blocks",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"Block","id":"22:12:1767","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6":{"id":"0:6","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,23],"end":[54,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"digest::Digest","name":"Digest","id":"4:358:1615","glob":false}},"1:11479:35089":{"id":"1:11479:35089","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"str::split":"1:11470:33680","prim@char":"6:12308:409","str::rsplit_terminator":"1:11482:35090","self::pattern":"1:11122:11840","`DoubleEndedIterator`":"1:7078:120"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"1:50104:11893","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11127:11841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11443:33672":{"id":"1:11443:33672","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:11444:33673"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:50":{"id":"0:50","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[33,0],"end":[39,1]},"visibility":{"restricted":{"parent":"0:17:1625","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:330:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:51:1787"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:135":{"id":"0:135","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[89,9],"end":[89,14]},"visibility":{"restricted":{"parent":"0:17:1625","path":"::core_api"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:136:413"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:100:1653":{"id":"0:100:1653","crate_id":0,"name":"Sha512_224","span":{"filename":"src/lib.rs","begin":[89,0],"end":[89,92]},"visibility":"public","docs":"SHA-512/224 hasher.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"CoreWrapper","id":"4:492:1626","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CtVariableCoreWrapper","id":"4:473:1627","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"U28","id":"24:2508:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"OidSha512_224","id":"0:425:1644","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"1:11420":{"id":"1:11420","crate_id":1,"name":null,"span":null,"visibility":{"restricted":{"parent":"1:10685:1360","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["1:11421:796","1:11422:11081","1:11423:35080","1:11424:35081","1:11426:35082","1:11429:35083","1:11430:35084","1:11431:310","1:11432:5817","1:11433:5823","1:11435:26678","1:11437:26679","1:11439:26680","1:11441:35085","1:11442:35086","1:11443:33672","1:11444:33673","1:11445:26167","1:11446:26174","1:11447:26099","1:11448:30438","1:11449:30425","1:11450:35087","1:11451:35088","1:11452:30455","1:11453:32308","1:11456:33689","1:11459:33690","1:11462:11119","1:11466:11080","1:11470:33680","1:11473:30437","1:11476:33683","1:11479:35089","1:11482:35090","1:11485:33685","1:11488:33687","1:11491:35091","1:11494:35092","1:11497:1884","1:11500:35093","1:11503:35094","1:11506:35095","1:11509:35096","1:11511:35097","1:11513:35098","1:11515:35099","1:11516:35100","1:11517:35101","1:11520:35102","1:11523:33691","1:11526:33692","1:11529:35103","1:11532:35104","1:11535:35105","1:11538:35106","1:11540:26892","1:11541:26896","1:11542:26897","1:11543:26898","1:11544:35107","1:11546:11660","1:11547:35108"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11430:35084":{"id":"1:11430:35084","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:11456:33689":{"id":"1:11456:33689","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"6:12308:409","self::pattern":"1:11122:11840"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11127:11841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2510-0:132:1635":{"id":"b:1:2510-0:132:1635","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2487:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2484:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2513:11074"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11452:30455":{"id":"1:11452:30455","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"1:50346:11898","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11485:33685":{"id":"1:11485:33685","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"6:12308:409","self::pattern":"1:11122:11840","str::rsplitn":"1:11488:33687"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"1:50158:5267","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11127:11841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11422:11081":{"id":"1:11422:11081","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11542:26897":{"id":"1:11542:26897","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:47:1785":{"id":"0:47:1785","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[26,4],"end":[26,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5209","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5209","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5209","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5209","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5209","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5209","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5209","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UTerm","id":"24:6363:5210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B1","id":"24:5724:5214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"0:45":{"id":"0:45","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[23,0],"end":[23,36]},"visibility":{"restricted":{"parent":"0:17:1625","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:357:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:49:1786":{"id":"0:49:1786","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[30,4],"end":[30,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Eager","id":"25:77:1765","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"1:11497:1884":{"id":"1:11497:1884","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:11122:11840","`DoubleEndedIterator`":"1:7078:120","str::matches":"1:11497:1884","prim@char":"6:12308:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"1:50258:11894","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11127:11841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2238-0:127:1634":{"id":"b:1:2238-0:127:1634","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2666:5672","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2240:1842"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:55:1790":{"id":"0:55:1790","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[46,4],"end":[46,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"resolved_path","inner":{"name":"TruncSide","id":"4:512:1772","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}},"0:74:923":{"id":"0:74:923","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[121,4],"end":[131,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["output_size",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48222:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"InvalidOutputSize","id":"4:522:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2510-0:127:1634":{"id":"b:1:2510-0:127:1634","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2487:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2484:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2513:11074"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2525-0:132:1635":{"id":"b:1:2525-0:132:1635","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2484:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2494:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2528:127","1:2529:1434"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"24:1173:183":{"id":"24:1173:183","crate_id":24,"name":"Output","span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/typenum-1.16.0/src/type_operators.rs","begin":[35,4],"end":[35,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:59":{"id":"0:59","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[71,0],"end":[76,1]},"visibility":{"restricted":{"parent":"0:17:1625","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"22:46:1766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:60:1808"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:2513:11074":{"id":"1:2513:11074","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2487:132"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11442:35086":{"id":"1:11442:35086","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"crate::ops::IndexMut":"1:2982:11629","`str`":"6:12314:1360","str::slice_unchecked":"1:11441:35085"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7740:11805-0:127:1634":{"id":"a:1:7740:11805-0:127:1634","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7740:11805","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:56:923":{"id":"0:56:923","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[49,4],"end":[57,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["output_size",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48222:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"InvalidOutputSize","id":"4:522:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:66":{"id":"0:66","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[101,0],"end":[103,1]},"visibility":{"restricted":{"parent":"0:17:1625","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:332:1770","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:67:1786"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5":{"id":"0:5","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,17],"end":[54,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"digest","name":"digest","id":"4:0:1614","glob":false}},"1:11448:30438":{"id":"1:11448:30438","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:11449:30425"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"1:50328:11890","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11476:33683":{"id":"1:11476:33683","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:11122:11840","prim@char":"6:12308:409","str::split":"1:11470:33680","`DoubleEndedIterator`":"1:7078:120"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"1:50072:5269","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11127:11841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11127:11841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11142:11844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2241-0:132:1635":{"id":"b:1:2241-0:132:1635","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2666:5672","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2235:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2243:27474"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11541:26896":{"id":"1:11541:26896","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:54":{"id":"0:54","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[45,0],"end":[69,1]},"visibility":{"restricted":{"parent":"0:17:1625","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:341:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:55:1790","0:56:923","0:57:1795"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11437:26679":{"id":"1:11437:26679","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9304:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9304:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:102:1657":{"id":"0:102:1657","crate_id":0,"name":"Sha384","span":{"filename":"src/lib.rs","begin":[93,0],"end":[93,84]},"visibility":"public","docs":"SHA-384 hasher.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"CoreWrapper","id":"4:492:1626","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CtVariableCoreWrapper","id":"4:473:1627","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"U48","id":"24:2568:1623","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"OidSha384","id":"0:377:1638","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"0:80:656":{"id":"0:80:656","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[154,4],"end":[156,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8562:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8551:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:65:1785":{"id":"0:65:1785","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[98,4],"end":[98,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5209","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5209","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5209","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5209","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5209","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5209","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5209","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5209","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UTerm","id":"24:6363:5210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B1","id":"24:5724:5214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"b:1:3311-0:127:1634":{"id":"b:1:3311-0:127:1634","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2666:5672","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3309:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3313:1448"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:685:12314":{"id":"5:685:12314","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"1:11453:32308":{"id":"1:11453:32308","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"6:12308:409","self::pattern":"1:11122:11840"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11127:11841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11446:26174":{"id":"1:11446:26174","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"6:12308:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"1:50030:11887","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11451:35088":{"id":"1:11451:35088","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"1:50318:11891","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:24:1171-0:132:1635":{"id":"b:24:1171-0:132:1635","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/typenum-1.16.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"24:1168:5363","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["24:1173:183"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11540:26892":{"id":"1:11540:26892","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:683-0:132:1635":{"id":"b:5:683-0:132:1635","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:679:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:685:12314","5:686:27478","5:687:27479"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:2673:225-0:127:1634":{"id":"a:1:2673:225-0:127:1634","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2673:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:11441:35085":{"id":"1:11441:35085","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"crate::ops::Index":"1:2978:11628","str::slice_mut_unchecked":"1:11442:35086","`str`":"6:12314:1360"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:131:413":{"id":"0:131:413","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[17,9],"end":[17,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11435:26678":{"id":"1:11435:26678","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:48080:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48078:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9304:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9304:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11526:33692":{"id":"1:11526:33692","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"1:11122:11840","prim@char":"6:12308:409"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48078:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11127:11841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11127:11841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11142:11844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2520-0:127:1634":{"id":"b:1:2520-0:127:1634","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2494:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2490:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2523:127","1:2524:1435"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11500:35093":{"id":"1:11500:35093","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"str::matches":"1:11497:1884","`DoubleEndedIterator`":"1:7078:120","prim@char":"6:12308:409","self::pattern":"1:11122:11840"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"1:50276:11895","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11127:11841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11127:11841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11142:11844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[41,0],"end":[43,1]},"visibility":{"restricted":{"parent":"0:17:1625","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"22:33:1771","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:53:1789"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:46":{"id":"0:46","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[25,0],"end":[27,1]},"visibility":{"restricted":{"parent":"0:17:1625","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"22:22:1768","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:47:1785"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:127:1634":{"id":"0:127:1634","crate_id":0,"name":"Sha256VarCore","span":{"filename":"src/core_api.rs","begin":[18,0],"end":[21,1]},"visibility":"public","docs":"Core block-level SHA-256 hasher with variable output size.\n\nSupports initialization only for 28 and 32 byte output sizes,\ni.e. 224 and 256 bits respectively.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:7740:11805-0:127:1634","a:1:2659:217-0:127:1634","a:1:2723:5673-0:127:1634","a:1:2673:225-0:127:1634","a:1:7739:11806-0:127:1634","b:1:2514-0:127:1634","b:1:3311-0:127:1634","b:1:2520-0:127:1634","b:1:2525-0:127:1634","b:1:2241-0:127:1634","b:1:2510-0:127:1634","b:1:2238-0:127:1634","b:5:683-0:127:1634","b:24:1171-0:127:1634","0:130","0:45","0:46","0:48","0:50","0:52","0:54","0:59","0:61"]}},"1:11511:35097":{"id":"1:11511:35097","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:64":{"id":"0:64","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[97,0],"end":[99,1]},"visibility":{"restricted":{"parent":"0:17:1625","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"22:22:1768","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:65:1785"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11439:26680":{"id":"1:11439:26680","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9304:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9304:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:67:1786":{"id":"0:67:1786","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[102,4],"end":[102,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Eager","id":"25:77:1765","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"a:1:2659:217-0:127:1634":{"id":"a:1:2659:217-0:127:1634","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2659:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:1:7740:11805-0:132:1635":{"id":"a:1:7740:11805-0:132:1635","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7740:11805","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2514-0:132:1635":{"id":"b:1:2514-0:132:1635","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2487:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2516:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11459:33690":{"id":"1:11459:33690","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"1:11122:11840","prim@char":"6:12308:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11127:11841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11127:11841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11142:11844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:77":{"id":"0:77","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[145,0],"end":[150,1]},"visibility":{"restricted":{"parent":"0:17:1625","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"22:46:1766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:78:1808"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11515:35099":{"id":"1:11515:35099","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:97":{"id":"0:97","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[75,34],"end":[75,47]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"core_api::Sha512VarCore","name":"Sha512VarCore","id":"0:132:1635","glob":false}},"1:11532:35104":{"id":"1:11532:35104","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"1:11122:11840","prim@char":"6:12308:409"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11127:11841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:136:413":{"id":"0:136:413","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[89,9],"end":[89,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2659:217-0:132:1635":{"id":"a:1:2659:217-0:132:1635","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2659:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:1:2723:5673-0:132:1635":{"id":"a:1:2723:5673-0:132:1635","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2723:5673","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:57:1795":{"id":"0:57:1795","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[60,4],"end":[68,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buffer",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Buffer","id":"4:328:1769","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}}}}],["out",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Output","id":"22:16:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:53:1789":{"id":"0:53:1789","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[42,4],"end":[42,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5209","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5209","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5209","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5209","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5209","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5209","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UTerm","id":"24:6363:5210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B1","id":"24:5724:5214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"b:1:2238-0:132:1635":{"id":"b:1:2238-0:132:1635","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2666:5672","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2232:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2240:1842"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:71:1789":{"id":"0:71:1789","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[114,4],"end":[114,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5209","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5209","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5209","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5209","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5209","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5209","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5209","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UTerm","id":"24:6363:5210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B1","id":"24:5724:5214","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"1:11544:35107":{"id":"1:11544:35107","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4469:35107"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"1:50353:11695","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:101:1655":{"id":"0:101:1655","crate_id":0,"name":"Sha512_256","span":{"filename":"src/lib.rs","begin":[91,0],"end":[91,92]},"visibility":"public","docs":"SHA-512/256 hasher.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"CoreWrapper","id":"4:492:1626","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CtVariableCoreWrapper","id":"4:473:1627","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"U32","id":"24:2520:1622","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"OidSha512_256","id":"0:441:1646","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"0:73:1790":{"id":"0:73:1790","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[118,4],"end":[118,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"resolved_path","inner":{"name":"TruncSide","id":"4:512:1772","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}},"5:687:27479":{"id":"5:687:27479","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11466:11080":{"id":"1:11466:11080","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:48080:176","self::pattern":"1:11122:11840","prim@char":"6:12308:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48078:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11127:11841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11127:11841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11142:11844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:51:1787":{"id":"0:51:1787","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[35,4],"end":[38,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["blocks",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"Block","id":"22:12:1767","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2523:127":{"id":"1:2523:127","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"1:2494:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"1:11494:35092":{"id":"1:11494:35092","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48078:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11127:11841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11127:11841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11142:11844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11429:35083":{"id":"1:11429:35083","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:10690:11881"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11444:33673":{"id":"1:11444:33673","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:11443:33672"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5240:35771":{"id":"5:5240:35771","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:288:1930","`String`":"5:7098:221"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:1930","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6849:12301","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7098:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[95,0],"end":[95,36]},"visibility":{"restricted":{"parent":"0:17:1625","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:357:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11449:30425":{"id":"1:11449:30425","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:11448:30438"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"1:50337:11899","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2529:1434":{"id":"1:2529:1434","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48222:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"1:2494:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7739:11806-0:127:1634":{"id":"a:1:7739:11806-0:127:1634","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7739:11806","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:61":{"id":"0:61","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[78,0],"end":[83,1]},"visibility":{"restricted":{"parent":"0:17:1625","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8602:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:62:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11421:796":{"id":"1:11421:796","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"6:12308:409"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11523:33691":{"id":"1:11523:33691","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:12308:409","self::pattern":"1:11122:11840"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48078:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11127:11841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11538:35106":{"id":"1:11538:35106","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"1:11083:11435","FromStr::Err":"1:11084:126"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48222:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"1:11083:11435","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:11083:11435","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:68":{"id":"0:68","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[105,0],"end":[111,1]},"visibility":{"restricted":{"parent":"0:17:1625","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:330:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:69:1787"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11426:35082":{"id":"1:11426:35082","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:11424:35081"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5231:35769":{"id":"5:5231:35769","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7098:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7098:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5239:35770":{"id":"5:5239:35770","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7098:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7098:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11543:26898":{"id":"1:11543:26898","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[17,9],"end":[17,14]},"visibility":{"restricted":{"parent":"0:17:1625","path":"::core_api"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2255:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:131:413"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11491:35091":{"id":"1:11491:35091","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48078:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11127:11841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5223":{"id":"5:5223","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5134:1360","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5224:35767","5:5225:11031","5:5228:35768","5:5231:35769","5:5239:35770","5:5240:35771","5:5241:11756","5:5242:26893","5:5243:26894"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11447:26099":{"id":"1:11447:26099","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"1:50040:11886","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11488:33687":{"id":"1:11488:33687","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"str::splitn":"1:11485:33685","self::pattern":"1:11122:11840","prim@char":"6:12308:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"1:50176:5263","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11127:11841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11127:11841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11142:11844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:75:1795":{"id":"0:75:1795","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[134,4],"end":[142,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buffer",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Buffer","id":"4:328:1769","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}}}}],["out",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Output","id":"22:16:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11503:35094":{"id":"1:11503:35094","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"str::rmatch_indices":"1:11506:35095","prim@char":"6:12308:409","self::pattern":"1:11122:11840","`DoubleEndedIterator`":"1:7078:120"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"1:50204:11896","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11127:11841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:48":{"id":"0:48","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[29,0],"end":[31,1]},"visibility":{"restricted":{"parent":"0:17:1625","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:332:1770","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:49:1786"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:3313:1448":{"id":"1:3313:1448","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"1:46570:11604","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11547:35108":{"id":"1:11547:35108","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4467:35108"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"1:50371:11692","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11462:11119":{"id":"1:11462:11119","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"self::pattern":"1:11122:11840","prim@char":"6:12308:409","`None`":"1:48080:176"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48078:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11127:11841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:62:656":{"id":"0:62:656","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[80,4],"end":[82,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8562:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8551:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:79":{"id":"0:79","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[152,0],"end":[157,1]},"visibility":{"restricted":{"parent":"0:17:1625","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8602:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:80:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:96":{"id":"0:96","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[75,19],"end":[75,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"core_api::Sha256VarCore","name":"Sha256VarCore","id":"0:127:1634","glob":false}},"5:5243:26894":{"id":"5:5243:26894","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:11543:26898"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7098:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:24:1171-0:127:1634":{"id":"b:24:1171-0:127:1634","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/github.com-1ecc6299db9ec823/typenum-1.16.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"24:1168:5363","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["24:1173:183"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:72":{"id":"0:72","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[117,0],"end":[143,1]},"visibility":{"restricted":{"parent":"0:17:1625","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:341:1774","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:73:1790","0:74:923","0:75:1795"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:3311-0:132:1635":{"id":"b:1:3311-0:132:1635","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2666:5672","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3309:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3313:1448"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11424:35081":{"id":"1:11424:35081","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2514-0:127:1634":{"id":"b:1:2514-0:127:1634","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2487:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2516:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2525-0:127:1634":{"id":"b:1:2525-0:127:1634","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2484:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2494:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2528:127","1:2529:1434"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:132:1635":{"id":"0:132:1635","crate_id":0,"name":"Sha512VarCore","span":{"filename":"src/core_api.rs","begin":[90,0],"end":[93,1]},"visibility":"public","docs":"Core block-level SHA-512 hasher with variable output size.\n\nSupports initialization only for 28, 32, 48, and 64 byte output sizes,\ni.e. 224, 256, 384, and 512 bits respectively.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:7740:11805-0:132:1635","a:1:2659:217-0:132:1635","a:1:2723:5673-0:132:1635","a:1:2673:225-0:132:1635","a:1:7739:11806-0:132:1635","b:1:2514-0:132:1635","b:1:3311-0:132:1635","b:1:2520-0:132:1635","b:1:2525-0:132:1635","b:1:2241-0:132:1635","b:1:2510-0:132:1635","b:1:2238-0:132:1635","b:5:683-0:132:1635","b:24:1171-0:132:1635","0:135","0:63","0:64","0:66","0:68","0:70","0:72","0:77","0:79"]}},"1:11431:310":{"id":"1:11431:310","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"6:12325:1456","str::as_mut_ptr":"1:11432:5817"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2723:5673-0:127:1634":{"id":"a:1:2723:5673-0:127:1634","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2723:5673","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1634","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:11482:35090":{"id":"1:11482:35090","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"prim@char":"6:12308:409","str::split":"1:11470:33680","self::pattern":"1:11122:11840","str::split_terminator":"1:11479:35089"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"1:50122:11892","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11127:11841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11127:11841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11142:11844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11432:5817":{"id":"1:11432:5817","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"6:12325:1456"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11450:35087":{"id":"1:11450:35087","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"1:50308:11889","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11516:35100":{"id":"1:11516:35100","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2243:27474":{"id":"1:2243:27474","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11445:26167":{"id":"1:11445:26167","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"6:12308:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"1:50024:11888","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2520-0:132:1635":{"id":"b:1:2520-0:132:1635","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2494:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2490:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2523:127","1:2524:1435"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11506:35095":{"id":"1:11506:35095","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"prim@char":"6:12308:409","`DoubleEndedIterator`":"1:7078:120","str::match_indices":"1:11503:35094","self::pattern":"1:11122:11840"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"1:50222:11897","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11127:11841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11127:11841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11142:11844","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[113,0],"end":[115,1]},"visibility":{"restricted":{"parent":"0:17:1625","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"22:33:1771","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:71:1789"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11509:35096":{"id":"1:11509:35096","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:103:1659":{"id":"0:103:1659","crate_id":0,"name":"Sha512","span":{"filename":"src/lib.rs","begin":[95,0],"end":[95,84]},"visibility":"public","docs":"SHA-512 hasher.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"CoreWrapper","id":"4:492:1626","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CtVariableCoreWrapper","id":"4:473:1627","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"U64","id":"24:2616:1624","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"OidSha512","id":"0:393:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"5:5228:35768":{"id":"5:5228:35768","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7098:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7098:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11127:11841","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2524:1435":{"id":"1:2524:1435","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48222:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"1:2494:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"7:4816:16565":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:8609:11148":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"17:4921:19136":{"crate_id":17,"path":["gimli","constants","DwRle"],"kind":"struct"},"18:13221:23460":{"crate_id":18,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:20069:12249":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:4721:780":{"crate_id":1,"path":["core","iter"],"kind":"module"},"6:965:12347":{"crate_id":6,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"7:6524:17607":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:8655:12605":{"crate_id":6,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"5:4040:5261":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"6:9495:25757":{"crate_id":6,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:21190:25780":{"crate_id":1,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"1:50502:11853":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:4187:204":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"6:4459:12647":{"crate_id":6,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:5379:11781":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"18:10310:19749":{"crate_id":18,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"24:783:12233":{"crate_id":24,"path":["typenum","private","InternalMarker"],"kind":"trait"},"6:11133:12518":{"crate_id":6,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"19:660:23597":{"crate_id":19,"path":["memchr","memmem","FindIter"],"kind":"struct"},"18:9601:19601":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:56909:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"19:531:23611":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:56896:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:2875:33565":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"18:386:19671":{"crate_id":18,"path":["object","read","any","Segment"],"kind":"struct"},"1:49998:11885":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"7:5841:16405":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:6848:12771":{"crate_id":6,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"24:2568:1623":{"crate_id":24,"path":["typenum","generated","consts","U48"],"kind":"typedef"},"7:4354:16518":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:53757:12020":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"7:6293:13126":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"18:9658:19648":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"7:4335:16516":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"19:699:23601":{"crate_id":19,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:39330:5984":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:48824:11148":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"24:613:179":{"crate_id":24,"path":["typenum","marker_traits","Ord"],"kind":"trait"},"6:9440:26385":{"crate_id":6,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"18:11235:20090":{"crate_id":18,"path":["object","elf","Dyn32"],"kind":"struct"},"5:1950:12328":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"18:13214:23459":{"crate_id":18,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"5:1234:12341":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"6:3165:37586":{"crate_id":6,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:50471:11849":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:223:207":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:6419:23737":{"crate_id":6,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:46868:11702":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:46826:11701":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"5:7005:12337":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"18:10233:19747":{"crate_id":18,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"19:548:140":{"crate_id":19,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"13:393:38212":{"crate_id":13,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"5:6919:26115":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"13:810:12346":{"crate_id":13,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:9743:5263":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:9647:12496":{"crate_id":6,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:48214:190":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"18:10752:19754":{"crate_id":18,"path":["object","read","Import"],"kind":"struct"},"7:5568:17142":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"13:1029:12343":{"crate_id":13,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:49370:11371":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"6:1889:12497":{"crate_id":6,"path":["std","env","ArgsOs"],"kind":"struct"},"1:20317:12240":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"7:4665:16550":{"crate_id":7,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"5:6585:23783":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:2509:19508":{"crate_id":17,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"7:6975:17979":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"7:1600:14148":{"crate_id":7,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:10872:12577":{"crate_id":6,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"7:6953:13205":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"24:828:12265":{"crate_id":24,"path":["typenum","private","PrivateSub"],"kind":"trait"},"17:7237:19479":{"crate_id":17,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"13:751:12320":{"crate_id":13,"path":["hashbrown","map","Drain"],"kind":"struct"},"18:10608:19765":{"crate_id":18,"path":["object","read","SectionIndex"],"kind":"struct"},"7:7208:16687":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:2579:19511":{"crate_id":17,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:49142:71":{"crate_id":1,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"5:4201:11656":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:4413:18993":{"crate_id":17,"path":["gimli","constants","DwVis"],"kind":"struct"},"0:98:1649":{"crate_id":0,"path":["sha2","Sha224"],"kind":"typedef"},"17:2433:19505":{"crate_id":17,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"18:12934:23044":{"crate_id":18,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"18:9791:19652":{"crate_id":18,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"19:113:23626":{"crate_id":19,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"18:12695:22877":{"crate_id":18,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"4:336:5224":{"crate_id":4,"path":["digest","core_api","ExtendableOutputCore"],"kind":"trait"},"1:52329:11986":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"18:8752:11886":{"crate_id":18,"path":["object","read","util","Bytes"],"kind":"struct"},"6:9223:183":{"crate_id":6,"path":["std","process","Output"],"kind":"struct"},"7:6302:17596":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"7:1707:12639":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"6:11079:12684":{"crate_id":6,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:2667:11040":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"22:44:1934":{"crate_id":22,"path":["crypto_common","Reset"],"kind":"trait"},"7:5480:17169":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"4:473:1627":{"crate_id":4,"path":["digest","core_api","ct_variable","CtVariableCoreWrapper"],"kind":"struct"},"1:21766:174":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"6:11486:11911":{"crate_id":6,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"1:50789:11875":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"18:8951:38244":{"crate_id":18,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:3689:18480":{"crate_id":17,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:4259:12615":{"crate_id":6,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"10:0:1908":{"crate_id":10,"path":["miniz_oxide"],"kind":"module"},"18:13382:23502":{"crate_id":18,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:8613:11150":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"4:424:1923":{"crate_id":4,"path":["digest","FixedOutputReset"],"kind":"trait"},"18:10445:19756":{"crate_id":18,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"6:8715:12642":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"7:4527:16532":{"crate_id":7,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:1615:12330":{"crate_id":6,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"6:4329:12622":{"crate_id":6,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"18:11500:22405":{"crate_id":18,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:52663:12015":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"7:4437:16525":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:50362:11659":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"13:320:23711":{"crate_id":13,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"18:9283:19585":{"crate_id":18,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"7:4139:16495":{"crate_id":7,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:4385:18989":{"crate_id":17,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:2809:11617":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"22:12:1767":{"crate_id":22,"path":["crypto_common","Block"],"kind":"typedef"},"18:11247:20091":{"crate_id":18,"path":["object","elf","Dyn64"],"kind":"struct"},"6:11772:23753":{"crate_id":6,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:5189:12681":{"crate_id":6,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"10:676:18276":{"crate_id":10,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"1:46378:11630":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"24:821:12267":{"crate_id":24,"path":["typenum","private","PrivateXor"],"kind":"trait"},"5:2056:26107":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:2154:578":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:52945:11999":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"10:586:18221":{"crate_id":10,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"18:10108:19661":{"crate_id":18,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"25:36:1786":{"crate_id":25,"path":["block_buffer","BufferKind"],"kind":"trait"},"4:330:1773":{"crate_id":4,"path":["digest","core_api","UpdateCore"],"kind":"trait"},"18:13478:23517":{"crate_id":18,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"7:4778:16561":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"4:531:1929":{"crate_id":4,"path":["digest","InvalidBufferSize"],"kind":"struct"},"17:4662:19075":{"crate_id":17,"path":["gimli","constants","DwOrd"],"kind":"struct"},"18:8991:38241":{"crate_id":18,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"5:3468:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:58257:25898":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"18:11528:19709":{"crate_id":18,"path":["object","macho","FatHeader"],"kind":"struct"},"1:48154:11086":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:20991:12240":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"5:2865:36272":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"18:13374:23501":{"crate_id":18,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:21700:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"18:13459:23511":{"crate_id":18,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"6:4317:12619":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:7044:38231":{"crate_id":17,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"7:7266:16695":{"crate_id":7,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"24:6363:5210":{"crate_id":24,"path":["typenum","uint","UTerm"],"kind":"struct"},"1:11925:11941":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"6:12328:1455":{"crate_id":6,"path":["std","u64"],"kind":"primitive"},"7:4797:16562":{"crate_id":7,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:52085:12014":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:990:12469":{"crate_id":6,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:50371:11692":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"18:13148:23426":{"crate_id":18,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"5:2366:25769":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:6704:19400":{"crate_id":17,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:8141:26373":{"crate_id":6,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"18:9401:19578":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:6554:203":{"crate_id":6,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:1606:1326":{"crate_id":1,"path":["core","mem","size_of"],"kind":"function"},"7:4496:16529":{"crate_id":7,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"18:11186:20037":{"crate_id":18,"path":["object","elf","Rela64"],"kind":"struct"},"18:11368:20230":{"crate_id":18,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"5:6541:241":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"23:195:5387":{"crate_id":23,"path":["generic_array","iter","GenericArrayIter"],"kind":"struct"},"6:9452:26387":{"crate_id":6,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"18:12033:22605":{"crate_id":18,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"18:420:19364":{"crate_id":18,"path":["object","read","any","Section"],"kind":"struct"},"18:8561:19540":{"crate_id":18,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:4217:18896":{"crate_id":17,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:52307:11983":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:5016:12631":{"crate_id":6,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:20050:32008":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:10590:12736":{"crate_id":6,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"6:7160:37639":{"crate_id":6,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:4050:11676":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"0:103:1659":{"crate_id":0,"path":["sha2","Sha512"],"kind":"typedef"},"1:11127:11841":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:52353:11987":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:50628:11857":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:9399:106":{"crate_id":6,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:7059:11802":{"crate_id":17,"path":["gimli","read","op","Location"],"kind":"enum"},"6:12318:630":{"crate_id":6,"path":["std","f32"],"kind":"primitive"},"1:46991:101":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"6:7067:12776":{"crate_id":6,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:2802:11620":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"17:7135:38234":{"crate_id":17,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:8328:30875":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:54155:5854":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:10676:5247":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:8164:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"18:11761:22586":{"crate_id":18,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:11121:26094":{"crate_id":6,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"6:6506:12740":{"crate_id":6,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"24:924:12259":{"crate_id":24,"path":["typenum","private","PrivateCmp"],"kind":"trait"},"10:19:18278":{"crate_id":10,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"18:12980:23405":{"crate_id":18,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"18:9371:19586":{"crate_id":18,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"6:5898:12740":{"crate_id":6,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:7872:19396":{"crate_id":17,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:5203:19495":{"crate_id":17,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:2705:19516":{"crate_id":17,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"13:1044:18412":{"crate_id":13,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:12315:1438":{"crate_id":6,"path":["std","tuple"],"kind":"primitive"},"18:13527:23543":{"crate_id":18,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"7:586:13259":{"crate_id":7,"path":["libc","unix","itimerval"],"kind":"struct"},"17:4262:18945":{"crate_id":17,"path":["gimli","constants","DwAte"],"kind":"struct"},"18:11617:22515":{"crate_id":18,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"18:8701:19544":{"crate_id":18,"path":["object","endian","I64Bytes"],"kind":"struct"},"0:100:1653":{"crate_id":0,"path":["sha2","Sha512_224"],"kind":"typedef"},"6:8729:12652":{"crate_id":6,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"18:12087:22609":{"crate_id":18,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"18:11137:19999":{"crate_id":18,"path":["object","elf","Syminfo64"],"kind":"struct"},"19:521:23607":{"crate_id":19,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"18:8393:19791":{"crate_id":18,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:4268:11163":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"18:10139:19582":{"crate_id":18,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:46878:11703":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"7:1686:14155":{"crate_id":7,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:8615:11151":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:11765:189":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"10:800:18335":{"crate_id":10,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"18:10207:19735":{"crate_id":18,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:29674:27758":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"6:3475:38089":{"crate_id":6,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:21:667":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"1:49379:144":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"18:11721:22583":{"crate_id":18,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"6:9279:12739":{"crate_id":6,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"7:6998:17981":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"13:1872:12354":{"crate_id":13,"path":["hashbrown","set","Union"],"kind":"struct"},"1:2781:11612":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:50353:11695":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:21385:26131":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"18:9382:19580":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"5:5032:23758":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:20450:11951":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:20263:11961":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:2814:11618":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:10765:12727":{"crate_id":6,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:1811:598":{"crate_id":6,"path":["std","env"],"kind":"module"},"18:9165:38237":{"crate_id":18,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"7:1722:14159":{"crate_id":7,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:996:12470":{"crate_id":6,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"6:9833:128":{"crate_id":6,"path":["std","sys","unix","fs","File"],"kind":"struct"},"7:6392:14081":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"7:4346:16517":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"18:11893:22595":{"crate_id":18,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:5219:19493":{"crate_id":17,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"5:855:12318":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"5:4171:23775":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"7:4152:16496":{"crate_id":7,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"10:188:18255":{"crate_id":10,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"24:1251:5368":{"crate_id":24,"path":["typenum","type_operators","IsNotEqual"],"kind":"trait"},"1:48163:11802":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"6:8133:118":{"crate_id":6,"path":["std","fs","DirBuilder"],"kind":"struct"},"18:12278:22683":{"crate_id":18,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:12308:409":{"crate_id":6,"path":["std","char"],"kind":"primitive"},"4:502:5232":{"crate_id":4,"path":["digest","core_api","xof_reader","XofReaderCoreWrapper"],"kind":"struct"},"7:4698:16553":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"5:3144:12354":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:20733:11979":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"6:4273:12617":{"crate_id":6,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:8445:5265":{"crate_id":6,"path":["std","io","Split"],"kind":"struct"},"1:48273:5262":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"6:1637:12354":{"crate_id":6,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:8972:12713":{"crate_id":6,"path":["std","path","Ancestors"],"kind":"struct"},"1:49391:5939":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"17:5963:191":{"crate_id":17,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:6743:19473":{"crate_id":17,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"19:590:23914":{"crate_id":19,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:50824:121":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"18:11813:22590":{"crate_id":18,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"13:659:11086":{"crate_id":13,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"18:9303:19581":{"crate_id":18,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"6:6687:11753":{"crate_id":6,"path":["std","sync","once","Once"],"kind":"struct"},"1:47231:11793":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:5460:19436":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:10660:12726":{"crate_id":6,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"6:12313:1330":{"crate_id":6,"path":["std","slice"],"kind":"primitive"},"1:48281:11086":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:2750:11432":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"1:46409:195":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"18:8212:19781":{"crate_id":18,"path":["object","common","ComdatKind"],"kind":"enum"},"23:0:1821":{"crate_id":23,"path":["generic_array"],"kind":"module"},"6:11713:12285":{"crate_id":6,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"6:12309:1472":{"crate_id":6,"path":["std","unit"],"kind":"primitive"},"6:7796:23742":{"crate_id":6,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:2844:11625":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:21279:27770":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"6:5405:188":{"crate_id":6,"path":["std","path","PathBuf"],"kind":"struct"},"19:671:23598":{"crate_id":19,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"7:5443:17112":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:52261:11998":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"18:13158:23448":{"crate_id":18,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:2561:115":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"6:8227:26374":{"crate_id":6,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"7:4367:16520":{"crate_id":7,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"24:1184:5322":{"crate_id":24,"path":["typenum","type_operators","Pow"],"kind":"trait"},"18:9700:19621":{"crate_id":18,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"18:13039:23410":{"crate_id":18,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:10660:5245":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"7:4653:16548":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"5:7038:12357":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"6:12322:728":{"crate_id":6,"path":["std","i32"],"kind":"primitive"},"18:11125:19998":{"crate_id":18,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:5558:19442":{"crate_id":17,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"5:2085:26109":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"7:5541:17175":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"18:8475:19537":{"crate_id":18,"path":["object","endian","Endianness"],"kind":"enum"},"18:10121:19662":{"crate_id":18,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:21865:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:48619:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"24:6250:5248":{"crate_id":24,"path":["typenum","Greater"],"kind":"struct"},"1:21898:167":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:51974:11982":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"7:5582:17176":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"10:382:18316":{"crate_id":10,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:7825:19489":{"crate_id":17,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"18:9223:19558":{"crate_id":18,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:8709:12651":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:5878:19453":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:20031:32065":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"18:13279:23462":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"18:13114:23420":{"crate_id":18,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:46958:11698":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:5703:19446":{"crate_id":17,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"18:10774:19751":{"crate_id":18,"path":["object","read","Export"],"kind":"struct"},"1:6818:11666":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"17:6654:19472":{"crate_id":17,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"6:2250:12516":{"crate_id":6,"path":["std","fs","DirEntry"],"kind":"struct"},"7:4575:16538":{"crate_id":7,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:53988:5930":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:20469:12240":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:8602:111":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"6:3958:12604":{"crate_id":6,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"7:5587:17177":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"18:2916:19663":{"crate_id":18,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"18:11288:20210":{"crate_id":18,"path":["object","elf","Verdaux"],"kind":"struct"},"13:1003:12341":{"crate_id":13,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:9840:12515":{"crate_id":6,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"18:11271:20203":{"crate_id":18,"path":["object","elf","Verdef"],"kind":"struct"},"1:49834:5260":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"18:1771:19602":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"5:2871:33564":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"18:12884:23039":{"crate_id":18,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"18:11259:20200":{"crate_id":18,"path":["object","elf","Versym"],"kind":"struct"},"18:11873:22594":{"crate_id":18,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:6896:214":{"crate_id":6,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"7:1580:14146":{"crate_id":7,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:54116:10983":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"22:33:1771":{"crate_id":22,"path":["crypto_common","OutputSizeUser"],"kind":"trait"},"1:47190:11780":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"7:7214:16688":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:524:23720":{"crate_id":6,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"5:1423:12347":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:9446:5261":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"5:6453:12416":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"5:6610:23791":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"5:688:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:6451:26364":{"crate_id":6,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:7388:19403":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:4368:11165":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"6:8481:12597":{"crate_id":6,"path":["std","net","ip_addr","Ipv4Addr"],"kind":"struct"},"24:1031:12243":{"crate_id":24,"path":["typenum","private","IsLessPrivate"],"kind":"trait"},"7:4185:16498":{"crate_id":7,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:2631:19513":{"crate_id":17,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:38174:11046":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:38157:180":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:51784:12025":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:6865:26056":{"crate_id":17,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"8:79:18192":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"5:7098:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"15:215:18425":{"crate_id":15,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"25:106:5226":{"crate_id":25,"path":["block_buffer","BlockBuffer"],"kind":"struct"},"7:62:12861":{"crate_id":7,"path":["libc","unix","DIR"],"kind":"enum"},"1:53365:12027":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:46921:11694":{"crate_id":1,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"18:9339:19575":{"crate_id":18,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:153:19368":{"crate_id":17,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"18:11748:22585":{"crate_id":18,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:21294:25787":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"10:622:18232":{"crate_id":10,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"7:4673:16551":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:5780:19449":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"19:707:11843":{"crate_id":19,"path":["memchr","memmem","Searcher"],"kind":"struct"},"7:1738:14160":{"crate_id":7,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"13:2184:24883":{"crate_id":13,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:7469:19389":{"crate_id":17,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"18:12361:22757":{"crate_id":18,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:50072:5269":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:52585:12026":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:6137:19376":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:3854:18516":{"crate_id":17,"path":["gimli","constants","DwTag"],"kind":"struct"},"6:8587:12600":{"crate_id":6,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"17:3402:19530":{"crate_id":17,"path":["gimli","arch","X86"],"kind":"struct"},"1:46519:5253":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"17:2557:19510":{"crate_id":17,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"19:614:38250":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"18:10434:19755":{"crate_id":18,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"7:5498:17170":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:2235:98":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"18:10997:19815":{"crate_id":18,"path":["object","elf","Ident"],"kind":"struct"},"18:12103:22610":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"18:8110:19802":{"crate_id":18,"path":["object","common","AddressSize"],"kind":"enum"},"17:7847:19490":{"crate_id":17,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"18:10528:19797":{"crate_id":18,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"5:7120:12381":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"5:2153:26112":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:47101:5277":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:4545:19055":{"crate_id":17,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:8307:656":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"17:5949:19454":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:12126:1572":{"crate_id":1,"path":["core","core_arch","arch","x86_64"],"kind":"module"},"5:6424:12414":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:54093:10982":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"13:1852:12353":{"crate_id":13,"path":["hashbrown","set","Intersection"],"kind":"struct"},"24:2508:1621":{"crate_id":24,"path":["typenum","generated","consts","U28"],"kind":"typedef"},"1:20325:11954":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"13:1534:18416":{"crate_id":13,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:7992:12236":{"crate_id":6,"path":["std","error","private","Internal"],"kind":"struct"},"24:2616:1624":{"crate_id":24,"path":["typenum","generated","consts","U64"],"kind":"typedef"},"5:3077:5261":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:6021:12759":{"crate_id":6,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:51019:11940":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:46854:11700":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"5:3089:36269":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"14:220:24881":{"crate_id":14,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:20897:32069":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:10331:26081":{"crate_id":6,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:7396:19488":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"18:9446:19587":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:4322:11164":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:8611:11149":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"18:13594:23586":{"crate_id":18,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"18:11594:22458":{"crate_id":18,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:10454:37529":{"crate_id":6,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:5793:19450":{"crate_id":17,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"24:1274:5339":{"crate_id":24,"path":["typenum","type_operators","Logarithm2"],"kind":"trait"},"1:47264:11785":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:9325:12744":{"crate_id":6,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"6:11930:25764":{"crate_id":6,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:4313:11674":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"15:221:18431":{"crate_id":15,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:4077:11677":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"18:12797:22929":{"crate_id":18,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:12327:1454":{"crate_id":6,"path":["std","u32"],"kind":"primitive"},"17:4749:19089":{"crate_id":17,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:8874:5939":{"crate_id":6,"path":["std","path","State"],"kind":"enum"},"6:9565:12545":{"crate_id":6,"path":["std","time","SystemTime"],"kind":"struct"},"6:5891:203":{"crate_id":6,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"7:7237:16691":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"18:10875:19776":{"crate_id":18,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:2653:12572":{"crate_id":6,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:1887:12496":{"crate_id":6,"path":["std","env","Args"],"kind":"struct"},"24:2520:1622":{"crate_id":24,"path":["typenum","generated","consts","U32"],"kind":"typedef"},"7:6448:17603":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:6109:19404":{"crate_id":17,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:969:12348":{"crate_id":6,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"18:9422:19573":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:56961:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:9417:36412":{"crate_id":6,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:50485:11852":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:5774:12728":{"crate_id":6,"path":["std","process","Stdio"],"kind":"struct"},"1:46497:200":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:50328:11890":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:0:433":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"17:2465:19506":{"crate_id":17,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:2579:12570":{"crate_id":6,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"18:13393:23503":{"crate_id":18,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:12326:1453":{"crate_id":6,"path":["std","u16"],"kind":"primitive"},"1:3148:231":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:6619:19471":{"crate_id":17,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:534:25955":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"6:8439:11886":{"crate_id":6,"path":["std","io","Bytes"],"kind":"struct"},"7:6554:17610":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:50682:11880":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"16:214:18444":{"crate_id":16,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:50040:11886":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:9312:12743":{"crate_id":6,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"17:6034:19457":{"crate_id":17,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:9235:12729":{"crate_id":6,"path":["std","process","ExitStatus"],"kind":"struct"},"1:8551:207":{"crate_id":1,"path":["core","fmt","Result"],"kind":"typedef"},"1:50308:11889":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"13:1840:12320":{"crate_id":13,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:11142:11844":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"18:12337:19756":{"crate_id":18,"path":["object","macho","Relocation"],"kind":"struct"},"17:5525:19440":{"crate_id":17,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"7:1525:14140":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"18:10075:19664":{"crate_id":18,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:3226:11638":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"18:10497:19760":{"crate_id":18,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"18:11515:22406":{"crate_id":18,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:50968:208":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:4191:11667":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:50777:11872":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"22:48:12291":{"crate_id":22,"path":["crypto_common","KeyInit"],"kind":"trait"},"1:1552:11656":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"5:781:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:52505:25894":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"16:193:18440":{"crate_id":16,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"5:7081:12356":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"18:9553:19582":{"crate_id":18,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"18:12972:23378":{"crate_id":18,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:2895:116":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"24:0:1775":{"crate_id":24,"path":["typenum"],"kind":"module"},"7:5554:17141":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"4:339:5225":{"crate_id":4,"path":["digest","core_api","XofReaderCore"],"kind":"trait"},"6:8723:12606":{"crate_id":6,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:7549:36401":{"crate_id":6,"path":["std","panicking","Hook"],"kind":"enum"},"1:11738:28021":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:7859:12449":{"crate_id":6,"path":["std","thread","local","AccessError"],"kind":"struct"},"24:1174:5364":{"crate_id":24,"path":["typenum","type_operators","Abs"],"kind":"trait"},"6:3382:11656":{"crate_id":6,"path":["std","io","Guard"],"kind":"struct"},"1:7037:133":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:2657:19514":{"crate_id":17,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"7:1595:14147":{"crate_id":7,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"24:942:12274":{"crate_id":24,"path":["typenum","private","PrivateDiv"],"kind":"trait"},"6:12314:1360":{"crate_id":6,"path":["std","str"],"kind":"primitive"},"1:48695:10986":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:4327:18977":{"crate_id":17,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:2771:11611":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"21:118:12224":{"crate_id":21,"path":["blobby","Blob6Iterator"],"kind":"struct"},"6:1123:12342":{"crate_id":6,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:8093:12518":{"crate_id":6,"path":["std","fs","FileTimes"],"kind":"struct"},"1:50797:11877":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"18:10894:19777":{"crate_id":18,"path":["object","read","CompressedData"],"kind":"struct"},"13:738:12345":{"crate_id":13,"path":["hashbrown","map","Values"],"kind":"struct"},"18:13007:23407":{"crate_id":18,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:10872:11905":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:56922:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:21267:11438":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:3309:68":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:47574:11757":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:46593:11163":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"13:697:12348":{"crate_id":13,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"6:11962:18448":{"crate_id":6,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"13:1866:12352":{"crate_id":13,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"19:681:23599":{"crate_id":19,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:2871:23726":{"crate_id":6,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"18:10270:19721":{"crate_id":18,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:9495:5265":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"6:7906:12434":{"crate_id":6,"path":["std","thread","Thread"],"kind":"struct"},"18:12251:22681":{"crate_id":18,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"22:54:12293":{"crate_id":22,"path":["crypto_common","InnerInit"],"kind":"trait"},"1:49964:5275":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"6:2516:12569":{"crate_id":6,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:8983:12714":{"crate_id":6,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:22030:11440":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"6:11173:36960":{"crate_id":6,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"7:4239:16504":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"24:1195:5336":{"crate_id":24,"path":["typenum","type_operators","Len"],"kind":"trait"},"1:2982:11629":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:5905:12741":{"crate_id":6,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"22:39:12289":{"crate_id":22,"path":["crypto_common","IvSizeUser"],"kind":"trait"},"18:10682:19770":{"crate_id":18,"path":["object","read","SymbolMapName"],"kind":"struct"},"13:1120:18414":{"crate_id":13,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"7:7243:16692":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"19:636:23924":{"crate_id":19,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"7:6409:17599":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:9460:19476":{"crate_id":6,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"6:6719:12770":{"crate_id":6,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"4:430:1925":{"crate_id":4,"path":["digest","ExtendableOutput"],"kind":"trait"},"18:10583:19764":{"crate_id":18,"path":["object","read","ObjectKind"],"kind":"enum"},"23:382:5379":{"crate_id":23,"path":["generic_array","GenericArrayImplOdd"],"kind":"struct"},"6:11163:12537":{"crate_id":6,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:7483:19390":{"crate_id":17,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"6:8635:12603":{"crate_id":6,"path":["std","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:1751:25776":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:29780:27750":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"6:973:12467":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"7:4716:16555":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:9217:12727":{"crate_id":6,"path":["std","process","CommandArgs"],"kind":"struct"},"7:4300:16512":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:12324:725":{"crate_id":6,"path":["std","i128"],"kind":"primitive"},"1:10289:5281":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"6:1608:11086":{"crate_id":6,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"18:12674:22876":{"crate_id":18,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"5:6216:11086":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:6244:203":{"crate_id":6,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"6:1105:12341":{"crate_id":6,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"7:4398:16522":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"7:1668:14153":{"crate_id":7,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:49354:11372":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:46951:11697":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"4:522:1779":{"crate_id":4,"path":["digest","InvalidOutputSize"],"kind":"struct"},"1:11348:111":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:6161:19459":{"crate_id":17,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"5:3123:36268":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:49954:5274":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:46937:11695":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:7929:19491":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:8515:12599":{"crate_id":6,"path":["std","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:20003:11046":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"18:8418:19789":{"crate_id":18,"path":["object","common","SectionFlags"],"kind":"enum"},"18:10374:19718":{"crate_id":18,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"18:8272:19794":{"crate_id":18,"path":["object","common","SymbolScope"],"kind":"enum"},"7:4635:16546":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:1476:143":{"crate_id":6,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:21084:26124":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:7511:19361":{"crate_id":17,"path":["gimli","read","UnitOffset"],"kind":"struct"},"18:9947:19706":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:7357:19401":{"crate_id":17,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"5:1046:35894":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"6:3599:38090":{"crate_id":6,"path":["std","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:21997:166":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:9615:5283":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:2908:5385":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:47274:11786":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"18:12148:22613":{"crate_id":18,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"7:539:13252":{"crate_id":7,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"18:13436:23508":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"4:427:1924":{"crate_id":4,"path":["digest","XofReader"],"kind":"trait"},"6:10435:12489":{"crate_id":6,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"6:11912:12786":{"crate_id":6,"path":["std","alloc","System"],"kind":"struct"},"6:1002:12471":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:51854:25888":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"18:11300:20211":{"crate_id":18,"path":["object","elf","Verneed"],"kind":"struct"},"1:7425:11661":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:6017:19456":{"crate_id":17,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:21964:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"6:11454:12729":{"crate_id":6,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:2613:12562":{"crate_id":6,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:6829:26052":{"crate_id":17,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"14:0:1912":{"crate_id":14,"path":["std_detect"],"kind":"module"},"6:4911:25573":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:6472:18437":{"crate_id":17,"path":["gimli","read","line","LineRow"],"kind":"struct"},"18:13134:23424":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"18:13082:23416":{"crate_id":18,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"23:300:5394":{"crate_id":23,"path":["generic_array","sequence","Shorten"],"kind":"trait"},"25:93:127":{"crate_id":25,"path":["block_buffer","Error"],"kind":"struct"},"18:13557:23545":{"crate_id":18,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:48467:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"18:9475:19600":{"crate_id":18,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"7:4683:16552":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"6:628:12451":{"crate_id":6,"path":["std","ascii","AsciiExt"],"kind":"trait"},"18:8441:19792":{"crate_id":18,"path":["object","common","SymbolFlags"],"kind":"enum"},"18:12926:23043":{"crate_id":18,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:53159:12008":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:39379:11042":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"18:9738:19625":{"crate_id":18,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"19:564:23613":{"crate_id":19,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"5:1404:12345":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:47593:11761":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"18:10403:19754":{"crate_id":18,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:9304:219":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"24:6272:5249":{"crate_id":24,"path":["typenum","Less"],"kind":"struct"},"7:6322:17598":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"18:11853:22593":{"crate_id":18,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"7:4690:981":{"crate_id":7,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"18:8295:19799":{"crate_id":18,"path":["object","common","RelocationKind"],"kind":"enum"},"24:1241:5367":{"crate_id":24,"path":["typenum","type_operators","IsLessOrEqual"],"kind":"trait"},"1:53903:12023":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"8:32:18185":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:48581:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:7980:19425":{"crate_id":17,"path":["gimli","read","value","ValueType"],"kind":"enum"},"7:6430:17602":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:12037:11945":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"19:515:23610":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:3409:12539":{"crate_id":6,"path":["std","io","Read"],"kind":"trait"},"18:13031:23409":{"crate_id":18,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:9294:12240":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:47008:27765":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:11277:24919":{"crate_id":6,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"6:12312:308":{"crate_id":6,"path":["std","array"],"kind":"primitive"},"7:4115:16493":{"crate_id":7,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:20288:11950":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"6:359:12448":{"crate_id":6,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"13:2198:24885":{"crate_id":13,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"5:6889:35879":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:4888:19121":{"crate_id":17,"path":["gimli","constants","DwMacro"],"kind":"struct"},"18:12225:22679":{"crate_id":18,"path":["object","macho","IdentCommand"],"kind":"struct"},"18:8774:19800":{"crate_id":18,"path":["object","read","util","ByteString"],"kind":"struct"},"1:49120:127":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"6:6148:23727":{"crate_id":6,"path":["std","sync","mpmc","array","Channel"],"kind":"struct"},"18:12896:23041":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"18:9627:19608":{"crate_id":18,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:11679:26368":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"21:11:12213":{"crate_id":21,"path":["blobby","BlobIterator"],"kind":"struct"},"13:2069:12341":{"crate_id":13,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:8056:19362":{"crate_id":17,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"6:8623:12602":{"crate_id":6,"path":["std","net","socket_addr","SocketAddrV4"],"kind":"struct"},"6:8747:12682":{"crate_id":6,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"18:9458:19614":{"crate_id":18,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:46331:11636":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"6:8401:12541":{"crate_id":6,"path":["std","io","SeekFrom"],"kind":"enum"},"13:98:26066":{"crate_id":13,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:49935:5273":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"19:644:23909":{"crate_id":19,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:21406:11439":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:1604:5261":{"crate_id":6,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:7567:19409":{"crate_id":17,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"18:12307:22690":{"crate_id":18,"path":["object","macho","Nlist32"],"kind":"struct"},"5:679:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:21931:168":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"18:11606:22514":{"crate_id":18,"path":["object","macho","LcStr"],"kind":"struct"},"23:437:5381":{"crate_id":23,"path":["generic_array","ArrayConsumer"],"kind":"struct"},"7:4280:16509":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"7:4224:16502":{"crate_id":7,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"18:9061:19582":{"crate_id":18,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:49194:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:2490:235":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:2789:11614":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"18:12816:22931":{"crate_id":18,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:48222:207":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"6:7955:12472":{"crate_id":6,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:49883:5279":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:2026:182":{"crate_id":6,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:49090:67":{"crate_id":1,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"18:11841:22592":{"crate_id":18,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:47313:11789":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:8897:12709":{"crate_id":6,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:3165:11634":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:3199:12580":{"crate_id":6,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"10:956:18289":{"crate_id":10,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:7267:19481":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:49609:26163":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:9405:12433":{"crate_id":6,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"6:8564:36566":{"crate_id":6,"path":["std","net","parser","AddrKind"],"kind":"enum"},"7:131:12927":{"crate_id":7,"path":["libc","unix","FILE"],"kind":"enum"},"18:11559:22411":{"crate_id":18,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:50122:11892":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:4662:12643":{"crate_id":6,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"6:4122:12609":{"crate_id":6,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"26:0:1661":{"crate_id":26,"path":["cfg_if"],"kind":"module"},"1:21667:175":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"6:3274:12577":{"crate_id":6,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:10808:23747":{"crate_id":6,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"5:6873:12320":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"13:2205:12322":{"crate_id":13,"path":["hashbrown","TryReserveError"],"kind":"enum"},"19:624:38249":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:48838:11151":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:47251:11771":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:11103:26089":{"crate_id":6,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"18:10257:19722":{"crate_id":18,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"7:4581:16539":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"18:11070:19989":{"crate_id":18,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:52404:25891":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:5837:12734":{"crate_id":6,"path":["std","process","Termination"],"kind":"trait"},"17:7343:19388":{"crate_id":17,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"6:4909:25571":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"6:3159:36631":{"crate_id":6,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"18:8631:19542":{"crate_id":18,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:11108:12517":{"crate_id":6,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"5:3048:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"13:822:12468":{"crate_id":13,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:3276:12578":{"crate_id":6,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:11505:12545":{"crate_id":6,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:11982:139":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:10677:38149":{"crate_id":6,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:2825:19521":{"crate_id":17,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"7:6981:17980":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"13:2178:24882":{"crate_id":13,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"19:719:23602":{"crate_id":19,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:52821:12007":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:4144:18630":{"crate_id":17,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:3263:19529":{"crate_id":17,"path":["gimli","arch","RiscV"],"kind":"struct"},"7:5660:17181":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:9541:216":{"crate_id":6,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"24:1007:12280":{"crate_id":24,"path":["typenum","private","PrivateMin"],"kind":"trait"},"6:484:12285":{"crate_id":6,"path":["std","thread","local","fast","Key"],"kind":"struct"},"17:6463:19467":{"crate_id":17,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"4:332:1770":{"crate_id":4,"path":["digest","core_api","BufferKindUser"],"kind":"trait"},"6:4019:12608":{"crate_id":6,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"23:369:5378":{"crate_id":23,"path":["generic_array","GenericArrayImplEven"],"kind":"struct"},"1:48831:11150":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:47130:11776":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"18:9885:19704":{"crate_id":18,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"18:12265:22682":{"crate_id":18,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:49362:26160":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"7:4592:16540":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:7078:120":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:9536:215":{"crate_id":6,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:47213:11782":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:12323:729":{"crate_id":6,"path":["std","i64"],"kind":"primitive"},"13:1065:38209":{"crate_id":13,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"18:11199:20038":{"crate_id":18,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:4635:19070":{"crate_id":17,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:6070:19370":{"crate_id":17,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"5:2133:35880":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:46453:199":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"5:1082:35895":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:2793:19520":{"crate_id":17,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:7101:5677":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:7319:19486":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:47559:11753":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"18:11997:22602":{"crate_id":18,"path":["object","macho","DylibReference"],"kind":"struct"},"1:11136:11843":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:774:141":{"crate_id":6,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"18:11547:19708":{"crate_id":18,"path":["object","macho","FatArch64"],"kind":"struct"},"6:3162:37587":{"crate_id":6,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"18:11974:22601":{"crate_id":18,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:20071:12250":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"13:762:12330":{"crate_id":13,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"24:5814:5215":{"crate_id":24,"path":["typenum","int","Z0"],"kind":"struct"},"17:4519:19001":{"crate_id":17,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:46890:11692":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:2670:222":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"18:10476:19758":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:20993:11953":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"24:1878:12251":{"crate_id":24,"path":["typenum","uint","GetBit"],"kind":"trait"},"18:1931:19596":{"crate_id":18,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"7:4317:16514":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:51915:11993":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"18:13231:23461":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:47242:11784":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:7372:38229":{"crate_id":17,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:6528:19469":{"crate_id":17,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:56948:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"23:143:5388":{"crate_id":23,"path":["generic_array","functional","MappedGenericSequence"],"kind":"trait"},"5:1320:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:49401:26161":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"7:1887:14296":{"crate_id":7,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"6:5014:12628":{"crate_id":6,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:11399:23749":{"crate_id":6,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"6:661:12454":{"crate_id":6,"path":["std","backtrace","Backtrace"],"kind":"struct"},"18:9021:19806":{"crate_id":18,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"6:954:12330":{"crate_id":6,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"21:105:12223":{"crate_id":21,"path":["blobby","Blob5Iterator"],"kind":"struct"},"6:11382:1934":{"crate_id":6,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:52039:11949":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:5737:19447":{"crate_id":17,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"22:75:12295":{"crate_id":22,"path":["crypto_common","InvalidLength"],"kind":"struct"},"1:50769:11869":{"crate_id":1,"path":["core","str","LinesAnyMap"],"kind":"struct"},"18:12008:22603":{"crate_id":18,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"7:4761:16559":{"crate_id":7,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"18:9350:19574":{"crate_id":18,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:6816:26049":{"crate_id":17,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"5:3690:23758":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:51032:158":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"7:4179:16497":{"crate_id":7,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:8333:31246":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"5:1395:12344":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:50176:5263":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:4441:18997":{"crate_id":17,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"19:755:23605":{"crate_id":19,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:8432:11790":{"crate_id":6,"path":["std","io","Take"],"kind":"struct"},"22:0:1919":{"crate_id":22,"path":["crypto_common"],"kind":"module"},"6:11835:12607":{"crate_id":6,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:5388:19432":{"crate_id":17,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"9:0:1661":{"crate_id":9,"path":["cfg_if"],"kind":"module"},"18:13184:23451":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:52115:12018":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"18:10283:19720":{"crate_id":18,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"18:12768:22927":{"crate_id":18,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"18:11800:22589":{"crate_id":18,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"7:1550:14143":{"crate_id":7,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"19:727:23603":{"crate_id":19,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:46996:11744":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"4:492:1626":{"crate_id":4,"path":["digest","core_api","wrapper","CoreWrapper"],"kind":"struct"},"16:0:1914":{"crate_id":16,"path":["addr2line"],"kind":"module"},"6:960:12346":{"crate_id":6,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:4771:12657":{"crate_id":6,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"18:8911:38243":{"crate_id":18,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:7934:12455":{"crate_id":6,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"5:6946:11086":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:47568:11755":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"0:99:1651":{"crate_id":0,"path":["sha2","Sha256"],"kind":"typedef"},"4:440:1927":{"crate_id":4,"path":["digest","VariableOutput"],"kind":"trait"},"18:10708:19771":{"crate_id":18,"path":["object","read","ObjectMap"],"kind":"struct"},"18:8666:19543":{"crate_id":18,"path":["object","endian","I32Bytes"],"kind":"struct"},"13:669:12347":{"crate_id":13,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"5:952:23758":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"13:725:12344":{"crate_id":13,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:6719:38230":{"crate_id":17,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:9357:12746":{"crate_id":6,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:53617:12016":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:3010:19526":{"crate_id":17,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:47601:11763":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:900:5262":{"crate_id":6,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:49922:5278":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"5:1062:36271":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"18:9193:38239":{"crate_id":18,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:1626:12351":{"crate_id":6,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:6186:19380":{"crate_id":17,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:7202:23740":{"crate_id":6,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:2535:19509":{"crate_id":17,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:47552:26156":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"6:3352:11757":{"crate_id":6,"path":["std","io","util","Repeat"],"kind":"struct"},"18:11343:20216":{"crate_id":18,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:21832:5252":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"18:9691:19622":{"crate_id":18,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:47583:11759":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:50577:11855":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"7:4096:16491":{"crate_id":7,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"13:1628:23718":{"crate_id":13,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"18:8596:19541":{"crate_id":18,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:1114:12343":{"crate_id":6,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"18:12022:22604":{"crate_id":18,"path":["object","macho","TwolevelHint"],"kind":"struct"},"7:5692:17184":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"7:1541:14142":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"4:436:1926":{"crate_id":4,"path":["digest","ExtendableOutputReset"],"kind":"trait"},"18:12739:22882":{"crate_id":18,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"18:13141:23425":{"crate_id":18,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"24:2392:12240":{"crate_id":24,"path":["typenum","sealed","Sealed"],"kind":"trait"},"6:8773:12630":{"crate_id":6,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:2760:11433":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"7:6424:17601":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"5:6940:11086":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:7858:12240":{"crate_id":6,"path":["std","sealed","Sealed"],"kind":"trait"},"1:52739:12022":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"5:1203:12340":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"18:12909:23042":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:3237:12582":{"crate_id":6,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:53009:11984":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:12274:36395":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"4:357:1778":{"crate_id":4,"path":["digest","digest","HashMarker"],"kind":"trait"},"27:0:1662":{"crate_id":27,"path":["cpufeatures"],"kind":"module"},"10:592:18231":{"crate_id":10,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"6:2029:181":{"crate_id":6,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:4843:12672":{"crate_id":6,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"18:10385:19752":{"crate_id":18,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:29580:11036":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:6403:11941":{"crate_id":6,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:2797:11615":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:50781:11873":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"18:10854:19775":{"crate_id":18,"path":["object","read","CompressionFormat"],"kind":"enum"},"7:6572:17611":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"18:10420:19744":{"crate_id":18,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:10336:1763":{"crate_id":1,"path":["core","slice","raw","from_ref"],"kind":"function"},"4:448:1928":{"crate_id":4,"path":["digest","VariableOutputReset"],"kind":"trait"},"13:1859:12351":{"crate_id":13,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:46638:11650":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"7:507:13249":{"crate_id":7,"path":["libc","unix","timespec"],"kind":"struct"},"1:53819:11985":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:7741:11804":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:21418:11442":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"6:4267:12616":{"crate_id":6,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"7:545:13253":{"crate_id":7,"path":["libc","unix","hostent"],"kind":"struct"},"6:9525:164":{"crate_id":6,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"12:0:1910":{"crate_id":12,"path":["adler"],"kind":"module"},"1:47161:11777":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:11193:11848":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"6:1864:12489":{"crate_id":6,"path":["std","env","SplitPaths"],"kind":"struct"},"18:10394:19753":{"crate_id":18,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:1620:12353":{"crate_id":6,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"5:4755:11656":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:6252:19463":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"7:4737:16557":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:52231:11994":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:1611:12320":{"crate_id":6,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"18:12211:22678":{"crate_id":18,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:11697:26102":{"crate_id":6,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"18:9897:19705":{"crate_id":18,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"6:8452:11889":{"crate_id":6,"path":["std","io","Lines"],"kind":"struct"},"18:12291:22689":{"crate_id":18,"path":["object","macho","NoteCommand"],"kind":"struct"},"18:13192:23452":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:49843:5258":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"7:6311:17597":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"22:51:12292":{"crate_id":22,"path":["crypto_common","KeyIvInit"],"kind":"trait"},"5:872:5261":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:47222:11783":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:6429:1805":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"7:4274:16508":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:9584:12773":{"crate_id":6,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:4899:12617":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"7:4247:16505":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"18:8162:19790":{"crate_id":18,"path":["object","common","SectionKind"],"kind":"enum"},"18:10321:19715":{"crate_id":18,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"18:10796:19773":{"crate_id":18,"path":["object","read","CodeView"],"kind":"struct"},"18:11576:22414":{"crate_id":18,"path":["object","macho","MachHeader64"],"kind":"struct"},"5:3602:12328":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:49075:70":{"crate_id":1,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"14:108:38216":{"crate_id":14,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"18:11909:22596":{"crate_id":18,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"21:79:12221":{"crate_id":21,"path":["blobby","Blob3Iterator"],"kind":"struct"},"6:4913:25575":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:46817:11664":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:9729:5267":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:51992:25890":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:5235:24625":{"crate_id":17,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"24:1276:5326":{"crate_id":24,"path":["typenum","type_operators","Gcd"],"kind":"trait"},"10:827:18355":{"crate_id":10,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"6:8824:12699":{"crate_id":6,"path":["std","path","Prefix"],"kind":"enum"},"5:7052:27765":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"18:12874:22977":{"crate_id":18,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:3188:19528":{"crate_id":17,"path":["gimli","arch","AArch64"],"kind":"struct"},"24:611:5229":{"crate_id":24,"path":["typenum","marker_traits","NonZero"],"kind":"trait"},"1:48265:5261":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"18:8814:128":{"crate_id":18,"path":["object","read","any","File"],"kind":"struct"},"10:111:18247":{"crate_id":10,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"18:9183:19808":{"crate_id":18,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:2710:11041":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"4:421:1922":{"crate_id":4,"path":["digest","FixedOutput"],"kind":"trait"},"1:3970:103":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"5:3492:5262":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"24:653:5351":{"crate_id":24,"path":["typenum","marker_traits","TypeArray"],"kind":"trait"},"1:54014:10977":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"22:56:12294":{"crate_id":22,"path":["crypto_common","InnerIvInit"],"kind":"trait"},"18:9873:19703":{"crate_id":18,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"5:1445:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"18:9263:19560":{"crate_id":18,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:11649:25763":{"crate_id":6,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"7:5595:17178":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:4022:12607":{"crate_id":6,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:5706:12725":{"crate_id":6,"path":["std","process","ChildStderr"],"kind":"struct"},"6:5359:26360":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:21227:26126":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:2755:11434":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"5:36:12310":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:20319:11952":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:6210:19461":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"13:444:141":{"crate_id":13,"path":["hashbrown","map","HashMap"],"kind":"struct"},"18:9031:38245":{"crate_id":18,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:9688:5270":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:7310:37530":{"crate_id":6,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"18:8494:19495":{"crate_id":18,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:12290:36568":{"crate_id":6,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"18:10822:19774":{"crate_id":18,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:20478:11955":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:8649:12606":{"crate_id":6,"path":["std","net","tcp","Incoming"],"kind":"struct"},"18:9071:38240":{"crate_id":18,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:48138:5261":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"5:6911:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:52137:12021":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:54063:10980":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"7:4489:12673":{"crate_id":7,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"18:10642:19767":{"crate_id":18,"path":["object","read","SymbolSection"],"kind":"enum"},"18:10721:19772":{"crate_id":18,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:49852:5259":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:2289:124":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"6:2399:12527":{"crate_id":6,"path":["std","fs","read_link"],"kind":"function"},"1:7000:5348":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"19:481:23608":{"crate_id":19,"path":["memchr","cow","CowBytes"],"kind":"struct"},"18:10062:19666":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"21:0:1918":{"crate_id":21,"path":["blobby"],"kind":"module"},"1:6758:11751":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:50434:11842":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:46586:26425":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"22:42:12290":{"crate_id":22,"path":["crypto_common","InnerUser"],"kind":"trait"},"1:2824:11621":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:6614:163":{"crate_id":6,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"6:10866:12579":{"crate_id":6,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"18:9805:19700":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:11956:202":{"crate_id":1,"path":["core","task","ready","Ready"],"kind":"struct"},"5:3614:12329":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:8069:127":{"crate_id":17,"path":["gimli","read","Error"],"kind":"enum"},"6:11466:12730":{"crate_id":6,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:2659:217":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"18:8981:19805":{"crate_id":18,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:8755:26419":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"23:123:12230":{"crate_id":23,"path":["generic_array","arr","AddLength"],"kind":"trait"},"1:56935:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:12436:5852":{"crate_id":1,"path":["core","core_arch","x86","cpuid","__cpuid"],"kind":"function"},"17:4689:19078":{"crate_id":17,"path":["gimli","constants","DwDsc"],"kind":"struct"},"24:1168:5363":{"crate_id":24,"path":["typenum","type_operators","Same"],"kind":"trait"},"24:1111:12247":{"crate_id":24,"path":["typenum","private","IsNotEqualPrivate"],"kind":"trait"},"6:12307:920":{"crate_id":6,"path":["std","never"],"kind":"primitive"},"1:9470:5262":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"18:12073:22608":{"crate_id":18,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:5456:11770":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"5:4234:23775":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"18:12176:22628":{"crate_id":18,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"7:519:13251":{"crate_id":7,"path":["libc","unix","rusage"],"kind":"struct"},"1:3946:26415":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:3159:11632":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"24:5780:5212":{"crate_id":24,"path":["typenum","int","NInt"],"kind":"struct"},"1:11790:11937":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"15:160:18422":{"crate_id":15,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:5657:12722":{"crate_id":6,"path":["std","process","Child"],"kind":"struct"},"1:8879:11370":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:50958:202":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"1:47071:11739":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"6:5095:12627":{"crate_id":6,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:2830:11622":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"4:160:1628":{"crate_id":4,"path":["digest","impl_oid_carrier"],"kind":"macro"},"6:11955:18448":{"crate_id":6,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:54078:10981":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:50104:11893":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:54025:10978":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:50773:11871":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"5:3671:12330":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"7:1500:14136":{"crate_id":7,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:4221:12612":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"24:1151:12264":{"crate_id":24,"path":["typenum","private","PrivateSquareRoot"],"kind":"trait"},"17:6496:19468":{"crate_id":17,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:50276:11895":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"7:554:13254":{"crate_id":7,"path":["libc","unix","iovec"],"kind":"struct"},"6:1938:12510":{"crate_id":6,"path":["std","error","Report"],"kind":"struct"},"17:2993:19525":{"crate_id":17,"path":["gimli","common","DwoId"],"kind":"struct"},"7:1636:14150":{"crate_id":7,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:2836:11623":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:0:1915":{"crate_id":17,"path":["gimli"],"kind":"module"},"6:6228:12740":{"crate_id":6,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"6:9263:12731":{"crate_id":6,"path":["std","process","ExitCode"],"kind":"struct"},"18:11315:20214":{"crate_id":18,"path":["object","elf","Vernaux"],"kind":"struct"},"1:7050:5678":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"23:163:5390":{"crate_id":23,"path":["generic_array","functional","FunctionalSequence"],"kind":"trait"},"17:2341:19501":{"crate_id":17,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:4215:12613":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:8704:12650":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:1672:1063":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"24:621:1776":{"crate_id":24,"path":["typenum","marker_traits","Unsigned"],"kind":"trait"},"18:12617:22821":{"crate_id":18,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"18:10520:19761":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"6:2257:12520":{"crate_id":6,"path":["std","fs","read_to_string"],"kind":"function"},"7:4629:16545":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"5:784:12317":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"18:12514:22818":{"crate_id":18,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"7:4706:16554":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"18:9764:19651":{"crate_id":18,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:8116:129":{"crate_id":6,"path":["std","fs","FileType"],"kind":"struct"},"6:8389:12537":{"crate_id":6,"path":["std","io","IoSlice"],"kind":"struct"},"5:6993:12322":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"0:0:1660":{"crate_id":0,"path":["sha2"],"kind":"module"},"17:7543:19382":{"crate_id":17,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:3138:5255":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"18:11149:20034":{"crate_id":18,"path":["object","elf","Rel32"],"kind":"struct"},"1:20276:12240":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:20200:11959":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"18:13203:23453":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:48657:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:3566:18454":{"crate_id":17,"path":["gimli","constants","DwSect"],"kind":"struct"},"7:7289:18169":{"crate_id":7,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"7:4427:16524":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:6931:26365":{"crate_id":6,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"18:12964:23377":{"crate_id":18,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"25:85:5301":{"crate_id":25,"path":["block_buffer","Lazy"],"kind":"struct"},"6:11616:12737":{"crate_id":6,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"19:0:1917":{"crate_id":19,"path":["memchr"],"kind":"module"},"7:4726:16556":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:52283:12001":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"18:9631:19595":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:10256:5280":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"6:11610:26095":{"crate_id":6,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:39366:12236":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:46977:11699":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"18:13413:23507":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"4:457:25774":{"crate_id":4,"path":["digest","core_api","ct_variable","NoOid"],"kind":"struct"},"18:1021:19584":{"crate_id":18,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:4532:11686":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"18:10625:19766":{"crate_id":18,"path":["object","read","SymbolIndex"],"kind":"struct"},"18:12948:23045":{"crate_id":18,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:1091:12340":{"crate_id":6,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:7428:11658":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"13:353:23713":{"crate_id":13,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:2909:127":{"crate_id":6,"path":["std","io","error","Error"],"kind":"struct"},"1:48315:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"24:1071:12245":{"crate_id":24,"path":["typenum","private","IsGreaterPrivate"],"kind":"trait"},"24:785:12269":{"crate_id":24,"path":["typenum","private","Trim"],"kind":"trait"},"18:8368:19782":{"crate_id":18,"path":["object","common","FileFlags"],"kind":"enum"},"7:7255:16694":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:50012:11884":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"5:7021:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:2575:127":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"17:2894:19524":{"crate_id":17,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:2326:186":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:5328:26360":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"10:649:18233":{"crate_id":10,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"6:12331:1509":{"crate_id":6,"path":["std","usize"],"kind":"primitive"},"1:49872:5272":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"24:6316:5209":{"crate_id":24,"path":["typenum","uint","UInt"],"kind":"struct"},"1:9577:5266":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:48543:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"7:5861:17220":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:7988:12491":{"crate_id":6,"path":["std","env","JoinPathsError"],"kind":"struct"},"18:12781:22928":{"crate_id":18,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:7329:19487":{"crate_id":17,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"5:2595:25773":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:47081:11740":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:49909:5277":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"7:6277:14077":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:9271:5261":{"crate_id":6,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"18:10245:19748":{"crate_id":18,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"5:6143:23758":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"19:80:23624":{"crate_id":19,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:598:12437":{"crate_id":6,"path":["std","thread","JoinHandle"],"kind":"struct"},"7:4659:16549":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:48391:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:681:12459":{"crate_id":6,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"18:8796:19801":{"crate_id":18,"path":["object","read","util","StringTable"],"kind":"struct"},"1:46811:11659":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"6:2907:207":{"crate_id":6,"path":["std","io","error","Result"],"kind":"typedef"},"24:1905:12253":{"crate_id":24,"path":["typenum","uint","SetBit"],"kind":"trait"},"1:2723:5673":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:58236:25897":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"4:0:1614":{"crate_id":4,"path":["digest"],"kind":"module"},"15:7:18422":{"crate_id":15,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:1636:577":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"21:92:12222":{"crate_id":21,"path":["blobby","Blob4Iterator"],"kind":"struct"},"1:9104:23722":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"7:4605:16542":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:3153:134":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"18:11014:19927":{"crate_id":18,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:51061:11944":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:2678:5305":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:46898:11693":{"crate_id":1,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"18:9681:19649":{"crate_id":18,"path":["object","read","elf","note","Note"],"kind":"struct"},"5:7068:12355":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:11298:36563":{"crate_id":6,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:6330:19464":{"crate_id":17,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"24:654:5318":{"crate_id":24,"path":["typenum","marker_traits","PowerOfTwo"],"kind":"trait"},"1:53507:11996":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"18:11034:19928":{"crate_id":18,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:53695:12000":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"13:2080:12343":{"crate_id":13,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:11316:12731":{"crate_id":6,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:7739:11806":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:8373:11751":{"crate_id":6,"path":["std","io","util","Empty"],"kind":"struct"},"19:491:25932":{"crate_id":19,"path":["memchr","cow","Imp"],"kind":"struct"},"17:6241:19462":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:47545:11752":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:3993:11663":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"7:1654:14152":{"crate_id":7,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"7:5605:17179":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:7815:23744":{"crate_id":6,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"7:4200:16500":{"crate_id":7,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"18:12609:22820":{"crate_id":18,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:6795:12767":{"crate_id":6,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:2484:147":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:8619:11152":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:5517:187":{"crate_id":6,"path":["std","path","Path"],"kind":"struct"},"18:9930:19681":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:2389:19503":{"crate_id":17,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"7:5782:17192":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"7:5835:17219":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:53959:5781":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:8660:12595":{"crate_id":6,"path":["std","net","Shutdown"],"kind":"enum"},"21:46:127":{"crate_id":21,"path":["blobby","Error"],"kind":"enum"},"18:11087:19996":{"crate_id":18,"path":["object","elf","Sym32"],"kind":"struct"},"17:6676:19386":{"crate_id":17,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"5:3863:12320":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:9293:12742":{"crate_id":6,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:887:5261":{"crate_id":6,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"13:815:12467":{"crate_id":13,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"18:8339:19798":{"crate_id":18,"path":["object","common","RelocationEncoding"],"kind":"enum"},"7:487:13246":{"crate_id":7,"path":["libc","unix","group"],"kind":"struct"},"5:1357:5261":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"5:273:23758":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:2777:11610":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:6052:19458":{"crate_id":17,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"7:5749:25488":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:51752:11992":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"5:5556:12320":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"5:6858:11086":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:2727:19517":{"crate_id":17,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:48429:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"24:2808:1777":{"crate_id":24,"path":["typenum","generated","consts","U128"],"kind":"typedef"},"17:7603:19406":{"crate_id":17,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"7:592:13260":{"crate_id":7,"path":["libc","unix","tms"],"kind":"struct"},"6:0:1352":{"crate_id":6,"path":["std"],"kind":"module"},"18:11708:22582":{"crate_id":18,"path":["object","macho","Fvmlib"],"kind":"struct"},"18:9820:19701":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:47152:11769":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:5720:12726":{"crate_id":6,"path":["std","process","Command"],"kind":"struct"},"17:6146:19428":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:2793:11613":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"5:6443:12415":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"18:10360:19716":{"crate_id":18,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"18:13126:23423":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"18:12485:22817":{"crate_id":18,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"18:9909:19660":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:5411:19433":{"crate_id":17,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"19:609:26254":{"crate_id":19,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"18:12550:22819":{"crate_id":18,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"19:736:23604":{"crate_id":19,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"18:10455:19745":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"5:5490:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"5:219:12312":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:8086:12517":{"crate_id":6,"path":["std","fs","OpenOptions"],"kind":"struct"},"13:834:12469":{"crate_id":13,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"18:3249:19687":{"crate_id":18,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:3189:11637":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:4119:11162":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"6:8806:12692":{"crate_id":6,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"19:582:11046":{"crate_id":19,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:53941:11988":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:3197:12579":{"crate_id":6,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:10946:5282":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"18:12850:22974":{"crate_id":18,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:51836:12017":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:2749:19518":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:1632:12352":{"crate_id":6,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:2765:11609":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"5:6849:12301":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"6:3491:12548":{"crate_id":6,"path":["std","io","BufRead"],"kind":"trait"},"18:11939:22599":{"crate_id":18,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:5447:19435":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:48353:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:2255:105":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"18:10296:19719":{"crate_id":18,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"18:8137:19780":{"crate_id":18,"path":["object","common","BinaryFormat"],"kind":"enum"},"7:567:13256":{"crate_id":7,"path":["libc","unix","winsize"],"kind":"struct"},"24:6192:5316":{"crate_id":24,"path":["typenum","array","TArr"],"kind":"struct"},"1:11147:11845":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:2320:179":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"6:8076:12514":{"crate_id":6,"path":["std","fs","Metadata"],"kind":"struct"},"24:1016:12282":{"crate_id":24,"path":["typenum","private","PrivateMax"],"kind":"trait"},"17:3716:18513":{"crate_id":17,"path":["gimli","constants","DwChildren"],"kind":"struct"},"5:1367:5262":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"13:274:26067":{"crate_id":13,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:48817:11149":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:11083:11435":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"7:575:13257":{"crate_id":7,"path":["libc","unix","linger"],"kind":"struct"},"1:50550:11854":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"18:13404:23504":{"crate_id":18,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:8422:11776":{"crate_id":6,"path":["std","io","Chain"],"kind":"struct"},"1:50222:11897":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"7:4212:16501":{"crate_id":7,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:50649:11859":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"18:0:1916":{"crate_id":18,"path":["object"],"kind":"module"},"18:9526:19598":{"crate_id":18,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:4:991":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"18:11828:22591":{"crate_id":18,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:9538:5282":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:7426:19405":{"crate_id":17,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:6090:12769":{"crate_id":6,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:2605:19512":{"crate_id":17,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"10:920:18297":{"crate_id":10,"path":["miniz_oxide","MZError"],"kind":"enum"},"13:777:18410":{"crate_id":13,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"17:6359:19465":{"crate_id":17,"path":["gimli","read","line","LineRows"],"kind":"struct"},"24:1279:5323":{"crate_id":24,"path":["typenum","type_operators","ToInt"],"kind":"trait"},"7:608:13262":{"crate_id":7,"path":["libc","unix","protoent"],"kind":"struct"},"6:944:12320":{"crate_id":6,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"6:8956:12711":{"crate_id":6,"path":["std","path","Components"],"kind":"struct"},"7:6269:13167":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:50976:192":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"6:5072:12633":{"crate_id":6,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"24:998:12239":{"crate_id":24,"path":["typenum","private","PrivateRem"],"kind":"trait"},"23:403:1822":{"crate_id":23,"path":["generic_array","GenericArray"],"kind":"struct"},"18:12134:22612":{"crate_id":18,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"6:10504:26390":{"crate_id":6,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"18:9488:19599":{"crate_id":18,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"6:545:12428":{"crate_id":6,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:3235:12581":{"crate_id":6,"path":["std","io","stdio","Stdout"],"kind":"struct"},"7:6329:12685":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:11393:23748":{"crate_id":6,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"4:328:1769":{"crate_id":4,"path":["digest","core_api","Buffer"],"kind":"typedef"},"5:6864:12319":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"18:12060:22607":{"crate_id":18,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:21211:25782":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:11795:12608":{"crate_id":6,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"7:4257:16506":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:7870:36643":{"crate_id":6,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"18:10332:19750":{"crate_id":18,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:11717:11936":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"7:1511:14138":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:50639:11858":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:8874:11369":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"7:4745:16558":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:51049:11947":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:12333:13":{"crate_id":6,"path":["std","fn"],"kind":"primitive"},"18:10670:19769":{"crate_id":18,"path":["object","read","SymbolMap"],"kind":"struct"},"1:5623:29061":{"crate_id":1,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"7:4598:16541":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:6609:11748":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:29616:27749":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"5:4660:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"18:242:26258":{"crate_id":18,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:6298:19407":{"crate_id":17,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"7:4379:16521":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:51640:25886":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"24:1221:5365":{"crate_id":24,"path":["typenum","type_operators","IsEqual"],"kind":"trait"},"1:51660:25887":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:48290:180":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:50346:11898":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"13:1518:18415":{"crate_id":13,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:9394:26381":{"crate_id":6,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"18:12237:22680":{"crate_id":18,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"7:4231:16503":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"24:1091:12246":{"crate_id":24,"path":["typenum","private","IsLessOrEqualPrivate"],"kind":"trait"},"7:5625:17180":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"18:9274:19561":{"crate_id":18,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"23:295:5393":{"crate_id":23,"path":["generic_array","sequence","Lengthen"],"kind":"trait"},"6:11691:26101":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"7:5727:17188":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:10690:11881":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:11143:129":{"crate_id":6,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"6:8751:12685":{"crate_id":6,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:4307:12618":{"crate_id":6,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:12435:5853":{"crate_id":1,"path":["core","core_arch","x86","cpuid","__cpuid_count"],"kind":"function"},"13:60:38210":{"crate_id":13,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"18:9751:19623":{"crate_id":18,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:2671:108":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:50158:5267":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:4590:12649":{"crate_id":6,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"18:9250:19559":{"crate_id":18,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:0:486":{"crate_id":1,"path":["core"],"kind":"module"},"7:4191:16499":{"crate_id":7,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"25:0:1764":{"crate_id":25,"path":["block_buffer"],"kind":"module"},"24:835:12238":{"crate_id":24,"path":["typenum","private","PrivateIntegerAdd"],"kind":"trait"},"18:10088:19665":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"6:8237:12573":{"crate_id":6,"path":["std","io","error","ErrorKind"],"kind":"enum"},"13:2053:12340":{"crate_id":13,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:6270:19381":{"crate_id":17,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:46944:11696":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"17:6690:19387":{"crate_id":17,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:47323:11773":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"19:766:23606":{"crate_id":19,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:4817:19106":{"crate_id":17,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:2923:5675":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"18:11536:19707":{"crate_id":18,"path":["object","macho","FatArch32"],"kind":"struct"},"1:2978:11628":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"6:6691:12763":{"crate_id":6,"path":["std","sync","once","OnceState"],"kind":"struct"},"13:1832:5261":{"crate_id":13,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:2232:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"18:12118:22611":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:29574:5383":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:678:12457":{"crate_id":6,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:7249:19480":{"crate_id":17,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"13:119:23709":{"crate_id":13,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:6790:19474":{"crate_id":17,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"6:7880:12422":{"crate_id":6,"path":["std","thread","Builder"],"kind":"struct"},"6:2401:12528":{"crate_id":6,"path":["std","fs","canonicalize"],"kind":"function"},"7:6509:17606":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:8380:12584":{"crate_id":6,"path":["std","io","util","Sink"],"kind":"struct"},"1:29540:5384":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:29355:11413":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"17:6735:19402":{"crate_id":17,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:39370:11601":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"5:1248:12342":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:2367:19502":{"crate_id":17,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"5:1699:12330":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"24:933:12272":{"crate_id":24,"path":["typenum","private","PrivateSetBit"],"kind":"trait"},"17:5996:19455":{"crate_id":17,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"0:101:1655":{"crate_id":0,"path":["sha2","Sha512_256"],"kind":"typedef"},"17:7278:19482":{"crate_id":17,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:21733:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"6:12330:774":{"crate_id":6,"path":["std","isize"],"kind":"primitive"},"10:505:18395":{"crate_id":10,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:5494:19438":{"crate_id":17,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:20048:32010":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:4342:11018":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:4408:37535":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:50204:11896":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"18:12955:23057":{"crate_id":18,"path":["object","pe","ImageRelocation"],"kind":"struct"},"18:12748:22883":{"crate_id":18,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:3599:18462":{"crate_id":17,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"5:7109:12380":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"6:3484:12540":{"crate_id":6,"path":["std","io","Seek"],"kind":"trait"},"24:1206:5321":{"crate_id":24,"path":["typenum","type_operators","Max"],"kind":"trait"},"1:49862:5271":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"7:4461:16527":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"5:3479:5261":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"7:6479:17604":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:3958:26416":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"18:8871:19803":{"crate_id":18,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"7:4449:16526":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:2261:19498":{"crate_id":17,"path":["gimli","common","Format"],"kind":"enum"},"23:362:5306":{"crate_id":23,"path":["generic_array","ArrayLength"],"kind":"trait"},"18:13168:23449":{"crate_id":18,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:12320:730":{"crate_id":6,"path":["std","i8"],"kind":"primitive"},"1:21392:11441":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:4606:19062":{"crate_id":17,"path":["gimli","constants","DwCc"],"kind":"struct"},"22:16:183":{"crate_id":22,"path":["crypto_common","Output"],"kind":"typedef"},"7:501:13248":{"crate_id":7,"path":["libc","unix","timeval"],"kind":"struct"},"7:4126:16494":{"crate_id":7,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"18:11106:19997":{"crate_id":18,"path":["object","elf","Sym64"],"kind":"struct"},"1:50785:11874":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"7:581:13258":{"crate_id":7,"path":["libc","unix","sigval"],"kind":"struct"},"5:3110:12352":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"6:7972:12484":{"crate_id":6,"path":["std","env","VarError"],"kind":"enum"},"6:7758:26401":{"crate_id":6,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"18:9671:19615":{"crate_id":18,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"18:11356:20229":{"crate_id":18,"path":["object","elf","HashHeader"],"kind":"struct"},"18:11639:22516":{"crate_id":18,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"18:11174:20036":{"crate_id":18,"path":["object","elf","Rel64"],"kind":"struct"},"18:9293:19583":{"crate_id":18,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"18:12730:22881":{"crate_id":18,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"6:8157:12328":{"crate_id":6,"path":["std","io","cursor","Cursor"],"kind":"struct"},"7:7249:16693":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"18:1903:19636":{"crate_id":18,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:1826:12477":{"crate_id":6,"path":["std","env","Vars"],"kind":"struct"},"24:615:5330":{"crate_id":24,"path":["typenum","marker_traits","Bit"],"kind":"trait"},"18:12756:22925":{"crate_id":18,"path":["object","pe","Guid"],"kind":"struct"},"1:11704:135":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"7:5772:17191":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:7211:19371":{"crate_id":17,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:11478:36962":{"crate_id":6,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:8014:19424":{"crate_id":17,"path":["gimli","read","value","Value"],"kind":"enum"},"5:6903:11086":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:7637:19394":{"crate_id":17,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"6:719:12461":{"crate_id":6,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"6:4974:12683":{"crate_id":6,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:49613:5290":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:7557:19383":{"crate_id":17,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:4196:11668":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:21137:26125":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:2383:11570":{"crate_id":6,"path":["std","fs","metadata"],"kind":"function"},"24:1051:12244":{"crate_id":24,"path":["typenum","private","IsEqualPrivate"],"kind":"trait"},"6:686:12460":{"crate_id":6,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"18:10221:19746":{"crate_id":18,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"18:11217:20039":{"crate_id":18,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"13:0:1911":{"crate_id":13,"path":["hashbrown"],"kind":"module"},"18:9433:19572":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:52709:12019":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"18:1962:19620":{"crate_id":18,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"5:1378:11086":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"12:44:18400":{"crate_id":12,"path":["adler","Adler32"],"kind":"struct"},"4:358:1615":{"crate_id":4,"path":["digest","digest","Digest"],"kind":"trait"},"24:1272:5346":{"crate_id":24,"path":["typenum","type_operators","SquareRoot"],"kind":"trait"},"7:0:801":{"crate_id":7,"path":["libc"],"kind":"module"},"1:50614:11856":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:49108:109":{"crate_id":1,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"5:6097:12320":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"18:10973:19814":{"crate_id":18,"path":["object","elf","FileHeader64"],"kind":"struct"},"24:1131:12248":{"crate_id":24,"path":["typenum","private","IsGreaterOrEqualPrivate"],"kind":"trait"},"18:9577:19603":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:8914:12710":{"crate_id":6,"path":["std","path","Component"],"kind":"enum"},"1:3898:11656":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"6:6327:23727":{"crate_id":6,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"18:11787:22588":{"crate_id":18,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"18:13024:23408":{"crate_id":18,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:46570:11604":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"25:22:12240":{"crate_id":25,"path":["block_buffer","sealed","Sealed"],"kind":"trait"},"7:5741:17190":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"18:11774:22587":{"crate_id":18,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:4297:18966":{"crate_id":17,"path":["gimli","constants","DwLle"],"kind":"struct"},"6:10869:12581":{"crate_id":6,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"5:6291:23758":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:5761:19448":{"crate_id":17,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"5:1964:12329":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:7956:19392":{"crate_id":17,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"18:13572:23550":{"crate_id":18,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"18:9501:19581":{"crate_id":18,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:4786:19093":{"crate_id":17,"path":["gimli","constants","DwLns"],"kind":"struct"},"24:814:12257":{"crate_id":24,"path":["typenum","private","PrivateAnd"],"kind":"trait"},"18:10949:19813":{"crate_id":18,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:8617:191":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"7:7220:16689":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"7:1532:14141":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"15:202:12383":{"crate_id":15,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:6593:19470":{"crate_id":17,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"22:36:12288":{"crate_id":22,"path":["crypto_common","KeySizeUser"],"kind":"trait"},"17:5664:19445":{"crate_id":17,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"18:9857:19682":{"crate_id":18,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"7:6352:14104":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"18:13366:23500":{"crate_id":18,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:5839:19452":{"crate_id":17,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:46579:19424":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"5:3236:12330":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"6:2253:11585":{"crate_id":6,"path":["std","fs","read"],"kind":"function"},"24:5746:5211":{"crate_id":24,"path":["typenum","int","PInt"],"kind":"struct"},"17:5541:19441":{"crate_id":17,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"6:574:12435":{"crate_id":6,"path":["std","thread","Packet"],"kind":"struct"},"17:7909:19397":{"crate_id":17,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"4:418:1921":{"crate_id":4,"path":["digest","Update"],"kind":"trait"},"1:7432:11765":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"7:4611:16543":{"crate_id":7,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:4258:11673":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"7:4361:16519":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"18:9844:19659":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:2848:11626":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:3174:32095":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:931:12345":{"crate_id":6,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:47299:11788":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:2842:19522":{"crate_id":17,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"7:7279:18168":{"crate_id":7,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:20237:11960":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:25239:11437":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:3075:5256":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:6862:12772":{"crate_id":6,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:46292:11639":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:12332:1099":{"crate_id":6,"path":["std","reference"],"kind":"primitive"},"18:10490:19759":{"crate_id":18,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:1825:11598":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:11594:23750":{"crate_id":6,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"4:291:5231":{"crate_id":4,"path":["digest","core_api","wrapper","CoreProxy"],"kind":"trait"},"24:1231:5366":{"crate_id":24,"path":["typenum","type_operators","IsGreater"],"kind":"trait"},"1:47334:11790":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:47143:11768":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"7:6375:14078":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"5:1413:12346":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:56526:12028":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:46552:11631":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"7:5504:17171":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"18:13506:23541":{"crate_id":18,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:7949:12458":{"crate_id":6,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:4849:19113":{"crate_id":17,"path":["gimli","constants","DwLnct"],"kind":"struct"},"5:1219:12343":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"13:1138:12342":{"crate_id":13,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"6:7885:12432":{"crate_id":6,"path":["std","thread","ThreadId"],"kind":"struct"},"1:3606:11086":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"24:1153:12261":{"crate_id":24,"path":["typenum","private","PrivateLogarithm2"],"kind":"trait"},"18:13354:23465":{"crate_id":18,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"5:2046:12428":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"22:46:1766":{"crate_id":22,"path":["crypto_common","AlgorithmName"],"kind":"trait"},"13:985:12340":{"crate_id":13,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:47024:11743":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"11:0:1909":{"crate_id":11,"path":["rustc_std_workspace_alloc"],"kind":"module"},"13:1681:143":{"crate_id":13,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:20445:12240":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"18:9155:19807":{"crate_id":18,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:5614:25972":{"crate_id":17,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:47283:11787":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:48505:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:4446:12646":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"6:8103:12519":{"crate_id":6,"path":["std","fs","Permissions"],"kind":"struct"},"1:2926:5254":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:8697:12601":{"crate_id":6,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:7747:19796":{"crate_id":6,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:3466:11143":{"crate_id":6,"path":["std","io","Write"],"kind":"trait"},"7:4621:16544":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"6:10911:12434":{"crate_id":6,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"6:11286:12728":{"crate_id":6,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"13:300:26070":{"crate_id":13,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"13:646:5262":{"crate_id":13,"path":["hashbrown","map","IterMut"],"kind":"struct"},"6:7965:12473":{"crate_id":6,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"18:9712:19650":{"crate_id":18,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"18:13580:23552":{"crate_id":18,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:51706:12012":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"6:4430:12644":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"18:967:19579":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"5:6029:23783":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"17:5981:26012":{"crate_id":17,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"24:642:5350":{"crate_id":24,"path":["typenum","marker_traits","Integer"],"kind":"trait"},"17:7452:195":{"crate_id":17,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:5510:19439":{"crate_id":17,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"18:9831:19702":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:7041:149":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"6:6054:12761":{"crate_id":6,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"7:5733:17189":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:4321:12620":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"24:1198:5324":{"crate_id":24,"path":["typenum","type_operators","PartialDiv"],"kind":"trait"},"1:1760:11595":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"15:40:19815":{"crate_id":15,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"7:5720:17187":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"7:560:13255":{"crate_id":7,"path":["libc","unix","pollfd"],"kind":"struct"},"7:4307:16513":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:6668:24672":{"crate_id":17,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"18:12836:22972":{"crate_id":18,"path":["object","pe","ImageSymbol"],"kind":"struct"},"7:1678:14154":{"crate_id":7,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:2771:19519":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"6:12150:23757":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"7:4506:16530":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:6877:19475":{"crate_id":17,"path":["gimli","read","op","DieReference"],"kind":"enum"},"13:1555:18417":{"crate_id":13,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:51937:11997":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"24:1202:5320":{"crate_id":24,"path":["typenum","type_operators","Min"],"kind":"trait"},"5:7192:12411":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:6517:18436":{"crate_id":17,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"4:294:12240":{"crate_id":4,"path":["digest","core_api","wrapper","sealed","Sealed"],"kind":"trait"},"5:1434:12348":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:2736:11043":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"6:3427:12538":{"crate_id":6,"path":["std","io","IoSliceMut"],"kind":"struct"},"24:844:12262":{"crate_id":24,"path":["typenum","private","PrivatePow"],"kind":"trait"},"18:11485:22404":{"crate_id":18,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:2494:234":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"6:2248:128":{"crate_id":6,"path":["std","fs","File"],"kind":"struct"},"1:14:1885":{"crate_id":1,"path":["core","write"],"kind":"macro"},"17:2320:19365":{"crate_id":17,"path":["gimli","common","Register"],"kind":"struct"},"17:2411:19504":{"crate_id":17,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"18:10159:19669":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"21:66:12220":{"crate_id":21,"path":["blobby","Blob2Iterator"],"kind":"struct"},"17:6345:19384":{"crate_id":17,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:11098:26087":{"crate_id":6,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"18:13176:23450":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"18:11661:22522":{"crate_id":18,"path":["object","macho","Section32"],"kind":"struct"},"1:49409:26162":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"24:6172:5315":{"crate_id":24,"path":["typenum","array","ATerm"],"kind":"struct"},"1:21319:27763":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:8552:11143":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"6:9287:11086":{"crate_id":6,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"18:13071:23415":{"crate_id":18,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"19:652:23909":{"crate_id":19,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"18:9328:19576":{"crate_id":18,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:56883:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:3026:19527":{"crate_id":17,"path":["gimli","arch","Arm"],"kind":"struct"},"6:353:12447":{"crate_id":6,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:3372:11602":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"1:52451:25892":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"18:10182:19667":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:2853:11627":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:51955:25889":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:50857:11914":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"18:10350:19751":{"crate_id":18,"path":["object","read","pe","export","Export"],"kind":"struct"},"7:5534:17174":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"7:4565:16537":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:20885:5257":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:10911:11904":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"7:600:13261":{"crate_id":7,"path":["libc","unix","servent"],"kind":"struct"},"1:21340:27731":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"5:5080:12373":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"5:6881:12321":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"5:3118:12353":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:47362:11792":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:48291:205":{"crate_id":1,"path":["core","sync","atomic","Ordering","Relaxed"],"kind":"foreign_type"},"17:7497:19385":{"crate_id":17,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:11523:25762":{"crate_id":6,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"18:10466:19757":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:2930:19366":{"crate_id":17,"path":["gimli","common","SectionId"],"kind":"enum"},"1:49594:11837":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"15:31:18422":{"crate_id":15,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:9757:5268":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:11153:118":{"crate_id":6,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:22429:11436":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:48146:5262":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"18:8510:19493":{"crate_id":18,"path":["object","endian","BigEndian"],"kind":"struct"},"10:33:18279":{"crate_id":10,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"1:52185:12006":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:2487:19507":{"crate_id":17,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"22:22:1768":{"crate_id":22,"path":["crypto_common","BlockSizeUser"],"kind":"trait"},"17:6316:19408":{"crate_id":17,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:20366:11955":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"18:562:19796":{"crate_id":18,"path":["object","read","any","Symbol"],"kind":"struct"},"1:47348:11791":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:8966:5261":{"crate_id":6,"path":["std","path","Iter"],"kind":"struct"},"1:50054:5265":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:50845:11913":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"18:8526:19539":{"crate_id":18,"path":["object","endian","U16Bytes"],"kind":"struct"},"7:4206:16345":{"crate_id":7,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:10895:11902":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"18:9644:19594":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"18:247:26259":{"crate_id":18,"path":["object","read","util","DebugLen"],"kind":"struct"},"5:5331:12414":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"5:2867:25772":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"16:175:18439":{"crate_id":16,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:6842:26055":{"crate_id":17,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:5184:19497":{"crate_id":17,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:2442:5985":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:2441:12240":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:9447:26386":{"crate_id":6,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"6:5018:12632":{"crate_id":6,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"18:12638:22875":{"crate_id":18,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:9771:5264":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:47181:11779":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"7:1562:14144":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:2300:19500":{"crate_id":17,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:53979:10975":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"18:10506:19723":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"5:4156:242":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"10:709:5939":{"crate_id":10,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:3319:12566":{"crate_id":6,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"15:0:1913":{"crate_id":15,"path":["rustc_demangle"],"kind":"module"},"1:51730:12004":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"18:11684:22523":{"crate_id":18,"path":["object","macho","Section64"],"kind":"struct"},"1:1643:11033":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:8825:140":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"5:3893:23758":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"7:4102:16492":{"crate_id":7,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:52975:12002":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"18:12198:22677":{"crate_id":18,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:9474:36567":{"crate_id":6,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:7166:19478":{"crate_id":17,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:50793:11876":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:46393:197":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"6:4438:12645":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:48078:178":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"19:538:23612":{"crate_id":19,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:46475:198":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"5:5943:12394":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:50030:11887":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:9086:23803":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"7:1701:14157":{"crate_id":7,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"7:1608:14149":{"crate_id":7,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:2785:11616":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:50805:11911":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"19:507:23909":{"crate_id":19,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:2929:5676":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"13:632:5261":{"crate_id":13,"path":["hashbrown","map","Iter"],"kind":"struct"},"5:3559:23758":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"7:4810:16564":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:7155:156":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:51011:11939":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:52899:11995":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"18:3125:19668":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:11542:12750":{"crate_id":6,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"1:1919:11599":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:49057:67":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"18:12349:22754":{"crate_id":18,"path":["object","macho","RelocationInfo"],"kind":"struct"},"13:861:12471":{"crate_id":13,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:51885:12005":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:910:11086":{"crate_id":6,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:53968:10974":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"13:1845:12330":{"crate_id":13,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"18:9778:19624":{"crate_id":18,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:2840:11624":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"18:11330:20215":{"crate_id":18,"path":["object","elf","NoteHeader32"],"kind":"struct"},"7:1695:14156":{"crate_id":7,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:52482:25893":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"18:13047:23413":{"crate_id":18,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"7:5472:17168":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"7:6500:17605":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"4:484:5230":{"crate_id":4,"path":["digest","core_api","rt_variable","RtVariableCoreWrapper"],"kind":"struct"},"1:47121:11767":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:8081:12515":{"crate_id":6,"path":["std","fs","ReadDir"],"kind":"struct"},"6:12321:727":{"crate_id":6,"path":["std","i16"],"kind":"primitive"},"25:77:1765":{"crate_id":25,"path":["block_buffer","Eager"],"kind":"struct"},"17:6059:38232":{"crate_id":17,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:48129:11085":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"5:7175:12330":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"6:4977:12656":{"crate_id":6,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"18:8055:19779":{"crate_id":18,"path":["object","common","Architecture"],"kind":"enum"},"6:8232:26375":{"crate_id":6,"path":["std","io","error","Custom"],"kind":"struct"},"18:10546:19763":{"crate_id":18,"path":["object","read","FileKind"],"kind":"enum"},"13:1836:11086":{"crate_id":13,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"5:3934:5262":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:50024:11888":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"17:6567:19398":{"crate_id":17,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"24:5724:5214":{"crate_id":24,"path":["typenum","bit","B1"],"kind":"struct"},"18:8241:19793":{"crate_id":18,"path":["object","common","SymbolKind"],"kind":"enum"},"18:11734:22584":{"crate_id":18,"path":["object","macho","Dylib"],"kind":"struct"},"1:50318:11891":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"18:10845:19756":{"crate_id":18,"path":["object","read","Relocation"],"kind":"struct"},"20:0:1007":{"crate_id":20,"path":["panic_unwind"],"kind":"module"},"6:5585:119":{"crate_id":6,"path":["std","path","Display"],"kind":"struct"},"6:5691:12724":{"crate_id":6,"path":["std","process","ChildStdout"],"kind":"struct"},"7:5523:17173":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:2666:5672":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"18:9539:19597":{"crate_id":18,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"7:513:13250":{"crate_id":7,"path":["libc","unix","rlimit"],"kind":"struct"},"6:12279:12463":{"crate_id":6,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"7:1714:14158":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:46433:196":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"7:4294:16511":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:12306:367":{"crate_id":6,"path":["std","bool"],"kind":"primitive"},"5:4876:12366":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:2589:23722":{"crate_id":6,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"4:341:1774":{"crate_id":4,"path":["digest","core_api","VariableOutputCore"],"kind":"trait"},"7:4286:16510":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"24:6294:125":{"crate_id":24,"path":["typenum","Equal"],"kind":"struct"},"6:8600:12601":{"crate_id":6,"path":["std","net","socket_addr","SocketAddr"],"kind":"enum"},"17:3632:18471":{"crate_id":17,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:46915:11659":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"7:7166:18140":{"crate_id":7,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"18:11951:22600":{"crate_id":18,"path":["object","macho","DylibModule32"],"kind":"struct"},"23:260:5391":{"crate_id":23,"path":["generic_array","sequence","GenericSequence"],"kind":"trait"},"10:896:18296":{"crate_id":10,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"7:1643:14151":{"crate_id":7,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:10835:11903":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:6903:19476":{"crate_id":17,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:2478:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"0:102:1657":{"crate_id":0,"path":["sha2","Sha384"],"kind":"typedef"},"5:5681:12389":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:11914:106":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"17:7288:19483":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:8458:152":{"crate_id":6,"path":["std","net","ip_addr","IpAddr"],"kind":"enum"},"1:3360:11603":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"5:3084:12351":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:8169:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"18:9317:19577":{"crate_id":18,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"18:12046:22606":{"crate_id":18,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:8498:12598":{"crate_id":6,"path":["std","net","ip_addr","Ipv6Addr"],"kind":"struct"},"7:5713:17186":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"7:4540:16534":{"crate_id":7,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:20728:11956":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"17:6123:19378":{"crate_id":17,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:7659:19377":{"crate_id":17,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"7:4417:16523":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:9650:5269":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"19:690:23600":{"crate_id":19,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"8:0:1499":{"crate_id":8,"path":["unwind"],"kind":"module"},"1:4695:32928":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"6:11273:12491":{"crate_id":6,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"7:4644:16547":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"18:13492:23535":{"crate_id":18,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"4:383:1933":{"crate_id":4,"path":["digest","digest","DynDigest"],"kind":"trait"},"18:13100:23418":{"crate_id":18,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"24:1261:5335":{"crate_id":24,"path":["typenum","type_operators","IsGreaterOrEqual"],"kind":"trait"},"1:2284:185":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:9546:12750":{"crate_id":6,"path":["std","time","Instant"],"kind":"struct"},"13:2190:38215":{"crate_id":13,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"10:863:18295":{"crate_id":10,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:4749:12656":{"crate_id":6,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"7:1505:14137":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:7309:19485":{"crate_id":17,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:5374:19379":{"crate_id":17,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:6562:27945":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"18:13518:23542":{"crate_id":18,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:50456:11846":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"18:13327:23463":{"crate_id":18,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:49178:11147":{"crate_id":1,"path":["core","fmt","FlagV1"],"kind":"enum"},"17:7435:19421":{"crate_id":17,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:6200:19460":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:2282:19499":{"crate_id":17,"path":["gimli","common","Encoding"],"kind":"struct"},"5:5665:12366":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"6:9249:12730":{"crate_id":6,"path":["std","process","ExitStatusError"],"kind":"struct"},"13:1085:18413":{"crate_id":13,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:8996:11821":{"crate_id":1,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"1:50801:11878":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:8839:144":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"6:5834:12732":{"crate_id":6,"path":["std","process","exit"],"kind":"function"},"1:49783:26430":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:5122:19145":{"crate_id":17,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:2487:132":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"6:5180:12680":{"crate_id":6,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"18:13059:23414":{"crate_id":18,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:21243:25783":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:1967:12511":{"crate_id":6,"path":["std","error","Indented"],"kind":"struct"},"18:8822:38238":{"crate_id":18,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:48196:11803":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:5671:12723":{"crate_id":6,"path":["std","process","ChildStdin"],"kind":"struct"},"24:1211:5227":{"crate_id":24,"path":["typenum","type_operators","IsLess"],"kind":"trait"},"17:5628:19444":{"crate_id":17,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:49081:130":{"crate_id":1,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"1:4674:11738":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"6:4251:12614":{"crate_id":6,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"18:12164:22614":{"crate_id":18,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"10:977:18298":{"crate_id":10,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"5:5076:5395":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"7:4551:16535":{"crate_id":7,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:6028:12760":{"crate_id":6,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"7:5510:17172":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"5:288:1930":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"23:346:5395":{"crate_id":23,"path":["generic_array","sequence","Concat"],"kind":"trait"},"3:0:1905":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"24:5702:5213":{"crate_id":24,"path":["typenum","bit","B0"],"kind":"struct"},"1:7004:11766":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:6171:19429":{"crate_id":17,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"13:853:12470":{"crate_id":13,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:5472:19437":{"crate_id":17,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:2669:223":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:7942:19492":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:53865:12003":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:6650:26365":{"crate_id":6,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:2481:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:7845:11841":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:3457:19531":{"crate_id":17,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:49944:5276":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:8621:11153":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"15:187:18432":{"crate_id":15,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:21799:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"18:11436:22403":{"crate_id":18,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:7298:19484":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"18:487:19795":{"crate_id":18,"path":["object","read","any","Comdat"],"kind":"struct"},"1:51814:12013":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:8562:131":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"17:4357:18983":{"crate_id":17,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:7740:11805":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:12311:1025":{"crate_id":6,"path":["std","pointer"],"kind":"primitive"},"1:21302:25788":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"5:1454:12349":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"7:6545:17609":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:9119:23808":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:7117:38233":{"crate_id":17,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"6:4510:12648":{"crate_id":6,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"24:612:5319":{"crate_id":24,"path":["typenum","marker_traits","Zero"],"kind":"trait"},"6:12329:1452":{"crate_id":6,"path":["std","u128"],"kind":"primitive"},"7:4804:16563":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"7:4515:16531":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"7:5672:17182":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:1737:11596":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:8340:12536":{"crate_id":6,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"17:5815:19451":{"crate_id":17,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"7:5876:17221":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:48205:11808":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:2960:11635":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"6:9380:12762":{"crate_id":6,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:29602:67":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"12:36:24887":{"crate_id":12,"path":["adler","algo","U32X4"],"kind":"struct"},"1:47199:26149":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:2868:19523":{"crate_id":17,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:4574:19057":{"crate_id":17,"path":["gimli","constants","DwId"],"kind":"struct"},"6:979:12468":{"crate_id":6,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"6:12319:631":{"crate_id":6,"path":["std","f64"],"kind":"primitive"},"18:8881:38236":{"crate_id":18,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"7:4329:16515":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"18:12860:22975":{"crate_id":18,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:20016:32065":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"7:4768:16560":{"crate_id":7,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:20476:11957":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:11122:11840":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"24:989:12237":{"crate_id":24,"path":["typenum","private","PrivateDivInt"],"kind":"trait"},"6:411:162":{"crate_id":6,"path":["std","thread","local","LocalKey"],"kind":"struct"},"18:11054:19988":{"crate_id":18,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"7:4559:16536":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"18:12630:22873":{"crate_id":18,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"18:10921:19812":{"crate_id":18,"path":["object","archive","Header"],"kind":"struct"},"24:1190:5317":{"crate_id":24,"path":["typenum","type_operators","Cmp"],"kind":"trait"},"1:8607:119":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"23:317:5265":{"crate_id":23,"path":["generic_array","sequence","Split"],"kind":"trait"},"6:9845:23746":{"crate_id":6,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"6:11856:12609":{"crate_id":6,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"7:7226:16690":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:46838:27751":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:9072:23802":{"crate_id":1,"path":["core","slice","sort","insert_head","InsertionHole"],"kind":"struct"},"17:2683:19515":{"crate_id":17,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:2411:12533":{"crate_id":6,"path":["std","fs","read_dir"],"kind":"function"},"7:4475:16528":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:2673:225":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:5844:11794":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"18:8941:19804":{"crate_id":18,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:50258:11894":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:53999:10976":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"5:5645:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"5:5754:11656":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:5596:19443":{"crate_id":17,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"7:495:13247":{"crate_id":7,"path":["libc","unix","utimbuf"],"kind":"struct"},"18:13536:23544":{"crate_id":18,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"18:12322:22691":{"crate_id":18,"path":["object","macho","Nlist64"],"kind":"struct"},"19:599:38251":{"crate_id":19,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:7970:19393":{"crate_id":17,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:2919:5674":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:1828:12478":{"crate_id":6,"path":["std","env","VarsOs"],"kind":"struct"},"7:1574:14145":{"crate_id":7,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"18:11161:20035":{"crate_id":18,"path":["object","elf","Rela32"],"kind":"struct"},"18:9118:38242":{"crate_id":18,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"6:9341:12745":{"crate_id":6,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"5:632:26404":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"18:13091:23417":{"crate_id":18,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:6781:19399":{"crate_id":17,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:4721:19081":{"crate_id":17,"path":["gimli","constants","DwIdx"],"kind":"struct"},"19:574:23909":{"crate_id":19,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:54040:10979":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:7890:19395":{"crate_id":17,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:3091:12585":{"crate_id":6,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"1:51684:12024":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"6:2385:12523":{"crate_id":6,"path":["std","fs","symlink_metadata"],"kind":"function"},"18:9722:19647":{"crate_id":18,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:47171:11778":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"23:422:5380":{"crate_id":23,"path":["generic_array","ArrayBuilder"],"kind":"struct"},"17:5433:19434":{"crate_id":17,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:5238:12691":{"crate_id":6,"path":["std","panic","always_abort"],"kind":"function"},"17:6284:19391":{"crate_id":17,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"18:10532:127":{"crate_id":18,"path":["object","read","Error"],"kind":"struct"},"7:4534:16533":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"4:334:5223":{"crate_id":4,"path":["digest","core_api","FixedOutputCore"],"kind":"trait"},"17:7093:19477":{"crate_id":17,"path":["gimli","read","op","Piece"],"kind":"struct"},"7:5699:17185":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:6792:12766":{"crate_id":6,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"7:135:12928":{"crate_id":7,"path":["libc","unix","fpos_t"],"kind":"enum"},"5:2864:12314":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:5163:19322":{"crate_id":17,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"7:6415:17600":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"7:4267:16507":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"13:387:38211":{"crate_id":13,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"4:512:1772":{"crate_id":4,"path":["digest","core_api","TruncSide"],"kind":"enum"},"5:1603:23758":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"15:165:18423":{"crate_id":15,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:6515:11775":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"7:5684:17183":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:50662:11879":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"18:13340:23464":{"crate_id":18,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"6:918:12344":{"crate_id":6,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"7:646:13291":{"crate_id":7,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"6:11664:26098":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"18:9108:19586":{"crate_id":18,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:6376:19466":{"crate_id":17,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"6:12325:1456":{"crate_id":6,"path":["std","u8"],"kind":"primitive"},"19:96:23625":{"crate_id":19,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:8544:25733":{"crate_id":6,"path":["std","net","ip_addr","fmt","Span"],"kind":"struct"},"7:6538:17608":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"6:8149:12571":{"crate_id":6,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:50337:11899":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:2819:11619":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"7:1518:14139":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:21356:27732":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"18:9362:19582":{"crate_id":18,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"}},"external_crates":{"16":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"digest","html_root_url":null},"20":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"26":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"10":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"14":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"typenum","html_root_url":"https://docs.rs/typenum/1.16.0/"},"27":{"name":"cpufeatures","html_root_url":null},"21":{"name":"blobby","html_root_url":"https://docs.rs/blobby/0.3.1/"},"9":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"23":{"name":"generic_array","html_root_url":null},"8":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"block_buffer","html_root_url":null},"22":{"name":"crypto_common","html_root_url":null},"18":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}