{"root":"0:0:2028","crate_version":"0.11.0-pre.3","includes_private":false,"index":{"1:13380:34346":{"id":"1:13380:34346","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:12355:476","self::pattern":"1:12960:17698"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:16536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5697:11703":{"id":"5:5697:11703","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7754:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:16536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"23:1173:199":{"id":"23:1173:199","crate_id":23,"name":"Output","span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/src/type_operators.rs","begin":[35,4],"end":[35,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:13383:34347":{"id":"1:13383:34347","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:12355:476","self::pattern":"1:12960:17698"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:16536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:16536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12981:17713","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74":{"id":"0:74","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[123,0],"end":[130,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:357:2498","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:75:2514"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32473:6347-0:138:2344":{"id":"a:1:32473:6347-0:138:2344","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32473:6347","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:59:2518":{"id":"0:59:2518","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[51,4],"end":[51,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"TruncSide","id":"4:547:2497","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}}},"1:13339:35621":{"id":"1:13339:35621","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:12960:17698","str::split":"1:13327:34333","prim@char":"6:12355:476","str::split_terminator":"1:13336:35620"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:44111:16082","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:16536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:16536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12981:17713","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53:2513":{"id":"0:53:2513","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[34,4],"end":[34,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Eager","id":"24:135:2490","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:88:676":{"id":"0:88:676","crate_id":0,"name":"drop","span":{"filename":"src/core_api.rs","begin":[179,4],"end":[185,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13299:16104":{"id":"1:13299:16104","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"6:12355:476"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:44019:16076","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:142:480":{"id":"0:142:480","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[107,9],"end":[107,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2714-0:138:2344":{"id":"b:1:2714-0:138:2344","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:6346","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2716:29704"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13274:35613":{"id":"1:13274:35613","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13294:34328":{"id":"1:13294:34328","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:13293:34327","str::split_at_mut_checked":"1:13296:34332"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2988-0:133:2343":{"id":"b:1:2988-0:133:2343","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:793-0:133:2343":{"id":"b:5:793-0:133:2343","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:795:15957","5:796:29705","5:797:29706"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:100-0:133:2343":{"id":"0:100-0:133:2343","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[29,19],"end":[29,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"core_api::Sha256VarCore","name":"Sha256VarCore","id":"0:133:2343","glob":false}}},"0:102:2358":{"id":"0:102:2358","crate_id":0,"name":"Sha224","span":{"filename":"src/lib.rs","begin":[39,0],"end":[39,84]},"visibility":"public","docs":"SHA-224 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:527:2336","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:508:2337","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U28","id":"23:2513:2331","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha224","id":"0:436:2351","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:13333:34336":{"id":"1:13333:34336","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:12960:17698","`DoubleEndedIterator`":"1:8329:130","prim@char":"6:12355:476","str::split":"1:13327:34333"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:44061:5993","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:16536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:16536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12981:17713","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13310:30509":{"id":"1:13310:30509","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"6:12355:476","self::pattern":"1:12960:17698"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:16536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:138:2344":{"id":"0:138:2344","crate_id":0,"name":"Sha512VarCore","span":{"filename":"src/core_api.rs","begin":[108,0],"end":[111,1]},"visibility":"public","docs":"Core block-level SHA-512 hasher with variable output size.\n\nSupports initialization only for 28, 32, 48, and 64 byte output sizes,\ni.e. 224, 256, 384, and 512 bits respectively.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:3207:247-0:138:2344","a:1:32473:6347-0:138:2344","a:1:42276:17665-0:138:2344","a:1:3242:11760-0:138:2344","a:1:32414:237-0:138:2344","a:1:42277:17664-0:138:2344","b:1:2711-0:138:2344","b:1:3823-0:138:2344","b:1:2988-0:138:2344","b:1:2999-0:138:2344","b:1:2984-0:138:2344","b:1:2994-0:138:2344","b:1:2714-0:138:2344","b:5:793-0:138:2344","b:23:1171-0:138:2344","0:74","0:85","0:72","0:141","0:76","0:87","0:69","0:70","0:78","0:83"]}}},"0:98-0:94:2342":{"id":"0:98-0:94:2342","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[27,0],"end":[27,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"sha512::compress512","name":"compress512","id":"0:94:2342","glob":false}}},"1:13272:11818":{"id":"1:13272:11818","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42276:17665-0:133:2343":{"id":"a:1:42276:17665-0:133:2343","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42276:17665","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:66:809":{"id":"0:66:809","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[85,4],"end":[87,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10353:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10334:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[115,0],"end":[117,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"21:72:2493","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:71:2512"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13282:6496":{"id":"1:13282:6496","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"6:12374:1865"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13285:16827":{"id":"1:13285:16827","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:42184:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[76,0],"end":[81,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"21:112:2491","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:64:2535"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:77:2517":{"id":"0:77:2517","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[133,4],"end":[133,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"23:9598:5947","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5947","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5947","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5947","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5947","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5947","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5947","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"23:9642:5948","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:9019:5952","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"0:104:2362":{"id":"0:104:2362","crate_id":0,"name":"Sha512_224","span":{"filename":"src/lib.rs","begin":[43,0],"end":[43,92]},"visibility":"public","docs":"SHA-512/224 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:527:2336","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:508:2337","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U28","id":"23:2513:2331","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512_224","id":"0:453:2353","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:13296:34332":{"id":"1:13296:34332","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:13295:34331"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3242:11760-0:138:2344":{"id":"a:1:3242:11760-0:138:2344","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3242:11760","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:2713:2563":{"id":"1:2713:2563","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:137:480":{"id":"0:137:480","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[21,9],"end":[21,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13319:11856":{"id":"1:13319:11856","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:42184:191","prim@char":"6:12355:476","self::pattern":"1:12960:17698"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:16536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13348:34342":{"id":"1:13348:34342","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:16536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13374:35630":{"id":"1:13374:35630","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"6:12355:476","self::pattern":"1:12960:17698"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:16536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:16536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:12986:17712","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13289:16829":{"id":"1:13289:16829","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:56":{"id":"0:56","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[46,0],"end":[48,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"21:99:2496","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:57:2517"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2999-0:138:2344":{"id":"b:1:2999-0:138:2344","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3002:138","1:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:81:2523":{"id":"0:81:2523","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[153,4],"end":[161,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Buffer","id":"4:355:2494","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Output","id":"21:60:199","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:97-0:90:2341":{"id":"0:97-0:90:2341","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[26,0],"end":[26,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"sha256::compress256","name":"compress256","id":"0:90:2341","glob":false}}},"0:49":{"id":"0:49","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[27,0],"end":[27,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:385:2503","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2711-0:138:2344":{"id":"b:1:2711-0:138:2344","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:6346","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2713:2563"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:107:2368":{"id":"0:107:2368","crate_id":0,"name":"Sha512","span":{"filename":"src/lib.rs","begin":[49,0],"end":[49,84]},"visibility":"public","docs":"SHA-512 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:527:2336","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:508:2337","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U64","id":"23:2621:2334","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512","id":"0:419:2349","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:13363:35624":{"id":"1:13363:35624","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:12960:17698","`DoubleEndedIterator`":"1:8329:130","prim@char":"6:12355:476","str::match_indices":"1:13360:35623"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44211:16086","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:16536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:16536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12981:17713","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13351:34343":{"id":"1:13351:34343","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:16536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:16536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12981:17713","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2716:29704":{"id":"1:2716:29704","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13392:35634":{"id":"1:13392:35634","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:12355:476","self::pattern":"1:12960:17698"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:16536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:16536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12981:17713","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:141":{"id":"0:141","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[107,9],"end":[107,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:142:480"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13400:17009":{"id":"1:13400:17009","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13309:30279":{"id":"1:13309:30279","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:44335:16094","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13373:35629":{"id":"1:13373:35629","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13298:16095":{"id":"1:13298:16095","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"6:12355:476"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:44013:16075","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2994-0:133:2343":{"id":"b:1:2994-0:133:2343","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2997:138","1:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32414:237-0:138:2344":{"id":"a:1:32414:237-0:138:2344","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13279:35474":{"id":"1:13279:35474","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12507:17714"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:85":{"id":"0:85","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[171,0],"end":[176,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10387:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:86:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2998:1822":{"id":"1:2998:1822","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:42315:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2990:839":{"id":"1:2990:839","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2987:11811":{"id":"1:2987:11811","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2961:145"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:61:2523":{"id":"0:61:2523","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[65,4],"end":[73,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Buffer","id":"4:355:2494","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Output","id":"21:60:199","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51:2512":{"id":"0:51:2512","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[30,4],"end":[30,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"23:9598:5947","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5947","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5947","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5947","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5947","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5947","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5947","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"23:9642:5948","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:9019:5952","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"1:13360:35623":{"id":"1:13360:35623","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:12960:17698","`DoubleEndedIterator`":"1:8329:130","prim@char":"6:12355:476","str::rmatch_indices":"1:13363:35624"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44193:16085","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:16536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13287:16828":{"id":"1:13287:16828","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13357:35622":{"id":"1:13357:35622","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:12960:17698","`DoubleEndedIterator`":"1:8329:130","prim@char":"6:12355:476","str::matches":"1:13354:2611"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44265:16089","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:16536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:16536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12981:17713","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13386:35632":{"id":"1:13386:35632","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:12355:476","self::pattern":"1:12960:17698"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:16536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:16536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12981:17713","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32473:6347-0:133:2343":{"id":"a:1:32473:6347-0:133:2343","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32473:6347","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5696:36341":{"id":"5:5696:36341","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:306:2659","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:306:2659","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2999-0:133:2343":{"id":"b:1:2999-0:133:2343","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3002:138","1:3003:1820"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42277:17664-0:133:2343":{"id":"a:1:42277:17664-0:133:2343","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42277:17664","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:68:676":{"id":"0:68:676","crate_id":0,"name":"drop","span":{"filename":"src/core_api.rs","begin":[91,4],"end":[97,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2994-0:138:2344":{"id":"b:1:2994-0:138:2344","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2964:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2997:138","1:2998:1822"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:78":{"id":"0:78","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[136,0],"end":[162,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:368:2499","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:79:2518","0:80:1188","0:81:2523"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:23:1171-0:133:2343":{"id":"b:23:1171-0:133:2343","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"23:1168:6107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["23:1173:199"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42277:17664-0:138:2344":{"id":"a:1:42277:17664-0:138:2344","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42277:17664","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13295:34331":{"id":"1:13295:34331","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:13296:34332"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13336:35620":{"id":"1:13336:35620","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:12960:17698","str::split":"1:13327:34333","prim@char":"6:12355:476","`DoubleEndedIterator`":"1:8329:130","str::rsplit_terminator":"1:13339:35621"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:44093:16081","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:16536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:50":{"id":"0:50","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[29,0],"end":[31,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"21:72:2493","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:51:2512"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5715:17006":{"id":"5:5715:17006","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13401:17010"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13301:30280":{"id":"1:13301:30280","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:13303:30284"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:44317:16092","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13342:34338":{"id":"1:13342:34338","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"6:12355:476","self::pattern":"1:12960:17698","str::rsplitn":"1:13345:34340"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:44147:5991","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:16536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13408:17586":{"id":"1:13408:17586","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:5014:17586"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:44351:16013","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:136":{"id":"0:136","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[21,9],"end":[21,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:137:480"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2984-0:133:2343":{"id":"b:1:2984-0:133:2343","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2987:11811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3823-0:133:2343":{"id":"b:1:3823-0:133:2343","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:6346","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:86:809":{"id":"0:86:809","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[173,4],"end":[175,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10353:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10334:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:94:2342":{"id":"0:94:2342","crate_id":0,"name":"compress512","span":{"filename":"src/sha512.rs","begin":[27,0],"end":[29,1]},"visibility":"public","docs":"Raw SHA-512 compression function.\n\nThis is a low-level \"hazmat\" API which provides direct access to the core\nfunctionality of SHA-512.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"array":{"type":{"primitive":"u64"},"len":"8"}}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"array":{"type":{"primitive":"u8"},"len":"128"}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3823-0:138:2344":{"id":"b:1:3823-0:138:2344","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:6346","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3821:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3825:1835"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:80:1188":{"id":"0:80:1188","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[140,4],"end":[150,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["output_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:42315:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"InvalidOutputSize","id":"4:557:2504","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13316:34345":{"id":"1:13316:34345","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"6:12355:476","self::pattern":"1:12960:17698"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:16536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:16536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12981:17713","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13402:35481":{"id":"1:13402:35481","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1061:17020"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67":{"id":"0:67","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[90,0],"end":[98,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3444:2537","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:68:676"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13399:17008":{"id":"1:13399:17008","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13292:35617":{"id":"1:13292:35617","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"6:12361:1735","crate::ops::IndexMut":"1:3485:6030","str::slice_unchecked":"1:13291:35616"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:793-0:138:2344":{"id":"b:5:793-0:138:2344","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2727:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:789:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:795:15957","5:796:29705","5:797:29706"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:103:2360":{"id":"0:103:2360","crate_id":0,"name":"Sha256","span":{"filename":"src/lib.rs","begin":[41,0],"end":[41,84]},"visibility":"public","docs":"SHA-256 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:527:2336","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:508:2337","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U32","id":"23:2525:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha256","id":"0:385:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"5:5711:36344":{"id":"5:5711:36344","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7754:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:795:15957":{"id":"5:795:15957","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:69":{"id":"0:69","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[113,0],"end":[113,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:385:2503","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:797:29706":{"id":"5:797:29706","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5695":{"id":"5:5695","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5696:36341","5:5697:11703","5:5700:36342","5:5703:36343","5:5711:36344","5:5712:36345","5:5713:17645","5:5714:17005","5:5715:17006"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:72":{"id":"0:72","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[119,0],"end":[121,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:359:2495","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:73:2513"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5712:36345":{"id":"5:5712:36345","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:306:2659","`String`":"5:7754:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:306:2659","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:106:2366":{"id":"0:106:2366","crate_id":0,"name":"Sha384","span":{"filename":"src/lib.rs","begin":[47,0],"end":[47,84]},"visibility":"public","docs":"SHA-384 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:527:2336","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:508:2337","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U48","id":"23:2573:2333","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha384","id":"0:402:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"a:1:3207:247-0:138:2344":{"id":"a:1:3207:247-0:138:2344","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:60:1188":{"id":"0:60:1188","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[54,4],"end":[62,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["output_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:42315:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"InvalidOutputSize","id":"4:557:2504","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:79:2518":{"id":"0:79:2518","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[137,4],"end":[137,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"TruncSide","id":"4:547:2497","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}}},"1:13401:17010":{"id":"1:13401:17010","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13283:6499":{"id":"1:13283:6499","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:42184:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11051:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71:2512":{"id":"0:71:2512","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[116,4],"end":[116,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"23:9598:5947","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5947","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5947","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5947","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5947","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5947","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5947","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5947","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"23:9642:5948","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:9019:5952","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"5:5700:36342":{"id":"5:5700:36342","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7754:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:16536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[83,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10387:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:66:809"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:58":{"id":"0:58","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[50,0],"end":[74,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:368:2499","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:59:2518","0:60:1188","0:61:2523"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13303:30284":{"id":"1:13303:30284","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:13301:30280"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:44326:16093","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3207:247-0:133:2343":{"id":"a:1:3207:247-0:133:2343","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3207:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13398:17004":{"id":"1:13398:17004","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:40083:17538","Self::is_ascii":"1:13397:17003"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:40083:17538","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:2513":{"id":"0:73:2513","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[120,4],"end":[120,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Eager","id":"24:135:2490","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"b:1:2984-0:138:2344":{"id":"b:1:2984-0:138:2344","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2958:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2987:11811"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13273:35612":{"id":"1:13273:35612","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13293:34327":{"id":"1:13293:34327","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"1:13295:34331","str::split_at_mut":"1:13294:34328"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2988-0:138:2344":{"id":"b:1:2988-0:138:2344","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2961:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2990:839"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:3242:11760-0:133:2343":{"id":"a:1:3242:11760-0:133:2343","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3242:11760","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:2997:138":{"id":"1:2997:138","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:101-0:138:2344":{"id":"0:101-0:138:2344","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[29,34],"end":[29,47]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"core_api::Sha512VarCore","name":"Sha512VarCore","id":"0:138:2344","glob":false}}},"0:105:2364":{"id":"0:105:2364","crate_id":0,"name":"Sha512_256","span":{"filename":"src/lib.rs","begin":[45,0],"end":[45,92]},"visibility":"public","docs":"SHA-512/256 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:527:2336","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:508:2337","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U32","id":"23:2525:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512_256","id":"0:470:2355","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"b:1:2711-0:133:2343":{"id":"b:1:2711-0:133:2343","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:6346","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2705:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2713:2563"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13291:35616":{"id":"1:13291:35616","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"6:12361:1735","str::slice_mut_unchecked":"1:13292:35617","crate::ops::Index":"1:39728:6029"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:54":{"id":"0:54","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[37,0],"end":[44,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:357:2498","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:55:2514"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:32414:237-0:133:2343":{"id":"a:1:32414:237-0:133:2343","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32414:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13280:35615":{"id":"1:13280:35615","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13276:35614":{"id":"1:13276:35614","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:13274:35613"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:84:2535":{"id":"0:84:2535","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[166,4],"end":[168,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10353:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10334:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13313:34344":{"id":"1:13313:34344","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"6:12355:476","self::pattern":"1:12960:17698"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:16536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13345:34340":{"id":"1:13345:34340","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"6:12355:476","str::splitn":"1:13342:34338","self::pattern":"1:12960:17698"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:44165:5987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:16536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:16536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12981:17713","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13368:35626":{"id":"1:13368:35626","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13389:35633":{"id":"1:13389:35633","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:12355:476","self::pattern":"1:12960:17698"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:16536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5703:36343":{"id":"5:5703:36343","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7754:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13404:35483":{"id":"1:13404:35483","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1061:17020"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5713:17645":{"id":"5:5713:17645","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7754:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:90:2341":{"id":"0:90:2341","crate_id":0,"name":"compress256","span":{"filename":"src/sha256.rs","begin":[27,0],"end":[29,1]},"visibility":"public","docs":"Raw SHA-256 compression function.\n\nThis is a low-level \"hazmat\" API which provides direct access to the core\nfunctionality of SHA-256.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"array":{"type":{"primitive":"u32"},"len":"8"}}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"array":{"type":{"primitive":"u8"},"len":"64"}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42276:17665-0:138:2344":{"id":"a:1:42276:17665-0:138:2344","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42276:17665","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13370:35627":{"id":"1:13370:35627","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:57:2517":{"id":"0:57:2517","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[47,4],"end":[47,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"23:9598:5947","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5947","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5947","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5947","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5947","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5947","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"23:9642:5948","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:9019:5952","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5951","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"0:87":{"id":"0:87","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[178,0],"end":[186,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3444:2537","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:88:676"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13271:1006":{"id":"1:13271:1006","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"6:12355:476"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3002:138":{"id":"1:3002:138","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32338:13982","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:5-4:0:2325":{"id":"0:5-4:0:2325","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[10,17],"end":[10,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"digest","name":"digest","id":"4:0:2325","glob":false}}},"1:13308:35619":{"id":"1:13308:35619","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44307:16091","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13327:34333":{"id":"1:13327:34333","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:12960:17698","`DoubleEndedIterator`":"1:8329:130","prim@char":"6:12355:476","str::split_whitespace":"1:13301:30280","str::rsplit":"1:13333:34336"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:44043:5989","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:16536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13306:35618":{"id":"1:13306:35618","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44297:16090","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:55:2514":{"id":"0:55:2514","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[39,4],"end":[43,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"Block","id":"21:56:2492","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13405:35636":{"id":"1:13405:35636","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:5013:35636"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:44342:16019","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:23:1171-0:138:2344":{"id":"b:23:1171-0:138:2344","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"23:1168:6107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["23:1173:199"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:0:2028":{"id":"0:0:2028","crate_id":0,"name":"sha2","span":{"filename":"src/lib.rs","begin":[1,0],"end":[49,84]},"visibility":"public","docs":"# RustCrypto: SHA-2\n\n[![crate][crate-image]][crate-link]\n[![Docs][docs-image]][docs-link]\n![Apache2/MIT licensed][license-image]\n![Rust Version][rustc-image]\n[![Project Chat][chat-image]][chat-link]\n[![Build Status][build-image]][build-link]\n\nPure Rust implementation of the [SHA-2] cryptographic hash algorithms.\n\nThere are 6 standard algorithms specified in the SHA-2 standard: \n`Sha224`, `Sha256`, `Sha512_224`, `Sha512_256`, `Sha384`, and `Sha512`.\n\nAlgorithmically, there are only 2 core algorithms: SHA-256 and SHA-512.\nAll other algorithms are just applications of these with different initial\nhash values, and truncated to different digest bit lengths. The first two\nalgorithms in the list are based on SHA-256, while the last four are based\non SHA-512.\n\n## Examples\n\n### One-shot API\n\n```rust\nuse sha2::{Sha256, Digest};\nuse hex_literal::hex;\n\nlet hash = Sha256::digest(b\"hello world\");\nassert_eq!(hash, hex!(\"b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\"));\n```\n\n### Incremental API\n\n```rust\nuse sha2::{Sha256, Sha512, Digest};\nuse hex_literal::hex;\n\nlet mut hasher = Sha256::new();\nhasher.update(b\"hello world\");\nlet hash256 = hasher.finalize();\n\nassert_eq!(hash256, hex!(\"b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\"));\n\nlet mut hasher = Sha512::new();\nhasher.update(b\"hello world\");\nlet hash512 = hasher.finalize();\n\nassert_eq!(hash512, hex!(\n    \"309ecc489c12d6eb4cc40f50c902f2b4d0ed77ee511a7c7a9bcd3ca86d4cd86f\"\n    \"989dd35bc5ff499670da34255b45b0cfd830e81f605dcf7dc5542e93ae9cd76f\"\n));\n```\n\nAlso, see the [examples section] in the RustCrypto/hashes readme.\n\n## Minimum Supported Rust Version\n\nRust **1.72** or higher.\n\nMinimum supported Rust version can be changed in the future, but it will be\ndone with a minor version bump.\n\n## SemVer Policy\n\n- All on-by-default features of this library are covered by SemVer\n- MSRV is considered exempt from SemVer as noted above\n\n## License\n\nThe crate is licensed under either of:\n\n* [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0)\n* [MIT license](http://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall be\ndual licensed as above, without any additional terms or conditions.\n\n[//]: # (badges)\n\n[crate-image]: https://img.shields.io/crates/v/sha2.svg\n[crate-link]: https://crates.io/crates/sha2\n[docs-image]: https://docs.rs/sha2/badge.svg\n[docs-link]: https://docs.rs/sha2/\n[license-image]: https://img.shields.io/badge/license-Apache2.0/MIT-blue.svg\n[rustc-image]: https://img.shields.io/badge/rustc-1.72+-blue.svg\n[chat-image]: https://img.shields.io/badge/zulip-join_chat-blue.svg\n[chat-link]: https://rustcrypto.zulipchat.com/#narrow/stream/260041-hashes\n[build-image]: https://github.com/RustCrypto/hashes/workflows/sha2/badge.svg?branch=master\n[build-link]: https://github.com/RustCrypto/hashes/actions?query=workflow%3Asha2\n\n[//]: # (general links)\n\n[SHA-2]: https://en.wikipedia.org/wiki/SHA-2\n[examples section]: https://github.com/RustCrypto/hashes#Examples","links":{},"attrs":["#![no_std]","#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\",\nhtml_favicon_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\")]","#![warn(missing_docs, rust_2018_idioms)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:5-4:0:2325","0:6-4:386:2326","0:97-0:90:2341","0:98-0:94:2342","0:100-0:133:2343","0:101-0:138:2344","0:102:2358","0:103:2360","0:104:2362","0:105:2364","0:106:2366","0:107:2368"],"is_stripped":false}}},"0:64:2535":{"id":"0:64:2535","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[78,4],"end":[80,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10353:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10334:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13323:11817":{"id":"1:13323:11817","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:42184:191","prim@char":"6:12355:476","self::pattern":"1:12960:17698"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42182:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:16536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:12966:16536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:12981:17713","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13409:35637":{"id":"1:13409:35637","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:5011:35637"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:44360:16018","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[33,0],"end":[35,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:359:2495","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:53:2513"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:83":{"id":"0:83","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[164,0],"end":[169,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"21:112:2491","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:84:2535"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:3003:1820":{"id":"1:3003:1820","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:42315:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2968:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13366:35625":{"id":"1:13366:35625","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:76":{"id":"0:76","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[132,0],"end":[134,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"21:99:2496","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:77:2517"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13281:336":{"id":"1:13281:336","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:13282:6496","`u8`":"6:12374:1865"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13372:35628":{"id":"1:13372:35628","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13395:35635":{"id":"1:13395:35635","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:12921:137","`FromStr`":"1:12920:2673"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42315:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:12920:2673","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:12920:2673","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13397:17003":{"id":"1:13397:17003","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13270":{"id":"1:13270","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:13271:1006","1:13272:11818","1:13273:35612","1:13274:35613","1:13276:35614","1:13279:35474","1:13280:35615","1:13281:336","1:13282:6496","1:13283:6499","1:13285:16827","1:13287:16828","1:13289:16829","1:13291:35616","1:13292:35617","1:13293:34327","1:13294:34328","1:13295:34331","1:13296:34332","1:13298:16095","1:13299:16104","1:13300:12516","1:13301:30280","1:13303:30284","1:13306:35618","1:13308:35619","1:13309:30279","1:13310:30509","1:13313:34344","1:13316:34345","1:13319:11856","1:13323:11817","1:13327:34333","1:13330:30281","1:13333:34336","1:13336:35620","1:13339:35621","1:13342:34338","1:13345:34340","1:13348:34342","1:13351:34343","1:13354:2611","1:13357:35622","1:13360:35623","1:13363:35624","1:13366:35625","1:13368:35626","1:13370:35627","1:13372:35628","1:13373:35629","1:13374:35630","1:13377:35631","1:13380:34346","1:13383:34347","1:13386:35632","1:13389:35633","1:13392:35634","1:13395:35635","1:13397:17003","1:13398:17004","1:13399:17008","1:13400:17009","1:13401:17010","1:13402:35481","1:13403:35482","1:13404:35483","1:13405:35636","1:13408:17586","1:13409:35637"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2714-0:133:2343":{"id":"b:1:2714-0:133:2343","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32415:6346","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2708:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2343","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2716:29704"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:133:2343":{"id":"0:133:2343","crate_id":0,"name":"Sha256VarCore","span":{"filename":"src/core_api.rs","begin":[22,0],"end":[25,1]},"visibility":"public","docs":"Core block-level SHA-256 hasher with variable output size.\n\nSupports initialization only for 28 and 32 byte output sizes,\ni.e. 224 and 256 bits respectively.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:3207:247-0:133:2343","a:1:32473:6347-0:133:2343","a:1:42276:17665-0:133:2343","a:1:3242:11760-0:133:2343","a:1:32414:237-0:133:2343","a:1:42277:17664-0:133:2343","b:1:2711-0:133:2343","b:1:3823-0:133:2343","b:1:2988-0:133:2343","b:1:2999-0:133:2343","b:1:2984-0:133:2343","b:1:2994-0:133:2343","b:1:2714-0:133:2343","b:5:793-0:133:2343","b:23:1171-0:133:2343","0:56","0:136","0:50","0:58","0:65","0:52","0:49","0:63","0:54","0:67"]}}},"0:75:2514":{"id":"0:75:2514","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[125,4],"end":[129,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"Block","id":"21:56:2492","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6-4:386:2326":{"id":"0:6-4:386:2326","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[10,23],"end":[10,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"digest::Digest","name":"Digest","id":"4:386:2326","glob":false}}},"1:3825:1835":{"id":"1:3825:1835","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39897:15338","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13330:30281":{"id":"1:13330:30281","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"6:12355:476","self::pattern":"1:12960:17698"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:12775:6006","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:16536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5714:17005":{"id":"5:5714:17005","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13400:17009"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7754:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13403:35482":{"id":"1:13403:35482","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1061:17020"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13300:12516":{"id":"1:13300:12516","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:44029:12678","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13354:2611":{"id":"1:13354:2611","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:12960:17698","`DoubleEndedIterator`":"1:8329:130","prim@char":"6:12355:476","str::rmatches":"1:13357:35622"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44247:16088","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:16536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:796:29705":{"id":"5:796:29705","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13377:35631":{"id":"1:13377:35631","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:12355:476","self::pattern":"1:12960:17698"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:12966:16536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"18:16739:13597":{"crate_id":18,"path":["object","xcoff","FunAux64"],"kind":"struct"},"4:454:2650":{"crate_id":4,"path":["digest","Update"],"kind":"trait"},"1:4712:221":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"6:9320:16486":{"crate_id":6,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:4563:16528":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"7:5319:14518":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:7765:13809":{"crate_id":17,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:46028:15535":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:5060:13691":{"crate_id":17,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:40816:16550":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"18:15785:13330":{"crate_id":18,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"27:0:2370":{"crate_id":27,"path":["cpufeatures"],"kind":"module"},"17:6998:15830":{"crate_id":17,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"18:15753:13324":{"crate_id":18,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:7424:25424":{"crate_id":17,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"6:3067:226":{"crate_id":6,"path":["std","io","error","Result"],"kind":"type_alias"},"23:642:6093":{"crate_id":23,"path":["typenum","marker_traits","Integer"],"kind":"trait"},"7:4890:14352":{"crate_id":7,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:4217:18345":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"18:11777:15707":{"crate_id":18,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:10830:12412":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:7838:25426":{"crate_id":17,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:21705:30318":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"6:3594:15171":{"crate_id":6,"path":["std","io","Read"],"kind":"trait"},"1:44247:16088":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:10605:153":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"6:4333:18364":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:34227:17556":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:22379:18022":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:816:17379":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"1:42478:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:2490:18289":{"crate_id":6,"path":["std","fs","canonicalize"],"kind":"function"},"4:557:2504":{"crate_id":4,"path":["digest","InvalidOutputSize"],"kind":"struct"},"12:2228:15910":{"crate_id":12,"path":["hashbrown","table","HashTable"],"kind":"struct"},"17:4956:13689":{"crate_id":17,"path":["gimli","constants","DwVis"],"kind":"struct"},"18:13306:12794":{"crate_id":18,"path":["object","read","SymbolIndex"],"kind":"struct"},"18:12787:12758":{"crate_id":18,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:2964:258":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"6:1927:16409":{"crate_id":6,"path":["std","env","ArgsOs"],"kind":"struct"},"18:11720:15704":{"crate_id":18,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"17:2990:13646":{"crate_id":17,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"18:12798:25622":{"crate_id":18,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:45861:15521":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:10638:12324":{"crate_id":6,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"7:8343:15121":{"crate_id":7,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"18:15829:13342":{"crate_id":18,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:4927:18356":{"crate_id":6,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:3679:18316":{"crate_id":6,"path":["std","io","BufRead"],"kind":"trait"},"18:15431:13236":{"crate_id":18,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:44970:15519":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"6:968:18252":{"crate_id":6,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"6:9308:16484":{"crate_id":6,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"5:1395:16383":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:11258:15212":{"crate_id":6,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"18:10332:25485":{"crate_id":18,"path":["object","common","RelocationEncoding"],"kind":"enum"},"7:6723:14861":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"6:12360:1701":{"crate_id":6,"path":["std","slice"],"kind":"primitive"},"7:7604:15078":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"21:56:2492":{"crate_id":21,"path":["crypto_common","Block"],"kind":"type_alias"},"6:5708:16439":{"crate_id":6,"path":["std","process","Stdio"],"kind":"struct"},"6:10976:37294":{"crate_id":6,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"7:479:14073":{"crate_id":7,"path":["libc","unix","timeval"],"kind":"struct"},"11:0:2639":{"crate_id":11,"path":["adler"],"kind":"module"},"1:2143:11714":{"crate_id":1,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"6:4163:18341":{"crate_id":6,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"18:10442:25489":{"crate_id":18,"path":["object","common","SymbolFlags"],"kind":"enum"},"18:11831:12694":{"crate_id":18,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"18:12371:12717":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:13601:16538":{"crate_id":1,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"18:12108:15712":{"crate_id":18,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:44147:5991":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"8:32:24391":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"18:16798:13608":{"crate_id":18,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"6:9411:12316":{"crate_id":6,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"19:598:38993":{"crate_id":19,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"4:359:2495":{"crate_id":4,"path":["digest","core_api","BufferKindUser"],"kind":"trait"},"18:13491:12802":{"crate_id":18,"path":["object","read","CodeView"],"kind":"struct"},"18:10861:139":{"crate_id":18,"path":["object","read","any","File"],"kind":"enum"},"23:9577:136":{"crate_id":23,"path":["typenum","Equal"],"kind":"struct"},"12:740:16374":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:23137:18022":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"21:123:18076":{"crate_id":21,"path":["crypto_common","InnerInit"],"kind":"trait"},"18:13662:12820":{"crate_id":18,"path":["object","archive","AixHeader"],"kind":"struct"},"7:5635:14660":{"crate_id":7,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"1:3654:147":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:933:12358":{"crate_id":6,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:4851:11895":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:12475:5972":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:8121:210":{"crate_id":17,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:9287:37220":{"crate_id":6,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:40746:16025":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:949:16388":{"crate_id":6,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"18:16520:13525":{"crate_id":18,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"1:23085:16003":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"18:12028:16243":{"crate_id":18,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:4120:13676":{"crate_id":17,"path":["gimli","constants","DwSect"],"kind":"struct"},"5:2265:12281":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"23:2555:2798":{"crate_id":23,"path":["typenum","generated","consts","U42"],"kind":"type_alias"},"6:10918:15916":{"crate_id":6,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"1:2338:11715":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"18:12840:15730":{"crate_id":18,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"18:13014:16280":{"crate_id":18,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"1:46089:15539":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"10:422:24407":{"crate_id":10,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:44019:16076":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"12:123:12270":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"22:96:6034":{"crate_id":22,"path":["hybrid_array","traits","ArraySize"],"kind":"trait"},"5:7852:12383":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"23:5711:6058":{"crate_id":23,"path":["typenum","generated","generic_const_mappings","Const"],"kind":"struct"},"1:40495:16013":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"5:5006:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"7:497:14081":{"crate_id":7,"path":["libc","unix","rusage"],"kind":"struct"},"6:3342:16418":{"crate_id":6,"path":["std","io","stdio","Stdin"],"kind":"struct"},"6:9328:15201":{"crate_id":6,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"6:3651:11881":{"crate_id":6,"path":["std","io","Write"],"kind":"trait"},"12:1884:11822":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"18:16187:13453":{"crate_id":18,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"18:16283:13480":{"crate_id":18,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"18:1220:16197":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:43868:5995":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"7:532:14107":{"crate_id":7,"path":["libc","unix","iovec"],"kind":"struct"},"12:2380:5985":{"crate_id":12,"path":["hashbrown","table","Iter"],"kind":"struct"},"17:3308:13614":{"crate_id":17,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:39897:15338":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"18:10549:12671":{"crate_id":18,"path":["object","endian","BigEndian"],"kind":"struct"},"6:12371:906":{"crate_id":6,"path":["std","i32"],"kind":"primitive"},"1:41171:16051":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"12:2551:38942":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:44317:16092":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:5776:14890":{"crate_id":6,"path":["std","process","exit"],"kind":"function"},"24:0:2489":{"crate_id":24,"path":["block_buffer"],"kind":"module"},"15:40:12848":{"crate_id":15,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"7:5107:14443":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:8532:5989":{"crate_id":6,"path":["std","io","Split"],"kind":"struct"},"1:5976:12264":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"24:135:2490":{"crate_id":24,"path":["block_buffer","Eager"],"kind":"struct"},"18:14807:13063":{"crate_id":18,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"6:1618:11822":{"crate_id":6,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:7919:16356":{"crate_id":17,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"19:689:15690":{"crate_id":19,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:46170:15551":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:46214:15553":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"18:12673:16267":{"crate_id":18,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:8636:25430":{"crate_id":17,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:5113:13693":{"crate_id":17,"path":["gimli","constants","DwId"],"kind":"struct"},"1:2931:18022":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"18:16362:13500":{"crate_id":18,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"23:835:18020":{"crate_id":23,"path":["typenum","private","PrivateIntegerAdd"],"kind":"trait"},"18:10663:12675":{"crate_id":18,"path":["object","endian","I16Bytes"],"kind":"struct"},"18:12851:15734":{"crate_id":18,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"7:4842:14321":{"crate_id":7,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"5:1132:12341":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:10402:206":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:39800:215":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:44901:16560":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:21751:30314":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"21:60:199":{"crate_id":21,"path":["crypto_common","Output"],"kind":"type_alias"},"23:9461:6055":{"crate_id":23,"path":["typenum","array","ATerm"],"kind":"struct"},"7:8308:15112":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:42210:5985":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"5:1564:11822":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:8233:25428":{"crate_id":17,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"6:8700:18398":{"crate_id":6,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"4:361:5958":{"crate_id":4,"path":["digest","core_api","FixedOutputCore"],"kind":"trait"},"7:6740:14865":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"23:924:18039":{"crate_id":23,"path":["typenum","private","PrivateCmp"],"kind":"trait"},"7:4970:14389":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"7:5562:14626":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"18:16159:13447":{"crate_id":18,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:6159:15758":{"crate_id":17,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:11350:16503":{"crate_id":6,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"1:42277:17664":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"7:5428:14562":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"6:6406:16445":{"crate_id":6,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"0:107:2368":{"crate_id":0,"path":["sha2","Sha512"],"kind":"type_alias"},"17:6028:13648":{"crate_id":17,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"18:15896:13359":{"crate_id":18,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:8247:17652":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:8058:16363":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"3:0:2635":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"17:6876:13725":{"crate_id":17,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:0:568":{"crate_id":1,"path":["core"],"kind":"module"},"17:3014:24556":{"crate_id":17,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"6:0:1727":{"crate_id":6,"path":["std"],"kind":"module"},"17:7789:38974":{"crate_id":17,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:7416:16334":{"crate_id":17,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"25:290:2329":{"crate_id":25,"path":["const_oid","ObjectIdentifier"],"kind":"struct"},"1:45961:15531":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"19:573:12533":{"crate_id":19,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:10755:12325":{"crate_id":6,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"18:13933:12878":{"crate_id":18,"path":["object","elf","Rel32"],"kind":"struct"},"1:4455:110":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"23:612:6065":{"crate_id":23,"path":["typenum","marker_traits","Zero"],"kind":"trait"},"1:4716:16529":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"12:671:5985":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:13758:16542":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"18:16786:13605":{"crate_id":18,"path":["object","xcoff","StatAux"],"kind":"struct"},"17:4184:13678":{"crate_id":17,"path":["gimli","constants","DwUt"],"kind":"struct"},"7:4984:14397":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:680:16400":{"crate_id":6,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"18:13945:12881":{"crate_id":18,"path":["object","elf","Rela32"],"kind":"struct"},"17:903:16193":{"crate_id":17,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"18:15010:13100":{"crate_id":18,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:6924:233":{"crate_id":6,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"5:7558:11822":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:40768:17624":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"6:4981:12294":{"crate_id":6,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:33708:17554":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"18:12749:16276":{"crate_id":18,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"6:4487:16430":{"crate_id":6,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"7:1584:14194":{"crate_id":7,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:40580:16017":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"7:5603:14640":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:8208:140":{"crate_id":6,"path":["std","fs","FileType"],"kind":"struct"},"18:10167:25480":{"crate_id":18,"path":["object","common","SectionKind"],"kind":"enum"},"8:79:24398":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:42110:16068":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:8528:15887":{"crate_id":17,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"5:1595:15905":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"18:12583:12754":{"crate_id":18,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:23023:30132":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:8243:6033":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:2968:257":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:10335:11881":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"18:12992:12770":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"6:7472:38320":{"crate_id":6,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:42266:16552":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:6263:15982":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:40687:16022":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"18:16668:13576":{"crate_id":18,"path":["object","xcoff","FileAux32"],"kind":"struct"},"12:1158:16387":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"6:4406:16429":{"crate_id":6,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:12975:15693":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"18:15549:13278":{"crate_id":18,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"23:844:18042":{"crate_id":23,"path":["typenum","private","PrivatePow"],"kind":"trait"},"18:12225:15722":{"crate_id":18,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"18:14627:13019":{"crate_id":18,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"6:7325:12318":{"crate_id":6,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"18:11606:12704":{"crate_id":18,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"18:13818:12861":{"crate_id":18,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:7305:13763":{"crate_id":17,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"5:4337:12264":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:42355:5985":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"7:5541:14614":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"18:14947:13082":{"crate_id":18,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:40935:16038":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"7:5381:14537":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:3488:18323":{"crate_id":6,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:7716:38975":{"crate_id":17,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"6:3905:16426":{"crate_id":6,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:22935:15997":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"4:355:2494":{"crate_id":4,"path":["digest","core_api","Buffer"],"kind":"type_alias"},"18:14114:12922":{"crate_id":18,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:6718:12313":{"crate_id":6,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"18:10516:25491":{"crate_id":18,"path":["object","endian","Endianness"],"kind":"enum"},"23:1276:6072":{"crate_id":23,"path":["typenum","type_operators","Gcd"],"kind":"trait"},"6:1621:12358":{"crate_id":6,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"7:1489:14139":{"crate_id":7,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:7223:15844":{"crate_id":17,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:12379:975":{"crate_id":6,"path":["std","isize"],"kind":"primitive"},"1:3456:143":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:7959:15879":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"7:6493:14749":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:12372:912":{"crate_id":6,"path":["std","i64"],"kind":"primitive"},"1:46643:15588":{"crate_id":1,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"1:3036:124":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"17:7938:15876":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"5:4217:5986":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"18:10487:25490":{"crate_id":18,"path":["object","common","RelocationFlags"],"kind":"enum"},"17:8014:13664":{"crate_id":17,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:8483:13885":{"crate_id":17,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:3928:12358":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"5:7743:12374":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:3987:12576":{"crate_id":17,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"17:7358:13657":{"crate_id":17,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:11440:5994":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:9170:11822":{"crate_id":6,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:34573:13791":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"20:0:1301":{"crate_id":20,"path":["panic_unwind"],"kind":"module"},"6:4819:14982":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"18:13451:12800":{"crate_id":18,"path":["object","read","Import"],"kind":"struct"},"17:8137:13665":{"crate_id":17,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:39648:17574":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:12376:1853":{"crate_id":6,"path":["std","u32"],"kind":"primitive"},"21:35:18081":{"crate_id":21,"path":["crypto_common","hazmat","SerializableState"],"kind":"trait"},"18:13610:12813":{"crate_id":18,"path":["object","read","CompressedData"],"kind":"struct"},"6:12378:1841":{"crate_id":6,"path":["std","u128"],"kind":"primitive"},"1:47090:15630":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:11874:16428":{"crate_id":6,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"6:7397:12319":{"crate_id":6,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"6:4807:18342":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:9269:16479":{"crate_id":6,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"18:15919:13367":{"crate_id":18,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"5:4536:12264":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"5:3703:182":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"18:11309:16218":{"crate_id":18,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:4983:13690":{"crate_id":17,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:7521:15873":{"crate_id":17,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:3561:12264":{"crate_id":6,"path":["std","io","Guard"],"kind":"struct"},"17:6866:25421":{"crate_id":17,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:44604:16110":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:40614:17611":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:42404:90":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:6183:12306":{"crate_id":6,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:3141:12563":{"crate_id":17,"path":["gimli","arch","Arm"],"kind":"struct"},"1:8291:165":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"7:1625:14226":{"crate_id":7,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:43141:15504":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:10392:129":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"6:985:16380":{"crate_id":6,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"7:5069:14441":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"18:13798:12851":{"crate_id":18,"path":["object","elf","SectionHeader32"],"kind":"struct"},"7:6748:14866":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"17:2415:24528":{"crate_id":17,"path":["gimli","common","Format"],"kind":"enum"},"1:8793:30465":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:42162:15486":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"18:5305:16208":{"crate_id":18,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"1:3242:11760":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"15:214:15895":{"crate_id":15,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:12382:13":{"crate_id":6,"path":["std","fn"],"kind":"primitive"},"16:394:24519":{"crate_id":16,"path":["addr2line","DebugFile"],"kind":"enum"},"6:9732:128":{"crate_id":6,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"4:323:18022":{"crate_id":4,"path":["digest","core_api","wrapper","sealed","Sealed"],"kind":"trait"},"1:44676:15211":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:11509:5992":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"24:30:6046":{"crate_id":24,"path":["block_buffer","read","ReadBuffer"],"kind":"struct"},"1:2797:195":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"7:523:14101":{"crate_id":7,"path":["libc","unix","hostent"],"kind":"struct"},"6:943:12379":{"crate_id":6,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"6:2008:18279":{"crate_id":6,"path":["std","error","Indented"],"kind":"struct"},"17:7462:16335":{"crate_id":17,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:47069:15629":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:1864:16405":{"crate_id":6,"path":["std","env","Vars"],"kind":"struct"},"6:437:185":{"crate_id":6,"path":["std","thread","local","LocalKey"],"kind":"struct"},"6:2488:18288":{"crate_id":6,"path":["std","fs","read_link"],"kind":"function"},"7:5629:14657":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"1:44868:207":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"6:8556:18335":{"crate_id":6,"path":["std","net","Shutdown"],"kind":"enum"},"6:12380:1927":{"crate_id":6,"path":["std","usize"],"kind":"primitive"},"18:13958:12883":{"crate_id":18,"path":["object","elf","Rel64"],"kind":"struct"},"5:2157:15912":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"12:430:38946":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:5449:13704":{"crate_id":17,"path":["gimli","constants","DwRle"],"kind":"struct"},"25:245:6648":{"crate_id":25,"path":["const_oid","encoder","State"],"kind":"enum"},"1:3433:17563":{"crate_id":1,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"18:12524:16263":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"18:13592:12810":{"crate_id":18,"path":["object","read","CompressedFileRange"],"kind":"struct"},"15:202:18133":{"crate_id":15,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:5742:12671":{"crate_id":17,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"18:15531:13273":{"crate_id":18,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"6:954:16373":{"crate_id":6,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"12:434:38947":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"12:842:18252":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:44061:5993":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:15:2612":{"crate_id":1,"path":["core","write"],"kind":"macro"},"18:12625:12755":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:42702:91":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:11222:5986":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"7:5648:14666":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:5447:203":{"crate_id":6,"path":["std","path","Path"],"kind":"struct"},"7:6770:14875":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"6:3843:18336":{"crate_id":6,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"19:491:15683":{"crate_id":19,"path":["memchr","cow","Imp"],"kind":"struct"},"1:3212:11759":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"7:0:1011":{"crate_id":7,"path":["libc"],"kind":"module"},"5:3313:15907":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"18:12095:15711":{"crate_id":18,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"7:1657:14249":{"crate_id":7,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:41429:15471":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:3299:38344":{"crate_id":6,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"18:14547:13008":{"crate_id":18,"path":["object","macho","DylibCommand"],"kind":"struct"},"18:10296:25484":{"crate_id":18,"path":["object","common","RelocationKind"],"kind":"enum"},"18:13119:12776":{"crate_id":18,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"18:12983:25624":{"crate_id":18,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"4:537:5964":{"crate_id":4,"path":["digest","core_api","xof_reader","XofReaderCoreWrapper"],"kind":"struct"},"1:11041:18022":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:23273:15262":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"5:6132:12373":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:6625:15816":{"crate_id":17,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"12:2566:15971":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:21950:15234":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"23:942:18054":{"crate_id":23,"path":["typenum","private","PrivateDiv"],"kind":"trait"},"5:306:2659":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"12:1888:12358":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"18:14460:12994":{"crate_id":18,"path":["object","macho","Section32"],"kind":"struct"},"24:143:6043":{"crate_id":24,"path":["block_buffer","Lazy"],"kind":"struct"},"18:2378:25553":{"crate_id":18,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"18:11757:25526":{"crate_id":18,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:40591:16018":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"18:16714:13589":{"crate_id":18,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"17:6904:15825":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"5:2275:15959":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:6111:15756":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"7:6480:14740":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:8105:13836":{"crate_id":17,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"7:473:14070":{"crate_id":7,"path":["libc","unix","utimbuf"],"kind":"struct"},"18:14327:12972":{"crate_id":18,"path":["object","macho","FatHeader"],"kind":"struct"},"23:2513:2331":{"crate_id":23,"path":["typenum","generated","consts","U28"],"kind":"type_alias"},"7:4881:14347":{"crate_id":7,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:7030:13728":{"crate_id":17,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"7:1500:14144":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:5318:13700":{"crate_id":17,"path":["gimli","constants","DwLns"],"kind":"struct"},"4:476:2656":{"crate_id":4,"path":["digest","VariableOutput"],"kind":"trait"},"17:6822:25420":{"crate_id":17,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"4:466:2654":{"crate_id":4,"path":["digest","ExtendableOutput"],"kind":"trait"},"1:22951:15236":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:43878:5996":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:10353:144":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:46153:15550":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:10967:15168":{"crate_id":6,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"6:384:16395":{"crate_id":6,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:39840:216":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:38325:17558":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:11276:162":{"crate_id":6,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"6:5089:18387":{"crate_id":6,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:40694:16023":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"struct"},"17:6337:15777":{"crate_id":17,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"18:10218:25481":{"crate_id":18,"path":["object","common","ComdatKind"],"kind":"enum"},"18:15315:13143":{"crate_id":18,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"18:12570:16266":{"crate_id":18,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:2590:13628":{"crate_id":17,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:8300:6345":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"7:5593:14635":{"crate_id":7,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"5:7524:12352":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:288:24508":{"crate_id":16,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:3200:11758":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:22593:17853":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"12:2545:13980":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:21720:30312":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"18:13921:12877":{"crate_id":18,"path":["object","elf","Syminfo64"],"kind":"struct"},"18:15351:13174":{"crate_id":18,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:44639:16115":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:45925:15525":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"18:14586:13012":{"crate_id":18,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:4061:11822":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"23:5714:6059":{"crate_id":23,"path":["typenum","generated","generic_const_mappings","ToUInt"],"kind":"trait"},"17:5649:13705":{"crate_id":17,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:3587:13673":{"crate_id":17,"path":["gimli","arch","MIPS"],"kind":"struct"},"7:7548:15056":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:44461:16102":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:9416:12317":{"crate_id":6,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"18:11864:16236":{"crate_id":18,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"18:12409:25598":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"6:958:16374":{"crate_id":6,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:3034:12293":{"crate_id":6,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"18:13041:16283":{"crate_id":18,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"18:15557:13279":{"crate_id":18,"path":["object","pe","Guid"],"kind":"struct"},"18:12736:16275":{"crate_id":18,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"5:7731:15977":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"5:1259:36639":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:46060:15537":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:7508:15870":{"crate_id":17,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"18:15760:13325":{"crate_id":18,"path":["object","pe","ImageRelocation"],"kind":"struct"},"18:13028:16282":{"crate_id":18,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"18:13205:16289":{"crate_id":18,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"6:979:16378":{"crate_id":6,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:13196:120":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"7:6521:14761":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"12:1140:16386":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"18:16084:13434":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"18:10938:38981":{"crate_id":18,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"23:653:6094":{"crate_id":23,"path":["typenum","marker_traits","TypeArray"],"kind":"trait"},"5:7502:15968":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:8480:15168":{"crate_id":6,"path":["std","io","IoSlice"],"kind":"struct"},"7:7563:15063":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"18:16026:13392":{"crate_id":18,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:42307:15491":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:3731:17573":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:4902:13687":{"crate_id":17,"path":["gimli","constants","DwEnd"],"kind":"struct"},"25:284:15869":{"crate_id":25,"path":["const_oid","parser","Parser"],"kind":"struct"},"18:16019:13390":{"crate_id":18,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"18:12306:15723":{"crate_id":18,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"7:1597:14201":{"crate_id":7,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:46472:15581":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:3666:17569":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"18:16332:13495":{"crate_id":18,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:819:190":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"18:14084:12910":{"crate_id":18,"path":["object","elf","Verneed"],"kind":"struct"},"1:44335:16094":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:43849:5982":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:2803:202":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:4785:12400":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"18:14963:13086":{"crate_id":18,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"7:5488:14599":{"crate_id":7,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"23:9556:5976":{"crate_id":23,"path":["typenum","Less"],"kind":"struct"},"6:8545:16472":{"crate_id":6,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:5348:13701":{"crate_id":17,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:10400:11885":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"7:5249:14484":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:907:15904":{"crate_id":6,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:7386:13771":{"crate_id":17,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"7:1690:14265":{"crate_id":7,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:4341:18365":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:41181:16052":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"0:103:2360":{"crate_id":0,"path":["sha2","Sha256"],"kind":"type_alias"},"7:6437:14723":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:42226:11822":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"5:7544:34026":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"7:7986:15084":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"7:1675:14256":{"crate_id":7,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"18:11432:25505":{"crate_id":18,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"7:6876:14903":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:7075:25422":{"crate_id":17,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"7:7431:14989":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"6:8551:16474":{"crate_id":6,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"6:12377:1859":{"crate_id":6,"path":["std","u64"],"kind":"primitive"},"18:11281:16217":{"crate_id":18,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:8437:178":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"18:14533:12724":{"crate_id":18,"path":["object","macho","Dylib"],"kind":"struct"},"24:85:2513":{"crate_id":24,"path":["block_buffer","BufferKind"],"kind":"trait"},"1:40557:15469":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:12306:16507":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"12:785:15905":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"6:8843:15924":{"crate_id":6,"path":["std","path","Components"],"kind":"struct"},"6:5844:12306":{"crate_id":6,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"16:0:2644":{"crate_id":16,"path":["addr2line"],"kind":"module"},"23:1153:18041":{"crate_id":23,"path":["typenum","private","PrivateLogarithm2"],"kind":"trait"},"23:1111:18027":{"crate_id":23,"path":["typenum","private","IsNotEqualPrivate"],"kind":"trait"},"5:3101:33941":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"4:411:2661":{"crate_id":4,"path":["digest","digest","DynDigest"],"kind":"trait"},"5:7777:16524":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"5:5946:251":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:2772:13636":{"crate_id":17,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:2078:198":{"crate_id":6,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:3669:18297":{"crate_id":6,"path":["std","io","Seek"],"kind":"trait"},"1:42515:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:12041:6005":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"1:11290:6006":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:10013:809":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"6:4817:14980":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"1:44002:16074":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:1486:156":{"crate_id":6,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:21830:17769":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"7:7586:15075":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"7:5325:14519":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:2077:1368":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:4795:11894":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"17:7016:15836":{"crate_id":17,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:22260:30322":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"23:821:18047":{"crate_id":23,"path":["typenum","private","PrivateXor"],"kind":"trait"},"12:1023:16382":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:2607:11699":{"crate_id":1,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"1:42004:15484":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"6:5515:129":{"crate_id":6,"path":["std","path","Display"],"kind":"struct"},"1:42888:11884":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:44351:16013":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:40758:12678":{"crate_id":1,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"6:11215:37292":{"crate_id":6,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:6984:13667":{"crate_id":17,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"19:718:12554":{"crate_id":19,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"6:7984:15125":{"crate_id":6,"path":["std","thread","local","AccessError"],"kind":"struct"},"18:13145:16284":{"crate_id":18,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"23:9104:5953":{"crate_id":23,"path":["typenum","int","Z0"],"kind":"struct"},"1:10862:12417":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"12:2533:13978":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"18:16595:12851":{"crate_id":18,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"1:30795:6026":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:6799:18429":{"crate_id":6,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:12356:1887":{"crate_id":6,"path":["std","unit"],"kind":"primitive"},"10:355:24420":{"crate_id":10,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"5:6516:18144":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:10929:15941":{"crate_id":6,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"1:23185:15254":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"7:5051:14430":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"7:6443:14726":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:10955:15208":{"crate_id":6,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"1:4:1266":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"17:3441:13672":{"crate_id":17,"path":["gimli","arch","LoongArch"],"kind":"struct"},"5:994:12349":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:41410:16059":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:46345:15560":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:7350:13769":{"crate_id":17,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"23:783:18018":{"crate_id":23,"path":["typenum","private","InternalMarker"],"kind":"trait"},"18:11515:16221":{"crate_id":18,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:22814:15995":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"0:102:2358":{"crate_id":0,"path":["sha2","Sha224"],"kind":"type_alias"},"18:322:16194":{"crate_id":18,"path":["object","read","util","DebugLen"],"kind":"struct"},"23:1174:6108":{"crate_id":23,"path":["typenum","type_operators","Abs"],"kind":"trait"},"6:1094:16382":{"crate_id":6,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:41381:16055":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:45893:15523":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"14:110:38952":{"crate_id":14,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:21824:17766":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"5:1410:16382":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:33775:17552":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:3428:6028":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:8853:5985":{"crate_id":6,"path":["std","path","Iter"],"kind":"struct"},"1:12920:2673":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"7:4816:14301":{"crate_id":7,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"18:12319:16258":{"crate_id":18,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"7:5494:14601":{"crate_id":7,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"1:44043:5989":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"18:11401:12688":{"crate_id":18,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:42626:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"14:0:2642":{"crate_id":14,"path":["std_detect"],"kind":"module"},"18:15997:13385":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:4443:16527":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:2047:11751":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"7:1632:14230":{"crate_id":7,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:42881:11882":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"5:6714:12341":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:13932:12423":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"18:11851:16235":{"crate_id":18,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"18:10696:12676":{"crate_id":18,"path":["object","endian","I32Bytes"],"kind":"struct"},"7:6731:14862":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"4:386:2326":{"crate_id":4,"path":["digest","digest","Digest"],"kind":"trait"},"1:44718:16123":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"5:7168:264":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"1:5357:986":{"crate_id":1,"path":["core","iter"],"kind":"module"},"17:6658:16311":{"crate_id":17,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"18:14859:13069":{"crate_id":18,"path":["object","macho","RpathCommand"],"kind":"struct"},"23:611:190":{"crate_id":23,"path":["typenum","marker_traits","NonZero"],"kind":"trait"},"6:7152:18437":{"crate_id":6,"path":["std","std_float","StdFloat"],"kind":"trait"},"7:4792:14284":{"crate_id":7,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:43182:74":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:47111:15631":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"5:2357:33974":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"4:463:2653":{"crate_id":4,"path":["digest","XofReader"],"kind":"trait"},"1:12737:16087":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"23:2573:2333":{"crate_id":23,"path":["typenum","generated","consts","U48"],"kind":"type_alias"},"1:21683:11775":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:47209:11682":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:13641:16038":{"crate_id":1,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"18:12066:12713":{"crate_id":18,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:2620:13629":{"crate_id":17,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:46584:15585":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:155:12267":{"crate_id":17,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"18:13181:16287":{"crate_id":18,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"18:14072:12907":{"crate_id":18,"path":["object","elf","Verdaux"],"kind":"struct"},"10:328:14023":{"crate_id":10,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"5:3277:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"18:583:16196":{"crate_id":18,"path":["object","read","any","Comdat"],"kind":"struct"},"5:938:12347":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"18:13193:16288":{"crate_id":18,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"6:12366:745":{"crate_id":6,"path":["std","f32"],"kind":"primitive"},"7:6659:14838":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"7:5265:14492":{"crate_id":7,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:44933:16562":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"7:6700:14852":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"7:6666:14839":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"5:221:12340":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"25:0:2327":{"crate_id":25,"path":["const_oid"],"kind":"module"},"1:30816:11711":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:4431:16526":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:33842:17551":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"18:15777:13328":{"crate_id":18,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"12:2137:16382":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"18:13871:12868":{"crate_id":18,"path":["object","elf","Sym32"],"kind":"struct"},"6:2640:16415":{"crate_id":6,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:46738:15591":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"7:4869:14344":{"crate_id":7,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"23:2397:18022":{"crate_id":23,"path":["typenum","sealed","Sealed"],"kind":"trait"},"1:10653:12128":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:2766:135":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"4:460:2652":{"crate_id":4,"path":["digest","FixedOutputReset"],"kind":"trait"},"18:13537:12766":{"crate_id":18,"path":["object","read","Relocation"],"kind":"struct"},"17:6890:13649":{"crate_id":17,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"18:14599:13014":{"crate_id":18,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"7:6564:14790":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"18:10977:38982":{"crate_id":18,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"23:1071:18025":{"crate_id":23,"path":["typenum","private","IsGreaterPrivate"],"kind":"trait"},"4:320:5963":{"crate_id":4,"path":["digest","core_api","wrapper","CoreProxy"],"kind":"trait"},"18:10778:16209":{"crate_id":18,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"18:13692:12824":{"crate_id":18,"path":["object","archive","AixFileHeader"],"kind":"struct"},"7:6765:14874":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"17:6738:38973":{"crate_id":17,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:8028:13832":{"crate_id":17,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"5:5549:18128":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:22381:17768":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"12:351:38943":{"crate_id":12,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:2591:677":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:2966:13645":{"crate_id":17,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:30763:6025":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"7:4990:14400":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:10938:15127":{"crate_id":6,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"6:11003:16439":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"5:7574:15970":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:4821:14984":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"1:41395:16057":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:39782:212":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"7:6462:14728":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:5085:13692":{"crate_id":17,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:12338:37236":{"crate_id":6,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"18:12550:12751":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"5:3318:34078":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:44360:16018":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"12:2440:12358":{"crate_id":12,"path":["hashbrown","table","Drain"],"kind":"struct"},"18:11386:25504":{"crate_id":18,"path":["object","read","archive","Members"],"kind":"enum"},"12:798:12358":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"7:6902:14918":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:10715:16422":{"crate_id":6,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"7:5670:14674":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:44629:16111":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"6:1979:16410":{"crate_id":6,"path":["std","error","Report"],"kind":"struct"},"6:11973:12335":{"crate_id":6,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"6:12355:476":{"crate_id":6,"path":["std","char"],"kind":"primitive"},"12:2349:16383":{"crate_id":12,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"1:3397:17570":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:6072:12264":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:39732:16011":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:22517:17851":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"7:5622:14654":{"crate_id":7,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"7:5375:14535":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"18:12920:15738":{"crate_id":18,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"7:1514:14149":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:1866:16406":{"crate_id":6,"path":["std","env","VarsOs"],"kind":"struct"},"17:8723:138":{"crate_id":17,"path":["gimli","read","Error"],"kind":"enum"},"18:10564:12672":{"crate_id":18,"path":["object","endian","U16Bytes"],"kind":"struct"},"0:104:2362":{"crate_id":0,"path":["sha2","Sha512_224"],"kind":"type_alias"},"6:11725:15949":{"crate_id":6,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:43425:6648":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"18:11579:16225":{"crate_id":18,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"18:14520:13003":{"crate_id":18,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:47148:11678":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:10995:16461":{"crate_id":6,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"1:42381:224":{"crate_id":1,"path":["core","sync","atomic","Ordering","Relaxed"],"kind":"variant"},"7:6411:14708":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"23:9535:5975":{"crate_id":23,"path":["typenum","Greater"],"kind":"struct"},"7:6708:14856":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"5:1496:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:22473:17850":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"5:7067:12390":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"4:114:2338":{"crate_id":4,"path":["digest","impl_oid_carrier"],"kind":"macro"},"17:2435:24555":{"crate_id":17,"path":["gimli","common","Vendor"],"kind":"enum"},"1:7827:17642":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"6:3344:16419":{"crate_id":6,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:9133:15194":{"crate_id":6,"path":["std","process","ExitStatusError"],"kind":"struct"},"7:4957:14384":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:46493:15582":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"6:4923:18353":{"crate_id":6,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"15:160:16369":{"crate_id":15,"path":["rustc_demangle","Demangle"],"kind":"struct"},"23:1206:6067":{"crate_id":23,"path":["typenum","type_operators","Max"],"kind":"trait"},"6:876:5985":{"crate_id":6,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"12:685:5986":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"7:6473:14736":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"23:1274:6084":{"crate_id":23,"path":["typenum","type_operators","Logarithm2"],"kind":"trait"},"7:7361:14965":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:3069:138":{"crate_id":6,"path":["std","io","error","Error"],"kind":"struct"},"7:8267:15103":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:7159:15842":{"crate_id":17,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:13034:17721":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:44922:31482":{"crate_id":1,"path":["core","task","wake","ExtData"],"kind":"enum"},"1:2961:145":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"17:6808:13647":{"crate_id":17,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:3305:38915":{"crate_id":6,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"18:13635:12814":{"crate_id":18,"path":["object","archive","Header"],"kind":"struct"},"18:15036:13102":{"crate_id":18,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"7:7350:14960":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"7:6680:14844":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:46937:15625":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"18:10928:16212":{"crate_id":18,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"4:457:2651":{"crate_id":4,"path":["digest","FixedOutput"],"kind":"trait"},"1:41976:17658":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"5:6100:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:10344:16490":{"crate_id":6,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"1:45876:15522":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:8598:16368":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:11956:15952":{"crate_id":6,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"6:8471:15167":{"crate_id":6,"path":["std","io","util","Sink"],"kind":"struct"},"7:586:14135":{"crate_id":7,"path":["libc","unix","protoent"],"kind":"struct"},"22:99:6035":{"crate_id":22,"path":["hybrid_array","traits","AssocArraySize"],"kind":"trait"},"1:32338:13982":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"7:4997:14403":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"18:13471:12763":{"crate_id":18,"path":["object","read","Export"],"kind":"struct"},"1:11495:5987":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"23:9019:5952":{"crate_id":23,"path":["typenum","bit","B1"],"kind":"struct"},"6:5851:15913":{"crate_id":6,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"5:894:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"7:5139:14446":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"12:1725:156":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"18:15689:13304":{"crate_id":18,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"7:5230:14474":{"crate_id":7,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"18:10823:12680":{"crate_id":18,"path":["object","read","util","ByteString"],"kind":"struct"},"18:13838:12862":{"crate_id":18,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"18:11358:25503":{"crate_id":18,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:42874:11883":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"6:8070:18269":{"crate_id":6,"path":["std","env","VarError"],"kind":"enum"},"23:9480:6056":{"crate_id":23,"path":["typenum","array","TArr"],"kind":"struct"},"18:12176:15717":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"12:1674:12276":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"6:12361:1735":{"crate_id":6,"path":["std","str"],"kind":"primitive"},"5:7216:12395":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:44326:16093":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:5004:18352":{"crate_id":6,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:12375:1847":{"crate_id":6,"path":["std","u16"],"kind":"primitive"},"18:14346:12977":{"crate_id":18,"path":["object","macho","FatArch64"],"kind":"struct"},"18:14043:12898":{"crate_id":18,"path":["object","elf","Versym"],"kind":"struct"},"1:13912:12302":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"18:16750:13598":{"crate_id":18,"path":["object","xcoff","ExpAux"],"kind":"struct"},"6:4225:18347":{"crate_id":6,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"18:10630:12674":{"crate_id":18,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:4203:18343":{"crate_id":6,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"18:14652:13021":{"crate_id":18,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"7:5271:14495":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"7:7463:15000":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:44943:180":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:2880:13641":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:8096:16364":{"crate_id":17,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"5:5501:12341":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:46132:15549":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"23:933:18052":{"crate_id":23,"path":["typenum","private","PrivateSetBit"],"kind":"trait"},"16:306:24509":{"crate_id":16,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"6:2710:12288":{"crate_id":6,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"6:9710:16462":{"crate_id":6,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"0:0:2028":{"crate_id":0,"path":["sha2"],"kind":"module"},"18:0:2646":{"crate_id":18,"path":["object"],"kind":"module"},"1:22985:30140":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"6:6282:12298":{"crate_id":6,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:6149:15981":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:4721:16530":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"19:96:29676":{"crate_id":19,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"12:698:11822":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:8539:16090":{"crate_id":6,"path":["std","io","Lines"],"kind":"struct"},"18:12931:12766":{"crate_id":18,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:39760:210":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"18:13427:12798":{"crate_id":18,"path":["object","read","ObjectMapFile"],"kind":"struct"},"1:3415:125":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"18:15475:13267":{"crate_id":18,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"15:0:2643":{"crate_id":15,"path":["rustc_demangle"],"kind":"module"},"1:30537:17363":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"5:735:16510":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"6:8788:15187":{"crate_id":6,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:5144:13694":{"crate_id":17,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:6421:15747":{"crate_id":17,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:6144:25416":{"crate_id":17,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:6772:15983":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:41022:12551":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:12368:740":{"crate_id":6,"path":["std","f128"],"kind":"primitive"},"1:42298:17673":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:3397:16421":{"crate_id":6,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"7:5450:14578":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"18:11222:16216":{"crate_id":18,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"18:13349:15742":{"crate_id":18,"path":["object","read","SymbolMap"],"kind":"struct"},"17:6302:15775":{"crate_id":17,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:40874:16029":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"25:255:138":{"crate_id":25,"path":["const_oid","error","Error"],"kind":"enum"},"1:40653:16021":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:44492:16106":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"5:7241:12398":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"18:16218:13461":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"7:1703:14269":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:43388:12130":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:44297:16090":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:23007:15241":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:4354:18366":{"crate_id":6,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"18:13070:12704":{"crate_id":18,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"6:5168:18394":{"crate_id":6,"path":["std","panic","always_abort"],"kind":"function"},"5:798:119":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:6852:15822":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:40501:16014":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"5:6668:12358":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"7:7487:15012":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:6098:16292":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"6:661:16397":{"crate_id":6,"path":["std","backtrace","Backtrace"],"kind":"struct"},"18:12234:12780":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:11241:15205":{"crate_id":6,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"6:6374:12305":{"crate_id":6,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"18:12018:16242":{"crate_id":18,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"5:7602:11822":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"18:12537:16264":{"crate_id":18,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:32380:16546":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:21769:18022":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:32945:13786":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:23251:15260":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"18:15981:13382":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:30827:30141":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"17:5727:12670":{"crate_id":17,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:43889:6003":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"18:10246:25482":{"crate_id":18,"path":["object","common","SymbolKind"],"kind":"enum"},"1:3485:6030":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:2920:13643":{"crate_id":17,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"6:10908:15933":{"crate_id":6,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"1:43970:5999":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"12:299:15898":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:3048:24557":{"crate_id":17,"path":["gimli","common","SectionId"],"kind":"enum"},"1:44093:16081":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:43928:6002":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:10218:16065":{"crate_id":6,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"17:8000:13663":{"crate_id":17,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"18:11465:15701":{"crate_id":18,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"1:47168:11679":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:23043:30143":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:8165:13656":{"crate_id":17,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"5:1794:12341":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:8622:15173":{"crate_id":6,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"7:5477:14596":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:10396:11883":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:11523:5988":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"5:3809:12341":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:6358:12302":{"crate_id":6,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"15:31:16369":{"crate_id":15,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"19:538:12538":{"crate_id":19,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"7:7518:15039":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:41195:16053":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"7:5387:14540":{"crate_id":7,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:7401:38971":{"crate_id":17,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:8667:15174":{"crate_id":6,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"6:11191:15193":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"18:11706:16229":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:10387:120":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:14130:2001":{"crate_id":1,"path":["core","core_arch","arch","x86_64"],"kind":"module"},"6:11018:37224":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"17:3889:12568":{"crate_id":17,"path":["gimli","arch","X86_64"],"kind":"struct"},"6:7354:37287":{"crate_id":6,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:42380:196":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"18:16701:13583":{"crate_id":18,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"7:6758:14873":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"18:10729:12677":{"crate_id":18,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:40720:16024":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:46267:15556":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"18:15769:13326":{"crate_id":18,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"18:667:12660":{"crate_id":18,"path":["object","read","any","Symbol"],"kind":"struct"},"19:643:12533":{"crate_id":19,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:3253:6027":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"23:1031:18023":{"crate_id":23,"path":["typenum","private","IsLessPrivate"],"kind":"trait"},"18:15148:13117":{"crate_id":18,"path":["object","macho","RelocationInfo"],"kind":"struct"},"18:14152:12930":{"crate_id":18,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"7:538:14110":{"crate_id":7,"path":["libc","unix","pollfd"],"kind":"struct"},"1:42552:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"4:472:2655":{"crate_id":4,"path":["digest","ExtendableOutputReset"],"kind":"trait"},"18:12347:16261":{"crate_id":18,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:1630:15906":{"crate_id":6,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:4105:18338":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:21822:18022":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:43207:138":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"18:11998:16241":{"crate_id":18,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"18:11553:16223":{"crate_id":18,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:42895:11885":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"18:14821:13065":{"crate_id":18,"path":["object","macho","TwolevelHint"],"kind":"struct"},"6:11080:2662":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"7:4914:14366":{"crate_id":7,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"7:8008:15085":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"7:5441:14572":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"6:9193:15197":{"crate_id":6,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:39820:214":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"7:5533:14609":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:2570:13627":{"crate_id":17,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"4:527:2336":{"crate_id":4,"path":["digest","core_api","wrapper","CoreWrapper"],"kind":"struct"},"1:3694:17572":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"18:12952:15740":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"19:521:29687":{"crate_id":19,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:2950:13644":{"crate_id":17,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:45908:15524":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:4766:13683":{"crate_id":17,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:6256:15768":{"crate_id":17,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"23:615:6076":{"crate_id":23,"path":["typenum","marker_traits","Bit"],"kind":"trait"},"6:8085:16461":{"crate_id":6,"path":["std","env","JoinPathsError"],"kind":"struct"},"25:87:2328":{"crate_id":25,"path":["const_oid","traits","AssociatedOid"],"kind":"trait"},"1:40786:12402":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"18:14284:12963":{"crate_id":18,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:8489:18298":{"crate_id":6,"path":["std","io","SeekFrom"],"kind":"enum"},"6:5588:16433":{"crate_id":6,"path":["std","process","Child"],"kind":"struct"},"7:5165:14448":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:7980:13662":{"crate_id":17,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"18:16613:12861":{"crate_id":18,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"18:12699:16272":{"crate_id":18,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:5282:13699":{"crate_id":17,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:12362:1825":{"crate_id":6,"path":["std","tuple"],"kind":"primitive"},"7:8290:15109":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:23218:15257":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"18:12776:16278":{"crate_id":18,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"5:1586:15904":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:44843:151":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"6:1103:16383":{"crate_id":6,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:8597:15923":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"12:2539:13979":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:5837:220":{"crate_id":6,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"18:13547:16290":{"crate_id":18,"path":["object","read","RelocationMap"],"kind":"struct"},"19:113:29677":{"crate_id":19,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"18:12869:12800":{"crate_id":18,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:10404:11886":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"18:15121:13114":{"crate_id":18,"path":["object","macho","Nlist64"],"kind":"struct"},"17:4152:13677":{"crate_id":17,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:10034:30462":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:899:11822":{"crate_id":6,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:10179:11903":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"7:5151:14447":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:2217:189":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:6461:12306":{"crate_id":6,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"7:1727:14278":{"crate_id":7,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:4267:13680":{"crate_id":17,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:46555:15584":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:7192:25423":{"crate_id":17,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"18:13398:12797":{"crate_id":18,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:12327:18247":{"crate_id":6,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:4303:38319":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:12353:420":{"crate_id":6,"path":["std","bool"],"kind":"primitive"},"1:4355:12264":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"6:9703:139":{"crate_id":6,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"18:12293:16256":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"7:1589:14196":{"crate_id":7,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"18:11163:12704":{"crate_id":18,"path":["object","read","any","SymbolTable"],"kind":"struct"},"18:16297:13482":{"crate_id":18,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:8859:15192":{"crate_id":6,"path":["std","path","Ancestors"],"kind":"struct"},"1:42589:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:2474:18284":{"crate_id":6,"path":["std","fs","symlink_metadata"],"kind":"function"},"23:1279:6069":{"crate_id":23,"path":["typenum","type_operators","ToInt"],"kind":"trait"},"7:4875:14345":{"crate_id":7,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:34400:17557":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"18:12941:12768":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"18:15989:13384":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:46398:15563":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:40893:134":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:2796:13637":{"crate_id":17,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"12:1105:16385":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:1112:16387":{"crate_id":6,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"18:12082:15709":{"crate_id":18,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:8626:15894":{"crate_id":17,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:11708:16454":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:6064:13653":{"crate_id":17,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:9848:85":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:9416:16535":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:7711:17616":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"7:6672:14842":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"10:480:24404":{"crate_id":10,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"18:13781:12848":{"crate_id":18,"path":["object","elf","Ident"],"kind":"struct"},"7:7316:14941":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"18:14832:13066":{"crate_id":18,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:21771:17770":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"19:80:29675":{"crate_id":19,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"18:14872:13070":{"crate_id":18,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:6682:16446":{"crate_id":6,"path":["std","sync","once","OnceState"],"kind":"struct"},"12:1900:15906":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:11813:16426":{"crate_id":6,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:44838:15515":{"crate_id":1,"path":["core","future","async_drop","Noop"],"kind":"struct"},"7:5044:14428":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:39860:5978":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"6:8616:16472":{"crate_id":6,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"7:6691:14846":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"6:9401:234":{"crate_id":6,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"18:14845:13068":{"crate_id":18,"path":["object","macho","UuidCommand"],"kind":"struct"},"12:708:16373":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:43915:6001":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:5198:13696":{"crate_id":17,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:3207:247":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"6:5622:16437":{"crate_id":6,"path":["std","process","ChildStdout"],"kind":"struct"},"1:12960:17698":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"23:1221:6110":{"crate_id":23,"path":["typenum","type_operators","IsEqual"],"kind":"trait"},"21:94:6045":{"crate_id":21,"path":["crypto_common","sealed","BlockSizes"],"kind":"trait"},"1:42776:11717":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"7:5217:14470":{"crate_id":7,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:2860:13640":{"crate_id":17,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"7:7448:14994":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"12:1580:16389":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:3047:138":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:46252:15555":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"12:364:12272":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"5:2825:15227":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"7:6507:14760":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"23:2621:2334":{"crate_id":23,"path":["typenum","generated","consts","U64"],"kind":"type_alias"},"1:43789:16559":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"18:16385:13504":{"crate_id":18,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:8717:15184":{"crate_id":6,"path":["std","path","Prefix"],"kind":"enum"},"1:5277:32978":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"6:7879:16455":{"crate_id":6,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"12:0:2640":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"1:44540:16108":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"5:3094:15957":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"18:15106:13110":{"crate_id":18,"path":["object","macho","Nlist32"],"kind":"struct"},"1:39890:16548":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"18:15077:13107":{"crate_id":18,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"18:12648:12756":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:8503:13886":{"crate_id":17,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"6:1925:16408":{"crate_id":6,"path":["std","env","Args"],"kind":"struct"},"6:5638:16438":{"crate_id":6,"path":["std","process","ChildStderr"],"kind":"struct"},"1:33909:17553":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"6:3302:38914":{"crate_id":6,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:5255:13698":{"crate_id":17,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:6173:15761":{"crate_id":17,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"18:15602:13288":{"crate_id":18,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"18:16632:13569":{"crate_id":18,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"5:7494:11822":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:2500:18294":{"crate_id":6,"path":["std","fs","read_dir"],"kind":"function"},"1:2705:103":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"6:9176:15196":{"crate_id":6,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:39684:17571":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"18:13515:25495":{"crate_id":18,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:45993:15533":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"12:2121:15875":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"6:7924:12321":{"crate_id":6,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:5224:13697":{"crate_id":17,"path":["gimli","constants","DwDsc"],"kind":"struct"},"5:2182:16514":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"6:10486:114":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"17:5379:13702":{"crate_id":17,"path":["gimli","constants","DwLnct"],"kind":"struct"},"12:2400:5986":{"crate_id":12,"path":["hashbrown","table","IterMut"],"kind":"struct"},"17:7044:13655":{"crate_id":17,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:12370:900":{"crate_id":6,"path":["std","i16"],"kind":"primitive"},"17:2724:13634":{"crate_id":17,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"12:809:12379":{"crate_id":12,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"18:506:12614":{"crate_id":18,"path":["object","read","any","Section"],"kind":"struct"},"24:61:18022":{"crate_id":24,"path":["block_buffer","sealed","Sealed"],"kind":"trait"},"5:5809:12376":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"7:5357:14525":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"5:7660:18107":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:3438:16422":{"crate_id":6,"path":["std","io","stdio","Stderr"],"kind":"struct"},"18:15540:13277":{"crate_id":18,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"12:1914:15908":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:12141:12337":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"5:7534:15969":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"1:21842:15234":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"10:0:2638":{"crate_id":10,"path":["miniz_oxide"],"kind":"module"},"17:7471:13776":{"crate_id":17,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"5:2304:15961":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:2746:16416":{"crate_id":6,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:5602:16436":{"crate_id":6,"path":["std","process","ChildStdin"],"kind":"struct"},"6:5654:114":{"crate_id":6,"path":["std","process","Command"],"kind":"struct"},"5:6016:12358":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"4:519:5962":{"crate_id":4,"path":["digest","core_api","rt_variable","RtVariableCoreWrapper"],"kind":"struct"},"17:4241:13679":{"crate_id":17,"path":["gimli","constants","DwCfa"],"kind":"struct"},"18:12860:15735":{"crate_id":18,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"5:5150:12264":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"18:12216:15721":{"crate_id":18,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"6:8870:15929":{"crate_id":6,"path":["std","path","StripPrefixError"],"kind":"struct"},"5:7836:12379":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"18:11475:25506":{"crate_id":18,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"19:635:12553":{"crate_id":19,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"7:5658:14667":{"crate_id":7,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"6:378:16394":{"crate_id":6,"path":["std","thread","scoped","Scope"],"kind":"struct"},"12:835:16375":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"18:10274:25483":{"crate_id":18,"path":["object","common","SymbolScope"],"kind":"enum"},"1:47247:11684":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"12:873:16380":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:43941:5997":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:2327:18281":{"crate_id":6,"path":["std","fs","read_to_string"],"kind":"function"},"18:12906:12765":{"crate_id":18,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"7:8330:15117":{"crate_id":7,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"18:11952:16237":{"crate_id":18,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:41036:16047":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:32391:16547":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:13733:205":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"6:8022:12325":{"crate_id":6,"path":["std","thread","Thread"],"kind":"struct"},"17:6502:24527":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:41944:15475":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"7:5462:14587":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"6:1614:5985":{"crate_id":6,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:38490:17561":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"18:13157:16285":{"crate_id":18,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"6:9103:16477":{"crate_id":6,"path":["std","process","CommandArgs"],"kind":"struct"},"1:44850:219":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"22:146:2488":{"crate_id":22,"path":["hybrid_array","Array"],"kind":"struct"},"1:22221:18022":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"17:6953:15829":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:7282:15857":{"crate_id":17,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"7:5117:14444":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"18:16179:13452":{"crate_id":18,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:12981:17713":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"18:16642:13570":{"crate_id":18,"path":["object","xcoff","Symbol32"],"kind":"struct"},"23:1905:18033":{"crate_id":23,"path":["typenum","uint","SetBit"],"kind":"trait"},"1:41388:16056":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"12:1893:12379":{"crate_id":12,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"5:1011:5985":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"23:1016:18062":{"crate_id":23,"path":["typenum","private","PrivateMax"],"kind":"trait"},"1:44013:16075":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"18:13970:12884":{"crate_id":18,"path":["object","elf","Rela64"],"kind":"struct"},"7:6526:14762":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:12721:16084":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:8064:18246":{"crate_id":6,"path":["std","backtrace","RawFrame"],"kind":"enum"},"18:13385:15743":{"crate_id":18,"path":["object","read","ObjectMap"],"kind":"struct"},"5:2377:15964":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"5:1604:16388":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"19:698:15691":{"crate_id":19,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:6123:13652":{"crate_id":17,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"18:15050:13103":{"crate_id":18,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:2932:17362":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"19:680:15687":{"crate_id":19,"path":["memchr","memmem","Finder"],"kind":"struct"},"7:8353:15123":{"crate_id":7,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:4925:18355":{"crate_id":6,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:39910:6024":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"12:772:15904":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"18:16341:13497":{"crate_id":18,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:46235:15554":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:7542:15874":{"crate_id":17,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"6:4672:18368":{"crate_id":6,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"6:10412:18418":{"crate_id":6,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"5:1636:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:2081:197":{"crate_id":6,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"7:5282:14503":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:6509:220":{"crate_id":6,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"12:328:15901":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:42218:5986":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"5:1614:16373":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"12:2559:13983":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:44446:16096":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:13706:29804":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"7:7469:15001":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:6914:15826":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"23:654:6064":{"crate_id":23,"path":["typenum","marker_traits","PowerOfTwo"],"kind":"trait"},"19:507:12533":{"crate_id":19,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"4:435:2660":{"crate_id":4,"path":["digest","digest","DynDigestWithOid"],"kind":"trait"},"7:6882:14904":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:44909:15516":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"5:1424:16387":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"6:8519:16051":{"crate_id":6,"path":["std","io","Take"],"kind":"struct"},"6:962:16375":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"18:11653:12698":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:40865:15953":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"23:828:18045":{"crate_id":23,"path":["typenum","private","PrivateSub"],"kind":"trait"},"18:12260:25597":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"23:0:2500":{"crate_id":23,"path":["typenum"],"kind":"module"},"6:9341:37219":{"crate_id":6,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:4873:13686":{"crate_id":17,"path":["gimli","constants","DwDs"],"kind":"struct"},"18:11902:12709":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:23196:15255":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"18:16507:12847":{"crate_id":18,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"17:2748:13635":{"crate_id":17,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"25:180:12515":{"crate_id":25,"path":["const_oid","arcs","RootArcs"],"kind":"struct"},"1:40796:16549":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:40542:30145":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:44193:16085":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:8645:14969":{"crate_id":6,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:46605:15586":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"18:14001:12893":{"crate_id":18,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"18:11691:16228":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:22729:17849":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"18:13266:25493":{"crate_id":18,"path":["object","read","ObjectKind"],"kind":"enum"},"13:0:2641":{"crate_id":13,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:6961:15989":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"7:5334:14522":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"12:2366:16393":{"crate_id":12,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"23:1251:6113":{"crate_id":23,"path":["typenum","type_operators","IsNotEqual"],"kind":"trait"},"6:12354:1184":{"crate_id":6,"path":["std","never"],"kind":"primitive"},"1:8382:6344":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"18:1339:16198":{"crate_id":18,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:11367:6007":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"7:5295:14508":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:4213:18344":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:7495:15867":{"crate_id":17,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:32414:237":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"6:4561:16431":{"crate_id":6,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:3834:13675":{"crate_id":17,"path":["gimli","arch","X86"],"kind":"struct"},"18:12191:15718":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:40823:6001":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:41404:16058":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"21:99:2496":{"crate_id":21,"path":["crypto_common","OutputSizeUser"],"kind":"trait"},"17:7883:13829":{"crate_id":17,"path":["gimli","read","op","Expression"],"kind":"struct"},"23:9598:5947":{"crate_id":23,"path":["typenum","uint","UInt"],"kind":"struct"},"1:21693:30318":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1:43960:5998":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:3110:13669":{"crate_id":17,"path":["gimli","common","DwoId"],"kind":"struct"},"18:16171:13449":{"crate_id":18,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:8050:18245":{"crate_id":6,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"18:14796:13061":{"crate_id":18,"path":["object","macho","DylibReference"],"kind":"struct"},"18:14140:12927":{"crate_id":18,"path":["object","elf","HashHeader"],"kind":"struct"},"18:16241:13474":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:43114:15494":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:7212:15843":{"crate_id":17,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:3440:16423":{"crate_id":6,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:47137:11677":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:11223:15211":{"crate_id":6,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"1:40570:16016":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:38435:17560":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:2761:201":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"7:1667:14255":{"crate_id":7,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"7:4921:14370":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:43989:15508":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:7999:12524":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:4873:11740":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"6:1849:701":{"crate_id":6,"path":["std","env"],"kind":"module"},"17:2684:13632":{"crate_id":17,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"10:500:14046":{"crate_id":10,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"12:854:16378":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:532:12281":{"crate_id":6,"path":["std","thread","PanicGuard"],"kind":"struct"},"7:7308:14936":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:26147:267":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:1647:15909":{"crate_id":6,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:3338:13788":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:10648:12127":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"23:1007:18060":{"crate_id":23,"path":["typenum","private","PrivateMin"],"kind":"trait"},"18:15739:13321":{"crate_id":18,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"5:3373:15909":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"25:235:133":{"crate_id":25,"path":["const_oid","encoder","Encoder"],"kind":"struct"},"21:108:18073":{"crate_id":21,"path":["crypto_common","InnerUser"],"kind":"trait"},"1:23295:15264":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"18:14312:12970":{"crate_id":18,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"14:229:13977":{"crate_id":14,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"23:1168:6107":{"crate_id":23,"path":["typenum","type_operators","Same"],"kind":"trait"},"1:46103:15540":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:8565:15893":{"crate_id":17,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:3695:13674":{"crate_id":17,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:896:16291":{"crate_id":17,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"1:2012:1697":{"crate_id":1,"path":["core","mem","size_of"],"kind":"function"},"6:10712:16420":{"crate_id":6,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"8:0:1917":{"crate_id":8,"path":["unwind"],"kind":"module"},"5:1239:34091":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"18:15812:13334":{"crate_id":18,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"7:1507:14147":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:6843:15821":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"5:7767:15978":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:44265:16089":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"12:396:12274":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:40702:15470":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:6967:15988":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"18:14127:12926":{"crate_id":18,"path":["object","elf","NoteHeader64"],"kind":"struct"},"18:13890:12873":{"crate_id":18,"path":["object","elf","Sym64"],"kind":"struct"},"17:5709:25415":{"crate_id":17,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:4111:18337":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:31201:11775":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:46982:15626":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"5:1223:36644":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"6:4772:18386":{"crate_id":6,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"18:2406:16200":{"crate_id":18,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"18:15701:13307":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:43413:157":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"6:9545:16408":{"crate_id":6,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"5:2171:16513":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"18:11114:16215":{"crate_id":18,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"18:13322:25494":{"crate_id":18,"path":["object","read","SymbolSection"],"kind":"enum"},"18:12605:12704":{"crate_id":18,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:7717:37372":{"crate_id":6,"path":["std","panicking","Hook"],"kind":"enum"},"1:11198:5985":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"6:6853:16450":{"crate_id":6,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"1:46007:15534":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"18:14299:12968":{"crate_id":18,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"18:10394:25487":{"crate_id":18,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:43636:6016":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:10595:16477":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"5:0:309":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:8585:16365":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"5:7594:11822":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:40974:16042":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"21:114:18074":{"crate_id":21,"path":["crypto_common","KeyInit"],"kind":"trait"},"6:8590:15922":{"crate_id":6,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:2550:13626":{"crate_id":17,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"18:14220:12934":{"crate_id":18,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:8223:15882":{"crate_id":17,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"7:1530:14157":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:23105:16006":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:628:18240":{"crate_id":6,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:12365:742":{"crate_id":6,"path":["std","f16"],"kind":"primitive"},"18:15064:13106":{"crate_id":18,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:1902:16407":{"crate_id":6,"path":["std","env","SplitPaths"],"kind":"struct"},"1:22248:5980":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:3649:254":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"5:3465:12379":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"18:16132:13435":{"crate_id":18,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:43404:12129":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:1964:12264":{"crate_id":1,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"6:8004:15126":{"crate_id":6,"path":["std","thread","ThreadId"],"kind":"struct"},"1:43435:16072":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:32415:6346":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"6:4325:18363":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"25:89:2672":{"crate_id":25,"path":["const_oid","traits","DynAssociatedOid"],"kind":"trait"},"1:43169:30250":{"crate_id":1,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"5:6884:12341":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:6572:186":{"crate_id":6,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"7:4902:14357":{"crate_id":7,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"18:12816:12763":{"crate_id":18,"path":["object","read","pe","export","Export"],"kind":"struct"},"5:7043:12376":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:23240:15259":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"7:564:14123":{"crate_id":7,"path":["libc","unix","itimerval"],"kind":"struct"},"6:5098:18388":{"crate_id":6,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"18:11016:16213":{"crate_id":18,"path":["object","read","any","SectionIterator"],"kind":"struct"},"5:7704:17638":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:2785:16417":{"crate_id":6,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:44165:5987":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"12:1920:15909":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"1:2958:163":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"18:15931:13370":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:11204:15194":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:8641:16476":{"crate_id":6,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"5:3875:16513":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"18:13290:12628":{"crate_id":18,"path":["object","read","SectionIndex"],"kind":"struct"},"18:12711:16273":{"crate_id":18,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"18:10843:12681":{"crate_id":18,"path":["object","read","util","StringTable"],"kind":"struct"},"18:12392:12719":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"18:12135:15714":{"crate_id":18,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"12:1601:16390":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"18:15864:13351":{"crate_id":18,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"18:11818:16234":{"crate_id":18,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:6188:15763":{"crate_id":17,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"18:16311:13489":{"crate_id":18,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:6970:13650":{"crate_id":17,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"18:15946:13374":{"crate_id":18,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:47324:6534":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"18:15496:13272":{"crate_id":18,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"6:11942:37357":{"crate_id":6,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:6640:16301":{"crate_id":17,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"1:43858:5983":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"18:14933:13080":{"crate_id":18,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"5:1645:16512":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"18:14438:12993":{"crate_id":18,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"18:12008:12607":{"crate_id":18,"path":["object","read","elf","note","Note"],"kind":"struct"},"4:366:5960":{"crate_id":4,"path":["digest","core_api","XofReaderCore"],"kind":"trait"},"1:12085:2487":{"crate_id":1,"path":["core","slice","raw","from_ref"],"kind":"function"},"12:1049:16383":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:11680:15220":{"crate_id":6,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:44959:16126":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"18:16684:13581":{"crate_id":18,"path":["object","xcoff","FileAux64"],"kind":"struct"},"19:608:16187":{"crate_id":19,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:2605:11698":{"crate_id":1,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"1:46383:15562":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"19:623:38992":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:43124:11711":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:42122:15922":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:2820:13638":{"crate_id":17,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:44211:16086":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"18:16775:13603":{"crate_id":18,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"17:4694:13682":{"crate_id":17,"path":["gimli","constants","DwAt"],"kind":"struct"},"18:16812:13609":{"crate_id":18,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"1:23747:236":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:1080:15875":{"crate_id":6,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:6588:13715":{"crate_id":17,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"5:5545:18127":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:2640:13630":{"crate_id":17,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:9280:16481":{"crate_id":6,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"6:597:16396":{"crate_id":6,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:46045:15536":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:10709:16418":{"crate_id":6,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"7:8273:15104":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"18:16036:13397":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:3639:5979":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:33641:17550":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:7578:15201":{"crate_id":17,"path":["gimli","read","op","Operation"],"kind":"enum"},"23:1202:6066":{"crate_id":23,"path":["typenum","type_operators","Min"],"kind":"trait"},"5:7566:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"7:5405:14551":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"18:16822:12878":{"crate_id":18,"path":["object","xcoff","Rel32"],"kind":"struct"},"7:8319:15116":{"crate_id":7,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:11402:5993":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"18:15905:13360":{"crate_id":18,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"12:2466:12379":{"crate_id":12,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"7:5471:14593":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"7:6652:14837":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:46622:15587":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:47194:11681":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:9406:235":{"crate_id":6,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"7:5682:14679":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:46284:15557":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:30801:11754":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"7:7368:14969":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"23:1198:6070":{"crate_id":23,"path":["typenum","type_operators","PartialDiv"],"kind":"trait"},"17:4404:13681":{"crate_id":17,"path":["gimli","constants","DwTag"],"kind":"struct"},"12:1880:5985":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"18:10031:25476":{"crate_id":18,"path":["object","common","Architecture"],"kind":"enum"},"1:42144:15485":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:13889:116":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"19:548:153":{"crate_id":19,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"18:3720:16205":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"18:11566:16224":{"crate_id":18,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"7:491:14078":{"crate_id":7,"path":["libc","unix","rlimit"],"kind":"struct"},"1:5315:16533":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"18:13733:12833":{"crate_id":18,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:40912:16034":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:46815:15623":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"7:5196:14458":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:44729:17738":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:32473:6347":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"17:2467:13617":{"crate_id":17,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:23058:30159":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"19:670:16192":{"crate_id":19,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"5:3339:15908":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:3679:30419":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:8233:15921":{"crate_id":6,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"18:472:16195":{"crate_id":18,"path":["object","read","any","Segment"],"kind":"struct"},"6:9384:187":{"crate_id":6,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:9109:199":{"crate_id":6,"path":["std","process","Output"],"kind":"struct"},"1:43840:5984":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"18:14902:13075":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"18:13570:25496":{"crate_id":18,"path":["object","read","CompressionFormat"],"kind":"enum"},"23:2525:2332":{"crate_id":23,"path":["typenum","generated","consts","U32"],"kind":"type_alias"},"6:685:18242":{"crate_id":6,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:9361:15204":{"crate_id":6,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"24:163:5961":{"crate_id":24,"path":["block_buffer","BlockBuffer"],"kind":"struct"},"18:11678:16227":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:9274:116":{"crate_id":6,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:22867:15996":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"0:105:2364":{"crate_id":0,"path":["sha2","Sha512_256"],"kind":"type_alias"},"12:1085:38941":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"6:505:12280":{"crate_id":6,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"6:12367:761":{"crate_id":6,"path":["std","f64"],"kind":"primitive"},"1:40852:16027":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:8267:13848":{"crate_id":17,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"18:10597:12673":{"crate_id":18,"path":["object","endian","U32Bytes"],"kind":"struct"},"18:13006:12773":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"6:9256:15200":{"crate_id":6,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"7:7539:15053":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:2486:13623":{"crate_id":17,"path":["gimli","common","Register"],"kind":"struct"},"5:789:250":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:2150:11712":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"7:5007:14410":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"18:14708:13030":{"crate_id":18,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"7:5127:14445":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:6037:12296":{"crate_id":6,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"7:7414:14988":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:7907:13830":{"crate_id":17,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"18:15963:13378":{"crate_id":18,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"5:1625:16374":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"18:11075:38983":{"crate_id":18,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"7:6917:14929":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:9120:15193":{"crate_id":6,"path":["std","process","ExitStatus"],"kind":"struct"},"1:4904:11896":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:42088:30155":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"18:12204:15719":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"6:11674:16504":{"crate_id":6,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"21:118:18075":{"crate_id":21,"path":["crypto_common","KeyIvInit"],"kind":"trait"},"6:8526:12678":{"crate_id":6,"path":["std","io","Bytes"],"kind":"struct"},"1:8059:12297":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"7:6631:14825":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:8341:18328":{"crate_id":6,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:8209:13654":{"crate_id":17,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:234:226":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:8280:146":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"7:6777:14876":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"6:10984:37289":{"crate_id":6,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:6696:16320":{"crate_id":17,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:6678:16057":{"crate_id":6,"path":["std","sync","once","Once"],"kind":"struct"},"25:193:2494":{"crate_id":25,"path":["const_oid","buffer","Buffer"],"kind":"struct"},"17:6731:16330":{"crate_id":17,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"23:998:18021":{"crate_id":23,"path":["typenum","private","PrivateRem"],"kind":"trait"},"18:14416:12986":{"crate_id":18,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:7554:25425":{"crate_id":17,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:32398:11894":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"5:898:12344":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"24:151:138":{"crate_id":24,"path":["block_buffer","Error"],"kind":"struct"},"5:1548:5986":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"6:8249:16465":{"crate_id":6,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"23:1241:6112":{"crate_id":23,"path":["typenum","type_operators","IsLessOrEqual"],"kind":"trait"},"18:3503:16204":{"crate_id":18,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:2040:676":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"6:8608:16475":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:23207:15256":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"23:1184:6068":{"crate_id":23,"path":["typenum","type_operators","Pow"],"kind":"trait"},"6:5965:16443":{"crate_id":6,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:3283:17565":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"18:14997:13099":{"crate_id":18,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"19:765:29686":{"crate_id":19,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:31174:196":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"18:10141:25479":{"crate_id":18,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:43190:11711":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"23:1231:6111":{"crate_id":23,"path":["typenum","type_operators","IsGreater"],"kind":"trait"},"18:12976:12769":{"crate_id":18,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:12966:16536":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"4:566:2658":{"crate_id":4,"path":["digest","InvalidBufferSize"],"kind":"struct"},"5:7719:15975":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"21:0:2648":{"crate_id":21,"path":["crypto_common"],"kind":"module"},"23:814:18037":{"crate_id":23,"path":["typenum","private","PrivateAnd"],"kind":"trait"},"1:39745:213":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"18:15973:13381":{"crate_id":18,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"18:11926:12711":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"18:14886:13073":{"crate_id":18,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"6:677:16398":{"crate_id":6,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"18:12687:16271":{"crate_id":18,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"4:493:15230":{"crate_id":4,"path":["digest","core_api","ct_variable","NoOid"],"kind":"struct"},"1:40883:16030":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:11035:15195":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"1:12661:16078":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:9442:15205":{"crate_id":6,"path":["std","time","SystemTime"],"kind":"struct"},"23:1878:18031":{"crate_id":23,"path":["typenum","uint","GetBit"],"kind":"trait"},"23:1151:18044":{"crate_id":23,"path":["typenum","private","PrivateSquareRoot"],"kind":"trait"},"18:10793:12559":{"crate_id":18,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"18:14099:12916":{"crate_id":18,"path":["object","elf","Vernaux"],"kind":"struct"},"17:4929:13688":{"crate_id":17,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:11051:239":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"18:12962:25623":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"23:9072:5950":{"crate_id":23,"path":["typenum","int","NInt"],"kind":"struct"},"1:10394:11882":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:10613:157":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:42315:226":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:7605:2532":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:9853:92":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:13618:16541":{"crate_id":1,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"1:3660:17567":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"5:6258:12264":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"7:6638:14826":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"5:3352:34077":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"15:165:24492":{"crate_id":15,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:2900:13642":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"6:5289:16432":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"18:12886:15736":{"crate_id":18,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"23:613:195":{"crate_id":23,"path":["typenum","marker_traits","Ord"],"kind":"trait"},"1:3268:13787":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:41046:16048":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"6:2015:792":{"crate_id":6,"path":["std","ffi"],"kind":"module"},"1:47285:11686":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"18:12897:15737":{"crate_id":18,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:2952:78":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"21:72:2493":{"crate_id":21,"path":["crypto_common","BlockSizeUser"],"kind":"trait"},"7:7454:14996":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:7259:15856":{"crate_id":17,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:12775:6006":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:32384:13827":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"19:481:15682":{"crate_id":19,"path":["memchr","cow","CowBytes"],"kind":"struct"},"4:368:2499":{"crate_id":4,"path":["digest","core_api","VariableOutputCore"],"kind":"trait"},"6:12369:918":{"crate_id":6,"path":["std","i8"],"kind":"primitive"},"7:7332:14953":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:5992:16444":{"crate_id":6,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"18:14773:13060":{"crate_id":18,"path":["object","macho","DylibModule64"],"kind":"struct"},"6:11092:12327":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:4141:18339":{"crate_id":6,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:2472:11687":{"crate_id":6,"path":["std","fs","metadata"],"kind":"function"},"18:13169:16286":{"crate_id":18,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"7:4947:14381":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:6573:15813":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:4810:13684":{"crate_id":17,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:8257:15912":{"crate_id":6,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:11413:14043":{"crate_id":6,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"18:14672:13024":{"crate_id":18,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:8669:13827":{"crate_id":17,"path":["gimli","read","value","Value"],"kind":"enum"},"1:46074:15538":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:6794:15818":{"crate_id":17,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"5:1379:15875":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"10:176:24471":{"crate_id":10,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"6:12358:1324":{"crate_id":6,"path":["std","pointer"],"kind":"primitive"},"19:706:15693":{"crate_id":19,"path":["memchr","memmem","Searcher"],"kind":"struct"},"18:2437:16203":{"crate_id":18,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:6084:15752":{"crate_id":17,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:7337:13767":{"crate_id":17,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:40944:16039":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"18:11958:16238":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:6837:16333":{"crate_id":17,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:40715:107":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"9:0:2369":{"crate_id":9,"path":["cfg_if"],"kind":"module"},"18:3854:16206":{"crate_id":18,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:22974:16001":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"5:7649:15971":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:9527:16536":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"18:15439:13237":{"crate_id":18,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"21:112:2491":{"crate_id":21,"path":["crypto_common","AlgorithmName"],"kind":"trait"},"6:573:12282":{"crate_id":6,"path":["std","thread","Packet"],"kind":"struct"},"1:3258:6031":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:908:16194":{"crate_id":17,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"7:5311:14515":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:12491:5974":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:33157:13784":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:3280:17564":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"1:46316:15559":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"19:589:12541":{"crate_id":19,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"5:6795:11822":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"7:8296:15110":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:12008:6004":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:46185:15552":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:11949:15952":{"crate_id":6,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"7:1643:14238":{"crate_id":7,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:44652:16119":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:32416:244":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"12:1907:15907":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"18:11173:38988":{"crate_id":18,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:2727:113":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:40599:16013":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:4594:15980":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"7:6381:14683":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"18:12249:16253":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"6:9154:5985":{"crate_id":6,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:46366:15561":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"11:36:13985":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"6:4155:18340":{"crate_id":6,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:22226:17772":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"1:44846:164":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:40987:16043":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:40921:16035":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:46443:15580":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:44342:16019":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"7:1551:14172":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"4:357:2498":{"crate_id":4,"path":["digest","core_api","UpdateCore"],"kind":"trait"},"5:5309:12373":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:2141:11713":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"5:3097:15226":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:43396:16071":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"6:7999:16457":{"crate_id":6,"path":["std","thread","Builder"],"kind":"struct"},"5:291:12341":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:32474:11763":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"7:7341:14959":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"7:8284:15108":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:23116:17392":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"7:545:14113":{"crate_id":7,"path":["libc","unix","winsize"],"kind":"struct"},"1:13969:152":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"18:12723:16274":{"crate_id":18,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:40903:16032":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:8222:128":{"crate_id":6,"path":["std","fs","DirBuilder"],"kind":"struct"},"18:12280:16254":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"7:465:14065":{"crate_id":7,"path":["libc","unix","group"],"kind":"struct"},"1:23229:15258":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"18:16377:13501":{"crate_id":18,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:991:16381":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:40843:16551":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"18:13719:12832":{"crate_id":18,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"23:1051:18024":{"crate_id":23,"path":["typenum","private","IsEqualPrivate"],"kind":"trait"},"18:11539:12694":{"crate_id":18,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"7:8302:15111":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"7:517:14098":{"crate_id":7,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:8803:18411":{"crate_id":6,"path":["std","path","Component"],"kind":"enum"},"18:13554:12805":{"crate_id":18,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"1:34054:17555":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"18:15573:13280":{"crate_id":18,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"18:15852:13345":{"crate_id":18,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:2530:13625":{"crate_id":17,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:22999:15240":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"6:11503:12329":{"crate_id":6,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"23:9040:5949":{"crate_id":23,"path":["typenum","int","PInt"],"kind":"struct"},"6:4886:18368":{"crate_id":6,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:46510:15583":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:43443:16073":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:3450:141":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"6:6199:220":{"crate_id":6,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"18:14573:13011":{"crate_id":18,"path":["object","macho","SubClientCommand"],"kind":"struct"},"5:1533:5985":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"7:5255:14486":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"18:15418:13229":{"crate_id":18,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:47232:11683":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"19:531:15684":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:10406:11887":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"18:15836:13343":{"crate_id":18,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"19:515:12536":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:5258:16432":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"5:3095:34241":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"22:5356:6023":{"crate_id":22,"path":["hybrid_array","iter","TryFromIteratorError"],"kind":"struct"},"6:11853:16427":{"crate_id":6,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"18:12826:15726":{"crate_id":18,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:43950:6000":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:12986:17712":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"18:16494:12833":{"crate_id":18,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"4:385:2503":{"crate_id":4,"path":["digest","digest","HashMarker"],"kind":"trait"},"7:1684:14262":{"crate_id":7,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:9397:12264":{"crate_id":6,"path":["std","sync","poison","Guard"],"kind":"struct"},"7:5570:14628":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"18:13757:12847":{"crate_id":18,"path":["object","elf","FileHeader64"],"kind":"struct"},"5:4491:265":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:42363:5986":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"6:9220:18433":{"crate_id":6,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:36449:13792":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"7:1494:14141":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"7:6623:14824":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"18:16761:13599":{"crate_id":18,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"17:8320:25429":{"crate_id":17,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:3126:24558":{"crate_id":17,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:11247:5989":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"22:0:2649":{"crate_id":22,"path":["hybrid_array"],"kind":"module"},"23:785:18049":{"crate_id":23,"path":["typenum","private","Trim"],"kind":"trait"},"6:6867:12314":{"crate_id":6,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"5:4307:12264":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:5689:13706":{"crate_id":17,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"23:8998:5951":{"crate_id":23,"path":["typenum","bit","B0"],"kind":"struct"},"1:3202:118":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:33369:17549":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"5:3940:12379":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"7:5025:14419":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"5:3729:5986":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"12:1005:15875":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:21938:18022":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:12359:335":{"crate_id":6,"path":["std","array"],"kind":"primitive"},"6:11657:6648":{"crate_id":6,"path":["std","sys","thread_local","fast_local","eager","State"],"kind":"enum"},"7:5241:14481":{"crate_id":7,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"23:621:2501":{"crate_id":23,"path":["typenum","marker_traits","Unsigned"],"kind":"trait"},"7:5641:14663":{"crate_id":7,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:41437:16060":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"18:12359:16262":{"crate_id":18,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"18:11878:12704":{"crate_id":18,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"7:5036:14423":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"4:484:2657":{"crate_id":4,"path":["digest","VariableOutputReset"],"kind":"trait"},"18:2227:16199":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"19:0:2647":{"crate_id":19,"path":["memchr"],"kind":"module"},"23:1190:6063":{"crate_id":23,"path":["typenum","type_operators","Cmp"],"kind":"trait"},"1:6972:2494":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"6:10346:16489":{"crate_id":6,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"19:754:15700":{"crate_id":19,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"5:3860:15912":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:4478:17587":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:21948:17767":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"18:15286:13123":{"crate_id":18,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"7:4896:14354":{"crate_id":7,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:44111:16082":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"18:14975:13088":{"crate_id":18,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:8755:17651":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"23:989:18019":{"crate_id":23,"path":["typenum","private","PrivateDivInt"],"kind":"trait"},"1:38380:17559":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"10:390:24406":{"crate_id":10,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"7:5179:14449":{"crate_id":7,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:1642:15908":{"crate_id":6,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:5256:438":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"5:2594:15223":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"18:11065:16214":{"crate_id":18,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"6:12374:1865":{"crate_id":6,"path":["std","u8"],"kind":"primitive"},"18:12163:15716":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"7:5057:14432":{"crate_id":7,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"18:317:16193":{"crate_id":18,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:42663:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:6389:16294":{"crate_id":17,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:44475:16105":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"18:15160:13121":{"crate_id":18,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:11306:15213":{"crate_id":6,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"19:651:12533":{"crate_id":19,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:45940:15526":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:45846:15520":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"12:2301:15875":{"crate_id":12,"path":["hashbrown","table","Entry"],"kind":"enum"},"18:14335:12974":{"crate_id":18,"path":["object","macho","FatArch32"],"kind":"struct"},"1:11329:5990":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"18:16008:13389":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"18:11985:16240":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:40731:17638":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:10503:37501":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"1:47157:6639":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:44567:16109":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"5:4142:12358":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"21:110:2662":{"crate_id":21,"path":["crypto_common","Reset"],"kind":"trait"},"21:81:6045":{"crate_id":21,"path":["crypto_common","BlockSizes"],"kind":"trait"},"1:8749:17614":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:10325:16407":{"crate_id":6,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"17:6205:25417":{"crate_id":17,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"18:5131:16207":{"crate_id":18,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"18:14019:12894":{"crate_id":18,"path":["object","elf","Dyn32"],"kind":"struct"},"1:46688:15589":{"crate_id":1,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"18:14031:12897":{"crate_id":18,"path":["object","elf","Dyn64"],"kind":"struct"},"6:2323:6038":{"crate_id":6,"path":["std","fs","read"],"kind":"function"},"12:1064:24485":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:6781:13721":{"crate_id":17,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"18:15844:13344":{"crate_id":18,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"6:4010:16428":{"crate_id":6,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"18:15876:13352":{"crate_id":18,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:4169:18342":{"crate_id":6,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"4:508:2337":{"crate_id":4,"path":["digest","core_api","ct_variable","CtVariableCoreWrapper"],"kind":"struct"},"1:11481:5991":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:12507:17714":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"7:485:14076":{"crate_id":7,"path":["libc","unix","timespec"],"kind":"struct"},"18:14405:12985":{"crate_id":18,"path":["object","macho","LcStr"],"kind":"struct"},"6:7869:12660":{"crate_id":6,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:3576:211":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:22607:11698":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"1:44860:227":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"6:8196:15917":{"crate_id":6,"path":["std","fs","Permissions"],"kind":"struct"},"7:1711:14273":{"crate_id":7,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"18:15665:13302":{"crate_id":18,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"18:11805:16233":{"crate_id":18,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"18:15655:13301":{"crate_id":18,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:2724:12286":{"crate_id":6,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:6713:16322":{"crate_id":17,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"18:15714:13313":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:3249:11710":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"17:6042:13651":{"crate_id":17,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:9162:16478":{"crate_id":6,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:23174:15253":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"1:2708:104":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"7:6449:14727":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:47011:15627":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"5:6153:18136":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:42276:17665":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"7:578:14131":{"crate_id":7,"path":["libc","unix","servent"],"kind":"struct"},"1:40965:16041":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"18:14560:13009":{"crate_id":18,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:41006:16045":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"10:445:24405":{"crate_id":10,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:44982:16127":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:2840:13639":{"crate_id":17,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"5:6535:18146":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"5:7514:12358":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"18:14738:13049":{"crate_id":18,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"7:6534:14767":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"18:11291:38986":{"crate_id":18,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:44618:17728":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"18:13055:12694":{"crate_id":18,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"1:46717:15590":{"crate_id":1,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"18:16728:13592":{"crate_id":18,"path":["object","xcoff","FunAux32"],"kind":"struct"},"1:40953:16040":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"12:102:15897":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:47040:15628":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:0:2645":{"crate_id":17,"path":["gimli"],"kind":"module"},"5:3105:33942":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:44670:16121":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"6:8228:15918":{"crate_id":6,"path":["std","hash","random","RandomState"],"kind":"struct"},"23:9642:5948":{"crate_id":23,"path":["typenum","uint","UTerm"],"kind":"struct"},"1:22:824":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"6:12373:893":{"crate_id":6,"path":["std","i128"],"kind":"primitive"},"1:44029:12678":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:8241:16464":{"crate_id":6,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"7:6790:14883":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:44425:17727":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"18:15939:13373":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:8298:15883":{"crate_id":17,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:327:24513":{"crate_id":16,"path":["addr2line","RangeAttributes"],"kind":"struct"},"7:5019:14416":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"15:187:24496":{"crate_id":15,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:42371:11822":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"21:102:18071":{"crate_id":21,"path":["crypto_common","KeySizeUser"],"kind":"trait"},"12:2420:11822":{"crate_id":12,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"1:10334:226":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"7:5366:14529":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:5757:13707":{"crate_id":17,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"7:6823:14892":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:6942:15828":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"6:10948:140":{"crate_id":6,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"7:1539:14163":{"crate_id":7,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:5958:16440":{"crate_id":6,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:11790:12331":{"crate_id":6,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"18:16198:13458":{"crate_id":18,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:22687:18022":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"18:10534:12670":{"crate_id":18,"path":["object","endian","LittleEndian"],"kind":"struct"},"18:15953:13375":{"crate_id":18,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:42739:98":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"7:7391:14987":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:43628:15506":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"18:11457:12692":{"crate_id":18,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"6:9146:15195":{"crate_id":6,"path":["std","process","ExitCode"],"kind":"struct"},"1:14024:17763":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"18:15586:13285":{"crate_id":18,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"5:7691:15972":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"6:3908:16427":{"crate_id":6,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:9315:16485":{"crate_id":6,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"6:8169:12608":{"crate_id":6,"path":["std","fs","Metadata"],"kind":"struct"},"21:145:12531":{"crate_id":21,"path":["crypto_common","hazmat","DeserializeStateError"],"kind":"struct"},"1:3288:17566":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"18:13983:12885":{"crate_id":18,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"18:14358:12979":{"crate_id":18,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:1833:17497":{"crate_id":1,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"7:4964:14387":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"18:14375:12982":{"crate_id":18,"path":["object","macho","MachHeader64"],"kind":"struct"},"5:7754:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:8462:12524":{"crate_id":6,"path":["std","io","util","Empty"],"kind":"struct"},"6:3531:16059":{"crate_id":6,"path":["std","io","util","Repeat"],"kind":"struct"},"6:920:15905":{"crate_id":6,"path":["std","collections","hash","map","Values"],"kind":"struct"},"4:363:5959":{"crate_id":4,"path":["digest","core_api","ExtendableOutputCore"],"kind":"trait"},"12:488:154":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:32405:16010":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"17:2660:13631":{"crate_id":17,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"18:11788:16230":{"crate_id":18,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"18:13361:12796":{"crate_id":18,"path":["object","read","SymbolMapName"],"kind":"struct"},"18:13854:12866":{"crate_id":18,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"18:13909:12874":{"crate_id":18,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:22579:18022":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1:42441:97":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:6269:15769":{"crate_id":17,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:3660:37272":{"crate_id":6,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:12079:6008":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:40083:17538":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"6:8186:15127":{"crate_id":6,"path":["std","fs","FileTimes"],"kind":"struct"},"17:7731:15489":{"crate_id":17,"path":["gimli","read","op","Location"],"kind":"enum"},"19:613:38991":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"7:6813:14889":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"18:13222:25492":{"crate_id":18,"path":["object","read","FileKind"],"kind":"enum"},"1:8746:150":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:41419:12408":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"23:1211:6109":{"crate_id":23,"path":["typenum","type_operators","IsLess"],"kind":"trait"},"1:22658:11698":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"17:6749:13718":{"crate_id":17,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:6368:15783":{"crate_id":17,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:8612:13668":{"crate_id":17,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:7710:17615":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"17:7969:15880":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"18:16555:13555":{"crate_id":18,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"6:9205:18434":{"crate_id":6,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"18:11124:38985":{"crate_id":18,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"19:735:29685":{"crate_id":19,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"7:7577:15072":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:8336:16467":{"crate_id":6,"path":["std","io","error","Custom"],"kind":"struct"},"18:14055:12899":{"crate_id":18,"path":["object","elf","Verdef"],"kind":"struct"},"18:14750:13051":{"crate_id":18,"path":["object","macho","DylibModule32"],"kind":"struct"},"18:16323:13491":{"crate_id":18,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"6:8765:6648":{"crate_id":6,"path":["std","path","State"],"kind":"enum"},"7:5395:14545":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:9235:18435":{"crate_id":6,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"5:40:12338":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"5:3306:5985":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"21:1180:12532":{"crate_id":21,"path":["crypto_common","InvalidLength"],"kind":"struct"},"6:8509:16027":{"crate_id":6,"path":["std","io","Chain"],"kind":"struct"},"18:12122:15713":{"crate_id":18,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"7:5420:14557":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"7:5676:14676":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:42201:173":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:5084:17605":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:22605:31332":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"6:8174:16462":{"crate_id":6,"path":["std","fs","ReadDir"],"kind":"struct"},"18:15641:13297":{"crate_id":18,"path":["object","pe","ImageSymbol"],"kind":"struct"},"18:13095:12775":{"crate_id":18,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"7:6599:14812":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"7:5586:14633":{"crate_id":7,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"7:5412:1253":{"crate_id":7,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:7168:13751":{"crate_id":17,"path":["gimli","read","line","LineRow"],"kind":"struct"},"18:12335:16260":{"crate_id":18,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"18:11319:38987":{"crate_id":18,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:40531:16015":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"18:11617:16216":{"crate_id":18,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"7:1696:14266":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"18:11630:12696":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"23:1261:6080":{"crate_id":23,"path":["typenum","type_operators","IsGreaterOrEqual"],"kind":"trait"},"19:563:12540":{"crate_id":19,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"18:11026:38984":{"crate_id":18,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"5:7675:12368":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:40997:16044":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"18:10368:25486":{"crate_id":18,"path":["object","common","FileFlags"],"kind":"enum"},"1:42182:194":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:44307:16091":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"7:1563:14180":{"crate_id":7,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"18:11232:25506":{"crate_id":18,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:47183:11680":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"19:726:12557":{"crate_id":19,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"5:1898:12379":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"6:12381:1430":{"crate_id":6,"path":["std","reference"],"kind":"primitive"},"18:16264:13475":{"crate_id":18,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:22920:15235":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:2450:13615":{"crate_id":17,"path":["gimli","common","Encoding"],"kind":"struct"},"5:4172:12341":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"19:659:16188":{"crate_id":19,"path":["memchr","memmem","FindIter"],"kind":"struct"},"7:6716:14860":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"7:4976:14392":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:22734:17847":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"23:1131:18028":{"crate_id":23,"path":["typenum","private","IsGreaterOrEqualPrivate"],"kind":"trait"},"6:3612:16425":{"crate_id":6,"path":["std","io","IoSliceMut"],"kind":"struct"},"18:16145:13441":{"crate_id":18,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:47262:11685":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"6:2546:2570":{"crate_id":6,"path":["std","io"],"kind":"module"},"25:16:2671":{"crate_id":25,"path":["const_oid","arcs","Arcs"],"kind":"struct"},"5:7077:12391":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"17:6680:16317":{"crate_id":17,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"1:7776:30161":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:3088:16525":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"7:5224:14471":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:9389:12310":{"crate_id":6,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"1:10764:12410":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"12:2148:16383":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:0:510":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"6:889:5986":{"crate_id":6,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"18:15024:13101":{"crate_id":18,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:4883:18390":{"crate_id":6,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:12698:16083":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"6:3395:16420":{"crate_id":6,"path":["std","io","stdio","Stdout"],"kind":"struct"},"18:14269:12959":{"crate_id":18,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"18:12056:12712":{"crate_id":18,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"18:12044:16248":{"crate_id":18,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:3444:2537":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:8179:15916":{"crate_id":6,"path":["std","fs","OpenOptions"],"kind":"struct"},"7:6419:14710":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"23:1195:6081":{"crate_id":23,"path":["typenum","type_operators","Len"],"kind":"trait"},"7:5520:14608":{"crate_id":7,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"11:44:13986":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"5:3347:15906":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"6:7983:18022":{"crate_id":6,"path":["std","sealed","Sealed"],"kind":"trait"},"18:14692:13025":{"crate_id":18,"path":["object","macho","SymtabCommand"],"kind":"struct"},"7:4937:14375":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:5172:13695":{"crate_id":17,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:7372:13658":{"crate_id":17,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"18:12762:16277":{"crate_id":18,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:42235:15489":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"5:3716:5985":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:763:154":{"crate_id":6,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:10398:11884":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:6239:13710":{"crate_id":17,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:8711:13894":{"crate_id":17,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:43153:13862":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"18:15410:13226":{"crate_id":18,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"25:329:2670":{"crate_id":25,"path":["const_oid","ObjectIdentifierRef"],"kind":"struct"},"26:0:2369":{"crate_id":26,"path":["cfg_if"],"kind":"module"},"1:4642:11893":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"17:7949:13661":{"crate_id":17,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:3453:142":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"5:4569:12264":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"18:15679:13303":{"crate_id":18,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"6:5779:18416":{"crate_id":6,"path":["std","process","Termination"],"kind":"trait"},"1:41922:170":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:45978:15532":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"18:14917:13079":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"18:14393:12983":{"crate_id":18,"path":["object","macho","LoadCommand"],"kind":"struct"},"18:14483:12999":{"crate_id":18,"path":["object","macho","Section64"],"kind":"struct"},"1:4497:17588":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"6:9715:12323":{"crate_id":6,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"1:40607:16019":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"18:15136:12766":{"crate_id":18,"path":["object","macho","Relocation"],"kind":"struct"},"6:9424:162":{"crate_id":6,"path":["std","time","Instant"],"kind":"struct"},"18:16399:13507":{"crate_id":18,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"6:4694:18369":{"crate_id":6,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:7807:38978":{"crate_id":17,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:8151:13666":{"crate_id":17,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"18:13209:138":{"crate_id":18,"path":["object","read","Error"],"kind":"struct"},"18:16209:13459":{"crate_id":18,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:39069:17562":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:1625:12379":{"crate_id":6,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"18:15731:13318":{"crate_id":18,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"21:105:18072":{"crate_id":21,"path":["crypto_common","IvSizeUser"],"kind":"trait"},"23:2813:2502":{"crate_id":23,"path":["typenum","generated","consts","U128"],"kind":"type_alias"},"7:4805:14293":{"crate_id":7,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"18:15887:13356":{"crate_id":18,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:3821:71":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"15:220:13972":{"crate_id":15,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:44694:131":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"5:7485:15229":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:4844:13685":{"crate_id":17,"path":["gimli","constants","DwLle"],"kind":"struct"},"7:6611:14817":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"12:881:16381":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"7:5205:14463":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:47128:6460":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"18:11971:16239":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:8066:25427":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"18:14640:13020":{"crate_id":18,"path":["object","macho","ThreadCommand"],"kind":"struct"},"7:5186:14451":{"crate_id":7,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"5:4377:5985":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"18:12149:15715":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"22:31:12264":{"crate_id":22,"path":["hybrid_array","from_fn","Guard"],"kind":"struct"},"21:125:18077":{"crate_id":21,"path":["crypto_common","InnerIvInit"],"kind":"trait"},"6:8331:16466":{"crate_id":6,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:5417:13703":{"crate_id":17,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:22644:17854":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"18:12035:15910":{"crate_id":18,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"4:547:2497":{"crate_id":4,"path":["digest","core_api","TruncSide"],"kind":"enum"},"12:1564:24486":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"7:5088:14442":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:11098:12328":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"5:4506:12365":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"7:8014:15087":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:6408:15786":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"18:10097:25477":{"crate_id":18,"path":["object","common","SubArchitecture"],"kind":"enum"},"7:570:14126":{"crate_id":7,"path":["libc","unix","tms"],"kind":"struct"},"23:1272:6091":{"crate_id":23,"path":["typenum","type_operators","SquareRoot"],"kind":"trait"},"6:6796:16447":{"crate_id":6,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:10889:16498":{"crate_id":6,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"18:15090:13108":{"crate_id":18,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:23262:15261":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"17:2506:13624":{"crate_id":17,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"18:11592:12653":{"crate_id":18,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"18:16832:12883":{"crate_id":18,"path":["object","xcoff","Rel64"],"kind":"struct"},"7:6544:14774":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"7:5551:14620":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"7:8249:15100":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"18:11527:16222":{"crate_id":18,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:2955:77":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"17:8179:13839":{"crate_id":17,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:32503:11762":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"1:41960:15477":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"10:236:6648":{"crate_id":10,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"7:559:14121":{"crate_id":7,"path":["libc","unix","sigval"],"kind":"struct"},"18:14612:13016":{"crate_id":18,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"12:2323:16382":{"crate_id":12,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"7:8199:15099":{"crate_id":7,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:11719:15948":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:22701:17848":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"7:5349:14524":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"18:10418:25488":{"crate_id":18,"path":["object","common","SectionFlags"],"kind":"enum"},"6:8602:18367":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"18:10784:16210":{"crate_id":18,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"1:46299:15558":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"25:11:72":{"crate_id":25,"path":["const_oid","arcs","Arc"],"kind":"type_alias"},"15:7:16369":{"crate_id":15,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"7:553:14118":{"crate_id":7,"path":["libc","unix","linger"],"kind":"struct"},"6:10913:15935":{"crate_id":6,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"0:106:2366":{"crate_id":0,"path":["sha2","Sha384"],"kind":"type_alias"},"1:23284:15263":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"18:11421:16219":{"crate_id":18,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"18:11503:12693":{"crate_id":18,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"6:5112:18389":{"crate_id":6,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"7:1569:14182":{"crate_id":7,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:7990:15881":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:8043:38970":{"crate_id":17,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:5335:204":{"crate_id":6,"path":["std","path","PathBuf"],"kind":"struct"},"1:43228:11892":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:32505:115":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"12:830:16388":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:4842:12401":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:9460:15932":{"crate_id":6,"path":["std","time","SystemTimeError"],"kind":"struct"},"7:8031:15098":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"7:8255:15101":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:12322:37373":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:2704:13633":{"crate_id":17,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"5:4582:12365":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"7:5288:14506":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"6:11668:15942":{"crate_id":6,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:23092:15252":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"23:1091:18026":{"crate_id":23,"path":["typenum","private","IsLessOrEqualPrivate"],"kind":"trait"},"1:21722:30316":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"18:16656:13574":{"crate_id":18,"path":["object","xcoff","Symbol64"],"kind":"struct"},"18:11448:16220":{"crate_id":18,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"6:2318:139":{"crate_id":6,"path":["std","fs","File"],"kind":"struct"},"7:5301:14511":{"crate_id":7,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"19:581:11775":{"crate_id":19,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:8329:130":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:21737:18029":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"7:5507:14607":{"crate_id":7,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"6:11930:15221":{"crate_id":6,"path":["std","alloc","System"],"kind":"struct"},"1:21739:18030":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"7:1521:14152":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"18:14507:13000":{"crate_id":18,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:8546:15890":{"crate_id":17,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:6440:25418":{"crate_id":17,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:10039:29834":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"7:4829:14311":{"crate_id":7,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:2237:129":{"crate_id":6,"path":["std","ffi","os_str","Display"],"kind":"struct"},"7:5482:14598":{"crate_id":7,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"4:0:2325":{"crate_id":4,"path":["digest"],"kind":"module"},"10:53:24423":{"crate_id":10,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:22555:17852":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"17:6608:206":{"crate_id":17,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:46892:15624":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"18:10803:12678":{"crate_id":18,"path":["object","read","util","Bytes"],"kind":"struct"},"17:546:15745":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:39728:6029":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"6:2320:16414":{"crate_id":6,"path":["std","fs","DirEntry"],"kind":"struct"},"18:13082:16216":{"crate_id":18,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"6:11694:15946":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:1636:15907":{"crate_id":6,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"7:5341:14523":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"7:4929:14373":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"18:11733:25525":{"crate_id":18,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"18:15621:13289":{"crate_id":18,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:7058:15838":{"crate_id":17,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:10847:12286":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"7:8261:15102":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"18:10115:25478":{"crate_id":18,"path":["object","common","AddressSize"],"kind":"enum"},"17:6462:25419":{"crate_id":17,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"}},"external_crates":{"26":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"23":{"name":"typenum","html_root_url":"https://docs.rs/typenum/1.17.0/"},"20":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"const_oid","html_root_url":null},"22":{"name":"hybrid_array","html_root_url":null},"19":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"digest","html_root_url":null},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"27":{"name":"cpufeatures","html_root_url":null},"24":{"name":"block_buffer","html_root_url":null},"21":{"name":"crypto_common","html_root_url":null},"18":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"6":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":30}