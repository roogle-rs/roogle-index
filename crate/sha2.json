{"root":"0:0:1707","crate_version":"0.10.7","includes_private":false,"index":{"a:1:8254:16705-0:127:1681":{"id":"a:1:8254:16705-0:127:1681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8254:16705","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:65:1842":{"id":"0:65:1842","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[98,4],"end":[98,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"24:6316:5268","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5268","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5268","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5268","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5268","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5268","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5268","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5268","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"24:6363:5269","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"24:5724:5273","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5272","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5272","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5272","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5272","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5272","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5272","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5272","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"0:102:1704":{"id":"0:102:1704","crate_id":0,"name":"Sha384","span":{"filename":"src/lib.rs","begin":[94,0],"end":[94,84]},"visibility":"public","docs":"SHA-384 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"CoreWrapper","id":"4:492:1673","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"CtVariableCoreWrapper","id":"4:473:1674","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"U48","id":"24:2568:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha384","id":"0:392:1685","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:75:1852":{"id":"0:75:1852","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[134,4],"end":[142,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Buffer","id":"4:328:1826","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Output","id":"22:16:186","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:677-0:132:1682":{"id":"b:5:677-0:132:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:673:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:679:14962","5:680:28034","5:681:28035"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12126:35997":{"id":"1:12126:35997","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:11917:418","self::pattern":"1:11716:16738"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11721:15542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5407:36661":{"id":"5:5407:36661","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:273:1989","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:6994:14340","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:273:1989","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:6994:14340","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2544:695":{"id":"1:2544:695","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12031:15836":{"id":"1:12031:15836","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12141:16621":{"id":"1:12141:16621","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4540:16621"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:43679:15012","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12076:35983":{"id":"1:12076:35983","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:11716:16738","str::split":"1:12064:34784","prim@char":"6:11917:418","str::split_terminator":"1:12073:35982"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43439:15086","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11721:15542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11721:15542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11736:16744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2542-0:132:1682":{"id":"b:1:2542-0:132:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2544:695"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12050:34793":{"id":"1:12050:34793","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"6:11917:418","self::pattern":"1:11716:16738"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11721:15542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:135":{"id":"0:135","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[89,9],"end":[89,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:136:422"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:103:1706":{"id":"0:103:1706","crate_id":0,"name":"Sha512","span":{"filename":"src/lib.rs","begin":[96,0],"end":[96,84]},"visibility":"public","docs":"SHA-512 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"CoreWrapper","id":"4:492:1673","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"CtVariableCoreWrapper","id":"4:473:1674","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"U64","id":"24:2616:1671","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512","id":"0:408:1687","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:12043:29019":{"id":"1:12043:29019","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12042:29021"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:43654:15097","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2553-0:127:1681":{"id":"b:1:2553-0:127:1681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2556:128","1:2557:1479"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5422:36664":{"id":"5:5422:36664","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7254:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2701:228-0:127:1681":{"id":"a:1:2701:228-0:127:1681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:46":{"id":"0:46","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[25,0],"end":[27,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"22:22:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:47:1842"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:24:1171-0:127:1681":{"id":"b:24:1171-0:127:1681","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.16.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"24:1168:5408","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["24:1173:186"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[113,0],"end":[115,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"22:33:1828","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:71:1846"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:77":{"id":"0:77","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[145,0],"end":[150,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"22:46:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:78:1865"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:74:940":{"id":"0:74:940","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[121,4],"end":[131,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["output_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:41546:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"InvalidOutputSize","id":"4:522:1836","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2538-0:132:1682":{"id":"b:1:2538-0:132:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2541:11140"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:57:1852":{"id":"0:57:1852","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[60,4],"end":[68,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Buffer","id":"4:328:1826","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Output","id":"22:16:186","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71:1846":{"id":"0:71:1846","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[114,4],"end":[114,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"24:6316:5268","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5268","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5268","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5268","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5268","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5268","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5268","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"24:6363:5269","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"24:5724:5273","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5272","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5272","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5272","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5272","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5272","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5272","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[95,0],"end":[95,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:357:1835","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12085:35984":{"id":"1:12085:35984","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41402:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11721:15542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2248-0:132:1682":{"id":"b:1:2248-0:132:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:5709","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2250:1899"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12110:35993":{"id":"1:12110:35993","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:677-0:127:1681":{"id":"b:5:677-0:127:1681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:673:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:679:14962","5:680:28034","5:681:28035"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12027:5860":{"id":"1:12027:5860","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41404:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41402:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60:1865":{"id":"0:60:1865","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[73,4],"end":[75,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9121:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9110:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2701:228-0:132:1682":{"id":"a:1:2701:228-0:132:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2701:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12067:29018":{"id":"1:12067:29018","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"6:11917:418","self::pattern":"1:11716:16738"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:11539:5336","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11721:15542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2557:1479":{"id":"1:2557:1479","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:41546:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12114:35995":{"id":"1:12114:35995","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:11917:418","self::pattern":"1:11716:16738"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11721:15542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8253:16706-0:132:1682":{"id":"a:1:8253:16706-0:132:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8253:16706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:100:1700":{"id":"0:100:1700","crate_id":0,"name":"Sha512_224","span":{"filename":"src/lib.rs","begin":[90,0],"end":[90,92]},"visibility":"public","docs":"SHA-512/224 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"CoreWrapper","id":"4:492:1673","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"CtVariableCoreWrapper","id":"4:473:1674","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"U28","id":"24:2508:1668","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512_224","id":"0:440:1691","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:12017:35974":{"id":"1:12017:35974","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12025:314":{"id":"1:12025:314","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12026:5854","`u8`":"6:11934:1501"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12109:35992":{"id":"1:12109:35992","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2253:28033":{"id":"1:2253:28033","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12070:34787":{"id":"1:12070:34787","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:11716:16738","`DoubleEndedIterator`":"1:7244:121","prim@char":"6:11917:418","str::split":"1:12064:34784"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43389:5323","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11721:15542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11721:15542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11736:16744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12056:11185":{"id":"1:12056:11185","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41404:179","prim@char":"6:11917:418","self::pattern":"1:11716:16738"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41402:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11721:15542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:136:422":{"id":"0:136:422","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[89,9],"end":[89,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:78:1865":{"id":"0:78:1865","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[147,4],"end":[149,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9121:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9110:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:61":{"id":"0:61","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[78,0],"end":[83,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9146:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:62:669"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12041:14951":{"id":"1:12041:14951","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43357:11938","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2551:128":{"id":"1:2551:128","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:56:940":{"id":"0:56:940","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[49,4],"end":[57,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["output_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:41546:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"InvalidOutputSize","id":"4:522:1836","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5-4:0:1661":{"id":"0:5-4:0:1661","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[55,17],"end":[55,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"digest","name":"digest","id":"4:0:1661","glob":false}}},"5:5411:36662":{"id":"5:5411:36662","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7254:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11721:15542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[17,9],"end":[17,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2264:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:131:422"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5414:36663":{"id":"5:5414:36663","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7254:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12024:35977":{"id":"1:12024:35977","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3320-0:132:1682":{"id":"b:1:3320-0:132:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:5709","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3318:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3322:1493"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2538-0:127:1681":{"id":"b:1:2538-0:127:1681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2541:11140"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12036:35979":{"id":"1:12036:35979","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"6:11923:1399","crate::ops::IndexMut":"1:2985:16594","str::slice_unchecked":"1:12035:35978"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12026:5854":{"id":"1:12026:5854","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"6:11934:1501"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12038:34777":{"id":"1:12038:34777","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"1:12037:34776"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12053:34794":{"id":"1:12053:34794","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"6:11917:418","self::pattern":"1:11716:16738"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11721:15542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11721:15542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11736:16744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12040:15108":{"id":"1:12040:15108","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"6:11917:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43347:15080","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12107:35991":{"id":"1:12107:35991","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12091:1943":{"id":"1:12091:1943","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:11716:16738","`DoubleEndedIterator`":"1:7244:121","prim@char":"6:11917:418","str::matches":"1:12091:1943"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43575:15092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11721:15542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5406":{"id":"5:5406","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5407:36661","5:5408:11095","5:5411:36662","5:5414:36663","5:5422:36664","5:5423:36665","5:5424:16684","5:5425:16053","5:5426:16054"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:64":{"id":"0:64","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[97,0],"end":[99,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"22:22:1825","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:65:1842"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12016:11147":{"id":"1:12016:11147","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2542-0:127:1681":{"id":"b:1:2542-0:127:1681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2515:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2544:695"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12082:34791":{"id":"1:12082:34791","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"6:11917:418","str::splitn":"1:12079:34789","self::pattern":"1:11716:16738"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43493:5317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11721:15542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11721:15542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11736:16744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:50":{"id":"0:50","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[33,0],"end":[39,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:330:1830","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:51:1844"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:8254:16705-0:132:1682":{"id":"a:1:8254:16705-0:132:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8254:16705","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2553-0:132:1682":{"id":"b:1:2553-0:132:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2512:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2556:128","1:2557:1479"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12042:29021":{"id":"1:12042:29021","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12043:29019"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:43645:15096","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12094:35986":{"id":"1:12094:35986","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:11716:16738","`DoubleEndedIterator`":"1:7244:121","prim@char":"6:11917:418","str::matches":"1:12091:1943"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43593:15093","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11721:15542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11721:15542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11736:16744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2548-0:132:1682":{"id":"b:1:2548-0:132:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2551:128","1:2552:1480"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12139:36000":{"id":"1:12139:36000","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4539:36000"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:43670:15018","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12105:35990":{"id":"1:12105:35990","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5424:16684":{"id":"5:5424:16684","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7254:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2684:220-0:132:1682":{"id":"a:1:2684:220-0:132:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:99:1698":{"id":"0:99:1698","crate_id":0,"name":"Sha256","span":{"filename":"src/lib.rs","begin":[88,0],"end":[88,84]},"visibility":"public","docs":"SHA-256 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"CoreWrapper","id":"4:492:1673","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"CtVariableCoreWrapper","id":"4:473:1674","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"U32","id":"24:2520:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha256","id":"0:376:1683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:96-0:127:1681":{"id":"0:96-0:127:1681","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[76,19],"end":[76,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"core_api::Sha256VarCore","name":"Sha256VarCore","id":"0:127:1681","glob":false}}},"b:1:2548-0:127:1681":{"id":"b:1:2548-0:127:1681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2518:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2551:128","1:2552:1480"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2741:5710-0:127:1681":{"id":"a:1:2741:5710-0:127:1681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:5710","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:8253:16706-0:127:1681":{"id":"a:1:8253:16706-0:127:1681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8253:16706","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12132:35999":{"id":"1:12132:35999","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:11677:127","`FromStr`":"1:11676:16425"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41546:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:11676:16425","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:11676:16425","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2556:128":{"id":"1:2556:128","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32031:6052","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"1:12097:35987":{"id":"1:12097:35987","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:11716:16738","`DoubleEndedIterator`":"1:7244:121","prim@char":"6:11917:418","str::rmatch_indices":"1:12100:35988"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43521:15089","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11721:15542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73:1847":{"id":"0:73:1847","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[118,4],"end":[118,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"TruncSide","id":"4:512:1829","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}}},"0:132:1682":{"id":"0:132:1682","crate_id":0,"name":"Sha512VarCore","span":{"filename":"src/core_api.rs","begin":[90,0],"end":[93,1]},"visibility":"public","docs":"Core block-level SHA-512 hasher with variable output size.\n\nSupports initialization only for 28, 32, 48, and 64 byte output sizes,\ni.e. 224, 256, 384, and 512 bits respectively.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:2741:5710-0:132:1682","a:1:2701:228-0:132:1682","a:1:2684:220-0:132:1682","a:1:8253:16706-0:132:1682","a:1:8254:16705-0:132:1682","b:1:2553-0:132:1682","b:1:2542-0:132:1682","b:1:2548-0:132:1682","b:1:3320-0:132:1682","b:1:2248-0:132:1682","b:1:2538-0:132:1682","b:1:2251-0:132:1682","b:5:677-0:132:1682","b:24:1171-0:132:1682","0:70","0:79","0:77","0:72","0:135","0:66","0:64","0:68","0:63"]}}},"0:127:1681":{"id":"0:127:1681","crate_id":0,"name":"Sha256VarCore","span":{"filename":"src/core_api.rs","begin":[18,0],"end":[21,1]},"visibility":"public","docs":"Core block-level SHA-256 hasher with variable output size.\n\nSupports initialization only for 28 and 32 byte output sizes,\ni.e. 224 and 256 bits respectively.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:2741:5710-0:127:1681","a:1:2701:228-0:127:1681","a:1:2684:220-0:127:1681","a:1:8253:16706-0:127:1681","a:1:8254:16705-0:127:1681","b:1:2553-0:127:1681","b:1:2542-0:127:1681","b:1:2548-0:127:1681","b:1:3320-0:127:1681","b:1:2248-0:127:1681","b:1:2538-0:127:1681","b:1:2251-0:127:1681","b:5:677-0:127:1681","b:24:1171-0:127:1681","0:61","0:46","0:52","0:50","0:130","0:54","0:45","0:48","0:59"]}}},"5:5425:16053":{"id":"5:5425:16053","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12137:16057"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67:1843":{"id":"0:67:1843","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[102,4],"end":[102,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Eager","id":"25:77:1822","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"1:12044:35980":{"id":"1:12044:35980","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:43625:15094","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12123:35996":{"id":"1:12123:35996","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:11917:418","self::pattern":"1:11716:16738"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11721:15542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11721:15542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11736:16744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:681:28035":{"id":"5:681:28035","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2541:11140":{"id":"1:2541:11140","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2515:133"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1707":{"id":"0:0:1707","crate_id":0,"name":"sha2","span":{"filename":"src/lib.rs","begin":[1,0],"end":[96,84]},"visibility":"public","docs":"An implementation of the [SHA-2][1] cryptographic hash algorithms.\n\nThere are 6 standard algorithms specified in the SHA-2 standard: [`Sha224`],\n[`Sha256`], [`Sha512_224`], [`Sha512_256`], [`Sha384`], and [`Sha512`].\n\nAlgorithmically, there are only 2 core algorithms: SHA-256 and SHA-512.\nAll other algorithms are just applications of these with different initial\nhash values, and truncated to different digest bit lengths. The first two\nalgorithms in the list are based on SHA-256, while the last four are based\non SHA-512.\n\n# Usage\n\n```rust\nuse hex_literal::hex;\nuse sha2::{Sha256, Sha512, Digest};\n\n// create a Sha256 object\nlet mut hasher = Sha256::new();\n\n// write input message\nhasher.update(b\"hello world\");\n\n// read hash digest and consume hasher\nlet result = hasher.finalize();\n\nassert_eq!(result[..], hex!(\"\n    b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\n\")[..]);\n\n// same for Sha512\nlet mut hasher = Sha512::new();\nhasher.update(b\"hello world\");\nlet result = hasher.finalize();\n\nassert_eq!(result[..], hex!(\"\n    309ecc489c12d6eb4cc40f50c902f2b4d0ed77ee511a7c7a9bcd3ca86d4cd86f\n    989dd35bc5ff499670da34255b45b0cfd830e81f605dcf7dc5542e93ae9cd76f\n\")[..]);\n```\n\nAlso see [RustCrypto/hashes][2] readme.\n\n[1]: https://en.wikipedia.org/wiki/SHA-2\n[2]: https://github.com/RustCrypto/hashes","links":{"`Sha256`":"0:99:1698","`Sha224`":"0:98:1696","`Sha512`":"0:103:1706","`Sha384`":"0:102:1704","`Sha512_256`":"0:101:1702","`Sha512_224`":"0:100:1700"},"attrs":["#![no_std]","#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\",\nhtml_favicon_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\")]","#![warn(missing_docs, rust_2018_idioms)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:5-4:0:1661","0:6-4:358:1662","0:96-0:127:1681","0:97-0:132:1682","0:98:1696","0:99:1698","0:100:1700","0:101:1702","0:102:1704","0:103:1706"],"is_stripped":false}}},"1:12029:15835":{"id":"1:12029:15835","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41404:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41402:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12117:34795":{"id":"1:12117:34795","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:11917:418","self::pattern":"1:11716:16738"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41402:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11721:15542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12020:35976":{"id":"1:12020:35976","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"1:12018:35975"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12014":{"id":"1:12014","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12015:812","1:12016:11147","1:12017:35974","1:12018:35975","1:12020:35976","1:12023:34691","1:12024:35977","1:12025:314","1:12026:5854","1:12027:5860","1:12029:15835","1:12031:15836","1:12033:15837","1:12035:35978","1:12036:35979","1:12037:34776","1:12038:34777","1:12039:15099","1:12040:15108","1:12041:14951","1:12042:29021","1:12043:29019","1:12044:35980","1:12045:35981","1:12046:29134","1:12047:28408","1:12050:34793","1:12053:34794","1:12056:11185","1:12060:11146","1:12064:34784","1:12067:29018","1:12070:34787","1:12073:35982","1:12076:35983","1:12079:34789","1:12082:34791","1:12085:35984","1:12088:35985","1:12091:1943","1:12094:35986","1:12097:35987","1:12100:35988","1:12103:35989","1:12105:35990","1:12107:35991","1:12109:35992","1:12110:35993","1:12111:35994","1:12114:35995","1:12117:34795","1:12120:34796","1:12123:35996","1:12126:35997","1:12129:35998","1:12132:35999","1:12134:16051","1:12135:16052","1:12136:16056","1:12137:16057","1:12138:16058","1:12139:36000","1:12141:16621","1:12142:36001"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12129:35998":{"id":"1:12129:35998","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:11917:418","self::pattern":"1:11716:16738"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11721:15542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11721:15542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11736:16744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72":{"id":"0:72","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[117,0],"end":[143,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:341:1831","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:73:1847","0:74:940","0:75:1852"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:49:1843":{"id":"0:49:1843","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[30,4],"end":[30,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Eager","id":"25:77:1822","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"1:12136:16056":{"id":"1:12136:16056","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12120:34796":{"id":"1:12120:34796","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:11917:418","self::pattern":"1:11716:16738"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41402:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11721:15542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11721:15542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11736:16744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53:1846":{"id":"0:53:1846","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[42,4],"end":[42,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"24:6316:5268","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5268","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5268","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5268","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5268","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5268","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"24:6363:5269","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"24:5724:5273","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5272","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5272","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5272","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5272","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5272","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"0:55:1847":{"id":"0:55:1847","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[46,4],"end":[46,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"TruncSide","id":"4:512:1829","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}}},"1:12111:35994":{"id":"1:12111:35994","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"6:11917:418","self::pattern":"1:11716:16738"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11721:15542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11721:15542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:11741:16743","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:680:28034":{"id":"5:680:28034","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12018:35975":{"id":"1:12018:35975","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2248-0:127:1681":{"id":"b:1:2248-0:127:1681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:5709","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2242:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2250:1899"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12047:28408":{"id":"1:12047:28408","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"6:11917:418","self::pattern":"1:11716:16738"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11721:15542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:101:1702":{"id":"0:101:1702","crate_id":0,"name":"Sha512_256","span":{"filename":"src/lib.rs","begin":[92,0],"end":[92,92]},"visibility":"public","docs":"SHA-512/256 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"CoreWrapper","id":"4:492:1673","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"CtVariableCoreWrapper","id":"4:473:1674","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"U32","id":"24:2520:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512_256","id":"0:456:1693","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:131:422":{"id":"0:131:422","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[17,9],"end":[17,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:80:669":{"id":"0:80:669","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[154,4],"end":[156,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9121:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9110:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12103:35989":{"id":"1:12103:35989","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12134:16051":{"id":"1:12134:16051","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12035:35978":{"id":"1:12035:35978","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"6:11923:1399","str::slice_mut_unchecked":"1:12036:35979","crate::ops::Index":"1:2981:16593"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:6-4:358:1662":{"id":"0:6-4:358:1662","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[55,23],"end":[55,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"digest::Digest","name":"Digest","id":"4:358:1662","glob":false}}},"b:1:3320-0:127:1681":{"id":"b:1:3320-0:127:1681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:5709","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3318:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3322:1493"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12037:34776":{"id":"1:12037:34776","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"1:12038:34777"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68":{"id":"0:68","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[105,0],"end":[111,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:330:1830","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:69:1844"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2684:220-0:127:1681":{"id":"a:1:2684:220-0:127:1681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2684:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:54":{"id":"0:54","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[45,0],"end":[69,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:341:1831","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:55:1847","0:56:940","0:57:1852"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2250:1899":{"id":"1:2250:1899","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12137:16057":{"id":"1:12137:16057","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5423:36665":{"id":"5:5423:36665","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:273:1989","`String`":"5:7254:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:273:1989","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:6994:14340","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12039:15099":{"id":"1:12039:15099","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"6:11917:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43341:15079","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12100:35988":{"id":"1:12100:35988","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:11716:16738","`DoubleEndedIterator`":"1:7244:121","prim@char":"6:11917:418","str::match_indices":"1:12097:35987"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43539:15090","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11721:15542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11721:15542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11736:16744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12015:812":{"id":"1:12015:812","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"6:11917:418"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"24:1173:186":{"id":"24:1173:186","crate_id":24,"name":"Output","span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.16.0/src/type_operators.rs","begin":[35,4],"end":[35,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"b:1:2251-0:127:1681":{"id":"b:1:2251-0:127:1681","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:5709","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2253:28033"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5408:11095":{"id":"5:5408:11095","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7254:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11721:15542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62:669":{"id":"0:62:669","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[80,4],"end":[82,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9121:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9110:210","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12033:15837":{"id":"1:12033:15837","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12045:35981":{"id":"1:12045:35981","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:43635:15095","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2741:5710-0:132:1682":{"id":"a:1:2741:5710-0:132:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2741:5710","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12023:34691":{"id":"1:12023:34691","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11283:16745"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:66":{"id":"0:66","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[101,0],"end":[103,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:332:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:67:1843"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12079:34789":{"id":"1:12079:34789","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"6:11917:418","self::pattern":"1:11716:16738","str::rsplitn":"1:12082:34791"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43475:5321","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11721:15542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12046:29134":{"id":"1:12046:29134","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:43663:15098","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:97-0:132:1682":{"id":"0:97-0:132:1682","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[76,34],"end":[76,47]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"core_api::Sha512VarCore","name":"Sha512VarCore","id":"0:132:1682","glob":false}}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[41,0],"end":[43,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"22:33:1828","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:53:1846"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:59":{"id":"0:59","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[71,0],"end":[76,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"22:46:1823","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:60:1865"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:47:1842":{"id":"0:47:1842","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[26,4],"end":[26,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"24:6316:5268","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5268","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5268","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5268","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5268","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5268","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5268","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"24:6363:5269","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"24:5724:5273","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5272","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5272","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5272","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5272","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5272","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5272","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"1:12073:35982":{"id":"1:12073:35982","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:11716:16738","str::split":"1:12064:34784","prim@char":"6:11917:418","`DoubleEndedIterator`":"1:7244:121","str::rsplit_terminator":"1:12076:35983"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43421:15085","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11721:15542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:45":{"id":"0:45","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[23,0],"end":[23,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:357:1835","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12142:36001":{"id":"1:12142:36001","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4537:36001"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:43688:15017","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2251-0:132:1682":{"id":"b:1:2251-0:132:1682","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2691:5709","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2245:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2253:28033"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:679:14962":{"id":"5:679:14962","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:12138:16058":{"id":"1:12138:16058","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51:1844":{"id":"0:51:1844","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[35,4],"end":[38,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"Block","id":"22:12:1824","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2552:1480":{"id":"1:2552:1480","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41546:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2522:237","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:98:1696":{"id":"0:98:1696","crate_id":0,"name":"Sha224","span":{"filename":"src/lib.rs","begin":[86,0],"end":[86,84]},"visibility":"public","docs":"SHA-224 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"typedef":{"type":{"resolved_path":{"name":"CoreWrapper","id":"4:492:1673","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"CtVariableCoreWrapper","id":"4:473:1674","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"U28","id":"24:2508:1668","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha224","id":"0:424:1689","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:12060:11146":{"id":"1:12060:11146","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41404:179","prim@char":"6:11917:418","self::pattern":"1:11716:16738"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41402:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11721:15542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11721:15542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11736:16744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:24:1171-0:132:1682":{"id":"b:24:1171-0:132:1682","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.16.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"24:1168:5408","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["24:1173:186"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12088:35985":{"id":"1:12088:35985","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41402:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11721:15542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11721:15542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11736:16744","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3322:1493":{"id":"1:3322:1493","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39352:14447","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69:1844":{"id":"0:69:1844","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[107,4],"end":[110,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"Block","id":"22:12:1824","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:48":{"id":"0:48","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[29,0],"end":[31,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:332:1827","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:49:1843"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:79":{"id":"0:79","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[152,0],"end":[157,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9146:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:80:669"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12135:16052":{"id":"1:12135:16052","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39560:28084","Self::is_ascii":"1:12134:16051"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41402:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39560:28084","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12064:34784":{"id":"1:12064:34784","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:11716:16738","`DoubleEndedIterator`":"1:7244:121","prim@char":"6:11917:418","str::split_whitespace":"1:12042:29021","str::rsplit":"1:12070:34787"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43371:5319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11721:15542","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5426:16054":{"id":"5:5426:16054","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12138:16058"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"1:40030:15016":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:10721:130":{"crate_id":6,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"5:5059:11665":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:4437:17398":{"crate_id":6,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:8254:16705":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:6474:12825":{"crate_id":17,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"6:1895:15417":{"crate_id":6,"path":["std","error","Report"],"kind":"struct"},"6:4926:17430":{"crate_id":6,"path":["std","panic","always_abort"],"kind":"function"},"18:9772:11964":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:6904:12926":{"crate_id":17,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"18:13411:12622":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:11120:14316":{"crate_id":6,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"7:6588:14060":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"5:819:11643":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"18:10923:14751":{"crate_id":18,"path":["object","read","ObjectMap"],"kind":"struct"},"6:11934:1501":{"crate_id":6,"path":["std","u8"],"kind":"primitive"},"18:11069:23953":{"crate_id":18,"path":["object","read","CompressionFormat"],"kind":"enum"},"18:13516:12649":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"7:4605:13617":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"18:13879:12759":{"crate_id":18,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:5976:14755":{"crate_id":17,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"7:4823:13692":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"5:5930:11593":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:5418:12865":{"crate_id":17,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"24:1174:5409":{"crate_id":24,"path":["typenum","type_operators","Abs"],"kind":"trait"},"1:6589:1862":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"18:9340:15237":{"crate_id":18,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:21570:17076":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"5:3668:11637":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"7:1648:13411":{"crate_id":7,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"18:10052:15277":{"crate_id":18,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"12:2049:15391":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:11056:37440":{"crate_id":6,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:42161:11211":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:41719:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"18:10660:12022":{"crate_id":18,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"6:9410:15467":{"crate_id":6,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:20605:17083":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"6:5716:15452":{"crate_id":6,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"18:13233:12575":{"crate_id":18,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:21125:16800":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:46203:14652":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:20920:16806":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:2706:5351":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"18:10303:15285":{"crate_id":18,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"6:11923:1399":{"crate_id":6,"path":["std","str"],"kind":"primitive"},"1:46696:14661":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"18:242:15217":{"crate_id":18,"path":["object","read","util","DebugByte"],"kind":"struct"},"25:85:5350":{"crate_id":25,"path":["block_buffer","Lazy"],"kind":"struct"},"5:1461:14910":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:4872:12855":{"crate_id":17,"path":["gimli","constants","DwDsc"],"kind":"struct"},"5:2240:14969":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:2151:588":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:3152:234":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:46620:14659":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:8899:17473":{"crate_id":6,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:12312:151":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"12:2201:14975":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"21:118:17068":{"crate_id":21,"path":["blobby","Blob6Iterator"],"kind":"struct"},"17:6254:12874":{"crate_id":17,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:2469:17076":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"24:1274:5384":{"crate_id":24,"path":["typenum","type_operators","Logarithm2"],"kind":"trait"},"7:4468:13563":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:20781:16560":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"1:2515:133":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:43688:15017":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"19:766:27800":{"crate_id":19,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:2784:16580":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"6:6609:217":{"crate_id":6,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"5:3799:11670":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"5:4425:11660":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"7:5079:13823":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"18:9148:39081":{"crate_id":18,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"24:5746:5270":{"crate_id":24,"path":["typenum","int","PInt"],"kind":"struct"},"17:6307:12805":{"crate_id":17,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:43187:5326":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"6:6865:11614":{"crate_id":6,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"5:1489:15382":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"5:682:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:11083:14317":{"crate_id":6,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:41615:208":{"crate_id":1,"path":["core","sync","atomic","Ordering","Relaxed"],"kind":"foreign_type"},"1:2911:5428":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"18:10465:15294":{"crate_id":18,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:8253:16706":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:7599:17076":{"crate_id":6,"path":["std","sealed","Sealed"],"kind":"trait"},"18:11879:12227":{"crate_id":18,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:8525:14933":{"crate_id":6,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:4606:16638":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:7652:198":{"crate_id":17,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:42682:11421":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"24:1184:5367":{"crate_id":24,"path":["typenum","type_operators","Pow"],"kind":"trait"},"1:41211:155":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"18:0:1975":{"crate_id":18,"path":["object"],"kind":"module"},"1:40065:16644":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:3935:11593":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"1:9807:17076":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:2580:15422":{"crate_id":6,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"18:8667:11931":{"crate_id":18,"path":["object","endian","BigEndian"],"kind":"struct"},"10:502:13218":{"crate_id":10,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:21850:28056":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:8847:32947":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:11428:15082":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:10751:37431":{"crate_id":6,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:7557:12988":{"crate_id":17,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:43357:11938":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"18:13842:12752":{"crate_id":18,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"19:582:11117":{"crate_id":19,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"18:11391:12119":{"crate_id":18,"path":["object","elf","Sym64"],"kind":"struct"},"17:6943:23885":{"crate_id":17,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"7:6819:14170":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"18:11011:12051":{"crate_id":18,"path":["object","read","CodeView"],"kind":"struct"},"6:7673:17281":{"crate_id":6,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:7867:119":{"crate_id":6,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:4932:12857":{"crate_id":17,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:2684:220":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"17:6164:14822":{"crate_id":17,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"16:0:1973":{"crate_id":16,"path":["addr2line"],"kind":"module"},"1:43315:14612":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:39227:199":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"19:0:1976":{"crate_id":19,"path":["memchr"],"kind":"module"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:47478:14668":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"18:10857:23951":{"crate_id":18,"path":["object","read","SymbolSection"],"kind":"enum"},"5:7073:14974":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:4018:17378":{"crate_id":6,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"5:6743:11683":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"4:294:17076":{"crate_id":4,"path":["digest","core_api","wrapper","sealed","Sealed"],"kind":"trait"},"6:11916:937":{"crate_id":6,"path":["std","never"],"kind":"primitive"},"5:4347:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:43250:5327":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:9409:11419":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"7:4327:13484":{"crate_id":7,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"7:6849:14185":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"5:3168:5315":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"18:10840:12045":{"crate_id":18,"path":["object","read","SymbolIndex"],"kind":"struct"},"18:12158:12268":{"crate_id":18,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:40157:15026":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:7767:23889":{"crate_id":17,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"18:11800:12214":{"crate_id":18,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"4:160:1675":{"crate_id":4,"path":["digest","impl_oid_carrier"],"kind":"macro"},"1:21782:14353":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"5:6371:11152":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:45405:14625":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"5:2963:34251":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:21890:28086":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:6022:23881":{"crate_id":17,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:6146:194":{"crate_id":17,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"18:12622:12022":{"crate_id":18,"path":["object","macho","Relocation"],"kind":"struct"},"12:657:11152":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"5:3214:34460":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:2701:228":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:9111:11209":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"18:13344:12603":{"crate_id":18,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"6:7499:15513":{"crate_id":6,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:12506:107":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"18:10721:12027":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:11488:15088":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"7:7574:14226":{"crate_id":7,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:40375:15043":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:2808:12800":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:30847:183":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"18:10516:12012":{"crate_id":18,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"7:4445:13555":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"7:7516:14212":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"18:12318:12310":{"crate_id":18,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"10:325:13195":{"crate_id":10,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"4:457:14341":{"crate_id":4,"path":["digest","core_api","ct_variable","NoOid"],"kind":"struct"},"5:4193:11593":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"7:4871:13717":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"7:5919:13934":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:4868:17423":{"crate_id":6,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:47814:11048":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"18:11946:12238":{"crate_id":18,"path":["object","macho","Section32"],"kind":"struct"},"22:56:17127":{"crate_id":22,"path":["crypto_common","InnerIvInit"],"kind":"trait"},"1:21927:28087":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"7:1519:13322":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"7:5862:13904":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:2242:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"5:626:15519":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"7:5073:13820":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:41614:183":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:0:1974":{"crate_id":17,"path":["gimli"],"kind":"module"},"6:2481:15421":{"crate_id":6,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:6506:14842":{"crate_id":17,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"22:22:1825":{"crate_id":22,"path":["crypto_common","BlockSizeUser"],"kind":"trait"},"6:10657:15506":{"crate_id":6,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"12:760:11670":{"crate_id":12,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"17:7757:14888":{"crate_id":17,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:5933:11596":{"crate_id":6,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"6:11937:1500":{"crate_id":6,"path":["std","u64"],"kind":"primitive"},"1:42721:15076":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:3142:5308":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"14:0:1971":{"crate_id":14,"path":["std_detect"],"kind":"module"},"12:836:15389":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"7:4462:13561":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:7626:15373":{"crate_id":17,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"19:660:15212":{"crate_id":19,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:6132:14819":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:30052:16392":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"24:1211:5283":{"crate_id":24,"path":["typenum","type_operators","IsLess"],"kind":"trait"},"7:595:13308":{"crate_id":7,"path":["libc","unix","protoent"],"kind":"struct"},"1:2749:11108":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"6:10445:15426":{"crate_id":6,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"6:11064:14325":{"crate_id":6,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"4:328:1826":{"crate_id":4,"path":["digest","core_api","Buffer"],"kind":"typedef"},"18:13426:12626":{"crate_id":18,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"6:3904:17368":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"18:11258:12093":{"crate_id":18,"path":["object","elf","FileHeader64"],"kind":"struct"},"18:13443:12630":{"crate_id":18,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:40050:15012":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:5472:11593":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"6:3463:11209":{"crate_id":6,"path":["std","io","Write"],"kind":"trait"},"1:11465:15087":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:2594:12791":{"crate_id":17,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:6793:14863":{"crate_id":17,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"7:6076:13999":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"5:7043:34457":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:6321:15341":{"crate_id":17,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"18:12293:12307":{"crate_id":18,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"24:1007:17114":{"crate_id":24,"path":["typenum","private","PrivateMin"],"kind":"trait"},"1:7165:5393":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:40294:15031":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"24:1276:5371":{"crate_id":24,"path":["typenum","type_operators","Gcd"],"kind":"trait"},"7:5966:13960":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:43871:15112":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:12361:192":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"12:1826:11653":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"18:11355:12112":{"crate_id":18,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"4:383:1992":{"crate_id":4,"path":["digest","digest","DynDigest"],"kind":"trait"},"18:10125:11972":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"5:6994:14340":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"5:7177:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:4327:12840":{"crate_id":17,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:40495:15055":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"7:5774:13854":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:45858:14642":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:9374:145":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"6:3956:17372":{"crate_id":6,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"6:10686:14924":{"crate_id":6,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"0:102:1704":{"crate_id":0,"path":["sha2","Sha384"],"kind":"typedef"},"10:174:22944":{"crate_id":10,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:41520:15551":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"18:12224:12293":{"crate_id":18,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:8153:15028":{"crate_id":6,"path":["std","io","Chain"],"kind":"struct"},"18:13698:12713":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"18:10440:15292":{"crate_id":18,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"18:13564:12686":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:45381:14624":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:42182:11213":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"23:369:5421":{"crate_id":23,"path":["generic_array","GenericArrayImplEven"],"kind":"struct"},"21:11:17058":{"crate_id":21,"path":["blobby","BlobIterator"],"kind":"struct"},"18:9617:15247":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:42168:11210":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"18:11532:12143":{"crate_id":18,"path":["object","elf","Dyn64"],"kind":"struct"},"6:1594:14915":{"crate_id":6,"path":["std","collections","hash","set","Union"],"kind":"struct"},"22:44:1993":{"crate_id":22,"path":["crypto_common","Reset"],"kind":"trait"},"12:285:14904":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"6:4148:17396":{"crate_id":6,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"6:676:17280":{"crate_id":6,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"6:0:1391":{"crate_id":6,"path":["std"],"kind":"module"},"1:45760:14639":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"18:13499:12642":{"crate_id":18,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"24:821:17101":{"crate_id":24,"path":["typenum","private","PrivateXor"],"kind":"trait"},"1:44378:15139":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:2620:15423":{"crate_id":6,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:5525:17452":{"crate_id":6,"path":["std","process","Termination"],"kind":"trait"},"1:11716:16738":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"5:6768:11686":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"7:7545:14219":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:20575:28860":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"6:11337:11629":{"crate_id":6,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"18:9577:11954":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"7:123:17564":{"crate_id":7,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:2746:106":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:46172:14651":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:4786:32008":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:9155:11211":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:4114:15536":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"25:0:1821":{"crate_id":25,"path":["block_buffer"],"kind":"module"},"7:1672:13428":{"crate_id":7,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"18:8823:11936":{"crate_id":18,"path":["object","endian","I32Bytes"],"kind":"struct"},"18:13469:12636":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:12715:1619":{"crate_id":1,"path":["core","core_arch","arch","x86_64"],"kind":"module"},"5:3734:15522":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"6:4199:15437":{"crate_id":6,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"7:5986:13968":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"7:4780:13676":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"18:10897:12047":{"crate_id":18,"path":["object","read","SymbolMapName"],"kind":"struct"},"18:13015:12520":{"crate_id":18,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"7:7551:14220":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:41340:15071":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"18:10428:15291":{"crate_id":18,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"7:4817:13691":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:42713:15075":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:2827:12946":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:2817:16586":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:4568:12846":{"crate_id":17,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:7293:12964":{"crate_id":17,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:44003:15125":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:47784:11046":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"18:13024:12524":{"crate_id":18,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:30875:11117":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"6:3155:37408":{"crate_id":6,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"19:574:11814":{"crate_id":19,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:40314:15034":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:7322:159":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:7572:39068":{"crate_id":17,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:45505:14629":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:6921:12982":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"6:501:11582":{"crate_id":6,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:43670:15018":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"5:2458:14334":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:4969:12858":{"crate_id":17,"path":["gimli","constants","DwLns"],"kind":"struct"},"12:2168:13152":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:2963:16598":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"18:11821:12218":{"crate_id":18,"path":["object","macho","FatArch32"],"kind":"struct"},"17:7635:12992":{"crate_id":17,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"18:11969:12243":{"crate_id":18,"path":["object","macho","Section64"],"kind":"struct"},"15:0:1972":{"crate_id":15,"path":["rustc_demangle"],"kind":"module"},"22:75:11809":{"crate_id":22,"path":["crypto_common","InvalidLength"],"kind":"struct"},"24:1202:5365":{"crate_id":24,"path":["typenum","type_operators","Min"],"kind":"trait"},"17:5000:12859":{"crate_id":17,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:4381:11692":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"5:875:11645":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:7437:12986":{"crate_id":17,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"18:11813:12216":{"crate_id":18,"path":["object","macho","FatHeader"],"kind":"struct"},"17:6201:15326":{"crate_id":17,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"18:13678:12710":{"crate_id":18,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"6:8989:15493":{"crate_id":6,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"7:6606:14067":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:5377:15445":{"crate_id":6,"path":["std","process","ChildStdout"],"kind":"struct"},"6:7810:11881":{"crate_id":6,"path":["std","fs","Metadata"],"kind":"struct"},"5:2967:34250":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:21838:15000":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:20753:16802":{"crate_id":1,"path":["core","core_simd","cast","SimdCastPtr"],"kind":"trait"},"24:924:17093":{"crate_id":24,"path":["typenum","private","PrivateCmp"],"kind":"trait"},"7:5881:13906":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"22:51:17125":{"crate_id":22,"path":["crypto_common","KeyIvInit"],"kind":"trait"},"1:9817:222":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:11497:14329":{"crate_id":6,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:21015:14351":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:40234:5331":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"18:11299:12097":{"crate_id":18,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:21676:14994":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:3157:135":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"18:9028:15231":{"crate_id":18,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:5571:12809":{"crate_id":17,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"0:101:1702":{"crate_id":0,"path":["sha2","Sha512_256"],"kind":"typedef"},"1:43329:15078":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"18:11459:12129":{"crate_id":18,"path":["object","elf","Rel64"],"kind":"struct"},"24:6172:5358":{"crate_id":24,"path":["typenum","array","ATerm"],"kind":"struct"},"7:1662:13422":{"crate_id":7,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:6981:11599":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:3169:16597":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"7:4517:13590":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:3749:12834":{"crate_id":17,"path":["gimli","constants","DwSect"],"kind":"struct"},"14:110:39054":{"crate_id":14,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"19:113:27791":{"crate_id":19,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"15:7:15378":{"crate_id":15,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:3272:15431":{"crate_id":6,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:8076:15473":{"crate_id":6,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"7:7294:14208":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:20993:17076":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:2862:12802":{"crate_id":17,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"18:8931:11940":{"crate_id":18,"path":["object","read","util","ByteString"],"kind":"struct"},"1:8679:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"5:1423:5316":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"5:3180:34455":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"7:4367:13517":{"crate_id":7,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:6351:23882":{"crate_id":17,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"23:300:5437":{"crate_id":23,"path":["generic_array","sequence","Shorten"],"kind":"trait"},"18:8548:23946":{"crate_id":18,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:22469:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"18:13257:12580":{"crate_id":18,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:8439:14297":{"crate_id":6,"path":["std","path","PrefixComponent"],"kind":"struct"},"12:1027:22958":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:41999:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"18:11037:23952":{"crate_id":18,"path":["object","read","RelocationTarget"],"kind":"enum"},"18:12902:12476":{"crate_id":18,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"18:13324:12596":{"crate_id":18,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"19:548:141":{"crate_id":19,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"7:5889:13911":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"4:418:1980":{"crate_id":4,"path":["digest","Update"],"kind":"trait"},"1:47228:14665":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:857:5316":{"crate_id":6,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"5:3209:14912":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:42666:11422":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"19:96:27790":{"crate_id":19,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"18:10615:14743":{"crate_id":18,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"5:3327:11670":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:4812:796":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:11736:16744":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"7:4928:13753":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"7:4943:13762":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:43341:15079":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"6:11191:14946":{"crate_id":6,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"7:6624:14076":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:11940:1555":{"crate_id":6,"path":["std","usize"],"kind":"primitive"},"7:5817:13872":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:8072:14893":{"crate_id":17,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"5:35:11634":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:8109:14899":{"crate_id":17,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"7:4769:13668":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"24:1016:17116":{"crate_id":24,"path":["typenum","private","PrivateMax"],"kind":"trait"},"24:5724:5273":{"crate_id":24,"path":["typenum","bit","B1"],"kind":"struct"},"7:5899:13918":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"7:7510:14211":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"16:180:22975":{"crate_id":16,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:10699:14945":{"crate_id":6,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"24:6363:5269":{"crate_id":24,"path":["typenum","uint","UTerm"],"kind":"struct"},"24:613:182":{"crate_id":24,"path":["typenum","marker_traits","Ord"],"kind":"trait"},"17:5655:12810":{"crate_id":17,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"0:100:1700":{"crate_id":0,"path":["sha2","Sha512_224"],"kind":"typedef"},"6:2210:129":{"crate_id":6,"path":["std","fs","File"],"kind":"struct"},"7:6719:14107":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:8200:17366":{"crate_id":6,"path":["std","net","Shutdown"],"kind":"enum"},"18:13159:12554":{"crate_id":18,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"18:10068:15279":{"crate_id":18,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"7:488:13245":{"crate_id":7,"path":["libc","unix","timeval"],"kind":"struct"},"6:901:11653":{"crate_id":6,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"12:630:5315":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:22568:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"6:5044:15440":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"18:13053:12531":{"crate_id":18,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:20588:29242":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"7:5835:13884":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"7:5024:13797":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"18:9748:11959":{"crate_id":18,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:47837:11049":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"12:986:15391":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:39125:16599":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"6:2350:17319":{"crate_id":6,"path":["std","fs","symlink_metadata"],"kind":"function"},"7:4488:13574":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:3191:15426":{"crate_id":6,"path":["std","io","stdio","Stdin"],"kind":"struct"},"24:615:5375":{"crate_id":24,"path":["typenum","marker_traits","Bit"],"kind":"trait"},"23:163:5433":{"crate_id":23,"path":["generic_array","functional","FunctionalSequence"],"kind":"trait"},"17:2524:12788":{"crate_id":17,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:11921:312":{"crate_id":6,"path":["std","array"],"kind":"primitive"},"19:624:39086":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"5:4362:11660":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"6:11866:15516":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:11721:15542":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"6:6259:206":{"crate_id":6,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:7596:23888":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:6243:39069":{"crate_id":17,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"5:5820:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:5693:14766":{"crate_id":17,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:8132:17333":{"crate_id":6,"path":["std","io","SeekFrom"],"kind":"enum"},"12:667:15382":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"6:4127:17394":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:3158:37400":{"crate_id":6,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"18:9683:15254":{"crate_id":18,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:7711:12995":{"crate_id":17,"path":["gimli","read","UnitOffset"],"kind":"struct"},"18:8283:23938":{"crate_id":18,"path":["object","common","BinaryFormat"],"kind":"enum"},"5:6699:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"6:5949:206":{"crate_id":6,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:3030:12827":{"crate_id":17,"path":["gimli","common","DwoId"],"kind":"struct"},"6:4351:15439":{"crate_id":6,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"6:11529:14957":{"crate_id":6,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"18:247:15218":{"crate_id":18,"path":["object","read","util","DebugLen"],"kind":"struct"},"6:4459:17399":{"crate_id":6,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:6505:15457":{"crate_id":6,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"18:12607:12358":{"crate_id":18,"path":["object","macho","Nlist64"],"kind":"struct"},"12:805:17287":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:6575:23883":{"crate_id":17,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"18:12496:12344":{"crate_id":18,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:2312:188":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"18:12592:12354":{"crate_id":18,"path":["object","macho","Nlist32"],"kind":"struct"},"1:41234:14584":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"21:105:17067":{"crate_id":21,"path":["blobby","Blob5Iterator"],"kind":"struct"},"1:5590:14985":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:2219:17316":{"crate_id":6,"path":["std","fs","read_to_string"],"kind":"function"},"6:6396:15456":{"crate_id":6,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:47624:14671":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"18:12388:12319":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"18:9409:23960":{"crate_id":18,"path":["object","read","archive","Members"],"kind":"enum"},"18:13639:12699":{"crate_id":18,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:43371:5319":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"6:3233:15429":{"crate_id":6,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:2922:5711":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:42674:15074":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"18:9178:15234":{"crate_id":18,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:1821:14349":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:21798:14996":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"18:13101:12540":{"crate_id":18,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"18:11339:12108":{"crate_id":18,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"18:10936:12048":{"crate_id":18,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:43635:15095":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:30313:28096":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:6376:12807":{"crate_id":17,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:9213:15415":{"crate_id":6,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:12609:16789":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"18:10670:12025":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"6:8263:15478":{"crate_id":6,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"5:3175:14913":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:8129:15374":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:6336:14825":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:9159:11213":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"7:1512:13320":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:1062:15391":{"crate_id":6,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:45982:14645":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:43389:5323":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"18:8490:23944":{"crate_id":18,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:11924:1483":{"crate_id":6,"path":["std","tuple"],"kind":"primitive"},"18:10104:11970":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"7:474:13237":{"crate_id":7,"path":["libc","unix","group"],"kind":"struct"},"7:6710:14103":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:5779:12867":{"crate_id":17,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:5920:14791":{"crate_id":17,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:7016:14873":{"crate_id":17,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:43493:5317":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"26:0:1708":{"crate_id":26,"path":["cfg_if"],"kind":"module"},"1:2738:11104":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"17:4624:12848":{"crate_id":17,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"18:13181:12558":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"18:13376:12611":{"crate_id":18,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:8829:11152":{"crate_id":6,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"18:13367:12608":{"crate_id":18,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:43421:15085":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:11478:14328":{"crate_id":6,"path":["std","alloc","System"],"kind":"struct"},"1:8674:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:9157:11212":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:41470:5316":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"17:5963:14794":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:3300:12831":{"crate_id":17,"path":["gimli","arch","LoongArch"],"kind":"struct"},"17:5677:23878":{"crate_id":17,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"19:564:11821":{"crate_id":19,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"0:103:1706":{"crate_id":0,"path":["sha2","Sha512"],"kind":"typedef"},"1:0:496":{"crate_id":1,"path":["core"],"kind":"module"},"6:7961:15471":{"crate_id":6,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:41759:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:7529:12821":{"crate_id":17,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:32071:15009":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"18:10377:12010":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"5:2959:14337":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"18:12178:12269":{"crate_id":18,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:7688:17282":{"crate_id":6,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:10262:5317":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:40124:101":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"6:4010:17376":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:20933:17076":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"6:5522:13997":{"crate_id":6,"path":["std","process","exit"],"kind":"function"},"6:7285:37149":{"crate_id":6,"path":["std","panicking","Hook"],"kind":"enum"},"1:9965:5315":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"6:7883:15470":{"crate_id":6,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"18:10000:12033":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"24:1031:17077":{"crate_id":24,"path":["typenum","private","IsLessPrivate"],"kind":"trait"},"12:2180:13154":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:41799:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:1630:587":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"24:0:1832":{"crate_id":24,"path":["typenum"],"kind":"module"},"19:491:14709":{"crate_id":19,"path":["memchr","cow","Imp"],"kind":"struct"},"1:45427:14626":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:46666:14660":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"4:332:1827":{"crate_id":4,"path":["digest","core_api","BufferKindUser"],"kind":"trait"},"1:1916:14350":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:55:13031":{"crate_id":17,"path":["gimli","endianity","Endianity"],"kind":"trait"},"6:11899:37430":{"crate_id":6,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:2317:125":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"5:6450:11637":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:2558:11587":{"crate_id":6,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"5:4938:11593":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"18:9523:15244":{"crate_id":18,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"18:13763:12732":{"crate_id":18,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:731:142":{"crate_id":6,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"6:10238:15447":{"crate_id":6,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"18:12980:12519":{"crate_id":18,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"4:484:5286":{"crate_id":4,"path":["digest","core_api","rt_variable","RtVariableCoreWrapper"],"kind":"struct"},"5:5215:11637":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:9414:11420":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"18:8971:129":{"crate_id":18,"path":["object","read","any","File"],"kind":"struct"},"12:1517:15399":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"7:4555:13606":{"crate_id":7,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:9091:14317":{"crate_id":6,"path":["std","time","SystemTime"],"kind":"struct"},"12:1831:11670":{"crate_id":12,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:43177:5325":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:6662:14848":{"crate_id":17,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"7:1708:13442":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:3374:16574":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"17:6728:14850":{"crate_id":17,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:3514:11653":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"18:9628:15248":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:47799:11047":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"18:12259:12304":{"crate_id":18,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:6442:14833":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"19:80:27789":{"crate_id":19,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:7726:15466":{"crate_id":6,"path":["std","error","private","Internal"],"kind":"struct"},"18:9498:11952":{"crate_id":18,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:9613:11587":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:6696:23884":{"crate_id":17,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:7043:38778":{"crate_id":6,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"12:798:15384":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:4789:12852":{"crate_id":17,"path":["gimli","constants","DwCc"],"kind":"struct"},"5:3235:14915":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"18:11891:12229":{"crate_id":18,"path":["object","macho","LcStr"],"kind":"struct"},"23:143:5431":{"crate_id":23,"path":["generic_array","functional","MappedGenericSequence"],"kind":"trait"},"1:40707:15062":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:2774:16579":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"18:10580:14741":{"crate_id":18,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:7697:12814":{"crate_id":17,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:2856:16592":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"24:1272:5391":{"crate_id":24,"path":["typenum","type_operators","SquareRoot"],"kind":"trait"},"7:6743:14119":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:21094:17076":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"7:6804:14163":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"12:447:142":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"6:11360:15434":{"crate_id":6,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:10010:15414":{"crate_id":6,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"6:4097:38781":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"7:7528:14214":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"18:9959:14730":{"crate_id":18,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:11931:744":{"crate_id":6,"path":["std","i32"],"kind":"primitive"},"17:6717:14849":{"crate_id":17,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"24:1111:17081":{"crate_id":24,"path":["typenum","private","IsNotEqualPrivate"],"kind":"trait"},"6:8366:14294":{"crate_id":6,"path":["std","path","Prefix"],"kind":"enum"},"7:1535:13330":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:3079:5309":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"18:10015:15271":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:2981:16593":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"12:1845:14913":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"19:719:11835":{"crate_id":19,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"24:2616:1671":{"crate_id":24,"path":["typenum","generated","consts","U64"],"kind":"typedef"},"1:4145:14983":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"6:7966:15472":{"crate_id":6,"path":["std","io","error","Custom"],"kind":"struct"},"1:43259:5330":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"23:437:5424":{"crate_id":23,"path":["generic_array","ArrayConsumer"],"kind":"struct"},"7:4907:13738":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:43098:15557":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"12:1103:15396":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:44390:14622":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:41589:5315":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:11269:5300":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"15:202:17178":{"crate_id":15,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:8249:17397":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"18:11193:12070":{"crate_id":18,"path":["object","archive","AixFileHeader"],"kind":"struct"},"6:7820:14924":{"crate_id":6,"path":["std","fs","OpenOptions"],"kind":"struct"},"7:6597:14066":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"18:13169:12555":{"crate_id":18,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"4:357:1835":{"crate_id":4,"path":["digest","digest","HashMarker"],"kind":"trait"},"6:926:15383":{"crate_id":6,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:39380:11221":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"19:481:14708":{"crate_id":19,"path":["memchr","cow","CowBytes"],"kind":"struct"},"25:22:17076":{"crate_id":25,"path":["block_buffer","sealed","Sealed"],"kind":"trait"},"6:11915:371":{"crate_id":6,"path":["std","bool"],"kind":"primitive"},"6:8456:17447":{"crate_id":6,"path":["std","path","Component"],"kind":"enum"},"17:8142:15377":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:8997:14312":{"crate_id":6,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"18:10527:24057":{"crate_id":18,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:2357:12781":{"crate_id":17,"path":["gimli","common","Register"],"kind":"struct"},"5:6601:11681":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"6:1846:15416":{"crate_id":6,"path":["std","env","ArgsOs"],"kind":"struct"},"27:0:1709":{"crate_id":27,"path":["cpufeatures"],"kind":"module"},"24:835:17074":{"crate_id":24,"path":["typenum","private","PrivateIntegerAdd"],"kind":"trait"},"18:9108:39076":{"crate_id":18,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:2692:11103":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:43521:15089":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:11101:14326":{"crate_id":6,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"7:1680:13429":{"crate_id":7,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"18:13461:12634":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"18:13821:12749":{"crate_id":18,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:11490:38070":{"crate_id":6,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"24:1051:17078":{"crate_id":24,"path":["typenum","private","IsEqualPrivate"],"kind":"trait"},"7:4886:13723":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"18:9218:11959":{"crate_id":18,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:43654:15097":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"4:421:1981":{"crate_id":4,"path":["digest","FixedOutput"],"kind":"trait"},"1:43475:5321":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"18:8858:11937":{"crate_id":18,"path":["object","endian","I64Bytes"],"kind":"struct"},"18:975:15221":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:42039:11051":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"7:5766:13852":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"7:5954:13955":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:20560:28860":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"24:621:1833":{"crate_id":24,"path":["typenum","marker_traits","Unsigned"],"kind":"trait"},"7:4793:13681":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"8:0:1545":{"crate_id":8,"path":["unwind"],"kind":"module"},"1:4011:15535":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"18:10354:12009":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"7:4878:1002":{"crate_id":7,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"18:12085:12258":{"crate_id":18,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"6:4006:17375":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:22304:176":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:3899:12838":{"crate_id":17,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:4904:12856":{"crate_id":17,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:5643:14764":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"18:10092:15281":{"crate_id":18,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"24:844:17096":{"crate_id":24,"path":["typenum","private","PrivatePow"],"kind":"trait"},"1:21873:14359":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:3315:17356":{"crate_id":6,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"24:6272:5302":{"crate_id":24,"path":["typenum","Less"],"kind":"struct"},"17:4400:12841":{"crate_id":17,"path":["gimli","constants","DwForm"],"kind":"struct"},"15:31:15378":{"crate_id":15,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:41487:14598":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"7:4625:13619":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"7:4799:13684":{"crate_id":7,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"18:10026:15272":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:43755:16758":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"5:273:1989":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"18:9138:15233":{"crate_id":18,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"5:7011:14973":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"18:386:15219":{"crate_id":18,"path":["object","read","any","Segment"],"kind":"struct"},"7:494:13248":{"crate_id":7,"path":["libc","unix","timespec"],"kind":"struct"},"6:1577:14912":{"crate_id":6,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"18:12372:12317":{"crate_id":18,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"6:4704:17386":{"crate_id":6,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"24:1905:17087":{"crate_id":24,"path":["typenum","uint","SetBit"],"kind":"trait"},"7:4474:13566":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:32158:11109":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"7:119:17563":{"crate_id":7,"path":["libc","unix","FILE"],"kind":"enum"},"1:12386:15545":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:5593:11597":{"crate_id":6,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:5357:15444":{"crate_id":6,"path":["std","process","ChildStdin"],"kind":"struct"},"6:8922:14311":{"crate_id":6,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:2695:225":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"5:5840:11665":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:2163:16561":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:21956:15002":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:21814:14354":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:7694:14918":{"crate_id":6,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"6:6032:11600":{"crate_id":6,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:3193:15427":{"crate_id":6,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:2898:117":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:20949:16792":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"17:7335:39072":{"crate_id":17,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:44340:15558":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:10960:1993":{"crate_id":6,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:2518:238":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:45473:14628":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:43960:15115":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"6:11930:743":{"crate_id":6,"path":["std","i16"],"kind":"primitive"},"1:23048:14372":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"19:671:15216":{"crate_id":19,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"5:1669:11637":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"24:998:17075":{"crate_id":24,"path":["typenum","private","PrivateRem"],"kind":"trait"},"7:6066:13996":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:3815:12836":{"crate_id":17,"path":["gimli","constants","DwUt"],"kind":"struct"},"7:62:17509":{"crate_id":7,"path":["libc","unix","DIR"],"kind":"enum"},"17:6854:12921":{"crate_id":17,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"5:2138:14964":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"6:8883:17471":{"crate_id":6,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:21977:15005":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:41317:28046":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"6:11936:1499":{"crate_id":6,"path":["std","u32"],"kind":"primitive"},"1:2161:16560":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"24:6250:5301":{"crate_id":24,"path":["typenum","Greater"],"kind":"struct"},"1:39313:5306":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"6:10029:37369":{"crate_id":6,"path":["std","sys","unix","os","Env"],"kind":"struct"},"7:6704:14101":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:2212:15420":{"crate_id":6,"path":["std","fs","DirEntry"],"kind":"struct"},"17:2786:12799":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:4264:15538":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:9121:132":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"7:1499:13314":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"18:10316:12007":{"crate_id":18,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:6772:16681":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"6:1924:17314":{"crate_id":6,"path":["std","error","Indented"],"kind":"struct"},"1:22403:5305":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"6:1583:14913":{"crate_id":6,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:11676:16425":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:3446:12832":{"crate_id":17,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:1733:16572":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:47700:11041":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:7722:15465":{"crate_id":6,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:7827:14237":{"crate_id":6,"path":["std","fs","FileTimes"],"kind":"struct"},"7:587:13303":{"crate_id":7,"path":["libc","unix","servent"],"kind":"struct"},"18:11090:12056":{"crate_id":18,"path":["object","read","CompressedFileRange"],"kind":"struct"},"18:8573:23947":{"crate_id":18,"path":["object","common","SectionFlags"],"kind":"enum"},"6:1589:14914":{"crate_id":6,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"24:6316:5268":{"crate_id":24,"path":["typenum","uint","UInt"],"kind":"struct"},"6:7556:11619":{"crate_id":6,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"18:12522:12346":{"crate_id":18,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:4702:12849":{"crate_id":17,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:9530:11701":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:4510:12844":{"crate_id":17,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:40091:16645":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:2758:16424":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"5:1511:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"7:4916:13744":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"25:106:5282":{"crate_id":25,"path":["block_buffer","BlockBuffer"],"kind":"struct"},"12:1852:14914":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:40042:15017":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:42401:14601":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"6:10741:14278":{"crate_id":6,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"6:9415:11621":{"crate_id":6,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:20547:11117":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"7:4412:13539":{"crate_id":7,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"18:9946:14729":{"crate_id":18,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"5:775:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"24:942:17108":{"crate_id":24,"path":["typenum","private","PrivateDiv"],"kind":"trait"},"7:7504:14210":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"5:779:11640":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"6:8120:14278":{"crate_id":6,"path":["std","io","IoSlice"],"kind":"struct"},"6:1080:15397":{"crate_id":6,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"24:2520:1669":{"crate_id":24,"path":["typenum","generated","consts","U32"],"kind":"typedef"},"19:538:11819":{"crate_id":19,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:3318:69":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:49682:16810":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"24:828:17099":{"crate_id":24,"path":["typenum","private","PrivateSub"],"kind":"trait"},"6:10864:15448":{"crate_id":6,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"19:727:11838":{"crate_id":19,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"22:12:1824":{"crate_id":22,"path":["crypto_common","Block"],"kind":"typedef"},"1:39978:15014":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"18:11653:12176":{"crate_id":18,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:9403:129":{"crate_id":6,"path":["std","sys","unix","fs","File"],"kind":"struct"},"17:7244:39071":{"crate_id":17,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:9161:194":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:40416:15047":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"12:844:15390":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:42466:68":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"6:9011:37137":{"crate_id":6,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:5616:14760":{"crate_id":17,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"5:1270:15393":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:42411:68":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"6:6108:11604":{"crate_id":6,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"7:1689:13435":{"crate_id":7,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:1433:144":{"crate_id":6,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"6:8104:12982":{"crate_id":6,"path":["std","io","util","Empty"],"kind":"struct"},"1:3163:16595":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:2742:12797":{"crate_id":17,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:635:15405":{"crate_id":6,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:2696:109":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"6:8514:14303":{"crate_id":6,"path":["std","path","Ancestors"],"kind":"struct"},"7:5067:13818":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"19:507:11814":{"crate_id":19,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"5:5263:17173":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"7:4677:13623":{"crate_id":7,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"7:4523:13593":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"7:6027:13986":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"7:5043:13811":{"crate_id":7,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"18:10705:12026":{"crate_id":18,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"18:8979:39078":{"crate_id":18,"path":["object","read","any","FileInternal"],"kind":"enum"},"18:10761:23949":{"crate_id":18,"path":["object","read","FileKind"],"kind":"enum"},"1:47709:5997":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"18:13292:12586":{"crate_id":18,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"18:9322:39075":{"crate_id":18,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:2298:22995":{"crate_id":17,"path":["gimli","common","Format"],"kind":"enum"},"1:41453:11151":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"4:427:1983":{"crate_id":4,"path":["digest","XofReader"],"kind":"trait"},"18:10823:11902":{"crate_id":18,"path":["object","read","SectionIndex"],"kind":"struct"},"6:11938:1497":{"crate_id":6,"path":["std","u128"],"kind":"primitive"},"1:39373:15548":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:47761:11045":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:40346:15040":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"18:12510:12345":{"crate_id":18,"path":["object","macho","IdentCommand"],"kind":"struct"},"19:736:27799":{"crate_id":19,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"18:11628:12172":{"crate_id":18,"path":["object","elf","NoteHeader64"],"kind":"struct"},"7:5014:13792":{"crate_id":7,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"7:6007:13980":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:9596:11703":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"6:4279:15438":{"crate_id":6,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"18:12307:12309":{"crate_id":18,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:40129:15025":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"18:1034:15222":{"crate_id":18,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"6:10977:11626":{"crate_id":6,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"6:554:15403":{"crate_id":6,"path":["std","thread","JoinHandle"],"kind":"struct"},"12:2060:15393":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"18:13651:12701":{"crate_id":18,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:40734:15063":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"10:234:6006":{"crate_id":10,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"7:4841:13701":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"18:10691:24058":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:44110:15132":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"15:165:22964":{"crate_id":15,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:40058:15018":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"6:7891:14917":{"crate_id":6,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:7850:130":{"crate_id":6,"path":["std","fs","FileType"],"kind":"struct"},"7:6035:13988":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"18:9098:15232":{"crate_id":18,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:21442:5310":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"7:6774:14146":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:9127:15495":{"crate_id":6,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"1:40397:15045":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"18:11471:12130":{"crate_id":18,"path":["object","elf","Rela64"],"kind":"struct"},"7:4495:13577":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:39366:12983":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"1:40006:14578":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"5:5509:11667":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"18:11585:12156":{"crate_id":18,"path":["object","elf","Verneed"],"kind":"struct"},"11:0:1968":{"crate_id":11,"path":["adler"],"kind":"module"},"1:42906:14610":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"7:7462:14209":{"crate_id":7,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"24:6192:5359":{"crate_id":24,"path":["typenum","array","TArr"],"kind":"struct"},"23:362:5352":{"crate_id":23,"path":["generic_array","ArrayLength"],"kind":"trait"},"18:9670:15253":{"crate_id":18,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:3386:15533":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"7:5057:13817":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:4783:17383":{"crate_id":6,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"7:506:13253":{"crate_id":7,"path":["libc","unix","rusage"],"kind":"struct"},"17:2931:23021":{"crate_id":17,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"7:5804:13871":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:43663:15098":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"18:12019:11977":{"crate_id":18,"path":["object","macho","Dylib"],"kind":"struct"},"7:4542:13602":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"7:4663:13622":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:45557:14631":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:41353:14926":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"7:1568:13353":{"crate_id":7,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"7:6795:14160":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"18:13082:12539":{"crate_id":18,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:44178:16765":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:11730:14719":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:947:15387":{"crate_id":6,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:9151:120":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"17:2830:12801":{"crate_id":17,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"6:8854:14308":{"crate_id":6,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:10134:5337":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:3703:15435":{"crate_id":6,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:8244:14927":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:43593:15093":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"12:0:1969":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"17:7065:14880":{"crate_id":17,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"7:4983:13782":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:40263:15028":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:7683:12824":{"crate_id":17,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"6:8508:5315":{"crate_id":6,"path":["std","path","Iter"],"kind":"struct"},"17:6919:39073":{"crate_id":17,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:8835:14307":{"crate_id":6,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"10:481:22877":{"crate_id":10,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"7:554:13285":{"crate_id":7,"path":["libc","unix","winsize"],"kind":"struct"},"18:420:11888":{"crate_id":18,"path":["object","read","any","Section"],"kind":"struct"},"1:21572:16795":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"7:6572:14048":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"12:2186:39046":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"7:4786:13679":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"18:9973:14731":{"crate_id":18,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"18:11544:12144":{"crate_id":18,"path":["object","elf","Versym"],"kind":"struct"},"1:21865:14358":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:2929:5307":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"5:2046:15522":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"24:5814:5274":{"crate_id":24,"path":["typenum","int","Z0"],"kind":"struct"},"7:4739:13654":{"crate_id":7,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"7:6617:14072":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:40110:14579":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:9299:15543":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:3182:33492":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"5:7334:11670":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:44305:195":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:43806:15109":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:3197:16600":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:11272:14954":{"crate_id":6,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:2668:12794":{"crate_id":17,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"24:783:17072":{"crate_id":24,"path":["typenum","private","InternalMarker"],"kind":"trait"},"7:4435:13549":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"18:8443:23943":{"crate_id":18,"path":["object","common","RelocationKind"],"kind":"enum"},"1:44361:161":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:4845:12854":{"crate_id":17,"path":["gimli","constants","DwOrd"],"kind":"struct"},"18:12923:12484":{"crate_id":18,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"22:33:1828":{"crate_id":22,"path":["crypto_common","OutputSizeUser"],"kind":"trait"},"17:6990:12931":{"crate_id":17,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"23:382:5422":{"crate_id":23,"path":["generic_array","GenericArrayImplOdd"],"kind":"struct"},"1:40467:15053":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:43575:15092":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"7:4340:13494":{"crate_id":7,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"10:445:22878":{"crate_id":10,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:32067:15466":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:2512:149":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"6:5343:15441":{"crate_id":6,"path":["std","process","Child"],"kind":"struct"},"5:2032:14917":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"6:585:17277":{"crate_id":6,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:5630:15302":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:42921:15077":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:11933:741":{"crate_id":6,"path":["std","i128"],"kind":"primitive"},"6:3378:11593":{"crate_id":6,"path":["std","io","Guard"],"kind":"struct"},"1:10290:5318":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:3231:15428":{"crate_id":6,"path":["std","io","stdio","Stdout"],"kind":"struct"},"18:13865:12756":{"crate_id":18,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:47662:14672":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"4:330:1830":{"crate_id":4,"path":["digest","core_api","UpdateCore"],"kind":"trait"},"1:10057:5336":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"18:10283:12004":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:39203:198":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"6:10491:11623":{"crate_id":6,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"6:7706:17304":{"crate_id":6,"path":["std","env","VarError"],"kind":"enum"},"6:8289:15482":{"crate_id":6,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"12:793:15398":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:47876:5898":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"18:11109:12059":{"crate_id":18,"path":["object","read","CompressedData"],"kind":"struct"},"1:2796:16581":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:2753:16423":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"18:11502:12139":{"crate_id":18,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"7:4586:13616":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"18:12113:12263":{"crate_id":18,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:20880:16799":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:2691:5709":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"18:13399:12619":{"crate_id":18,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"18:13777:12734":{"crate_id":18,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:9057:167":{"crate_id":6,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"5:7194:14976":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"6:8170:11938":{"crate_id":6,"path":["std","io","Bytes"],"kind":"struct"},"18:11422:12123":{"crate_id":18,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:6767:14862":{"crate_id":17,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"10:0:1967":{"crate_id":10,"path":["miniz_oxide"],"kind":"module"},"6:7837:14925":{"crate_id":6,"path":["std","fs","Permissions"],"kind":"struct"},"6:1783:15412":{"crate_id":6,"path":["std","env","Vars"],"kind":"struct"},"4:448:1987":{"crate_id":4,"path":["digest","VariableOutputReset"],"kind":"trait"},"7:4809:13688":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:44403:15140":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"24:1153:17095":{"crate_id":24,"path":["typenum","private","PrivateLogarithm2"],"kind":"trait"},"7:6647:14094":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"19:644:11814":{"crate_id":19,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"18:12006:12247":{"crate_id":18,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"6:888:14911":{"crate_id":6,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:40432:11832":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"18:13194:12564":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:7669:12823":{"crate_id":17,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"18:13385:12612":{"crate_id":18,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:47680:5818":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:8498:14928":{"crate_id":6,"path":["std","path","Components"],"kind":"struct"},"5:7003:11152":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"18:13240:12577":{"crate_id":18,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:41597:5316":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"5:5666:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"7:4715:13644":{"crate_id":7,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:2509:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"5:7161:17154":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:11239:14950":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"7:6867:14188":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:2879:12803":{"crate_id":17,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:39247:202":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"5:1254:14881":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:6868:12923":{"crate_id":17,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"24:1221:5410":{"crate_id":24,"path":["typenum","type_operators","IsEqual"],"kind":"trait"},"1:2694:226":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"18:8256:23925":{"crate_id":18,"path":["object","common","AddressSize"],"kind":"enum"},"1:2805:12943":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:44094:15128":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"18:12046:12253":{"crate_id":18,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:9067:219":{"crate_id":6,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"18:10589:14742":{"crate_id":18,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"5:1479:15398":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"18:10452:15293":{"crate_id":18,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:8047:13042":{"crate_id":17,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:4818:12853":{"crate_id":17,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:2502:12787":{"crate_id":17,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"7:6135:14011":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"18:10798:23950":{"crate_id":18,"path":["object","read","ObjectKind"],"kind":"enum"},"7:5798:13870":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"21:92:17066":{"crate_id":21,"path":["blobby","Blob4Iterator"],"kind":"struct"},"1:12299:136":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"18:9443:15238":{"crate_id":18,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:6671:12905":{"crate_id":17,"path":["gimli","read","line","LineRow"],"kind":"struct"},"4:424:1982":{"crate_id":4,"path":["digest","FixedOutputReset"],"kind":"trait"},"6:1561:5315":{"crate_id":6,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:6327:14824":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"5:6298:11637":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:11539:5336":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:5384:11593":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"17:7837:14889":{"crate_id":17,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"18:1978:15227":{"crate_id":18,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:43224:5331":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:2822:16587":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"23:422:5423":{"crate_id":23,"path":["generic_array","ArrayBuilder"],"kind":"struct"},"1:9110:210":{"crate_id":1,"path":["core","fmt","Result"],"kind":"typedef"},"6:2376:17329":{"crate_id":6,"path":["std","fs","read_dir"],"kind":"function"},"18:13066:12536":{"crate_id":18,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"24:1071:17079":{"crate_id":24,"path":["typenum","private","IsGreaterPrivate"],"kind":"trait"},"6:11927:641":{"crate_id":6,"path":["std","f32"],"kind":"primitive"},"6:8984:15492":{"crate_id":6,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:45658:14635":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:2354:189":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"18:10626:14744":{"crate_id":18,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"18:12449:12330":{"crate_id":18,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"5:5736:11653":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:32031:6052":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"18:12126:12264":{"crate_id":18,"path":["object","macho","ThreadCommand"],"kind":"struct"},"18:11844:12223":{"crate_id":18,"path":["object","macho","MachHeader32"],"kind":"struct"},"6:618:15404":{"crate_id":6,"path":["std","backtrace","Backtrace"],"kind":"struct"},"5:7033:11647":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:4336:11221":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"18:13506:12644":{"crate_id":18,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"15:221:13126":{"crate_id":15,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:11888:17283":{"crate_id":6,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:41919:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:2364:17323":{"crate_id":6,"path":["std","fs","read_link"],"kind":"function"},"7:4314:13474":{"crate_id":7,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:8090:14896":{"crate_id":17,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:22370:174":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:5811:14777":{"crate_id":17,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:10343:15483":{"crate_id":6,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"18:9876:11880":{"crate_id":18,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:2763:12941":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:911:11670":{"crate_id":6,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"18:12358:12314":{"crate_id":18,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"7:4373:13518":{"crate_id":7,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:39187:200":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"12:1838:14912":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:7803:13004":{"crate_id":17,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"18:8953:11941":{"crate_id":18,"path":["object","read","util","StringTable"],"kind":"struct"},"6:11032:14304":{"crate_id":6,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:45535:14630":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"5:7208:28095":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:3593:5316":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:3640:11846":{"crate_id":17,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:40678:15057":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"18:12138:12265":{"crate_id":18,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"7:1494:13312":{"crate_id":7,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"5:4842:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:7478:12819":{"crate_id":17,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"18:10555:14733":{"crate_id":18,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"6:10167:17454":{"crate_id":6,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:2768:12939":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:41388:14595":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"0:99:1698":{"crate_id":0,"path":["sha2","Sha256"],"kind":"typedef"},"18:13477:12637":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:40726:14580":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:9153:11210":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"6:8315:14284":{"crate_id":6,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:39387:14448":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"7:541:13279":{"crate_id":7,"path":["libc","unix","iovec"],"kind":"struct"},"17:5847:14783":{"crate_id":17,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"18:10416:15290":{"crate_id":18,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:2337:12775":{"crate_id":17,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:39345:15547":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:21118:17076":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:8163:15053":{"crate_id":6,"path":["std","io","Take"],"kind":"struct"},"6:355:15401":{"crate_id":6,"path":["std","thread","scoped","Scope"],"kind":"struct"},"18:8420:23942":{"crate_id":18,"path":["object","common","SymbolScope"],"kind":"enum"},"6:5202:190":{"crate_id":6,"path":["std","path","Path"],"kind":"struct"},"12:695:15383":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"24:1195:5381":{"crate_id":24,"path":["typenum","type_operators","Len"],"kind":"trait"},"6:4601:14091":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"18:10142:24032":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"7:1589:13367":{"crate_id":7,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:46028:14647":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"18:9557:11959":{"crate_id":18,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"18:8310:23939":{"crate_id":18,"path":["object","common","SectionKind"],"kind":"enum"},"7:6564:14043":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"12:1501:22959":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"5:4163:11593":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:5532:14984":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:43149:5314":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"18:12563:12351":{"crate_id":18,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"7:5876:13905":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"7:4482:13571":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:46542:14658":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:12334:29851":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:8237:14926":{"crate_id":6,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"7:4379:13520":{"crate_id":7,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"7:1910:18911":{"crate_id":7,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"7:482:13242":{"crate_id":7,"path":["libc","unix","utimbuf"],"kind":"struct"},"5:2220:36768":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:8941:107":{"crate_id":6,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"6:2890:210":{"crate_id":6,"path":["std","io","error","Result"],"kind":"typedef"},"3:0:1964":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"18:8909:11938":{"crate_id":18,"path":["object","read","util","Bytes"],"kind":"struct"},"6:1565:11152":{"crate_id":6,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"7:573:13295":{"crate_id":7,"path":["libc","unix","itimerval"],"kind":"struct"},"17:8180:23891":{"crate_id":17,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:45952:14644":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"5:7237:14981":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"6:6156:15454":{"crate_id":6,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"24:612:5364":{"crate_id":24,"path":["typenum","marker_traits","Zero"],"kind":"trait"},"5:7094:11152":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:8269:128":{"crate_id":17,"path":["gimli","read","Error"],"kind":"enum"},"6:1071:15393":{"crate_id":6,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"18:10080:15280":{"crate_id":18,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"19:599:39085":{"crate_id":19,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:2448:12785":{"crate_id":17,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:10248:5321":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:46125:14650":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:6876:12815":{"crate_id":17,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"18:12646:12368":{"crate_id":18,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:2905:12804":{"crate_id":17,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"7:4694:13632":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"7:4419:13543":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"7:4290:13457":{"crate_id":7,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:42441:13018":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"18:9826:15258":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"24:2392:17076":{"crate_id":24,"path":["typenum","sealed","Sealed"],"kind":"trait"},"18:12550:12350":{"crate_id":18,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:1600:1365":{"crate_id":1,"path":["core","mem","size_of"],"kind":"function"},"11:36:13158":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"17:8156:12826":{"crate_id":17,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:6558:14844":{"crate_id":17,"path":["gimli","read","line","LineRows"],"kind":"struct"},"24:1251:5413":{"crate_id":24,"path":["typenum","type_operators","IsNotEqual"],"kind":"trait"},"6:8954:37415":{"crate_id":6,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:22271:175":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"18:13309:12594":{"crate_id":18,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:11283:16745":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"18:1787:15223":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:40692:15059":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"18:9350:39077":{"crate_id":18,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:46730:14662":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"12:311:14907":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:7267:5714":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:41959:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:6819:12917":{"crate_id":17,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:5787:11598":{"crate_id":6,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"21:46:128":{"crate_id":21,"path":["blobby","Error"],"kind":"enum"},"4:440:1986":{"crate_id":4,"path":["digest","VariableOutput"],"kind":"trait"},"18:10505:15297":{"crate_id":18,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"5:1408:5315":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"19:755:14726":{"crate_id":19,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:10731:119":{"crate_id":6,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:43645:15096":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"18:9866:15261":{"crate_id":18,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"18:9469:15239":{"crate_id":18,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"5:2167:14966":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:2892:128":{"crate_id":6,"path":["std","io","error","Error"],"kind":"struct"},"17:5104:12862":{"crate_id":17,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:43777:15100":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:4:1015":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:10096:5320":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"5:7065:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:5998:23880":{"crate_id":17,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"22:48:17124":{"crate_id":22,"path":["crypto_common","KeyInit"],"kind":"trait"},"5:6119:17186":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:9165:11215":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"18:11220:12078":{"crate_id":18,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"18:12770:12370":{"crate_id":18,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"7:5993:13969":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:42703:6006":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:12517:11604":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"17:6179:15311":{"crate_id":17,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"18:9566:15235":{"crate_id":18,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:6400:14830":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:2792:16582":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"18:13316:12595":{"crate_id":18,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"5:6582:11667":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:6544:12813":{"crate_id":17,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:8416:6006":{"crate_id":6,"path":["std","path","State"],"kind":"enum"},"6:11522:14957":{"crate_id":6,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:3996:17374":{"crate_id":6,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"18:8521:23945":{"crate_id":18,"path":["object","common","FileFlags"],"kind":"enum"},"6:2391:17205":{"crate_id":6,"path":["std","io"],"kind":"module"},"18:9986:14732":{"crate_id":18,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:643:17279":{"crate_id":6,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:2506:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"25:93:128":{"crate_id":25,"path":["block_buffer","Error"],"kind":"struct"},"1:43679:15012":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:0:442":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"18:3266:15230":{"crate_id":18,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"16:219:22980":{"crate_id":16,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:44145:122":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"17:5944:15304":{"crate_id":17,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"7:4649:13621":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:2603:128":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:46306:14654":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"5:1500:15383":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"5:4392:11593":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"6:5393:15446":{"crate_id":6,"path":["std","process","ChildStderr"],"kind":"struct"},"1:20995:16794":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"5:7023:11653":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"12:403:39047":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:43237:5332":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:41605:11152":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"6:8195:15480":{"crate_id":6,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"18:10545:12017":{"crate_id":18,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:12554:140":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"8:32:22864":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"4:436:1985":{"crate_id":4,"path":["digest","ExtendableOutputReset"],"kind":"trait"},"6:480:11581":{"crate_id":6,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:2572:12790":{"crate_id":17,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"6:930:15384":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:11942:13":{"crate_id":6,"path":["std","fn"],"kind":"primitive"},"1:10855:1820":{"crate_id":1,"path":["core","slice","raw","from_ref"],"kind":"function"},"18:8360:23940":{"crate_id":18,"path":["object","common","ComdatKind"],"kind":"enum"},"6:8867:17472":{"crate_id":6,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"19:521:27801":{"crate_id":19,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"5:3139:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:21001:16796":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:22337:177":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:44297:211":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:1637:11097":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"5:7057:11152":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"24:1241:5412":{"crate_id":24,"path":["typenum","type_operators","IsLessOrEqual"],"kind":"trait"},"22:42:17123":{"crate_id":22,"path":["crypto_common","InnerUser"],"kind":"trait"},"6:11422:15436":{"crate_id":6,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"10:421:22880":{"crate_id":10,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:42691:145":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:44114:15133":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"18:11573:12153":{"crate_id":18,"path":["object","elf","Verdaux"],"kind":"struct"},"1:8821:669":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"1:21099:16793":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"18:11520:12140":{"crate_id":18,"path":["object","elf","Dyn32"],"kind":"struct"},"18:10885:14750":{"crate_id":18,"path":["object","read","SymbolMap"],"kind":"struct"},"6:6561:17468":{"crate_id":6,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:5991:14986":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:4255:207":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:39086:16602":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"5:7254:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:6361:12879":{"crate_id":17,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"18:9907:11967":{"crate_id":18,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"0:98:1696":{"crate_id":0,"path":["sha2","Sha224"],"kind":"typedef"},"7:7522:14213":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"17:7488:14885":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:40276:14958":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:9149:37951":{"crate_id":6,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"7:1526:13325":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"7:4567:13615":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:42506:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"6:1931:654":{"crate_id":6,"path":["std","ffi"],"kind":"module"},"1:2245:98":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"18:12194:12274":{"crate_id":18,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:154:11567":{"crate_id":17,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"18:9596:11956":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"18:13612:12687":{"crate_id":18,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"5:3201:14914":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"5:7149:14975":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:11928:643":{"crate_id":6,"path":["std","f64"],"kind":"primitive"},"5:1285:15391":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"6:638:15407":{"crate_id":6,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"7:5736:13827":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"24:653:5396":{"crate_id":24,"path":["typenum","marker_traits","TypeArray"],"kind":"trait"},"17:6218:15330":{"crate_id":17,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"23:195:5430":{"crate_id":23,"path":["generic_array","iter","GenericArrayIter"],"kind":"struct"},"18:8632:23926":{"crate_id":18,"path":["object","endian","Endianness"],"kind":"enum"},"1:42457:71":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"24:2568:1670":{"crate_id":24,"path":["typenum","generated","consts","U48"],"kind":"typedef"},"12:736:14911":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"6:8759:15483":{"crate_id":6,"path":["std","process","CommandArgs"],"kind":"struct"},"18:13265:12582":{"crate_id":18,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:2426:12784":{"crate_id":17,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"6:2855:11592":{"crate_id":6,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:40355:15041":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:3481:17332":{"crate_id":6,"path":["std","io","Seek"],"kind":"trait"},"7:4991:13784":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:5724:14771":{"crate_id":17,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"18:9488:15241":{"crate_id":18,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"18:8788:11935":{"crate_id":18,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:5557:12806":{"crate_id":17,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:10775:5334":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:40323:15036":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"18:13145:12553":{"crate_id":18,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:2404:12783":{"crate_id":17,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"19:531:14710":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:47746:11044":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"14:226:13151":{"crate_id":14,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"4:512:1829":{"crate_id":4,"path":["digest","core_api","TruncSide"],"kind":"enum"},"18:10747:128":{"crate_id":18,"path":["object","read","Error"],"kind":"struct"},"4:334:5279":{"crate_id":4,"path":["digest","core_api","FixedOutputCore"],"kind":"trait"},"1:40332:15037":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:4596:12847":{"crate_id":17,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:25858:14373":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"18:9641:15249":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:11224:14327":{"crate_id":6,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:7595:16689":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"12:2194:13156":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"18:10270:15283":{"crate_id":18,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:6124:11607":{"crate_id":6,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"1:44090:15127":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"12:1818:5315":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:7588:15372":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"18:9038:39082":{"crate_id":18,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"5:1520:15521":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"25:36:1843":{"crate_id":25,"path":["block_buffer","BufferKind"],"kind":"trait"},"22:36:17121":{"crate_id":22,"path":["crypto_common","KeySizeUser"],"kind":"trait"},"1:39990:28102":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"7:5978:13967":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"7:6021:13983":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:6236:15338":{"crate_id":17,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:2744:11106":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"1:3648:11152":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:41251:14586":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"18:10635:12021":{"crate_id":18,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"19:609:15211":{"crate_id":19,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:44166:15136":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:45836:14641":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:361:15402":{"crate_id":6,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"7:7277:14197":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"5:1135:37079":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"12:723:14910":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:40407:15046":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"7:7563:14222":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"18:13488:12641":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:10014:5319":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"23:123:17069":{"crate_id":23,"path":["generic_array","arr","AddLength"],"kind":"trait"},"12:1068:15395":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:45906:14643":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:45451:14627":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"6:9032:14315":{"crate_id":6,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"7:4455:13558":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:6488:14834":{"crate_id":17,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"6:9110:14936":{"crate_id":6,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:8111:14277":{"crate_id":6,"path":["std","io","util","Sink"],"kind":"struct"},"21:66:17064":{"crate_id":21,"path":["blobby","Blob2Iterator"],"kind":"struct"},"6:2544:11589":{"crate_id":6,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"6:6575:11612":{"crate_id":6,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:45713:14638":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:4540:12845":{"crate_id":17,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:2833:12947":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"18:13219:12572":{"crate_id":18,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"18:9512:15243":{"crate_id":18,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"7:6833:14179":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"6:7537:11617":{"crate_id":6,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"18:9424:11949":{"crate_id":18,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:4706:17387":{"crate_id":6,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:3152:38630":{"crate_id":6,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"23:260:5434":{"crate_id":23,"path":["generic_array","sequence","GenericSequence"],"kind":"trait"},"17:4037:12839":{"crate_id":17,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:40701:15060":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:7971:17359":{"crate_id":6,"path":["std","io","error","ErrorKind"],"kind":"enum"},"7:4615:13618":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:43949:16759":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:40456:15050":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:47586:14670":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"7:4534:13597":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"7:4400:13530":{"crate_id":7,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"18:11319:12107":{"crate_id":18,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:6431:14832":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"7:5828:13880":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"5:7279:15532":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"7:0:817":{"crate_id":7,"path":["libc"],"kind":"module"},"6:8271:14283":{"crate_id":6,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"18:8195:23927":{"crate_id":18,"path":["object","common","Architecture"],"kind":"enum"},"1:44348:14619":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"7:4728:13648":{"crate_id":7,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:43792:15106":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"18:9895:15266":{"crate_id":18,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:2847:16590":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"7:6155:14025":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:6981:15343":{"crate_id":17,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"5:1470:14911":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"18:11136:12060":{"crate_id":18,"path":["object","archive","Header"],"kind":"struct"},"6:6432:11611":{"crate_id":6,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:6355:15455":{"crate_id":6,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"7:4894:13728":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"4:522:1836":{"crate_id":4,"path":["digest","InvalidOutputSize"],"kind":"struct"},"17:6460:12808":{"crate_id":17,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"18:11282:12094":{"crate_id":18,"path":["object","elf","Ident"],"kind":"struct"},"6:8183:15094":{"crate_id":6,"path":["std","io","Lines"],"kind":"struct"},"7:1574:13355":{"crate_id":7,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:1048:14881":{"crate_id":6,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:5386:11930":{"crate_id":17,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"6:7875:15469":{"crate_id":6,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"18:10039:15275":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"7:4303:13466":{"crate_id":7,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"18:12345:12313":{"crate_id":18,"path":["object","macho","RpathCommand"],"kind":"struct"},"6:2215:11687":{"crate_id":6,"path":["std","fs","read"],"kind":"function"},"17:4728:12850":{"crate_id":17,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:3585:12833":{"crate_id":17,"path":["gimli","arch","X86"],"kind":"struct"},"18:10569:14737":{"crate_id":18,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:41538:193":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"18:1947:15224":{"crate_id":18,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:46880:14663":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:46460:14657":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:9146:112":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:40204:11693":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"6:5090:191":{"crate_id":6,"path":["std","path","PathBuf"],"kind":"struct"},"17:6535:11570":{"crate_id":17,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"19:614:39087":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"24:785:17103":{"crate_id":24,"path":["typenum","private","Trim"],"kind":"trait"},"18:13249:12578":{"crate_id":18,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"7:532:13273":{"crate_id":7,"path":["libc","unix","hostent"],"kind":"struct"},"6:875:14910":{"crate_id":6,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:7449:15365":{"crate_id":17,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"18:13419:12625":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:5462:15448":{"crate_id":6,"path":["std","process","Stdio"],"kind":"struct"},"19:515:11817":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:3225:12830":{"crate_id":17,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:39560:28084":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"18:11060:12022":{"crate_id":18,"path":["object","read","Relocation"],"kind":"struct"},"6:6935:11615":{"crate_id":6,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:43983:15123":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"18:11641:12173":{"crate_id":18,"path":["object","elf","HashHeader"],"kind":"struct"},"24:1279:5368":{"crate_id":24,"path":["typenum","type_operators","ToInt"],"kind":"trait"},"1:7202:134":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:5071:12861":{"crate_id":17,"path":["gimli","constants","DwMacro"],"kind":"struct"},"12:1822:11152":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:30277:5426":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"5:6611:11682":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"6:7645:11623":{"crate_id":6,"path":["std","thread","Thread"],"kind":"struct"},"18:10334:11959":{"crate_id":18,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"25:77:1822":{"crate_id":25,"path":["block_buffer","Eager"],"kind":"struct"},"7:4747:13657":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:6520:12882":{"crate_id":17,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:40171:16655":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"typedef"},"18:9721:15255":{"crate_id":18,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"5:3567:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:10276:5322":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"18:9734:15256":{"crate_id":18,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:47689:11040":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:6392:15059":{"crate_id":6,"path":["std","sync","once","Once"],"kind":"struct"},"7:1556:13345":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:6890:12816":{"crate_id":17,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:39352:14447":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"12:749:11653":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:20771:16798":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"18:9275:39074":{"crate_id":18,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"11:44:13159":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"6:953:15389":{"crate_id":6,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"6:11197:15510":{"crate_id":6,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"18:9545:11925":{"crate_id":18,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:7467:14882":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"6:1768:609":{"crate_id":6,"path":["std","env"],"kind":"module"},"18:8651:11930":{"crate_id":18,"path":["object","endian","LittleEndian"],"kind":"struct"},"18:12419:12324":{"crate_id":18,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:10169:5323":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:7509:12820":{"crate_id":17,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"12:1012:15393":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:4410:11081":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"18:12835:12421":{"crate_id":18,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"18:11993:12244":{"crate_id":18,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:8842:33185":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:3424:15433":{"crate_id":6,"path":["std","io","IoSliceMut"],"kind":"struct"},"18:8753:11934":{"crate_id":18,"path":["object","endian","U64Bytes"],"kind":"struct"},"4:473:1674":{"crate_id":4,"path":["digest","core_api","ct_variable","CtVariableCoreWrapper"],"kind":"struct"},"1:2843:16589":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"6:8936:15486":{"crate_id":6,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:2616:12792":{"crate_id":17,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:3270:15430":{"crate_id":6,"path":["std","io","stdio","Stderr"],"kind":"struct"},"18:13625:12693":{"crate_id":18,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"18:8683:11932":{"crate_id":18,"path":["object","endian","U16Bytes"],"kind":"struct"},"6:4662:17425":{"crate_id":6,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"0:0:1707":{"crate_id":0,"path":["sha2"],"kind":"module"},"6:7488:12054":{"crate_id":6,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"7:1695:13438":{"crate_id":7,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:8293:14076":{"crate_id":6,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:5594:12811":{"crate_id":17,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:11787:16752":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:2642:12793":{"crate_id":17,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"18:13211:12569":{"crate_id":18,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:6061:22994":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:5013:15440":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"7:1594:13369":{"crate_id":7,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:4480:12843":{"crate_id":17,"path":["gimli","constants","DwLle"],"kind":"struct"},"7:4549:13604":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:43625:15094":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"12:1048:39053":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:43539:15090":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:2788:16584":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:8189:15478":{"crate_id":6,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:43970:15119":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:11941:1128":{"crate_id":6,"path":["std","reference"],"kind":"primitive"},"1:43823:15110":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:6644:15455":{"crate_id":6,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"6:8777:14304":{"crate_id":6,"path":["std","process","ExitStatus"],"kind":"struct"},"18:11163:12066":{"crate_id":18,"path":["object","archive","AixHeader"],"kind":"struct"},"18:12799:12390":{"crate_id":18,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:2800:16583":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:43198:5333":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"18:11861:12226":{"crate_id":18,"path":["object","macho","MachHeader64"],"kind":"struct"},"18:12098:12260":{"crate_id":18,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:44106:15131":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:2522:237":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"5:1371:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"18:12536:12347":{"crate_id":18,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"7:5007:13789":{"crate_id":7,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:5886:14785":{"crate_id":17,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:7259:14598":{"crate_id":17,"path":["gimli","read","op","Location"],"kind":"enum"},"6:11883:37158":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"6:10971:11625":{"crate_id":6,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"18:10712:24059":{"crate_id":18,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"24:933:17106":{"crate_id":24,"path":["typenum","private","PrivateSetBit"],"kind":"trait"},"17:3063:11842":{"crate_id":17,"path":["gimli","arch","Arm"],"kind":"struct"},"10:52:22896":{"crate_id":10,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:21989:16426":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:7366:23887":{"crate_id":17,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:1747:14343":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"24:1091:17080":{"crate_id":24,"path":["typenum","private","IsLessOrEqualPrivate"],"kind":"trait"},"12:399:39052":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:7624:14236":{"crate_id":6,"path":["std","thread","ThreadId"],"kind":"struct"},"1:30243:5427":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:3700:15434":{"crate_id":6,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:7042:14879":{"crate_id":17,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"24:989:17073":{"crate_id":24,"path":["typenum","private","PrivateDivInt"],"kind":"trait"},"18:9478:15240":{"crate_id":18,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"12:1611:11578":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:45676:14636":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:20590:29240":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:7206:152":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"24:5780:5271":{"crate_id":24,"path":["typenum","int","NInt"],"kind":"struct"},"18:13791:12741":{"crate_id":18,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"4:341:1831":{"crate_id":4,"path":["digest","core_api","VariableOutputCore"],"kind":"trait"},"5:4073:5316":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"18:9917:11968":{"crate_id":18,"path":["object","read","elf","version","Version"],"kind":"struct"},"19:690:14716":{"crate_id":19,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:42175:11212":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"18:12403:12323":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"6:11917:418":{"crate_id":6,"path":["std","char"],"kind":"primitive"},"5:3580:5315":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"18:3142:15229":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:5579:206":{"crate_id":6,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"6:936:17287":{"crate_id":6,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:1756:14346":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:41478:11152":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"17:6935:15342":{"crate_id":17,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"6:5742:15453":{"crate_id":6,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:43347:15080":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"4:336:5280":{"crate_id":4,"path":["digest","core_api","ExtendableOutputCore"],"kind":"trait"},"6:11717:11633":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:9989:5316":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"7:6840:14182":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"7:1716:13446":{"crate_id":7,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"7:6670:14095":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"24:6294:126":{"crate_id":24,"path":["typenum","Equal"],"kind":"struct"},"1:41639:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:917:15398":{"crate_id":6,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:9906:15068":{"crate_id":6,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"7:1544:13336":{"crate_id":7,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"4:430:1984":{"crate_id":4,"path":["digest","ExtendableOutput"],"kind":"trait"},"1:40446:15049":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"18:11372:12114":{"crate_id":18,"path":["object","elf","Sym32"],"kind":"struct"},"1:2741:5710":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"18:9933:14727":{"crate_id":18,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"18:13812:12747":{"crate_id":18,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"5:7351:11675":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:7519:14887":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:41879:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:8977:15491":{"crate_id":6,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:40685:15058":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"18:9265:15235":{"crate_id":18,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"23:0:1878":{"crate_id":23,"path":["generic_array"],"kind":"module"},"6:844:5315":{"crate_id":6,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"18:9380:23959":{"crate_id":18,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"18:9886:15263":{"crate_id":18,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:22535:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:7317:39070":{"crate_id":17,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:41839:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:6211:11596":{"crate_id":6,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"24:1231:5411":{"crate_id":24,"path":["typenum","type_operators","IsGreater"],"kind":"trait"},"18:13803:12743":{"crate_id":18,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:2470:6053":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:41462:5315":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"6:8765:186":{"crate_id":6,"path":["std","process","Output"],"kind":"struct"},"6:8813:5315":{"crate_id":6,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:44102:15130":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"19:652:11814":{"crate_id":19,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:7543:12822":{"crate_id":17,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:7411:12985":{"crate_id":17,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:8947:15488":{"crate_id":6,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"7:6129:14010":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:535:14753":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"5:1099:37078":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"18:11924:12237":{"crate_id":18,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:922:15382":{"crate_id":6,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:20890:16560":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"1:40077:15020":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"24:2508:1668":{"crate_id":24,"path":["typenum","generated","consts","U28"],"kind":"typedef"},"5:7268:14982":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:4023:103":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"6:3348:15062":{"crate_id":6,"path":["std","io","util","Repeat"],"kind":"struct"},"1:2812:16585":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"5:892:5315":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"6:11266:14953":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"7:4637:13620":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:2470:12786":{"crate_id":17,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"18:12433:12326":{"crate_id":18,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"18:13433:12627":{"crate_id":18,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"18:9696:11952":{"crate_id":18,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"7:562:13290":{"crate_id":7,"path":["libc","unix","linger"],"kind":"struct"},"6:11939:790":{"crate_id":6,"path":["std","isize"],"kind":"primitive"},"1:21454:28858":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"7:4388:13525":{"crate_id":7,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:8025:13041":{"crate_id":17,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"5:2687:14338":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:47540:14669":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"18:9653:15250":{"crate_id":18,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"6:9062:218":{"crate_id":6,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:3872:12837":{"crate_id":17,"path":["gimli","constants","DwCfa"],"kind":"struct"},"7:1505:13317":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:10711:14237":{"crate_id":6,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"24:1168:5408":{"crate_id":24,"path":["typenum","type_operators","Same"],"kind":"trait"},"18:12033:12252":{"crate_id":18,"path":["object","macho","DylibCommand"],"kind":"struct"},"18:8598:23948":{"crate_id":18,"path":["object","common","SymbolFlags"],"kind":"enum"},"18:12483:12343":{"crate_id":18,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:20607:17084":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:45695:14637":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"12:365:11576":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"12:817:15387":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:2780:12942":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:40214:15549":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"6:1785:15413":{"crate_id":6,"path":["std","env","VarsOs"],"kind":"struct"},"7:6014:13982":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:47086:14664":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"23:346:5438":{"crate_id":23,"path":["generic_array","sequence","Concat"],"kind":"trait"},"1:45806:14640":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:7103:14312":{"crate_id":17,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:7244:121":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:41297:14593":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"18:12059:12255":{"crate_id":18,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:40285:15030":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:21127:14351":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:40141:28095":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:21911:28058":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"24:2808:1834":{"crate_id":24,"path":["typenum","generated","consts","U128"],"kind":"typedef"},"7:653:17921":{"crate_id":7,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"24:1261:5380":{"crate_id":24,"path":["typenum","type_operators","IsGreaterOrEqual"],"kind":"trait"},"6:10894:14306":{"crate_id":6,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"18:10402:15286":{"crate_id":18,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"5:258:11637":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"23:295:5436":{"crate_id":23,"path":["generic_array","sequence","Lengthen"],"kind":"trait"},"1:14:1944":{"crate_id":1,"path":["core","write"],"kind":"macro"},"6:8805:14306":{"crate_id":6,"path":["std","process","ExitCode"],"kind":"struct"},"1:22436:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:2319:12773":{"crate_id":17,"path":["gimli","common","Encoding"],"kind":"struct"},"7:4861:13711":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"24:1131:17082":{"crate_id":24,"path":["typenum","private","IsGreaterOrEqualPrivate"],"kind":"trait"},"1:41402:181":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:43269:5328":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:8348:17434":{"crate_id":6,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"18:11832:12221":{"crate_id":18,"path":["object","macho","FatArch64"],"kind":"struct"},"7:4394:13527":{"crate_id":7,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"9:0:1708":{"crate_id":9,"path":["cfg_if"],"kind":"module"},"6:10876:37429":{"crate_id":6,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"6:11401:15435":{"crate_id":6,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"18:13857:12753":{"crate_id":18,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"8:79:22871":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:22502:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:2589:116":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:41376:14594":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"24:814:17091":{"crate_id":24,"path":["typenum","private","PrivateAnd"],"kind":"trait"},"1:41268:16700":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:44126:14325":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:30299:68":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:6678:16694":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:4445:12842":{"crate_id":17,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:10855:13215":{"crate_id":6,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"5:5856:17181":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"18:8389:23941":{"crate_id":18,"path":["object","common","SymbolKind"],"kind":"enum"},"18:11234:12079":{"crate_id":18,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:11922:1369":{"crate_id":6,"path":["std","slice"],"kind":"primitive"},"6:8176:5319":{"crate_id":6,"path":["std","io","Split"],"kind":"struct"},"6:7699:14921":{"crate_id":6,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"17:8170:14900":{"crate_id":17,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"18:13121:12548":{"crate_id":18,"path":["object","pe","ImageSymbol"],"kind":"struct"},"4:0:1661":{"crate_id":4,"path":["digest"],"kind":"module"},"18:11721:12180":{"crate_id":18,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:5346:12864":{"crate_id":17,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"6:4119:17393":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"18:10257:15282":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"7:1732:13451":{"crate_id":7,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:5367:22993":{"crate_id":17,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:4765:388":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"7:4832:13695":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:40254:15550":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:43167:5313":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:8256:13050":{"crate_id":17,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"6:10851:15465":{"crate_id":6,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"18:10649:14745":{"crate_id":18,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:43439:15086":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"10:388:22879":{"crate_id":10,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:8791:14305":{"crate_id":6,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:7600:14235":{"crate_id":6,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:40020:15015":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"6:959:15390":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:4665:17398":{"crate_id":6,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"18:11434:12124":{"crate_id":18,"path":["object","elf","Rel32"],"kind":"struct"},"7:579:13298":{"crate_id":7,"path":["libc","unix","tms"],"kind":"struct"},"17:2764:12798":{"crate_id":17,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"7:7557:14221":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:30371:28068":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"18:13721:12726":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"18:9188:39079":{"crate_id":18,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"6:6893:37904":{"crate_id":6,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:7592:16622":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"18:10681:14747":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"7:4937:13759":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:47338:14666":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"7:7585:14227":{"crate_id":7,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"18:9822:15257":{"crate_id":18,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"18:13135:12552":{"crate_id":18,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:40084:15021":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"6:867:11152":{"crate_id":6,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"21:0:1977":{"crate_id":21,"path":["blobby"],"kind":"module"},"6:6319:166":{"crate_id":6,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"6:5408:15447":{"crate_id":6,"path":["std","process","Command"],"kind":"struct"},"1:47735:11043":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:3234:16601":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"18:13689:12711":{"crate_id":18,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"18:10743:15299":{"crate_id":18,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:10808:5335":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:20740:16801":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"5:4031:11637":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:4187:11220":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"5:2128:11582":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:3488:17351":{"crate_id":6,"path":["std","io","BufRead"],"kind":"trait"},"7:4972:13776":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:42484:128":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:4437:11223":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"24:1190:5362":{"crate_id":24,"path":["typenum","type_operators","Cmp"],"kind":"trait"},"1:39291:203":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"18:10735:12030":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:2546:12789":{"crate_id":17,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"24:642:5395":{"crate_id":24,"path":["typenum","marker_traits","Integer"],"kind":"trait"},"1:21:682":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"4:502:5288":{"crate_id":4,"path":["digest","core_api","xof_reader","XofReaderCoreWrapper"],"kind":"struct"},"4:291:5287":{"crate_id":4,"path":["digest","core_api","wrapper","CoreProxy"],"kind":"trait"},"2:229:210":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"23:403:1879":{"crate_id":23,"path":["generic_array","GenericArray"],"kind":"struct"},"6:4599:14089":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:4259:15537":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"6:11044:14305":{"crate_id":6,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"22:16:186":{"crate_id":22,"path":["crypto_common","Output"],"kind":"typedef"},"20:0:1032":{"crate_id":20,"path":["panic_unwind"],"kind":"module"},"18:1919:23990":{"crate_id":18,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:1821:15414":{"crate_id":6,"path":["std","env","SplitPaths"],"kind":"struct"},"1:22238:178":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"6:413:165":{"crate_id":6,"path":["std","thread","local","LocalKey"],"kind":"struct"},"18:9068:39083":{"crate_id":18,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"18:9228:39080":{"crate_id":18,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"7:4954:13765":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:7029:14876":{"crate_id":17,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"12:644:5316":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:2264:105":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"18:12915:12483":{"crate_id":18,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"7:4684:13625":{"crate_id":7,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:3999:15534":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:6508:17466":{"crate_id":6,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"7:5050:13814":{"crate_id":7,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"6:3805:15436":{"crate_id":6,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"5:1299:15397":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"5:2957:34247":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"7:4763:13665":{"crate_id":7,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:11935:1498":{"crate_id":6,"path":["std","u16"],"kind":"primitive"},"6:10448:15428":{"crate_id":6,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"22:46:1823":{"crate_id":22,"path":["crypto_common","AlgorithmName"],"kind":"trait"},"7:6687:14096":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"22:54:17126":{"crate_id":22,"path":["crypto_common","InnerInit"],"kind":"trait"},"5:1008:11637":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"18:487:15220":{"crate_id":18,"path":["object","read","any","Comdat"],"kind":"struct"},"1:22601:14371":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:7743:12812":{"crate_id":17,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:47720:11042":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:2967:23022":{"crate_id":17,"path":["gimli","common","SectionId"],"kind":"enum"},"18:11600:12162":{"crate_id":18,"path":["object","elf","Vernaux"],"kind":"struct"},"18:12236:12295":{"crate_id":18,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:20852:16805":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:44287:205":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"1:21348:16807":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"6:10386:11622":{"crate_id":6,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"6:7815:15467":{"crate_id":6,"path":["std","fs","ReadDir"],"kind":"struct"},"1:7169:16691":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:44098:15129":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"23:317:5319":{"crate_id":23,"path":["generic_array","sequence","Split"],"kind":"trait"},"5:1115:34257":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"7:500:13250":{"crate_id":7,"path":["libc","unix","rlimit"],"kind":"struct"},"15:160:15378":{"crate_id":15,"path":["rustc_demangle","Demangle"],"kind":"struct"},"4:531:1988":{"crate_id":4,"path":["digest","InvalidBufferSize"],"kind":"struct"},"18:9534:15245":{"crate_id":18,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:1844:15415":{"crate_id":6,"path":["std","env","Args"],"kind":"struct"},"1:46384:14655":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"18:12461:12332":{"crate_id":18,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"6:530:11583":{"crate_id":6,"path":["std","thread","Packet"],"kind":"struct"},"1:41679:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"18:8718:11933":{"crate_id":18,"path":["object","endian","U32Bytes"],"kind":"struct"},"22:0:1978":{"crate_id":22,"path":["crypto_common"],"kind":"module"},"1:21729:14995":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"5:2956:14962":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"24:5702:5272":{"crate_id":24,"path":["typenum","bit","B0"],"kind":"struct"},"6:8255:15481":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:4597:14087":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"7:1637:13403":{"crate_id":7,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"7:7608:14233":{"crate_id":7,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"18:12959:12514":{"crate_id":18,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"18:10967:12049":{"crate_id":18,"path":["object","read","Import"],"kind":"struct"},"17:2378:12782":{"crate_id":17,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:21343:16797":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"5:4001:11653":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"7:6725:14108":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"7:526:13270":{"crate_id":7,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"12:968:14881":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:44122:15135":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:43935:15114":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"7:568:13293":{"crate_id":7,"path":["libc","unix","sigval"],"kind":"struct"},"7:7271:14195":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:3948:17371":{"crate_id":6,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:10681:14939":{"crate_id":6,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"6:6780:17475":{"crate_id":6,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:5708:14769":{"crate_id":17,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:46050:14648":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:9628:11708":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:2851:16591":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:4046:16623":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:2720:12796":{"crate_id":17,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:5586:11596":{"crate_id":6,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"19:636:11834":{"crate_id":19,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:45606:14633":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"7:1701:13439":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"7:4853:13706":{"crate_id":7,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:11253:5298":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"5:1773:11670":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"19:590:11822":{"crate_id":19,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"18:12576:12352":{"crate_id":18,"path":["object","macho","NoteCommand"],"kind":"struct"},"7:4753:13659":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:3638:17367":{"crate_id":6,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"24:611:5285":{"crate_id":24,"path":["typenum","marker_traits","NonZero"],"kind":"trait"},"5:1439:11152":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:4531:17416":{"crate_id":6,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:8360:15542":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"18:13453:12633":{"crate_id":18,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"7:547:13282":{"crate_id":7,"path":["libc","unix","pollfd"],"kind":"struct"},"1:43279:5329":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"5:5259:5438":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:45575:14632":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"18:11770:12205":{"crate_id":18,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:5741:23879":{"crate_id":17,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"7:4722:13645":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:42925:5344":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"24:1198:5369":{"crate_id":24,"path":["typenum","type_operators","PartialDiv"],"kind":"trait"},"1:43158:5312":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:3898:17369":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:21963:14370":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:1568:11653":{"crate_id":6,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"24:1206:5366":{"crate_id":24,"path":["typenum","type_operators","Max"],"kind":"trait"},"6:11920:1050":{"crate_id":6,"path":["std","pointer"],"kind":"primitive"},"6:2366:17324":{"crate_id":6,"path":["std","fs","canonicalize"],"kind":"function"},"5:6252:11653":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:4326:11691":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:1667:1088":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"6:7619:15461":{"crate_id":6,"path":["std","thread","Builder"],"kind":"struct"},"6:3962:17373":{"crate_id":6,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"15:40:12094":{"crate_id":15,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:11741:16743":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:30283:11100":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"5:7224:14979":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"10:352:22893":{"crate_id":10,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:7077:23886":{"crate_id":17,"path":["gimli","read","op","DieReference"],"kind":"enum"},"18:13659:12704":{"crate_id":18,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"12:2174:13153":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:5032:12860":{"crate_id":17,"path":["gimli","constants","DwLnct"],"kind":"struct"},"18:12634:12361":{"crate_id":18,"path":["object","macho","RelocationInfo"],"kind":"struct"},"19:699:14717":{"crate_id":19,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"18:9853:15260":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"7:5848:13893":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"5:7102:11152":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:4390:11222":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"12:332:11574":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"18:11556:12145":{"crate_id":18,"path":["object","elf","Verdef"],"kind":"struct"},"1:39269:201":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:40364:15042":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:2985:16594":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:46074:14649":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:5402:11931":{"crate_id":17,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:3406:14281":{"crate_id":6,"path":["std","io","Read"],"kind":"trait"},"17:3047:23023":{"crate_id":17,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:6293:12877":{"crate_id":17,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"12:119:11572":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:10079:15498":{"crate_id":6,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"7:7598:14231":{"crate_id":7,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"7:4847:13703":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:41546:210":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"19:707:14719":{"crate_id":19,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:40481:15054":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:1544:11593":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"6:4760:11594":{"crate_id":6,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"6:5270:120":{"crate_id":6,"path":["std","path","Display"],"kind":"struct"},"4:339:5281":{"crate_id":4,"path":["digest","core_api","XofReaderCore"],"kind":"trait"},"6:4877:17424":{"crate_id":6,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:7859:23890":{"crate_id":17,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:7599:16690":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:39172:15010":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:7215:5715":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"18:10989:12017":{"crate_id":18,"path":["object","read","Export"],"kind":"struct"},"18:13744:12727":{"crate_id":18,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:20815:16804":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"7:6043:13990":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"18:13332:12597":{"crate_id":18,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:8255:15541":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"18:11615:12168":{"crate_id":18,"path":["object","elf","NoteHeader32"],"kind":"struct"},"18:10598:12049":{"crate_id":18,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:46430:14656":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"5:4233:5315":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:42429:110":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"6:11929:746":{"crate_id":6,"path":["std","i8"],"kind":"primitive"},"24:1151:17098":{"crate_id":24,"path":["typenum","private","PrivateSquareRoot"],"kind":"trait"},"7:5792:13867":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"18:11410:12120":{"crate_id":18,"path":["object","elf","Syminfo32"],"kind":"struct"},"18:12072:12256":{"crate_id":18,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:3472:37133":{"crate_id":6,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"18:13356:12604":{"crate_id":18,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"18:10478:15295":{"crate_id":18,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:46226:14653":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"18:562:12054":{"crate_id":18,"path":["object","read","any","Symbol"],"kind":"struct"},"16:198:22976":{"crate_id":16,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"18:12282:12305":{"crate_id":18,"path":["object","macho","DylibReference"],"kind":"struct"},"17:6390:14829":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"15:215:14901":{"crate_id":15,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"5:204:11636":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"24:1878:17085":{"crate_id":24,"path":["typenum","uint","GetBit"],"kind":"trait"},"1:10207:5324":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:4702:17384":{"crate_id":6,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"19:681:14713":{"crate_id":19,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:39963:15012":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:45361:14623":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:2348:14345":{"crate_id":6,"path":["std","fs","metadata"],"kind":"function"},"12:1858:14915":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"1:2839:16588":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:2348:182":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"17:3782:12835":{"crate_id":17,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"18:10491:15296":{"crate_id":18,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"18:2933:15228":{"crate_id":18,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:11504:15091":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:1572:11670":{"crate_id":6,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:44118:15134":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"7:7539:14218":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:3083:15424":{"crate_id":6,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"1:40716:11699":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"18:11484:12131":{"crate_id":18,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"4:358:1662":{"crate_id":4,"path":["digest","digest","Digest"],"kind":"trait"},"18:12331:12312":{"crate_id":18,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:41529:16711":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:4757:12851":{"crate_id":17,"path":["gimli","constants","DwId"],"kind":"struct"},"12:1663:144":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"21:79:17065":{"crate_id":21,"path":["blobby","Blob3Iterator"],"kind":"struct"},"7:6170:14036":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:40304:15033":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"4:492:1673":{"crate_id":4,"path":["digest","core_api","wrapper","CoreWrapper"],"kind":"struct"},"1:9163:11214":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:45636:14634":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"18:11902:12230":{"crate_id":18,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:2932:5713":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:11174:11627":{"crate_id":6,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"12:97:14903":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"18:9796:11966":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"18:12894:12473":{"crate_id":18,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"7:1602:13374":{"crate_id":7,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"7:1630:13399":{"crate_id":7,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"18:11785:12209":{"crate_id":18,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"24:654:5363":{"crate_id":24,"path":["typenum","marker_traits","PowerOfTwo"],"kind":"trait"},"1:39969:15013":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:3934:17370":{"crate_id":6,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"18:9312:15236":{"crate_id":18,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:40384:15044":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:43898:15113":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"7:4962:13770":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"12:2033:14881":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"12:1121:15397":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:46004:14646":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:7636:33183":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"5:3719:14917":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:11932:745":{"crate_id":6,"path":["std","i64"],"kind":"primitive"},"18:13041:12526":{"crate_id":18,"path":["object","pe","Guid"],"kind":"struct"},"7:4703:13637":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:11942:112":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:7498:14886":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:9072:14316":{"crate_id":6,"path":["std","time","Instant"],"kind":"struct"},"6:10451:15430":{"crate_id":6,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:9366:141":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"5:673:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:4135:17395":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:8214:12983":{"crate_id":17,"path":["gimli","read","value","Value"],"kind":"enum"},"1:30477:28047":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:20779:29642":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"15:187:22969":{"crate_id":15,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:4587:17373":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"18:11446:12127":{"crate_id":18,"path":["object","elf","Rela32"],"kind":"struct"},"18:9839:15259":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:1982:185":{"crate_id":6,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:10676:14937":{"crate_id":6,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"17:5797:14776":{"crate_id":17,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"6:8821:15485":{"crate_id":6,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"18:9453:23961":{"crate_id":18,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:2694:12795":{"crate_id":17,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"18:13667:12705":{"crate_id":18,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"6:11918:1517":{"crate_id":6,"path":["std","unit"],"kind":"primitive"},"6:10255:37364":{"crate_id":6,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"12:1538:15400":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:5709:15449":{"crate_id":6,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:1985:184":{"crate_id":6,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"22:39:17122":{"crate_id":22,"path":["crypto_common","IvSizeUser"],"kind":"trait"},"1:2926:5712":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"7:7249:14194":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:11254:15460":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"13:0:1970":{"crate_id":13,"path":["rustc_std_workspace_alloc"],"kind":"module"},"7:4948:13764":{"crate_id":7,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"7:4427:13546":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:47416:14667":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"18:13033:12525":{"crate_id":18,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"7:4505:13584":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:5305:12863":{"crate_id":17,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:6725:29166":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"}},"external_crates":{"26":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"23":{"name":"generic_array","html_root_url":null},"20":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"block_buffer","html_root_url":null},"22":{"name":"crypto_common","html_root_url":null},"19":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"digest","html_root_url":null},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"27":{"name":"cpufeatures","html_root_url":null},"24":{"name":"typenum","html_root_url":"https://docs.rs/typenum/1.16.0/"},"21":{"name":"blobby","html_root_url":"https://docs.rs/blobby/0.3.1/"},"18":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"6":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}