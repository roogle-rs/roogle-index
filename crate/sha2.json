{"root":"0:0:2071","crate_version":"0.11.0-pre.4","includes_private":false,"index":{"1:13866:34566":{"id":"1:13866:34566","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:12642:492","self::pattern":"1:13452:17793"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:16662","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13459:16662","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13476:17799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74":{"id":"0:74","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[91,0],"end":[99,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3587:2608","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:75:696"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13872:17100":{"id":"1:13872:17100","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:40629:17636","Self::is_ascii":"1:13871:17099"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:40629:17636","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3110-0:148:2400":{"id":"b:1:3110-0:148:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3113:150","1:3114:1856"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:82:2583":{"id":"0:82:2583","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[147,4],"end":[147,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"23:9598:6028","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6028","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6028","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6028","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6028","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6028","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6028","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6028","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"23:9642:6029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:9019:6033","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6032","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6032","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6032","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6032","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6032","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6032","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6032","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"0:98":{"id":"0:98","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[209,0],"end":[217,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3587:2608","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:99:696"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13767:34531":{"id":"1:13767:34531","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"1:13765:34530"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13843:34555":{"id":"1:13843:34555","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67:1212":{"id":"0:67:1212","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[55,4],"end":[63,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["output_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:43001:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"InvalidOutputSize","id":"4:650:2575","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:152:496":{"id":"0:152:496","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3095-0:148:2400":{"id":"b:1:3095-0:148:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3098:11907"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:6-4:390:2383":{"id":"0:6-4:390:2383","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[10,23],"end":[10,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"digest::Digest","name":"Digest","id":"4:390:2383","glob":false}}},"0:103:2613":{"id":"0:103:2613","crate_id":0,"name":"deserialize","span":{"filename":"src/core_api.rs","begin":[236,4],"end":[249,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["serialized_state",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"SerializedState","id":"21:24:2568","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:43001:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"DeserializeStateError","id":"21:147:2566","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13850:34559":{"id":"1:13850:34559","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3099-0:153:2401":{"id":"b:1:3099-0:153:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3101:860"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13796:30063":{"id":"1:13796:30063","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:45025:16199","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:77:2609":{"id":"0:77:2609","crate_id":0,"name":"SerializedStateSize","span":{"filename":"src/core_api.rs","begin":[105,4],"end":[105,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"23:9598:6028","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6028","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6028","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6028","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6028","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6028","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"23:9642:6029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:9019:6033","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6032","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:9019:6033","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6032","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6032","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6032","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"5:5711":{"id":"5:5711","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5712:35308","5:5713:11798","5:5715:35309","5:5717:35310","5:5725:35311","5:5726:35312","5:5727:17674","5:5728:17101","5:5729:17102"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13761":{"id":"1:13761","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:13762:1027","1:13763:11914","1:13764:34529","1:13765:34530","1:13767:34531","1:13770:34532","1:13771:34533","1:13772:352","1:13773:6591","1:13774:6594","1:13776:16920","1:13778:16921","1:13780:16922","1:13782:34534","1:13783:34535","1:13784:34536","1:13785:34537","1:13786:34538","1:13787:34539","1:13789:16200","1:13790:16209","1:13791:12611","1:13792:30061","1:13793:30062","1:13794:34541","1:13795:34542","1:13796:30063","1:13797:32644","1:13799:34543","1:13801:34544","1:13804:11953","1:13807:11913","1:13811:2615","1:13813:30051","1:13815:34545","1:13818:34546","1:13820:34547","1:13823:34548","1:13825:34549","1:13828:34550","1:13830:34551","1:13833:2690","1:13835:34552","1:13838:34553","1:13840:34554","1:13843:34555","1:13845:34556","1:13847:34557","1:13849:34558","1:13850:34559","1:13851:34560","1:13854:34561","1:13856:34562","1:13858:34563","1:13861:34564","1:13864:34565","1:13866:34566","1:13869:34567","1:13871:17099","1:13872:17100","1:13873:17104","1:13874:17105","1:13875:17106","1:13876:34568","1:13877:34569","1:13878:34570","1:13879:34571","1:13881:17685","1:13882:34572","1:13883:34573"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:153:2401":{"id":"0:153:2401","crate_id":0,"name":"Sha512VarCore","span":{"filename":"src/core_api.rs","begin":[139,0],"end":[142,1]},"visibility":"public","docs":"Core block-level SHA-512 hasher with variable output size.\n\nSupports initialization only for 28, 32, 48, and 64 byte output sizes,\ni.e. 224, 256, 384, and 512 bits respectively.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:32944:249-0:153:2401","a:1:3322:261-0:153:2401","a:1:3357:11856-0:153:2401","a:1:33002:6443-0:153:2401","a:1:42829:17762-0:153:2401","a:1:42830:17761-0:153:2401","b:1:2790-0:153:2401","b:1:2793-0:153:2401","b:1:2822-0:153:2401","b:1:3095-0:153:2401","b:1:3099-0:153:2401","b:1:3105-0:153:2401","b:1:3110-0:153:2401","b:1:3967-0:153:2401","b:5:782-0:153:2401","b:23:1171-0:153:2401","0:156","0:80","0:81","0:83","0:85","0:87","0:89","0:94","0:96","0:98","0:100"]}}},"b:1:3967-0:148:2400":{"id":"b:1:3967-0:148:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3965:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3969:1871"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[77,0],"end":[82,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"21:114:2555","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:71:2606"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:71:2606":{"id":"0:71:2606","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[79,4],"end":[81,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10622:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10603:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13801:34544":{"id":"1:13801:34544","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"6:12642:492","self::pattern":"1:13452:17793"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:16662","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13459:16662","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13476:17799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:95:2606":{"id":"0:95:2606","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[197,4],"end":[199,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10622:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10603:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[47,0],"end":[49,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"21:101:2560","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:64:2588"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:94":{"id":"0:94","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[195,0],"end":[200,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"21:114:2555","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:95:2606"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13763:11914":{"id":"1:13763:11914","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:66:2589":{"id":"0:66:2589","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[52,4],"end":[52,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"TruncSide","id":"4:640:2561","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}}},"5:5729:17102":{"id":"5:5729:17102","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13875:17106"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13783:34535":{"id":"1:13783:34535","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"6:12648:1771","crate::ops::IndexMut":"1:3628:6111","str::slice_unchecked":"1:13782:34534"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"23:1173:211":{"id":"23:1173:211","crate_id":23,"name":"Output","span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/src/type_operators.rs","begin":[35,4],"end":[35,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:13874:17105":{"id":"1:13874:17105","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:120:2421":{"id":"0:120:2421","crate_id":0,"name":"Sha512_256","span":{"filename":"src/lib.rs","begin":[45,0],"end":[45,92]},"visibility":"public","docs":"SHA-512/256 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:620:2393","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:601:2394","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U32","id":"23:2525:2389","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512_256","id":"0:482:2412","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:13869:34567":{"id":"1:13869:34567","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:13411:149","`FromStr`":"1:13410:2756"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:43001:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:13410:2756","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:13410:2756","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:784:16056":{"id":"5:784:16056","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:56":{"id":"0:56","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[28,0],"end":[28,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:389:2574","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3322:261-0:153:2401":{"id":"a:1:3322:261-0:153:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2793-0:153:2401":{"id":"b:1:2793-0:153:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2787:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2795:29865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:96":{"id":"0:96","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[202,0],"end":[207,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10655:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:97:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:99:696":{"id":"0:99:696","crate_id":0,"name":"drop","span":{"filename":"src/core_api.rs","begin":[210,4],"end":[216,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13790:16209":{"id":"1:13790:16209","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"6:12642:492"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:44709:16181","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5725:35311":{"id":"5:5725:35311","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:117:2415":{"id":"0:117:2415","crate_id":0,"name":"Sha224","span":{"filename":"src/lib.rs","begin":[39,0],"end":[39,84]},"visibility":"public","docs":"SHA-224 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:620:2393","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:601:2394","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U28","id":"23:2513:2388","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha224","id":"0:448:2408","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:84:2584":{"id":"0:84:2584","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[151,4],"end":[151,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Eager","id":"24:160:2554","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"1:13764:34529":{"id":"1:13764:34529","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2822-0:153:2401":{"id":"b:1:2822-0:153:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2810:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2820:11851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2824:29866"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42829:17762-0:153:2401":{"id":"a:1:42829:17762-0:153:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42829:17762","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32944:249-0:148:2400":{"id":"a:1:32944:249-0:148:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32944:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13835:34552":{"id":"1:13835:34552","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within this\nstring slice, yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:13452:17793","`DoubleEndedIterator`":"1:8393:134","prim@char":"6:12642:492","str::matches":"1:13833:2690"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44955:16194","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:16662","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13459:16662","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13476:17799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3969:1871":{"id":"1:3969:1871","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:40445:15436","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13881:17685":{"id":"1:13881:17685","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Returns an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:5069:17685"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:45041:16115","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13765:34530":{"id":"1:13765:34530","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13877:34569":{"id":"1:13877:34569","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1148:17116"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:61":{"id":"0:61","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[38,0],"end":[45,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:361:2562","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:62:2585"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2793-0:148:2400":{"id":"b:1:2793-0:148:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2787:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2795:29865"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42829:17762-0:148:2400":{"id":"a:1:42829:17762-0:148:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42829:17762","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:3114:1856":{"id":"1:3114:1856","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:43001:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:85":{"id":"0:85","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[154,0],"end":[161,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:361:2562","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:86:2585"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3105-0:153:2401":{"id":"b:1:3105-0:153:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3075:272","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3108:150","1:3109:1858"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:105:2398":{"id":"0:105:2398","crate_id":0,"name":"compress256","span":{"filename":"src/sha256.rs","begin":[27,0],"end":[29,1]},"visibility":"public","docs":"Raw SHA-256 compression function.\n\nThis is a low-level \"hazmat\" API which provides direct access to the core\nfunctionality of SHA-256.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"array":{"type":{"primitive":"u32"},"len":"8"}}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"array":{"type":{"primitive":"u8"},"len":"64"}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13795:34542":{"id":"1:13795:34542","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"Returns an iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44997:16196","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68:2594":{"id":"0:68:2594","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[66,4],"end":[74,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Buffer","id":"4:359:2558","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Output","id":"21:60:211","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13825:34549":{"id":"1:13825:34549","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"Returns an iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning at\nmost `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"6:12642:492","str::splitn":"1:13823:34548","self::pattern":"1:13452:17793"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:44855:6085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:16662","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13459:16662","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13476:17799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3110-0:153:2401":{"id":"b:1:3110-0:153:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3113:150","1:3114:1856"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13878:34570":{"id":"1:13878:34570","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1148:17116"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13804:11953":{"id":"1:13804:11953","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:42735:203","prim@char":"6:12642:492","self::pattern":"1:13452:17793"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:16662","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13856:34562":{"id":"1:13856:34562","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:12642:492","self::pattern":"1:13452:17793"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:16662","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3967-0:153:2401":{"id":"b:1:3967-0:153:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3965:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3969:1871"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:3098:11907":{"id":"1:3098:11907","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:3072:157"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13780:16922":{"id":"1:13780:16922","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5726:35312":{"id":"5:5726:35312","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:299:2740","`String`":"5:7774:257"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:299:2740","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:151":{"id":"0:151","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2810:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:152:496"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:116-0:153:2401":{"id":"0:116-0:153:2401","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[29,34],"end":[29,47]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"core_api::Sha512VarCore","name":"Sha512VarCore","id":"0:153:2401","glob":false}}},"1:13830:34551":{"id":"1:13830:34551","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:16662","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13459:16662","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13476:17799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:57":{"id":"0:57","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[30,0],"end":[32,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"21:74:2557","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:58:2583"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:81":{"id":"0:81","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[146,0],"end":[148,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"21:74:2557","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:82:2583"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:113-0:109:2399":{"id":"0:113-0:109:2399","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[27,0],"end":[27,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"sha512::compress512","name":"compress512","id":"0:109:2399","glob":false}}},"1:13882:34572":{"id":"1:13882:34572","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Returns an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:5066:34572"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:45050:16120","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5713:11798":{"id":"5:5713:11798","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:16662","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:156":{"id":"0:156","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[138,9],"end":[138,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2810:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:157:496"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:73:830":{"id":"0:73:830","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[86,4],"end":[88,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10622:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10603:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3357:11856-0:153:2401":{"id":"a:1:3357:11856-0:153:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3357:11856","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13770:34532":{"id":"1:13770:34532","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12975:17800"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:86:2585":{"id":"0:86:2585","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[156,4],"end":[160,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"Block","id":"21:56:2556","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:97:830":{"id":"0:97:830","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[204,4],"end":[206,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10622:156","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10603:238","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13845:34556":{"id":"1:13845:34556","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13849:34558":{"id":"1:13849:34558","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13785:34537":{"id":"1:13785:34537","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divides one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"1:13784:34536","str::split_at_mut_checked":"1:13787:34539"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13794:34541":{"id":"1:13794:34541","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"Returns an iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44987:16195","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13776:16920":{"id":"1:13776:16920","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:42735:203"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13854:34561":{"id":"1:13854:34561","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:12642:492","self::pattern":"1:13452:17793"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:16662","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:90:2589":{"id":"0:90:2589","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[168,4],"end":[168,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"TruncSide","id":"4:640:2561","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}}},"0:148:2400":{"id":"0:148:2400","crate_id":0,"name":"Sha256VarCore","span":{"filename":"src/core_api.rs","begin":[23,0],"end":[26,1]},"visibility":"public","docs":"Core block-level SHA-256 hasher with variable output size.\n\nSupports initialization only for 28 and 32 byte output sizes,\ni.e. 224 and 256 bits respectively.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:32944:249-0:148:2400","a:1:3322:261-0:148:2400","a:1:3357:11856-0:148:2400","a:1:33002:6443-0:148:2400","a:1:42829:17762-0:148:2400","a:1:42830:17761-0:148:2400","b:1:2790-0:148:2400","b:1:2793-0:148:2400","b:1:2822-0:148:2400","b:1:3095-0:148:2400","b:1:3099-0:148:2400","b:1:3105-0:148:2400","b:1:3110-0:148:2400","b:1:3967-0:148:2400","b:5:782-0:148:2400","b:23:1171-0:148:2400","0:151","0:56","0:57","0:59","0:61","0:63","0:65","0:70","0:72","0:74","0:76"]}}},"0:102:2610":{"id":"0:102:2610","crate_id":0,"name":"serialize","span":{"filename":"src/core_api.rs","begin":[224,4],"end":[234,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SerializedState","id":"21:24:2568","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13791:12611":{"id":"1:13791:12611","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"Returns an iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:44719:12774","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13807:11913":{"id":"1:13807:11913","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:42735:203","prim@char":"6:12642:492","self::pattern":"1:13452:17793"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:16662","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13459:16662","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13476:17799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:33002:6443-0:153:2401":{"id":"a:1:33002:6443-0:153:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:33002:6443","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13858:34563":{"id":"1:13858:34563","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:12642:492","self::pattern":"1:13452:17793"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:16662","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13459:16662","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13476:17799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13876:34568":{"id":"1:13876:34568","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1148:17116"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13778:16921":{"id":"1:13778:16921","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:782-0:153:2401":{"id":"b:5:782-0:153:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2810:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:778:264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:784:16056","5:785:29871","5:786:29872"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:0:2071":{"id":"0:0:2071","crate_id":0,"name":"sha2","span":{"filename":"src/lib.rs","begin":[1,0],"end":[49,84]},"visibility":"public","docs":"# RustCrypto: SHA-2\n\n[![crate][crate-image]][crate-link]\n[![Docs][docs-image]][docs-link]\n![Apache2/MIT licensed][license-image]\n![Rust Version][rustc-image]\n[![Project Chat][chat-image]][chat-link]\n[![Build Status][build-image]][build-link]\n\nPure Rust implementation of the [SHA-2] cryptographic hash algorithms.\n\nThere are 6 standard algorithms specified in the SHA-2 standard: \n`Sha224`, `Sha256`, `Sha512_224`, `Sha512_256`, `Sha384`, and `Sha512`.\n\nAlgorithmically, there are only 2 core algorithms: SHA-256 and SHA-512.\nAll other algorithms are just applications of these with different initial\nhash values, and truncated to different digest bit lengths. The first two\nalgorithms in the list are based on SHA-256, while the last four are based\non SHA-512.\n\n## Examples\n\n### One-shot API\n\n```rust\nuse sha2::{Sha256, Digest};\nuse hex_literal::hex;\n\nlet hash = Sha256::digest(b\"hello world\");\nassert_eq!(hash, hex!(\"b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\"));\n\n// Hex-encode hash using https://docs.rs/base16ct\nlet hex_hash = base16ct::lower::encode_string(&hash);\nassert_eq!(hex_hash, \"b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\");\n```\n\n### Incremental API\n\n```rust\nuse sha2::{Sha256, Sha512, Digest};\nuse hex_literal::hex;\n\nlet mut hasher = Sha256::new();\nhasher.update(b\"hello \");\nhasher.update(b\"world\");\nlet hash256 = hasher.finalize();\n\nassert_eq!(hash256, hex!(\"b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\"));\n\nlet mut hasher = Sha512::new();\nhasher.update(b\"hello world\");\nlet hash512 = hasher.finalize();\n\nassert_eq!(hash512, hex!(\n    \"309ecc489c12d6eb4cc40f50c902f2b4d0ed77ee511a7c7a9bcd3ca86d4cd86f\"\n    \"989dd35bc5ff499670da34255b45b0cfd830e81f605dcf7dc5542e93ae9cd76f\"\n));\n```\n\nAlso, see the [examples section] in the RustCrypto/hashes readme.\n\n## Minimum Supported Rust Version\n\nRust **1.72** or higher.\n\nMinimum supported Rust version can be changed in the future, but it will be\ndone with a minor version bump.\n\n## SemVer Policy\n\n- All on-by-default features of this library are covered by SemVer\n- MSRV is considered exempt from SemVer as noted above\n\n## License\n\nThe crate is licensed under either of:\n\n* [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0)\n* [MIT license](http://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall be\ndual licensed as above, without any additional terms or conditions.\n\n[//]: # (badges)\n\n[crate-image]: https://img.shields.io/crates/v/sha2.svg\n[crate-link]: https://crates.io/crates/sha2\n[docs-image]: https://docs.rs/sha2/badge.svg\n[docs-link]: https://docs.rs/sha2/\n[license-image]: https://img.shields.io/badge/license-Apache2.0/MIT-blue.svg\n[rustc-image]: https://img.shields.io/badge/rustc-1.72+-blue.svg\n[chat-image]: https://img.shields.io/badge/zulip-join_chat-blue.svg\n[chat-link]: https://rustcrypto.zulipchat.com/#narrow/stream/260041-hashes\n[build-image]: https://github.com/RustCrypto/hashes/workflows/sha2/badge.svg?branch=master\n[build-link]: https://github.com/RustCrypto/hashes/actions?query=workflow%3Asha2\n\n[//]: # (general links)\n\n[SHA-2]: https://en.wikipedia.org/wiki/SHA-2\n[examples section]: https://github.com/RustCrypto/hashes#Examples","links":{},"attrs":["#![no_std]","#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\",\nhtml_favicon_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\")]","#![warn(missing_docs, rust_2018_idioms)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:5-4:0:2382","0:6-4:390:2383","0:112-0:105:2398","0:113-0:109:2399","0:115-0:148:2400","0:116-0:153:2401","0:117:2415","0:118:2417","0:119:2419","0:120:2421","0:121:2423","0:122:2425"],"is_stripped":false}}},"1:13784:34536":{"id":"1:13784:34536","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divides one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_checked":"1:13786:34538","str::split_at_mut":"1:13785:34537"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13797:32644":{"id":"1:13797:32644","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"6:12642:492","self::pattern":"1:13452:17793"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:16662","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13820:34547":{"id":"1:13820:34547","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"Returns an iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:13452:17793","str::split":"1:13811:2615","prim@char":"6:12642:492","str::split_terminator":"1:13818:34546"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:44801:16187","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:16662","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13459:16662","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13476:17799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13838:34553":{"id":"1:13838:34553","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:13452:17793","`DoubleEndedIterator`":"1:8393:134","prim@char":"6:12642:492","str::rmatch_indices":"1:13840:34554"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44883:16190","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:16662","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2790-0:153:2401":{"id":"b:1:2790-0:153:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2784:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2792:2643"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:72":{"id":"0:72","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[84,0],"end":[89,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10655:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:73:830"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:75:696":{"id":"0:75:696","crate_id":0,"name":"drop","span":{"filename":"src/core_api.rs","begin":[92,4],"end":[98,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5717:35310":{"id":"5:5717:35310","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13787:34539":{"id":"1:13787:34539","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divides one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:13786:34538"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:121:2423":{"id":"0:121:2423","crate_id":0,"name":"Sha384","span":{"filename":"src/lib.rs","begin":[47,0],"end":[47,84]},"visibility":"public","docs":"SHA-384 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:620:2393","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:601:2394","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U48","id":"23:2573:2390","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha384","id":"0:414:2404","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:157:496":{"id":"0:157:496","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[138,9],"end":[138,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13774:6594":{"id":"1:13774:6594","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:42735:203"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11576:252","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:23:1171-0:153:2401":{"id":"b:23:1171-0:153:2401","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"23:1168:6204","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["23:1173:211"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5728:17101":{"id":"5:5728:17101","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13874:17105"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:92:2594":{"id":"0:92:2594","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[184,4],"end":[192,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Buffer","id":"4:359:2558","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Output","id":"21:60:211","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[51,0],"end":[75,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:372:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:66:2589","0:67:1212","0:68:2594"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2790-0:148:2400":{"id":"b:1:2790-0:148:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32945:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2784:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2792:2643"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13773:6591":{"id":"1:13773:6591","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"6:12661:1902"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13871:17099":{"id":"1:13871:17099","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:89":{"id":"0:89","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[167,0],"end":[193,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:372:2563","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:90:2589","0:91:1212","0:92:2594"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13879:34571":{"id":"1:13879:34571","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Returns an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"1:5068:34571"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:45032:16121","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13782:34534":{"id":"1:13782:34534","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"6:12648:1771","str::slice_mut_unchecked":"1:13783:34535","crate::ops::Index":"1:40276:6110"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13847:34557":{"id":"1:13847:34557","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2792:2643":{"id":"1:2792:2643","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3099-0:148:2400":{"id":"b:1:3099-0:148:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3101:860"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:3108:150":{"id":"1:3108:150","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:79:2613":{"id":"0:79:2613","crate_id":0,"name":"deserialize","span":{"filename":"src/core_api.rs","begin":[118,4],"end":[131,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["serialized_state",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"resolved_path":{"name":"SerializedState","id":"21:24:2568","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:43001:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"DeserializeStateError","id":"21:147:2566","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13762:1027":{"id":"1:13762:1027","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"6:12642:492"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:122:2425":{"id":"0:122:2425","crate_id":0,"name":"Sha512","span":{"filename":"src/lib.rs","begin":[49,0],"end":[49,84]},"visibility":"public","docs":"SHA-512 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:620:2393","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:601:2394","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U64","id":"23:2621:2391","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512","id":"0:431:2406","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:13772:352":{"id":"1:13772:352","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:13773:6591","`u8`":"6:12661:1902"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:91:1212":{"id":"0:91:1212","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[171,4],"end":[181,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["output_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:43001:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"InvalidOutputSize","id":"4:650:2575","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:112-0:105:2398":{"id":"0:112-0:105:2398","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[26,0],"end":[26,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"sha256::compress256","name":"compress256","id":"0:105:2398","glob":false}}},"a:1:42830:17761-0:153:2401":{"id":"a:1:42830:17761-0:153:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42830:17761","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:109:2399":{"id":"0:109:2399","crate_id":0,"name":"compress512","span":{"filename":"src/sha512.rs","begin":[27,0],"end":[29,1]},"visibility":"public","docs":"Raw SHA-512 compression function.\n\nThis is a low-level \"hazmat\" API which provides direct access to the core\nfunctionality of SHA-512.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"array":{"type":{"primitive":"u64"},"len":"8"}}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"array":{"type":{"primitive":"u8"},"len":"128"}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13851:34560":{"id":"1:13851:34560","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"6:12642:492","self::pattern":"1:13452:17793"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:16662","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13459:16662","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:13481:17798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3113:150":{"id":"1:3113:150","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32868:6047","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:88:2588":{"id":"0:88:2588","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[164,4],"end":[164,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"23:9598:6028","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6028","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6028","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6028","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6028","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6028","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6028","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"23:9642:6029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:9019:6033","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6032","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6032","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6032","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6032","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6032","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6032","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"0:58:2583":{"id":"0:58:2583","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[31,4],"end":[31,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"23:9598:6028","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6028","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6028","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6028","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6028","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6028","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6028","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"23:9642:6029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:9019:6033","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6032","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6032","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6032","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6032","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6032","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6032","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"0:101:2609":{"id":"0:101:2609","crate_id":0,"name":"SerializedStateSize","span":{"filename":"src/core_api.rs","begin":[222,4],"end":[222,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"23:9598:6028","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6028","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6028","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6028","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6028","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6028","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6028","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"23:9642:6029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:9019:6033","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6032","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:9019:6033","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6032","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6032","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6032","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6032","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"1:13792:30061":{"id":"1:13792:30061","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:13793:30062"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:45007:16197","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:100":{"id":"0:100","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[221,0],"end":[250,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"SerializableState","id":"21:35:2567","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:101:2609","0:102:2610","0:103:2613"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:80":{"id":"0:80","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[144,0],"end":[144,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:389:2574","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:87":{"id":"0:87","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[163,0],"end":[165,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"21:101:2560","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:88:2588"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13823:34548":{"id":"1:13823:34548","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"Returns an iterator over substrings of the given string slice, separated\nby a pattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"6:12642:492","self::pattern":"1:13452:17793","str::rsplitn":"1:13825:34549"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:44837:6089","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:16662","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13799:34543":{"id":"1:13799:34543","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"6:12642:492","self::pattern":"1:13452:17793"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:16662","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:33002:6443-0:148:2400":{"id":"a:1:33002:6443-0:148:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:33002:6443","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:2795:29865":{"id":"1:2795:29865","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2822-0:148:2400":{"id":"b:1:2822-0:148:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2810:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2820:11851","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2824:29866"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:119:2419":{"id":"0:119:2419","crate_id":0,"name":"Sha512_224","span":{"filename":"src/lib.rs","begin":[43,0],"end":[43,92]},"visibility":"public","docs":"SHA-512/224 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:620:2393","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:601:2394","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U28","id":"23:2513:2388","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512_224","id":"0:465:2410","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:13828:34550":{"id":"1:13828:34550","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:16662","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13861:34564":{"id":"1:13861:34564","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:12642:492","self::pattern":"1:13452:17793"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:16662","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13459:16662","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13476:17799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32944:249-0:153:2401":{"id":"a:1:32944:249-0:153:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32944:249","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:3357:11856-0:148:2400":{"id":"a:1:3357:11856-0:148:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3357:11856","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13840:34554":{"id":"1:13840:34554","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:13452:17793","`DoubleEndedIterator`":"1:8393:134","prim@char":"6:12642:492","str::match_indices":"1:13838:34553"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44901:16191","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:16662","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13459:16662","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13476:17799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3095-0:153:2401":{"id":"b:1:3095-0:153:2401","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:3072:157","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:3069:175","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3098:11907"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13786:34538":{"id":"1:13786:34538","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divides one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:13787:34539"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:78:2610":{"id":"0:78:2610","crate_id":0,"name":"serialize","span":{"filename":"src/core_api.rs","begin":[107,4],"end":[116,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SerializedState","id":"21:24:2568","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:782-0:148:2400":{"id":"b:5:782-0:148:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2810:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:778:264","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:784:16056","5:785:29871","5:786:29872"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:3109:1858":{"id":"1:3109:1858","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:43001:238","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13789:16200":{"id":"1:13789:16200","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"6:12642:492"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:44703:16180","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5712:35308":{"id":"5:5712:35308","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:299:2740","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:299:2740","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5727:17674":{"id":"5:5727:17674","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:59":{"id":"0:59","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[34,0],"end":[36,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:363:2559","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:60:2584"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:83":{"id":"0:83","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[150,0],"end":[152,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:363:2559","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:153:2401","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:84:2584"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13815:34545":{"id":"1:13815:34545","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"Returns an iterator over substrings of the given string slice, separated\nby characters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:13452:17793","`DoubleEndedIterator`":"1:8393:134","prim@char":"6:12642:492","str::split":"1:13811:2615"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:44751:6083","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:16662","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13459:16662","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13476:17799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:76":{"id":"0:76","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[104,0],"end":[132,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"SerializableState","id":"21:35:2567","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:77:2609","0:78:2610","0:79:2613"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:118:2417":{"id":"0:118:2417","crate_id":0,"name":"Sha256","span":{"filename":"src/lib.rs","begin":[41,0],"end":[41,84]},"visibility":"public","docs":"SHA-256 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:620:2393","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:601:2394","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U32","id":"23:2525:2389","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha256","id":"0:397:2402","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:13864:34565":{"id":"1:13864:34565","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:12642:492","self::pattern":"1:13452:17793"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:16662","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:785:29871":{"id":"5:785:29871","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60:2584":{"id":"0:60:2584","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[35,4],"end":[35,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Eager","id":"24:160:2554","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:64:2588":{"id":"0:64:2588","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[48,4],"end":[48,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"23:9598:6028","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6028","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6028","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6028","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6028","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:6028","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"23:9642:6029","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:9019:6033","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6032","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6032","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6032","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6032","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:6032","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"1:2824:29866":{"id":"1:2824:29866","crate_id":1,"name":"clone_to_uninit","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dst",{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:23:1171-0:148:2400":{"id":"b:23:1171-0:148:2400","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"23:1168:6204","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["23:1173:211"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:5-4:0:2382":{"id":"0:5-4:0:2382","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[10,17],"end":[10,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"digest","name":"digest","id":"4:0:2382","glob":false}}},"0:115-0:148:2400":{"id":"0:115-0:148:2400","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[29,19],"end":[29,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"core_api::Sha256VarCore","name":"Sha256VarCore","id":"0:148:2400","glob":false}}},"1:13813:30051":{"id":"1:13813:30051","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"Returns an iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nDiffers from the iterator produced by `split` in that `split_inclusive`\nleaves the matched part as the terminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"6:12642:492","self::pattern":"1:13452:17793"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:13239:6091","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:16662","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3101:860":{"id":"1:3101:860","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3105-0:148:2400":{"id":"b:1:3105-0:148:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3079:271","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3075:272","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3108:150","1:3109:1858"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13793:30062":{"id":"1:13793:30062","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:13792:30061"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:45016:16198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13833:2690":{"id":"1:13833:2690","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"Returns an iterator over the disjoint matches of a pattern within the\ngiven string slice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:13452:17793","`DoubleEndedIterator`":"1:8393:134","prim@char":"6:12642:492","str::rmatches":"1:13835:34552"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44937:16193","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:16662","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62:2585":{"id":"0:62:2585","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[40,4],"end":[44,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"Block","id":"21:56:2556","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:3322:261-0:148:2400":{"id":"a:1:3322:261-0:148:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3322:261","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13771:34533":{"id":"1:13771:34533","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13873:17104":{"id":"1:13873:17104","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:786:29872":{"id":"5:786:29872","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13875:17106":{"id":"1:13875:17106","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13883:34573":{"id":"1:13883:34573","crate_id":1,"name":"substr_range","span":null,"visibility":"public","docs":"Returns the range that a substring points to.\n\nReturns `None` if `substr` does not point within `self`.\n\nUnlike [`str::find`], **this does not search through the string**.\nInstead, it uses pointer arithmetic to find where in the string\n`substr` is derived from.\n\nThis is useful for extending [`str::split`] and similar methods.\n\nNote that this method may return false positives (typically either\n`Some(0..0)` or `Some(self.len()..self.len())`) if `substr` is a\nzero-length `str` that points at the beginning or end of another,\nindependent, `str`.\n\n# Examples\n```\n#![feature(substr_range)]\n\nlet data = \"a, b, b, a\";\nlet mut iter = data.split(\", \").map(|s| data.substr_range(s).unwrap());\n\nassert_eq!(iter.next(), Some(0..1));\nassert_eq!(iter.next(), Some(3..4));\nassert_eq!(iter.next(), Some(6..7));\nassert_eq!(iter.next(), Some(9..10));\n```","links":{"`str::split`":"1:13811:2615","`str::find`":"1:13804:11953"},"attrs":["#[must_use]","#[unstable(feature = \"substr_range\", issue = \"126769\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["substr",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42733:206","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Range","id":"1:40308:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5715:35309":{"id":"5:5715:35309","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7774:257"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7774:257","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:16662","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42830:17761-0:148:2400":{"id":"a:1:42830:17761-0:148:2400","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42830:17761","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:148:2400","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13811:2615":{"id":"1:13811:2615","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"Returns an iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:13452:17793","`DoubleEndedIterator`":"1:8393:134","prim@char":"6:12642:492","str::split_whitespace":"1:13792:30061","str::rsplit":"1:13815:34545"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:44733:6087","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:16662","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13818:34546":{"id":"1:13818:34546","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"Returns an iterator over substrings of the given string slice, separated\nby characters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:13452:17793","str::split":"1:13811:2615","prim@char":"6:12642:492","`DoubleEndedIterator`":"1:8393:134","str::rsplit_terminator":"1:13820:34547"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:44783:16186","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13459:16662","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"6:1665:16008":{"crate_id":6,"path":["std","collections","hash","set","Union"],"kind":"struct"},"12:2513:14075":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:2908:207":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"18:12272:12876":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:6899:18590":{"crate_id":6,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:3697:18457":{"crate_id":6,"path":["std","io","Seek"],"kind":"trait"},"18:14443:13081":{"crate_id":18,"path":["object","macho","LcStr"],"kind":"struct"},"7:5381:14632":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:41732:16154":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"18:12608:16383":{"crate_id":18,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:8162:13752":{"crate_id":17,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:5717:16554":{"crate_id":6,"path":["std","process","ChildStdout"],"kind":"struct"},"6:1639:12457":{"crate_id":6,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:43071:208":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"23:9104:6034":{"crate_id":23,"path":["typenum","int","Z0"],"kind":"struct"},"1:48035:15730":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:8708:13990":{"crate_id":17,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"24:32:6127":{"crate_id":24,"path":["block_buffer","read","ReadBuffer"],"kind":"struct"},"6:9322:18595":{"crate_id":6,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:8480:13981":{"crate_id":17,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:4363:18524":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"7:1563:14275":{"crate_id":7,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:10879:16537":{"crate_id":6,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"1:44080:12227":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:11358:12516":{"crate_id":1,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"1:44997:16196":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"23:1274:6182":{"crate_id":23,"path":["typenum","type_operators","Logarithm2"],"kind":"trait"},"17:6186:15862":{"crate_id":17,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"21:96:6126":{"crate_id":21,"path":["crypto_common","sealed","BlockSizes"],"kind":"trait"},"1:23595:15352":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"7:5088:14537":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"12:1871:12481":{"crate_id":12,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"18:14454:13082":{"crate_id":18,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"5:4157:12440":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:2948:13740":{"crate_id":17,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"18:12725:16388":{"crate_id":18,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"18:13983:12977":{"crate_id":18,"path":["object","elf","Rela32"],"kind":"struct"},"1:47208:15656":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:8134:13761":{"crate_id":17,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"7:8294:15211":{"crate_id":7,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"5:2579:15319":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:6121:13748":{"crate_id":17,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"8:0:1956":{"crate_id":8,"path":["unwind"],"kind":"module"},"18:12093:12808":{"crate_id":18,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"21:0:2564":{"crate_id":21,"path":["crypto_common"],"kind":"module"},"1:2914:214":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:40445:15436":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:40368:226":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:8325:177":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"6:12236:16051":{"crate_id":6,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:45820:16241":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"6:1643:12481":{"crate_id":6,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:47322:15662":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:3585:13769":{"crate_id":17,"path":["gimli","arch","MIPS"],"kind":"struct"},"1:4897:12504":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:45476:16228":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"7:5349:14619":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"6:9529:246":{"crate_id":6,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"5:7750:16076":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"6:4233:18503":{"crate_id":6,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"18:12055:16359":{"crate_id":18,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:7539:15973":{"crate_id":17,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"5:4473:281":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:46902:15631":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"23:9072:6031":{"crate_id":23,"path":["typenum","int","NInt"],"kind":"struct"},"6:3371:16535":{"crate_id":6,"path":["std","io","stdio","Stdin"],"kind":"struct"},"6:11483:15308":{"crate_id":6,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"25:191:2558":{"crate_id":25,"path":["const_oid","buffer","Buffer"],"kind":"struct"},"6:11660:14138":{"crate_id":6,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"18:1233:16314":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:3373:16536":{"crate_id":6,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"12:123:12368":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"18:13387:15841":{"crate_id":18,"path":["object","read","SymbolMap"],"kind":"struct"},"23:1905:18209":{"crate_id":23,"path":["typenum","uint","SetBit"],"kind":"trait"},"18:10733:12772":{"crate_id":18,"path":["object","endian","I32Bytes"],"kind":"struct"},"18:14521:13095":{"crate_id":18,"path":["object","macho","Section64"],"kind":"struct"},"23:933:18228":{"crate_id":23,"path":["typenum","private","PrivateSetBit"],"kind":"trait"},"6:2772:16533":{"crate_id":6,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"7:5617:14755":{"crate_id":7,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"1:12076:6086":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"18:11494:12788":{"crate_id":18,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"18:12643:12800":{"crate_id":18,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:22924:17937":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"18:12907:12896":{"crate_id":18,"path":["object","read","pe","import","Import"],"kind":"enum"},"5:1397:16499":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"6:11394:37410":{"crate_id":6,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"18:13052:16397":{"crate_id":18,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"1:42733:206":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"6:10378:16167":{"crate_id":6,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"5:1535:6078":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"18:10766:12773":{"crate_id":18,"path":["object","endian","I64Bytes"],"kind":"struct"},"7:6792:14984":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:10756:16600":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"5:884:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"21:24:2568":{"crate_id":21,"path":["crypto_common","hazmat","SerializedState"],"kind":"type_alias"},"1:33917:17648":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"15:159:16486":{"crate_id":15,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:42851:17770":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:41463:16136":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:8125:12423":{"crate_id":6,"path":["std","thread","Thread"],"kind":"struct"},"6:11143:16593":{"crate_id":6,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"7:1684:14357":{"crate_id":7,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:6939:15927":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"6:8765:15269":{"crate_id":6,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:0:527":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:23515:16108":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"0:118:2417":{"crate_id":0,"path":["sha2","Sha256"],"kind":"type_alias"},"18:11770:25684":{"crate_id":18,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"25:218:145":{"crate_id":25,"path":["const_oid","encoder","Encoder"],"kind":"struct"},"1:3965:71":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"7:1494:14236":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"7:8175:15194":{"crate_id":7,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:41322:12505":{"crate_id":1,"path":["core","ffi","va_list","VaListImpl"],"kind":"struct"},"5:1591:16505":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"18:3524:16321":{"crate_id":18,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:47223:15657":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:32921:16673":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"23:835:18196":{"crate_id":23,"path":["typenum","private","PrivateIntegerAdd"],"kind":"trait"},"7:8326:15218":{"crate_id":7,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"18:11855:16351":{"crate_id":18,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:2838:13735":{"crate_id":17,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"18:10634:12769":{"crate_id":18,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:4555:17687":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"17:6387:16411":{"crate_id":17,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:45050:16120":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"18:12022:16357":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"6:11069:16015":{"crate_id":6,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"18:11259:16333":{"crate_id":18,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:22382:17853":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:10923:12225":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"18:11643:12800":{"crate_id":18,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:8276:6114":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"18:12969:12862":{"crate_id":18,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:22256:18198":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"18:14924:13169":{"crate_id":18,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"5:6547:18300":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"5:7510:15325":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:3576:17668":{"crate_id":1,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"1:42752:185":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"18:16350:13591":{"crate_id":18,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"18:13630:12906":{"crate_id":18,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:6736:39243":{"crate_id":17,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:44801:16187":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:10674:11984":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"6:9404:37378":{"crate_id":6,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"6:11099:152":{"crate_id":6,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"18:10815:16326":{"crate_id":18,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"1:41557:16147":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"4:586:15326":{"crate_id":4,"path":["digest","core_api","ct_variable","NoOid"],"kind":"struct"},"18:16417:13603":{"crate_id":18,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"23:1878:18207":{"crate_id":23,"path":["typenum","uint","GetBit"],"kind":"trait"},"1:41403:16129":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:22372:18198":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:8230:25586":{"crate_id":17,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"7:7515:15148":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"7:5007:14505":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:47546:15686":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"4:390:2383":{"crate_id":4,"path":["digest","digest","Digest"],"kind":"trait"},"23:9461:6153":{"crate_id":23,"path":["typenum","array","ATerm"],"kind":"struct"},"6:12593:16632":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"24:68:18198":{"crate_id":24,"path":["block_buffer","sealed","Sealed"],"kind":"trait"},"18:16538:13621":{"crate_id":18,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"18:12854:12859":{"crate_id":18,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:2810:114":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:11955:6083":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:10273:830":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"18:10150:25637":{"crate_id":18,"path":["object","common","AddressSize"],"kind":"enum"},"6:10507:16613":{"crate_id":6,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"1:42868:16172":{"crate_id":1,"path":["core","range","iter","IterRange"],"kind":"struct"},"18:16791:13699":{"crate_id":18,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"6:12243:16051":{"crate_id":6,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"18:14545:13096":{"crate_id":18,"path":["object","macho","Fvmlib"],"kind":"struct"},"18:12287:16370":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"7:6893:15024":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"18:13575:12862":{"crate_id":18,"path":["object","read","Relocation"],"kind":"struct"},"18:12160:15812":{"crate_id":18,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:7189:25581":{"crate_id":17,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"18:16838:12974":{"crate_id":18,"path":["object","xcoff","Rel32"],"kind":"struct"},"5:6915:12440":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:44955:16194":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"7:6638:14933":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"4:327:18198":{"crate_id":4,"path":["digest","core_api","wrapper","sealed","Sealed"],"kind":"trait"},"1:43882:11806":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"5:3358:16008":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"18:11590:16340":{"crate_id":18,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:22133:11871":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"7:1657:14344":{"crate_id":7,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"5:4362:6077":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:42695:15583":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"5:2344:34200":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"18:14940:13171":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"23:1221:6207":{"crate_id":23,"path":["typenum","type_operators","IsEqual"],"kind":"trait"},"21:60:211":{"crate_id":21,"path":["crypto_common","Output"],"kind":"type_alias"},"18:10283:25641":{"crate_id":18,"path":["object","common","SymbolKind"],"kind":"enum"},"1:23705:15362":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"1:8446:6441":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:8498:190":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:702:16517":{"crate_id":6,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"6:3334:38242":{"crate_id":6,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"7:5488:14694":{"crate_id":7,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"23:1016:18238":{"crate_id":23,"path":["typenum","private","PrivateMax"],"kind":"trait"},"18:15817:13426":{"crate_id":18,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:6711:16439":{"crate_id":17,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"7:5249:14579":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"9:0:2426":{"crate_id":9,"path":["cfg_if"],"kind":"module"},"18:16315:13578":{"crate_id":18,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:4981:13786":{"crate_id":17,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:2872:213":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"12:2206:16009":{"crate_id":12,"path":["hashbrown","table","HashTable"],"kind":"struct"},"7:4914:14461":{"crate_id":7,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"7:4957:14479":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"10:49:24582":{"crate_id":10,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"21:1182:6141":{"crate_id":21,"path":["crypto_common","InvalidLength"],"kind":"struct"},"0:122:2425":{"crate_id":0,"path":["sha2","Sha512"],"kind":"type_alias"},"15:31:16486":{"crate_id":15,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:45389:16226":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:45797:16240":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"21:147:2566":{"crate_id":21,"path":["crypto_common","hazmat","DeserializeStateError"],"kind":"struct"},"19:643:12626":{"crate_id":19,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"7:6749:14970":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"6:2339:151":{"crate_id":6,"path":["std","fs","File"],"kind":"struct"},"1:45480:16229":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"18:12263:15821":{"crate_id":18,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"6:11241:2743":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"4:361:2562":{"crate_id":4,"path":["digest","core_api","UpdateCore"],"kind":"trait"},"7:479:14168":{"crate_id":7,"path":["libc","unix","timeval"],"kind":"struct"},"5:7539:12457":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:7347:13865":{"crate_id":17,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"5:3324:16007":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"18:11552:16338":{"crate_id":18,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:377:16511":{"crate_id":6,"path":["std","thread","scoped","Scope"],"kind":"struct"},"18:10700:12771":{"crate_id":18,"path":["object","endian","I16Bytes"],"kind":"struct"},"18:15908:13448":{"crate_id":18,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"12:321:16000":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:22177:18206":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:43243:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:12217:15317":{"crate_id":6,"path":["std","alloc","System"],"kind":"struct"},"6:5139:18548":{"crate_id":6,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"1:6998:16091":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:45808:15618":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"6:3560:16161":{"crate_id":6,"path":["std","io","util","Repeat"],"kind":"struct"},"18:13108:12800":{"crate_id":18,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"6:12652:763":{"crate_id":6,"path":["std","f16"],"kind":"primitive"},"6:12668:1460":{"crate_id":6,"path":["std","reference"],"kind":"primitive"},"5:7527:16067":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:6133:12394":{"crate_id":6,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"18:13876:12958":{"crate_id":18,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"7:5325:14614":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:44662:6081":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:2878:13737":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:4255:18507":{"crate_id":6,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"18:13157:12872":{"crate_id":18,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"7:1589:14291":{"crate_id":7,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:47013:15638":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"12:851:16497":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"23:9019:6033":{"crate_id":23,"path":["typenum","bit","B1"],"kind":"struct"},"1:14094:16140":{"crate_id":1,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"6:11040:16622":{"crate_id":6,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"7:4875:14440":{"crate_id":7,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:7256:15955":{"crate_id":17,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:44855:6085":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"12:1063:39223":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"6:10486:16524":{"crate_id":6,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"6:11127:37407":{"crate_id":6,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"18:12898:15834":{"crate_id":18,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"18:12787:16393":{"crate_id":18,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"6:9539:12414":{"crate_id":6,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"18:15699:13398":{"crate_id":18,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:45739:16682":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:45688:231":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"5:1382:16500":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:8090:12395":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:1919:17595":{"crate_id":1,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"6:11983:15316":{"crate_id":6,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:8643:16589":{"crate_id":6,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:41285:17736":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:45504:16235":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:5022:12392":{"crate_id":6,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"23:1007:18236":{"crate_id":23,"path":["typenum","private","PrivateMin"],"kind":"trait"},"17:7279:15956":{"crate_id":17,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"4:476:2733":{"crate_id":4,"path":["digest","ExtendableOutputReset"],"kind":"trait"},"18:15801:13422":{"crate_id":18,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"18:14910:13166":{"crate_id":18,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"5:6746:12440":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:43899:150":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"7:5428:14657":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:26659:283":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"18:11512:25665":{"crate_id":18,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"1:3792:268":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"6:6775:16159":{"crate_id":6,"path":["std","sync","once","Once"],"kind":"struct"},"1:13185:16189":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"12:2323:16500":{"crate_id":12,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"1:48248:6629":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:5344:16549":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:47861:15724":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:12648:1771":{"crate_id":6,"path":["std","str"],"kind":"primitive"},"1:45007:16197":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"12:1885:16006":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:12657:921":{"crate_id":6,"path":["std","i16"],"kind":"primitive"},"17:906:16311":{"crate_id":17,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"18:14413:13078":{"crate_id":18,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:8624:12774":{"crate_id":6,"path":["std","io","Bytes"],"kind":"struct"},"5:7569:34197":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:41516:16143":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"7:5652:14769":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:41454:16134":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"18:13044:12869":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"6:8299:16016":{"crate_id":6,"path":["std","fs","Permissions"],"kind":"struct"},"7:6645:14934":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:44333:16178":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"18:16191:13543":{"crate_id":18,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:1100:15974":{"crate_id":6,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:8582:16482":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:48081:6734":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:5130:18547":{"crate_id":6,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"6:3679:11978":{"crate_id":6,"path":["std","io","Write"],"kind":"trait"},"6:7570:38152":{"crate_id":6,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"6:12260:12434":{"crate_id":6,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"18:16051:13486":{"crate_id":18,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"6:5683:16550":{"crate_id":6,"path":["std","process","Child"],"kind":"struct"},"18:16848:12979":{"crate_id":18,"path":["object","xcoff","Rel64"],"kind":"struct"},"7:8260:15203":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"5:1582:16004":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:13687:123":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"18:5154:16324":{"crate_id":18,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"1:8851:32965":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"5:0:325":{"crate_id":5,"path":["alloc"],"kind":"module"},"18:519:12710":{"crate_id":18,"path":["object","read","any","Section"],"kind":"struct"},"1:43586:11982":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:47290:15660":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"23:1241:6209":{"crate_id":23,"path":["typenum","type_operators","IsLessOrEqual"],"kind":"trait"},"6:7973:12756":{"crate_id":6,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"7:6428:14822":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:3688:38184":{"crate_id":6,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:537:12379":{"crate_id":6,"path":["std","thread","PanicGuard"],"kind":"struct"},"7:1597:14296":{"crate_id":7,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"5:3337:34310":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:32944:249":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"12:787:12481":{"crate_id":12,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"6:1011:16498":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"3:0:2714":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"12:0:2719":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"23:1231:6208":{"crate_id":23,"path":["typenum","type_operators","IsGreater"],"kind":"trait"},"18:15159:13210":{"crate_id":18,"path":["object","macho","Nlist64"],"kind":"struct"},"1:44541:6074":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"18:15978:13470":{"crate_id":18,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"7:5241:14576":{"crate_id":7,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"18:15876:13440":{"crate_id":18,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"18:13021:25783":{"crate_id":18,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:7492:15966":{"crate_id":17,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"7:5036:14518":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:23495:16105":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:4701:11990":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"1:2671:697":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:42908:16173":{"crate_id":1,"path":["core","range","iter","IterRangeInclusive"],"kind":"struct"},"18:15186:13213":{"crate_id":18,"path":["object","macho","RelocationInfo"],"kind":"struct"},"12:776:12457":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:23683:15360":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"1:12959:6057":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"7:5151:14542":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"10:318:14118":{"crate_id":10,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:3587:2608":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:3599:155":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"5:2142:16011":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"18:13892:12962":{"crate_id":18,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:2568:13723":{"crate_id":17,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"18:13344:12890":{"crate_id":18,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:7740:17713":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"1:46770:15619":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:7786:39246":{"crate_id":17,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"5:7710:16071":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:43467:11812":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:11907:6743":{"crate_id":6,"path":["std","sys","thread_local","native","eager","State"],"kind":"enum"},"1:48118:11776":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"18:10975:39254":{"crate_id":18,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:14186:217":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"18:15919:13452":{"crate_id":18,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"6:4039:16545":{"crate_id":6,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"18:10311:25642":{"crate_id":18,"path":["object","common","SymbolScope"],"kind":"enum"},"23:9642:6029":{"crate_id":23,"path":["typenum","uint","UTerm"],"kind":"struct"},"7:5575:14730":{"crate_id":7,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:42830:17761":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:41394:16677":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"7:4976:14487":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"18:15102:13202":{"crate_id":18,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:12140:16544":{"crate_id":6,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"18:10667:12770":{"crate_id":18,"path":["object","endian","U64Bytes"],"kind":"struct"},"18:13360:25653":{"crate_id":18,"path":["object","read","SymbolSection"],"kind":"enum"},"21:83:6126":{"crate_id":21,"path":["crypto_common","BlockSizes"],"kind":"trait"},"18:14431:13079":{"crate_id":18,"path":["object","macho","LoadCommand"],"kind":"struct"},"19:481:15781":{"crate_id":19,"path":["memchr","cow","CowBytes"],"kind":"struct"},"4:389:2574":{"crate_id":4,"path":["digest","digest","HashMarker"],"kind":"trait"},"1:23526:17477":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"7:553:14213":{"crate_id":7,"path":["libc","unix","linger"],"kind":"struct"},"17:7997:13759":{"crate_id":17,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:3426:17655":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"5:3332:16005":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"18:14110:13003":{"crate_id":18,"path":["object","elf","Verdaux"],"kind":"struct"},"7:6878:15013":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:2228:11809":{"crate_id":1,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"5:5821:12477":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:5725:12766":{"crate_id":17,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"6:619:16513":{"crate_id":6,"path":["std","thread","JoinHandle"],"kind":"struct"},"18:14571:12820":{"crate_id":18,"path":["object","macho","Dylib"],"kind":"struct"},"10:0:2717":{"crate_id":10,"path":["miniz_oxide"],"kind":"module"},"6:5154:18549":{"crate_id":6,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"7:8237:15197":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:383:16512":{"crate_id":6,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:44559:6073":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"18:12254:15820":{"crate_id":18,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"18:14678:13116":{"crate_id":18,"path":["object","macho","ThreadCommand"],"kind":"struct"},"21:125:6139":{"crate_id":21,"path":["crypto_common","InnerInit"],"kind":"trait"},"6:4140:18497":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:8560:12619":{"crate_id":6,"path":["std","io","util","Empty"],"kind":"struct"},"18:11989:16354":{"crate_id":18,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"7:6602:14919":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"18:11825:16347":{"crate_id":18,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"7:1500:14239":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:34189:17649":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"6:4703:18528":{"crate_id":6,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:1632:16637":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:8525:15986":{"crate_id":17,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:8118:222":{"crate_id":17,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:14211:16668":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:7355:13753":{"crate_id":17,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:10108:85":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:47816:15723":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:2258:133":{"crate_id":6,"path":["std","ffi","os_str","Display"],"kind":"struct"},"1:47240:15658":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:12428:12436":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:12546:6070":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:3063:78":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"7:7344:15064":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:3147:127":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"6:3934:16543":{"crate_id":6,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:23012:33653":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"5:2364:16063":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:46785:15620":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"19:635:12646":{"crate_id":19,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:13162:16188":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"5:4202:6078":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"6:11118:15263":{"crate_id":6,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"18:12072:16009":{"crate_id":18,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"12:2533:14078":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:1942:16525":{"crate_id":6,"path":["std","env","Args"],"kind":"struct"},"6:6455:12400":{"crate_id":6,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:31346:11806":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:9215:16599":{"crate_id":6,"path":["std","pipe","PipeWriter"],"kind":"struct"},"18:16013:13478":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:12661:1902":{"crate_id":6,"path":["std","u8"],"kind":"primitive"},"1:31357:29892":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"18:11757:15803":{"crate_id":18,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"18:13971:12974":{"crate_id":18,"path":["object","elf","Rel32"],"kind":"struct"},"23:5714:6157":{"crate_id":23,"path":["typenum","generated","generic_const_mappings","ToUInt"],"kind":"trait"},"10:380:24565":{"crate_id":10,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:8188:16578":{"crate_id":6,"path":["std","env","JoinPathsError"],"kind":"struct"},"18:10255:25640":{"crate_id":18,"path":["object","common","ComdatKind"],"kind":"enum"},"7:5057:14527":{"crate_id":7,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"18:15951:13463":{"crate_id":18,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:44692:16179":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"18:11901:16353":{"crate_id":18,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"7:5375:14630":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"18:11629:12749":{"crate_id":18,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"12:1892:16007":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:4239:13775":{"crate_id":17,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:11843:6091":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"7:8007:15193":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:3467:16539":{"crate_id":6,"path":["std","io","stdio","Stderr"],"kind":"struct"},"12:1542:24645":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"5:7248:12497":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:1506:168":{"crate_id":6,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"7:4816:14396":{"crate_id":7,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:7902:37422":{"crate_id":6,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"18:12774:16392":{"crate_id":18,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:41525:16144":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"12:2115:16499":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"18:15587:13374":{"crate_id":18,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:3423:17654":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"18:12173:15813":{"crate_id":18,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"7:4805:14388":{"crate_id":7,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:9293:15291":{"crate_id":6,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"18:15001:13182":{"crate_id":18,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"6:953:12457":{"crate_id":6,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"7:578:14226":{"crate_id":7,"path":["libc","unix","servent"],"kind":"struct"},"1:22880:17936":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"6:6280:12404":{"crate_id":6,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"23:5711:6156":{"crate_id":23,"path":["typenum","generated","generic_const_mappings","Const"],"kind":"struct"},"6:11135:37409":{"crate_id":6,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:4265:13776":{"crate_id":17,"path":["gimli","constants","DwChildren"],"kind":"struct"},"18:13795:12943":{"crate_id":18,"path":["object","elf","FileHeader64"],"kind":"struct"},"18:14834:13157":{"crate_id":18,"path":["object","macho","DylibReference"],"kind":"struct"},"1:4906:11992":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"6:6503:16562":{"crate_id":6,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:5447:13800":{"crate_id":17,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:0:1763":{"crate_id":6,"path":["std"],"kind":"module"},"7:8272:15205":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"18:12081:16365":{"crate_id":18,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"18:13585:16407":{"crate_id":18,"path":["object","read","RelocationMap"],"kind":"struct"},"1:44550:6072":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:3199:16650":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"6:12662:1884":{"crate_id":6,"path":["std","u16"],"kind":"primitive"},"6:1996:16527":{"crate_id":6,"path":["std","error","Report"],"kind":"struct"},"6:969:16505":{"crate_id":6,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:7713:39245":{"crate_id":17,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:5111:13789":{"crate_id":17,"path":["gimli","constants","DwId"],"kind":"struct"},"17:5170:13791":{"crate_id":17,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:6806:13743":{"crate_id":17,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:40308:222":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:41955:16160":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:42495:15573":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:9835:151":{"crate_id":6,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"7:6631:14932":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:3517:18484":{"crate_id":6,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"23:1198:6168":{"crate_id":23,"path":["typenum","type_operators","PartialDiv"],"kind":"trait"},"24:160:2554":{"crate_id":24,"path":["block_buffer","Eager"],"kind":"struct"},"6:12645:1352":{"crate_id":6,"path":["std","pointer"],"kind":"primitive"},"6:1636:11919":{"crate_id":6,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"6:8336:16020":{"crate_id":6,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"7:564:14218":{"crate_id":7,"path":["libc","unix","itimerval"],"kind":"struct"},"18:11395:25662":{"crate_id":18,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"7:5482:14693":{"crate_id":7,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"19:507:12626":{"crate_id":19,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:10647:116":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"1:10655:123":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:11576:252":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:4922:18550":{"crate_id":6,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"7:5196:14553":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:5356:454":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"5:3686:194":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:41156:16121":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"13:0:2720":{"crate_id":13,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:2122:696":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"6:9864:131":{"crate_id":6,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"6:6054:16557":{"crate_id":6,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:45496:16233":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"18:13608:25622":{"crate_id":18,"path":["object","read","CompressionFormat"],"kind":"enum"},"6:11749:12427":{"crate_id":6,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"18:14897:13165":{"crate_id":18,"path":["object","macho","RpathCommand"],"kind":"struct"},"18:12575:16381":{"crate_id":18,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:8872:6743":{"crate_id":6,"path":["std","path","State"],"kind":"enum"},"6:7878:37419":{"crate_id":6,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"6:8344:16581":{"crate_id":6,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:3315:277":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"17:2746:13731":{"crate_id":17,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"7:6744:14969":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"18:12800:16394":{"crate_id":18,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"7:5117:14539":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:47109:15651":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:23650:15357":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"7:5271:14590":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:47964:15727":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"7:5623:14758":{"crate_id":7,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:40456:6105":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:6438:25576":{"crate_id":17,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"7:5658:14771":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"7:1667:14350":{"crate_id":7,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:683:16514":{"crate_id":6,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:6896:16564":{"crate_id":6,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"7:6441:14823":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:44490:16681":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"18:10601:12768":{"crate_id":18,"path":["object","endian","U16Bytes"],"kind":"struct"},"5:1612:16491":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"5:7787:16077":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:23065:11793":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"5:7599:16069":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:4243:18504":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:6729:16447":{"crate_id":17,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"5:3303:34309":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"6:12643:1924":{"crate_id":6,"path":["std","unit"],"kind":"primitive"},"1:41946:16159":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:4808:13780":{"crate_id":17,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:3797:159":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:41961:16161":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:11221:12515":{"crate_id":1,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"18:12133:15810":{"crate_id":18,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"18:12045:12703":{"crate_id":18,"path":["object","read","elf","note","Note"],"kind":"struct"},"18:11318:16334":{"crate_id":18,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:6366:15882":{"crate_id":17,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"23:612:6163":{"crate_id":23,"path":["typenum","marker_traits","Zero"],"kind":"trait"},"19:608:16304":{"crate_id":19,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"5:1601:16490":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"7:4990:14495":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"23:1151:18220":{"crate_id":23,"path":["typenum","private","PrivateSquareRoot"],"kind":"trait"},"6:3095:238":{"crate_id":6,"path":["std","io","error","Result"],"kind":"type_alias"},"1:41274:16126":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"18:15128:13204":{"crate_id":18,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:8314:158":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"18:11564:16339":{"crate_id":18,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:4402:13777":{"crate_id":17,"path":["gimli","constants","DwTag"],"kind":"struct"},"18:16029:13481":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"5:1551:11919":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"25:265:15968":{"crate_id":25,"path":["const_oid","parser","Parser"],"kind":"struct"},"0:117:2415":{"crate_id":0,"path":["sha2","Sha224"],"kind":"type_alias"},"12:481:166":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"5:7098:12492":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:7041:13751":{"crate_id":17,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:38873:17660":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:22647:18198":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"1:13470:15792":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:31331:11849":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"7:1507:14242":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:2448:13711":{"crate_id":17,"path":["gimli","common","Encoding"],"kind":"struct"},"7:8316:15216":{"crate_id":7,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"18:13509:12859":{"crate_id":18,"path":["object","read","Export"],"kind":"struct"},"18:15691:13397":{"crate_id":18,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:10505:16614":{"crate_id":6,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"1:31325:6107":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:41504:16142":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:43095:90":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:2834:11852":{"crate_id":1,"path":["core","clone","InitializingSlice"],"kind":"struct"},"18:14498:13090":{"crate_id":18,"path":["object","macho","Section32"],"kind":"struct"},"7:4829:14406":{"crate_id":7,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:41300:16127":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:4371:18525":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"7:0:1032":{"crate_id":7,"path":["libc"],"kind":"module"},"19:726:12650":{"crate_id":19,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:9544:12415":{"crate_id":6,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"1:44733:6087":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"18:14008:12980":{"crate_id":18,"path":["object","elf","Rela64"],"kind":"struct"},"17:2588:13724":{"crate_id":17,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"7:8278:15206":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"1:4653:16082":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"7:4929:14468":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"5:3792:12440":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"18:15324:13219":{"crate_id":18,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"18:11603:16341":{"crate_id":18,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:43860:30048":{"crate_id":1,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"6:9279:16601":{"crate_id":6,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"14:0:2721":{"crate_id":14,"path":["std_detect"],"kind":"module"},"7:497:14176":{"crate_id":7,"path":["libc","unix","rusage"],"kind":"struct"},"1:10664:11980":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"18:12397:16379":{"crate_id":18,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"6:8429:16583":{"crate_id":6,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"5:2156:16638":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"18:13947:12970":{"crate_id":18,"path":["object","elf","Syminfo32"],"kind":"struct"},"19:765:29852":{"crate_id":19,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"23:2525:2389":{"crate_id":23,"path":["typenum","generated","consts","U32"],"kind":"type_alias"},"1:23346:16099":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:44611:6068":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:12669:13":{"crate_id":6,"path":["std","fn"],"kind":"primitive"},"18:10965:16329":{"crate_id":18,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"18:16005:13477":{"crate_id":18,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:48133:11777":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"18:12864:15825":{"crate_id":18,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"23:2669:2573":{"crate_id":23,"path":["typenum","generated","consts","U80"],"kind":"type_alias"},"7:6727:14961":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"18:15595:13375":{"crate_id":18,"path":["object","pe","Guid"],"kind":"struct"},"18:11794:25685":{"crate_id":18,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"7:1530:14252":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:8030:12619":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"22:143:2552":{"crate_id":22,"path":["hybrid_array","Array"],"kind":"struct"},"23:1251:6210":{"crate_id":23,"path":["typenum","type_operators","IsNotEqual"],"kind":"trait"},"7:4890:14447":{"crate_id":7,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:13125:16183":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:41126:16119":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"19:0:2726":{"crate_id":19,"path":["memchr"],"kind":"module"},"22:0:2727":{"crate_id":22,"path":["hybrid_array"],"kind":"module"},"1:40276:6110":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"12:676:11919":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:6747:13814":{"crate_id":17,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:4840:12503":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:22175:18205":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:4118:13772":{"crate_id":17,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:7468:13872":{"crate_id":17,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"18:14258:13030":{"crate_id":18,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:3809:17671":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"18:321:16311":{"crate_id":18,"path":["object","read","util","DebugLen"],"kind":"struct"},"7:4902:14452":{"crate_id":7,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:22986:18198":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1:9446:16660":{"crate_id":1,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"6:8331:16017":{"crate_id":6,"path":["std","hash","random","RandomState"],"kind":"struct"},"1:46817:15622":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"5:4127:12457":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:2702:13729":{"crate_id":17,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:23639:15356":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"17:6460:25577":{"crate_id":17,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:47396:15680":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:4776:16655":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"7:491:14173":{"crate_id":7,"path":["libc","unix","rlimit"],"kind":"struct"},"6:8807:18559":{"crate_id":6,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:7977:13758":{"crate_id":17,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:3628:6111":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:42981:224":{"crate_id":1,"path":["core","range","RangeFrom"],"kind":"struct"},"7:4997:14498":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"18:12663:12851":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:6082:15851":{"crate_id":17,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"5:2251:12379":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:12660:914":{"crate_id":6,"path":["std","i128"],"kind":"primitive"},"18:11458:16336":{"crate_id":18,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"18:11915:12800":{"crate_id":18,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:4182:13774":{"crate_id":17,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:45771:16684":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"1:3431:17656":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"1:23094:18198":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"18:16672:13670":{"crate_id":18,"path":["object","xcoff","Symbol64"],"kind":"struct"},"7:6687:14951":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"18:12836:25781":{"crate_id":18,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"23:1071:18201":{"crate_id":23,"path":["typenum","private","IsGreaterPrivate"],"kind":"trait"},"6:9514:12362":{"crate_id":6,"path":["std","sync","poison","Guard"],"kind":"struct"},"18:14788:13147":{"crate_id":18,"path":["object","macho","DylibModule32"],"kind":"struct"},"18:10586:12767":{"crate_id":18,"path":["object","endian","BigEndian"],"kind":"struct"},"7:6695:14955":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"10:412:24566":{"crate_id":10,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:9675:16525":{"crate_id":6,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"7:7326:15055":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:12579:6071":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"17:2528:13721":{"crate_id":17,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:12665:1878":{"crate_id":6,"path":["std","u128"],"kind":"primitive"},"23:1091:18202":{"crate_id":23,"path":["typenum","private","IsLessOrEqualPrivate"],"kind":"trait"},"1:40629:17636":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:22205:17856":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"18:13207:16403":{"crate_id":18,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"17:2484:13719":{"crate_id":17,"path":["gimli","common","Register"],"kind":"struct"},"5:284:12440":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"7:5051:14525":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"7:5494:14696":{"crate_id":7,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"17:2898:13738":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"18:10571:12766":{"crate_id":18,"path":["object","endian","LittleEndian"],"kind":"struct"},"7:6659:14939":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"5:3082:15322":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"19:96:29843":{"crate_id":19,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"18:14396:13075":{"crate_id":18,"path":["object","macho","MachHeader32"],"kind":"struct"},"7:5585:14735":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:44987:16195":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"18:12588:12847":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"18:12924:15835":{"crate_id":18,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"7:1703:14364":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:6157:15857":{"crate_id":17,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:2025:18439":{"crate_id":6,"path":["std","error","Indented"],"kind":"struct"},"6:963:12481":{"crate_id":6,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"18:11210:39259":{"crate_id":18,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"7:5205:14558":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"18:14637:13110":{"crate_id":18,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:5323:30871":{"crate_id":1,"path":["core","ffi","va_list","sealed_trait","VaArgSafe"],"kind":"trait"},"7:7962:15179":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:44751:6083":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:40330:224":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:6968:12412":{"crate_id":6,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"23:2573:2390":{"crate_id":23,"path":["typenum","generated","consts","U48"],"kind":"type_alias"},"6:9226:211":{"crate_id":6,"path":["std","process","Output"],"kind":"struct"},"1:41140:16120":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:11080:16040":{"crate_id":6,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"6:12656:939":{"crate_id":6,"path":["std","i8"],"kind":"primitive"},"1:38983:17662":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"6:11402:15306":{"crate_id":6,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"2:2077:15329":{"crate_id":2,"path":["compiler_builtins","int","big","i256"],"kind":"struct"},"17:7013:15935":{"crate_id":17,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"18:13436:12893":{"crate_id":18,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:6109:15855":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:4536:17686":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:2638:13726":{"crate_id":17,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:47094:15650":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"18:12120:15808":{"crate_id":18,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"6:9534:247":{"crate_id":6,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"6:5045:18512":{"crate_id":6,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:12100:16543":{"crate_id":6,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"23:1261:6178":{"crate_id":23,"path":["typenum","type_operators","IsGreaterOrEqual"],"kind":"trait"},"1:13481:17798":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:3061:12391":{"crate_id":6,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:43805:15592":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:8562:15992":{"crate_id":17,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:5390:216":{"crate_id":6,"path":["std","path","PathBuf"],"kind":"struct"},"6:11164:16556":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"1:3874:132":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:4621:16653":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:23661:15358":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"7:6422:14821":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"4:359:2558":{"crate_id":4,"path":["digest","core_api","Buffer"],"kind":"type_alias"},"6:4803:18546":{"crate_id":6,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"23:1031:18199":{"crate_id":23,"path":["typenum","private","IsLessPrivate"],"kind":"trait"},"18:15792:13421":{"crate_id":18,"path":["object","pe","ImageRelocation"],"kind":"struct"},"18:11616:16342":{"crate_id":18,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:41103:15567":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"21:56:2556":{"crate_id":21,"path":["crypto_common","Block"],"kind":"type_alias"},"18:13014:12865":{"crate_id":18,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"18:14811:13156":{"crate_id":18,"path":["object","macho","DylibModule64"],"kind":"struct"},"7:7580:15173":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:11455:174":{"crate_id":6,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"17:2465:13713":{"crate_id":17,"path":["gimli","common","LineEncoding"],"kind":"struct"},"18:14985:13178":{"crate_id":18,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:45508:16236":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:44105:169":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"5:1001:6077":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:5687:13802":{"crate_id":17,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"18:16814:13704":{"crate_id":18,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"6:1883:16522":{"crate_id":6,"path":["std","env","Vars"],"kind":"struct"},"7:5265:14587":{"crate_id":7,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:8806:17712":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"4:630:6045":{"crate_id":4,"path":["digest","core_api","xof_reader","XofReaderCoreWrapper"],"kind":"struct"},"18:5328:16325":{"crate_id":18,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"1:44569:6075":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:2096:210":{"crate_id":6,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:5313:16549":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"23:924:18215":{"crate_id":23,"path":["typenum","private","PrivateCmp"],"kind":"trait"},"1:47906:15725":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:6254:15867":{"crate_id":17,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"5:7872:12485":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:3097:150":{"crate_id":6,"path":["std","io","error","Error"],"kind":"struct"},"23:1195:6179":{"crate_id":23,"path":["typenum","type_operators","Len"],"kind":"trait"},"1:11563:18198":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"23:1206:6165":{"crate_id":23,"path":["typenum","type_operators","Max"],"kind":"trait"},"18:16512:12929":{"crate_id":18,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"23:821:18223":{"crate_id":23,"path":["typenum","private","PrivateXor"],"kind":"trait"},"18:12935:15836":{"crate_id":18,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:41163:17710":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:4928:11835":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:11920:6092":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"23:621:2570":{"crate_id":23,"path":["typenum","marker_traits","Unsigned"],"kind":"trait"},"6:12011:16571":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"18:10840:12774":{"crate_id":18,"path":["object","read","util","Bytes"],"kind":"struct"},"1:7741:17714":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"20:0:1327":{"crate_id":20,"path":["panic_unwind"],"kind":"module"},"18:13928:12969":{"crate_id":18,"path":["object","elf","Sym64"],"kind":"struct"},"17:7413:16451":{"crate_id":17,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:41548:16146":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"19:531:15783":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:8176:13935":{"crate_id":17,"path":["gimli","read","UnitOffset"],"kind":"struct"},"12:2275:15974":{"crate_id":12,"path":["hashbrown","table","Entry"],"kind":"enum"},"18:10553:25650":{"crate_id":18,"path":["object","endian","Endianness"],"kind":"enum"},"15:40:12944":{"crate_id":15,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:23014:11793":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"1:44783:16186":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:44320:15605":{"crate_id":1,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"19:706:15792":{"crate_id":19,"path":["memchr","memmem","Searcher"],"kind":"struct"},"18:13757:12928":{"crate_id":18,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:11083:12513":{"crate_id":1,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"6:8325:131":{"crate_id":6,"path":["std","fs","DirBuilder"],"kind":"struct"},"23:2555:2880":{"crate_id":23,"path":["typenum","generated","consts","U42"],"kind":"type_alias"},"17:6656:16428":{"crate_id":17,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:3043:6048":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:47434:15682":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"4:461:2729":{"crate_id":4,"path":["digest","FixedOutput"],"kind":"trait"},"5:7856:12481":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:7383:13867":{"crate_id":17,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"5:5560:18283":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:12161:16545":{"crate_id":6,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:2229:11782":{"crate_id":1,"path":["core","ptr","metadata","metadata"],"kind":"function"},"1:4959:11993":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"18:0:2725":{"crate_id":18,"path":["object"],"kind":"module"},"18:12318:16371":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"7:5568:14728":{"crate_id":7,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"7:6459:14835":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"23:9480:6154":{"crate_id":23,"path":["typenum","array","TArr"],"kind":"struct"},"1:48092:11774":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"12:2525:39214":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"6:9842:16579":{"crate_id":6,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"1:41041:16115":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"12:859:16498":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"18:14845:13159":{"crate_id":18,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"19:515:12629":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:2682:13728":{"crate_id":17,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"18:10479:25648":{"crate_id":18,"path":["object","common","SymbolFlags"],"kind":"enum"},"18:12958:15837":{"crate_id":18,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:43354:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"23:2813:2571":{"crate_id":23,"path":["typenum","generated","consts","U128"],"kind":"type_alias"},"6:3328:38212":{"crate_id":6,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:8609:13764":{"crate_id":17,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"4:650:2575":{"crate_id":4,"path":["digest","InvalidOutputSize"],"kind":"struct"},"6:9263:15290":{"crate_id":6,"path":["std","process","ExitCode"],"kind":"struct"},"12:1862:11919":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"18:15763:13414":{"crate_id":18,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:6817:12411":{"crate_id":6,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"7:7308:15048":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:11971:16041":{"crate_id":6,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"18:14322:13059":{"crate_id":18,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"18:16164:13531":{"crate_id":18,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:4871:13782":{"crate_id":17,"path":["gimli","constants","DwDs"],"kind":"struct"},"18:11269:25665":{"crate_id":18,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"7:1727:14373":{"crate_id":7,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"18:12878:15829":{"crate_id":18,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"18:13260:25651":{"crate_id":18,"path":["object","read","FileKind"],"kind":"enum"},"17:7956:15978":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:41486:16140":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:1005:16497":{"crate_id":6,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"7:5357:14620":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"5:2167:16639":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"5:3843:16011":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:41312:12774":{"crate_id":1,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"1:47367:15679":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:34457:17652":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"18:11102:16331":{"crate_id":18,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"7:8284:15207":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:9391:119":{"crate_id":6,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:47993:15728":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:48014:15729":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"5:4990:229":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:43280:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"18:11328:39260":{"crate_id":18,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"18:16241:13555":{"crate_id":18,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:23606:15353":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"7:6523:14869":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"18:16395:13597":{"crate_id":18,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"25:226:6743":{"crate_id":25,"path":["const_oid","encoder","State"],"kind":"enum"},"5:2261:16058":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:41377:6068":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:2784:103":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"7:586:14230":{"crate_id":7,"path":["libc","unix","protoent"],"kind":"struct"},"17:7762:13905":{"crate_id":17,"path":["gimli","read","op","Piece"],"kind":"struct"},"18:11654:16333":{"crate_id":18,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"18:16717:13679":{"crate_id":18,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"15:0:2722":{"crate_id":15,"path":["rustc_demangle"],"kind":"module"},"1:47612:15688":{"crate_id":1,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"23:989:18195":{"crate_id":23,"path":["typenum","private","PrivateDivInt"],"kind":"trait"},"1:23547:18198":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"1:39617:17664":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"7:5127:14540":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:12658:927":{"crate_id":6,"path":["std","i32"],"kind":"primitive"},"1:2094:1733":{"crate_id":1,"path":["core","mem","size_of"],"kind":"function"},"6:4247:18505":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:45032:16121":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"4:114:2395":{"crate_id":4,"path":["digest","impl_oid_carrier"],"kind":"macro"},"1:36997:13888":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"18:16040:13485":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:6121:12362":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:7027:13824":{"crate_id":17,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:31731:11871":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"6:7890:37421":{"crate_id":6,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"1:12048:6085":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:7804:39247":{"crate_id":17,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"7:5462:14682":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:7505:15969":{"crate_id":17,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:5316:13796":{"crate_id":17,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:47567:15687":{"crate_id":1,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"1:5375:16658":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"17:7421:25582":{"crate_id":17,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:43169:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"18:12814:16395":{"crate_id":18,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"5:5134:12362":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:8977:16028":{"crate_id":6,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:6040:13747":{"crate_id":17,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"5:7591:222":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:0:2723":{"crate_id":16,"path":["addr2line"],"kind":"module"},"1:45016:16198":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:6606:218":{"crate_id":17,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:14482:17849":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:14071:16667":{"crate_id":1,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"18:15534:13368":{"crate_id":18,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"18:13730:12920":{"crate_id":18,"path":["object","archive","AixFileHeader"],"kind":"struct"},"6:4725:18529":{"crate_id":6,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:45484:16230":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:3803:17669":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:5749:116":{"crate_id":6,"path":["std","process","Command"],"kind":"struct"},"1:44709:16181":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:44883:16190":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"7:6679:14947":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"1:41077:16117":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"7:6858:14999":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"7:5319:14613":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:2658:13727":{"crate_id":17,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"18:12761:16391":{"crate_id":18,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:45153:16207":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"7:5107:14538":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:7156:15941":{"crate_id":17,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:41264:107":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"18:15937:13456":{"crate_id":18,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"24:168:6124":{"crate_id":24,"path":["block_buffer","Lazy"],"kind":"struct"},"7:5139:14541":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"23:1153:18217":{"crate_id":23,"path":["typenum","private","PrivateLogarithm2"],"kind":"trait"},"18:12385:16378":{"crate_id":18,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:23694:15361":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"18:12990:15839":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:6500:24685":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:4171:11919":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"23:8998:6032":{"crate_id":23,"path":["typenum","bit","B0"],"kind":"struct"},"6:9847:12421":{"crate_id":6,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"1:44679:15607":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"18:15035:13195":{"crate_id":18,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"18:15896:13447":{"crate_id":18,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"18:16211:13548":{"crate_id":18,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:47417:15681":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:41746:16155":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"16:327:24671":{"crate_id":16,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:42769:6078":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:11775:6078":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:32910:16672":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:5417:1007":{"crate_id":1,"path":["core","iter"],"kind":"module"},"18:15771:13417":{"crate_id":18,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"18:16116:13530":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:5940:12404":{"crate_id":6,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"18:13489:12896":{"crate_id":18,"path":["object","read","Import"],"kind":"struct"},"6:5733:16555":{"crate_id":6,"path":["std","process","ChildStderr"],"kind":"struct"},"7:7407:15084":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:48061:11772":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"18:15640:13384":{"crate_id":18,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:8649:16591":{"crate_id":6,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"6:2495:18444":{"crate_id":6,"path":["std","fs","symlink_metadata"],"kind":"function"},"18:15013:13184":{"crate_id":18,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:23453:29883":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:2988:13742":{"crate_id":17,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"18:15721:13400":{"crate_id":18,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:6061:16560":{"crate_id":6,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"4:372:2563":{"crate_id":4,"path":["digest","core_api","VariableOutputCore"],"kind":"trait"},"7:6852:14998":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:2918:13739":{"crate_id":17,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:6792:15917":{"crate_id":17,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"17:5740:12767":{"crate_id":17,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:9310:15292":{"crate_id":6,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"7:7463:15107":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:44642:6082":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"12:427:39219":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:8102:13932":{"crate_id":17,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:8317:25587":{"crate_id":17,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:5346:13797":{"crate_id":17,"path":["gimli","constants","DwLne"],"kind":"struct"},"6:12664:1896":{"crate_id":6,"path":["std","u64"],"kind":"primitive"},"23:942:18230":{"crate_id":23,"path":["typenum","private","PrivateDiv"],"kind":"trait"},"18:16269:13570":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:6901:15924":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"5:4519:12362":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"7:5539:14715":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"23:844:18218":{"crate_id":23,"path":["typenum","private","PrivatePow"],"kind":"trait"},"18:11888:16352":{"crate_id":18,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:3622:15266":{"crate_id":6,"path":["std","io","Read"],"kind":"trait"},"18:16068:13493":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"18:15713:13399":{"crate_id":18,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:45025:16199":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:47056:15648":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"18:11667:12792":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:8063:25585":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"18:14122:13006":{"crate_id":18,"path":["object","elf","Verneed"],"kind":"struct"},"6:11997:16045":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:34390:17650":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:2685:11793":{"crate_id":1,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"17:7880:13925":{"crate_id":17,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:44117:6743":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"18:14137:13012":{"crate_id":18,"path":["object","elf","Vernaux"],"kind":"struct"},"18:14093:12995":{"crate_id":18,"path":["object","elf","Verdef"],"kind":"struct"},"7:6756:14971":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"7:1584:14289":{"crate_id":7,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:44719:12774":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"4:673:2744":{"crate_id":4,"path":["digest","hashwriter","HashWriter"],"kind":"struct"},"18:10860:12776":{"crate_id":18,"path":["object","read","util","ByteString"],"kind":"struct"},"7:8231:15196":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"23:0:2569":{"crate_id":23,"path":["typenum"],"kind":"module"},"1:14159:33052":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:3985:12669":{"crate_id":17,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"6:9552:174":{"crate_id":6,"path":["std","time","Instant"],"kind":"struct"},"6:8311:152":{"crate_id":6,"path":["std","fs","FileType"],"kind":"struct"},"5:7583:11919":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:7009:2558":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:42960:226":{"crate_id":1,"path":["core","range","RangeInclusive"],"kind":"struct"},"18:14598:13105":{"crate_id":18,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:10670:218":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:10300:30204":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"18:1352:16315":{"crate_id":18,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:32914:13923":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"1:45488:16231":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"18:10062:25635":{"crate_id":18,"path":["object","common","Architecture"],"kind":"enum"},"1:44622:6069":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:2794:13733":{"crate_id":17,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:2043:12362":{"crate_id":1,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"18:16288:13571":{"crate_id":18,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:44652:6080":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:48186:11780":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"7:5311:14610":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"5:1211:37164":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"18:14690:13117":{"crate_id":18,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"18:12035:16358":{"crate_id":18,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:41251:15568":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:8272:12704":{"crate_id":6,"path":["std","fs","Metadata"],"kind":"struct"},"17:6267:15868":{"crate_id":17,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:9458:37379":{"crate_id":6,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"18:14178:13023":{"crate_id":18,"path":["object","elf","HashHeader"],"kind":"struct"},"18:15785:13420":{"crate_id":18,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"18:316:16310":{"crate_id":18,"path":["object","read","util","DebugByte"],"kind":"struct"},"23:1279:6167":{"crate_id":23,"path":["typenum","type_operators","ToInt"],"kind":"trait"},"18:13093:12790":{"crate_id":18,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"7:8225:15195":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"18:15456:13325":{"crate_id":18,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"4:470:2732":{"crate_id":4,"path":["digest","ExtendableOutput"],"kind":"trait"},"6:4850:15077":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"1:45698:239":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:48171:11779":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"10:168:24630":{"crate_id":10,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:5755:13803":{"crate_id":17,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:42713:15584":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"18:12331:16373":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"12:102:15996":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:11882:6088":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:8666:13923":{"crate_id":17,"path":["gimli","read","value","Value"],"kind":"enum"},"17:5196:13792":{"crate_id":17,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:3837:115":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:2521:18454":{"crate_id":6,"path":["std","fs","read_dir"],"kind":"function"},"1:3540:17666":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"6:11089:15222":{"crate_id":6,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"23:1168:6204":{"crate_id":23,"path":["typenum","type_operators","Same"],"kind":"trait"},"18:15074:13198":{"crate_id":18,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:45138:16201":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"18:13219:16404":{"crate_id":18,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"18:13423:15842":{"crate_id":18,"path":["object","read","ObjectMap"],"kind":"struct"},"1:41444:146":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:47191:15655":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:24259:248":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"5:6116:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:3396:6108":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"18:11014:39255":{"crate_id":18,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:3439:13768":{"crate_id":17,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:42777:11919":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:23502:15350":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"7:5477:14691":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"18:596:16313":{"crate_id":18,"path":["object","read","any","Comdat"],"kind":"struct"},"19:538:12631":{"crate_id":19,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"18:10202:25639":{"crate_id":18,"path":["object","common","SectionKind"],"kind":"enum"},"18:16631:12957":{"crate_id":18,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"23:1174:6205":{"crate_id":23,"path":["typenum","type_operators","Abs"],"kind":"trait"},"1:47641:15689":{"crate_id":1,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"18:12430:12815":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:43572:11979":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:1114:16499":{"crate_id":6,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:8966:15287":{"crate_id":6,"path":["std","path","Ancestors"],"kind":"struct"},"12:1558:16506":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"5:6566:18302":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"6:9210:16598":{"crate_id":6,"path":["std","pipe","PipeReader"],"kind":"struct"},"7:545:14208":{"crate_id":7,"path":["libc","unix","winsize"],"kind":"struct"},"18:11963:12807":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:912:202":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"1:41088:29908":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"6:9445:15296":{"crate_id":6,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"10:470:24563":{"crate_id":10,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:41352:17722":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:44837:6089":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:47269:15659":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:47027:15639":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:42820:16678":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"5:7694:12467":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"18:11469:25664":{"crate_id":18,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"18:15677:13393":{"crate_id":18,"path":["object","pe","ImageSymbol"],"kind":"struct"},"7:5441:14667":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"6:4333:38151":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"5:7200:280":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"21:74:2557":{"crate_id":21,"path":["crypto_common","BlockSizeUser"],"kind":"trait"},"12:686:16490":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:7209:15942":{"crate_id":17,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"18:12187:15814":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"6:8587:18458":{"crate_id":6,"path":["std","io","SeekFrom"],"kind":"enum"},"6:3426:16538":{"crate_id":6,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"5:4292:12362":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"5:1623:222":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:45167:16210":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"23:9577:148":{"crate_id":23,"path":["typenum","Equal"],"kind":"struct"},"5:6148:12472":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"19:548:165":{"crate_id":19,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"18:13243:16406":{"crate_id":18,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"6:9352:18596":{"crate_id":6,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:8743:15064":{"crate_id":6,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:47529:15685":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:41722:16153":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:42473:182":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:13459:16662":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"6:11370:15288":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:10918:12224":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"4:370:6041":{"crate_id":4,"path":["digest","core_api","XofReaderCore"],"kind":"trait"},"19:651:12626":{"crate_id":19,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:3322:261":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"7:559:14216":{"crate_id":7,"path":["libc","unix","sigval"],"kind":"struct"},"18:13700:12916":{"crate_id":18,"path":["object","archive","AixHeader"],"kind":"struct"},"18:12889:15833":{"crate_id":18,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"19:754:15799":{"crate_id":19,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:4071:12457":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"5:6274:12362":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:12229:37391":{"crate_id":6,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"23:611:202":{"crate_id":23,"path":["typenum","marker_traits","NonZero"],"kind":"trait"},"7:6617:14921":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:2344:6119":{"crate_id":6,"path":["std","fs","read"],"kind":"function"},"5:1781:12440":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"18:15578:13373":{"crate_id":18,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"7:5025:14514":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:45358:16220":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:3357:11856":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"17:6981:13763":{"crate_id":17,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"25:297:2753":{"crate_id":25,"path":["const_oid","ObjectIdentifierRef"],"kind":"struct"},"18:13328:12724":{"crate_id":18,"path":["object","read","SectionIndex"],"kind":"struct"},"1:2303:201":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"7:5405:14646":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"18:14069:12993":{"crate_id":18,"path":["object","elf","Dyn64"],"kind":"struct"},"7:5471:14688":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"1:46800:15621":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"6:7472:12416":{"crate_id":6,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"18:15884:13441":{"crate_id":18,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"7:8304:15212":{"crate_id":7,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"6:978:16491":{"crate_id":6,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"4:612:6043":{"crate_id":4,"path":["digest","core_api","rt_variable","RtVariableCoreWrapper"],"kind":"struct"},"18:16802:13701":{"crate_id":18,"path":["object","xcoff","StatAux"],"kind":"struct"},"5:3858:16638":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"4:659:2739":{"crate_id":4,"path":["digest","InvalidBufferSize"],"kind":"struct"},"1:23417:15339":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"18:16359:13593":{"crate_id":18,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:46917:15632":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"18:15971:13469":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"4:458:2728":{"crate_id":4,"path":["digest","Update"],"kind":"trait"},"17:6142:25574":{"crate_id":17,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"7:6500:14856":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:5136:17704":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"21:112:2743":{"crate_id":21,"path":["crypto_common","Reset"],"kind":"trait"},"7:5179:14544":{"crate_id":7,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:42639:29913":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"18:15469:13332":{"crate_id":18,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"7:5341:14618":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"7:1539:14258":{"crate_id":7,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"7:6769:14978":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:22162:33435":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"6:9588:16031":{"crate_id":6,"path":["std","time","SystemTimeError"],"kind":"struct"},"23:9040:6030":{"crate_id":23,"path":["typenum","int","PInt"],"kind":"struct"},"1:8803:162":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:5506:215":{"crate_id":6,"path":["std","path","Path"],"kind":"struct"},"18:13819:12944":{"crate_id":18,"path":["object","elf","Ident"],"kind":"struct"},"21:127:6140":{"crate_id":21,"path":["crypto_common","InnerIvInit"],"kind":"trait"},"18:16403:13600":{"crate_id":18,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"23:1184:6166":{"crate_id":23,"path":["typenum","type_operators","Pow"],"kind":"trait"},"25:86:2385":{"crate_id":25,"path":["const_oid","traits","AssociatedOid"],"kind":"trait"},"1:39038:17663":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:40293:225":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:4850:11991":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"18:15048:13196":{"crate_id":18,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:6606:232":{"crate_id":6,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"7:1632:14325":{"crate_id":7,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:2818:13734":{"crate_id":17,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:32928:11991":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"18:16380:13596":{"crate_id":18,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"7:4964:14482":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"21:101:2560":{"crate_id":21,"path":["crypto_common","OutputSizeUser"],"kind":"trait"},"18:11715:16344":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:8289:15222":{"crate_id":6,"path":["std","fs","FileTimes"],"kind":"struct"},"7:4792:14379":{"crate_id":7,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"18:11053:16330":{"crate_id":18,"path":["object","read","any","SectionIterator"],"kind":"struct"},"10:435:24564":{"crate_id":10,"path":["miniz_oxide","MZError"],"kind":"enum"},"21:116:6137":{"crate_id":21,"path":["crypto_common","KeyInit"],"kind":"trait"},"6:9478:15299":{"crate_id":6,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"7:7317:15054":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:8812:17750":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"18:15611:13376":{"crate_id":18,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"18:11995:16355":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"18:10176:25638":{"crate_id":18,"path":["object","common","BinaryFormat"],"kind":"enum"},"5:3298:16006":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"18:15809:13424":{"crate_id":18,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:4767:233":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:41597:16150":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:22258:17852":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:14368:12400":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"25:236:150":{"crate_id":25,"path":["const_oid","error","Error"],"kind":"enum"},"7:6578:14907":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"12:1118:16503":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:41236:16124":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"17:6873:13821":{"crate_id":17,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:22962:17938":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"17:3046:24715":{"crate_id":17,"path":["gimli","common","SectionId"],"kind":"enum"},"1:22151:33432":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"18:11728:16345":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"18:12298:25756":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"17:7551:25583":{"crate_id":17,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:12624:2551":{"crate_id":1,"path":["core","slice","raw","from_ref"],"kind":"function"},"18:16613:12947":{"crate_id":18,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"7:5288:14601":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:40196:17665":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:974:16490":{"crate_id":6,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:6096:16409":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:31293:6106":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"10:226:6743":{"crate_id":10,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"7:4869:14439":{"crate_id":7,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:7369:13754":{"crate_id":17,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"8:31:24551":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"1:12945:6055":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:6197:16083":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:43001:238":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"6:5874:18578":{"crate_id":6,"path":["std","process","Termination"],"kind":"trait"},"1:3411:13883":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"21:35:2567":{"crate_id":21,"path":["crypto_common","hazmat","SerializableState"],"kind":"trait"},"18:15513:13363":{"crate_id":18,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"18:12146:15811":{"crate_id":18,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:7334:13863":{"crate_id":17,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"6:3590:12362":{"crate_id":6,"path":["std","io","Guard"],"kind":"struct"},"7:6505:14857":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:3139:12656":{"crate_id":17,"path":["gimli","arch","Arm"],"kind":"struct"},"17:6171:15860":{"crate_id":17,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:6850:15921":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:7635:2603":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:3469:16540":{"crate_id":6,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"18:10405:25645":{"crate_id":18,"path":["object","common","FileFlags"],"kind":"enum"},"6:12655:761":{"crate_id":6,"path":["std","f128"],"kind":"primitive"},"5:984:12448":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"21:110:6136":{"crate_id":21,"path":["crypto_common","InnerUser"],"kind":"trait"},"17:5707:25573":{"crate_id":17,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:6835:16450":{"crate_id":17,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"4:0:2382":{"crate_id":4,"path":["digest"],"kind":"module"},"4:324:6044":{"crate_id":4,"path":["digest","core_api","wrapper","CoreProxy"],"kind":"trait"},"1:41047:16116":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:2787:104":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"18:13771:12929":{"crate_id":18,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:10113:92":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"7:5230:14569":{"crate_id":7,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:2770:13732":{"crate_id":17,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:48052:6555":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"18:16329:13585":{"crate_id":18,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:33002:6443":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"6:11106:15303":{"crate_id":6,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"19:659:16305":{"crate_id":19,"path":["memchr","memmem","FindIter"],"kind":"struct"},"18:13120:16333":{"crate_id":18,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"6:8798:16594":{"crate_id":6,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"6:5933:232":{"crate_id":6,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"6:5697:16553":{"crate_id":6,"path":["std","process","ChildStdin"],"kind":"struct"},"18:13183:16401":{"crate_id":18,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"6:8434:16584":{"crate_id":6,"path":["std","io","error","Custom"],"kind":"struct"},"12:649:6077":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"22:99:6116":{"crate_id":22,"path":["hybrid_array","traits","AssocArraySize"],"kind":"trait"},"19:598:39264":{"crate_id":19,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"5:7774:257":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:22203:18198":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"7:5282:14598":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"11:44:14081":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"18:15198:13217":{"crate_id":18,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:44088:16175":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"23:2549:2572":{"crate_id":23,"path":["typenum","generated","consts","U40"],"kind":"type_alias"},"6:4436:16546":{"crate_id":6,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"5:7519:11919":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:1654:16006":{"crate_id":6,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"23:1272:6188":{"crate_id":23,"path":["typenum","type_operators","SquareRoot"],"kind":"trait"},"1:45500:16234":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"7:6486:14855":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:2493:11782":{"crate_id":6,"path":["std","fs","metadata"],"kind":"function"},"6:3937:16544":{"crate_id":6,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:40408:6061":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"6:1648:16005":{"crate_id":6,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:3317:121":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"18:14971:13176":{"crate_id":18,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"6:5222:18555":{"crate_id":6,"path":["std","panic","always_abort"],"kind":"function"},"6:11262:12426":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:42761:6077":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:45681:163":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"6:4965:18515":{"crate_id":6,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"6:9220:16600":{"crate_id":6,"path":["std","process","CommandArgs"],"kind":"struct"},"6:508:12378":{"crate_id":6,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"6:11151:16578":{"crate_id":6,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"18:10431:25646":{"crate_id":18,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:9337:18594":{"crate_id":6,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:41434:16132":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:3108:13765":{"crate_id":17,"path":["gimli","common","DwoId"],"kind":"struct"},"17:6950:15928":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"12:2374:6078":{"crate_id":12,"path":["hashbrown","table","IterMut"],"kind":"struct"},"23:9556:6059":{"crate_id":23,"path":["typenum","Less"],"kind":"struct"},"1:41116:16118":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:13476:17799":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"5:1411:16504":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:6062:13749":{"crate_id":17,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:43430:98":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"5:6513:12480":{"crate_id":5,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"6:9570:15300":{"crate_id":6,"path":["std","time","SystemTime"],"kind":"struct"},"1:10622:156":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:3042:18198":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"7:4937:14470":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:22685:33441":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"7:517:14193":{"crate_id":7,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"7:7439:15095":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:11256:12425":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:6406:15885":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"23:1211:6206":{"crate_id":23,"path":["typenum","type_operators","IsLess"],"kind":"trait"},"6:8720:15268":{"crate_id":6,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"1:13201:16192":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:41370:16676":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"7:7524:15151":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:6571:15912":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"12:1858:6077":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"6:3707:18476":{"crate_id":6,"path":["std","io","BufRead"],"kind":"trait"},"18:13996:12979":{"crate_id":18,"path":["object","elf","Rel64"],"kind":"struct"},"18:11842:16350":{"crate_id":18,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"7:1521:14247":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:43393:91":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:31704:208":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"7:8249:15199":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"18:16203:13545":{"crate_id":18,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"7:465:14160":{"crate_id":7,"path":["libc","unix","group"],"kind":"struct"},"10:490:14141":{"crate_id":10,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"16:288:24666":{"crate_id":16,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"18:14585:13104":{"crate_id":18,"path":["object","macho","DylibCommand"],"kind":"struct"},"5:2291:16060":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"22:31:12362":{"crate_id":22,"path":["hybrid_array","from_fn","Guard"],"kind":"struct"},"5:1247:37165":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:23584:15351":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"7:5395:14640":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"18:11743:16346":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:3782:6062":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"6:6088:16561":{"crate_id":6,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"5:299:2740":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:6678:16434":{"crate_id":17,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"7:6651:14937":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"18:10333:25643":{"crate_id":18,"path":["object","common","RelocationKind"],"kind":"enum"},"6:8617:16153":{"crate_id":6,"path":["std","io","Take"],"kind":"struct"},"18:14057:12990":{"crate_id":18,"path":["object","elf","Dyn32"],"kind":"struct"},"18:14190:13026":{"crate_id":18,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"5:4565:12464":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"5:4488:12464":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:43041:6077":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"18:14859:13161":{"crate_id":18,"path":["object","macho","TwolevelHint"],"kind":"struct"},"5:1366:15974":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:44579:6076":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"6:12028:16048":{"crate_id":6,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:2663:16532":{"crate_id":6,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:41970:12511":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:45760:30131":{"crate_id":1,"path":["core","task","wake","ExtData"],"kind":"enum"},"1:40388:228":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"18:13399:12892":{"crate_id":18,"path":["object","read","SymbolMapName"],"kind":"struct"},"12:1042:24644":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"7:7292:15036":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"18:13648:12909":{"crate_id":18,"path":["object","read","CompressedData"],"kind":"struct"},"5:5960:265":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:8264:13944":{"crate_id":17,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"24:110:6042":{"crate_id":24,"path":["block_buffer","BlockBuffer"],"kind":"struct"},"1:47662:15690":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"7:6543:14885":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"18:15868:13439":{"crate_id":18,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"18:16730:13685":{"crate_id":18,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"7:5664:14774":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"7:7984:15180":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:909:17478":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"1:3327:11855":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"17:7904:13926":{"crate_id":17,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:6887:13745":{"crate_id":17,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"4:415:2742":{"crate_id":4,"path":["digest","digest","DynDigest"],"kind":"trait"},"5:7723:17736":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:6379:12396":{"crate_id":6,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:10666:11981":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:42860:15589":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"18:13133:12871":{"crate_id":18,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"7:6472:14844":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"19:613:39265":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:45684:176":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:43832:15603":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"18:12242:15818":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"18:15659:13385":{"crate_id":18,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:45041:16115":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"21:104:6134":{"crate_id":21,"path":["crypto_common","KeySizeUser"],"kind":"trait"},"7:5387:14635":{"crate_id":7,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:8206:13750":{"crate_id":17,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"12:2440:12481":{"crate_id":12,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:40438:16674":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"7:6710:14957":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"1:44901:16191":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:32868:6047":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:23331:15333":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:41472:16137":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:8360:16011":{"crate_id":6,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:6471:12403":{"crate_id":6,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"18:14476:13089":{"crate_id":18,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"5:7619:11919":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:47138:15652":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"7:5295:14603":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:8055:16480":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:1785:238":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"18:13529:12898":{"crate_id":18,"path":["object","read","CodeView"],"kind":"struct"},"6:9386:16602":{"crate_id":6,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"7:6513:14862":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:1660:16007":{"crate_id":6,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"18:12409:12813":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"18:11151:16332":{"crate_id":18,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:6864:25579":{"crate_id":17,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:3364:11805":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"6:2032:813":{"crate_id":6,"path":["std","ffi"],"kind":"module"},"12:750:16003":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"7:7337:15060":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:12653:766":{"crate_id":6,"path":["std","f32"],"kind":"primitive"},"17:2722:13730":{"crate_id":17,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"7:5557:14723":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"7:7990:15182":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:12609:38130":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:3558:128":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:22384:15332":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:8220:15981":{"crate_id":17,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"18:16341:13587":{"crate_id":18,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:2548:13722":{"crate_id":17,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:41538:16145":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"21:120:6138":{"crate_id":21,"path":["crypto_common","KeyIvInit"],"kind":"trait"},"6:4591:16548":{"crate_id":6,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"6:8630:6087":{"crate_id":6,"path":["std","io","Split"],"kind":"struct"},"12:1652:12374":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"6:8700:18527":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"18:15448:13322":{"crate_id":18,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"12:2126:16500":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:33493:13882":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"18:14955:13175":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"18:11814:15806":{"crate_id":18,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:14426:164":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"5:1122:12440":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:1919:16524":{"crate_id":6,"path":["std","env","SplitPaths"],"kind":"struct"},"18:13592:12901":{"crate_id":18,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"18:16021:13480":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:12640:436":{"crate_id":6,"path":["std","bool"],"kind":"primitive"},"17:6694:16437":{"crate_id":17,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"5:40:12437":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"23:1202:6164":{"crate_id":23,"path":["typenum","type_operators","Min"],"kind":"trait"},"18:15963:13466":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"7:5186:14546":{"crate_id":7,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:8028:12419":{"crate_id":6,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"0:121:2423":{"crate_id":0,"path":["sha2","Sha384"],"kind":"type_alias"},"17:4954:13785":{"crate_id":17,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:4355:18523":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:699:16515":{"crate_id":6,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:41202:16123":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"6:8167:18406":{"crate_id":6,"path":["std","backtrace","RawFrame"],"kind":"enum"},"18:14373:13070":{"crate_id":18,"path":["object","macho","FatArch32"],"kind":"struct"},"6:4199:18502":{"crate_id":6,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:5222:13793":{"crate_id":17,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:2348:18441":{"crate_id":6,"path":["std","fs","read_to_string"],"kind":"function"},"1:23384:16103":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:5871:14985":{"crate_id":6,"path":["std","process","exit"],"kind":"function"},"5:3086:34313":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"23:2397:18198":{"crate_id":23,"path":["typenum","sealed","Sealed"],"kind":"trait"},"18:15928:13455":{"crate_id":18,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"18:14039:12989":{"crate_id":18,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:41573:12644":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"7:5512:14703":{"crate_id":7,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"1:41587:16149":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"18:15477:13333":{"crate_id":18,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"25:16:2754":{"crate_id":25,"path":["const_oid","arcs","Arcs"],"kind":"struct"},"1:40280:16113":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"7:7367:15082":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"23:9598:6028":{"crate_id":23,"path":["typenum","uint","UInt"],"kind":"struct"},"7:5550:14721":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:33035:278":{"crate_id":1,"path":["core","marker","UnsizedConstParamTy"],"kind":"trait"},"1:14054:16664":{"crate_id":1,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"17:3887:12661":{"crate_id":17,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:22141:33432":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"6:6779:16563":{"crate_id":6,"path":["std","sync","once","OnceState"],"kind":"struct"},"19:623:39266":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"15:164:24650":{"crate_id":15,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"7:6416:14818":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:46984:15636":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:0:585":{"crate_id":1,"path":["core"],"kind":"module"},"1:32946:258":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:4967:18516":{"crate_id":6,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:8569:15262":{"crate_id":6,"path":["std","io","util","Sink"],"kind":"struct"},"7:5165:14543":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"7:1643:14333":{"crate_id":7,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:43049:6078":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:22674:6063":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:46931:15633":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:5083:13788":{"crate_id":17,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:43579:11981":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"6:11575:15312":{"crate_id":6,"path":["std","sys","exit_guard","PThread"],"kind":"struct"},"6:11059:16032":{"crate_id":6,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"1:8393:134":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:9237:15288":{"crate_id":6,"path":["std","process","ExitStatus"],"kind":"struct"},"6:8739:16593":{"crate_id":6,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"7:532:14202":{"crate_id":7,"path":["libc","unix","iovec"],"kind":"struct"},"1:35121:13887":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"7:570:14221":{"crate_id":7,"path":["libc","unix","tms"],"kind":"struct"},"23:642:6190":{"crate_id":23,"path":["typenum","marker_traits","Integer"],"kind":"trait"},"7:5412:1279":{"crate_id":7,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"23:783:18194":{"crate_id":23,"path":["typenum","private","InternalMarker"],"kind":"trait"},"23:2621:2391":{"crate_id":23,"path":["typenum","generated","consts","U64"],"kind":"type_alias"},"6:9501:199":{"crate_id":6,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:8706:16592":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"18:11502:15800":{"crate_id":18,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"15:213:15994":{"crate_id":15,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:12647:1737":{"crate_id":6,"path":["std","slice"],"kind":"primitive"},"7:7430:15091":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:41495:16141":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:11993:6084":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"18:12737:16389":{"crate_id":18,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"23:998:18197":{"crate_id":23,"path":["typenum","private","PrivateRem"],"kind":"trait"},"17:5415:13799":{"crate_id":17,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:6203:25575":{"crate_id":17,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:7165:13847":{"crate_id":17,"path":["gimli","read","line","LineRow"],"kind":"struct"},"18:16755:13693":{"crate_id":18,"path":["object","xcoff","FunAux64"],"kind":"struct"},"1:3571:6109":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:14583:2044":{"crate_id":1,"path":["core","core_arch","arch","x86_64"],"kind":"module"},"17:7835:25584":{"crate_id":17,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:6586:13811":{"crate_id":17,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"5:3925:12481":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"19:670:16309":{"crate_id":19,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:8895:15282":{"crate_id":6,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:5253:13794":{"crate_id":17,"path":["gimli","constants","DwIdx"],"kind":"struct"},"22:5309:6104":{"crate_id":22,"path":["hybrid_array","iter","TryFromIteratorError"],"kind":"struct"},"7:5301:14606":{"crate_id":7,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"7:5217:14565":{"crate_id":7,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:12062:6090":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"21:107:6135":{"crate_id":21,"path":["crypto_common","IvSizeUser"],"kind":"trait"},"0:120:2421":{"crate_id":0,"path":["sha2","Sha512_256"],"kind":"type_alias"},"18:16250:13557":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"12:2354:6077":{"crate_id":12,"path":["hashbrown","table","Iter"],"kind":"struct"},"1:13452:17793":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"18:12008:16356":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"18:11540:12789":{"crate_id":18,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"1:41980:15569":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"5:1885:12481":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"18:15624:13381":{"crate_id":18,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:11214:12514":{"crate_id":1,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"18:15746:13409":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:10295:32966":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"12:813:16492":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"18:16525:12943":{"crate_id":18,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"12:2540:16070":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"18:15861:13438":{"crate_id":18,"path":["object","pe","ImageImportByName"],"kind":"struct"},"18:16219:13549":{"crate_id":18,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"11:0:2718":{"crate_id":11,"path":["adler"],"kind":"module"},"18:13079:16400":{"crate_id":18,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"17:2504:13720":{"crate_id":17,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"19:581:11871":{"crate_id":19,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"23:654:6162":{"crate_id":23,"path":["typenum","marker_traits","PowerOfTwo"],"kind":"trait"},"1:41148:16115":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:7935:15975":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:3693:13770":{"crate_id":17,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:34256:17653":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"18:11576:12790":{"crate_id":18,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"6:11064:16034":{"crate_id":6,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"1:3075:272":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"4:480:2734":{"crate_id":4,"path":["digest","VariableOutput"],"kind":"trait"},"5:3262:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"18:16650:13665":{"crate_id":18,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"4:640:2561":{"crate_id":4,"path":["digest","core_api","TruncSide"],"kind":"enum"},"5:7762:12473":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"26:0:2426":{"crate_id":26,"path":["cfg_if"],"kind":"module"},"6:12614:18407":{"crate_id":6,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:7857:17743":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:2424:11810":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"12:832:16495":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"0:0:2071":{"crate_id":0,"path":["sha2"],"kind":"module"},"1:2687:11794":{"crate_id":1,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"25:88:2755":{"crate_id":25,"path":["const_oid","traits","DynAssociatedOid"],"kind":"trait"},"7:7553:15167":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:8654:18495":{"crate_id":6,"path":["std","net","Shutdown"],"kind":"enum"},"18:15985:13471":{"crate_id":18,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:595:12380":{"crate_id":6,"path":["std","thread","Packet"],"kind":"struct"},"1:42673:16021":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"21:114:2555":{"crate_id":21,"path":["crypto_common","AlgorithmName"],"kind":"trait"},"6:2750:12384":{"crate_id":6,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:13410:2756":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"25:271:2386":{"crate_id":25,"path":["const_oid","ObjectIdentifier"],"kind":"struct"},"5:7074:12477":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"18:485:16312":{"crate_id":18,"path":["object","read","any","Segment"],"kind":"struct"},"18:15144:13206":{"crate_id":18,"path":["object","macho","Nlist32"],"kind":"struct"},"1:34775:17658":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"18:14870:13162":{"crate_id":18,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"5:1227:34312":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:23468:29884":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"6:6954:16567":{"crate_id":6,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"17:7966:15979":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"12:292:15997":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"6:9397:16604":{"crate_id":6,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"6:9271:6077":{"crate_id":6,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:2226:11808":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"5:4322:12362":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:45706:219":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"17:5058:13787":{"crate_id":17,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:7502:12417":{"crate_id":6,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"18:14665:13115":{"crate_id":18,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"4:601:2394":{"crate_id":4,"path":["digest","core_api","ct_variable","CtVariableCoreWrapper"],"kind":"struct"},"17:4692:13778":{"crate_id":17,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:45272:16214":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:14345:119":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"17:7987:15980":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"18:13000:25782":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"7:6802:14987":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"18:10821:16327":{"crate_id":18,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"12:389:12372":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"18:12065:16360":{"crate_id":18,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"6:12659:933":{"crate_id":6,"path":["std","i64"],"kind":"primitive"},"6:7251:18598":{"crate_id":6,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:1132:16504":{"crate_id":6,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:1944:16526":{"crate_id":6,"path":["std","env","ArgsOs"],"kind":"struct"},"7:1696:14361":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:22789:17854":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:4134:18498":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"7:5611:14752":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"17:8148:13762":{"crate_id":17,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"7:5366:14624":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:45371:16224":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:46969:15635":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:23672:15359":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"12:1136:16504":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"6:11179:37387":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"18:15569:13369":{"crate_id":18,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"12:1083:16502":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"12:983:15974":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"5:3079:16056":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"18:16177:13537":{"crate_id":18,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"6:3640:16542":{"crate_id":6,"path":["std","io","IoSliceMut"],"kind":"struct"},"6:1123:16500":{"crate_id":6,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:43920:11989":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:45180:16211":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"7:1569:14277":{"crate_id":7,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"18:14650:13112":{"crate_id":18,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"7:7424:15089":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:3331:38241":{"crate_id":6,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"7:4970:14484":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:3832:13771":{"crate_id":17,"path":["gimli","arch","X86"],"kind":"struct"},"19:689:15789":{"crate_id":19,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"18:13553:25654":{"crate_id":18,"path":["object","read","RelocationTarget"],"kind":"enum"},"7:8243:15198":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:42936:222":{"crate_id":1,"path":["core","range","Range"],"kind":"struct"},"7:1514:14244":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:12022:16047":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:11155:16623":{"crate_id":6,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"18:11485:16337":{"crate_id":18,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:42661:16170":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"14:110:39225":{"crate_id":14,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"18:16058:13488":{"crate_id":18,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:8595:16485":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"7:5503:14702":{"crate_id":7,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"6:10876:16535":{"crate_id":6,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"1:33034:118":{"crate_id":1,"path":["core","marker","ConstParamTy_"],"kind":"trait"},"6:8688:16021":{"crate_id":6,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:23051:17940":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:6300:15874":{"crate_id":17,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:3872:18496":{"crate_id":6,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:42789:15587":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"7:7445:15096":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:45512:15306":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"7:6360:14778":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"18:10830:12652":{"crate_id":18,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"1:23433:29882":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:2413:24686":{"crate_id":17,"path":["gimli","common","Format"],"kind":"enum"},"1:41932:16157":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"6:2534:18456":{"crate_id":6,"path":["std","fs","exists"],"kind":"function"},"18:14624:13108":{"crate_id":18,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:4517:16547":{"crate_id":6,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:23617:15354":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"17:5280:13795":{"crate_id":17,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:4838:18502":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"23:1131:18204":{"crate_id":23,"path":["typenum","private","IsGreaterOrEqualPrivate"],"kind":"trait"},"17:7055:15937":{"crate_id":17,"path":["gimli","read","line","LineRows"],"kind":"struct"},"12:763:16004":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"1:47159:15653":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"18:14165:13022":{"crate_id":18,"path":["object","elf","NoteHeader64"],"kind":"struct"},"7:6670:14941":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"7:4984:14492":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:8352:16582":{"crate_id":6,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"18:15389:13270":{"crate_id":18,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"6:11977:16629":{"crate_id":6,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"19:589:12634":{"crate_id":19,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:34323:17651":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"12:1579:16507":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"5:7273:12500":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"23:1111:18203":{"crate_id":23,"path":["typenum","private","IsNotEqualPrivate"],"kind":"trait"},"1:44127:16176":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:46952:15634":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"7:6390:14803":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:8102:16574":{"crate_id":6,"path":["std","thread","Builder"],"kind":"struct"},"18:15844:13430":{"crate_id":18,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"18:13304:25652":{"crate_id":18,"path":["object","read","ObjectKind"],"kind":"enum"},"1:46885:15630":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"15:7:16486":{"crate_id":15,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"18:14152:13018":{"crate_id":18,"path":["object","elf","NoteHeader32"],"kind":"struct"},"7:5420:14652":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"6:982:16492":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:43132:97":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"7:7284:15031":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:12649:1861":{"crate_id":6,"path":["std","tuple"],"kind":"primitive"},"7:5224:14566":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"19:573:12626":{"crate_id":19,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"18:16828:13705":{"crate_id":18,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"1:47935:15726":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"18:12686:12852":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:43815:11806":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"6:11437:15307":{"crate_id":6,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"6:1632:6077":{"crate_id":6,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:5947:16012":{"crate_id":6,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"7:5630:14761":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"23:615:6174":{"crate_id":23,"path":["typenum","marker_traits","Bit"],"kind":"trait"},"6:10925:12423":{"crate_id":6,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"17:7728:15587":{"crate_id":17,"path":["gimli","read","op","Location"],"kind":"enum"},"5:7559:16068":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"1:3079:271":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"8:78:24558":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"6:940:16004":{"crate_id":6,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:13529:17807":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"23:1051:18200":{"crate_id":23,"path":["typenum","private","IsEqualPrivate"],"kind":"trait"},"12:357:12370":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"7:5334:14617":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"18:11939:12805":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:650:18401":{"crate_id":6,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:45348:16216":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"6:12646:351":{"crate_id":6,"path":["std","array"],"kind":"primitive"},"4:363:2559":{"crate_id":4,"path":["digest","core_api","BufferKindUser"],"kind":"trait"},"5:724:16635":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:6995:15929":{"crate_id":17,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"19:491:15782":{"crate_id":19,"path":["memchr","cow","Imp"],"kind":"struct"},"1:2877:147":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:9483:16661":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"18:15995:13474":{"crate_id":18,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"23:2513:2388":{"crate_id":23,"path":["typenum","generated","consts","U28"],"kind":"type_alias"},"1:41416:16052":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:4150:13773":{"crate_id":17,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"5:5289:12472":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"18:14710:13120":{"crate_id":18,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:8280:17751":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:44590:6067":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"18:13836:12947":{"crate_id":18,"path":["object","elf","SectionHeader32"],"kind":"struct"},"18:12944:12861":{"crate_id":18,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"5:6169:18292":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:9596:16662":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:45565:17824":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"23:1276:6170":{"crate_id":23,"path":["typenum","type_operators","Gcd"],"kind":"trait"},"18:11161:39258":{"crate_id":18,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:43206:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"18:14611:13107":{"crate_id":18,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:12975:17800":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:8578:15263":{"crate_id":6,"path":["std","io","IoSlice"],"kind":"struct"},"17:6237:13806":{"crate_id":17,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"5:778:264":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:919:11919":{"crate_id":6,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:23361:15334":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:11594:16628":{"crate_id":6,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"18:11063:39256":{"crate_id":18,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:6810:16085":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"6:4185:18500":{"crate_id":6,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"18:16573:13651":{"crate_id":18,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"19:735:29851":{"crate_id":19,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:6026:13744":{"crate_id":17,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"18:2243:16316":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:6638:16418":{"crate_id":17,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"17:8093:16481":{"crate_id":17,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:9437:16610":{"crate_id":6,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"18:16766:13694":{"crate_id":18,"path":["object","xcoff","ExpAux"],"kind":"struct"},"17:7459:16452":{"crate_id":17,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:896:6077":{"crate_id":6,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:3124:24716":{"crate_id":17,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:10664:38093":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"17:2858:13736":{"crate_id":17,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"7:7562:15170":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:10604:11978":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:7004:16090":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:3596:154":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"5:787:122":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:4171:18499":{"crate_id":6,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:7398:39244":{"crate_id":17,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:41425:16131":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:4513:111":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"6:8277:16579":{"crate_id":6,"path":["std","fs","ReadDir"],"kind":"struct"},"23:1190:6161":{"crate_id":23,"path":["typenum","type_operators","Cmp"],"kind":"trait"},"1:10603:238":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"1:43072:236":{"crate_id":1,"path":["core","sync","atomic","Ordering","Relaxed"],"kind":"variant"},"5:7738:16074":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"12:1866:12457":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:7946:13757":{"crate_id":17,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"18:16684:13672":{"crate_id":18,"path":["object","xcoff","FileAux32"],"kind":"struct"},"6:8910:18572":{"crate_id":6,"path":["std","path","Component"],"kind":"enum"},"15:186:24654":{"crate_id":15,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"18:14776:13145":{"crate_id":18,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"18:14746:13126":{"crate_id":18,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"18:12357:16375":{"crate_id":18,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"18:12621:12850":{"crate_id":18,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"12:2297:16499":{"crate_id":12,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:11800:6087":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"5:3448:12481":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:3158:150":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"12:2414:12457":{"crate_id":12,"path":["hashbrown","table","Drain"],"kind":"struct"},"19:698:15790":{"crate_id":19,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"18:3877:16323":{"crate_id":18,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"6:562:18400":{"crate_id":6,"path":["std","thread","thread_name_string","ThreadNameString"],"kind":"struct"},"1:43874:74":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"6:9425:16608":{"crate_id":6,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"19:680:15786":{"crate_id":19,"path":["memchr","memmem","Finder"],"kind":"struct"},"23:828:18221":{"crate_id":23,"path":["typenum","private","PrivateSub"],"kind":"trait"},"1:42555:15582":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"18:16744:13688":{"crate_id":18,"path":["object","xcoff","FunAux32"],"kind":"struct"},"5:928:12446":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:8720:150":{"crate_id":17,"path":["gimli","read","Error"],"kind":"enum"},"6:9432:16609":{"crate_id":6,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:901:16310":{"crate_id":17,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"1:12034:6089":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:32945:251":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:42926:16174":{"crate_id":1,"path":["core","range","iter","IterRangeFrom"],"kind":"struct"},"10:345:24579":{"crate_id":10,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"6:988:18414":{"crate_id":6,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"18:15115:13203":{"crate_id":18,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"12:1001:16499":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"18:13909:12964":{"crate_id":18,"path":["object","elf","Sym32"],"kind":"struct"},"18:12562:16380":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:12618:6096":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"19:80:29842":{"crate_id":19,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"7:8266:15204":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"15:201:18289":{"crate_id":15,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:2235:11807":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:8025:13928":{"crate_id":17,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:6779:13817":{"crate_id":17,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"18:12214:15816":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"12:2394:11919":{"crate_id":12,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"7:4842:14416":{"crate_id":7,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:3069:175":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:3072:157":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"4:365:6039":{"crate_id":4,"path":["digest","core_api","FixedOutputCore"],"kind":"trait"},"12:2340:16510":{"crate_id":12,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"6:10800:12422":{"crate_id":6,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"12:2507:14074":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:2618:13725":{"crate_id":17,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"18:2394:25712":{"crate_id":18,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:42527:17755":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:48072:11773":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:7023:245":{"crate_id":6,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:8439:18489":{"crate_id":6,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:8695:16022":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:43565:11980":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:3593:153":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"12:1027:16500":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"5:5564:18284":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"7:1711:14368":{"crate_id":7,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:14388:12518":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"5:3712:6078":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"5:2810:15323":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"4:464:2730":{"crate_id":4,"path":["digest","FixedOutputReset"],"kind":"trait"},"17:0:2724":{"crate_id":17,"path":["gimli"],"kind":"module"},"5:214:12439":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"18:10880:12777":{"crate_id":18,"path":["object","read","util","StringTable"],"kind":"struct"},"18:11868:12790":{"crate_id":18,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:46849:15624":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"18:13465:12894":{"crate_id":18,"path":["object","read","ObjectMapFile"],"kind":"struct"},"18:10132:25636":{"crate_id":18,"path":["object","common","SubArchitecture"],"kind":"enum"},"7:5069:14536":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:10882:16539":{"crate_id":6,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"1:43844:13958":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"7:4921:14465":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"12:820:18414":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:6623:15915":{"crate_id":17,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:6419:15846":{"crate_id":17,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"5:7668:16070":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"14:229:14073":{"crate_id":14,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"19:521:29853":{"crate_id":19,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:9506:12408":{"crate_id":6,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"1:46832:15623":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"5:5414:12474":{"crate_id":5,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"7:5255:14581":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"7:485:14171":{"crate_id":7,"path":["libc","unix","timespec"],"kind":"struct"},"1:3066:77":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:23395:29880":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"23:653:6191":{"crate_id":23,"path":["typenum","marker_traits","TypeArray"],"kind":"trait"},"7:4881:14442":{"crate_id":7,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:32935:16112":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"6:2811:16534":{"crate_id":6,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:8543:15989":{"crate_id":17,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"24:0:2553":{"crate_id":24,"path":["block_buffer"],"kind":"module"},"12:344:39215":{"crate_id":12,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"5:4552:12362":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"17:4927:13784":{"crate_id":17,"path":["gimli","constants","DwAccess"],"kind":"struct"},"11:36:14080":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"1:10883:169":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"18:14558:13099":{"crate_id":18,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"6:7983:16572":{"crate_id":6,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"18:13856:12957":{"crate_id":18,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:45676:15614":{"crate_id":1,"path":["core","future","async_drop","Noop"],"kind":"struct"},"17:3306:13710":{"crate_id":17,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:10875:165":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"0:119:2419":{"crate_id":0,"path":["sha2","Sha512_224"],"kind":"type_alias"},"1:45554:16237":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:46998:15637":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"4:682:2745":{"crate_id":4,"path":["digest","hashreader","HashReader"],"kind":"struct"},"18:11423:25663":{"crate_id":18,"path":["object","read","archive","Members"],"kind":"enum"},"18:14384:13073":{"crate_id":18,"path":["object","macho","FatArch64"],"kind":"struct"},"6:4963:18513":{"crate_id":6,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"5:3699:6077":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:7220:15943":{"crate_id":17,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:40348:227":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"6:4193:18501":{"crate_id":6,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:45492:16232":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"18:11690:12794":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:44337:6065":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"18:13959:12973":{"crate_id":18,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:7806:32410":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"18:12979:12864":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"4:488:2735":{"crate_id":4,"path":["digest","VariableOutputReset"],"kind":"trait"},"12:2519:14076":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"7:1551:14267":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:999:16495":{"crate_id":6,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"7:7494:15134":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:6558:12404":{"crate_id":6,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"12:1703:168":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"18:3743:16322":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"18:12373:16377":{"crate_id":18,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"12:1878:16005":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:4925:18528":{"crate_id":6,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"25:0:2384":{"crate_id":25,"path":["const_oid"],"kind":"module"},"17:4900:13783":{"crate_id":17,"path":["gimli","constants","DwEnd"],"kind":"struct"},"7:6702:14956":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"1:3401:6112":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:48209:11781":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"7:7390:15083":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"5:6030:12457":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"5:5515:12440":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:4413:12362":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"6:1885:16523":{"crate_id":6,"path":["std","env","VarsOs"],"kind":"struct"},"1:45238:16213":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:33003:11859":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"19:113:29844":{"crate_id":19,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"18:12103:12809":{"crate_id":18,"path":["object","read","elf","version","Version"],"kind":"struct"},"7:523:14196":{"crate_id":7,"path":["libc","unix","hostent"],"kind":"struct"},"18:11346:16335":{"crate_id":18,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:4:1292":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:45530:135":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"18:13066:16399":{"crate_id":18,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"7:5044:14523":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:44096:12226":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"18:2422:16317":{"crate_id":18,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:3012:24714":{"crate_id":17,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"19:563:12633":{"crate_id":19,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:1867:722":{"crate_id":6,"path":["std","env"],"kind":"module"},"1:4489:16651":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"5:6700:12457":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:6669:198":{"crate_id":6,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"18:11356:39261":{"crate_id":18,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"18:15062:13197":{"crate_id":18,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:2568:2648":{"crate_id":6,"path":["std","io"],"kind":"module"},"17:8295:15982":{"crate_id":17,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"23:9535:6058":{"crate_id":23,"path":["typenum","Greater"],"kind":"struct"},"19:718:12647":{"crate_id":19,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"23:613:207":{"crate_id":23,"path":["typenum","marker_traits","Ord"],"kind":"trait"},"1:22276:15332":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:7302:13859":{"crate_id":17,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"24:176:150":{"crate_id":24,"path":["block_buffer","Error"],"kind":"struct"},"1:45323:16215":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"7:1489:14234":{"crate_id":7,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"5:6826:11919":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:8011:13760":{"crate_id":17,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"18:11200:12800":{"crate_id":18,"path":["object","read","any","SymbolTable"],"kind":"struct"},"18:12344:15822":{"crate_id":18,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"6:8714:16589":{"crate_id":6,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:2964:13741":{"crate_id":17,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:8087:18198":{"crate_id":6,"path":["std","sealed","Sealed"],"kind":"trait"},"6:436:197":{"crate_id":6,"path":["std","thread","local","LocalKey"],"kind":"struct"},"7:1690:14360":{"crate_id":7,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:34948:17659":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:12654:782":{"crate_id":6,"path":["std","f64"],"kind":"primitive"},"1:23628:15355":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"1:41332:16675":{"crate_id":1,"path":["core","ffi","va_list","VaList"],"kind":"struct"},"7:5521:14704":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:5142:13790":{"crate_id":17,"path":["gimli","constants","DwCc"],"kind":"struct"},"23:785:18225":{"crate_id":23,"path":["typenum","private","Trim"],"kind":"trait"},"7:6719:14960":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"7:1675:14351":{"crate_id":7,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"18:16777:13695":{"crate_id":18,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"1:44703:16180":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"7:6398:14805":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"15:219:14068":{"crate_id":15,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:45117:17813":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:47479:15683":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"18:15174:12862":{"crate_id":18,"path":["object","macho","Relocation"],"kind":"struct"},"17:544:15844":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:45747:15615":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:5576:133":{"crate_id":6,"path":["std","path","Display"],"kind":"struct"},"6:7820:38129":{"crate_id":6,"path":["std","panicking","Hook"],"kind":"enum"},"18:15353:13239":{"crate_id":18,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"16:394:24677":{"crate_id":16,"path":["addr2line","DebugFile"],"kind":"enum"},"17:5377:13798":{"crate_id":17,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:8633:25588":{"crate_id":17,"path":["gimli","read","value","ValueType"],"kind":"enum"},"7:7539:15158":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:31061:17425":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"17:7072:25580":{"crate_id":17,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"18:14021:12981":{"crate_id":18,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"7:6737:14968":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"17:8500:13982":{"crate_id":17,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:34602:17657":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:44937:16193":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"18:12749:16390":{"crate_id":18,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:23108:17934":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"1:47176:15654":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:9287:11919":{"crate_id":6,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"6:2736:12386":{"crate_id":6,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"6:8950:16023":{"crate_id":6,"path":["std","path","Components"],"kind":"struct"},"6:8607:16129":{"crate_id":6,"path":["std","io","Chain"],"kind":"struct"},"18:13030:12866":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:6335:15876":{"crate_id":17,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"6:5803:16556":{"crate_id":6,"path":["std","process","Stdio"],"kind":"struct"},"1:23136:17935":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"18:12229:15817":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"5:7797:16649":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:6967:13746":{"crate_id":17,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:48156:11778":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:2820:11851":{"crate_id":1,"path":["core","clone","CloneToUninit"],"kind":"trait"},"7:4896:14449":{"crate_id":7,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"18:16658:13666":{"crate_id":18,"path":["object","xcoff","Symbol32"],"kind":"struct"},"18:15088:13199":{"crate_id":18,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"18:12201:15815":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"1:4501:16652":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:8623:15993":{"crate_id":17,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:7518:15972":{"crate_id":17,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:47508:15684":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:8107:15221":{"crate_id":6,"path":["std","thread","ThreadId"],"kind":"struct"},"1:2129:11846":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"6:8092:15220":{"crate_id":6,"path":["std","thread","local","AccessError"],"kind":"struct"},"18:14350:13066":{"crate_id":18,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"1:2159:1397":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"7:6590:14912":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:7575:15296":{"crate_id":17,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:43057:11919":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"6:8960:6077":{"crate_id":6,"path":["std","path","Iter"],"kind":"struct"},"6:909:6078":{"crate_id":6,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"18:14883:13164":{"crate_id":18,"path":["object","macho","UuidCommand"],"kind":"struct"},"18:13247:150":{"crate_id":18,"path":["object","read","Error"],"kind":"struct"},"1:22652:17858":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"1:46864:15625":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"7:5640:14762":{"crate_id":7,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"1:10662:11979":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"12:2099:15974":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"6:2509:18448":{"crate_id":6,"path":["std","fs","read_link"],"kind":"function"},"6:12641:1208":{"crate_id":6,"path":["std","never"],"kind":"primitive"},"4:620:2393":{"crate_id":4,"path":["digest","core_api","wrapper","CoreWrapper"],"kind":"struct"},"1:3481:13884":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"6:12077:12430":{"crate_id":6,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:12667:1966":{"crate_id":6,"path":["std","usize"],"kind":"primitive"},"1:41988:16162":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:2511:18449":{"crate_id":6,"path":["std","fs","canonicalize"],"kind":"function"},"25:178:12610":{"crate_id":25,"path":["const_oid","arcs","RootArcs"],"kind":"struct"},"6:9373:15295":{"crate_id":6,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:4848:15075":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"7:5019:14511":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"18:11112:39257":{"crate_id":18,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:894:16408":{"crate_id":17,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"7:6610:14920":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:3719:223":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"18:16301:13576":{"crate_id":18,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"12:1898:16008":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"6:8824:15279":{"crate_id":6,"path":["std","path","Prefix"],"kind":"enum"},"1:11751:6077":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"6:8173:18429":{"crate_id":6,"path":["std","env","VarError"],"kind":"enum"},"7:5529:14709":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:48107:11775":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"5:3291:6077":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:42511:15575":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:41243:16125":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"struct"},"18:14081:12994":{"crate_id":18,"path":["object","elf","Versym"],"kind":"struct"},"18:14730:13121":{"crate_id":18,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:8334:6442":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:23221:16097":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:5647:13801":{"crate_id":17,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:6820:25578":{"crate_id":17,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"16:306:24667":{"crate_id":16,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:47739:15722":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"18:13673:12910":{"crate_id":18,"path":["object","archive","Header"],"kind":"struct"},"6:8282:16015":{"crate_id":6,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:47077:15649":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"5:7627:11919":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:40232:17667":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"5:7108:12493":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"18:14337:13064":{"crate_id":18,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"5:7549:12451":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:11196:15290":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"17:155:12365":{"crate_id":17,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:4842:13781":{"crate_id":17,"path":["gimli","constants","DwLle"],"kind":"struct"},"6:927:16003":{"crate_id":6,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"6:789:166":{"crate_id":6,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"7:473:14165":{"crate_id":7,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:10672:11983":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"7:5604:14749":{"crate_id":7,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"6:12625:37406":{"crate_id":6,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:8637:16195":{"crate_id":6,"path":["std","io","Lines"],"kind":"struct"},"7:5450:14673":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"6:4384:18526":{"crate_id":6,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:22:845":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"18:16700:13677":{"crate_id":18,"path":["object","xcoff","FileAux64"],"kind":"struct"},"17:8040:39250":{"crate_id":17,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"7:6452:14831":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"5:1520:6077":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:10668:11982":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"5:3080:34315":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:3424:16537":{"crate_id":6,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:4764:13779":{"crate_id":17,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:11383:15289":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:33032:11858":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"18:10455:25647":{"crate_id":18,"path":["object","common","SectionFlags"],"kind":"enum"},"1:43317:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"4:467:2731":{"crate_id":4,"path":["digest","XofReader"],"kind":"trait"},"1:44135:16177":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:6841:15920":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:44633:6079":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"18:2453:16320":{"crate_id":18,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"18:16230:13554":{"crate_id":18,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:22187:33439":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"12:808:16505":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"5:1483:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"4:367:6040":{"crate_id":4,"path":["digest","core_api","ExtendableOutputCore"],"kind":"trait"},"25:11:72":{"crate_id":25,"path":["const_oid","arcs","Arc"],"kind":"type_alias"},"1:45781:192":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"18:10898:151":{"crate_id":18,"path":["object","read","any","File"],"kind":"enum"},"1:10660:133":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"23:814:18213":{"crate_id":23,"path":["typenum","private","PrivateAnd"],"kind":"trait"},"7:538:14205":{"crate_id":7,"path":["libc","unix","pollfd"],"kind":"struct"},"6:9250:15289":{"crate_id":6,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:22787:18198":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"5:3090:34314":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"18:10369:25644":{"crate_id":18,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:4771:16654":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"6:6296:232":{"crate_id":6,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"18:10524:25649":{"crate_id":18,"path":["object","common","RelocationFlags"],"kind":"enum"},"1:23000:17939":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"18:14365:13068":{"crate_id":18,"path":["object","macho","FatHeader"],"kind":"struct"},"2:2062:15328":{"crate_id":2,"path":["compiler_builtins","int","big","u256"],"kind":"struct"},"1:6310:16084":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:6911:15925":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"18:13195:16402":{"crate_id":18,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"1:47307:15661":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:41939:16158":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"6:7409:37418":{"crate_id":6,"path":["std","sys","backtrace","print","DisplayBacktrace"],"kind":"struct"},"27:0:2427":{"crate_id":27,"path":["cpufeatures"],"kind":"module"},"1:42829:17762":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"18:12447:25757":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"7:1625:14321":{"crate_id":7,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"12:663:6078":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"18:11438:12784":{"crate_id":18,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:45337:17814":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:33705:13880":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:23276:16098":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:7916:37423":{"crate_id":6,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"18:13231:16405":{"crate_id":18,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"6:11420:15300":{"crate_id":6,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"1:38928:17661":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"5:888:12443":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"5:1573:16003":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:7916:16473":{"crate_id":17,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"5:7679:18263":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"18:15733:13403":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"18:12825:12854":{"crate_id":18,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"24:101:2584":{"crate_id":24,"path":["block_buffer","BufferKind"],"kind":"trait"},"1:22264:17855":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:2433:24713":{"crate_id":17,"path":["gimli","common","Vendor"],"kind":"enum"},"12:423:39218":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:15:2691":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:13239:6091":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"6:2099:209":{"crate_id":6,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:707:18403":{"crate_id":6,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"12:718:16491":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"6:12666:996":{"crate_id":6,"path":["std","isize"],"kind":"primitive"},"6:8153:18405":{"crate_id":6,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"4:439:2741":{"crate_id":4,"path":["digest","digest","DynDigestWithOid"],"kind":"trait"},"1:23409:15338":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"6:12663:1890":{"crate_id":6,"path":["std","u32"],"kind":"primitive"},"1:22164:33437":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"18:12711:16384":{"crate_id":18,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"6:12642:492":{"crate_id":6,"path":["std","char"],"kind":"primitive"},"18:680:12756":{"crate_id":18,"path":["object","read","any","Symbol"],"kind":"struct"},"1:10440:11996":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"4:491:2736":{"crate_id":4,"path":["digest","CustomizedInit"],"kind":"trait"},"18:14307:13055":{"crate_id":18,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"7:4947:14476":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:23141:17933":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1:3822:32483":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:4852:15079":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"22:96:6115":{"crate_id":22,"path":["hybrid_array","traits","ArraySize"],"kind":"trait"},"6:2341:16531":{"crate_id":6,"path":["std","fs","DirEntry"],"kind":"struct"}},"external_crates":{"26":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"23":{"name":"typenum","html_root_url":"https://docs.rs/typenum/1.17.0/"},"20":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"const_oid","html_root_url":null},"22":{"name":"hybrid_array","html_root_url":null},"19":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"digest","html_root_url":null},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"27":{"name":"cpufeatures","html_root_url":null},"24":{"name":"block_buffer","html_root_url":null},"21":{"name":"crypto_common","html_root_url":null},"18":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"6":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":33}