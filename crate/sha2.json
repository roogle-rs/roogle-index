{"root":"0:0:1754","crate_version":"0.10.7","includes_private":false,"index":{"1:12236:832":{"id":"1:12236:832","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"6:12033:427"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:682:15042":{"id":"5:682:15042","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:12238:32292":{"id":"1:12238:32292","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5517:33009":{"id":"5:5517:33009","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12326:32317":{"id":"1:12326:32317","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12257:32298":{"id":"1:12257:32298","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"6:12039:1441","crate::ops::IndexMut":"1:3056:16492","str::slice_unchecked":"1:12256:32297"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12237:11189":{"id":"1:12237:11189","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12324:32316":{"id":"1:12324:32316","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12294:32307":{"id":"1:12294:32307","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:11937:16630","str::split":"1:12285:32305","prim@char":"6:12033:427","`DoubleEndedIterator`":"1:7388:121","str::rsplit_terminator":"1:12297:32308"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:43766:15168","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11942:15617","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:135":{"id":"0:135","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[89,9],"end":[89,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2269:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1729","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:136:431"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:75:1902":{"id":"0:75:1902","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[134,4],"end":[142,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Buffer","id":"4:328:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Output","id":"22:16:188","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46":{"id":"0:46","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[25,0],"end":[27,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"22:22:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:47:1892"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2812:5758-0:132:1729":{"id":"a:1:2812:5758-0:132:1729","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2812:5758","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1729","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[113,0],"end":[115,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"22:33:1878","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1729","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:71:1896"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:77":{"id":"0:77","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[145,0],"end":[150,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"22:46:1873","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1729","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:78:1915"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:56:960":{"id":"0:56:960","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[49,4],"end":[57,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["output_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:41899:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"InvalidOutputSize","id":"4:522:1886","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[95,0],"end":[95,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:357:1885","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1729","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12254:15875":{"id":"1:12254:15875","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12267:28332":{"id":"1:12267:28332","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:44008:15181","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12344:32325":{"id":"1:12344:32325","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:12033:427","self::pattern":"1:11937:16630"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11942:15617","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11942:15617","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11957:16636","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12266:32302":{"id":"1:12266:32302","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:43980:15178","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3391-0:132:1729":{"id":"b:1:3391-0:132:1729","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2762:5757","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3389:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1729","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3393:1535"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12328:32318":{"id":"1:12328:32318","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2561-0:127:1728":{"id":"b:1:2561-0:127:1728","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2520:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2564:128","1:2565:1521"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:8471:16598-0:132:1729":{"id":"a:1:8471:16598-0:132:1729","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8471:16598","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1729","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2256-0:132:1729":{"id":"b:1:2256-0:132:1729","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2762:5757","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2250:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1729","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2258:27853"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:71:1896":{"id":"0:71:1896","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[114,4],"end":[114,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"24:6316:5316","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5316","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5316","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5316","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5316","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5316","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5316","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"24:6363:5317","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"24:5724:5321","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5320","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5320","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5320","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5320","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5320","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5320","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"1:12271:32303":{"id":"1:12271:32303","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"6:12033:427","self::pattern":"1:11937:16630"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11942:15617","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12300:32309":{"id":"1:12300:32309","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"6:12033:427","self::pattern":"1:11937:16630","str::rsplitn":"1:12303:32310"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:43820:5368","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11942:15617","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12309:32312":{"id":"1:12309:32312","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41755:183","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11942:15617","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11942:15617","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11957:16636","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12330:32319":{"id":"1:12330:32319","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12362:16513":{"id":"1:12362:16513","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4524:16513"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:44024:15095","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2772:231-0:127:1728":{"id":"a:1:2772:231-0:127:1728","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2772:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:2255:1949":{"id":"1:2255:1949","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51:1894":{"id":"0:51:1894","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[35,4],"end":[38,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"Block","id":"22:12:1874","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:57:1902":{"id":"0:57:1902","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[60,4],"end":[68,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Buffer","id":"4:328:1876","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Output","id":"22:16:188","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5526:33011":{"id":"5:5526:33011","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2037","`String`":"5:7449:227"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2037","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:14393","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12252:15874":{"id":"1:12252:15874","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5509":{"id":"5:5509","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5510:33007","5:5511:11135","5:5514:33008","5:5517:33009","5:5525:33010","5:5526:33011","5:5527:16576","5:5528:15999","5:5529:16000"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:73:1897":{"id":"0:73:1897","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[118,4],"end":[118,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"TruncSide","id":"4:512:1879","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}}},"1:12297:32308":{"id":"1:12297:32308","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:11937:16630","str::split":"1:12285:32305","prim@char":"6:12033:427","str::split_terminator":"1:12294:32307"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:43784:15169","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11942:15617","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11942:15617","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11957:16636","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:127:1728":{"id":"0:127:1728","crate_id":0,"name":"Sha256VarCore","span":{"filename":"src/core_api.rs","begin":[18,0],"end":[21,1]},"visibility":"public","docs":"Core block-level SHA-256 hasher with variable output size.\n\nSupports initialization only for 28 and 32 byte output sizes,\ni.e. 224 and 256 bits respectively.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:8472:16597-0:127:1728","a:1:2755:223-0:127:1728","a:1:2812:5758-0:127:1728","a:1:8471:16598-0:127:1728","a:1:2772:231-0:127:1728","b:1:2253-0:127:1728","b:1:2561-0:127:1728","b:1:2256-0:127:1728","b:1:3391-0:127:1728","b:1:2550-0:127:1728","b:1:2546-0:127:1728","b:1:2556-0:127:1728","b:5:680-0:127:1728","b:24:1171-0:127:1728","0:130","0:46","0:50","0:52","0:61","0:54","0:48","0:45","0:59"]}}},"0:69:1894":{"id":"0:69:1894","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[107,4],"end":[110,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"Block","id":"22:12:1874","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2258:27853":{"id":"1:2258:27853","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12303:32310":{"id":"1:12303:32310","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"6:12033:427","str::splitn":"1:12300:32309","self::pattern":"1:11937:16630"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:43838:5364","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11942:15617","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11942:15617","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11957:16636","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5529:16000":{"id":"5:5529:16000","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:12359:16004"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:102:1751":{"id":"0:102:1751","crate_id":0,"name":"Sha384","span":{"filename":"src/lib.rs","begin":[94,0],"end":[94,84]},"visibility":"public","docs":"SHA-384 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:492:1720","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:473:1721","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1729","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U48","id":"24:2568:1717","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha384","id":"0:392:1732","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:61":{"id":"0:61","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[78,0],"end":[83,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9366:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:62:685"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:24:1171-0:127:1728":{"id":"b:24:1171-0:127:1728","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.16.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"24:1168:5456","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["24:1173:188"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2560:1522":{"id":"1:2560:1522","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:41899:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12347:32326":{"id":"1:12347:32326","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:12033:427","self::pattern":"1:11937:16630"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11942:15617","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12288:28243":{"id":"1:12288:28243","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"6:12033:427","self::pattern":"1:11937:16630"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:11753:5383","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11942:15617","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2550-0:127:1728":{"id":"b:1:2550-0:127:1728","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2523:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2552:711"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[17,9],"end":[17,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2269:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:131:431"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12353:32328":{"id":"1:12353:32328","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:11898:127","`FromStr`":"1:11897:16318"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:41899:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:11897:16318","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:11897:16318","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2253-0:132:1729":{"id":"b:1:2253-0:132:1729","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2762:5757","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2247:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1729","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2255:1949"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12355:15997":{"id":"1:12355:15997","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2256-0:127:1728":{"id":"b:1:2256-0:127:1728","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2762:5757","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2250:98","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2258:27853"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12335:32322":{"id":"1:12335:32322","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:12033:427","self::pattern":"1:11937:16630"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11942:15617","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12359:16004":{"id":"1:12359:16004","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12291:32306":{"id":"1:12291:32306","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:11937:16630","`DoubleEndedIterator`":"1:7388:121","prim@char":"6:12033:427","str::split":"1:12285:32305"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:43734:5370","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11942:15617","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11942:15617","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11957:16636","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12235":{"id":"1:12235","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:12236:832","1:12237:11189","1:12238:32292","1:12239:32293","1:12241:32294","1:12244:32295","1:12245:32296","1:12246:320","1:12247:319","1:12248:5905","1:12250:15873","1:12252:15874","1:12254:15875","1:12256:32297","1:12257:32298","1:12258:32299","1:12259:32300","1:12260:15182","1:12261:15191","1:12262:15031","1:12263:28278","1:12264:28273","1:12265:32301","1:12266:32302","1:12267:28332","1:12268:28957","1:12271:32303","1:12274:32304","1:12277:11228","1:12281:11188","1:12285:32305","1:12288:28243","1:12291:32306","1:12294:32307","1:12297:32308","1:12300:32309","1:12303:32310","1:12306:32311","1:12309:32312","1:12312:1993","1:12315:32313","1:12318:32314","1:12321:32315","1:12324:32316","1:12326:32317","1:12328:32318","1:12330:32319","1:12331:32320","1:12332:32321","1:12335:32322","1:12338:32323","1:12341:32324","1:12344:32325","1:12347:32326","1:12350:32327","1:12353:32328","1:12355:15997","1:12356:15998","1:12357:16002","1:12358:16003","1:12359:16004","1:12360:32329","1:12362:16513","1:12363:32330"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:64":{"id":"0:64","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[97,0],"end":[99,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"22:22:1875","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1729","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:65:1892"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:5:680-0:132:1729":{"id":"b:5:680-0:132:1729","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2269:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1729","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:15042","5:683:27858","5:684:27859"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:0:1754":{"id":"0:0:1754","crate_id":0,"name":"sha2","span":{"filename":"src/lib.rs","begin":[1,0],"end":[96,84]},"visibility":"public","docs":"An implementation of the [SHA-2][1] cryptographic hash algorithms.\n\nThere are 6 standard algorithms specified in the SHA-2 standard: [`Sha224`],\n[`Sha256`], [`Sha512_224`], [`Sha512_256`], [`Sha384`], and [`Sha512`].\n\nAlgorithmically, there are only 2 core algorithms: SHA-256 and SHA-512.\nAll other algorithms are just applications of these with different initial\nhash values, and truncated to different digest bit lengths. The first two\nalgorithms in the list are based on SHA-256, while the last four are based\non SHA-512.\n\n# Usage\n\n```rust\nuse hex_literal::hex;\nuse sha2::{Sha256, Sha512, Digest};\n\n// create a Sha256 object\nlet mut hasher = Sha256::new();\n\n// write input message\nhasher.update(b\"hello world\");\n\n// read hash digest and consume hasher\nlet result = hasher.finalize();\n\nassert_eq!(result[..], hex!(\"\n    b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\n\")[..]);\n\n// same for Sha512\nlet mut hasher = Sha512::new();\nhasher.update(b\"hello world\");\nlet result = hasher.finalize();\n\nassert_eq!(result[..], hex!(\"\n    309ecc489c12d6eb4cc40f50c902f2b4d0ed77ee511a7c7a9bcd3ca86d4cd86f\n    989dd35bc5ff499670da34255b45b0cfd830e81f605dcf7dc5542e93ae9cd76f\n\")[..]);\n```\n\nAlso see [RustCrypto/hashes][2] readme.\n\n[1]: https://en.wikipedia.org/wiki/SHA-2\n[2]: https://github.com/RustCrypto/hashes","links":{"`Sha256`":"0:99:1745","`Sha224`":"0:98:1743","`Sha512`":"0:103:1753","`Sha384`":"0:102:1751","`Sha512_256`":"0:101:1749","`Sha512_224`":"0:100:1747"},"attrs":["#![no_std]","#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\",\nhtml_favicon_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\")]","#![warn(missing_docs, rust_2018_idioms)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:5-4:0:1708","0:6-4:358:1709","0:96-0:127:1728","0:97-0:132:1729","0:98:1743","0:99:1745","0:100:1747","0:101:1749","0:102:1751","0:103:1753"],"is_stripped":false}}},"1:12261:15191":{"id":"1:12261:15191","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"6:12033:427"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:43692:15163","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:50":{"id":"0:50","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[33,0],"end":[39,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:330:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:51:1894"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:74:960":{"id":"0:74:960","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[121,4],"end":[131,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["output_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:41899:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"InvalidOutputSize","id":"4:522:1886","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12274:32304":{"id":"1:12274:32304","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"6:12033:427","self::pattern":"1:11937:16630"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11942:15617","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11942:15617","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11957:16636","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12285:32305":{"id":"1:12285:32305","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:11937:16630","`DoubleEndedIterator`":"1:7388:121","prim@char":"6:12033:427","str::split_whitespace":"1:12263:28278","str::rsplit":"1:12291:32306"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:43716:5366","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11942:15617","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12260:15182":{"id":"1:12260:15182","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"6:12033:427"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:43686:15162","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12248:5905":{"id":"1:12248:5905","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:41757:181"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41755:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2556-0:127:1728":{"id":"b:1:2556-0:127:1728","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2526:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2559:128","1:2560:1522"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12357:16002":{"id":"1:12357:16002","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12256:32297":{"id":"1:12256:32297","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"6:12039:1441","str::slice_mut_unchecked":"1:12257:32298","crate::ops::Index":"1:3052:16491"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:8472:16597-0:132:1729":{"id":"a:1:8472:16597-0:132:1729","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8472:16597","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1729","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:62:685":{"id":"0:62:685","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[80,4],"end":[82,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9341:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9330:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12312:1993":{"id":"1:12312:1993","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:11937:16630","`DoubleEndedIterator`":"1:7388:121","prim@char":"6:12033:427","str::rmatches":"1:12315:32313"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:43920:15175","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11942:15617","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12341:32324":{"id":"1:12341:32324","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:12033:427","self::pattern":"1:11937:16630"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41755:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11942:15617","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11942:15617","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11957:16636","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2546-0:132:1729":{"id":"b:1:2546-0:132:1729","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2523:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2520:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1729","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2549:11182"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12263:28278":{"id":"1:12263:28278","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:12264:28273"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:43990:15179","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60:1915":{"id":"0:60:1915","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[73,4],"end":[75,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9341:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9330:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2561-0:132:1729":{"id":"b:1:2561-0:132:1729","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2520:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1729","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2564:128","1:2565:1521"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:5:680-0:127:1728":{"id":"b:5:680-0:127:1728","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2269:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:676:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:682:15042","5:683:27858","5:684:27859"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"24:1173:188":{"id":"24:1173:188","crate_id":24,"name":"Output","span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.16.0/src/type_operators.rs","begin":[35,4],"end":[35,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:131:431":{"id":"0:131:431","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[17,9],"end":[17,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12350:32327":{"id":"1:12350:32327","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:12033:427","self::pattern":"1:11937:16630"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11942:15617","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11942:15617","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11957:16636","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:97-0:132:1729":{"id":"0:97-0:132:1729","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[76,34],"end":[76,47]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"core_api::Sha512VarCore","name":"Sha512VarCore","id":"0:132:1729","glob":false}}},"b:1:3391-0:127:1728":{"id":"b:1:3391-0:127:1728","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2762:5757","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3389:69","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3393:1535"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:65:1892":{"id":"0:65:1892","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[98,4],"end":[98,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"24:6316:5316","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5316","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5316","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5316","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5316","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5316","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5316","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5316","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"24:6363:5317","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"24:5724:5321","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5320","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5320","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5320","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5320","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5320","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5320","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5320","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"a:1:8471:16598-0:127:1728":{"id":"a:1:8471:16598-0:127:1728","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8471:16598","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:98:1743":{"id":"0:98:1743","crate_id":0,"name":"Sha224","span":{"filename":"src/lib.rs","begin":[86,0],"end":[86,84]},"visibility":"public","docs":"SHA-224 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:492:1720","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:473:1721","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U28","id":"24:2508:1715","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha224","id":"0:424:1736","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:72":{"id":"0:72","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[117,0],"end":[143,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:341:1881","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1729","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:73:1897","0:74:960","0:75:1902"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2550-0:132:1729":{"id":"b:1:2550-0:132:1729","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2523:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1729","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2552:711"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:55:1897":{"id":"0:55:1897","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[46,4],"end":[46,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"TruncSide","id":"4:512:1879","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}}},"a:1:2755:223-0:127:1728":{"id":"a:1:2755:223-0:127:1728","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2755:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:2565:1521":{"id":"1:2565:1521","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:41899:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6-4:358:1709":{"id":"0:6-4:358:1709","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[55,23],"end":[55,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"digest::Digest","name":"Digest","id":"4:358:1709","glob":false}}},"1:12247:319":{"id":"1:12247:319","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"6:12050:1544"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12259:32300":{"id":"1:12259:32300","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:12258:32299"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12265:32301":{"id":"1:12265:32301","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:43970:15177","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12315:32313":{"id":"1:12315:32313","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:11937:16630","`DoubleEndedIterator`":"1:7388:121","prim@char":"6:12033:427","str::matches":"1:12312:1993"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:43938:15176","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11942:15617","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11942:15617","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11957:16636","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:683:27858":{"id":"5:683:27858","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:49:1893":{"id":"0:49:1893","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[30,4],"end":[30,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Eager","id":"25:77:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"1:12244:32295":{"id":"1:12244:32295","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11497:16637"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53:1896":{"id":"0:53:1896","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[42,4],"end":[42,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"24:6316:5316","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5316","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5316","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5316","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5316","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5316","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"24:6363:5317","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"24:5724:5321","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5320","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5320","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5320","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5320","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5320","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"5:5510:33007":{"id":"5:5510:33007","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2037","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:14393","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2037","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:14393","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:78:1915":{"id":"0:78:1915","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[147,4],"end":[149,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9341:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9330:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:100:1747":{"id":"0:100:1747","crate_id":0,"name":"Sha512_224","span":{"filename":"src/lib.rs","begin":[90,0],"end":[90,92]},"visibility":"public","docs":"SHA-512/224 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:492:1720","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:473:1721","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1729","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U28","id":"24:2508:1715","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512_224","id":"0:440:1738","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:12363:32330":{"id":"1:12363:32330","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4521:32330"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:44033:15100","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:47:1892":{"id":"0:47:1892","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[26,4],"end":[26,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"24:6316:5316","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5316","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5316","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5316","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5316","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5316","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"24:6316:5316","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"24:6363:5317","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"24:5724:5321","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5320","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5320","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5320","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5320","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5320","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"24:5702:5320","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"1:12277:11228":{"id":"1:12277:11228","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:41757:181","prim@char":"6:12033:427","self::pattern":"1:11937:16630"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41755:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11942:15617","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12332:32321":{"id":"1:12332:32321","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"6:12033:427","self::pattern":"1:11937:16630"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11942:15617","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11942:15617","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:11962:16635","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12321:32315":{"id":"1:12321:32315","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:11937:16630","`DoubleEndedIterator`":"1:7388:121","prim@char":"6:12033:427","str::match_indices":"1:12318:32314"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:43884:15173","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11942:15617","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11942:15617","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11957:16636","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:99:1745":{"id":"0:99:1745","crate_id":0,"name":"Sha256","span":{"filename":"src/lib.rs","begin":[88,0],"end":[88,84]},"visibility":"public","docs":"SHA-256 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:492:1720","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:473:1721","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U32","id":"24:2520:1716","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha256","id":"0:376:1730","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"a:1:8472:16597-0:127:1728":{"id":"a:1:8472:16597-0:127:1728","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8472:16597","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5514:33008":{"id":"5:5514:33008","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11942:15617","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68":{"id":"0:68","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[105,0],"end":[111,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:330:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1729","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:69:1894"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:80:685":{"id":"0:80:685","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[154,4],"end":[156,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9341:132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9330:212","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5528:15999":{"id":"5:5528:15999","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:12358:16003"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5-4:0:1708":{"id":"0:5-4:0:1708","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[55,17],"end":[55,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"digest","name":"digest","id":"4:0:1708","glob":false}}},"0:54":{"id":"0:54","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[45,0],"end":[69,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:341:1881","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:55:1897","0:56:960","0:57:1902"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12245:32296":{"id":"1:12245:32296","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:12246:320":{"id":"1:12246:320","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:12247:319","`u8`":"6:12050:1544"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2552:711":{"id":"1:2552:711","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12281:11188":{"id":"1:12281:11188","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:41757:181","prim@char":"6:12033:427","self::pattern":"1:11937:16630"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41755:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11942:15617","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:11942:15617","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11957:16636","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:96-0:127:1728":{"id":"0:96-0:127:1728","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[76,19],"end":[76,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"core_api::Sha256VarCore","name":"Sha256VarCore","id":"0:127:1728","glob":false}}},"5:5527:16576":{"id":"5:5527:16576","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12360:32329":{"id":"1:12360:32329","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4523:32329"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:44015:15101","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2559:128":{"id":"1:2559:128","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"1:12262:15031":{"id":"1:12262:15031","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:43702:11990","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2772:231-0:132:1729":{"id":"a:1:2772:231-0:132:1729","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2772:231","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1729","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:24:1171-0:132:1729":{"id":"b:24:1171-0:132:1729","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.16.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"24:1168:5456","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1729","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["24:1173:188"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:2755:223-0:132:1729":{"id":"a:1:2755:223-0:132:1729","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2755:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1729","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2812:5758-0:127:1728":{"id":"a:1:2812:5758-0:127:1728","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2812:5758","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:12264:28273":{"id":"1:12264:28273","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:12263:28278"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:43999:15180","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2253-0:127:1728":{"id":"b:1:2253-0:127:1728","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2762:5757","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2247:97","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2255:1949"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12241:32294":{"id":"1:12241:32294","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:12239:32293"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2549:11182":{"id":"1:2549:11182","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2523:133"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:66":{"id":"0:66","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[101,0],"end":[103,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:332:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1729","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:67:1893"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2564:128":{"id":"1:2564:128","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32257:6099","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"1:12258:32299":{"id":"1:12258:32299","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:12259:32300"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[41,0],"end":[43,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"22:33:1878","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:53:1896"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:59":{"id":"0:59","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[71,0],"end":[76,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"22:46:1873","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:60:1915"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:12318:32314":{"id":"1:12318:32314","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:11937:16630","`DoubleEndedIterator`":"1:7388:121","prim@char":"6:12033:427","str::rmatch_indices":"1:12321:32315"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:43866:15172","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11942:15617","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:684:27859":{"id":"5:684:27859","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:45":{"id":"0:45","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[23,0],"end":[23,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:357:1885","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:132:1729":{"id":"0:132:1729","crate_id":0,"name":"Sha512VarCore","span":{"filename":"src/core_api.rs","begin":[90,0],"end":[93,1]},"visibility":"public","docs":"Core block-level SHA-512 hasher with variable output size.\n\nSupports initialization only for 28, 32, 48, and 64 byte output sizes,\ni.e. 224, 256, 384, and 512 bits respectively.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:8472:16597-0:132:1729","a:1:2755:223-0:132:1729","a:1:2812:5758-0:132:1729","a:1:8471:16598-0:132:1729","a:1:2772:231-0:132:1729","b:1:2253-0:132:1729","b:1:2561-0:132:1729","b:1:2256-0:132:1729","b:1:3391-0:132:1729","b:1:2550-0:132:1729","b:1:2546-0:132:1729","b:1:2556-0:132:1729","b:5:680-0:132:1729","b:24:1171-0:132:1729","0:66","0:64","0:63","0:70","0:68","0:135","0:72","0:77","0:79"]}}},"0:101:1749":{"id":"0:101:1749","crate_id":0,"name":"Sha512_256","span":{"filename":"src/lib.rs","begin":[92,0],"end":[92,92]},"visibility":"public","docs":"SHA-512/256 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:492:1720","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:473:1721","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1729","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U32","id":"24:2520:1716","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512_256","id":"0:456:1740","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:103:1753":{"id":"0:103:1753","crate_id":0,"name":"Sha512","span":{"filename":"src/lib.rs","begin":[96,0],"end":[96,84]},"visibility":"public","docs":"SHA-512 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:492:1720","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:473:1721","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1729","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U64","id":"24:2616:1718","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512","id":"0:408:1734","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:12306:32311":{"id":"1:12306:32311","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41755:183","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11942:15617","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12338:32323":{"id":"1:12338:32323","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:12033:427","self::pattern":"1:11937:16630"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:41755:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11942:15617","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12250:15873":{"id":"1:12250:15873","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:41757:181"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:41755:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:10031:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12268:28957":{"id":"1:12268:28957","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"6:12033:427","self::pattern":"1:11937:16630"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11942:15617","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:136:431":{"id":"0:136:431","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[89,9],"end":[89,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1729","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5525:33010":{"id":"5:5525:33010","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12358:16003":{"id":"1:12358:16003","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:79":{"id":"0:79","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[152,0],"end":[157,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9366:112","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1729","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:80:685"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:48":{"id":"0:48","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[29,0],"end":[31,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:332:1877","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:49:1893"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2556-0:132:1729":{"id":"b:1:2556-0:132:1729","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2530:240","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2526:241","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:132:1729","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2559:128","1:2560:1522"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5511:11135":{"id":"5:5511:11135","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11942:15617","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2546-0:127:1728":{"id":"b:1:2546-0:127:1728","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2523:133","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2520:149","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:127:1728","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2549:11182"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:12331:32320":{"id":"1:12331:32320","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12356:15998":{"id":"1:12356:15998","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:39786:27912","Self::is_ascii":"1:12355:15997"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:41755:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:39786:27912","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:12239:32293":{"id":"1:12239:32293","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67:1893":{"id":"0:67:1893","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[102,4],"end":[102,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Eager","id":"25:77:1872","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"1:3393:1535":{"id":"1:3393:1535","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:39599:14497","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"18:14269:12739":{"crate_id":18,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"5:4164:11637":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"7:488:13299":{"crate_id":7,"path":["libc","unix","timeval"],"kind":"struct"},"24:1131:16974":{"crate_id":24,"path":["typenum","private","IsGreaterOrEqualPrivate"],"kind":"trait"},"18:12698:12309":{"crate_id":18,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:7342:36682":{"crate_id":17,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:43503:5359":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:7660:13045":{"crate_id":17,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"6:4159:17287":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:9138:14370":{"crate_id":6,"path":["std","time","SystemTime"],"kind":"struct"},"17:6017:23786":{"crate_id":17,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"6:8291:15007":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"18:11719:23859":{"crate_id":18,"path":["object","read","CompressionFormat"],"kind":"enum"},"6:11999:35819":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"6:12036:1073":{"crate_id":6,"path":["std","pointer"],"kind":"primitive"},"18:11991:12164":{"crate_id":18,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:6968:23791":{"crate_id":17,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"18:14100:12682":{"crate_id":18,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:21613:16691":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:44151:15192":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"5:2960:32082":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:6929:12979":{"crate_id":17,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:11454:11673":{"crate_id":6,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:12008:16644":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"6:7742:15001":{"crate_id":6,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"7:7586:14280":{"crate_id":7,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"18:9933:15311":{"crate_id":18,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"18:14024:12660":{"crate_id":18,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"6:2559:11633":{"crate_id":6,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:44490:122":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"6:9058:35155":{"crate_id":6,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:42527:11256":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:2166:16453":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"17:3830:12888":{"crate_id":17,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:7722:12867":{"crate_id":17,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"7:7278:14250":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:48106:11092":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"0:102:1751":{"crate_id":0,"path":["sha2","Sha384"],"kind":"type_alias"},"6:3521:17226":{"crate_id":6,"path":["std","io","Seek"],"kind":"trait"},"1:2762:5757":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"24:0:1882":{"crate_id":24,"path":["typenum"],"kind":"module"},"24:1151:16990":{"crate_id":24,"path":["typenum","private","PrivateSquareRoot"],"kind":"trait"},"1:22073:15079":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:234:212":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"7:1673:13482":{"crate_id":7,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:43582:5379":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:919:15457":{"crate_id":6,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:6792:14942":{"crate_id":17,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:44008:15181":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"18:11639:12073":{"crate_id":18,"path":["object","read","Export"],"kind":"struct"},"18:14324:12757":{"crate_id":18,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"5:3735:15597":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"6:11383:15033":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"18:12645:12300":{"crate_id":18,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:43011:11466":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:44328:15206":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"6:2216:11731":{"crate_id":6,"path":["std","fs","read"],"kind":"function"},"1:9746:11745":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:4171:11263":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"1:3003:5761":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"19:96:27810":{"crate_id":19,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:40355:15108":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"24:1905:16979":{"crate_id":24,"path":["typenum","uint","SetBit"],"kind":"trait"},"1:10271:5383":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"22:51:17017":{"crate_id":22,"path":["crypto_common","KeyIvInit"],"kind":"trait"},"1:2867:16479":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:4774:12903":{"crate_id":17,"path":["gimli","constants","DwId"],"kind":"struct"},"1:42187:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"18:13487:12477":{"crate_id":18,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:5322:12915":{"crate_id":17,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:44015:15101":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:11897:16318":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:21618:16699":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"24:1168:5456":{"crate_id":24,"path":["typenum","type_operators","Same"],"kind":"trait"},"6:724:142":{"crate_id":6,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"7:4483:13624":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:46058:14688":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:6243:15404":{"crate_id":17,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:11951:14785":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:47075:14712":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"5:782:11684":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:3983:15609":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"5:4348:248":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:21263:16968":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"18:8594:23833":{"crate_id":18,"path":["object","common","Architecture"],"kind":"enum"},"5:1257:14961":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:4590:16530":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"18:13055:12379":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"19:609:15281":{"crate_id":19,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"4:160:1722":{"crate_id":4,"path":["digest","impl_oid_carrier"],"kind":"macro"},"19:652:11858":{"crate_id":19,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:5403:11982":{"crate_id":17,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:7492:14962":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"6:11179:14382":{"crate_id":6,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"7:4428:13600":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"7:6130:14063":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"18:14163:12696":{"crate_id":18,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"18:13966:12646":{"crate_id":18,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:22252:15088":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"15:7:15452":{"crate_id":15,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:44305:15198":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"15:187:22865":{"crate_id":15,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:4129:15063":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:30597:28674":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"7:4848:13756":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"7:1690:13489":{"crate_id":7,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"19:582:11157":{"crate_id":19,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:7582:13041":{"crate_id":17,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"24:785:16995":{"crate_id":24,"path":["typenum","private","Trim"],"kind":"trait"},"1:46470:14700":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:10348:5384":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:2907:12857":{"crate_id":17,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:42811:68":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"6:5242:192":{"crate_id":6,"path":["std","path","Path"],"kind":"struct"},"18:10468:12023":{"crate_id":18,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:6456:14912":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"6:5383:15515":{"crate_id":6,"path":["std","process","Child"],"kind":"struct"},"16:306:22878":{"crate_id":16,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"24:2520:1716":{"crate_id":24,"path":["typenum","generated","consts","U32"],"kind":"type_alias"},"1:48007:14722":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"24:1276:5419":{"crate_id":24,"path":["typenum","type_operators","Gcd"],"kind":"trait"},"22:12:1874":{"crate_id":22,"path":["crypto_common","Block"],"kind":"type_alias"},"1:2156:601":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"18:12484:12277":{"crate_id":18,"path":["object","macho","FatArch64"],"kind":"struct"},"1:2859:16482":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"4:294:16968":{"crate_id":4,"path":["digest","core_api","wrapper","sealed","Sealed"],"kind":"trait"},"23:143:5479":{"crate_id":23,"path":["generic_array","functional","MappedGenericSequence"],"kind":"trait"},"17:2864:12855":{"crate_id":17,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:22186:28642":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"12:1611:11622":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:21832:16968":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"4:531:2036":{"crate_id":4,"path":["digest","InvalidBufferSize"],"kind":"struct"},"18:11191:12073":{"crate_id":18,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:44315:15202":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"23:317:5366":{"crate_id":23,"path":["generic_array","sequence","Split"],"kind":"trait"},"1:7802:16514":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:21710:5357":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:9371:120":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:22202:28671":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"24:1279:5416":{"crate_id":24,"path":["typenum","type_operators","ToInt"],"kind":"trait"},"17:6901:12868":{"crate_id":17,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:3223:237":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:11022:5382":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"6:8179:17227":{"crate_id":6,"path":["std","io","SeekFrom"],"kind":"enum"},"5:7290:11194":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"18:13922:12634":{"crate_id":18,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:7884:23796":{"crate_id":17,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"9:0:1755":{"crate_id":9,"path":["cfg_if"],"kind":"module"},"6:6075:11644":{"crate_id":6,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:6362:166":{"crate_id":6,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:9366:112":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"5:1672:11681":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"12:403:36656":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:40232:14628":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:2910:16486":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:40317:16537":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"7:4992:13837":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"24:1174:5457":{"crate_id":24,"path":["typenum","type_operators","Abs"],"kind":"trait"},"10:426:22775":{"crate_id":10,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"7:5818:13925":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:2845:16477":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"19:113:27811":{"crate_id":19,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:5905:14864":{"crate_id":17,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"18:13693:12582":{"crate_id":18,"path":["object","pe","Guid"],"kind":"struct"},"17:4344:12892":{"crate_id":17,"path":["gimli","constants","DwAt"],"kind":"struct"},"7:4506:13637":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:46965:14709":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"18:12452:12270":{"crate_id":18,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"7:5979:14020":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"18:12750:12316":{"crate_id":18,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"12:2060:15467":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"7:6008:14033":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:6226:15400":{"crate_id":17,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:39450:200":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"18:14346:12763":{"crate_id":18,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:12054:1540":{"crate_id":6,"path":["std","u128"],"kind":"primitive"},"23:422:5471":{"crate_id":23,"path":["generic_array","ArrayBuilder"],"kind":"struct"},"18:9752:15306":{"crate_id":18,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"7:541:13333":{"crate_id":7,"path":["libc","unix","iovec"],"kind":"struct"},"5:2461:14387":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"6:1570:14992":{"crate_id":6,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"22:39:17014":{"crate_id":22,"path":["crypto_common","IvSizeUser"],"kind":"trait"},"6:7662:15534":{"crate_id":6,"path":["std","thread","Builder"],"kind":"struct"},"17:2722:12849":{"crate_id":17,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"12:2174:13206":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"7:5900:13971":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"5:7365:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"5:1011:11681":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"5:3669:11681":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"18:261:15288":{"crate_id":18,"path":["object","read","util","DebugLen"],"kind":"struct"},"6:12045:763":{"crate_id":6,"path":["std","i8"],"kind":"primitive"},"4:332:1877":{"crate_id":4,"path":["digest","core_api","BufferKindUser"],"kind":"trait"},"7:7552:14273":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:14:1994":{"crate_id":1,"path":["core","write"],"kind":"macro"},"23:123:16961":{"crate_id":23,"path":["generic_array","arr","AddLength"],"kind":"trait"},"17:6915:12869":{"crate_id":17,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:6545:12935":{"crate_id":17,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"17:7128:14365":{"crate_id":17,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:9630:11464":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"15:0:2020":{"crate_id":15,"path":["rustc_demangle"],"kind":"module"},"18:12086:12180":{"crate_id":18,"path":["object","elf","Rel32"],"kind":"struct"},"18:14478:12801":{"crate_id":18,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:46327:14695":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:39538:205":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"7:6156:14078":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"4:330:1880":{"crate_id":4,"path":["digest","core_api","UpdateCore"],"kind":"trait"},"5:7396:28660":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:4365:11736":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:40812:15136":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:6544:15530":{"crate_id":6,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:6844:12970":{"crate_id":17,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"18:10430:15333":{"crate_id":18,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"7:4794:13734":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"18:13174:12402":{"crate_id":18,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:6742:14929":{"crate_id":17,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"18:11393:128":{"crate_id":18,"path":["object","read","Error"],"kind":"struct"},"17:2548:12842":{"crate_id":17,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"5:7382:15056":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"18:11244:12105":{"crate_id":18,"path":["object","read","pe","import","Import"],"kind":"enum"},"12:1858:14995":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"7:4550:13657":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"18:12225:12209":{"crate_id":18,"path":["object","elf","Verdaux"],"kind":"struct"},"1:21397:14404":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:11518:15509":{"crate_id":6,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:47823:14718":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"18:13451:12446":{"crate_id":18,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:7125:11643":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:4770:28324":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"18:9867:12001":{"crate_id":18,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"18:9912:15309":{"crate_id":18,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"6:3187:36348":{"crate_id":6,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"24:5702:5320":{"crate_id":24,"path":["typenum","bit","B0"],"kind":"struct"},"18:8978:23853":{"crate_id":18,"path":["object","common","SectionFlags"],"kind":"enum"},"10:486:22772":{"crate_id":10,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:39599:14497":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"17:5588:12862":{"crate_id":17,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:9590:145":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"6:11054:11670":{"crate_id":6,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"7:5849:13946":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"7:4489:13627":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"18:10949:15359":{"crate_id":18,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:48144:11094":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"18:12422:12261":{"crate_id":18,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"6:10799:14290":{"crate_id":6,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"6:9079:14368":{"crate_id":6,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"6:8503:17341":{"crate_id":6,"path":["std","path","Component"],"kind":"enum"},"6:8119:15546":{"crate_id":6,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"18:12846:12330":{"crate_id":18,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:40189:15095":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"18:14469:12799":{"crate_id":18,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:40623:15128":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:6569:12866":{"crate_id":17,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"7:4862:13764":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:1582:14994":{"crate_id":6,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:8014:17253":{"crate_id":6,"path":["std","io","error","ErrorKind"],"kind":"enum"},"7:6067:14049":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"5:2959:15042":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:2247:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"5:3581:5362":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"5:3568:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"7:6841:14235":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:2365:17213":{"crate_id":6,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:8395:17328":{"crate_id":6,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"18:10340:12022":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"4:358:1709":{"crate_id":4,"path":["digest","digest","Digest"],"kind":"trait"},"1:40460:5378":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"6:6547:17360":{"crate_id":6,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:7378:35833":{"crate_id":6,"path":["std","panicking","Hook"],"kind":"enum"},"18:9823:23865":{"crate_id":18,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"18:14448:12793":{"crate_id":18,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"18:12267:12224":{"crate_id":18,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:12038:1411":{"crate_id":6,"path":["std","slice"],"kind":"primitive"},"6:8200:15111":{"crate_id":6,"path":["std","io","Chain"],"kind":"struct"},"1:20796:31364":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:11497:16637":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"18:12252:12218":{"crate_id":18,"path":["object","elf","Vernaux"],"kind":"struct"},"1:40520:15114":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:4641:14144":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:10421:5371":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:45818:14678":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:7284:14648":{"crate_id":17,"path":["gimli","read","op","Location"],"kind":"enum"},"6:7858:15540":{"crate_id":6,"path":["std","fs","ReadDir"],"kind":"struct"},"6:12057:1159":{"crate_id":6,"path":["std","reference"],"kind":"primitive"},"18:10370:15328":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:12004:17177":{"crate_id":6,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:40549:15119":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:4050:17270":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"19:727:11882":{"crate_id":19,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"7:1663:13476":{"crate_id":7,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:6944:36679":{"crate_id":17,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"5:7199:15053":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:7716:17175":{"crate_id":6,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"19:736:27819":{"crate_id":19,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:9119:14369":{"crate_id":6,"path":["std","time","Instant"],"kind":"struct"},"1:2982:5476":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:44280:15197":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"18:8794:23847":{"crate_id":18,"path":["object","common","SymbolKind"],"kind":"enum"},"19:531:14776":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:7805:16581":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:8217:11990":{"crate_id":6,"path":["std","io","Bytes"],"kind":"struct"},"17:8072:13095":{"crate_id":17,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"5:1102:32084":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"7:4842:13754":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"7:4315:13528":{"crate_id":7,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"18:13298:12424":{"crate_id":18,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"6:5433:15520":{"crate_id":6,"path":["std","process","ChildStderr"],"kind":"struct"},"18:9574:36692":{"crate_id":18,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"7:5805:13924":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:6401:12860":{"crate_id":17,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:0:507":{"crate_id":1,"path":["core"],"kind":"module"},"6:12037:317":{"crate_id":6,"path":["std","array"],"kind":"primitive"},"24:783:16964":{"crate_id":24,"path":["typenum","private","InternalMarker"],"kind":"trait"},"1:2772:231":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"18:14355:12765":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:42265:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:11171:35776":{"crate_id":6,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"22:44:2041":{"crate_id":22,"path":["crypto_common","Reset"],"kind":"trait"},"18:12172:12196":{"crate_id":18,"path":["object","elf","Dyn32"],"kind":"struct"},"1:44348:15208":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"19:660:15282":{"crate_id":19,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:10326:15521":{"crate_id":6,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:8471:16598":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"5:6439:11697":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:3265:15503":{"crate_id":6,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:3743:15509":{"crate_id":6,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"18:11023:12066":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"19:624:36699":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:40511:15113":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:30703:28673":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:44723:15222":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:23323:222":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:2969:117":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:6960:15416":{"crate_id":17,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"7:1717:13500":{"crate_id":7,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"6:12039:1441":{"crate_id":6,"path":["std","str"],"kind":"primitive"},"12:1822:11194":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"6:10165:15573":{"crate_id":6,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:2514:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:3240:16495":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:1426:144":{"crate_id":6,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"1:20826:16975":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"18:12496:12279":{"crate_id":18,"path":["object","macho","MachHeader32"],"kind":"struct"},"6:8463:6053":{"crate_id":6,"path":["std","path","State"],"kind":"enum"},"18:14420:12784":{"crate_id":18,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:288:22877":{"crate_id":16,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"24:1031:16969":{"crate_id":24,"path":["typenum","private","IsLessPrivate"],"kind":"trait"},"17:3797:12887":{"crate_id":17,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:6352:14905":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"0:99:1745":{"crate_id":0,"path":["sha2","Sha256"],"kind":"type_alias"},"7:4650:13674":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"12:1831:11715":{"crate_id":12,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"7:4917:13797":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"6:8340:14129":{"crate_id":6,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"18:13286:12417":{"crate_id":18,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:5785:15527":{"crate_id":6,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"4:502:5336":{"crate_id":4,"path":["digest","core_api","xof_reader","XofReaderCoreWrapper"],"kind":"struct"},"18:13040:12375":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:3302:15504":{"crate_id":6,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:8901:14361":{"crate_id":6,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"5:1374:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:41604:14636":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"22:54:17018":{"crate_id":22,"path":["crypto_common","InnerInit"],"kind":"trait"},"17:5612:12864":{"crate_id":17,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:4862:12906":{"crate_id":17,"path":["gimli","constants","DwOrd"],"kind":"struct"},"18:11788:12116":{"crate_id":18,"path":["object","archive","Header"],"kind":"struct"},"1:41079:15146":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"18:400:15289":{"crate_id":18,"path":["object","read","any","Segment"],"kind":"struct"},"5:6788:11725":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:32297:13036":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"4:448:2035":{"crate_id":4,"path":["digest","VariableOutputReset"],"kind":"trait"},"1:41831:11194":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"17:5435:12917":{"crate_id":17,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:11702:15171":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"5:4363:11704":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:46775:14706":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"5:2970:32081":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:4796:814":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:50027:16701":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"19:548:141":{"crate_id":19,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"21:0:2025":{"crate_id":21,"path":["blobby"],"kind":"module"},"24:613:184":{"crate_id":24,"path":["typenum","marker_traits","Ord"],"kind":"trait"},"1:48221:5943":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:47761:14717":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:5661:14843":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"18:8926:23851":{"crate_id":18,"path":["object","common","FileFlags"],"kind":"enum"},"1:7346:134":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"18:10366:15327":{"crate_id":18,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:44642:213":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:21369:16685":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"17:6318:12930":{"crate_id":17,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:7318:13017":{"crate_id":17,"path":["gimli","read","op","Piece"],"kind":"struct"},"4:457:14394":{"crate_id":4,"path":["digest","core_api","ct_variable","NoOid"],"kind":"struct"},"1:9375:11254":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"6:9491:11665":{"crate_id":6,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"18:13010:12370":{"crate_id":18,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"18:11617:12105":{"crate_id":18,"path":["object","read","Import"],"kind":"struct"},"18:10023:15305":{"crate_id":18,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"6:7934:14997":{"crate_id":6,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:6821:16586":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"5:7253:200":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"7:7463:14262":{"crate_id":7,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"12:1852:14994":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"18:11235:14822":{"crate_id":18,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"12:2049:15465":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:11467:5346":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:4917:17318":{"crate_id":6,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"7:7517:14265":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:44243:15196":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"18:11137:15370":{"crate_id":18,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:44706:161":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:6165:1876":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"17:5363:12916":{"crate_id":17,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:41968:210":{"crate_id":1,"path":["core","sync","atomic","Ordering","Relaxed"],"kind":"foreign_type"},"22:0:2026":{"crate_id":22,"path":["crypto_common"],"kind":"module"},"17:6083:22896":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"7:4729:13701":{"crate_id":7,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:8473:15616":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"24:6172:5406":{"crate_id":24,"path":["typenum","array","ATerm"],"kind":"struct"},"17:7554:12874":{"crate_id":17,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"18:9886:15308":{"crate_id":18,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:21722:31362":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"5:7261:15054":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:12775:140":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:46021:14686":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"19:491:14775":{"crate_id":19,"path":["memchr","cow","Imp"],"kind":"struct"},"7:6705:14154":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"18:14296:12751":{"crate_id":18,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"18:12737:12314":{"crate_id":18,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"8:79:22766":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"6:12047:761":{"crate_id":6,"path":["std","i32"],"kind":"primitive"},"1:43048:6053":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"6:1558:11194":{"crate_id":6,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:41899:212":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"25:77:1872":{"crate_id":25,"path":["block_buffer","Eager"],"kind":"struct"},"1:43784:15169":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"18:10637:14812":{"crate_id":18,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"4:473:1721":{"crate_id":4,"path":["digest","core_api","ct_variable","CtVariableCoreWrapper"],"kind":"struct"},"24:2616:1718":{"crate_id":24,"path":["typenum","generated","consts","U64"],"kind":"type_alias"},"12:986:15465":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:22113:15083":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"7:4963:13823":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"7:579:13352":{"crate_id":7,"path":["libc","unix","tms"],"kind":"struct"},"7:4496:13630":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:2391:17223":{"crate_id":6,"path":["std","fs","read_dir"],"kind":"function"},"12:1027:22854":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"12:1048:36663":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"7:7523:14266":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:8899:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"5:4194:11637":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:42109:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:9174:15568":{"crate_id":6,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"6:643:17172":{"crate_id":6,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:5939:14870":{"crate_id":17,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:4175:17289":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"18:11062:15364":{"crate_id":18,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:7054:14956":{"crate_id":17,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:43569:5378":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:4835:12905":{"crate_id":17,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:11962:16635":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:8181:12879":{"crate_id":17,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:46251:14693":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:11356:15030":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:10383:5370":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"18:14316:12756":{"crate_id":18,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"5:2243:15049":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"24:6272:5350":{"crate_id":24,"path":["typenum","Less"],"kind":"struct"},"6:4627:17267":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"18:3565:15300":{"crate_id":18,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:48091:11091":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:41806:11193":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"4:421:2029":{"crate_id":4,"path":["digest","FixedOutput"],"kind":"trait"},"1:44033:15100":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:22513:179":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"12:817:15461":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:8230:15177":{"crate_id":6,"path":["std","io","Lines"],"kind":"struct"},"24:1190:5410":{"crate_id":24,"path":["typenum","type_operators","Cmp"],"kind":"trait"},"6:850:5363":{"crate_id":6,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:6346:15415":{"crate_id":17,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:22744:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:149:11611":{"crate_id":17,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"24:1111:16973":{"crate_id":24,"path":["typenum","private","IsNotEqualPrivate"],"kind":"trait"},"18:2209:15297":{"crate_id":18,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"6:11235:14369":{"crate_id":6,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"7:532:13327":{"crate_id":7,"path":["libc","unix","hostent"],"kind":"struct"},"27:0:1756":{"crate_id":27,"path":["cpufeatures"],"kind":"module"},"7:5987:14021":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:40216:28672":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:43686:15162":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"6:12058:13":{"crate_id":6,"path":["std","fn"],"kind":"primitive"},"1:21388:16968":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:43970:15177":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"6:5567:17346":{"crate_id":6,"path":["std","process","Termination"],"kind":"trait"},"6:11539:15510":{"crate_id":6,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:43674:15161":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:8205:23797":{"crate_id":17,"path":["gimli","read","value","ValueType"],"kind":"enum"},"18:9051:23832":{"crate_id":18,"path":["object","endian","Endianness"],"kind":"enum"},"1:40658:11876":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:41706:15006":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:43522:5372":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:11483:5348":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:2428:12837":{"crate_id":17,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:10031:225":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"7:5955:14008":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"18:9521:15302":{"crate_id":18,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:30525:68":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:11718:15174":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"12:119:11616":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:10769:15019":{"crate_id":6,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"6:3944:17262":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:7513:14965":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"7:4949:13817":{"crate_id":7,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"5:1426:5363":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:7613:15446":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:3150:5356":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"19:574:11858":{"crate_id":19,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"12:311:14987":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:7474:15439":{"crate_id":17,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:43251:14660":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"24:1091:16972":{"crate_id":24,"path":["typenum","private","IsLessOrEqualPrivate"],"kind":"trait"},"1:43820:5368":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"5:3238:14995":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"24:5724:5321":{"crate_id":24,"path":["typenum","bit","B1"],"kind":"struct"},"6:2363:14398":{"crate_id":6,"path":["std","fs","metadata"],"kind":"function"},"18:11337:23979":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"19:681:14779":{"crate_id":19,"path":["memchr","memmem","Finder"],"kind":"struct"},"7:4887:13776":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:5866:14862":{"crate_id":17,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"18:11381:12084":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"5:6637:11681":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:8812:188":{"crate_id":6,"path":["std","process","Output"],"kind":"struct"},"6:4391:15513":{"crate_id":6,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"18:10084:15317":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"18:14221:12738":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"18:14156:12694":{"crate_id":18,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:30279:16285":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"17:6583:14924":{"crate_id":17,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:7436:13038":{"crate_id":17,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:20962:16968":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"6:12015:35158":{"crate_id":6,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:5995:14834":{"crate_id":17,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"19:481:14774":{"crate_id":19,"path":["memchr","cow","CowBytes"],"kind":"struct"},"18:14056:12671":{"crate_id":18,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"15:221:13181":{"crate_id":15,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"5:6955:11730":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:6721:23790":{"crate_id":17,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:22777:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"7:1603:13428":{"crate_id":7,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"7:6726:14161":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"7:4436:13602":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:43614:5375":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"5:207:11680":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"5:2049:15597":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"6:12052:1542":{"crate_id":6,"path":["std","u32"],"kind":"primitive"},"18:9102:11984":{"crate_id":18,"path":["object","endian","U16Bytes"],"kind":"struct"},"10:393:22774":{"crate_id":10,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"5:2170:15046":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:21834:16687":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:46203:14692":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:2649:15608":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"17:7694:12876":{"crate_id":17,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:9109:220":{"crate_id":6,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"18:13024:12373":{"crate_id":18,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:6818:14943":{"crate_id":17,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"18:10036:12006":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"7:4587:13669":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:41823:5363":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:2767:109":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"17:8281:13103":{"crate_id":17,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"6:1073:15471":{"crate_id":6,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:44443:15212":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"6:8561:14356":{"crate_id":6,"path":["std","path","Ancestors"],"kind":"struct"},"7:547:13336":{"crate_id":7,"path":["libc","unix","pollfd"],"kind":"struct"},"17:3065:11886":{"crate_id":17,"path":["gimli","arch","Arm"],"kind":"struct"},"6:6815:17369":{"crate_id":6,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:6513:14914":{"crate_id":17,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:7360:36683":{"crate_id":17,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:4705:17292":{"crate_id":6,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"7:123:17458":{"crate_id":7,"path":["libc","unix","fpos_t"],"kind":"enum"},"18:13838:12610":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:7503:12872":{"crate_id":17,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:45706:14673":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:39333:16500":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"18:9564:15303":{"crate_id":18,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:2618:12845":{"crate_id":17,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:22711:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"18:10750:12026":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"6:4800:11638":{"crate_id":6,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"19:564:11865":{"crate_id":19,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"24:933:16998":{"crate_id":24,"path":["typenum","private","PrivateSetBit"],"kind":"trait"},"18:12007:12168":{"crate_id":18,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:10787:15025":{"crate_id":6,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"6:11621:15037":{"crate_id":6,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"6:12051:1541":{"crate_id":6,"path":["std","u16"],"kind":"primitive"},"6:10255:17348":{"crate_id":6,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"6:3190:36349":{"crate_id":6,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"5:7282:11194":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:46517:14701":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:40601:15126":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:41729:14644":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:11957:16636":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:46548:14702":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:4098:15611":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:7828:13057":{"crate_id":17,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"4:427:2031":{"crate_id":4,"path":["digest","XofReader"],"kind":"trait"},"7:4341:13548":{"crate_id":7,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:10476:5364":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:12936:1666":{"crate_id":1,"path":["core","core_arch","arch","x86_64"],"kind":"module"},"6:6614:11656":{"crate_id":6,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"6:3678:17261":{"crate_id":6,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:22140:14411":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"6:5502:15522":{"crate_id":6,"path":["std","process","Stdio"],"kind":"struct"},"1:10179:5362":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"6:10947:15538":{"crate_id":6,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:39372:16497":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"6:2496:15495":{"crate_id":6,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:5816:14855":{"crate_id":17,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"18:582:11979":{"crate_id":18,"path":["object","read","any","Symbol"],"kind":"struct"},"1:5976:15066":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:2168:16454":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"6:11216:14383":{"crate_id":6,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"6:10819:119":{"crate_id":6,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"1:20828:16976":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:12520:136":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:22843:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"24:821:16993":{"crate_id":24,"path":["typenum","private","PrivateXor"],"kind":"trait"},"1:1637:11137":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"5:7221:11691":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"18:11226:14821":{"crate_id":18,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:42851:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"24:1198:5417":{"crate_id":24,"path":["typenum","type_operators","PartialDiv"],"kind":"trait"},"1:9385:11258":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"5:1411:5362":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"24:1206:5414":{"crate_id":24,"path":["typenum","type_operators","Max"],"kind":"trait"},"7:6711:14156":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"7:5836:13937":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:2817:106":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:40840:15138":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"18:14110:12685":{"crate_id":18,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:32318:15092":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"18:13676:12580":{"crate_id":18,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"18:14001:12655":{"crate_id":18,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"18:12685:12308":{"crate_id":18,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:3315:12883":{"crate_id":17,"path":["gimli","arch","LoongArch"],"kind":"struct"},"18:12911:12360":{"crate_id":18,"path":["object","macho","DylibModule64"],"kind":"struct"},"5:3171:5362":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:5369:11637":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"5:1273:15467":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:46571:14703":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"12:447:142":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:7090:14960":{"crate_id":17,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"7:6171:14089":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"4:430:2032":{"crate_id":4,"path":["digest","ExtendableOutput"],"kind":"trait"},"17:7102:23792":{"crate_id":17,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:40540:15117":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"18:10097:15318":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"18:10534:14802":{"crate_id":18,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"18:11295:14825":{"crate_id":18,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"18:9617:36693":{"crate_id":18,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"12:657:11194":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:7643:14288":{"crate_id":6,"path":["std","thread","local","AccessError"],"kind":"struct"},"18:14308:12753":{"crate_id":18,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"12:1103:15470":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:44439:15211":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:12830:16681":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"22:42:17015":{"crate_id":22,"path":["crypto_common","InnerUser"],"kind":"trait"},"5:822:11687":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:3228:135":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:43266:15160":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"5:7529:11715":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"18:14083:12678":{"crate_id":18,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"6:1983:186":{"crate_id":6,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"7:6775:14199":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:5760:23785":{"crate_id":17,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"12:736:14991":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"17:4585:12898":{"crate_id":17,"path":["gimli","constants","DwAccess"],"kind":"struct"},"18:10126:14793":{"crate_id":18,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"12:644:5363":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:41046:15143":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:40610:15127":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"7:4938:13812":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"18:1075:15291":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"7:5793:13920":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"18:11710:12076":{"crate_id":18,"path":["object","read","Relocation"],"kind":"struct"},"18:13723:12588":{"crate_id":18,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"18:14499:12804":{"crate_id":18,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"6:1565:11715":{"crate_id":6,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"1:41942:5362":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"7:4446:13608":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"1:41891:195":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:2809:11144":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:39419:15093":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:46805:14707":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"24:814:16983":{"crate_id":24,"path":["typenum","private","PrivateAnd"],"kind":"trait"},"6:4637:14140":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"7:4401:13584":{"crate_id":7,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:6648:219":{"crate_id":6,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"7:5877:13958":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"18:11951:12153":{"crate_id":18,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:2815:11146":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"7:4685:13678":{"crate_id":7,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"18:13792:12604":{"crate_id":18,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:40246:15098":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"18:8953:23852":{"crate_id":18,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:40642:15130":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"24:1211:5331":{"crate_id":24,"path":["typenum","type_operators","IsLess"],"kind":"trait"},"7:7511:14264":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:7651:15447":{"crate_id":17,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"18:12934:12361":{"crate_id":18,"path":["object","macho","DylibReference"],"kind":"struct"},"5:3142:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:48045:11088":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"7:4413:13593":{"crate_id":7,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"7:1506:13371":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:44137:15189":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"23:362:5399":{"crate_id":23,"path":["generic_array","ArrayLength"],"kind":"trait"},"1:41061:11743":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:5798:12920":{"crate_id":17,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"7:6648:14147":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:40440:15623":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"6:8413:14347":{"crate_id":6,"path":["std","path","Prefix"],"kind":"enum"},"12:723:14990":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"5:3178:14993":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"7:5068:13871":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"5:3720:14997":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:2250:98":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:5397:15518":{"crate_id":6,"path":["std","process","ChildStdin"],"kind":"struct"},"18:14282:12745":{"crate_id":18,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:44455:15215":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:11308:15026":{"crate_id":6,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"6:1776:15486":{"crate_id":6,"path":["std","env","Vars"],"kind":"struct"},"6:6302:208":{"crate_id":6,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"18:11845:12126":{"crate_id":18,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:2832:12854":{"crate_id":17,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:40682:15133":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:5696:23784":{"crate_id":17,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:2305:22923":{"crate_id":17,"path":["gimli","common","Vendor"],"kind":"enum"},"1:21100:16698":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"7:4695:13685":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"18:9711:36694":{"crate_id":18,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:47573:14715":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"18:9070:11982":{"crate_id":18,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:22645:175":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"6:4746:17281":{"crate_id":6,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"18:8825:23848":{"crate_id":18,"path":["object","common","SymbolScope"],"kind":"enum"},"17:2766:12851":{"crate_id":17,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:2923:128":{"crate_id":6,"path":["std","io","error","Error"],"kind":"struct"},"5:4393:11637":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:7462:13039":{"crate_id":17,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:11063:1938":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:41052:15145":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:2504:12840":{"crate_id":17,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"7:4748:13710":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:30539:28675":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"6:362:15476":{"crate_id":6,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"18:12437:12265":{"crate_id":18,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:502:11626":{"crate_id":6,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:46373:14697":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"18:9372:11993":{"crate_id":18,"path":["object","read","util","StringTable"],"kind":"struct"},"1:40367:28660":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"7:6796:14213":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:356:15475":{"crate_id":6,"path":["std","thread","scoped","Scope"],"kind":"struct"},"18:12237:12212":{"crate_id":18,"path":["object","elf","Verneed"],"kind":"struct"},"18:11215:14817":{"crate_id":18,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:3052:16491":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"5:5128:11709":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"7:4626:13672":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:2696:12848":{"crate_id":17,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:9330:212":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"18:13113:12388":{"crate_id":18,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"7:4420:13597":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:12738:11648":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"6:8486:14350":{"crate_id":6,"path":["std","path","PrefixComponent"],"kind":"struct"},"7:1495:13366":{"crate_id":7,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:2914:16487":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:9067:30789":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:41958:11194":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:39474:201":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:6376:23788":{"crate_id":17,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:4239:209":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"18:14076:12677":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:837:5362":{"crate_id":6,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"18:13546:12529":{"crate_id":18,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"18:12576:12293":{"crate_id":18,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"18:9277:11989":{"crate_id":18,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:6154:15071":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"5:1492:15456":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:5628:11640":{"crate_id":6,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"7:6015:14035":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"18:13422:12426":{"crate_id":18,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:2450:12838":{"crate_id":17,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"7:1513:13374":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"12:749:11697":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:43532:5373":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"5:35:11678":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:6560:11614":{"crate_id":17,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"1:40397:16547":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"24:1016:17008":{"crate_id":24,"path":["typenum","private","PrivateMax"],"kind":"trait"},"6:8156:14330":{"crate_id":6,"path":["std","io","util","Sink"],"kind":"struct"},"6:1761:624":{"crate_id":6,"path":["std","env"],"kind":"module"},"17:7269:36685":{"crate_id":17,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"7:4463:13614":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:31101:11157":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"5:1442:11194":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:9044:14365":{"crate_id":6,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"24:611:5333":{"crate_id":24,"path":["typenum","marker_traits","NonZero"],"kind":"trait"},"22:16:188":{"crate_id":22,"path":["crypto_common","Output"],"kind":"type_alias"},"18:10214:15323":{"crate_id":18,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:4823:17277":{"crate_id":6,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:44523:16657":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"6:894:11697":{"crate_id":6,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"19:0:2024":{"crate_id":19,"path":["memchr"],"kind":"module"},"17:7015:12984":{"crate_id":17,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:6415:14909":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:44024:15095":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"18:11407:23855":{"crate_id":18,"path":["object","read","FileKind"],"kind":"enum"},"5:5366:17065":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:44650:197":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"18:13851:12616":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"18:12959:12365":{"crate_id":18,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:30503:5474":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"5:1302:15471":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:9383:11257":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:6471:11655":{"crate_id":6,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"18:9455:36687":{"crate_id":18,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"18:9959:15313":{"crate_id":18,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"24:998:16967":{"crate_id":24,"path":["typenum","private","PrivateRem"],"kind":"trait"},"6:8242:15553":{"crate_id":6,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"5:7182:14393":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"26:0:1755":{"crate_id":26,"path":["cfg_if"],"kind":"module"},"6:12033:427":{"crate_id":6,"path":["std","char"],"kind":"primitive"},"1:22264:16319":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:12163:112":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"12:1012:15467":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"7:4374:13572":{"crate_id":7,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"5:5612:11712":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"6:8210:15136":{"crate_id":6,"path":["std","io","Take"],"kind":"struct"},"12:399:36661":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:11048:11669":{"crate_id":6,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:8318:14336":{"crate_id":6,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"18:8765:23846":{"crate_id":18,"path":["object","common","ComdatKind"],"kind":"enum"},"1:41023:15140":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"6:481:11625":{"crate_id":6,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"5:7337:15055":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:11314:15585":{"crate_id":6,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:4421:11266":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:21056:16697":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:43692:15163":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:40204:15097":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:4921:12908":{"crate_id":17,"path":["gimli","constants","DwIdx"],"kind":"struct"},"7:653:17815":{"crate_id":7,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:6261:15412":{"crate_id":17,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"12:2033:14961":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:12727:107":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"7:4475:13619":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:20809:31505":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"18:14335:12762":{"crate_id":18,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"18:9137:11985":{"crate_id":18,"path":["object","endian","U32Bytes"],"kind":"struct"},"18:11086:15366":{"crate_id":18,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"12:1517:15473":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:2269:105":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"7:6625:14129":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:946:15463":{"crate_id":6,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"18:13876:12624":{"crate_id":18,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"0:98:1743":{"crate_id":0,"path":["sha2","Sha224"],"kind":"type_alias"},"8:0:1589":{"crate_id":8,"path":["unwind"],"kind":"module"},"23:163:5481":{"crate_id":23,"path":["generic_array","functional","FunctionalSequence"],"kind":"trait"},"1:1733:16465":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"23:300:5485":{"crate_id":23,"path":["generic_array","sequence","Shorten"],"kind":"trait"},"1:10021:16968":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:4806:12904":{"crate_id":17,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:43938:15176":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"24:1184:5415":{"crate_id":24,"path":["typenum","type_operators","Pow"],"kind":"trait"},"18:10478:12024":{"crate_id":18,"path":["object","read","elf","version","Version"],"kind":"struct"},"18:12043:12175":{"crate_id":18,"path":["object","elf","Sym64"],"kind":"struct"},"18:10456:15340":{"crate_id":18,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"18:9172:11986":{"crate_id":18,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:5448:15521":{"crate_id":6,"path":["std","process","Command"],"kind":"struct"},"1:44471:14382":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"6:2220:17210":{"crate_id":6,"path":["std","fs","read_to_string"],"kind":"function"},"18:10507:14800":{"crate_id":18,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:3988:17265":{"crate_id":6,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"18:12184:12199":{"crate_id":18,"path":["object","elf","Dyn64"],"kind":"struct"},"6:7737:14998":{"crate_id":6,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"7:1557:13399":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"7:5829:13933":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"5:895:5362":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"18:11473:11949":{"crate_id":18,"path":["object","read","SectionIndex"],"kind":"struct"},"17:7792:23795":{"crate_id":17,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"23:346:5486":{"crate_id":23,"path":["generic_array","sequence","Concat"],"kind":"trait"},"7:6618:14125":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"18:10575:14805":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"6:8994:15561":{"crate_id":6,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"18:13973:12647":{"crate_id":18,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:20768:11157":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"18:12983:12368":{"crate_id":18,"path":["object","macho","UuidCommand"],"kind":"struct"},"18:10420:11927":{"crate_id":18,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:44511:15219":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"18:8895:23850":{"crate_id":18,"path":["object","common","RelocationEncoding"],"kind":"enum"},"4:334:5327":{"crate_id":4,"path":["digest","core_api","FixedOutputCore"],"kind":"trait"},"17:3655:11891":{"crate_id":17,"path":["gimli","arch","X86_64"],"kind":"struct"},"18:11910:12149":{"crate_id":18,"path":["object","elf","FileHeader64"],"kind":"struct"},"6:12049:758":{"crate_id":6,"path":["std","i128"],"kind":"primitive"},"18:10316:12020":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:20811:31508":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"24:1007:17006":{"crate_id":24,"path":["typenum","private","PrivateMin"],"kind":"trait"},"1:41882:16603":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"24:1261:5428":{"crate_id":24,"path":["typenum","type_operators","IsGreaterOrEqual"],"kind":"trait"},"5:3217:34936":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"12:1826:11697":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:2788:12852":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:40383:15109":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:2765:229":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"17:2284:22897":{"crate_id":17,"path":["gimli","common","Format"],"kind":"enum"},"1:2359:191":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:2597:116":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"17:3232:12825":{"crate_id":17,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:7642:16968":{"crate_id":6,"path":["std","sealed","Sealed"],"kind":"trait"},"6:4046:17269":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"6:11037:2041":{"crate_id":6,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:2670:12847":{"crate_id":17,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:7065:13035":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"18:9207:11987":{"crate_id":18,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:12582:194":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"21:105:16959":{"crate_id":21,"path":["blobby","Blob5Iterator"],"kind":"struct"},"18:10771:12028":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:2829:16317":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"18:12970:12366":{"crate_id":18,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"24:6192:5407":{"crate_id":24,"path":["typenum","array","TArr"],"kind":"struct"},"24:1251:5461":{"crate_id":24,"path":["typenum","type_operators","IsNotEqual"],"kind":"trait"},"19:766:27820":{"crate_id":19,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"5:3594:5363":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:3056:16492":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"19:690:14782":{"crate_id":19,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:4319:15512":{"crate_id":6,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"18:13215:12407":{"crate_id":18,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"12:1121:15471":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"18:10186:14796":{"crate_id":18,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:41693:15154":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:22231:15085":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"18:12531:12283":{"crate_id":18,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:2379:17217":{"crate_id":6,"path":["std","fs","read_link"],"kind":"function"},"18:12554:12286":{"crate_id":18,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"7:6850:14238":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:8472:16597":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:1756:14399":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"5:1473:14991":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:2322:125":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"0:0:1754":{"crate_id":0,"path":["sha2"],"kind":"module"},"1:10462:5368":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:9377:11255":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:5310:120":{"crate_id":6,"path":["std","path","Display"],"kind":"struct"},"1:43543:5380":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:9373:11253":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"5:7545:11719":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:7599:11663":{"crate_id":6,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"18:12724:12312":{"crate_id":18,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:10764:15017":{"crate_id":6,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"18:11261:14823":{"crate_id":18,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"18:11535:14829":{"crate_id":18,"path":["object","read","SymbolMap"],"kind":"struct"},"6:7870:14290":{"crate_id":6,"path":["std","fs","FileTimes"],"kind":"struct"},"7:4469:13616":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"7:1733:13505":{"crate_id":7,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:6361:14906":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"21:66:16956":{"crate_id":21,"path":["blobby","Blob2Iterator"],"kind":"struct"},"12:285:14984":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"6:0:1433":{"crate_id":6,"path":["std"],"kind":"module"},"18:12465:12272":{"crate_id":18,"path":["object","macho","FatHeader"],"kind":"struct"},"12:836:15463":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"18:13890:12627":{"crate_id":18,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:5673:12863":{"crate_id":17,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"18:11306:12076":{"crate_id":18,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"7:4973:13829":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:4949:12909":{"crate_id":17,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:41741:14645":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:44447:15213":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:48182:11096":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:5088:12913":{"crate_id":17,"path":["gimli","constants","DwMacro"],"kind":"struct"},"7:5051:13867":{"crate_id":7,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"18:10410:15331":{"crate_id":18,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:42746:14651":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"6:10579:11667":{"crate_id":6,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:2881:12856":{"crate_id":17,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"10:177:22840":{"crate_id":10,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"6:940:15461":{"crate_id":6,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"7:5008:13842":{"crate_id":7,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"24:924:16985":{"crate_id":24,"path":["typenum","private","PrivateCmp"],"kind":"trait"},"18:11201:14813":{"crate_id":18,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"12:1068:15469":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:41950:5363":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"6:8296:17291":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:3234:16493":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:22004:15078":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:11942:15617":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"7:4740:13707":{"crate_id":7,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"19:507:11858":{"crate_id":19,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"18:9607:15304":{"crate_id":18,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"24:1878:16977":{"crate_id":24,"path":["typenum","uint","GetBit"],"kind":"trait"},"18:10929:12060":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"18:14145:12693":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"18:9242:11988":{"crate_id":18,"path":["object","endian","I32Bytes"],"kind":"struct"},"18:11573:14830":{"crate_id":18,"path":["object","read","ObjectMap"],"kind":"struct"},"5:7245:11194":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"18:13554:12532":{"crate_id":18,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:6279:12927":{"crate_id":17,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"18:13135:12399":{"crate_id":18,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:8147:13035":{"crate_id":6,"path":["std","io","util","Empty"],"kind":"struct"},"18:10646:12089":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:2755:223":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"17:6204:15385":{"crate_id":17,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"7:4984:13835":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"5:2223:34541":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"0:103:1753":{"crate_id":0,"path":["sha2","Sha512"],"kind":"type_alias"},"4:336:5328":{"crate_id":4,"path":["digest","core_api","ExtendableOutputCore"],"kind":"trait"},"18:14460:12795":{"crate_id":18,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"7:4879:1022":{"crate_id":7,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"18:13897:12629":{"crate_id":18,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:2888:16484":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"4:0:1708":{"crate_id":4,"path":["digest"],"kind":"module"},"1:42148:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:2744:12850":{"crate_id":17,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:12053:1543":{"crate_id":6,"path":["std","u64"],"kind":"primitive"},"1:41587:14634":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:32311:11264":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"7:4764:13718":{"crate_id":7,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:7677:200":{"crate_id":17,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"7:0:837":{"crate_id":7,"path":["libc"],"kind":"module"},"18:8713:23845":{"crate_id":18,"path":["object","common","SectionKind"],"kind":"enum"},"6:11607:36515":{"crate_id":6,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"5:6798:11726":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"1:10203:5363":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"6:7540:15588":{"crate_id":6,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:12555:28082":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:2321:12826":{"crate_id":17,"path":["gimli","common","Encoding"],"kind":"struct"},"7:4895:13781":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:5384:23783":{"crate_id":17,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:7731:17176":{"crate_id":6,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:8838:14358":{"crate_id":6,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:7918:15542":{"crate_id":6,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"18:12711:12311":{"crate_id":18,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:41873:15625":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:46349:14696":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:4477:17292":{"crate_id":6,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"7:4908:13791":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"18:10112:15319":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:10490:5369":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:46297:14694":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"7:1696:13492":{"crate_id":7,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:12040:1525":{"crate_id":6,"path":["std","tuple"],"kind":"primitive"},"6:12055:808":{"crate_id":6,"path":["std","isize"],"kind":"primitive"},"18:13274:12076":{"crate_id":18,"path":["object","macho","Relocation"],"kind":"struct"},"5:7425:15061":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"6:1839:15490":{"crate_id":6,"path":["std","env","ArgsOs"],"kind":"struct"},"1:40284:15101":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"24:612:5412":{"crate_id":24,"path":["typenum","marker_traits","Zero"],"kind":"trait"},"5:676:234":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"18:14536:12811":{"crate_id":18,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:42774:110":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:44168:15193":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:43716:5366":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"5:2962:14390":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:44100:16650":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"18:10603:14807":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"7:7540:14271":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:7846:31631":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:47683:14716":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:5758:15526":{"crate_id":6,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"6:7667:14289":{"crate_id":6,"path":["std","thread","ThreadId"],"kind":"struct"},"6:531:11627":{"crate_id":6,"path":["std","thread","Packet"],"kind":"struct"},"4:418:2028":{"crate_id":4,"path":["digest","Update"],"kind":"trait"},"1:4243:15612":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"6:923:15458":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:44685:15632":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"23:195:5478":{"crate_id":23,"path":["generic_array","iter","GenericArrayIter"],"kind":"struct"},"1:41621:16592":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:6332:12858":{"crate_id":17,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"12:1838:14992":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:5564:14050":{"crate_id":6,"path":["std","process","exit"],"kind":"function"},"6:12048:762":{"crate_id":6,"path":["std","i64"],"kind":"primitive"},"1:2608:128":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:2353:184":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"24:835:16966":{"crate_id":24,"path":["typenum","private","PrivateIntegerAdd"],"kind":"trait"},"1:3000:5354":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"18:10012:12015":{"crate_id":18,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:3461:12884":{"crate_id":17,"path":["gimli","arch","RiscV"],"kind":"struct"},"18:9086:11983":{"crate_id":18,"path":["object","endian","BigEndian"],"kind":"struct"},"17:4527:12896":{"crate_id":17,"path":["gimli","constants","DwDs"],"kind":"struct"},"18:13778:12600":{"crate_id":18,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:44748:15223":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"6:2573:11631":{"crate_id":6,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"7:4543:13655":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"12:695:15457":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"6:3418:11637":{"crate_id":6,"path":["std","io","Guard"],"kind":"struct"},"7:4664:13675":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"5:0:291":{"crate_id":5,"path":["alloc"],"kind":"module"},"4:383:2040":{"crate_id":4,"path":["digest","digest","DynDigest"],"kind":"trait"},"17:5727:14848":{"crate_id":17,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:21364:16968":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"6:7026:11659":{"crate_id":6,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:42756:68":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"18:9790:36690":{"crate_id":18,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:43702:11990":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:46105:14689":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"7:573:13349":{"crate_id":7,"path":["libc","unix","itimerval"],"kind":"struct"},"1:6869:28503":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:5830:11642":{"crate_id":6,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:42520:11255":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"7:4395:13581":{"crate_id":7,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"18:10520:14801":{"crate_id":18,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"18:12765:12319":{"crate_id":18,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"24:844:16988":{"crate_id":24,"path":["typenum","private","PrivatePow"],"kind":"trait"},"1:11642:15165":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"7:4781:13729":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"7:6028:14039":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"18:11316:12079":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:47041:14711":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"7:4818:13744":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:9381:196":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"18:14378:12778":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"24:5780:5319":{"crate_id":24,"path":["typenum","int","NInt"],"kind":"struct"},"6:8930:17365":{"crate_id":6,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:2381:17218":{"crate_id":6,"path":["std","fs","canonicalize"],"kind":"function"},"7:6022:14036":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:40502:15038":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"7:506:13307":{"crate_id":7,"path":["libc","unix","rusage"],"kind":"struct"},"6:555:15477":{"crate_id":6,"path":["std","thread","JoinHandle"],"kind":"struct"},"18:10547:14803":{"crate_id":18,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"18:10139:23884":{"crate_id":18,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:40310:15104":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"6:10829:14331":{"crate_id":6,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:48034:11087":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"19:515:11861":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:11477:15508":{"crate_id":6,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"7:4800:13737":{"crate_id":7,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"18:10738:15355":{"crate_id":18,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:32304:15621":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:10310:5367":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:6171:196":{"crate_id":17,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"18:11547:12103":{"crate_id":18,"path":["object","read","SymbolMapName"],"kind":"struct"},"18:10685:15349":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:10474:11666":{"crate_id":6,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:3995:15610":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:4966:17324":{"crate_id":6,"path":["std","panic","always_abort"],"kind":"function"},"17:7736:13048":{"crate_id":17,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:45902:14681":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:6167:11651":{"crate_id":6,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:7544:14967":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"6:3114:15498":{"crate_id":6,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"6:3225:15501":{"crate_id":6,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:2477:16968":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"22:46:1873":{"crate_id":22,"path":["crypto_common","AlgorithmName"],"kind":"trait"},"17:2472:12839":{"crate_id":17,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"7:4716:13697":{"crate_id":7,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"12:667:15456":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"6:7749:17198":{"crate_id":6,"path":["std","env","VarError"],"kind":"enum"},"7:4638:13673":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"5:6306:17078":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:8969:14364":{"crate_id":6,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"18:10980:12015":{"crate_id":18,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"7:4456:13611":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:7441:5762":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"7:4678:13676":{"crate_id":7,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:46887:14708":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:8824:14357":{"crate_id":6,"path":["std","process","ExitStatus"],"kind":"struct"},"18:10903:15356":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"7:5882:13959":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"19:719:11879":{"crate_id":19,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"19:671:15286":{"crate_id":19,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:45981:14684":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:46040:14687":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:10972:35153":{"crate_id":6,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"5:685:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"7:4556:13659":{"crate_id":7,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:22579:177":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"5:3212:14992":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"21:46:128":{"crate_id":21,"path":["blobby","Error"],"kind":"enum"},"6:1587:14995":{"crate_id":6,"path":["std","collections","hash","set","Union"],"kind":"struct"},"22:75:11853":{"crate_id":22,"path":["crypto_common","InvalidLength"],"kind":"struct"},"1:2871:16481":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:43999:15180":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"18:12280:12228":{"crate_id":18,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:9157:15016":{"crate_id":6,"path":["std","time","SystemTimeError"],"kind":"struct"},"18:14042:12664":{"crate_id":18,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:10533:15500":{"crate_id":6,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"7:5775:13907":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:40480:15624":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:8284:15006":{"crate_id":6,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:2921:212":{"crate_id":6,"path":["std","io","error","Result"],"kind":"type_alias"},"19:644:11858":{"crate_id":19,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"7:6565:14096":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"7:4518:13643":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:6041:23787":{"crate_id":17,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:43920:15175":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"5:276:2037":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"18:12810:12324":{"crate_id":18,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:43027:11465":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"5:6079:11637":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:42384:11098":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"24:1071:16971":{"crate_id":24,"path":["typenum","private","IsGreaterPrivate"],"kind":"trait"},"1:9379:11256":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:2927:16490":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:20781:31364":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:0:452":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:20964:16690":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:46151:14690":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"18:9701:15305":{"crate_id":18,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:22546:176":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:2766:228":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"18:12136:12187":{"crate_id":18,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:43660:14662":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"7:482:13296":{"crate_id":7,"path":["libc","unix","utimbuf"],"kind":"struct"},"6:7853:11928":{"crate_id":6,"path":["std","fs","Metadata"],"kind":"struct"},"25:0:1871":{"crate_id":25,"path":["block_buffer"],"kind":"module"},"7:6136:14064":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:40195:15096":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"18:12208:12201":{"crate_id":18,"path":["object","elf","Verdef"],"kind":"struct"},"17:6485:12861":{"crate_id":17,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"18:12196:12200":{"crate_id":18,"path":["object","elf","Versym"],"kind":"struct"},"6:12056:1599":{"crate_id":6,"path":["std","usize"],"kind":"primitive"},"7:5080:13876":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"12:0:2017":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"6:11159:14358":{"crate_id":6,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:10107:15571":{"crate_id":6,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"1:43512:5360":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"18:10292:12015":{"crate_id":18,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:5121:12914":{"crate_id":17,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:30509:11140":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"18:9896:23867":{"crate_id":18,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"5:3204:14994":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"6:8946:17367":{"crate_id":6,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:9114:221":{"crate_id":6,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"5:1288:15465":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"18:11124:15369":{"crate_id":18,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"7:494:13302":{"crate_id":7,"path":["libc","unix","timespec"],"kind":"struct"},"18:14126:12688":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"18:12830:12325":{"crate_id":18,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:10989:5381":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:44693:14669":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:10539:15504":{"crate_id":6,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"25:93:128":{"crate_id":25,"path":["block_buffer","Error"],"kind":"struct"},"6:2211:129":{"crate_id":6,"path":["std","fs","File"],"kind":"struct"},"25:22:16968":{"crate_id":25,"path":["block_buffer","sealed","Sealed"],"kind":"trait"},"1:4:1035":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"5:7474:15607":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"10:357:22788":{"crate_id":10,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"5:1523:15596":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:1041:14961":{"crate_id":6,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"18:10265:15325":{"crate_id":18,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:21271:16688":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"7:1709:13496":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:8134:14979":{"crate_id":17,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"7:4929:13806":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:2526:241":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"7:4291:13511":{"crate_id":7,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:868:14990":{"crate_id":6,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"6:11198:14370":{"crate_id":6,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"17:2359:12834":{"crate_id":17,"path":["gimli","common","Register"],"kind":"struct"},"18:9488:36688":{"crate_id":18,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:1778:15487":{"crate_id":6,"path":["std","env","VarsOs"],"kind":"struct"},"7:568:13347":{"crate_id":7,"path":["libc","unix","sigval"],"kind":"struct"},"18:11272:14824":{"crate_id":18,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"7:4824:13745":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:46181:14691":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:11982:15591":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:4248:15613":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:11679:15170":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:11753:5383":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"19:755:14792":{"crate_id":19,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:5053:15514":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"12:1818:5362":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:41992:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:5976:11640":{"crate_id":6,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"22:22:1875":{"crate_id":22,"path":["crypto_common","BlockSizeUser"],"kind":"trait"},"18:12074:12179":{"crate_id":18,"path":["object","elf","Syminfo64"],"kind":"struct"},"0:100:1747":{"crate_id":0,"path":["sha2","Sha512_224"],"kind":"type_alias"},"4:328:1876":{"crate_id":4,"path":["digest","core_api","Buffer"],"kind":"type_alias"},"17:4462:12894":{"crate_id":17,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:8894:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:2904:13000":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"10:237:6053":{"crate_id":10,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"7:119:17457":{"crate_id":7,"path":["libc","unix","FILE"],"kind":"enum"},"4:339:5329":{"crate_id":4,"path":["digest","core_api","XofReaderCore"],"kind":"trait"},"17:4986:12910":{"crate_id":17,"path":["gimli","constants","DwLns"],"kind":"struct"},"5:5923:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:46729:14705":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:8806:15556":{"crate_id":6,"path":["std","process","CommandArgs"],"kind":"struct"},"18:13739:12591":{"crate_id":18,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"18:8659:23831":{"crate_id":18,"path":["object","common","AddressSize"],"kind":"enum"},"18:13981:12648":{"crate_id":18,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"5:5769:235":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:6268:36684":{"crate_id":17,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:45880:14680":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"7:4833:13748":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:43494:5361":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"15:215:14981":{"crate_id":15,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:8555:5362":{"crate_id":6,"path":["std","path","Iter"],"kind":"struct"},"7:6720:14160":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"18:14090:12679":{"crate_id":18,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"16:394:22888":{"crate_id":16,"path":["addr2line","DebugFile"],"kind":"enum"},"1:43595:5374":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"18:12888:12351":{"crate_id":18,"path":["object","macho","DylibModule32"],"kind":"struct"},"5:4032:11681":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:5992:208":{"crate_id":6,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"7:7558:14274":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"18:13949:12638":{"crate_id":18,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"5:1482:15472":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"19:699:14783":{"crate_id":19,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"18:13202:12406":{"crate_id":18,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"7:4787:13732":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:40572:15123":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:952:15464":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:41967:185":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"6:904:11715":{"crate_id":6,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"7:4704:13690":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:9844:11752":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:6696:12958":{"crate_id":17,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:2478:6100":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:8154:15448":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:40826:15137":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:5982:14873":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:11817:11677":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:2763:11143":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"6:3390:15145":{"crate_id":6,"path":["std","io","util","Repeat"],"kind":"struct"},"7:4944:13815":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"18:10672:15346":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:40672:15132":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:7768:12865":{"crate_id":17,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:30469:5475":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:4002:17267":{"crate_id":6,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:1576:14993":{"crate_id":6,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"7:6744:14172":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"7:5044:13864":{"crate_id":7,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"7:5920:13987":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"7:6820:14223":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:5963:15378":{"crate_id":17,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"15:165:22860":{"crate_id":15,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:6189:14903":{"crate_id":17,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"7:7609:14286":{"crate_id":7,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"18:12876:12349":{"crate_id":18,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"18:13611:12570":{"crate_id":18,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:2893:16485":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"5:1776:11715":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:2839:12992":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:44122:15183":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:12050:1544":{"crate_id":6,"path":["std","u8"],"kind":"primitive"},"5:2966:32074":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"24:828:16991":{"crate_id":24,"path":["typenum","private","PrivateSub"],"kind":"trait"},"8:32:22759":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"6:6600:17362":{"crate_id":6,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:21395:16694":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"18:11048:15360":{"crate_id":18,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"7:4535:13650":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"18:256:15287":{"crate_id":18,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:7568:12875":{"crate_id":17,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"6:8860:5362":{"crate_id":6,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:41670:28632":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:8115:14976":{"crate_id":17,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:44463:15217":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"24:6250:5349":{"crate_id":24,"path":["typenum","Greater"],"kind":"struct"},"1:42031:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"18:13188:12403":{"crate_id":18,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"7:1681:13483":{"crate_id":7,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"18:9390:129":{"crate_id":18,"path":["object","read","any","File"],"kind":"enum"},"17:6467:14913":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"18:8848:23849":{"crate_id":18,"path":["object","common","RelocationKind"],"kind":"enum"},"1:22612:178":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:42513:11253":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"7:5863:13957":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:5419:11983":{"crate_id":17,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"7:562:13344":{"crate_id":7,"path":["libc","unix","linger"],"kind":"struct"},"18:9350:11992":{"crate_id":18,"path":["object","read","util","ByteString"],"kind":"struct"},"18:13632:12575":{"crate_id":18,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"19:614:36701":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:40581:15124":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:7809:16582":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"12:630:5362":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"7:6077:14052":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:4497:12895":{"crate_id":17,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:21265:16686":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:44459:15216":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"4:512:1879":{"crate_id":4,"path":["digest","core_api","TruncSide"],"kind":"enum"},"6:3740:15508":{"crate_id":6,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"7:6589:14113":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"21:92:16958":{"crate_id":21,"path":["blobby","Blob4Iterator"],"kind":"struct"},"7:1527:13379":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"7:4770:13721":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"13:0:2018":{"crate_id":13,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:40530:15116":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"7:5015:13845":{"crate_id":7,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"5:1514:200":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:3305:16499":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:8236:15551":{"crate_id":6,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:32257:6099":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:40256:15099":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"19:636:11878":{"crate_id":19,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:7880:15005":{"crate_id":6,"path":["std","fs","Permissions"],"kind":"struct"},"1:48065:11089":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"5:878:11689":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:414:165":{"crate_id":6,"path":["std","thread","local","LocalKey"],"kind":"struct"},"24:942:17000":{"crate_id":24,"path":["typenum","private","PrivateDiv"],"kind":"trait"},"6:9024:15564":{"crate_id":6,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:41071:14630":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"18:13667:12576":{"crate_id":18,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"6:4188:17290":{"crate_id":6,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"12:97:14983":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:10951:13269":{"crate_id":6,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"6:5084:15514":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:7769:15539":{"crate_id":6,"path":["std","error","private","Internal"],"kind":"struct"},"6:10536:15502":{"crate_id":6,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"6:4499:17293":{"crate_id":6,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:9031:15565":{"crate_id":6,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:12533:151":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"5:6886:247":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"5:6558:11194":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"7:4606:13670":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"23:403:1929":{"crate_id":23,"path":["generic_array","GenericArray"],"kind":"struct"},"4:424:2030":{"crate_id":4,"path":["digest","FixedOutputReset"],"kind":"trait"},"7:5058:13870":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"7:1545:13390":{"crate_id":7,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"5:2141:15044":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:4719:12901":{"crate_id":17,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:45772:14676":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"7:5967:14013":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"18:13826:12607":{"crate_id":18,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"15:202:17070":{"crate_id":15,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:7580:11661":{"crate_id":6,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:10343:35163":{"crate_id":6,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"18:11490:12101":{"crate_id":18,"path":["object","read","SymbolIndex"],"kind":"struct"},"18:13914:12632":{"crate_id":18,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:9041:685":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"18:3232:15298":{"crate_id":18,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:4239:15511":{"crate_id":6,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:2380:12835":{"crate_id":17,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:1600:1407":{"crate_id":1,"path":["core","mem","size_of"],"kind":"function"},"6:6254:11640":{"crate_id":6,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"7:1638:13457":{"crate_id":7,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:43766:15168":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:10431:15556":{"crate_id":6,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"24:1202:5413":{"crate_id":24,"path":["typenum","type_operators","Min"],"kind":"trait"},"7:1590:13421":{"crate_id":7,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"18:14434:12786":{"crate_id":18,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"5:7412:15059":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:7863:15004":{"crate_id":6,"path":["std","fs","OpenOptions"],"kind":"struct"},"7:4616:13671":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"18:10726:15354":{"crate_id":18,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"18:12098:12183":{"crate_id":18,"path":["object","elf","Rela32"],"kind":"struct"},"7:5890:13964":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:3764:12886":{"crate_id":17,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:2317:190":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"10:507:13272":{"crate_id":10,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:9982:15151":{"crate_id":6,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"7:1702:13493":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:6916:16573":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"18:13906:12630":{"crate_id":18,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:4036:17268":{"crate_id":6,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:5574:12859":{"crate_id":17,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"12:760:11715":{"crate_id":12,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"18:13259:12414":{"crate_id":18,"path":["object","macho","Nlist64"],"kind":"struct"},"6:4702:17319":{"crate_id":6,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"7:1500:13368":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"7:7546:14272":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"5:4985:11637":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:22678:180":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:2596:12844":{"crate_id":17,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"18:10447:15337":{"crate_id":18,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"12:365:11620":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:41840:14648":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:40276:15095":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"21:118:16960":{"crate_id":21,"path":["blobby","Blob6Iterator"],"kind":"struct"},"17:6531:14922":{"crate_id":17,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"6:10838:35775":{"crate_id":6,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"5:7438:11710":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:45920:14682":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:3938:17263":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:31073:185":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"22:36:17013":{"crate_id":22,"path":["crypto_common","KeySizeUser"],"kind":"trait"},"1:21133:16693":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:39592:15622":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"18:11162:12068":{"crate_id":18,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"18:14134:12689":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:43624:5376":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"6:12046:760":{"crate_id":6,"path":["std","i16"],"kind":"primitive"},"1:9341:132":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"6:2213:15494":{"crate_id":6,"path":["std","fs","DirEntry"],"kind":"struct"},"7:4754:13712":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:44467:15218":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:2339:12828":{"crate_id":17,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:7862:14969":{"crate_id":17,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"18:12671:12033":{"crate_id":18,"path":["object","macho","Dylib"],"kind":"struct"},"6:11614:15037":{"crate_id":6,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"18:10916:15357":{"crate_id":18,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"18:10661:15345":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"7:587:13357":{"crate_id":7,"path":["libc","unix","servent"],"kind":"struct"},"4:492:1720":{"crate_id":4,"path":["digest","core_api","wrapper","CoreWrapper"],"kind":"struct"},"18:13816:12606":{"crate_id":18,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"5:7191:11194":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"18:11111:15368":{"crate_id":18,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"18:8686:23844":{"crate_id":18,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:11389:15034":{"crate_id":6,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"12:798:15458":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:6386:12932":{"crate_id":17,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:39516:203":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:21147:16453":{"crate_id":1,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"6:3528:17245":{"crate_id":6,"path":["std","io","BufRead"],"kind":"trait"},"18:504:15290":{"crate_id":18,"path":["object","read","any","Comdat"],"kind":"struct"},"6:12044:659":{"crate_id":6,"path":["std","f64"],"kind":"primitive"},"18:13228:12408":{"crate_id":18,"path":["object","macho","NoteCommand"],"kind":"struct"},"12:844:15464":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"19:707:14785":{"crate_id":19,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:8336:15555":{"crate_id":6,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:3512:36142":{"crate_id":6,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"16:0:2021":{"crate_id":16,"path":["addr2line"],"kind":"module"},"18:11507:23857":{"crate_id":18,"path":["object","read","SymbolSection"],"kind":"enum"},"18:11367:12081":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"7:7272:14248":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:10809:130":{"crate_id":6,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"18:14033:12663":{"crate_id":18,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"5:7231:34538":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:8876:11194":{"crate_id":6,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"18:12945:12363":{"crate_id":18,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:22810:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:7621:23794":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"18:2178:15294":{"crate_id":18,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"23:0:1928":{"crate_id":23,"path":["generic_array"],"kind":"module"},"24:1051:16970":{"crate_id":24,"path":["typenum","private","IsEqualPrivate"],"kind":"trait"},"17:5712:14845":{"crate_id":17,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:43443:15631":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"18:11074:15365":{"crate_id":18,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:7309:5441":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:2851:12995":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"12:2201:15055":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:21219:16684":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:21285:14404":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"18:10494:14798":{"crate_id":18,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:5575:15065":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"18:13989:12649":{"crate_id":18,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"12:2180:13207":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:39786:27912":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:43604:5377":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"6:8882:14360":{"crate_id":6,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"18:13071:12380":{"crate_id":18,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"6:1814:15488":{"crate_id":6,"path":["std","env","SplitPaths"],"kind":"struct"},"17:0:2022":{"crate_id":17,"path":["gimli"],"kind":"module"},"18:9945:12004":{"crate_id":18,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"24:1274:5432":{"crate_id":24,"path":["typenum","type_operators","Logarithm2"],"kind":"trait"},"1:41564:155":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"4:440:2034":{"crate_id":4,"path":["digest","VariableOutput"],"kind":"trait"},"18:12111:12185":{"crate_id":18,"path":["object","elf","Rel64"],"kind":"struct"},"0:101:1749":{"crate_id":0,"path":["sha2","Sha512_256"],"kind":"type_alias"},"1:42070:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"18:10397:15330":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"7:1631:13453":{"crate_id":7,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"18:9650:12015":{"crate_id":18,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:2777:5398":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:47431:14714":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"4:341:1881":{"crate_id":4,"path":["digest","core_api","VariableOutputCore"],"kind":"trait"},"1:44216:15195":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:47885:14719":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:10504:5365":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:4742:17278":{"crate_id":6,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"23:260:5482":{"crate_id":23,"path":["generic_array","sequence","GenericSequence"],"kind":"trait"},"17:8097:14973":{"crate_id":17,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:1747:14396":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"18:10962:12063":{"crate_id":18,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:3503:11252":{"crate_id":6,"path":["std","io","Write"],"kind":"trait"},"18:11872:12134":{"crate_id":18,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"6:8868:15558":{"crate_id":6,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"18:10628:14811":{"crate_id":18,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"18:10278:15326":{"crate_id":18,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"6:7688:11667":{"crate_id":6,"path":["std","thread","Thread"],"kind":"struct"},"1:41030:15141":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"6:4137:35175":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"7:4872:13770":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"7:526:13324":{"crate_id":7,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"18:12062:12176":{"crate_id":18,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:40633:15129":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"7:4380:13574":{"crate_id":7,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"5:5318:11681":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"24:6316:5316":{"crate_id":24,"path":["typenum","uint","UInt"],"kind":"struct"},"17:6425:14910":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:2997:5760":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"18:11358:23980":{"crate_id":18,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"6:3184:35767":{"crate_id":6,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:5517:15064":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"19:80:27809":{"crate_id":19,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"18:10714:15353":{"crate_id":18,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:22238:14423":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"20:0:1053":{"crate_id":20,"path":["panic_unwind"],"kind":"module"},"4:291:5335":{"crate_id":4,"path":["digest","core_api","wrapper","CoreProxy"],"kind":"trait"},"1:45750:14675":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"7:7599:14284":{"crate_id":7,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:8009:15545":{"crate_id":6,"path":["std","io","error","Custom"],"kind":"struct"},"17:4557:12897":{"crate_id":17,"path":["gimli","constants","DwEnd"],"kind":"struct"},"5:629:15594":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"18:13710:12583":{"crate_id":18,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"18:1184:15292":{"crate_id":18,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:2834:12994":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"10:0:2015":{"crate_id":10,"path":["miniz_oxide"],"kind":"module"},"1:40558:15120":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:9812:11747":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"5:4074:5363":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"24:6294:126":{"crate_id":24,"path":["typenum","Equal"],"kind":"struct"},"1:2922:16489":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:43036:145":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"7:4955:13818":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"24:2808:1884":{"crate_id":24,"path":["typenum","generated","consts","U128"],"kind":"type_alias"},"7:6607:14120":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:8545:15008":{"crate_id":6,"path":["std","path","Components"],"kind":"struct"},"7:7295:14261":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:10086:15488":{"crate_id":6,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:5648:15376":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"6:915:15456":{"crate_id":6,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"12:1845:14993":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:1667:1111":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:22125:28649":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"6:1064:15467":{"crate_id":6,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:3446:14334":{"crate_id":6,"path":["std","io","Read"],"kind":"trait"},"6:1980:187":{"crate_id":6,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"7:6573:14101":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"24:1221:5458":{"crate_id":24,"path":["typenum","type_operators","IsEqual"],"kind":"trait"},"6:8302:15554":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"11:36:13211":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"18:12293:12229":{"crate_id":18,"path":["object","elf","HashHeader"],"kind":"struct"},"22:33:1878":{"crate_id":22,"path":["crypto_common","OutputSizeUser"],"kind":"trait"},"18:11886:12135":{"crate_id":18,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:6431:15142":{"crate_id":6,"path":["std","sync","once","Once"],"kind":"struct"},"6:8572:15013":{"crate_id":6,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:6753:14930":{"crate_id":17,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:1561:11697":{"crate_id":6,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"18:10440:15334":{"crate_id":18,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"5:5975:17073":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"19:538:11863":{"crate_id":19,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:42802:71":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"18:2150:23912":{"crate_id":18,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:44451:15214":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"6:6900:11658":{"crate_id":6,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"1:22089:14407":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"18:14514:12805":{"crate_id":18,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"5:3183:34935":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"5:6769:11712":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:40590:15125":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"7:554:13339":{"crate_id":7,"path":["libc","unix","winsize"],"kind":"struct"},"24:989:16965":{"crate_id":24,"path":["typenum","private","PrivateDivInt"],"kind":"trait"},"17:3888:12889":{"crate_id":17,"path":["gimli","constants","DwCfa"],"kind":"struct"},"18:11971:12163":{"crate_id":18,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:9582:141":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"18:13758:12592":{"crate_id":18,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"18:12778:12320":{"crate_id":18,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:47011:14710":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:43019:15157":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"5:6485:11681":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"6:619:15478":{"crate_id":6,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:5417:15519":{"crate_id":6,"path":["std","process","ChildStdout"],"kind":"struct"},"18:13148:12400":{"crate_id":18,"path":["object","macho","SymsegCommand"],"kind":"struct"},"18:10383:15329":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:7597:36680":{"crate_id":17,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:8247:17260":{"crate_id":6,"path":["std","net","Shutdown"],"kind":"enum"},"18:12513:12282":{"crate_id":18,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:42829:128":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"17:3915:12890":{"crate_id":17,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:44735:14672":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"17:7041:14953":{"crate_id":17,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:5621:208":{"crate_id":6,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"18:9985:15315":{"crate_id":18,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:4908:17317":{"crate_id":6,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"18:9921:15310":{"crate_id":18,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:2855:16478":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"18:10165:23885":{"crate_id":18,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:40350:101":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"18:14173:12701":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:8195:14980":{"crate_id":17,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:22165:28667":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"5:1118:32075":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"5:5954:11709":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"15:40:12150":{"crate_id":15,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:7910:119":{"crate_id":6,"path":["std","fs","DirBuilder"],"kind":"struct"},"5:1464:14990":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:7350:152":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:22148:14412":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:2820:11148":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"18:14068:12674":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:11291:11671":{"crate_id":6,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:6879:12974":{"crate_id":17,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"18:11351:12080":{"crate_id":18,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:46003:14685":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"18:13567:12539":{"crate_id":18,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:2635:15497":{"crate_id":6,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"18:11448:23856":{"crate_id":18,"path":["object","read","ObjectKind"],"kind":"enum"},"17:4053:12891":{"crate_id":17,"path":["gimli","constants","DwTag"],"kind":"struct"},"18:13101:12386":{"crate_id":18,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"6:5751:15523":{"crate_id":6,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:2523:133":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"12:2186:36662":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"25:36:1893":{"crate_id":25,"path":["block_buffer","BufferKind"],"kind":"trait"},"1:45726:14674":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:5635:11641":{"crate_id":6,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:1055:15465":{"crate_id":6,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"22:56:17019":{"crate_id":22,"path":["crypto_common","InnerIvInit"],"kind":"trait"},"24:1195:5429":{"crate_id":24,"path":["typenum","type_operators","Len"],"kind":"trait"},"7:6805:14216":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"15:31:15452":{"crate_id":15,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:8983:15559":{"crate_id":6,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:6160:15070":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:5457:11637":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"6:4639:14142":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"6:3974:17264":{"crate_id":6,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"18:13802:12605":{"crate_id":18,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"18:9003:23854":{"crate_id":18,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:9062:31633":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"4:522:1886":{"crate_id":4,"path":["digest","InvalidOutputSize"],"kind":"struct"},"1:21203:16968":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:10228:5366":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"6:2886:11636":{"crate_id":6,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"18:9762:36689":{"crate_id":18,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"12:2168:13205":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:43884:15173":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"18:11815:12122":{"crate_id":18,"path":["object","archive","AixHeader"],"kind":"struct"},"6:1837:15489":{"crate_id":6,"path":["std","env","Args"],"kind":"struct"},"18:13685:12581":{"crate_id":18,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:9331:11252":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"7:5074:13873":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"18:12790:12321":{"crate_id":18,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"18:9972:15314":{"crate_id":18,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"5:4846:206":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:43838:5364":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:6687:14928":{"crate_id":17,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"18:11742:12112":{"crate_id":18,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:1918:14403":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"18:11389:15373":{"crate_id":18,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"14:226:13204":{"crate_id":14,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:12034:1560":{"crate_id":6,"path":["std","unit"],"kind":"primitive"},"17:4613:12899":{"crate_id":17,"path":["gimli","constants","DwVis"],"kind":"struct"},"18:10788:23954":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"18:11098:15367":{"crate_id":18,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:40336:14629":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"5:4426:11704":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"24:2508:1715":{"crate_id":24,"path":["typenum","generated","consts","U28"],"kind":"type_alias"},"6:910:15472":{"crate_id":6,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:43990:15179":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:43734:5370":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"7:595:13362":{"crate_id":7,"path":["libc","unix","protoent"],"kind":"struct"},"22:48:17016":{"crate_id":22,"path":["crypto_common","KeyInit"],"kind":"trait"},"17:7523:14966":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"7:6671:14148":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:3034:16496":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"24:615:5423":{"crate_id":24,"path":["typenum","marker_traits","Bit"],"kind":"trait"},"6:1554:5362":{"crate_id":6,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:39613:14498":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"7:62:17403":{"crate_id":7,"path":["libc","unix","DIR"],"kind":"enum"},"17:5634:14839":{"crate_id":17,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"19:599:36698":{"crate_id":19,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"12:332:11618":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:4641:12900":{"crate_id":17,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"7:1595:13423":{"crate_id":7,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:41650:14643":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:46419:14699":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"6:10960:15522":{"crate_id":6,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"5:2035:14997":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"12:793:15472":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"5:3330:11715":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:3498:11697":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"21:11:16950":{"crate_id":21,"path":["blobby","BlobIterator"],"kind":"struct"},"1:3268:16498":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"3:0:2014":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"18:11173:23978":{"crate_id":18,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:45951:14683":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"18:9852:23866":{"crate_id":18,"path":["object","read","archive","Members"],"kind":"enum"},"1:42786:13071":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"14:110:36664":{"crate_id":14,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:4374:11265":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:32405:11149":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"5:1138:32086":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:9286:15489":{"crate_id":6,"path":["std","sys","unix","args","Args"],"kind":"struct"},"6:3845:15510":{"crate_id":6,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"18:12658:12303":{"crate_id":18,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:43066:15159":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:4310:11735":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:860:11194":{"crate_id":6,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:7313:16583":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"18:12123:12186":{"crate_id":18,"path":["object","elf","Rela64"],"kind":"struct"},"1:12607:15619":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:46651:14704":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:4889:12907":{"crate_id":17,"path":["gimli","constants","DwDsc"],"kind":"struct"},"7:1649:13465":{"crate_id":7,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:3213:5355":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"5:4002:11697":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"18:11151:15371":{"crate_id":18,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:7534:12873":{"crate_id":17,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:4417:12893":{"crate_id":17,"path":["gimli","constants","DwForm"],"kind":"struct"},"19:521:27821":{"crate_id":19,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"7:1520:13376":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:10105:15572":{"crate_id":6,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:46395:14698":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"14:0:2019":{"crate_id":14,"path":["std_detect"],"kind":"module"},"1:42306:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:40489:15111":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"4:484:5334":{"crate_id":4,"path":["digest","core_api","rt_variable","RtVariableCoreWrapper"],"kind":"struct"},"1:21951:15077":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:3304:15505":{"crate_id":6,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:3996:17266":{"crate_id":6,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:3389:69":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"17:7782:14968":{"crate_id":17,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"6:12043:657":{"crate_id":6,"path":["std","f32"],"kind":"primitive"},"6:3263:15502":{"crate_id":6,"path":["std","io","stdio","Stdout"],"kind":"struct"},"6:9206:14374":{"crate_id":6,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:44294:16651":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:6732:1912":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:32293:15539":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"17:4745:12902":{"crate_id":17,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:9001:34988":{"crate_id":6,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"6:9036:15566":{"crate_id":6,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:48129:11093":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"7:5767:13905":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:8294:128":{"crate_id":17,"path":["gimli","read","Error"],"kind":"enum"},"1:43058:15158":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"6:5130:193":{"crate_id":6,"path":["std","path","PathBuf"],"kind":"struct"},"6:10847:35773":{"crate_id":6,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:4749:396":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"10:450:22773":{"crate_id":10,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:26133:250":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"18:11281:12075":{"crate_id":18,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:3032:12880":{"crate_id":17,"path":["gimli","common","DwoId"],"kind":"struct"},"17:7391:23793":{"crate_id":17,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:6499:12878":{"crate_id":17,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"11:0:2016":{"crate_id":11,"path":["adler"],"kind":"module"},"1:45796:14677":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"7:1575:13409":{"crate_id":7,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:9196:35944":{"crate_id":6,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"6:929:17181":{"crate_id":6,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"18:10227:15324":{"crate_id":18,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:4007:103":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"17:5743:14850":{"crate_id":17,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"6:1928:670":{"crate_id":6,"path":["std","ffi"],"kind":"module"},"6:8362:14337":{"crate_id":6,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:7708:12877":{"crate_id":17,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"7:4524:13646":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:9486:15540":{"crate_id":6,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:47931:14720":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"24:642:5443":{"crate_id":24,"path":["typenum","marker_traits","Integer"],"kind":"trait"},"1:1630:600":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"6:4058:17272":{"crate_id":6,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"7:4568:13668":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"12:968:14961":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"5:1503:15457":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"24:621:1883":{"crate_id":24,"path":["typenum","marker_traits","Unsigned"],"kind":"trait"},"18:13244:12410":{"crate_id":18,"path":["object","macho","Nlist32"],"kind":"struct"},"1:2520:149":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"6:7926:15543":{"crate_id":6,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"12:1501:22855":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"7:4368:13571":{"crate_id":7,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"18:12997:12369":{"crate_id":18,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:3049:22926":{"crate_id":17,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:4744:17280":{"crate_id":6,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"7:4328:13538":{"crate_id":7,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:48054:6044":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"7:7529:14267":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"24:2568:1717":{"crate_id":24,"path":["typenum","generated","consts","U48"],"kind":"type_alias"},"7:5737:13880":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"7:6036:14041":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"5:2690:14391":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:1892:15491":{"crate_id":6,"path":["std","error","Report"],"kind":"struct"},"23:369:5469":{"crate_id":23,"path":["generic_array","GenericArrayImplEven"],"kind":"struct"},"7:500:13304":{"crate_id":7,"path":["libc","unix","rlimit"],"kind":"struct"},"10:52:22791":{"crate_id":10,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"6:6151:11648":{"crate_id":6,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"24:653:5444":{"crate_id":24,"path":["typenum","marker_traits","TypeArray"],"kind":"trait"},"6:6984:34991":{"crate_id":6,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"18:13575:12540":{"crate_id":18,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:21186:16689":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"5:2131:11626":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:43270:5391":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:42345:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:9104:167":{"crate_id":6,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"5:7449:227":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"18:434:11935":{"crate_id":18,"path":["object","read","any","Section"],"kind":"struct"},"7:7250:14247":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:42226:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"12:805:17181":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:2993:5759":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:44632:207":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"6:10774:15004":{"crate_id":6,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"6:6199:15528":{"crate_id":6,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:3632:11194":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:7211:11697":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"18:11000:12065":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"12:1538:15474":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"18:11761:12115":{"crate_id":18,"path":["object","read","CompressedData"],"kind":"struct"},"6:7529:11979":{"crate_id":6,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"18:12621:12299":{"crate_id":18,"path":["object","macho","Section64"],"kind":"struct"},"24:1272:5439":{"crate_id":24,"path":["typenum","type_operators","SquareRoot"],"kind":"trait"},"6:2406:17097":{"crate_id":6,"path":["std","io"],"kind":"module"},"1:42506:11254":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:7006:15417":{"crate_id":17,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:47225:14713":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"7:6598:14119":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"18:10240:12004":{"crate_id":18,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"24:1231:5459":{"crate_id":24,"path":["typenum","type_operators","IsGreater"],"kind":"trait"},"18:10059:12008":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:41037:15142":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"7:4304:13520":{"crate_id":7,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"7:5799:13923":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"18:11327:14827":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:39494:204":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"18:13868:12621":{"crate_id":18,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"5:6930:11727":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:2406:12836":{"crate_id":17,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:11371:15533":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:635:15479":{"crate_id":6,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"18:2012:15293":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:39434:202":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:3600:12885":{"crate_id":17,"path":["gimli","arch","X86"],"kind":"struct"},"5:5362:5486":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"5:7349:17046":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"5:5839:11697":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"7:7564:14275":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"5:3800:11715":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"1:41815:5362":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"18:12543:12285":{"crate_id":18,"path":["object","macho","LcStr"],"kind":"struct"},"1:2824:16316":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"6:12032:957":{"crate_id":6,"path":["std","never"],"kind":"primitive"},"25:85:5397":{"crate_id":25,"path":["block_buffer","Lazy"],"kind":"struct"},"6:638:15481":{"crate_id":6,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"7:4810:13741":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"6:4571:17310":{"crate_id":6,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"24:6363:5317":{"crate_id":24,"path":["typenum","uint","UTerm"],"kind":"struct"},"19:590:11866":{"crate_id":19,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:48025:5864":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:22057:14406":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:2595:15496":{"crate_id":6,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"18:11661:12107":{"crate_id":18,"path":["object","read","CodeView"],"kind":"struct"},"1:7359:5763":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:2883:16483":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:9625:11463":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"18:11586:12104":{"crate_id":18,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:3919:11637":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"24:654:5411":{"crate_id":24,"path":["typenum","marker_traits","PowerOfTwo"],"kind":"trait"},"17:8239:13036":{"crate_id":17,"path":["gimli","read","value","Value"],"kind":"enum"},"1:2530:240":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"6:8167:14331":{"crate_id":6,"path":["std","io","IoSlice"],"kind":"struct"},"18:10197:15320":{"crate_id":18,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"6:7765:15538":{"crate_id":6,"path":["std","env","JoinPathsError"],"kind":"struct"},"5:261:11681":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:21014:16453":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"24:2392:16968":{"crate_id":24,"path":["typenum","sealed","Sealed"],"kind":"trait"},"1:11069:1870":{"crate_id":1,"path":["core","slice","raw","from_ref"],"kind":"function"},"23:295:5484":{"crate_id":23,"path":["generic_array","sequence","Lengthen"],"kind":"trait"},"18:11687:23858":{"crate_id":18,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:11937:16630":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"6:8310:15551":{"crate_id":6,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"15:160:15452":{"crate_id":15,"path":["rustc_demangle","Demangle"],"kind":"struct"},"18:14013:12656":{"crate_id":18,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"7:6044:14043":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:2812:5758":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"18:14401:12779":{"crate_id":18,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"18:9780:15307":{"crate_id":18,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:40430:11737":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:9829:11631":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:5017:12911":{"crate_id":17,"path":["gimli","constants","DwLne"],"kind":"struct"},"6:3223:15500":{"crate_id":6,"path":["std","io","stdio","Stdin"],"kind":"struct"},"23:382:5470":{"crate_id":23,"path":["generic_array","GenericArrayImplOdd"],"kind":"struct"},"17:2933:22924":{"crate_id":17,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:2810:12853":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"10:330:13249":{"crate_id":10,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:3464:15507":{"crate_id":6,"path":["std","io","IoSliceMut"],"kind":"struct"},"12:2194:13209":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:3347:17250":{"crate_id":6,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"18:9531:36686":{"crate_id":18,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:10745:15581":{"crate_id":6,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"6:1921:17208":{"crate_id":6,"path":["std","error","Indented"],"kind":"struct"},"1:43866:15172":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:7388:121":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:2644:12846":{"crate_id":17,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:4030:16515":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:8050:13094":{"crate_id":17,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:9479:129":{"crate_id":6,"path":["std","sys","unix","fs","File"],"kind":"struct"},"18:12473:12274":{"crate_id":18,"path":["object","macho","FatArch32"],"kind":"struct"},"4:357:1885":{"crate_id":4,"path":["digest","digest","HashMarker"],"kind":"trait"},"1:2517:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"7:1536:13384":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"18:12024:12170":{"crate_id":18,"path":["object","elf","Sym32"],"kind":"struct"},"17:2574:12843":{"crate_id":17,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"7:5025:13850":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:48159:11095":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"7:1911:18806":{"crate_id":7,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"6:881:14991":{"crate_id":6,"path":["std","collections","hash","map","Values"],"kind":"struct"},"18:12598:12294":{"crate_id":18,"path":["object","macho","Section32"],"kind":"struct"},"1:7497:159":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:8579:15617":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:2898:12999":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:8914:17366":{"crate_id":6,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:40268:15100":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"18:12154:12195":{"crate_id":18,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:6893:12976":{"crate_id":17,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"7:7575:14279":{"crate_id":7,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"18:9660:36691":{"crate_id":18,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:7067:14959":{"crate_id":17,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:21:698":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"25:106:5330":{"crate_id":25,"path":["block_buffer","BlockBuffer"],"kind":"struct"},"18:13085:12382":{"crate_id":18,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"7:6868:14241":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:1821:14402":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"18:14522:12808":{"crate_id":18,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"18:10616:14808":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"6:586:17170":{"crate_id":6,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:39560:5353":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"6:8004:15544":{"crate_id":6,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"18:11934:12150":{"crate_id":18,"path":["object","elf","Ident"],"kind":"struct"},"7:1569:13407":{"crate_id":7,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"18:9328:11990":{"crate_id":18,"path":["object","read","util","Bytes"],"kind":"struct"},"17:6156:14900":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"18:10561:14804":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"4:436:2033":{"crate_id":4,"path":["digest","ExtendableOutputReset"],"kind":"trait"},"18:10698:15351":{"crate_id":18,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"7:4389:13579":{"crate_id":7,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"12:1663:144":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:2918:16488":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"18:13162:12401":{"crate_id":18,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:1544:11637":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"16:327:22882":{"crate_id":16,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:6600:23789":{"crate_id":17,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:2969:22925":{"crate_id":17,"path":["gimli","common","SectionId"],"kind":"enum"},"6:10990:14359":{"crate_id":6,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"5:4234:5362":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:45850:14679":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"5:7463:15062":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:5830:14856":{"crate_id":17,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:11145:14357":{"crate_id":6,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:21000:16692":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"17:2526:12841":{"crate_id":17,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:536:14832":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"21:79:16957":{"crate_id":21,"path":["blobby","Blob3Iterator"],"kind":"struct"},"6:8223:5366":{"crate_id":6,"path":["std","io","Split"],"kind":"struct"},"18:12373:12236":{"crate_id":18,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"18:9998:11972":{"crate_id":18,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"6:4167:17288":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"23:437:5472":{"crate_id":23,"path":["generic_array","ArrayConsumer"],"kind":"struct"},"7:5994:14022":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:4394:11121":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:47969:14721":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"18:3441:15299":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:44435:15210":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"18:14118:12686":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"11:44:13212":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"1:48080:11090":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"6:12031:378":{"crate_id":6,"path":["std","bool"],"kind":"primitive"},"18:9445:15301":{"crate_id":18,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:11595:14385":{"crate_id":6,"path":["std","alloc","System"],"kind":"struct"},"17:8167:15451":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:40291:16536":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"6:11341:14384":{"crate_id":6,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"7:4854:13759":{"crate_id":7,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:43980:15178":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:6435:15529":{"crate_id":6,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:41755:183":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"24:5746:5318":{"crate_id":24,"path":["typenum","int","PInt"],"kind":"struct"},"1:2863:16480":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"6:7893:130":{"crate_id":6,"path":["std","fs","FileType"],"kind":"struct"},"1:22876:174":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"7:474:13291":{"crate_id":7,"path":["libc","unix","group"],"kind":"struct"},"1:2876:12996":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"7:6834:14232":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"7:6688:14149":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:5049:12912":{"crate_id":17,"path":["gimli","constants","DwLnct"],"kind":"struct"},"6:8852:14359":{"crate_id":6,"path":["std","process","ExitCode"],"kind":"struct"},"7:7505:14263":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:3253:28621":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"18:10588:14806":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"6:8988:107":{"crate_id":6,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"24:5814:5322":{"crate_id":24,"path":["typenum","int","Z0"],"kind":"struct"},"6:7134:35172":{"crate_id":6,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"7:4723:13698":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:21012:28377":{"crate_id":1,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"1:40303:15103":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"24:1241:5460":{"crate_id":24,"path":["typenum","type_operators","IsLessOrEqual"],"kind":"trait"},"18:12305:12232":{"crate_id":18,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"18:0:2023":{"crate_id":18,"path":["object"],"kind":"module"},"1:4320:11264":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"24:1153:16987":{"crate_id":24,"path":["typenum","private","PrivateLogarithm2"],"kind":"trait"}},"external_crates":{"26":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"23":{"name":"generic_array","html_root_url":null},"20":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"block_buffer","html_root_url":null},"22":{"name":"crypto_common","html_root_url":null},"19":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"digest","html_root_url":null},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"27":{"name":"cpufeatures","html_root_url":null},"24":{"name":"typenum","html_root_url":"https://docs.rs/typenum/1.16.0/"},"21":{"name":"blobby","html_root_url":"https://docs.rs/blobby/0.3.1/"},"18":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"6":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}