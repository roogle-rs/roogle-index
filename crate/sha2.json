{"root":"0:0:1679","crate_version":"0.10.6","includes_private":false,"index":{"0:6-4:358:1634":{"id":"0:6-4:358:1634","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,23],"end":[54,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"digest::Digest","name":"Digest","id":"4:358:1634","glob":false}},"b:1:3327-0:127:1653":{"id":"b:1:3327-0:127:1653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2675:5669","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3325:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3329:1468"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11877:14715":{"id":"1:11877:14715","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"1:42637:11833","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11930:34220":{"id":"1:11930:34220","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:11552:16507","`DoubleEndedIterator`":"1:7174:120","prim@char":"6:11910:412","str::matches":"1:11927:1905"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"1:42873:14860","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11557:15304","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11557:15304","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11572:16513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:99:1670":{"id":"0:99:1670","crate_id":0,"name":"Sha256","span":{"filename":"src/lib.rs","begin":[87,0],"end":[87,84]},"visibility":"public","docs":"SHA-256 hasher.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"CoreWrapper","id":"4:492:1645","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CtVariableCoreWrapper","id":"4:473:1646","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"U32","id":"24:2520:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"OidSha256","id":"0:361:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"1:11863:5821":{"id":"1:11863:5821","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:40661:177"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9733:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9733:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11867:15598":{"id":"1:11867:15598","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9733:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9733:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:2537:1455":{"id":"1:2537:1455","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:40803:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"1:2507:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:676:27680":{"id":"5:676:27680","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11909:34214":{"id":"1:11909:34214","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:11552:16507","str::split":"1:11900:34212","prim@char":"6:11910:412","`DoubleEndedIterator`":"1:7174:120","str::rsplit_terminator":"1:11912:34215"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"1:42701:14852","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11557:15304","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:69:1807":{"id":"0:69:1807","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[107,4],"end":[110,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["blocks",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"Block","id":"22:12:1787","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3327-0:132:1654":{"id":"b:1:3327-0:132:1654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2675:5669","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3325:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3329:1468"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11947:34228":{"id":"1:11947:34228","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"6:11910:412","self::pattern":"1:11552:16507"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11557:15304","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11557:15304","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:11577:16512","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:65:1805":{"id":"0:65:1805","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[98,4],"end":[98,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5230","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5230","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5230","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5230","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5230","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5230","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5230","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5230","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UTerm","id":"24:6363:5231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B1","id":"24:5724:5235","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5234","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5234","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5234","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5234","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5234","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5234","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5234","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"a:1:2682:226-0:132:1654":{"id":"a:1:2682:226-0:132:1654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2682:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:57:1815":{"id":"0:57:1815","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[60,4],"end":[68,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buffer",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Buffer","id":"4:328:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}}}}],["out",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Output","id":"22:16:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:100:1672":{"id":"0:100:1672","crate_id":0,"name":"Sha512_224","span":{"filename":"src/lib.rs","begin":[89,0],"end":[89,92]},"visibility":"public","docs":"SHA-512/224 hasher.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"CoreWrapper","id":"4:492:1645","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CtVariableCoreWrapper","id":"4:473:1646","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"U28","id":"24:2508:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"OidSha512_224","id":"0:425:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"1:11918:34217":{"id":"1:11918:34217","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"6:11910:412","str::splitn":"1:11915:34216","self::pattern":"1:11552:16507"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"1:42773:5277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11557:15304","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11557:15304","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11572:16513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:135":{"id":"0:135","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[89,9],"end":[89,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2249:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:136:416"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:132:1654":{"id":"0:132:1654","crate_id":0,"name":"Sha512VarCore","span":{"filename":"src/core_api.rs","begin":[90,0],"end":[93,1]},"visibility":"public","docs":"Core block-level SHA-512 hasher with variable output size.\n\nSupports initialization only for 28, 32, 48, and 64 byte output sizes,\ni.e. 224, 256, 384, and 512 bits respectively.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:8185:16473-0:132:1654","a:1:2732:5670-0:132:1654","a:1:2682:226-0:132:1654","a:1:2668:218-0:132:1654","a:1:8186:16472-0:132:1654","b:1:2236-0:132:1654","b:1:2538-0:132:1654","b:1:2233-0:132:1654","b:1:2527-0:132:1654","b:1:2523-0:132:1654","b:1:3327-0:132:1654","b:1:2533-0:132:1654","b:5:672-0:132:1654","b:24:1171-0:132:1654","0:72","0:68","0:63","0:79","0:77","0:64","0:70","0:135","0:66"]}},"0:103:1678":{"id":"0:103:1678","crate_id":0,"name":"Sha512","span":{"filename":"src/lib.rs","begin":[95,0],"end":[95,84]},"visibility":"public","docs":"SHA-512 hasher.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"CoreWrapper","id":"4:492:1645","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CtVariableCoreWrapper","id":"4:473:1646","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"U64","id":"24:2616:1643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"OidSha512","id":"0:393:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"a:1:8186:16472-0:127:1653":{"id":"a:1:8186:16472-0:127:1653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8186:16472","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:5-4:0:1633":{"id":"0:5-4:0:1633","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,17],"end":[54,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"digest","name":"digest","id":"4:0:1633","glob":false}},"0:46":{"id":"0:46","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[25,0],"end":[27,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"22:22:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:47:1805"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:77":{"id":"0:77","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[145,0],"end":[150,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"22:46:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:78:1828"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[113,0],"end":[115,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"22:33:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:71:1809"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11852:11089":{"id":"1:11852:11089","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[95,0],"end":[95,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:357:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11900:34212":{"id":"1:11900:34212","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:11552:16507","`DoubleEndedIterator`":"1:7174:120","prim@char":"6:11910:412","str::split_whitespace":"1:11878:27823","str::rsplit":"1:11906:34213"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"1:42651:5279","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11557:15304","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2732:5670-0:127:1653":{"id":"a:1:2732:5670-0:127:1653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2732:5670","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:11882:27838":{"id":"1:11882:27838","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"1:42943:14865","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2538-0:132:1654":{"id":"b:1:2538-0:132:1654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2497:148","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2507:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2541:127","1:2542:1454"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11959:34232":{"id":"1:11959:34232","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:11910:412","self::pattern":"1:11552:16507"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11557:15304","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11557:15304","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11572:16513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11850":{"id":"1:11850","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["1:11851:802","1:11852:11089","1:11853:34199","1:11854:34200","1:11856:34201","1:11859:34202","1:11860:34203","1:11861:312","1:11862:5815","1:11863:5821","1:11865:15597","1:11867:15598","1:11869:15599","1:11871:34204","1:11872:34205","1:11873:34206","1:11874:34207","1:11875:14866","1:11876:14875","1:11877:14715","1:11878:27823","1:11879:27839","1:11880:34208","1:11881:34209","1:11882:27838","1:11883:31064","1:11886:34210","1:11889:34211","1:11892:11127","1:11896:11088","1:11900:34212","1:11903:27800","1:11906:34213","1:11909:34214","1:11912:34215","1:11915:34216","1:11918:34217","1:11921:34218","1:11924:34219","1:11927:1905","1:11930:34220","1:11933:34221","1:11936:34222","1:11939:34223","1:11941:34224","1:11943:34225","1:11945:34226","1:11946:34227","1:11947:34228","1:11950:34229","1:11953:34230","1:11956:34231","1:11959:34232","1:11962:34233","1:11965:34234","1:11968:34235","1:11970:15817","1:11971:15821","1:11972:15822","1:11973:15823","1:11974:34236","1:11976:16385","1:11977:34237"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:2541:127":{"id":"1:2541:127","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"1:31759:5992","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"1:11853:34199":{"id":"1:11853:34199","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2238:27674":{"id":"1:2238:27674","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11875:14866":{"id":"1:11875:14866","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"6:11910:412"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"1:42621:14846","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2527-0:132:1654":{"id":"b:1:2527-0:132:1654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2529:685"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2533-0:132:1654":{"id":"b:1:2533-0:132:1654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2507:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2503:236","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2536:127","1:2537:1455"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11974:34236":{"id":"1:11974:34236","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4514:34236"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"1:42950:14787","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:24:1171-0:132:1654":{"id":"b:24:1171-0:132:1654","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.16.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"24:1168:5368","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["24:1173:184"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:80:659":{"id":"0:80:659","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[154,4],"end":[156,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:9007:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8996:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11970:15817":{"id":"1:11970:15817","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:47:1805":{"id":"0:47:1805","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[26,4],"end":[26,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5230","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5230","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5230","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5230","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5230","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5230","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5230","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UTerm","id":"24:6363:5231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B1","id":"24:5724:5235","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5234","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5234","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5234","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5234","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5234","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5234","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"b:1:2527-0:127:1653":{"id":"b:1:2527-0:127:1653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2529:685"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:2235:1862":{"id":"1:2235:1862","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:61":{"id":"0:61","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[78,0],"end":[83,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9048:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:62:659"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2233-0:127:1653":{"id":"b:1:2233-0:127:1653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2675:5669","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2227:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2235:1862"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:2682:226-0:127:1653":{"id":"a:1:2682:226-0:127:1653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2682:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[17,9],"end":[17,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2249:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:131:416"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:55:1810":{"id":"0:55:1810","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[46,4],"end":[46,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"resolved_path","inner":{"name":"TruncSide","id":"4:512:1792","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}},"1:11871:34204":{"id":"1:11871:34204","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"6:11916:1379","str::slice_mut_unchecked":"1:11872:34205","crate::ops::Index":"1:2989:16358"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:11878:27823":{"id":"1:11878:27823","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:11879:27839"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"1:42925:14863","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11927:1905":{"id":"1:11927:1905","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:11552:16507","`DoubleEndedIterator`":"1:7174:120","prim@char":"6:11910:412","str::matches":"1:11927:1905"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"1:42855:14859","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11557:15304","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11921:34218":{"id":"1:11921:34218","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11557:15304","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:8185:16473-0:132:1654":{"id":"a:1:8185:16473-0:132:1654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8185:16473","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:1:8186:16472-0:132:1654":{"id":"a:1:8186:16472-0:132:1654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8186:16472","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:11883:31064":{"id":"1:11883:31064","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"6:11910:412","self::pattern":"1:11552:16507"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11557:15304","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:674:14726":{"id":"5:674:14726","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"1:11941:34224":{"id":"1:11941:34224","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11956:34231":{"id":"1:11956:34231","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:11910:412","self::pattern":"1:11552:16507"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11557:15304","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11557:15304","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11572:16513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11977:34237":{"id":"1:11977:34237","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4512:34237"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"1:42968:14780","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2233-0:132:1654":{"id":"b:1:2233-0:132:1654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2675:5669","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2227:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2235:1862"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11968:34235":{"id":"1:11968:34235","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:11514:126","`FromStr`":"1:11513:16190"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:40803:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"1:11513:16190","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:11513:16190","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:64":{"id":"0:64","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[97,0],"end":[99,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"22:22:1788","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:65:1805"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:67:1806":{"id":"0:67:1806","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[102,4],"end":[102,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Eager","id":"25:77:1785","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"1:11973:15823":{"id":"1:11973:15823","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:56:929":{"id":"0:56:929","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[49,4],"end":[57,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["output_size",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:40803:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"InvalidOutputSize","id":"4:522:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:50":{"id":"0:50","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[33,0],"end":[39,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:330:1793","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:51:1807"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5322:34906":{"id":"5:5322:34906","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7179:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11886:34210":{"id":"1:11886:34210","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"6:11910:412","self::pattern":"1:11552:16507"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11557:15304","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5316:11037":{"id":"5:5316:11037","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7179:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11557:15304","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11971:15821":{"id":"1:11971:15821","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5333:15818":{"id":"5:5333:15818","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:11972:15822"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3329:1468":{"id":"1:3329:1468","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"1:38987:14336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2536:127":{"id":"1:2536:127","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"1:2507:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"b:1:2533-0:127:1653":{"id":"b:1:2533-0:127:1653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2507:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2503:236","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2536:127","1:2537:1455"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11962:34233":{"id":"1:11962:34233","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:11910:412","self::pattern":"1:11552:16507"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11557:15304","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11903:27800":{"id":"1:11903:27800","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"6:11910:412","self::pattern":"1:11552:16507"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"1:11376:5296","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11557:15304","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11869:15599":{"id":"1:11869:15599","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9733:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9733:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:73:1810":{"id":"0:73:1810","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[118,4],"end":[118,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"resolved_path","inner":{"name":"TruncSide","id":"4:512:1792","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}},"5:5314":{"id":"5:5314","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5315:34904","5:5316:11037","5:5319:34905","5:5322:34906","5:5330:34907","5:5331:34908","5:5332:16451","5:5333:15818","5:5334:15819"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2668:218-0:132:1654":{"id":"a:1:2668:218-0:132:1654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2668:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:71:1809":{"id":"0:71:1809","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[114,4],"end":[114,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5230","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5230","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5230","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5230","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5230","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5230","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5230","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UTerm","id":"24:6363:5231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B1","id":"24:5724:5235","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5234","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5234","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5234","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5234","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5234","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5234","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"0:72":{"id":"0:72","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[117,0],"end":[143,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:341:1794","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:73:1810","0:74:929","0:75:1815"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11865:15597":{"id":"1:11865:15597","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:40661:177"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9733:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9733:220","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:60:1828":{"id":"0:60:1828","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[73,4],"end":[75,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:9007:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8996:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2732:5670-0:132:1654":{"id":"a:1:2732:5670-0:132:1654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2732:5670","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:5:672-0:132:1654":{"id":"b:5:672-0:132:1654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2249:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:668:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:674:14726","5:675:27679","5:676:27680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11851:802":{"id":"1:11851:802","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"6:11910:412"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11945:34226":{"id":"1:11945:34226","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2538-0:127:1653":{"id":"b:1:2538-0:127:1653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2497:148","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2507:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2541:127","1:2542:1454"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11860:34203":{"id":"1:11860:34203","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2523-0:132:1654":{"id":"b:1:2523-0:132:1654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2497:148","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2526:11082"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"24:1173:184":{"id":"24:1173:184","crate_id":24,"name":"Output","span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.16.0/src/type_operators.rs","begin":[35,4],"end":[35,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:49:1806":{"id":"0:49:1806","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[30,4],"end":[30,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Eager","id":"25:77:1785","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"1:11879:27839":{"id":"1:11879:27839","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:11878:27823"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"1:42934:14864","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11859:34202":{"id":"1:11859:34202","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11120:16514"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:136:416":{"id":"0:136:416","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[89,9],"end":[89,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2236-0:132:1654":{"id":"b:1:2236-0:132:1654","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2675:5669","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2230:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2238:27674"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11912:34215":{"id":"1:11912:34215","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:11552:16507","str::split":"1:11900:34212","prim@char":"6:11910:412","str::split_terminator":"1:11909:34214"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"1:42719:14853","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11557:15304","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11557:15304","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11572:16513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:127:1653":{"id":"0:127:1653","crate_id":0,"name":"Sha256VarCore","span":{"filename":"src/core_api.rs","begin":[18,0],"end":[21,1]},"visibility":"public","docs":"Core block-level SHA-256 hasher with variable output size.\n\nSupports initialization only for 28 and 32 byte output sizes,\ni.e. 224 and 256 bits respectively.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:8185:16473-0:127:1653","a:1:2732:5670-0:127:1653","a:1:2682:226-0:127:1653","a:1:2668:218-0:127:1653","a:1:8186:16472-0:127:1653","b:1:2236-0:127:1653","b:1:2538-0:127:1653","b:1:2233-0:127:1653","b:1:2527-0:127:1653","b:1:2523-0:127:1653","b:1:3327-0:127:1653","b:1:2533-0:127:1653","b:5:672-0:127:1653","b:24:1171-0:127:1653","0:130","0:48","0:45","0:61","0:54","0:52","0:46","0:59","0:50"]}},"1:11965:34234":{"id":"1:11965:34234","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:11910:412","self::pattern":"1:11552:16507"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11557:15304","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11557:15304","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11572:16513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:68":{"id":"0:68","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[105,0],"end":[111,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:330:1793","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:69:1807"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:8185:16473-0:127:1653":{"id":"a:1:8185:16473-0:127:1653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8185:16473","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:0:1679":{"id":"0:0:1679","crate_id":0,"name":"sha2","span":{"filename":"src/lib.rs","begin":[1,0],"end":[95,84]},"visibility":"public","docs":"An implementation of the [SHA-2][1] cryptographic hash algorithms.\n\nThere are 6 standard algorithms specified in the SHA-2 standard: [`Sha224`],\n[`Sha256`], [`Sha512_224`], [`Sha512_256`], [`Sha384`], and [`Sha512`].\n\nAlgorithmically, there are only 2 core algorithms: SHA-256 and SHA-512.\nAll other algorithms are just applications of these with different initial\nhash values, and truncated to different digest bit lengths. The first two\nalgorithms in the list are based on SHA-256, while the last three on SHA-512.\n\n# Usage\n\n```rust\nuse hex_literal::hex;\nuse sha2::{Sha256, Sha512, Digest};\n\n// create a Sha256 object\nlet mut hasher = Sha256::new();\n\n// write input message\nhasher.update(b\"hello world\");\n\n// read hash digest and consume hasher\nlet result = hasher.finalize();\n\nassert_eq!(result[..], hex!(\"\n    b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\n\")[..]);\n\n// same for Sha512\nlet mut hasher = Sha512::new();\nhasher.update(b\"hello world\");\nlet result = hasher.finalize();\n\nassert_eq!(result[..], hex!(\"\n    309ecc489c12d6eb4cc40f50c902f2b4d0ed77ee511a7c7a9bcd3ca86d4cd86f\n    989dd35bc5ff499670da34255b45b0cfd830e81f605dcf7dc5542e93ae9cd76f\n\")[..]);\n```\n\nAlso see [RustCrypto/hashes][2] readme.\n\n[1]: https://en.wikipedia.org/wiki/SHA-2\n[2]: https://github.com/RustCrypto/hashes","links":{"`Sha256`":"0:99:1670","`Sha224`":"0:98:1668","`Sha512`":"0:103:1678","`Sha384`":"0:102:1676","`Sha512_256`":"0:101:1674","`Sha512_224`":"0:100:1672"},"attrs":["#![no_std]","#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\",\nhtml_favicon_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\")]","#![warn(missing_docs, rust_2018_idioms)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:5-4:0:1633","0:6-4:358:1634","0:96-0:127:1653","0:97-0:132:1654","0:98:1668","0:99:1670","0:100:1672","0:101:1674","0:102:1676","0:103:1678"],"is_stripped":false}},"1:11876:14875":{"id":"1:11876:14875","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"6:11910:412"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"1:42627:14847","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:54":{"id":"0:54","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[45,0],"end":[69,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:341:1794","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:55:1810","0:56:929","0:57:1815"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11892:11127":{"id":"1:11892:11127","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:40661:177","prim@char":"6:11910:412","self::pattern":"1:11552:16507"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11557:15304","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:96-0:127:1653":{"id":"0:96-0:127:1653","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[75,19],"end":[75,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"core_api::Sha256VarCore","name":"Sha256VarCore","id":"0:127:1653","glob":false}},"1:11939:34223":{"id":"1:11939:34223","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5315:34904":{"id":"5:5315:34904","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:277:1951","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6930:14229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:277:1951","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6930:14229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:131:416":{"id":"0:131:416","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[17,9],"end":[17,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5331:34908":{"id":"5:5331:34908","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:277:1951","`String`":"5:7179:222"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:277:1951","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6930:14229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:53:1809":{"id":"0:53:1809","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[42,4],"end":[42,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5230","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5230","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5230","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5230","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5230","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5230","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UTerm","id":"24:6363:5231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B1","id":"24:5724:5235","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5234","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5234","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5234","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5234","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5234","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"b:5:672-0:127:1653":{"id":"b:5:672-0:127:1653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2249:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:668:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:674:14726","5:675:27679","5:676:27680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:5332:16451":{"id":"5:5332:16451","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7179:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11976:16385":{"id":"1:11976:16385","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4515:16385"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"1:42959:14775","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5319:34905":{"id":"5:5319:34905","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7179:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11557:15304","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2526:11082":{"id":"1:2526:11082","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2500:132"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:24:1171-0:127:1653":{"id":"b:24:1171-0:127:1653","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.16.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"24:1168:5368","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["24:1173:184"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11924:34219":{"id":"1:11924:34219","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11557:15304","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11557:15304","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11572:16513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11950:34229":{"id":"1:11950:34229","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:11910:412","self::pattern":"1:11552:16507"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11557:15304","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2523-0:127:1653":{"id":"b:1:2523-0:127:1653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2500:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2497:148","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2526:11082"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:97-0:132:1654":{"id":"0:97-0:132:1654","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[75,34],"end":[75,47]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"core_api::Sha512VarCore","name":"Sha512VarCore","id":"0:132:1654","glob":false}},"1:11862:5815":{"id":"1:11862:5815","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"6:11927:1476"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11856:34201":{"id":"1:11856:34201","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:11854:34200"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11889:34211":{"id":"1:11889:34211","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"6:11910:412","self::pattern":"1:11552:16507"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11557:15304","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11557:15304","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11572:16513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2529:685":{"id":"1:2529:685","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5330:34907":{"id":"5:5330:34907","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7179:222"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11854:34200":{"id":"1:11854:34200","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:74:929":{"id":"0:74:929","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[121,4],"end":[131,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["output_size",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:40803:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"InvalidOutputSize","id":"4:522:1799","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:66":{"id":"0:66","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[101,0],"end":[103,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:332:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:67:1806"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11906:34213":{"id":"1:11906:34213","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:11552:16507","`DoubleEndedIterator`":"1:7174:120","prim@char":"6:11910:412","str::split":"1:11900:34212"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"1:42669:5283","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11557:15304","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11557:15304","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11572:16513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11873:34206":{"id":"1:11873:34206","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:11874:34207"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[41,0],"end":[43,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"22:33:1791","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:53:1809"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:59":{"id":"0:59","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[71,0],"end":[76,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"22:46:1786","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:60:1828"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11936:34222":{"id":"1:11936:34222","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:11552:16507","`DoubleEndedIterator`":"1:7174:120","prim@char":"6:11910:412","str::match_indices":"1:11933:34221"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"1:42819:14857","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11557:15304","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11557:15304","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11572:16513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5334:15819":{"id":"5:5334:15819","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:11973:15823"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7179:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:45":{"id":"0:45","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[23,0],"end":[23,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:357:1798","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:51:1807":{"id":"0:51:1807","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[35,4],"end":[38,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["blocks",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"Block","id":"22:12:1787","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11943:34225":{"id":"1:11943:34225","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11915:34216":{"id":"1:11915:34216","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"6:11910:412","self::pattern":"1:11552:16507","str::rsplitn":"1:11918:34217"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"1:42755:5281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11557:15304","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11933:34221":{"id":"1:11933:34221","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:11552:16507","`DoubleEndedIterator`":"1:7174:120","prim@char":"6:11910:412","str::rmatch_indices":"1:11936:34222"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"1:42801:14856","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11557:15304","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11972:15822":{"id":"1:11972:15822","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11896:11088":{"id":"1:11896:11088","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:40661:177","prim@char":"6:11910:412","self::pattern":"1:11552:16507"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11557:15304","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11557:15304","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11572:16513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2668:218-0:127:1653":{"id":"a:1:2668:218-0:127:1653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2668:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:675:27679":{"id":"5:675:27679","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11881:34209":{"id":"1:11881:34209","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"1:42915:14862","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11953:34230":{"id":"1:11953:34230","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:11910:412","self::pattern":"1:11552:16507"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:40659:179","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11557:15304","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11872:34205":{"id":"1:11872:34205","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"6:11916:1379","crate::ops::IndexMut":"1:2993:16359","str::slice_unchecked":"1:11871:34204"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:11861:312":{"id":"1:11861:312","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:11862:5815","`u8`":"6:11927:1476"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:62:659":{"id":"0:62:659","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[80,4],"end":[82,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:9007:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8996:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:75:1815":{"id":"0:75:1815","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[134,4],"end":[142,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buffer",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Buffer","id":"4:328:1789","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}}}}],["out",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Output","id":"22:16:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:101:1674":{"id":"0:101:1674","crate_id":0,"name":"Sha512_256","span":{"filename":"src/lib.rs","begin":[91,0],"end":[91,92]},"visibility":"public","docs":"SHA-512/256 hasher.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"CoreWrapper","id":"4:492:1645","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CtVariableCoreWrapper","id":"4:473:1646","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"U32","id":"24:2520:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"OidSha512_256","id":"0:441:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"0:48":{"id":"0:48","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[29,0],"end":[31,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:332:1790","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:49:1806"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:2542:1454":{"id":"1:2542:1454","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:40803:208","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"1:2507:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:79":{"id":"0:79","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[152,0],"end":[157,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9048:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:80:659"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:78:1828":{"id":"0:78:1828","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[147,4],"end":[149,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:9007:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8996:208","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11874:34207":{"id":"1:11874:34207","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:11873:34206"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:98:1668":{"id":"0:98:1668","crate_id":0,"name":"Sha224","span":{"filename":"src/lib.rs","begin":[85,0],"end":[85,84]},"visibility":"public","docs":"SHA-224 hasher.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"CoreWrapper","id":"4:492:1645","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CtVariableCoreWrapper","id":"4:473:1646","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"U28","id":"24:2508:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"OidSha224","id":"0:409:1661","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"b:1:2236-0:127:1653":{"id":"b:1:2236-0:127:1653","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2675:5669","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2230:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2238:27674"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:102:1676":{"id":"0:102:1676","crate_id":0,"name":"Sha384","span":{"filename":"src/lib.rs","begin":[93,0],"end":[93,84]},"visibility":"public","docs":"SHA-384 hasher.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"CoreWrapper","id":"4:492:1645","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CtVariableCoreWrapper","id":"4:473:1646","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1654","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"U48","id":"24:2568:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"OidSha384","id":"0:377:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"1:11880:34208":{"id":"1:11880:34208","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"1:42905:14861","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11946:34227":{"id":"1:11946:34227","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"0:99:1670":{"crate_id":0,"path":["sha2","Sha256"],"kind":"typedef"},"4:512:1792":{"crate_id":4,"path":["digest","core_api","TruncSide"],"kind":"enum"},"17:7859:23540":{"crate_id":17,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:3247:15195":{"crate_id":6,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:2612:15187":{"crate_id":6,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:10691:14126":{"crate_id":6,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"6:6004:11494":{"crate_id":6,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"18:10491:15061":{"crate_id":18,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:7042:14643":{"crate_id":17,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:42801:14856":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:7626:15138":{"crate_id":17,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:42378:15319":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:4001:103":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"6:8431:14186":{"crate_id":6,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:6179:15076":{"crate_id":17,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:9099:14206":{"crate_id":6,"path":["std","time","SystemTime"],"kind":"struct"},"18:10104:11865":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:4164:11165":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"18:11641:12068":{"crate_id":18,"path":["object","elf","HashHeader"],"kind":"struct"},"1:2859:16356":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:8875:17191":{"crate_id":6,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:4109:17114":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"4:457:14230":{"crate_id":4,"path":["digest","core_api","ct_variable","NoOid"],"kind":"struct"},"24:5814:5236":{"crate_id":24,"path":["typenum","int","Z0"],"kind":"struct"},"1:1529:11487":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:40645:14357":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"6:11913:1036":{"crate_id":6,"path":["std","pointer"],"kind":"primitive"},"1:41216:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:4505:17135":{"crate_id":6,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:40846:5275":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"6:11859:15278":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"24:653:5356":{"crate_id":24,"path":["typenum","marker_traits","TypeArray"],"kind":"trait"},"1:2131:581":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:8933:106":{"crate_id":6,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:9061:11157":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:6404:11505":{"crate_id":6,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"12:393:38546":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:3899:12733":{"crate_id":17,"path":["gimli","constants","DwChildren"],"kind":"struct"},"7:4549:13514":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:10711:118":{"crate_id":6,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"5:6293:11094":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:42719:14853":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:8155:14820":{"crate_id":6,"path":["std","io","Take"],"kind":"struct"},"18:13419:12520":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"18:13194:12459":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"18:12236:12190":{"crate_id":18,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:1051:14645":{"crate_id":6,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:939:17006":{"crate_id":6,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:20564:16570":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"6:2475:15185":{"crate_id":6,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:8072:14657":{"crate_id":17,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"24:1211:5245":{"crate_id":24,"path":["typenum","type_operators","IsLess"],"kind":"trait"},"1:39311:16410":{"crate_id":1,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"17:7803:12899":{"crate_id":17,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"18:10303:15050":{"crate_id":18,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"6:2830:11486":{"crate_id":6,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:40597:14838":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"5:3146:14676":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:6361:12774":{"crate_id":17,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:933:15149":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:11577:16512":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"19:707:14483":{"crate_id":19,"path":["memchr","memmem","Searcher"],"kind":"struct"},"15:187:22619":{"crate_id":15,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"5:2900:34066":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"22:42:16840":{"crate_id":22,"path":["crypto_common","InnerUser"],"kind":"trait"},"6:2538:11483":{"crate_id":6,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"18:12980:12414":{"crate_id":18,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"18:9312:15001":{"crate_id":18,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:7669:12718":{"crate_id":17,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"18:9409:23610":{"crate_id":18,"path":["object","read","archive","Members"],"kind":"enum"},"7:4850:13641":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:7099:16458":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:8783:14194":{"crate_id":6,"path":["std","process","ExitStatusError"],"kind":"struct"},"18:10092:15046":{"crate_id":18,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"5:4253:243":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"6:3168:15191":{"crate_id":6,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:11934:1111":{"crate_id":6,"path":["std","reference"],"kind":"primitive"},"18:11800:12109":{"crate_id":18,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"6:870:11094":{"crate_id":6,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:2766:16189":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"18:12959:12409":{"crate_id":18,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"12:2190:38549":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:5847:14547":{"crate_id":17,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"26:0:1680":{"crate_id":26,"path":["cfg_if"],"kind":"module"},"21:118:16785":{"crate_id":21,"path":["blobby","Blob6Iterator"],"kind":"struct"},"6:3984:17095":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"12:2178:13048":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:1728:14232":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"18:9772:11859":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"18:13865:12651":{"crate_id":18,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"5:3076:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:6868:12818":{"crate_id":17,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:44724:14403":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:6364:14826":{"crate_id":6,"path":["std","sync","once","Once"],"kind":"struct"},"18:12293:12202":{"crate_id":18,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"18:10747:127":{"crate_id":18,"path":["object","read","Error"],"kind":"struct"},"5:6945:14736":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"18:9478:15005":{"crate_id":18,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"18:10377:11905":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"18:8651:11825":{"crate_id":18,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:4445:12737":{"crate_id":17,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:10856:36846":{"crate_id":6,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"24:6250:5262":{"crate_id":24,"path":["typenum","Greater"],"kind":"struct"},"23:143:5391":{"crate_id":23,"path":["generic_array","functional","MappedGenericSequence"],"kind":"trait"},"15:40:11989":{"crate_id":15,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"7:4697:13562":{"crate_id":7,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:40710:11093":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"18:11628:12067":{"crate_id":18,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:31759:5992":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"18:13316:12490":{"crate_id":18,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"5:3504:161":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:21683:29453":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"23:437:5384":{"crate_id":23,"path":["generic_array","ArrayConsumer"],"kind":"struct"},"18:13651:12596":{"crate_id":18,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"7:7511:14120":{"crate_id":7,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:3872:12732":{"crate_id":17,"path":["gimli","constants","DwCfa"],"kind":"struct"},"18:8360:23590":{"crate_id":18,"path":["object","common","ComdatKind"],"kind":"enum"},"18:9523:15009":{"crate_id":18,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"5:1983:15284":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"18:13240:12472":{"crate_id":18,"path":["object","pe","ImageRelocation"],"kind":"struct"},"18:2933:14993":{"crate_id":18,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:48978:244":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:7635:12887":{"crate_id":17,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:5921:14749":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"18:11484:12026":{"crate_id":18,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"0:98:1668":{"crate_id":0,"path":["sha2","Sha224"],"kind":"typedef"},"5:4069:11487":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"12:853:15154":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:2919:5388":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:3063:11737":{"crate_id":17,"path":["gimli","arch","Arm"],"kind":"struct"},"6:11881:17002":{"crate_id":6,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"12:985:14645":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"7:4900:13672":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"18:11060:11917":{"crate_id":18,"path":["object","read","Relocation"],"kind":"struct"},"6:11909:926":{"crate_id":6,"path":["std","never"],"kind":"primitive"},"18:11090:11951":{"crate_id":18,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:40610:14690":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"23:195:5390":{"crate_id":23,"path":["generic_array","iter","GenericArrayIter"],"kind":"struct"},"19:507:11709":{"crate_id":19,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:4742:30094":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"0:103:1678":{"crate_id":0,"path":["sha2","Sha512"],"kind":"typedef"},"15:7:15143":{"crate_id":15,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:860:5276":{"crate_id":6,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:30005:5386":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"7:653:17641":{"crate_id":7,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:9007:131":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:46588:10983":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:3087:5270":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:42819:14857":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:6535:11460":{"crate_id":17,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"6:7590:14124":{"crate_id":6,"path":["std","thread","local","AccessError"],"kind":"struct"},"18:8256:23575":{"crate_id":18,"path":["object","common","AddressSize"],"kind":"enum"},"1:42855:14859":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:49004:244":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:9723:16793":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"4:522:1799":{"crate_id":4,"path":["digest","InvalidOutputSize"],"kind":"struct"},"7:4468:13493":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"4:473:1646":{"crate_id":4,"path":["digest","core_api","ct_variable","CtVariableCoreWrapper"],"kind":"struct"},"1:44423:14392":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"24:6192:5319":{"crate_id":24,"path":["typenum","array","TArr"],"kind":"struct"},"7:1723:13337":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"7:4687:13556":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"12:387:38545":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:21357:16565":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:31808:11051":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"6:4561:17092":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"18:13689:12606":{"crate_id":18,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:39621:14809":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"4:440:1948":{"crate_id":4,"path":["digest","VariableOutput"],"kind":"trait"},"4:339:5243":{"crate_id":4,"path":["digest","core_api","XofReaderCore"],"kind":"trait"},"1:42447:5273":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"18:10798:23600":{"crate_id":18,"path":["object","read","ObjectKind"],"kind":"enum"},"7:4952:13689":{"crate_id":7,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:534:11477":{"crate_id":6,"path":["std","thread","Packet"],"kind":"struct"},"1:2906:116":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:12467:16559":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"18:11585:12051":{"crate_id":18,"path":["object","elf","Verneed"],"kind":"struct"},"7:4812:989":{"crate_id":7,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"7:1541:13220":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"18:10840:11940":{"crate_id":18,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:2745:11047":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"6:8506:14192":{"crate_id":6,"path":["std","path","Ancestors"],"kind":"struct"},"1:40554:14355":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"6:4757:17102":{"crate_id":6,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:7103:14201":{"crate_id":17,"path":["gimli","read","op","Operation"],"kind":"enum"},"18:13499:12537":{"crate_id":18,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"18:8718:11828":{"crate_id":18,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:3674:15198":{"crate_id":6,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:6236:15103":{"crate_id":17,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"18:9986:14496":{"crate_id":18,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"18:13461:12529":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"18:12358:12209":{"crate_id":18,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:3749:12729":{"crate_id":17,"path":["gimli","constants","DwSect"],"kind":"struct"},"6:11100:14205":{"crate_id":6,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"5:3528:5276":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:40936:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:42943:14865":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:3376:16339":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"17:7029:14640":{"crate_id":17,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"7:5660:13720":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"7:5878:13848":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"19:624:38587":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"10:234:5946":{"crate_id":10,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:558:15167":{"crate_id":6,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:6474:12720":{"crate_id":17,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"6:638:15169":{"crate_id":6,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:2855:16355":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:14:1906":{"crate_id":1,"path":["core","write"],"kind":"macro"},"17:3446:12727":{"crate_id":17,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:9432:11596":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"6:3980:17094":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:9059:11156":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"18:13066:12431":{"crate_id":18,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"19:548:140":{"crate_id":19,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:878:14674":{"crate_id":6,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:44840:14406":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:11928:1473":{"crate_id":6,"path":["std","u16"],"kind":"primitive"},"18:8310:23589":{"crate_id":18,"path":["object","common","SectionKind"],"kind":"enum"},"6:9989:15178":{"crate_id":6,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"7:4882:13661":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:1737:14235":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"0:0:1679":{"crate_id":0,"path":["sha2"],"kind":"module"},"6:588:16996":{"crate_id":6,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:7802:15232":{"crate_id":6,"path":["std","fs","ReadDir"],"kind":"struct"},"6:8241:17116":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:6990:12826":{"crate_id":17,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:6854:12816":{"crate_id":17,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:45091:14414":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"18:13879:12654":{"crate_id":18,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"18:13169:12450":{"crate_id":18,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:7670:17001":{"crate_id":6,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:48991:244":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"18:13257:12475":{"crate_id":18,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:10835:13110":{"crate_id":6,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"15:202:16894":{"crate_id":15,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:40508:14348":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:2302:124":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"22:44:1955":{"crate_id":22,"path":["crypto_common","Reset"],"kind":"trait"},"12:2205:14738":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"6:0:1371":{"crate_id":6,"path":["std"],"kind":"module"},"18:420:11783":{"crate_id":18,"path":["object","read","any","Section"],"kind":"struct"},"12:646:5276":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:6307:12700":{"crate_id":17,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:9394:11514":{"crate_id":6,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:46725:10991":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"7:62:17229":{"crate_id":7,"path":["libc","unix","DIR"],"kind":"enum"},"12:1120:15160":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"18:12158:12163":{"crate_id":18,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"18:9973:14495":{"crate_id":18,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:2764:12693":{"crate_id":17,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:41966:11363":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"5:6106:11569":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"1:22175:5266":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:38948:5267":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:4241:15300":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:6376:12702":{"crate_id":17,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"18:13265:12477":{"crate_id":18,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:42429:5274":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"5:3264:11468":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"19:113:27441":{"crate_id":19,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:1649:1074":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:40976:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"7:4237:13362":{"crate_id":7,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"18:9512:15008":{"crate_id":18,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"7:5902:13860":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:39935:14824":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:21622:29455":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"12:861:15155":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"19:96:27440":{"crate_id":19,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:22373:14260":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:4768:786":{"crate_id":1,"path":["core","iter"],"kind":"module"},"12:725:14674":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"18:9453:23611":{"crate_id":18,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:41997:14842":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:40795:191":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"18:8788:11830":{"crate_id":18,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:30099:29517":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"22:51:16842":{"crate_id":22,"path":["crypto_common","KeyIvInit"],"kind":"trait"},"5:6970:34127":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:1620:11039":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:39258:14778":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"7:5967:13883":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:39398:29456":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:3595:11532":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:2497:148":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"6:9885:14835":{"crate_id":6,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"7:4862:13650":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:4702:12744":{"crate_id":17,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:39973:11594":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"6:3380:14170":{"crate_id":6,"path":["std","io","Read"],"kind":"trait"},"5:1354:5276":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"6:7693:17023":{"crate_id":6,"path":["std","env","VarError"],"kind":"enum"},"18:10615:14507":{"crate_id":18,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"24:989:16790":{"crate_id":24,"path":["typenum","private","PrivateDivInt"],"kind":"trait"},"7:6719:14053":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:3160:232":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"19:609:14976":{"crate_id":19,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:3225:12725":{"crate_id":17,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:1065:15156":{"crate_id":6,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:8813:15250":{"crate_id":6,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:7065:14644":{"crate_id":17,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:4480:12738":{"crate_id":17,"path":["gimli","constants","DwLle"],"kind":"struct"},"19:0:1938":{"crate_id":19,"path":["memchr"],"kind":"module"},"5:6174:11551":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"18:10712:23709":{"crate_id":18,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:7437:12881":{"crate_id":17,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:5921:204":{"crate_id":6,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"6:11171:14710":{"crate_id":6,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:0:436":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:38862:197":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:10679:14709":{"crate_id":6,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:5886:14549":{"crate_id":17,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"22:12:1787":{"crate_id":22,"path":["crypto_common","Block"],"kind":"typedef"},"1:3150:5269":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:229:208":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:7767:23539":{"crate_id":17,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:6662:14612":{"crate_id":17,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:11416:15200":{"crate_id":6,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:6336:14589":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:45618:14424":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"18:10478:15060":{"crate_id":18,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:39014:15310":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:4092:15298":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"7:553:13180":{"crate_id":7,"path":["libc","unix","winsize"],"kind":"struct"},"18:11011:11946":{"crate_id":18,"path":["object","read","CodeView"],"kind":"struct"},"6:6832:11522":{"crate_id":6,"path":["std","sys","common","thread_local","fast_local","fast","Key"],"kind":"struct"},"19:644:11709":{"crate_id":19,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"5:7074:14738":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"18:8909:11833":{"crate_id":18,"path":["object","read","util","Bytes"],"kind":"struct"},"18:11391:12014":{"crate_id":18,"path":["object","elf","Sym64"],"kind":"struct"},"1:41698:67":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"18:9866:15026":{"crate_id":18,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"16:0:1935":{"crate_id":16,"path":["addr2line"],"kind":"module"},"6:5318:15205":{"crate_id":6,"path":["std","process","Child"],"kind":"struct"},"1:39471:15311":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:40735:11094":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"24:5780:5233":{"crate_id":24,"path":["typenum","int","NInt"],"kind":"struct"},"18:13821:12644":{"crate_id":18,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"5:6992:196":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:39551:14798":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"19:531:14474":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"12:1085:15159":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:2249:105":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"5:1185:14645":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:43577:209":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"23:163:5393":{"crate_id":23,"path":["generic_array","functional","FunctionalSequence"],"kind":"trait"},"7:473:13132":{"crate_id":7,"path":["libc","unix","group"],"kind":"struct"},"1:20380:30359":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"19:582:11059":{"crate_id":19,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"24:1168:5368":{"crate_id":24,"path":["typenum","type_operators","Same"],"kind":"trait"},"1:20681:16793":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:22109:175":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"18:13506:12539":{"crate_id":18,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"18:13082:12434":{"crate_id":18,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"18:487:14985":{"crate_id":18,"path":["object","read","any","Comdat"],"kind":"struct"},"18:13332:12492":{"crate_id":18,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"6:11012:14193":{"crate_id":6,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"5:2075:14728":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"18:11891:12124":{"crate_id":18,"path":["object","macho","LcStr"],"kind":"struct"},"5:2065:11476":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"18:9424:11844":{"crate_id":18,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:9546:11603":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"4:341:1794":{"crate_id":4,"path":["digest","core_api","VariableOutputCore"],"kind":"trait"},"1:2491:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"6:5332:15208":{"crate_id":6,"path":["std","process","ChildStdin"],"kind":"struct"},"18:12318:12205":{"crate_id":18,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:2720:12691":{"crate_id":17,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"5:1216:15156":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"6:11915:1349":{"crate_id":6,"path":["std","slice"],"kind":"primitive"},"6:4676:17103":{"crate_id":6,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"18:10527:23707":{"crate_id":18,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"19:491:14473":{"crate_id":19,"path":["memchr","cow","Imp"],"kind":"struct"},"1:21662:29478":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"6:2209:15184":{"crate_id":6,"path":["std","fs","DirEntry"],"kind":"struct"},"1:9531:11481":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:41418:11155":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"4:502:5250":{"crate_id":4,"path":["digest","core_api","xof_reader","XofReaderCoreWrapper"],"kind":"struct"},"12:2198:13051":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"7:7440:14105":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:3782:12730":{"crate_id":17,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"7:6611:13989":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"18:9265:15000":{"crate_id":18,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"6:3353:11487":{"crate_id":6,"path":["std","io","Guard"],"kind":"struct"},"17:7588:15137":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:21092:16567":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"6:7655:17000":{"crate_id":6,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"18:11600:12057":{"crate_id":18,"path":["object","elf","Vernaux"],"kind":"struct"},"1:39348:16411":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"10:52:22546":{"crate_id":10,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"18:11721:12075":{"crate_id":18,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:8751:15248":{"crate_id":6,"path":["std","process","CommandArgs"],"kind":"struct"},"18:11861:12121":{"crate_id":18,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:41987:5946":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"8:32:22514":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"18:9876:11775":{"crate_id":18,"path":["object","read","elf","note","Note"],"kind":"struct"},"7:1509:13207":{"crate_id":7,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"7:6512:13953":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:40525:16467":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:2680:108":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:2574:115":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"18:9545:11820":{"crate_id":18,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"24:1007:16831":{"crate_id":24,"path":["typenum","private","PrivateMin"],"kind":"trait"},"1:22076:174":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:20652:16562":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"19:564:11716":{"crate_id":19,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:42755:5281":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"18:9566:15000":{"crate_id":18,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"23:382:5382":{"crate_id":23,"path":["generic_array","GenericArrayImplOdd"],"kind":"struct"},"1:29971:5387":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:11710:11528":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:46687:10989":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:12134:135":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"5:3732:11532":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:6520:12777":{"crate_id":17,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:41016:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:7335:38567":{"crate_id":17,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"7:4328:13423":{"crate_id":7,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"18:8443:23593":{"crate_id":18,"path":["object","common","RelocationKind"],"kind":"enum"},"18:12923:12379":{"crate_id":18,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:39673:14814":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"5:1420:15147":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:21728:14765":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"18:12282:12200":{"crate_id":18,"path":["object","macho","DylibReference"],"kind":"struct"},"7:4981:13708":{"crate_id":7,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"5:1410:15162":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"12:98:14667":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:3290:17075":{"crate_id":6,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"6:8939:15253":{"crate_id":6,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:44938:14410":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"18:9068:38575":{"crate_id":18,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:38760:16364":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:39520:14796":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:5177:188":{"crate_id":6,"path":["std","path","Path"],"kind":"struct"},"7:487:13140":{"crate_id":7,"path":["libc","unix","timeval"],"kind":"struct"},"1:12168:30202":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:7039:37949":{"crate_id":6,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"7:4416:13467":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"18:12388:12214":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:42205:14844":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"7:4422:13470":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"7:4828:13625":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"7:1617:13269":{"crate_id":7,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"18:9488:15006":{"crate_id":18,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"18:13763:12627":{"crate_id":18,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"11:36:13053":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"23:295:5396":{"crate_id":23,"path":["generic_array","sequence","Lengthen"],"kind":"trait"},"6:9008:36693":{"crate_id":6,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:6146:192":{"crate_id":17,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"6:7953:15237":{"crate_id":6,"path":["std","io","error","Custom"],"kind":"struct"},"7:4224:13353":{"crate_id":7,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"5:1370:11094":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"24:1195:5341":{"crate_id":24,"path":["typenum","type_operators","Len"],"kind":"trait"},"17:2404:12678":{"crate_id":17,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:46116:14427":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"7:481:13137":{"crate_id":7,"path":["libc","unix","utimbuf"],"kind":"struct"},"12:1065:38550":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"6:7627:11516":{"crate_id":6,"path":["std","thread","Thread"],"kind":"struct"},"12:1836:11094":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"7:1652:13298":{"crate_id":7,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"18:13053:12426":{"crate_id":18,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"5:5573:230":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"18:10660:11917":{"crate_id":18,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"18:9350:38580":{"crate_id":18,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"7:6743:14063":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:43283:14891":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:41425:11154":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:39216:14777":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:8914:14200":{"crate_id":6,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:22010:176":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"18:11410:12015":{"crate_id":18,"path":["object","elf","Syminfo32"],"kind":"struct"},"12:1845:11468":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"1:44315:14388":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"23:346:5398":{"crate_id":23,"path":["generic_array","sequence","Concat"],"kind":"trait"},"1:41716:127":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"12:119:11462":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"12:0:1931":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"1:45584:14423":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:2971:16363":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:9063:192":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:11325:14855":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:8162:11833":{"crate_id":6,"path":["std","io","Bytes"],"kind":"struct"},"7:4766:13592":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:7824:14689":{"crate_id":6,"path":["std","fs","Permissions"],"kind":"struct"},"24:1905:16804":{"crate_id":24,"path":["typenum","uint","SetBit"],"kind":"trait"},"1:42915:14862":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:2761:16188":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"6:5245:119":{"crate_id":6,"path":["std","path","Display"],"kind":"struct"},"1:43406:14214":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"18:13698:12608":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:46597:5937":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:2967:22672":{"crate_id":17,"path":["gimli","common","SectionId"],"kind":"enum"},"24:942:16825":{"crate_id":24,"path":["typenum","private","PrivateDiv"],"kind":"trait"},"17:6696:23534":{"crate_id":17,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"18:10923:14515":{"crate_id":18,"path":["object","read","ObjectMap"],"kind":"struct"},"5:1442:196":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"18:10416:15055":{"crate_id":18,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:46568:5779":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"18:11770:12100":{"crate_id":18,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:11566:14483":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:8103:14166":{"crate_id":6,"path":["std","io","util","Sink"],"kind":"struct"},"24:835:16791":{"crate_id":24,"path":["typenum","private","PrivateIntegerAdd"],"kind":"trait"},"5:2904:34067":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:1564:5275":{"crate_id":6,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:43382:14896":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:41096:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:4851:17143":{"crate_id":6,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"19:521:27451":{"crate_id":19,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:3166:15190":{"crate_id":6,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:2835:12841":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"5:4846:11487":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"5:803:11538":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"24:1051:16795":{"crate_id":24,"path":["typenum","private","IsEqualPrivate"],"kind":"trait"},"18:13678:12605":{"crate_id":18,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:4721:16420":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"17:7016:14637":{"crate_id":17,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:4413:11168":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"14:110:38551":{"crate_id":14,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"12:632:5275":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:38807:14773":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"7:5716:13760":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"7:1589:13250":{"crate_id":7,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:42478:5293":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"18:12770:12265":{"crate_id":18,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"27:0:1681":{"crate_id":27,"path":["cpufeatures"],"kind":"module"},"6:4122:17115":{"crate_id":6,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"6:1074:15157":{"crate_id":6,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:7252:157":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:4411:17117":{"crate_id":6,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"6:9029:14204":{"crate_id":6,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"6:8168:5279":{"crate_id":6,"path":["std","io","Split"],"kind":"struct"},"7:4618:13521":{"crate_id":7,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"19:636:11729":{"crate_id":19,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:920:15162":{"crate_id":6,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:2207:128":{"crate_id":6,"path":["std","fs","File"],"kind":"struct"},"1:22808:14261":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:11036:36835":{"crate_id":6,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:20435:16801":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"18:8548:23596":{"crate_id":18,"path":["object","common","SegmentFlags"],"kind":"enum"},"7:6079:13918":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"18:13469:12531":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"24:1091:16797":{"crate_id":24,"path":["typenum","private","IsLessOrEqualPrivate"],"kind":"trait"},"6:3779:15200":{"crate_id":6,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"5:4268:11557":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"5:1392:14674":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:43035:16526":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:11106:5261":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:21735:14259":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:50300:14438":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"18:8598:23598":{"crate_id":18,"path":["object","common","SymbolFlags"],"kind":"enum"},"7:4369:13445":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:43370:14893":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"17:6218:15095":{"crate_id":17,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"24:2508:1640":{"crate_id":24,"path":["typenum","generated","consts","U28"],"kind":"typedef"},"18:12331:12207":{"crate_id":18,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:7676:14682":{"crate_id":6,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"6:10321:15248":{"crate_id":6,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:3130:38319":{"crate_id":6,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"6:7854:118":{"crate_id":6,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:39603:14807":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:45508:14421":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"5:1431:15148":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"18:13121:12443":{"crate_id":18,"path":["object","pe","ImageSymbol"],"kind":"struct"},"25:93:127":{"crate_id":25,"path":["block_buffer","Error"],"kind":"struct"},"4:436:1947":{"crate_id":4,"path":["digest","ExtendableOutputReset"],"kind":"trait"},"1:7197:5674":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"5:6505:11564":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:44269:14386":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:5557:12701":{"crate_id":17,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"18:13385:12507":{"crate_id":18,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:2678:224":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:2989:16358":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"23:260:5394":{"crate_id":23,"path":["generic_array","sequence","GenericSequence"],"kind":"trait"},"6:5383:15211":{"crate_id":6,"path":["std","process","Command"],"kind":"struct"},"6:10637:15270":{"crate_id":6,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"5:2624:14227":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:535:14517":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:2507:235":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"6:3677:15199":{"crate_id":6,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:8951:36701":{"crate_id":6,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:8109:14663":{"crate_id":17,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:2502:12682":{"crate_id":17,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:2796:16349":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:2788:12837":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"5:3112:14677":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:9925:5279":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"5:7027:11094":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"5:7276:11572":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:48965:244":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"10:502:13113":{"crate_id":10,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:39228:29459":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:5616:14524":{"crate_id":17,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"7:4877:13659":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:1714:16337":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"18:10080:15045":{"crate_id":18,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:6728:14614":{"crate_id":17,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:21570:14759":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:4367:11167":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:44293:14387":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:12147:16557":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"23:369:5381":{"crate_id":23,"path":["generic_array","GenericArrayImplEven"],"kind":"struct"},"18:9946:14493":{"crate_id":18,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"7:5959:13881":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:8358:14183":{"crate_id":6,"path":["std","path","Prefix"],"kind":"enum"},"17:7543:12717":{"crate_id":17,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:21261:30362":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:2862:12697":{"crate_id":17,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:6547:11506":{"crate_id":6,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:5708:14533":{"crate_id":17,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:6477:15221":{"crate_id":6,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:40659:179":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:40786:16478":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"18:12449:12225":{"crate_id":18,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"6:11876:38339":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"24:0:1795":{"crate_id":24,"path":["typenum"],"kind":"module"},"6:5691:15216":{"crate_id":6,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:39571:14801":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:43398:14900":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:2792:16345":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:20414:30574":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:41658:14363":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:7145:5675":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"18:10649:14509":{"crate_id":18,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"7:4743:13585":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:4358:11587":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:6022:23531":{"crate_id":17,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:44494:14395":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:22208:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:43390:14898":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"7:4662:13544":{"crate_id":7,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"12:1832:5275":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:8187:15303":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:8247:15246":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:39007:12878":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"17:2470:12681":{"crate_id":17,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:7366:23537":{"crate_id":17,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"7:4457:13489":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:5367:22643":{"crate_id":17,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:9055:11154":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"6:5760:11492":{"crate_id":6,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:39341:14789":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"18:12496:12239":{"crate_id":18,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:5693:14530":{"crate_id":17,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"18:10270:15048":{"crate_id":18,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"18:12433:12221":{"crate_id":18,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"4:492:1645":{"crate_id":4,"path":["digest","core_api","wrapper","CoreWrapper"],"kind":"struct"},"1:42621:14846":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"12:444:141":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:2771:12836":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"24:1151:16815":{"crate_id":24,"path":["typenum","private","PrivateSquareRoot"],"kind":"trait"},"5:3979:5276":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"21:66:16781":{"crate_id":21,"path":["blobby","Blob2Iterator"],"kind":"struct"},"1:44648:14401":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"18:8858:11832":{"crate_id":18,"path":["object","endian","I64Bytes"],"kind":"struct"},"18:12902:12371":{"crate_id":18,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"6:5684:15213":{"crate_id":6,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"19:515:11712":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"18:13411:12517":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:4400:12736":{"crate_id":17,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:44445:14393":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"11:0:1930":{"crate_id":11,"path":["adler"],"kind":"module"},"12:60:38544":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"18:10428:15056":{"crate_id":18,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:8112:14167":{"crate_id":6,"path":["std","io","IoSlice"],"kind":"struct"},"24:1272:5351":{"crate_id":24,"path":["typenum","type_operators","SquareRoot"],"kind":"trait"},"18:11339:12003":{"crate_id":18,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:41686:109":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"7:5945:13876":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"18:12113:12158":{"crate_id":18,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"5:1339:5275":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"18:13516:12544":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"24:611:5247":{"crate_id":24,"path":["typenum","marker_traits","NonZero"],"kind":"trait"},"1:21761:16191":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"7:561:13185":{"crate_id":7,"path":["libc","unix","linger"],"kind":"struct"},"7:123:17284":{"crate_id":7,"path":["libc","unix","fpos_t"],"kind":"enum"},"18:10452:15058":{"crate_id":18,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:43178:14879":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:10173:5277":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"12:2053:14645":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:22274:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"18:10598:11944":{"crate_id":18,"path":["object","read","pe","import","Import"],"kind":"enum"},"5:35:11529":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:8156:12721":{"crate_id":17,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"18:12033:12147":{"crate_id":18,"path":["object","macho","DylibCommand"],"kind":"struct"},"18:10142:23682":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"7:4733:13581":{"crate_id":7,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"7:4656:13541":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"7:1677:13317":{"crate_id":7,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:2503:236":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"12:1555:15164":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:6506:14606":{"crate_id":17,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"25:85:5310":{"crate_id":25,"path":["block_buffer","Lazy"],"kind":"struct"},"1:43585:193":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:12386:203":{"crate_id":1,"path":["core","task","ready","Ready"],"kind":"struct"},"6:11210:14216":{"crate_id":6,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"7:5786:13797":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"18:13219:12467":{"crate_id":18,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:11911:1492":{"crate_id":6,"path":["std","unit"],"kind":"primitive"},"7:4681:13554":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"18:10068:15044":{"crate_id":18,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:39334:14788":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"7:7434:14104":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:2385:16923":{"crate_id":6,"path":["std","io"],"kind":"module"},"7:1695:13324":{"crate_id":7,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"18:1919:23640":{"crate_id":18,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:39533:14722":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:43402:14901":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"24:2616:1643":{"crate_id":24,"path":["typenum","generated","consts","U64"],"kind":"typedef"},"18:13309:12489":{"crate_id":18,"path":["object","pe","ImageImportByName"],"kind":"struct"},"12:697:15148":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"24:924:16810":{"crate_id":24,"path":["typenum","private","PrivateCmp"],"kind":"trait"},"1:43240:14881":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:6793:14627":{"crate_id":17,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"6:8846:14197":{"crate_id":6,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"7:1710:13333":{"crate_id":7,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:914:11468":{"crate_id":6,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"7:5698:13747":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"7:4483:13500":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"7:4571:13516":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:42873:14860":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:20395:30359":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"6:8448:17167":{"crate_id":6,"path":["std","path","Component"],"kind":"enum"},"1:39958:14827":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"24:2520:1641":{"crate_id":24,"path":["typenum","generated","consts","U32"],"kind":"typedef"},"1:29782:16157":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"17:5976:14519":{"crate_id":17,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:4575:13984":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:43229:16527":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:3208:15193":{"crate_id":6,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:10666:14688":{"crate_id":6,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"6:11081:14215":{"crate_id":6,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"5:6524:11577":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:4818:12748":{"crate_id":17,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:6981:15108":{"crate_id":17,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"24:1031:16794":{"crate_id":24,"path":["typenum","private","IsLessPrivate"],"kind":"trait"},"24:1111:16798":{"crate_id":24,"path":["typenum","private","IsNotEqualPrivate"],"kind":"trait"},"5:7259:11468":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"5:5171:16889":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"5:7086:16870":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"19:736:27449":{"crate_id":19,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"7:4539:13513":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"18:10465:15059":{"crate_id":18,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:7259:14360":{"crate_id":17,"path":["gimli","read","op","Location"],"kind":"enum"},"1:5450:14747":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"12:751:11551":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:10007:5280":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:11917:1458":{"crate_id":6,"path":["std","tuple"],"kind":"primitive"},"12:1003:15156":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"7:5917:13862":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"6:3206:15192":{"crate_id":6,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:2934:5672":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"7:7469:14112":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"5:1230:15161":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:2830:12696":{"crate_id":17,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"24:1279:5328":{"crate_id":24,"path":["typenum","type_operators","ToInt"],"kind":"trait"},"18:11471:12025":{"crate_id":18,"path":["object","elf","Rela64"],"kind":"struct"},"1:8185:16473":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"18:10026:15037":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"8:0:1519":{"crate_id":8,"path":["unwind"],"kind":"module"},"23:403:1842":{"crate_id":23,"path":["generic_array","GenericArray"],"kind":"struct"},"18:12403:12218":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:31795:15231":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:46608:10984":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:6767:14626":{"crate_id":17,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:8996:208":{"crate_id":1,"path":["core","fmt","Result"],"kind":"typedef"},"18:13721:12621":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"7:4307:13414":{"crate_id":7,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:8307:14173":{"crate_id":6,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"24:1174:5369":{"crate_id":24,"path":["typenum","type_operators","Abs"],"kind":"trait"},"7:6764:14075":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:6442:14597":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"18:13744:12622":{"crate_id":18,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"6:11926:731":{"crate_id":6,"path":["std","i128"],"kind":"primitive"},"6:1786:15176":{"crate_id":6,"path":["std","env","Vars"],"kind":"struct"},"1:44962:14411":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:46226:14428":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:8797:14195":{"crate_id":6,"path":["std","process","ExitCode"],"kind":"struct"},"24:6316:5230":{"crate_id":24,"path":["typenum","uint","UInt"],"kind":"struct"},"6:1586:14677":{"crate_id":6,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"25:0:1784":{"crate_id":25,"path":["block_buffer"],"kind":"module"},"5:7102:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"18:8521:23595":{"crate_id":18,"path":["object","common","FileFlags"],"kind":"enum"},"5:1704:11468":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"1:42968:14780":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:30575:181":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"6:10940:1955":{"crate_id":6,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:8047:12937":{"crate_id":17,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"6:3878:17087":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:4636:17144":{"crate_id":6,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"7:4489:13502":{"crate_id":7,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"4:160:1647":{"crate_id":4,"path":["digest","impl_oid_carrier"],"kind":"macro"},"5:3172:14679":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"6:3058:15188":{"crate_id":6,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"1:2820:16350":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"22:16:184":{"crate_id":22,"path":["crypto_common","Output"],"kind":"typedef"},"1:8606:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:7132:133":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"18:11193:11965":{"crate_id":18,"path":["object","archive","AixFileHeader"],"kind":"struct"},"6:11252:14717":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"18:13453:12528":{"crate_id":18,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:8340:17153":{"crate_id":6,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:3171:16360":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:39511:15312":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"24:821:16818":{"crate_id":24,"path":["typenum","private","PrivateXor"],"kind":"trait"},"17:4568:12741":{"crate_id":17,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:46672:10988":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"21:46:127":{"crate_id":21,"path":["blobby","Error"],"kind":"enum"},"7:4714:13573":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"7:1716:13334":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"18:247:14983":{"crate_id":18,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:6717:14613":{"crate_id":17,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:8285:13969":{"crate_id":6,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:925:15147":{"crate_id":6,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"12:320:11464":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:9268:140":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"7:1899:18622":{"crate_id":7,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"7:6594:13988":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"5:5417:11564":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:7519:14651":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"18:9839:15024":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"18:9853:15025":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:4236:15299":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"6:10058:15262":{"crate_id":6,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:5811:14541":{"crate_id":17,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"7:5843:13827":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:30205:29516":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"17:3585:12728":{"crate_id":17,"path":["gimli","arch","X86"],"kind":"struct"},"1:39428:16422":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"typedef"},"7:5000:13716":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"7:1645:13294":{"crate_id":7,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"18:10823:11797":{"crate_id":18,"path":["object","read","SectionIndex"],"kind":"struct"},"18:9907:11862":{"crate_id":18,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"19:481:14472":{"crate_id":19,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:2800:16347":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:6243:38568":{"crate_id":17,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"12:1859:14677":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:4728:12745":{"crate_id":17,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:11552:16507":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"4:427:1945":{"crate_id":4,"path":["digest","XofReader"],"kind":"trait"},"18:9340:15002":{"crate_id":18,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:3992:17097":{"crate_id":6,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"7:7475:14113":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"7:4501:13511":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:3977:15296":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:41950:11364":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"5:1401:14675":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:3133:38323":{"crate_id":6,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:21554:14242":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"10:481:22527":{"crate_id":10,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"18:11109:11954":{"crate_id":18,"path":["object","read","CompressedData"],"kind":"struct"},"4:294:16793":{"crate_id":4,"path":["digest","core_api","wrapper","sealed","Sealed"],"kind":"trait"},"18:11879:12122":{"crate_id":18,"path":["object","macho","LoadCommand"],"kind":"struct"},"5:0:284":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:4303:11586":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:7814:14126":{"crate_id":6,"path":["std","fs","FileTimes"],"kind":"struct"},"1:48926:244":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"18:13477:12532":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"18:9178:14999":{"crate_id":18,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"18:13399:12514":{"crate_id":18,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:2454:16793":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"10:325:13090":{"crate_id":10,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"5:3937:11532":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:11522:14721":{"crate_id":6,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"5:4298:11487":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"5:5167:5398":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:43072:14873":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:6291:164":{"crate_id":6,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:5797:14540":{"crate_id":17,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"7:6496:13941":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"18:8667:11826":{"crate_id":18,"path":["object","endian","BigEndian"],"kind":"struct"},"4:291:5249":{"crate_id":4,"path":["digest","core_api","wrapper","CoreProxy"],"kind":"trait"},"1:21637:14247":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:45272:14417":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:4387:11023":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"12:777:11472":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"17:5032:12755":{"crate_id":17,"path":["gimli","constants","DwLnct"],"kind":"struct"},"6:5561:11490":{"crate_id":6,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"5:3515:5275":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:41668:67":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"7:5910:13861":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"5:6666:11569":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"18:13564:12581":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:38926:201":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:4872:12750":{"crate_id":17,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:6431:14596":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"6:1898:15181":{"crate_id":6,"path":["std","error","Report"],"kind":"struct"},"1:3205:16365":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:8517:14697":{"crate_id":6,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:5920:14555":{"crate_id":17,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"18:13812:12642":{"crate_id":18,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:7498:14650":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"18:13433:12522":{"crate_id":18,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:10080:5283":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"18:9228:38573":{"crate_id":18,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"10:445:22528":{"crate_id":10,"path":["miniz_oxide","MZError"],"kind":"enum"},"24:783:16789":{"crate_id":24,"path":["typenum","private","InternalMarker"],"kind":"trait"},"7:4218:13352":{"crate_id":7,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"24:5724:5235":{"crate_id":24,"path":["typenum","bit","B1"],"kind":"struct"},"6:1083:15161":{"crate_id":6,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"7:4751:13588":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:5963:14558":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"7:4346:13435":{"crate_id":7,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"4:336:5242":{"crate_id":4,"path":["digest","core_api","ExtendableOutputCore"],"kind":"trait"},"5:2104:14730":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:2865:208":{"crate_id":6,"path":["std","io","error","Result"],"kind":"typedef"},"18:12046:12148":{"crate_id":18,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:9192:15179":{"crate_id":6,"path":["std","sys","unix","args","Args"],"kind":"struct"},"18:11163:11961":{"crate_id":18,"path":["object","archive","AixHeader"],"kind":"struct"},"7:1663:13306":{"crate_id":7,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"18:11556:12040":{"crate_id":18,"path":["object","elf","Verdef"],"kind":"struct"},"1:12355:11498":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:21610:14763":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"21:105:16784":{"crate_id":21,"path":["blobby","Blob5Iterator"],"kind":"struct"},"21:11:16775":{"crate_id":21,"path":["blobby","BlobIterator"],"kind":"struct"},"6:6327:15219":{"crate_id":6,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"18:1034:14987":{"crate_id":18,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:7136:150":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"24:642:5355":{"crate_id":24,"path":["typenum","marker_traits","Integer"],"kind":"trait"},"6:7862:15234":{"crate_id":6,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"18:11422:12018":{"crate_id":18,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:2668:12689":{"crate_id":17,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"1:48569:16599":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:46623:10985":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"6:7807:14688":{"crate_id":6,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:7478:12714":{"crate_id":17,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:8490:14692":{"crate_id":6,"path":["std","path","Components"],"kind":"struct"},"25:106:5244":{"crate_id":25,"path":["block_buffer","BlockBuffer"],"kind":"struct"},"1:39703:14816":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"5:668:229":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:43658:14905":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"7:6521:13959":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"6:8859:17192":{"crate_id":6,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"6:1597:14679":{"crate_id":6,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:6368:15220":{"crate_id":6,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:45114:14415":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:39713:14817":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:39664:14813":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"6:4325:15203":{"crate_id":6,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"7:4781:13600":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:5779:12762":{"crate_id":17,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:43215:14880":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"18:13324:12491":{"crate_id":18,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:6544:12708":{"crate_id":17,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"12:353:11466":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"24:2808:1797":{"crate_id":24,"path":["typenum","generated","consts","U128"],"kind":"typedef"},"6:5437:15212":{"crate_id":6,"path":["std","process","Stdio"],"kind":"struct"},"1:44601:14400":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"5:4967:11562":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"18:10000:11928":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"18:12646:12263":{"crate_id":18,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:39386:14793":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"7:1747:13346":{"crate_id":7,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"7:7498:14119":{"crate_id":7,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:2719:11045":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:30011:11042":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:6519:1825":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:11302:14854":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:4122:14746":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:6164:14586":{"crate_id":17,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"18:10569:14501":{"crate_id":18,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"7:4361:13442":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:8025:12936":{"crate_id":17,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"18:8823:11831":{"crate_id":18,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:39752:14822":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"12:669:15147":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:41738:71":{"crate_id":1,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"1:43086:14876":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"18:10691:23708":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"19:652:11709":{"crate_id":19,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"5:1969:14681":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"18:13249:12473":{"crate_id":18,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:8827:14196":{"crate_id":6,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"24:5702:5234":{"crate_id":24,"path":["typenum","bit","B0"],"kind":"struct"},"6:8255:15243":{"crate_id":6,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:10831:15230":{"crate_id":6,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"6:11933:1529":{"crate_id":6,"path":["std","usize"],"kind":"primitive"},"18:10589:14506":{"crate_id":18,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"18:975:14986":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"6:11930:1475":{"crate_id":6,"path":["std","u64"],"kind":"primitive"},"7:6571:13987":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:12220:15307":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"7:5805:13799":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"22:22:1788":{"crate_id":22,"path":["crypto_common","BlockSizeUser"],"kind":"trait"},"7:6548:13969":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:21355:16793":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"5:1030:36522":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"5:868:5275":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:48939:244":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"7:4795:13608":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"18:9628:15013":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"5:6930:14229":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:9057:11155":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:42669:5283":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:41439:11157":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:10118:5284":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"4:332:1790":{"crate_id":4,"path":["digest","core_api","BufferKindUser"],"kind":"trait"},"6:11908:369":{"crate_id":6,"path":["std","bool"],"kind":"primitive"},"6:4573:13982":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"6:929:15148":{"crate_id":6,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"18:11434:12019":{"crate_id":18,"path":["object","elf","Rel32"],"kind":"struct"},"1:44694:14402":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:7837:129":{"crate_id":6,"path":["std","fs","FileType"],"kind":"struct"},"18:242:14982":{"crate_id":18,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:2694:12690":{"crate_id":17,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"7:6541:13965":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"6:10233:36861":{"crate_id":6,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:43057:14867":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:6460:12703":{"crate_id":17,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"24:933:16823":{"crate_id":24,"path":["typenum","private","PrivateSetBit"],"kind":"trait"},"6:9118:14700":{"crate_id":6,"path":["std","time","SystemTimeError"],"kind":"struct"},"18:11258:11988":{"crate_id":18,"path":["object","elf","FileHeader64"],"kind":"struct"},"19:599:38585":{"crate_id":19,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:7958:17078":{"crate_id":6,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:8805:5275":{"crate_id":6,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:7711:12890":{"crate_id":17,"path":["gimli","read","UnitOffset"],"kind":"struct"},"7:4673:13550":{"crate_id":7,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:8821:11094":{"crate_id":6,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"6:11927:1476":{"crate_id":6,"path":["std","u8"],"kind":"primitive"},"1:40862:11094":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"5:7179:222":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"18:12563:12246":{"crate_id":18,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:8774:30614":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:40744:14360":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"12:834:15152":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:4093:17112":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:956:15154":{"crate_id":6,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"7:4583:13517":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"7:5823:13811":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"5:3656:15284":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"18:8632:23576":{"crate_id":18,"path":["object","endian","Endianness"],"kind":"enum"},"12:1872:14679":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"18:9038:38572":{"crate_id":18,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:11920:633":{"crate_id":6,"path":["std","f32"],"kind":"primitive"},"5:621:15281":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"0:101:1674":{"crate_id":0,"path":["sha2","Sha512_256"],"kind":"typedef"},"18:13233:12470":{"crate_id":18,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:2808:16348":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"19:766:27450":{"crate_id":19,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:154:11457":{"crate_id":17,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"6:11240:15225":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"18:12607:12253":{"crate_id":18,"path":["object","macho","Nlist64"],"kind":"struct"},"17:4624:12743":{"crate_id":17,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"6:1575:11468":{"crate_id":6,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"6:11024:14194":{"crate_id":6,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"18:10897:11942":{"crate_id":18,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:6904:12821":{"crate_id":17,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:7095:5353":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:42438:5272":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"18:13135:12447":{"crate_id":18,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"12:1840:11551":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"18:1947:14989":{"crate_id":18,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:5677:23528":{"crate_id":17,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"0:100:1672":{"crate_id":0,"path":["sha2","Sha512_224"],"kind":"typedef"},"18:10283:11899":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"4:448:1949":{"crate_id":4,"path":["digest","VariableOutputReset"],"kind":"trait"},"5:4139:5275":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:43386:14897":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"23:362:5312":{"crate_id":23,"path":["generic_array","ArrayLength"],"kind":"trait"},"1:42504:5291":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:20814:16563":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"4:484:5248":{"crate_id":4,"path":["digest","core_api","rt_variable","RtVariableCoreWrapper"],"kind":"struct"},"1:4:1001":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"6:11515:14721":{"crate_id":6,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:40719:5275":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"22:39:16839":{"crate_id":22,"path":["crypto_common","IvSizeUser"],"kind":"trait"},"6:4734:11488":{"crate_id":6,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"22:56:16844":{"crate_id":22,"path":["crypto_common","InnerIvInit"],"kind":"trait"},"6:11395:15199":{"crate_id":6,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:2588:127":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"4:0:1633":{"crate_id":4,"path":["digest"],"kind":"module"},"1:48952:244":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:4750:202":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:7488:14649":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"12:2080:15157":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"24:1153:16812":{"crate_id":24,"path":["typenum","private","PrivateLogarithm2"],"kind":"trait"},"7:7463:14111":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"18:12592:12249":{"crate_id":18,"path":["object","macho","Nlist32"],"kind":"struct"},"5:7149:14742":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:6254:12769":{"crate_id":17,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"5:208:11531":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:40468:153":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"5:677:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:11925:735":{"crate_id":6,"path":["std","i64"],"kind":"primitive"},"18:13791:12636":{"crate_id":18,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:2337:12670":{"crate_id":17,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:10719:5295":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:41774:11164":{"crate_id":1,"path":["core","fmt","FlagV1"],"kind":"enum"},"24:1190:5322":{"crate_id":24,"path":["typenum","type_operators","Cmp"],"kind":"trait"},"1:20840:16568":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:30041:29515":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"18:11993:12139":{"crate_id":18,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:21:672":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"5:6220:11532":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"18:9028:14996":{"crate_id":18,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:45554:14422":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:11935:13":{"crate_id":6,"path":["std","fn"],"kind":"primitive"},"6:11924:734":{"crate_id":6,"path":["std","i32"],"kind":"primitive"},"1:2940:5673":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"22:0:1940":{"crate_id":22,"path":["crypto_common"],"kind":"module"},"18:8283:23588":{"crate_id":18,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:4789:12747":{"crate_id":17,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:8187:15245":{"crate_id":6,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"21:92:16783":{"crate_id":21,"path":["blobby","Blob4Iterator"],"kind":"struct"},"1:9876:5275":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:2864:16357":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"23:0:1841":{"crate_id":23,"path":["generic_array"],"kind":"module"},"17:5305:12758":{"crate_id":17,"path":["gimli","constants","DwOp"],"kind":"struct"},"7:1704:13330":{"crate_id":7,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:679:16999":{"crate_id":6,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"1:3989:15297":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:4904:12751":{"crate_id":17,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:5568:11491":{"crate_id":6,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:5346:12759":{"crate_id":17,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:39280:14780":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:1583:1345":{"crate_id":1,"path":["core","mem","size_of"],"kind":"function"},"1:46428:14431":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"6:5352:15209":{"crate_id":6,"path":["std","process","ChildStdout"],"kind":"struct"},"1:39414:14794":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:7713:15231":{"crate_id":6,"path":["std","error","private","Internal"],"kind":"struct"},"24:6363:5231":{"crate_id":24,"path":["typenum","uint","UTerm"],"kind":"struct"},"6:3970:17093":{"crate_id":6,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"19:727:11733":{"crate_id":19,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:7557:12883":{"crate_id":17,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:2572:12685":{"crate_id":17,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:20412:30571":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"12:659:11094":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:44249:14385":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:7467:14646":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"7:4396:13457":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:10766:1783":{"crate_id":1,"path":["core","slice","raw","from_ref"],"kind":"function"},"1:46550:14434":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"18:10015:15036":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"5:262:11532":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"5:3151:36566":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"3:0:1926":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"22:75:11704":{"crate_id":22,"path":["crypto_common","InvalidLength"],"kind":"struct"},"24:6272:5263":{"crate_id":24,"path":["typenum","Less"],"kind":"struct"},"1:40872:206":{"crate_id":1,"path":["core","sync","atomic","Ordering","Relaxed"],"kind":"foreign_type"},"1:8292:15304":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"5:4099:11487":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"7:4945:13686":{"crate_id":7,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:5594:12706":{"crate_id":17,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"18:9895:15031":{"crate_id":18,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"10:352:22543":{"crate_id":10,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"5:2177:14733":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"18:9653:15015":{"crate_id":18,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:39542:14797":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:11177:15274":{"crate_id":6,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:46366:14430":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"7:4274:13390":{"crate_id":7,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:1592:14678":{"crate_id":6,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:2847:16353":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"7:5741:13765":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:43628:14381":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:8281:15247":{"crate_id":6,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"18:13612:12582":{"crate_id":18,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:42959:14775":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"7:5752:13773":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:8142:15142":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"5:7193:14745":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:2682:226":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:7529:16457":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:413:163":{"crate_id":6,"path":["std","thread","local","LocalKey"],"kind":"struct"},"7:6053:13903":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"7:4628:13528":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:10661:14703":{"crate_id":6,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"6:4900:17149":{"crate_id":6,"path":["std","panic","always_abort"],"kind":"function"},"18:11924:12132":{"crate_id":18,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:3936:17092":{"crate_id":6,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:3612:17086":{"crate_id":6,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"18:11544:12039":{"crate_id":18,"path":["object","elf","Versym"],"kind":"struct"},"17:4596:12742":{"crate_id":17,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:2298:22645":{"crate_id":17,"path":["gimli","common","Format"],"kind":"enum"},"7:493:13143":{"crate_id":7,"path":["libc","unix","timespec"],"kind":"struct"},"1:2830:16352":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"11:44:13054":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"7:1514:13209":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"6:11154:11520":{"crate_id":6,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"7:4389:13454":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"18:13443:12525":{"crate_id":18,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"7:5938:13875":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"7:7201:14090":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:46764:5854":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:2230:98":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"24:785:16820":{"crate_id":24,"path":["typenum","private","Trim"],"kind":"trait"},"6:11931:1472":{"crate_id":6,"path":["std","u128"],"kind":"primitive"},"6:3398:15197":{"crate_id":6,"path":["std","io","IoSliceMut"],"kind":"struct"},"12:1852:14676":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:45768:14425":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:2782:16344":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"18:13803:12638":{"crate_id":18,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"6:7878:14681":{"crate_id":6,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:8769:14193":{"crate_id":6,"path":["std","process","ExitStatus"],"kind":"struct"},"1:10045:5297":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"7:4637:13533":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:39244:14340":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:646:16998":{"crate_id":6,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:7478:11949":{"crate_id":6,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"18:12894:12368":{"crate_id":18,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"7:6757:14072":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"4:430:1946":{"crate_id":4,"path":["digest","ExtendableOutput"],"kind":"trait"},"7:4248:13370":{"crate_id":7,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:4842:17142":{"crate_id":6,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"22:36:16838":{"crate_id":22,"path":["crypto_common","KeySizeUser"],"kind":"trait"},"1:45194:14416":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"19:719:11730":{"crate_id":19,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"18:11502:12034":{"crate_id":18,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"24:1198:5329":{"crate_id":24,"path":["typenum","type_operators","PartialDiv"],"kind":"trait"},"17:8170:14664":{"crate_id":17,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:43425:121":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:42905:14861":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"6:1568:11094":{"crate_id":6,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"6:1927:17033":{"crate_id":6,"path":["std","error","Indented"],"kind":"struct"},"24:814:16808":{"crate_id":24,"path":["typenum","private","PrivateAnd"],"kind":"trait"},"17:7529:12716":{"crate_id":17,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"24:1206:5326":{"crate_id":24,"path":["typenum","type_operators","Max"],"kind":"trait"},"1:39561:14800":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:11921:634":{"crate_id":6,"path":["std","f64"],"kind":"primitive"},"12:1029:15157":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"5:5745:11562":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"18:13777:12629":{"crate_id":18,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"5:7021:11094":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:4969:12753":{"crate_id":17,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:5571:12704":{"crate_id":17,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:11341:14858":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"18:9826:15023":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"18:13024:12419":{"crate_id":18,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:2679:223":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"6:4253:15202":{"crate_id":6,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"25:22:16793":{"crate_id":25,"path":["block_buffer","sealed","Sealed"],"kind":"trait"},"17:6132:14583":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:1571:11551":{"crate_id":6,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:4540:12740":{"crate_id":17,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:847:5275":{"crate_id":6,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:904:11551":{"crate_id":6,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:20433:16800":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"6:11225:14714":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:2212:11582":{"crate_id":6,"path":["std","fs","read"],"kind":"function"},"17:7652:196":{"crate_id":17,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:44916:14409":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"18:12006:12142":{"crate_id":18,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:40633:14356":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:43103:14877":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:2879:12698":{"crate_id":17,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"10:174:22594":{"crate_id":10,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:6558:14608":{"crate_id":17,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:39580:14803":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:39268:14779":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"18:13015:12415":{"crate_id":18,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"7:5772:13786":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:8236:14691":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:8611:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:7837:14653":{"crate_id":17,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"18:9534:15010":{"crate_id":18,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:2594:12686":{"crate_id":17,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:6655:30688":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:4232:205":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:42637:11833":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:891:14675":{"crate_id":6,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:7449:15130":{"crate_id":17,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"18:9734:15021":{"crate_id":18,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"18:11069:23603":{"crate_id":18,"path":["object","read","CompressionFormat"],"kind":"enum"},"19:80:27439":{"crate_id":19,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:42190:14372":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:5104:12757":{"crate_id":17,"path":["gimli","constants","DwRle"],"kind":"struct"},"18:12194:12169":{"crate_id":18,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:8928:15251":{"crate_id":6,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"24:5746:5232":{"crate_id":24,"path":["typenum","int","PInt"],"kind":"struct"},"6:8096:12877":{"crate_id":6,"path":["std","io","util","Empty"],"kind":"struct"},"17:7411:12880":{"crate_id":17,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:10656:14701":{"crate_id":6,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"17:6321:15106":{"crate_id":17,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:6935:15107":{"crate_id":17,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"24:615:5335":{"crate_id":24,"path":["typenum","marker_traits","Bit"],"kind":"trait"},"7:1731:13341":{"crate_id":7,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:38987:14336":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:22142:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:7317:38569":{"crate_id":17,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:42925:14863":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"18:10705:11921":{"crate_id":18,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:21699:29477":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"7:531:13168":{"crate_id":7,"path":["libc","unix","hostent"],"kind":"struct"},"6:6096:11501":{"crate_id":6,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"6:6480:17186":{"crate_id":6,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:3388:15295":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"6:6889:37841":{"crate_id":6,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:7743:12707":{"crate_id":17,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"4:334:5241":{"crate_id":4,"path":["digest","core_api","FixedOutputCore"],"kind":"trait"},"6:3127:37836":{"crate_id":6,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"7:6643:14000":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:2851:16354":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:46512:14433":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"5:1066:36523":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:39381:101":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"7:4439:13480":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"15:165:22614":{"crate_id":15,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"18:13667:12600":{"crate_id":18,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"18:3266:14995":{"crate_id":18,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"18:13488:12536":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"6:10957:11519":{"crate_id":6,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:40777:15313":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:42209:5304":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:7077:23536":{"crate_id":17,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:5386:11825":{"crate_id":17,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"7:6530:13960":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"12:300:14671":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:2676:11044":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"7:1604:13262":{"crate_id":7,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"7:6094:13929":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:8500:5275":{"crate_id":6,"path":["std","path","Iter"],"kind":"struct"},"7:4757:13589":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"18:11459:12024":{"crate_id":18,"path":["object","elf","Rel64"],"kind":"struct"},"24:1241:5372":{"crate_id":24,"path":["typenum","type_operators","IsLessOrEqual"],"kind":"trait"},"18:11446:12022":{"crate_id":18,"path":["object","elf","Rela32"],"kind":"struct"},"17:4327:12735":{"crate_id":17,"path":["gimli","constants","DwAt"],"kind":"struct"},"18:11282:11989":{"crate_id":18,"path":["object","elf","Ident"],"kind":"struct"},"17:3640:11741":{"crate_id":17,"path":["gimli","arch","X86_64"],"kind":"struct"},"4:358:1634":{"crate_id":4,"path":["digest","digest","Digest"],"kind":"trait"},"7:6667:14012":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:6876:12710":{"crate_id":17,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:30603:11059":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"19:699:14481":{"crate_id":19,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"18:10989:11912":{"crate_id":18,"path":["object","read","Export"],"kind":"struct"},"18:10440:15057":{"crate_id":18,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:44746:14404":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"12:822:17006":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:38882:200":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"7:4720:13576":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"7:4353:13439":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"18:1978:14992":{"crate_id":18,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"18:10334:11854":{"crate_id":18,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:5497:13890":{"crate_id":6,"path":["std","process","exit"],"kind":"function"},"6:641:15171":{"crate_id":6,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"6:4988:15204":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:38822:198":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"6:2548:11481":{"crate_id":6,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"7:4379:13451":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"7:4890:13666":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"24:612:5324":{"crate_id":24,"path":["typenum","marker_traits","Zero"],"kind":"trait"},"22:54:16843":{"crate_id":22,"path":["crypto_common","InnerInit"],"kind":"trait"},"18:12915:12378":{"crate_id":18,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"23:300:5397":{"crate_id":23,"path":["generic_array","sequence","Shorten"],"kind":"trait"},"1:4577:16403":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"18:10721:11922":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:39461:11588":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:44870:14407":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:8186:16472":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:41958:14841":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"19:681:14477":{"crate_id":19,"path":["memchr","memmem","Finder"],"kind":"struct"},"15:31:15143":{"crate_id":15,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"18:12536:12242":{"crate_id":18,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"7:1534:13217":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"18:10402:15051":{"crate_id":18,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"7:572:13190":{"crate_id":7,"path":["libc","unix","itimerval"],"kind":"struct"},"18:10857:23601":{"crate_id":18,"path":["object","read","SymbolSection"],"kind":"enum"},"18:12799:12285":{"crate_id":18,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"18:10039:15040":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:484:11475":{"crate_id":6,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"18:9670:15018":{"crate_id":18,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"23:317:5279":{"crate_id":23,"path":["generic_array","sequence","Split"],"kind":"trait"},"17:2616:12687":{"crate_id":17,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"7:1583:13248":{"crate_id":7,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"7:7428:14103":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:2804:16346":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:10844:15212":{"crate_id":6,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"6:8757:184":{"crate_id":6,"path":["std","process","Output"],"kind":"struct"},"6:11916:1379":{"crate_id":6,"path":["std","str"],"kind":"primitive"},"18:12522:12241":{"crate_id":18,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"18:13625:12588":{"crate_id":18,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:42609:14845":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:9048:111":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"5:5123:11532":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:46702:10990":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"18:9469:15004":{"crate_id":18,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:5402:11826":{"crate_id":17,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"18:8953:11836":{"crate_id":18,"path":["object","read","util","StringTable"],"kind":"struct"},"7:6791:14081":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:11910:412":{"crate_id":6,"path":["std","char"],"kind":"primitive"},"24:1221:5370":{"crate_id":24,"path":["typenum","type_operators","IsEqual"],"kind":"trait"},"1:44583:14399":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"5:768:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:3446:37822":{"crate_id":6,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"24:2568:1642":{"crate_id":24,"path":["typenum","generated","consts","U48"],"kind":"typedef"},"6:8145:14796":{"crate_id":6,"path":["std","io","Chain"],"kind":"struct"},"6:7870:15235":{"crate_id":6,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:39021:11166":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"1:39612:14808":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:3300:12726":{"crate_id":17,"path":["gimli","arch","LoongArch"],"kind":"struct"},"7:4962:13694":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"18:12550:12245":{"crate_id":18,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"7:4408:13462":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"18:8931:11835":{"crate_id":18,"path":["object","read","util","ByteString"],"kind":"struct"},"1:43250:14885":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:9311:11361":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:5944:15069":{"crate_id":17,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:734:141":{"crate_id":6,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"18:11234:11974":{"crate_id":18,"path":["object","elf","FileHeader32"],"kind":"struct"},"7:5951:13879":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"7:525:13165":{"crate_id":7,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:6061:22644":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:45013:14412":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"12:762:11468":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"18:13181:12453":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"7:4988:13711":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:7601:15226":{"crate_id":6,"path":["std","thread","Builder"],"kind":"struct"},"17:6293:12772":{"crate_id":17,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"5:6984:11094":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"18:13159:12449":{"crate_id":18,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:55:12926":{"crate_id":17,"path":["gimli","endianity","Endianity"],"kind":"trait"},"5:5639:11551":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:10008:36857":{"crate_id":6,"path":["std","sys","unix","os","Env"],"kind":"struct"},"18:10257:15047":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:2378:12677":{"crate_id":17,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"7:4261:13380":{"crate_id":7,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"19:590:11717":{"crate_id":19,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:40854:5276":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"6:10216:15211":{"crate_id":6,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"4:330:1793":{"crate_id":4,"path":["digest","core_api","UpdateCore"],"kind":"trait"},"6:7546:11512":{"crate_id":6,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"5:2896:14226":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:7572:38566":{"crate_id":17,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:6183:11490":{"crate_id":6,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"6:5905:11490":{"crate_id":6,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:44892:14408":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:10187:5282":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"24:654:5323":{"crate_id":24,"path":["typenum","marker_traits","PowerOfTwo"],"kind":"trait"},"6:1988:182":{"crate_id":6,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:20601:16571":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:21749:14768":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:2448:12680":{"crate_id":17,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"5:6962:11542":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"5:6023:16902":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:2297:186":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"12:1138:15161":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"4:531:1950":{"crate_id":4,"path":["digest","InvalidBufferSize"],"kind":"struct"},"1:12537:1592":{"crate_id":1,"path":["core","core_arch","arch","x86_64"],"kind":"module"},"18:12345:12208":{"crate_id":18,"path":["object","macho","RpathCommand"],"kind":"struct"},"6:4433:17118":{"crate_id":6,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"10:0:1929":{"crate_id":10,"path":["miniz_oxide"],"kind":"module"},"6:7797:11776":{"crate_id":6,"path":["std","fs","Metadata"],"kind":"struct"},"7:7452:14107":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"6:8891:17193":{"crate_id":6,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:3922:17090":{"crate_id":6,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"18:9617:15012":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:11490:14218":{"crate_id":6,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"23:422:5383":{"crate_id":23,"path":["generic_array","ArrayBuilder"],"kind":"struct"},"1:45974:14426":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:0:1936":{"crate_id":17,"path":["gimli"],"kind":"module"},"18:10635:11916":{"crate_id":18,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"18:8753:11829":{"crate_id":18,"path":["object","endian","U64Bytes"],"kind":"struct"},"5:5834:11487":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"5:851:11540":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:39589:14804":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"19:660:14977":{"crate_id":19,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:39632:14810":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"18:12634:12256":{"crate_id":18,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:4678:17105":{"crate_id":6,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:42934:14864":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:2825:16351":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:7686:14685":{"crate_id":6,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"24:1878:16802":{"crate_id":24,"path":["typenum","uint","GetBit"],"kind":"trait"},"24:1184:5327":{"crate_id":24,"path":["typenum","type_operators","Pow"],"kind":"trait"},"6:7589:16793":{"crate_id":6,"path":["std","sealed","Sealed"],"kind":"trait"},"24:1274:5344":{"crate_id":24,"path":["typenum","type_operators","Logarithm2"],"kind":"trait"},"18:9748:11854":{"crate_id":18,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"7:5890:13853":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:46474:14432":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:6851:12877":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:7293:12859":{"crate_id":17,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:12344:106":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"12:1534:15163":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"7:546:13177":{"crate_id":7,"path":["libc","unix","pollfd"],"kind":"struct"},"1:2227:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"18:10743:15064":{"crate_id":18,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"7:5800:13798":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"18:13041:12421":{"crate_id":18,"path":["object","pe","Guid"],"kind":"struct"},"18:10505:15062":{"crate_id":18,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:41056:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"5:1046:34092":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:4571:13980":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"18:9959:14494":{"crate_id":18,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:8124:17052":{"crate_id":6,"path":["std","io","SeekFrom"],"kind":"enum"},"6:11258:14718":{"crate_id":6,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:25618:14262":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"7:4559:13515":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"18:13376:12506":{"crate_id":18,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:2757:11050":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"7:1527:13215":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"18:10580:14505":{"crate_id":18,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"7:1550:13225":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"7:6773:14078":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:3323:14829":{"crate_id":6,"path":["std","io","util","Repeat"],"kind":"struct"},"5:7204:15294":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"12:810:15162":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"18:9148:38579":{"crate_id":18,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:1824:15178":{"crate_id":6,"path":["std","env","SplitPaths"],"kind":"struct"},"7:6649:14001":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:43458:16533":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"5:771:11535":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:43620:15320":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"7:4910:13673":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"18:9886:15028":{"crate_id":18,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"18:10354:11904":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"6:4173:15201":{"crate_id":6,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:7709:15230":{"crate_id":6,"path":["std","env","JoinPathsError"],"kind":"struct"},"7:6059:13904":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:2642:12688":{"crate_id":17,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"4:357:1798":{"crate_id":4,"path":["digest","digest","HashMarker"],"kind":"trait"},"1:11778:111":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"7:594:13203":{"crate_id":7,"path":["libc","unix","protoent"],"kind":"struct"},"6:3245:15194":{"crate_id":6,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:1985:183":{"crate_id":6,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:22307:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:2500:132":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:46304:14429":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:21586:14243":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"12:815:15149":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:20627:16572":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"6:11331:11524":{"crate_id":6,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"18:11946:12133":{"crate_id":18,"path":["object","macho","Section32"],"kind":"struct"},"6:9070:216":{"crate_id":6,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:42467:5286":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"18:11136:11955":{"crate_id":18,"path":["object","archive","Header"],"kind":"struct"},"6:5368:15210":{"crate_id":6,"path":["std","process","ChildStderr"],"kind":"struct"},"24:1251:5373":{"crate_id":24,"path":["typenum","type_operators","IsNotEqual"],"kind":"trait"},"6:6533:17188":{"crate_id":6,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"18:12224:12188":{"crate_id":18,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:8269:127":{"crate_id":17,"path":["gimli","read","Error"],"kind":"enum"},"5:6691:11581":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:2494:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"6:8986:15259":{"crate_id":6,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:1802:14238":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:2808:12695":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"6:2342:14234":{"crate_id":6,"path":["std","fs","metadata"],"kind":"function"},"17:3815:12731":{"crate_id":17,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:5527:14748":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"12:1628:11473":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"18:8971:128":{"crate_id":18,"path":["object","read","any","File"],"kind":"struct"},"7:505:13148":{"crate_id":7,"path":["libc","unix","rusage"],"kind":"struct"},"9:0:1680":{"crate_id":9,"path":["cfg_if"],"kind":"module"},"1:11265:14849":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:2426:12679":{"crate_id":17,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"6:10951:11518":{"crate_id":6,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"19:538:11714":{"crate_id":19,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"6:8263:14172":{"crate_id":6,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"5:1451:15283":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:9067:11159":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"18:9380:23609":{"crate_id":18,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"18:11821:12113":{"crate_id":18,"path":["object","macho","FatArch32"],"kind":"struct"},"6:9382:128":{"crate_id":6,"path":["std","sys","unix","fs","File"],"kind":"struct"},"22:46:1786":{"crate_id":22,"path":["crypto_common","AlgorithmName"],"kind":"trait"},"6:11892:36830":{"crate_id":6,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:45430:14420":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"7:4313:13416":{"crate_id":7,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:39724:14820":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"18:13367:12503":{"crate_id":18,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"7:6728:14056":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"18:11902:12125":{"crate_id":18,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"21:0:1939":{"crate_id":21,"path":["blobby"],"kind":"module"},"8:79:22521":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"6:4639:17117":{"crate_id":6,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:8214:12878":{"crate_id":17,"path":["gimli","read","value","Value"],"kind":"enum"},"1:39689:11727":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"18:9218:11854":{"crate_id":18,"path":["object","read","any","SymbolTable"],"kind":"struct"},"5:3105:5275":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:8408:5946":{"crate_id":6,"path":["std","path","State"],"kind":"enum"},"7:7386:14102":{"crate_id":7,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"18:9796:11861":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"18:11532:12038":{"crate_id":18,"path":["object","elf","Dyn64"],"kind":"struct"},"1:39327:14787":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"18:10735:11925":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:39367:14341":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:7244:38570":{"crate_id":17,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"7:5813:13804":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"18:9098:14997":{"crate_id":18,"path":["object","read","any","SectionIterator"],"kind":"struct"},"6:11922:736":{"crate_id":6,"path":["std","i8"],"kind":"primitive"},"18:13659:12599":{"crate_id":18,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:43446:14902":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"6:2370:17048":{"crate_id":6,"path":["std","fs","read_dir"],"kind":"function"},"24:1016:16833":{"crate_id":24,"path":["typenum","private","PrivateMax"],"kind":"trait"},"5:1600:11532":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:6581:215":{"crate_id":6,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:2319:12668":{"crate_id":17,"path":["gimli","common","Encoding"],"kind":"struct"},"6:5019:15204":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"18:10936:11943":{"crate_id":18,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"18:9933:14491":{"crate_id":18,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:42457:5285":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"23:123:16786":{"crate_id":23,"path":["generic_array","arr","AddLength"],"kind":"trait"},"18:10681:14511":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:38980:15309":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:4932:12752":{"crate_id":17,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"18:13356:12499":{"crate_id":18,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:3190:30884":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"18:11813:12111":{"crate_id":18,"path":["object","macho","FatHeader"],"kind":"struct"},"18:12622:11917":{"crate_id":18,"path":["object","macho","Relocation"],"kind":"struct"},"6:10469:11516":{"crate_id":6,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:31799:14772":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"18:10316:11902":{"crate_id":18,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"7:4402:13459":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:43374:14894":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"18:9498:11847":{"crate_id":18,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:2813:12838":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:9065:11158":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"5:6534:11578":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"18:10555:14497":{"crate_id":18,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"4:424:1944":{"crate_id":4,"path":["digest","FixedOutputReset"],"kind":"trait"},"1:8997:11151":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"24:1276:5331":{"crate_id":24,"path":["typenum","type_operators","Gcd"],"kind":"trait"},"6:9126:37123":{"crate_id":6,"path":["std","sys","common","thread_local","fast_local","fast","DtorState"],"kind":"enum"},"17:2905:12699":{"crate_id":17,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:39738:14821":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"24:6294:125":{"crate_id":24,"path":["typenum","Equal"],"kind":"struct"},"4:383:1954":{"crate_id":4,"path":["digest","digest","DynDigest"],"kind":"trait"},"1:42559:5289":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:43151:14878":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"18:12510:12240":{"crate_id":18,"path":["object","macho","IdentCommand"],"kind":"struct"},"7:1609:13264":{"crate_id":7,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:10686:5294":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"18:13344:12498":{"crate_id":18,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:42530:5287":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:2931:22671":{"crate_id":17,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:43567:203":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"1:39305:14775":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:10364:11515":{"crate_id":6,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:43394:14899":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"7:4805:13614":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:39201:14775":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"7:7173:14087":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"18:11832:12116":{"crate_id":18,"path":["object","macho","FatArch64"],"kind":"struct"},"1:6702:16448":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"6:3455:17051":{"crate_id":6,"path":["std","io","Seek"],"kind":"trait"},"1:46649:10987":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:4680:17106":{"crate_id":6,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"7:4301:13413":{"crate_id":7,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"7:4334:13426":{"crate_id":7,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:41432:11156":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:44564:14398":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"18:10967:11944":{"crate_id":18,"path":["object","read","Import"],"kind":"struct"},"1:2668:218":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"18:11355:12007":{"crate_id":18,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:5630:15067":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"20:0:1018":{"crate_id":20,"path":["panic_unwind"],"kind":"module"},"17:4757:12746":{"crate_id":17,"path":["gimli","constants","DwId"],"kind":"struct"},"1:20730:14240":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:40803:208":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"7:540:13174":{"crate_id":7,"path":["libc","unix","iovec"],"kind":"struct"},"7:4871:13656":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"18:9696:11847":{"crate_id":18,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"24:1231:5371":{"crate_id":24,"path":["typenum","type_operators","IsGreater"],"kind":"trait"},"17:8180:23541":{"crate_id":17,"path":["gimli","read","value","ValueType"],"kind":"enum"},"5:5761:16897":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"12:1044:22608":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"5:6954:11551":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:41256:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"7:567:13188":{"crate_id":7,"path":["libc","unix","sigval"],"kind":"struct"},"5:3117:36565":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:7174:120":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:20809:16793":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"6:10423:15190":{"crate_id":6,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"18:12483:12238":{"crate_id":18,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"18:0:1937":{"crate_id":18,"path":["object"],"kind":"module"},"1:41176:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"18:386:14984":{"crate_id":18,"path":["object","read","any","Segment"],"kind":"struct"},"19:690:14480":{"crate_id":19,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"10:388:22529":{"crate_id":10,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:6752:17195":{"crate_id":6,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:10874:14195":{"crate_id":6,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:43641:159":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"6:2360:17043":{"crate_id":6,"path":["std","fs","canonicalize"],"kind":"function"},"6:1580:14676":{"crate_id":6,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"5:2395:14223":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"7:4451:13486":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:8974:15257":{"crate_id":6,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:40574:29462":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"5:7162:14744":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"6:3462:17070":{"crate_id":6,"path":["std","io","BufRead"],"kind":"trait"},"7:4820:13620":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:5724:14535":{"crate_id":17,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:3640:11094":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"6:9389:15232":{"crate_id":6,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"18:9577:11849":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"6:5500:17172":{"crate_id":6,"path":["std","process","Termination"],"kind":"trait"},"5:6939:11094":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:1849:15180":{"crate_id":6,"path":["std","env","ArgsOs"],"kind":"struct"},"24:1202:5325":{"crate_id":24,"path":["typenum","type_operators","Min"],"kind":"trait"},"6:10701:129":{"crate_id":6,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:6890:12711":{"crate_id":17,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:9900:5276":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:9514:11598":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:4024:16388":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:2524:12683":{"crate_id":17,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"18:13292:12481":{"crate_id":18,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:44393:14391":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:21249:5271":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:12195:190":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"7:1520:13212":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:7683:12719":{"crate_id":17,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"19:574:11709":{"crate_id":19,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"18:11372:12009":{"crate_id":18,"path":["object","elf","Sym32"],"kind":"struct"},"7:5728:13764":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"18:13211:12464":{"crate_id":18,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"18:12138:12160":{"crate_id":18,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"7:7218:14101":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:30027:67":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:42595:14374":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:39288:16409":{"crate_id":1,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:42517:5292":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:8129:15139":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:2216:17035":{"crate_id":6,"path":["std","fs","read_to_string"],"kind":"function"},"16:180:22625":{"crate_id":16,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:2930:5671":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:5741:23529":{"crate_id":17,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"18:9557:11854":{"crate_id":18,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"24:6172:5318":{"crate_id":24,"path":["typenum","array","ATerm"],"kind":"struct"},"1:22241:168":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:3177:16362":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"7:499:13145":{"crate_id":7,"path":["libc","unix","rlimit"],"kind":"struct"},"5:3907:11551":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:42773:5277":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:40491:14346":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:2776:12834":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:9053:119":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:7525:16456":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:42549:5288":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:42539:5290":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:2993:16359":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"24:1261:5340":{"crate_id":24,"path":["typenum","type_operators","IsGreaterOrEqual"],"kind":"trait"},"18:10670:11920":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"24:1131:16799":{"crate_id":24,"path":["typenum","private","IsGreaterOrEqualPrivate"],"kind":"trait"},"1:20640:16793":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:2455:5993":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:22043:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:45318:14418":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:6327:14588":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:8256:12945":{"crate_id":17,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"18:12461:12227":{"crate_id":18,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"12:274:14668":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"18:9138:14998":{"crate_id":18,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"7:6000:13892":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"4:418:1942":{"crate_id":4,"path":["digest","Update"],"kind":"trait"},"1:39491:5291":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"6:9059:165":{"crate_id":6,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:8981:15258":{"crate_id":6,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:42005:14843":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:46634:10986":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:5697:31221":{"crate_id":1,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"1:42950:14787":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"18:12835:12316":{"crate_id":18,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"7:4994:13713":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"5:7000:14737":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"19:671:14981":{"crate_id":19,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:2937:5268":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:2732:5670":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:39991:14830":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:6231:204":{"crate_id":6,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:2675:5669":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"6:10731:36837":{"crate_id":6,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"6:962:15155":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"18:11844:12118":{"crate_id":18,"path":["object","macho","MachHeader32"],"kind":"struct"},"7:4611:13519":{"crate_id":7,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:21448:14757":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"7:5990:13889":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:2357:12676":{"crate_id":17,"path":["gimli","common","Register"],"kind":"struct"},"1:9276:144":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:11623:16520":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:40871:181":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:39942:14825":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:38838:196":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"18:12576:12247":{"crate_id":18,"path":["object","macho","NoteCommand"],"kind":"struct"},"5:2894:36498":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:7280:38338":{"crate_id":6,"path":["std","panicking","Hook"],"kind":"enum"},"1:40727:5276":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"7:4597:13518":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"24:613:180":{"crate_id":24,"path":["typenum","marker_traits","Ord"],"kind":"trait"},"18:11520:12035":{"crate_id":18,"path":["object","elf","Dyn32"],"kind":"struct"},"6:9080:14205":{"crate_id":6,"path":["std","time","Instant"],"kind":"struct"},"1:42701:14852":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"18:12419:12219":{"crate_id":18,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"7:4929:13681":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:6819:12812":{"crate_id":17,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:1436:143":{"crate_id":6,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"4:328:1789":{"crate_id":4,"path":["digest","core_api","Buffer"],"kind":"typedef"},"18:10761:23599":{"crate_id":18,"path":["object","read","FileKind"],"kind":"enum"},"18:12178:12164":{"crate_id":18,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:12412:139":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:8753:659":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"18:11615:12063":{"crate_id":18,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:39964:14829":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"5:6372:11532":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"14:0:1933":{"crate_id":14,"path":["std_detect"],"kind":"module"},"21:79:16782":{"crate_id":21,"path":["blobby","Blob3Iterator"],"kind":"struct"},"6:8229:14690":{"crate_id":6,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:3872:17088":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:505:11476":{"crate_id":6,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:11354:15198":{"crate_id":6,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"18:12098:12155":{"crate_id":18,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"7:7446:14106":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:3165:134":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:43670:14384":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"6:11932:780":{"crate_id":6,"path":["std","isize"],"kind":"primitive"},"7:586:13198":{"crate_id":7,"path":["libc","unix","servent"],"kind":"struct"},"17:6390:14593":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:9968:5296":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:20689:16566":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:621:15168":{"crate_id":6,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:2687:5311":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"18:9641:15014":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"5:951:11532":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:10429:15194":{"crate_id":6,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"7:4429:13473":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:38721:16367":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:7606:14125":{"crate_id":6,"path":["std","thread","ThreadId"],"kind":"struct"},"18:9917:11863":{"crate_id":18,"path":["object","read","elf","version","Version"],"kind":"struct"},"18:9188:38576":{"crate_id":18,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:5643:14528":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:4510:12739":{"crate_id":17,"path":["gimli","constants","DwDs"],"kind":"struct"},"6:5717:15217":{"crate_id":6,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:11513:16190":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"7:4649:13540":{"crate_id":7,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:21501:14758":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"5:3713:11468":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"6:5065:189":{"crate_id":6,"path":["std","path","PathBuf"],"kind":"struct"},"17:2742:12692":{"crate_id":17,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"18:9443:15003":{"crate_id":18,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:8192:17085":{"crate_id":6,"path":["std","net","Shutdown"],"kind":"enum"},"1:39654:14812":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:11044:14214":{"crate_id":6,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"7:4775:13598":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:44794:14405":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:3242:16366":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"5:277:1951":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:11090:5259":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:10159:5281":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"7:4921:13679":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:9201:15305":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"7:6628:13994":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:41975:144":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:6351:23532":{"crate_id":17,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"7:5931:13873":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"18:13426:12521":{"crate_id":18,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"18:3142:14994":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"7:6488:13936":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"25:77:1785":{"crate_id":25,"path":["block_buffer","Eager"],"kind":"struct"},"6:8994:14201":{"crate_id":6,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"24:828:16816":{"crate_id":24,"path":["typenum","private","PrivateSub"],"kind":"trait"},"1:20367:11059":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:11376:5296":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:219:22630":{"crate_id":16,"path":["addr2line","RangeAttributes"],"kind":"struct"},"6:1788:15177":{"crate_id":6,"path":["std","env","VarsOs"],"kind":"struct"},"1:44339:14389":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"18:11299:11992":{"crate_id":18,"path":["object","elf","SectionHeader32"],"kind":"struct"},"18:8389:23591":{"crate_id":18,"path":["object","common","SymbolKind"],"kind":"enum"},"5:1201:15157":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:41296:10993":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"24:1071:16796":{"crate_id":24,"path":["typenum","private","IsGreaterPrivate"],"kind":"trait"},"1:40896:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:5000:12754":{"crate_id":17,"path":["gimli","constants","DwLne"],"kind":"struct"},"7:7521:14122":{"crate_id":7,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"7:578:13193":{"crate_id":7,"path":["libc","unix","tms"],"kind":"struct"},"18:12259:12199":{"crate_id":18,"path":["object","macho","DylibModule64"],"kind":"struct"},"6:3908:17089":{"crate_id":6,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:10426:15192":{"crate_id":6,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"18:13101:12435":{"crate_id":18,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"18:8683:11827":{"crate_id":18,"path":["object","endian","U16Bytes"],"kind":"struct"},"18:1787:14988":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"18:12307:12204":{"crate_id":18,"path":["object","macho","TwolevelHint"],"kind":"struct"},"24:998:16792":{"crate_id":24,"path":["typenum","private","PrivateRem"],"kind":"trait"},"1:41136:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:11923:733":{"crate_id":6,"path":["std","i16"],"kind":"primitive"},"7:1571:13240":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:3505:11551":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"18:10052:15042":{"crate_id":18,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"6:2344:17038":{"crate_id":6,"path":["std","fs","symlink_metadata"],"kind":"function"},"25:36:1806":{"crate_id":25,"path":["block_buffer","BufferKind"],"kind":"trait"},"6:9075:217":{"crate_id":6,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"18:13033:12420":{"crate_id":18,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:45348:14419":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"15:0:1934":{"crate_id":15,"path":["rustc_demangle"],"kind":"module"},"5:3138:14678":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"6:361:15166":{"crate_id":6,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"18:10885:14514":{"crate_id":18,"path":["object","read","SymbolMap"],"kind":"struct"},"1:43263:14889":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"18:9596:11851":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"18:10626:14508":{"crate_id":18,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"6:5554:204":{"crate_id":6,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:5071:12756":{"crate_id":17,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:1896:14239":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"16:198:22626":{"crate_id":16,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:7566:30615":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"7:7487:14115":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:6911:11493":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"5:3644:14681":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:38904:199":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"18:12372:12212":{"crate_id":18,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"18:12072:12151":{"crate_id":18,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"10:421:22530":{"crate_id":10,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:11120:16514":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"18:562:11949":{"crate_id":18,"path":["object","read","any","Symbol"],"kind":"struct"},"6:4101:17113":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"6:11063:14206":{"crate_id":6,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"19:614:38584":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"18:9822:15022":{"crate_id":18,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"5:2157:34120":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:42651:5279":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"17:6919:38565":{"crate_id":17,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"7:6634:13996":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"24:844:16813":{"crate_id":24,"path":["typenum","private","PrivatePow"],"kind":"trait"},"17:7509:12715":{"crate_id":17,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:8779:28685":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:8181:15243":{"crate_id":6,"path":["std","net","tcp","Incoming"],"kind":"struct"},"6:2572:15186":{"crate_id":6,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:7596:23538":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:3325:68":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"15:221:13021":{"crate_id":15,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:50279:14437":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"18:12126:12159":{"crate_id":18,"path":["object","macho","ThreadCommand"],"kind":"struct"},"7:4703:13565":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:6931:11508":{"crate_id":6,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"5:7119:14739":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:4313:11166":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:2333:180":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"6:11274:11522":{"crate_id":6,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"7:7481:14114":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"5:1302:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:43378:14895":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"0:102:1676":{"crate_id":0,"path":["sha2","Sha384"],"kind":"typedef"},"18:9275:38574":{"crate_id":18,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"18:8573:23597":{"crate_id":18,"path":["object","common","SectionFlags"],"kind":"enum"},"18:10125:11867":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:8090:14660":{"crate_id":17,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"12:738:14675":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"1:9733:220":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:355:15165":{"crate_id":6,"path":["std","thread","scoped","Scope"],"kind":"struct"},"12:1518:22609":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"18:9721:15020":{"crate_id":18,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:7527:11510":{"crate_id":6,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:5655:12705":{"crate_id":17,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:3930:17091":{"crate_id":6,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"15:160:15143":{"crate_id":15,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:950:15152":{"crate_id":6,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:44546:14397":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"5:4331:11557":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"18:13857:12648":{"crate_id":18,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:10201:5278":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:1847:15179":{"crate_id":6,"path":["std","env","Args"],"kind":"struct"},"1:9316:11362":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"24:621:1796":{"crate_id":24,"path":["typenum","marker_traits","Unsigned"],"kind":"trait"},"17:4845:12749":{"crate_id":17,"path":["gimli","constants","DwOrd"],"kind":"struct"},"5:5725:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"18:11037:23602":{"crate_id":18,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:3047:22673":{"crate_id":17,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:6575:23533":{"crate_id":17,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:6400:14594":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"12:1681:143":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:22340:167":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:6488:14598":{"crate_id":17,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:2786:12694":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"7:5690:13745":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"14:226:13047":{"crate_id":14,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"5:6622:242":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:4037:12734":{"crate_id":17,"path":["gimli","constants","DwTag"],"kind":"struct"},"18:12059:12150":{"crate_id":18,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:5418:12760":{"crate_id":17,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"7:1559:13231":{"crate_id":7,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:11572:16513":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"13:0:1932":{"crate_id":13,"path":["rustc_std_workspace_alloc"],"kind":"module"},"7:119:17283":{"crate_id":7,"path":["libc","unix","FILE"],"kind":"enum"},"1:7522:16386":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"7:4322:13421":{"crate_id":7,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"18:8979:38571":{"crate_id":18,"path":["object","read","any","FileInternal"],"kind":"enum"},"12:1866:14678":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"19:755:14490":{"crate_id":19,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"24:2392:16793":{"crate_id":24,"path":["typenum","sealed","Sealed"],"kind":"trait"},"6:8063:15238":{"crate_id":6,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"7:4520:13512":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:3030:12722":{"crate_id":17,"path":["gimli","common","DwoId"],"kind":"struct"},"6:6128:15218":{"crate_id":6,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"7:4787:13603":{"crate_id":7,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"18:11573:12048":{"crate_id":18,"path":["object","elf","Verdaux"],"kind":"struct"},"18:12085:12153":{"crate_id":18,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"7:5722:13763":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:8175:14861":{"crate_id":6,"path":["std","io","Lines"],"kind":"struct"},"18:9322:38577":{"crate_id":18,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"18:8195:23577":{"crate_id":18,"path":["object","common","Architecture"],"kind":"enum"},"1:44361:14390":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"12:2069:15156":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"18:11220:11973":{"crate_id":18,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"6:1771:601":{"crate_id":6,"path":["std","env"],"kind":"module"},"18:11785:12104":{"crate_id":18,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:42627:14847":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:44463:14394":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"18:9683:15019":{"crate_id":18,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:45060:14413":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:39949:14826":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"7:4476:13498":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"7:5759:13777":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"12:2184:13049":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"7:7195:14088":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"7:0:807":{"crate_id":7,"path":["libc"],"kind":"module"},"18:11969:12138":{"crate_id":18,"path":["object","macho","Section64"],"kind":"struct"},"7:6698:14039":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:10721:14167":{"crate_id":6,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"7:4841:13635":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:20833:16793":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"18:10545:11912":{"crate_id":18,"path":["object","read","pe","export","Export"],"kind":"struct"},"18:8490:23594":{"crate_id":18,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:2358:17042":{"crate_id":6,"path":["std","fs","read_link"],"kind":"function"},"1:2841:12842":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:21645:14248":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:0:489":{"crate_id":1,"path":["core"],"kind":"module"},"6:7489:15275":{"crate_id":6,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"22:33:1791":{"crate_id":22,"path":["crypto_common","OutputSizeUser"],"kind":"trait"},"22:48:16841":{"crate_id":22,"path":["crypto_common","KeyInit"],"kind":"trait"},"1:39641:14811":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"18:11319:12002":{"crate_id":18,"path":["object","elf","SectionHeader64"],"kind":"struct"},"6:2867:127":{"crate_id":6,"path":["std","io","error","Error"],"kind":"struct"},"6:11914:310":{"crate_id":6,"path":["std","array"],"kind":"primitive"},"1:46577:10982":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:39028:14337":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:3932:11487":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"1:20842:14240":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"7:4727:13578":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:2546:12684":{"crate_id":17,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"15:215:14665":{"crate_id":15,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"18:13145:12448":{"crate_id":18,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:5998:23530":{"crate_id":17,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"4:421:1943":{"crate_id":4,"path":["digest","FixedOutput"],"kind":"trait"},"1:11557:15304":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"6:10145:17174":{"crate_id":6,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:6671:12800":{"crate_id":17,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:41790:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:39207:14776":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:20683:16564":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"18:13842:12647":{"crate_id":18,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:6608:16461":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:3437:11151":{"crate_id":6,"path":["std","io","Write"],"kind":"trait"},"17:7697:12709":{"crate_id":17,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"7:1687:13323":{"crate_id":7,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"18:10516:11907":{"crate_id":18,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:2339:187":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:7757:14652":{"crate_id":17,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:6943:23535":{"crate_id":17,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"18:13639:12594":{"crate_id":18,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"5:2893:14726":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:1613:580":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"6:7948:15236":{"crate_id":6,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:6201:15091":{"crate_id":17,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"18:11653:12071":{"crate_id":18,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:6080:11498":{"crate_id":6,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:44524:14396":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:6616:15219":{"crate_id":6,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"18:12019:11872":{"crate_id":18,"path":["object","macho","Dylib"],"kind":"struct"},"6:11472:14217":{"crate_id":6,"path":["std","alloc","System"],"kind":"struct"},"1:21097:16590":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"18:9108:38578":{"crate_id":18,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:39983:14342":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:4071:37954":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:11929:1474":{"crate_id":6,"path":["std","u32"],"kind":"primitive"},"5:7133:29456":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"18:8420:23592":{"crate_id":18,"path":["object","common","SymbolScope"],"kind":"enum"}},"external_crates":{"26":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"23":{"name":"generic_array","html_root_url":null},"20":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"block_buffer","html_root_url":null},"22":{"name":"crypto_common","html_root_url":null},"19":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"digest","html_root_url":null},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"27":{"name":"cpufeatures","html_root_url":null},"24":{"name":"typenum","html_root_url":"https://docs.rs/typenum/1.16.0/"},"21":{"name":"blobby","html_root_url":"https://docs.rs/blobby/0.3.1/"},"18":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"6":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}