{"root":"0:0:2036","crate_version":"0.11.0-pre.3","includes_private":false,"index":{"0:98-0:94:2355":{"id":"0:98-0:94:2355","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[27,0],"end":[27,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"sha512::compress512","name":"compress512","id":"0:94:2355","glob":false}}},"5:787:29720":{"id":"5:787:29720","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"23:1173:199":{"id":"23:1173:199","crate_id":23,"name":"Output","span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/src/type_operators.rs","begin":[35,4],"end":[35,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"0:74":{"id":"0:74","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[123,0],"end":[130,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:357:2512","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:75:2528"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13543:34286":{"id":"1:13543:34286","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"6:12440:1741","str::slice_mut_unchecked":"1:13544:34287","crate::ops::Index":"1:39968:6041"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13551:16115":{"id":"1:13551:16115","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"6:12434:476"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"1:44267:16087","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:784-0:138:2357":{"id":"b:5:784-0:138:2357","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2736:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:786:15967","5:787:29720","5:788:29721"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:142:480":{"id":"0:142:480","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[107,9],"end":[107,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:105:2377":{"id":"0:105:2377","crate_id":0,"name":"Sha512_256","span":{"filename":"src/lib.rs","begin":[45,0],"end":[45,92]},"visibility":"public","docs":"SHA-512/256 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:527:2349","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:508:2350","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U32","id":"23:2525:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512_256","id":"0:470:2368","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:13534:6508":{"id":"1:13534:6508","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"6:12453:1871"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13648:17032":{"id":"1:13648:17032","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13621:34312":{"id":"1:13621:34312","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13652:34323":{"id":"1:13652:34323","crate_id":1,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1066:17043"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3021-0:138:2357":{"id":"b:1:3021-0:138:2357","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2998:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2995:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3024:11825"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:32654:237-0:138:2357":{"id":"a:1:32654:237-0:138:2357","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32654:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13547:34290":{"id":"1:13547:34290","crate_id":1,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"1:13548:34291"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42422:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[115,0],"end":[117,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"21:72:2507","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:71:2526"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:103:2373":{"id":"0:103:2373","crate_id":0,"name":"Sha256","span":{"filename":"src/lib.rs","begin":[41,0],"end":[41,84]},"visibility":"public","docs":"SHA-256 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:527:2349","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:508:2350","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U32","id":"23:2525:2345","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha256","id":"0:385:2358","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"5:5738:17603":{"id":"5:5738:17603","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7798:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7798:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13616:34309":{"id":"1:13616:34309","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[76,0],"end":[81,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"21:112:2505","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:64:2549"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:66:811":{"id":"0:66:811","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[85,4],"end":[87,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10409:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10390:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53:2527":{"id":"0:53:2527","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[34,4],"end":[34,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Eager","id":"24:135:2504","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:88:678":{"id":"0:88:678","crate_id":0,"name":"drop","span":{"filename":"src/core_api.rs","begin":[179,4],"end":[185,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:77:2531":{"id":"0:77:2531","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[133,4],"end":[133,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"23:9598:5961","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5961","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5961","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5961","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5961","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5961","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5961","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"23:9642:5962","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:9019:5966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5965","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5965","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5965","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5965","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5965","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5965","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"0:97-0:90:2354":{"id":"0:97-0:90:2354","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[26,0],"end":[26,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"sha256::compress256","name":"compress256","id":"0:90:2354","glob":false}}},"1:13524:11832":{"id":"1:13524:11832","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:90:2354":{"id":"0:90:2354","crate_id":0,"name":"compress256","span":{"filename":"src/sha256.rs","begin":[27,0],"end":[29,1]},"visibility":"public","docs":"Raw SHA-256 compression function.\n\nThis is a low-level \"hazmat\" API which provides direct access to the core\nfunctionality of SHA-256.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"array":{"type":{"primitive":"u32"},"len":"8"}}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"array":{"type":{"primitive":"u8"},"len":"64"}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13526:34282":{"id":"1:13526:34282","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:137:480":{"id":"0:137:480","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[21,9],"end":[21,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13548:34291":{"id":"1:13548:34291","crate_id":1,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"1:13547:34290"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"1:42422:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5725:35042":{"id":"5:5725:35042","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7798:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7798:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:16562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2718:2577":{"id":"1:2718:2577","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:56":{"id":"0:56","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[46,0],"end":[48,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"21:99:2510","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:57:2531"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3244:247-0:133:2356":{"id":"a:1:3244:247-0:133:2356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3244:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:106:2379":{"id":"0:106:2379","crate_id":0,"name":"Sha384","span":{"filename":"src/lib.rs","begin":[47,0],"end":[47,84]},"visibility":"public","docs":"SHA-384 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:527:2349","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:508:2350","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U48","id":"23:2573:2346","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha384","id":"0:402:2360","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"0:51:2526":{"id":"0:51:2526","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[30,4],"end":[30,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"23:9598:5961","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5961","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5961","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5961","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5961","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5961","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5961","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"23:9642:5962","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:9019:5966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5965","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5965","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5965","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5965","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5965","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5965","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"0:49":{"id":"0:49","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[27,0],"end":[27,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:385:2517","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13528:34283":{"id":"1:13528:34283","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:13526:34282"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42516:17690-0:133:2356":{"id":"a:1:42516:17690-0:133:2356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42516:17690","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13541:16852":{"id":"1:13541:16852","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11345:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11345:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3860-0:138:2357":{"id":"b:1:3860-0:138:2357","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32655:6358","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3858:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3862:1841"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2721:29719":{"id":"1:2721:29719","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6-4:386:2339":{"id":"0:6-4:386:2339","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[10,23],"end":[10,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"digest::Digest","name":"Digest","id":"4:386:2339","glob":false}}},"0:141":{"id":"0:141","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[107,9],"end":[107,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2736:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:142:480"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:3036-0:138:2357":{"id":"b:1:3036-0:138:2357","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2995:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3005:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3039:138","1:3040:1826"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13605:34305":{"id":"1:13605:34305","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:13212:17721","`DoubleEndedIterator`":"1:8374:130","prim@char":"6:12434:476","str::matches":"1:13602:2625"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"1:44513:16100","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:16562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13218:16562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13233:17727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3031-0:133:2356":{"id":"b:1:3031-0:133:2356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3005:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3001:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3034:138","1:3035:1828"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13599:34304":{"id":"1:13599:34304","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42422:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:16562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13218:16562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13233:17727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13622:34313":{"id":"1:13622:34313","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"6:12434:476","self::pattern":"1:13212:17721"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:16562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13218:16562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:13238:17726","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13620:34311":{"id":"1:13620:34311","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:138:2357":{"id":"0:138:2357","crate_id":0,"name":"Sha512VarCore","span":{"filename":"src/core_api.rs","begin":[108,0],"end":[111,1]},"visibility":"public","docs":"Core block-level SHA-512 hasher with variable output size.\n\nSupports initialization only for 28, 32, 48, and 64 byte output sizes,\ni.e. 224, 256, 384, and 512 bits respectively.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:32713:6359-0:138:2357","a:1:3244:247-0:138:2357","a:1:3279:11774-0:138:2357","a:1:42515:17691-0:138:2357","a:1:42516:17690-0:138:2357","a:1:32654:237-0:138:2357","b:1:3021-0:138:2357","b:1:3860-0:138:2357","b:1:3036-0:138:2357","b:1:3025-0:138:2357","b:1:3031-0:138:2357","b:1:2748-0:138:2357","b:1:2719-0:138:2357","b:1:2716-0:138:2357","b:5:784-0:138:2357","b:23:1171-0:138:2357","0:141","0:69","0:72","0:70","0:76","0:85","0:78","0:74","0:87","0:83"]}}},"1:13590:34301":{"id":"1:13590:34301","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"6:12434:476","self::pattern":"1:13212:17721","str::rsplitn":"1:13593:34302"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"1:44395:6004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:16562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5721:35041":{"id":"5:5721:35041","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:2673","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:297:2673","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5736:35044":{"id":"5:5736:35044","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7798:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7798:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71:2526":{"id":"0:71:2526","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[116,4],"end":[116,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"23:9598:5961","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5961","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5961","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5961","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5961","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5961","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5961","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5961","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"23:9642:5962","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:9019:5966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5965","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5965","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5965","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5965","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5965","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5965","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5965","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"5:5740:17029":{"id":"5:5740:17029","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:13649:17033"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7798:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5720":{"id":"5:5720","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5721:35041","5:5722:11715","5:5725:35042","5:5728:35043","5:5736:35044","5:5737:35045","5:5738:17603","5:5739:17028","5:5740:17029"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13522":{"id":"1:13522","crate_id":1,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["1:13523:1008","1:13524:11832","1:13525:34281","1:13526:34282","1:13528:34283","1:13531:34284","1:13532:34285","1:13533:336","1:13534:6508","1:13535:6511","1:13537:16850","1:13539:16851","1:13541:16852","1:13543:34286","1:13544:34287","1:13545:34288","1:13546:34289","1:13547:34290","1:13548:34291","1:13550:16106","1:13551:16115","1:13552:12526","1:13553:30460","1:13554:30434","1:13555:34293","1:13556:34294","1:13557:30484","1:13558:32971","1:13561:34295","1:13564:34296","1:13567:11870","1:13571:11831","1:13575:34297","1:13578:30439","1:13581:34298","1:13584:34299","1:13587:34300","1:13590:34301","1:13593:34302","1:13596:34303","1:13599:34304","1:13602:2625","1:13605:34305","1:13608:34306","1:13611:34307","1:13614:34308","1:13616:34309","1:13618:34310","1:13620:34311","1:13621:34312","1:13622:34313","1:13625:34314","1:13628:34315","1:13631:34316","1:13634:34317","1:13637:34318","1:13640:34319","1:13643:34320","1:13645:17026","1:13646:17027","1:13647:17031","1:13648:17032","1:13649:17033","1:13650:34321","1:13651:34322","1:13652:34323","1:13653:34324","1:13655:17614","1:13656:34325"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42515:17691-0:138:2357":{"id":"a:1:42515:17691-0:138:2357","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42515:17691","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:85":{"id":"0:85","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[171,0],"end":[176,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10443:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:86:811"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13656:34325":{"id":"1:13656:34325","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:5053:34325"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"1:44608:16028","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32713:6359-0:133:2356":{"id":"a:1:32713:6359-0:133:2356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32713:6359","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13561:34295":{"id":"1:13561:34295","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"6:12434:476","self::pattern":"1:13212:17721"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:16562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42515:17691-0:133:2356":{"id":"a:1:42515:17691-0:133:2356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42515:17691","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13571:11831":{"id":"1:13571:11831","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:42424:191","prim@char":"6:12434:476","self::pattern":"1:13212:17721"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42422:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:16562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13218:16562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13233:17727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13614:34308":{"id":"1:13614:34308","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:788:29721":{"id":"5:788:29721","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["target",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3862:1841":{"id":"1:3862:1841","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:40137:15348","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13647:17031":{"id":"1:13647:17031","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:78":{"id":"0:78","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[136,0],"end":[162,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:368:2513","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:79:2532","0:80:1192","0:81:2537"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13537:16850":{"id":"1:13537:16850","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:42424:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42422:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11345:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11345:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13631:34316":{"id":"1:13631:34316","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:12434:476","self::pattern":"1:13212:17721"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42422:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:16562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13218:16562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13233:17727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:50":{"id":"0:50","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[29,0],"end":[31,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"21:72:2507","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:51:2526"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3279:11774-0:133:2356":{"id":"a:1:3279:11774-0:133:2356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3279:11774","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3031-0:138:2357":{"id":"b:1:3031-0:138:2357","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:3005:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:3001:258","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3034:138","1:3035:1828"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:80:1192":{"id":"0:80:1192","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[140,4],"end":[150,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["output_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:42554:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"InvalidOutputSize","id":"4:557:2518","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13558:32971":{"id":"1:13558:32971","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"6:12434:476","self::pattern":"1:13212:17721"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:16562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13575:34297":{"id":"1:13575:34297","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:13212:17721","`DoubleEndedIterator`":"1:8374:130","prim@char":"6:12434:476","str::split_whitespace":"1:13553:30460","str::rsplit":"1:13581:34298"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"1:44291:6002","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:16562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:23:1171-0:138:2357":{"id":"b:23:1171-0:138:2357","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"23:1168:6119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["23:1173:199"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:100-0:133:2356":{"id":"0:100-0:133:2356","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[29,19],"end":[29,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"core_api::Sha256VarCore","name":"Sha256VarCore","id":"0:133:2356","glob":false}}},"0:136":{"id":"0:136","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[21,9],"end":[21,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2736:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:137:480"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13584:34299":{"id":"1:13584:34299","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:13212:17721","str::split":"1:13575:34297","prim@char":"6:12434:476","`DoubleEndedIterator`":"1:8374:130","str::rsplit_terminator":"1:13587:34300"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"1:44341:16092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:16562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13640:34319":{"id":"1:13640:34319","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:12434:476","self::pattern":"1:13212:17721"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:16562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13218:16562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13233:17727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32654:237-0:133:2356":{"id":"a:1:32654:237-0:133:2356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32654:237","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"5:5722:11715":{"id":"5:5722:11715","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7798:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7798:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:16562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:68:678":{"id":"0:68:678","crate_id":0,"name":"drop","span":{"filename":"src/core_api.rs","begin":[91,4],"end":[97,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60:1192":{"id":"0:60:1192","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[54,4],"end":[62,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["output_size",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Result","id":"1:42554:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"InvalidOutputSize","id":"4:557:2518","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42516:17690-0:138:2357":{"id":"a:1:42516:17690-0:138:2357","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42516:17690","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:67":{"id":"0:67","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[90,0],"end":[98,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3481:2551","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:68:678"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13556:34294":{"id":"1:13556:34294","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"1:44555:16102","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3035:1828":{"id":"1:3035:1828","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:42554:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:3005:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5-4:0:2338":{"id":"0:5-4:0:2338","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[10,17],"end":[10,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"digest","name":"digest","id":"4:0:2338","glob":false}}},"1:13531:34284":{"id":"1:13531:34284","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:12759:17728"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3024:11825":{"id":"1:3024:11825","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2998:145"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2719-0:138:2357":{"id":"b:1:2719-0:138:2357","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32655:6358","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2713:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2721:29719"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2716-0:133:2356":{"id":"b:1:2716-0:133:2356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32655:6358","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2710:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2718:2577"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"5:5728:35043":{"id":"5:5728:35043","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7798:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7798:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:55:2528":{"id":"0:55:2528","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[39,4],"end":[43,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"Block","id":"21:56:2506","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:104:2375":{"id":"0:104:2375","crate_id":0,"name":"Sha512_224","span":{"filename":"src/lib.rs","begin":[43,0],"end":[43,92]},"visibility":"public","docs":"SHA-512/224 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:527:2349","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:508:2350","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U28","id":"23:2513:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512_224","id":"0:453:2366","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:13557:30484":{"id":"1:13557:30484","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"1:44583:16105","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13564:34296":{"id":"1:13564:34296","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"6:12434:476","self::pattern":"1:13212:17721"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:16562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13218:16562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13233:17727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69":{"id":"0:69","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[113,0],"end":[113,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:385:2517","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13602:2625":{"id":"1:13602:2625","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:13212:17721","`DoubleEndedIterator`":"1:8374:130","prim@char":"6:12434:476","str::rmatches":"1:13605:34305"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"1:44495:16099","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:16562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13651:34322":{"id":"1:13651:34322","crate_id":1,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1066:17043"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:59:2532":{"id":"0:59:2532","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[51,4],"end":[51,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"TruncSide","id":"4:547:2511","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}}},"0:75:2528":{"id":"0:75:2528","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[125,4],"end":[129,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"Block","id":"21:56:2506","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13634:34317":{"id":"1:13634:34317","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:12434:476","self::pattern":"1:13212:17721"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:16562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13218:16562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13233:17727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:72":{"id":"0:72","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[119,0],"end":[121,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:359:2509","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:73:2527"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:0:2036":{"id":"0:0:2036","crate_id":0,"name":"sha2","span":{"filename":"src/lib.rs","begin":[1,0],"end":[49,84]},"visibility":"public","docs":"# RustCrypto: SHA-2\n\n[![crate][crate-image]][crate-link]\n[![Docs][docs-image]][docs-link]\n![Apache2/MIT licensed][license-image]\n![Rust Version][rustc-image]\n[![Project Chat][chat-image]][chat-link]\n[![Build Status][build-image]][build-link]\n\nPure Rust implementation of the [SHA-2] cryptographic hash algorithms.\n\nThere are 6 standard algorithms specified in the SHA-2 standard: \n`Sha224`, `Sha256`, `Sha512_224`, `Sha512_256`, `Sha384`, and `Sha512`.\n\nAlgorithmically, there are only 2 core algorithms: SHA-256 and SHA-512.\nAll other algorithms are just applications of these with different initial\nhash values, and truncated to different digest bit lengths. The first two\nalgorithms in the list are based on SHA-256, while the last four are based\non SHA-512.\n\n## Examples\n\n### One-shot API\n\n```rust\nuse sha2::{Sha256, Digest};\nuse hex_literal::hex;\n\nlet hash = Sha256::digest(b\"hello world\");\nassert_eq!(hash, hex!(\"b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\"));\n```\n\n### Incremental API\n\n```rust\nuse sha2::{Sha256, Sha512, Digest};\nuse hex_literal::hex;\n\nlet mut hasher = Sha256::new();\nhasher.update(b\"hello world\");\nlet hash256 = hasher.finalize();\n\nassert_eq!(hash256, hex!(\"b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\"));\n\nlet mut hasher = Sha512::new();\nhasher.update(b\"hello world\");\nlet hash512 = hasher.finalize();\n\nassert_eq!(hash512, hex!(\n    \"309ecc489c12d6eb4cc40f50c902f2b4d0ed77ee511a7c7a9bcd3ca86d4cd86f\"\n    \"989dd35bc5ff499670da34255b45b0cfd830e81f605dcf7dc5542e93ae9cd76f\"\n));\n```\n\nAlso, see the [examples section] in the RustCrypto/hashes readme.\n\n## Minimum Supported Rust Version\n\nRust **1.72** or higher.\n\nMinimum supported Rust version can be changed in the future, but it will be\ndone with a minor version bump.\n\n## SemVer Policy\n\n- All on-by-default features of this library are covered by SemVer\n- MSRV is considered exempt from SemVer as noted above\n\n## License\n\nThe crate is licensed under either of:\n\n* [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0)\n* [MIT license](http://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall be\ndual licensed as above, without any additional terms or conditions.\n\n[//]: # (badges)\n\n[crate-image]: https://img.shields.io/crates/v/sha2.svg\n[crate-link]: https://crates.io/crates/sha2\n[docs-image]: https://docs.rs/sha2/badge.svg\n[docs-link]: https://docs.rs/sha2/\n[license-image]: https://img.shields.io/badge/license-Apache2.0/MIT-blue.svg\n[rustc-image]: https://img.shields.io/badge/rustc-1.72+-blue.svg\n[chat-image]: https://img.shields.io/badge/zulip-join_chat-blue.svg\n[chat-link]: https://rustcrypto.zulipchat.com/#narrow/stream/260041-hashes\n[build-image]: https://github.com/RustCrypto/hashes/workflows/sha2/badge.svg?branch=master\n[build-link]: https://github.com/RustCrypto/hashes/actions?query=workflow%3Asha2\n\n[//]: # (general links)\n\n[SHA-2]: https://en.wikipedia.org/wiki/SHA-2\n[examples section]: https://github.com/RustCrypto/hashes#Examples","links":{},"attrs":["#![no_std]","#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\",\nhtml_favicon_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\")]","#![warn(missing_docs, rust_2018_idioms)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:5-4:0:2338","0:6-4:386:2339","0:97-0:90:2354","0:98-0:94:2355","0:100-0:133:2356","0:101-0:138:2357","0:102:2371","0:103:2373","0:104:2375","0:105:2377","0:106:2379","0:107:2381"],"is_stripped":false}}},"1:13649:17033":{"id":"1:13649:17033","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3021-0:133:2356":{"id":"b:1:3021-0:133:2356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2998:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2995:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3024:11825"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13655:17614":{"id":"1:13655:17614","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:5056:17614"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"1:44599:16023","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13596:34303":{"id":"1:13596:34303","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42422:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:16562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:64:2549":{"id":"0:64:2549","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[78,4],"end":[80,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10409:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10390:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:57:2531":{"id":"0:57:2531","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[47,4],"end":[47,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"UInt","id":"23:9598:5961","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5961","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5961","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5961","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5961","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UInt","id":"23:9598:5961","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"UTerm","id":"23:9642:5962","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B1","id":"23:9019:5966","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5965","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5965","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5965","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5965","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"B0","id":"23:8998:5965","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}},"1:13645:17026":{"id":"1:13645:17026","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2716-0:138:2357":{"id":"b:1:2716-0:138:2357","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32655:6358","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2710:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2718:2577"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:73:2527":{"id":"0:73:2527","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[120,4],"end":[120,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Eager","id":"24:135:2504","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:107:2381":{"id":"0:107:2381","crate_id":0,"name":"Sha512","span":{"filename":"src/lib.rs","begin":[49,0],"end":[49,84]},"visibility":"public","docs":"SHA-512 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:527:2349","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:508:2350","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U64","id":"23:2621:2347","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha512","id":"0:419:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:13553:30460":{"id":"1:13553:30460","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:13554:30434"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"1:44565:16103","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3034:138":{"id":"1:3034:138","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:3005:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[83,0],"end":[88,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:10443:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:66:811"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:3279:11774-0:138:2357":{"id":"a:1:3279:11774-0:138:2357","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Freeze","id":"1:3279:11774","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:79:2532":{"id":"0:79:2532","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[137,4],"end":[137,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"resolved_path":{"name":"TruncSide","id":"4:547:2511","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}}},"0:94:2355":{"id":"0:94:2355","crate_id":0,"name":"compress512","span":{"filename":"src/sha512.rs","begin":[27,0],"end":[29,1]},"visibility":"public","docs":"Raw SHA-512 compression function.\n\nThis is a low-level \"hazmat\" API which provides direct access to the core\nfunctionality of SHA-512.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["state",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"array":{"type":{"primitive":"u64"},"len":"8"}}}}],["blocks",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"array":{"type":{"primitive":"u8"},"len":"128"}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58":{"id":"0:58","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[50,0],"end":[74,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:368:2513","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:59:2532","0:60:1192","0:61:2537"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:101-0:138:2357":{"id":"0:101-0:138:2357","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[29,34],"end":[29,47]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"core_api::Sha512VarCore","name":"Sha512VarCore","id":"0:138:2357","glob":false}}},"1:13523:1008":{"id":"1:13523:1008","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"6:12434:476"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13533:336":{"id":"1:13533:336","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:13534:6508","`u8`":"6:12453:1871"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13544:34287":{"id":"1:13544:34287","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"6:12440:1741","crate::ops::IndexMut":"1:3522:6042","str::slice_unchecked":"1:13543:34286"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13650:34321":{"id":"1:13650:34321","crate_id":1,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"1:1066:17043"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5739:17028":{"id":"5:5739:17028","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:13648:17032"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7798:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:84:2549":{"id":"0:84:2549","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[166,4],"end":[168,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10409:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10390:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5737:35045":{"id":"5:5737:35045","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:297:2673","`String`":"5:7798:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:2673","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7798:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13535:6511":{"id":"1:13535:6511","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:42424:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"1:42422:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11345:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11345:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3025-0:138:2357":{"id":"b:1:3025-0:138:2357","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2998:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3027:841"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13611:34307":{"id":"1:13611:34307","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:13212:17721","`DoubleEndedIterator`":"1:8374:130","prim@char":"6:12434:476","str::match_indices":"1:13608:34306"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"1:44459:16097","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:16562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13218:16562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13233:17727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13653:34324":{"id":"1:13653:34324","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:5055:34324"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"1:44590:16029","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2748-0:138:2357":{"id":"b:1:2748-0:138:2357","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2736:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2746:11768","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2750:29718"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13578:30439":{"id":"1:13578:30439","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"6:12434:476","self::pattern":"1:13212:17721"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"1:13027:6019","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:16562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:54":{"id":"0:54","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[37,0],"end":[44,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:357:2512","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:55:2528"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2748-0:133:2356":{"id":"b:1:2748-0:133:2356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2736:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CloneToUninit","id":"1:2746:11768","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2750:29718"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2719-0:133:2356":{"id":"b:1:2719-0:133:2356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32655:6358","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2713:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2721:29719"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13545:34288":{"id":"1:13545:34288","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"1:13547:34290","str::split_at_mut":"1:13546:34289"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13525:34281":{"id":"1:13525:34281","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13646:17027":{"id":"1:13646:17027","crate_id":1,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"1:40323:17563","Self::is_ascii":"1:13645:17026"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42422:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"1:40323:17563","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13546:34289":{"id":"1:13546:34289","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:13545:34288","str::split_at_mut_checked":"1:13548:34291"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13555:34293":{"id":"1:13555:34293","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"1:44545:16101","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3036-0:133:2356":{"id":"b:1:3036-0:133:2356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2995:163","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:3005:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3039:138","1:3040:1826"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:87":{"id":"0:87","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[178,0],"end":[186,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:3481:2551","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:88:678"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:61:2537":{"id":"0:61:2537","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[65,4],"end":[73,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Buffer","id":"4:355:2508","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Output","id":"21:60:199","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32713:6359-0:138:2357":{"id":"a:1:32713:6359-0:138:2357","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32713:6359","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13625:34314":{"id":"1:13625:34314","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:12434:476","self::pattern":"1:13212:17721"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:16562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:5:784-0:133:2356":{"id":"b:5:784-0:133:2356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2736:113","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:780:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:786:15967","5:787:29720","5:788:29721"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3025-0:133:2356":{"id":"b:1:3025-0:133:2356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2998:145","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3027:841"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13539:16851":{"id":"1:13539:16851","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"1:11345:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:11345:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:3039:138":{"id":"1:3039:138","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32578:13992","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"1:13581:34298":{"id":"1:13581:34298","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:13212:17721","`DoubleEndedIterator`":"1:8374:130","prim@char":"6:12434:476","str::split":"1:13575:34297"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"1:44309:6006","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:16562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13218:16562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13233:17727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:3040:1826":{"id":"1:3040:1826","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:42554:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:3005:257","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:81:2537":{"id":"0:81:2537","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[153,4],"end":[161,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["buffer",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Buffer","id":"4:355:2508","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}],["out",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"Output","id":"21:60:199","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13532:34285":{"id":"1:13532:34285","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[33,0],"end":[35,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:359:2509","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:53:2527"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:86:811":{"id":"0:86:811","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[173,4],"end":[175,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:10409:144","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:10390:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:83":{"id":"0:83","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[164,0],"end":[169,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"21:112:2505","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:84:2549"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13552:12526":{"id":"1:13552:12526","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"1:44277:12688","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:76":{"id":"0:76","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[132,0],"end":[134,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"21:99:2510","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:77:2531"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:13608:34306":{"id":"1:13608:34306","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:13212:17721","`DoubleEndedIterator`":"1:8374:130","prim@char":"6:12434:476","str::rmatch_indices":"1:13611:34307"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"1:44441:16096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:16562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13567:11870":{"id":"1:13567:11870","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:42424:191","prim@char":"6:12434:476","self::pattern":"1:13212:17721"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42422:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:16562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13643:34320":{"id":"1:13643:34320","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:13173:137","`FromStr`":"1:13172:2687"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42554:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"1:13172:2687","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:13172:2687","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2750:29718":{"id":"1:2750:29718","crate_id":1,"name":"clone_to_uninit","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["dst",{"raw_pointer":{"mutable":true,"type":{"generic":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"1:13637:34318":{"id":"1:13637:34318","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:12434:476","self::pattern":"1:13212:17721"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:16562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:786:15967":{"id":"5:786:15967","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"generic":"T"}}}},"1:3027:841":{"id":"1:3027:841","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13550:16106":{"id":"1:13550:16106","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"6:12434:476"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"1:44261:16086","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:23:1171-0:133:2356":{"id":"b:23:1171-0:133:2356","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.17.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"23:1168:6119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["23:1173:199"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:13593:34302":{"id":"1:13593:34302","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"6:12434:476","str::splitn":"1:13590:34301","self::pattern":"1:13212:17721"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"1:44413:6000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:16562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13218:16562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13233:17727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:3860-0:133:2356":{"id":"b:1:3860-0:133:2356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32655:6358","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3858:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3862:1841"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:133:2356":{"id":"0:133:2356","crate_id":0,"name":"Sha256VarCore","span":{"filename":"src/core_api.rs","begin":[22,0],"end":[25,1]},"visibility":"public","docs":"Core block-level SHA-256 hasher with variable output size.\n\nSupports initialization only for 28 and 32 byte output sizes,\ni.e. 224 and 256 bits respectively.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:32713:6359-0:133:2356","a:1:3244:247-0:133:2356","a:1:3279:11774-0:133:2356","a:1:42515:17691-0:133:2356","a:1:42516:17690-0:133:2356","a:1:32654:237-0:133:2356","b:1:3021-0:133:2356","b:1:3860-0:133:2356","b:1:3036-0:133:2356","b:1:3025-0:133:2356","b:1:3031-0:133:2356","b:1:2748-0:133:2356","b:1:2719-0:133:2356","b:1:2716-0:133:2356","b:5:784-0:133:2356","b:23:1171-0:133:2356","0:67","0:50","0:49","0:63","0:52","0:65","0:54","0:56","0:136","0:58"]}}},"a:1:3244:247-0:138:2357":{"id":"a:1:3244:247-0:138:2357","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:3244:247","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Sha512VarCore","id":"0:138:2357","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:13554:30434":{"id":"1:13554:30434","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:13553:30460"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"1:44574:16104","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13628:34315":{"id":"1:13628:34315","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:12434:476","self::pattern":"1:13212:17721"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"1:42422:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:16562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:13618:34310":{"id":"1:13618:34310","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:102:2371":{"id":"0:102:2371","crate_id":0,"name":"Sha224","span":{"filename":"src/lib.rs","begin":[39,0],"end":[39,84]},"visibility":"public","docs":"SHA-224 hasher.","links":{},"attrs":[],"deprecation":null,"inner":{"type_alias":{"type":{"resolved_path":{"name":"digest::core_api::CoreWrapper","id":"4:527:2349","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"digest::core_api::CtVariableCoreWrapper","id":"4:508:2350","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"Sha256VarCore","id":"0:133:2356","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"digest::consts::U28","id":"23:2513:2344","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"resolved_path":{"name":"OidSha224","id":"0:436:2364","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}}},"1:13587:34300":{"id":"1:13587:34300","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:13212:17721","str::split":"1:13575:34297","prim@char":"6:12434:476","str::split_terminator":"1:13584:34299"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"1:44359:16093","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:13218:16562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"1:13218:16562","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:13233:17727","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"6:11041:37832":{"crate_id":6,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"6:3617:16445":{"crate_id":6,"path":["std","io","IoSliceMut"],"kind":"struct"},"18:12983:25638":{"crate_id":18,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"19:765:29700":{"crate_id":19,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:42475:15499":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"21:118:18089":{"crate_id":21,"path":["crypto_common","KeyIvInit"],"kind":"trait"},"1:45347:16147":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"18:11539:12704":{"crate_id":18,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:43353:15504":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"5:1555:11836":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:11318:15215":{"crate_id":6,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"18:16008:13399":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"6:4896:18404":{"crate_id":6,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:46731:15571":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:8094:18258":{"crate_id":6,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:12373:6021":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"18:15844:13354":{"crate_id":18,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"7:6544:14784":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"22:99:6047":{"crate_id":22,"path":["hybrid_array","traits","AssocArraySize"],"kind":"trait"},"6:3674:18311":{"crate_id":6,"path":["std","io","Seek"],"kind":"trait"},"23:5711:6070":{"crate_id":23,"path":["typenum","generated","generic_const_mappings","Const"],"kind":"struct"},"1:42619:196":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"7:8031:15108":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:5984:16460":{"crate_id":6,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"7:1625:14236":{"crate_id":7,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:821:17403":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"18:13635:12824":{"crate_id":18,"path":["object","archive","Header"],"kind":"struct"},"18:12108:15722":{"crate_id":18,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:42717:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"23:9556:5989":{"crate_id":23,"path":["typenum","Less"],"kind":"struct"},"7:4990:14410":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:13854:16567":{"crate_id":1,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"5:2295:15971":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:45094:17752":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"19:598:39052":{"crate_id":19,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"27:0:2383":{"crate_id":27,"path":["cpufeatures"],"kind":"module"},"10:355:24434":{"crate_id":10,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"6:6893:12328":{"crate_id":6,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"6:11747:15952":{"crate_id":6,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"6:8569:16101":{"crate_id":6,"path":["std","io","Lines"],"kind":"struct"},"6:6308:12312":{"crate_id":6,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"11:44:13996":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"1:45041:15221":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"18:14084:12920":{"crate_id":18,"path":["object","elf","Verneed"],"kind":"struct"},"7:570:14136":{"crate_id":7,"path":["libc","unix","tms"],"kind":"struct"},"6:11753:16529":{"crate_id":6,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"18:14560:13019":{"crate_id":18,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:1969:12278":{"crate_id":1,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"17:7731:15499":{"crate_id":17,"path":["gimli","read","op","Location"],"kind":"enum"},"1:41092:16037":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:4222:18359":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:12021:38940":{"crate_id":6,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"5:7587:36575":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:6680:16337":{"crate_id":17,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"18:10861:139":{"crate_id":18,"path":["object","read","any","File"],"kind":"enum"},"23:9577:136":{"crate_id":23,"path":["typenum","Equal"],"kind":"struct"},"5:1889:12396":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"6:10777:16440":{"crate_id":6,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"18:14533:12734":{"crate_id":18,"path":["object","macho","Dylib"],"kind":"struct"},"23:653:6106":{"crate_id":23,"path":["typenum","marker_traits","TypeArray"],"kind":"trait"},"7:5301:14521":{"crate_id":7,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:11003:15137":{"crate_id":6,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"1:44163:6014":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:8121:210":{"crate_id":17,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"23:621:2515":{"crate_id":23,"path":["typenum","marker_traits","Unsigned"],"kind":"trait"},"18:15351:13184":{"crate_id":18,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"18:12216:15731":{"crate_id":18,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:6188:15773":{"crate_id":17,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"18:10597:12683":{"crate_id":18,"path":["object","endian","U32Bytes"],"kind":"struct"},"21:72:2507":{"crate_id":21,"path":["crypto_common","BlockSizeUser"],"kind":"trait"},"23:1878:18045":{"crate_id":23,"path":["typenum","uint","GetBit"],"kind":"trait"},"17:7521:15883":{"crate_id":17,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"4:527:2349":{"crate_id":4,"path":["digest","core_api","wrapper","CoreWrapper"],"kind":"struct"},"1:43682:16083":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:47302:15635":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:22965:17863":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1:23443:15266":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"6:6598:186":{"crate_id":6,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"7:4957:14394":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:11798:15958":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"18:15953:13385":{"crate_id":18,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:13212:17721":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"18:12204:15729":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:10704:12141":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"12:1674:12290":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"5:6283:12278":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:40735:16023":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"23:844:18056":{"crate_id":23,"path":["typenum","private","PrivatePow"],"kind":"trait"},"1:7003:15999":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"18:12687:16291":{"crate_id":18,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:39309:17588":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"12:2400:5999":{"crate_id":12,"path":["hashbrown","table","IterMut"],"kind":"struct"},"6:11020:15218":{"crate_id":6,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"18:14460:13004":{"crate_id":18,"path":["object","macho","Section32"],"kind":"struct"},"1:43015:11729":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:47574:11694":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:4473:16551":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"5:929:12361":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"1:10462:11901":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"7:7350:14970":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"18:14375:12992":{"crate_id":18,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:22791:17866":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"7:586:14145":{"crate_id":7,"path":["libc","unix","protoent"],"kind":"struct"},"7:5319:14528":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"18:11281:16237":{"crate_id":18,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:2149:11699":{"crate_id":1,"path":["core","ptr","metadata","metadata"],"kind":"function"},"6:7899:12670":{"crate_id":6,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"7:5462:14597":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:22184:17781":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:8204:16482":{"crate_id":6,"path":["std","fs","ReadDir"],"kind":"struct"},"17:2590:13638":{"crate_id":17,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:21941:31166":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"18:16520:13535":{"crate_id":18,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"18:12699:16292":{"crate_id":18,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"5:5834:12392":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"7:5139:14456":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:42546:15501":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"4:435:2674":{"crate_id":4,"path":["digest","digest","DynDigestWithOid"],"kind":"trait"},"1:2612:11711":{"crate_id":1,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"17:8105:13846":{"crate_id":17,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:32638:11908":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"6:680:16420":{"crate_id":6,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:3279:11774":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"6:5359:204":{"crate_id":6,"path":["std","path","PathBuf"],"kind":"struct"},"1:23050:16005":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"23:0:2514":{"crate_id":23,"path":["typenum"],"kind":"module"},"12:1893:12396":{"crate_id":12,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"19:531:15694":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"24:163:5975":{"crate_id":24,"path":["block_buffer","BlockBuffer"],"kind":"struct"},"1:42680:97":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:7044:13665":{"crate_id":17,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:42537:17699":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"0:105:2377":{"crate_id":0,"path":["sha2","Sha512_256"],"kind":"type_alias"},"17:6588:13725":{"crate_id":17,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"21:60:199":{"crate_id":21,"path":["crypto_common","Output"],"kind":"type_alias"},"5:282:12355":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"17:3141:12573":{"crate_id":17,"path":["gimli","arch","Arm"],"kind":"struct"},"5:7567:12366":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:2790:16437":{"crate_id":6,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"7:7463:15010":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"18:14821:13075":{"crate_id":18,"path":["object","macho","TwolevelHint"],"kind":"struct"},"9:0:2382":{"crate_id":9,"path":["cfg_if"],"kind":"module"},"17:7058:15848":{"crate_id":17,"path":["gimli","read","line","LineRows"],"kind":"struct"},"7:7604:15088":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"5:40:12352":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:10863:12428":{"crate_id":1,"path":["core","slice","sort","stable","merge","MergeState"],"kind":"struct"},"1:23983:236":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:8292:17678":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"15:160:16389":{"crate_id":15,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:3465:6040":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"21:0:2662":{"crate_id":21,"path":["crypto_common"],"kind":"module"},"18:12537:16284":{"crate_id":18,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:5102:18401":{"crate_id":6,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"18:13193:16308":{"crate_id":18,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"18:14807:13073":{"crate_id":18,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"7:7563:15073":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"10:236:6660":{"crate_id":10,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"19:80:29689":{"crate_id":19,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:43421:74":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"6:9319:16505":{"crate_id":6,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"6:4168:18355":{"crate_id":6,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:46763:15573":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"7:1597:14211":{"crate_id":7,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:5379:13712":{"crate_id":17,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:11516:5999":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"4:114:2351":{"crate_id":4,"path":["digest","impl_oid_carrier"],"kind":"macro"},"18:16362:13510":{"crate_id":18,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:0:568":{"crate_id":1,"path":["core"],"kind":"module"},"1:12913:16089":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:11696:6006":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:12302:6017":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:43635:16081":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:5085:13702":{"crate_id":17,"path":["gimli","constants","DwAddr"],"kind":"struct"},"18:11232:25520":{"crate_id":18,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"6:8199:12618":{"crate_id":6,"path":["std","fs","Metadata"],"kind":"struct"},"7:1703:14279":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:6368:15793":{"crate_id":17,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:8271:16484":{"crate_id":6,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"21:99:2510":{"crate_id":21,"path":["crypto_common","OutputSizeUser"],"kind":"trait"},"18:12319:16278":{"crate_id":18,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"7:7577:15082":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"18:15148:13127":{"crate_id":18,"path":["object","macho","RelocationInfo"],"kind":"struct"},"10:53:24437":{"crate_id":10,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"14:110:39013":{"crate_id":14,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"12:842:18266":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:8739:18413":{"crate_id":6,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"7:7487:15022":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"0:104:2375":{"crate_id":0,"path":["sha2","Sha512_224"],"kind":"type_alias"},"18:15549:13288":{"crate_id":18,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"7:7431:14999":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"5:4497:12379":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:11584:6019":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"18:15731:13328":{"crate_id":18,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:42610:11836":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"17:8223:15892":{"crate_id":17,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"18:12992:12780":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"6:971:18266":{"crate_id":6,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"23:9461:6067":{"crate_id":23,"path":["typenum","array","ATerm"],"kind":"struct"},"6:6708:16466":{"crate_id":6,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:22496:31161":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:7542:15884":{"crate_id":17,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:23328:15262":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:22970:17861":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"18:14220:12944":{"crate_id":18,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"7:5676:14686":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:40150:6036":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:8792:17642":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"5:7528:15239":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:6904:15835":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:12009:15231":{"crate_id":6,"path":["std","alloc","System"],"kind":"struct"},"1:22894:11710":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"6:10994:15951":{"crate_id":6,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"23:942:18068":{"crate_id":23,"path":["typenum","private","PrivateDiv"],"kind":"trait"},"6:9400:15214":{"crate_id":6,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"7:5586:14643":{"crate_id":7,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:12453:1871":{"crate_id":6,"path":["std","u8"],"kind":"primitive"},"6:1867:16425":{"crate_id":6,"path":["std","env","Vars"],"kind":"struct"},"1:13942:31130":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"18:12347:16281":{"crate_id":18,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"7:7586:15085":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:21987:31163":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"18:14692:13035":{"crate_id":18,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:38675:17586":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"5:889:12358":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:3244:247":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"18:16728:13602":{"crate_id":18,"path":["object","xcoff","FunAux32"],"kind":"struct"},"6:12449:902":{"crate_id":6,"path":["std","i16"],"kind":"primitive"},"1:43643:12143":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"18:13692:12834":{"crate_id":18,"path":["object","archive","AixFileHeader"],"kind":"struct"},"7:8308:15122":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:44887:16126":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:41026:12420":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"6:4160:18354":{"crate_id":6,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"18:11515:16241":{"crate_id":18,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:10973:15943":{"crate_id":6,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"23:2621:2347":{"crate_id":23,"path":["typenum","generated","consts","U64"],"kind":"type_alias"},"1:46305:15536":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"18:15931:13380":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:5614:16453":{"crate_id":6,"path":["std","process","Child"],"kind":"struct"},"17:7016:15846":{"crate_id":17,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"7:6758:14883":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"1:31441:11789":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"5:1539:5999":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:44250:16085":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:4884:12419":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:44555:16102":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"18:11016:16233":{"crate_id":18,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:23421:15264":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"7:4984:14407":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:5319:30491":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"6:936:12372":{"crate_id":6,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"18:14573:13021":{"crate_id":18,"path":["object","macho","SubClientCommand"],"kind":"struct"},"7:6419:14720":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"12:1064:24499":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"5:1627:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"18:10778:16229":{"crate_id":18,"path":["object","read","read_cache","ReadCache"],"kind":"struct"},"12:740:16394":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"6:1930:16429":{"crate_id":6,"path":["std","env","ArgsOs"],"kind":"struct"},"5:4328:12278":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"6:6209:12320":{"crate_id":6,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"18:15077:13117":{"crate_id":18,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"7:1584:14204":{"crate_id":7,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"7:8284:15118":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:40847:16029":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:2017:1703":{"crate_id":1,"path":["core","mem","size_of"],"kind":"function"},"1:38565:17584":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:10820:12339":{"crate_id":6,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"6:5664:16458":{"crate_id":6,"path":["std","process","ChildStderr"],"kind":"struct"},"1:8345:6357":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:2772:13646":{"crate_id":17,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"18:14335:12984":{"crate_id":18,"path":["object","macho","FatArch32"],"kind":"struct"},"6:11759:15230":{"crate_id":6,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"18:14520:13013":{"crate_id":18,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:22841:30513":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"18:16632:13579":{"crate_id":18,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"17:6731:16350":{"crate_id":17,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:44413:6000":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"12:1900:15916":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"5:7284:12415":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"7:8008:15095":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:44590:16029":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"23:9040:5963":{"crate_id":23,"path":["typenum","int","PInt"],"kind":"struct"},"7:5441:14582":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:11492:5998":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:22753:17865":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"1:8325:146":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:961:16394":{"crate_id":6,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:11013:140":{"crate_id":6,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"17:8636:25444":{"crate_id":17,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:10391:11895":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"7:5533:14619":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"18:10784:16230":{"crate_id":18,"path":["object","read","read_cache","ReadCacheInternal"],"kind":"struct"},"6:5541:129":{"crate_id":6,"path":["std","path","Display"],"kind":"struct"},"12:698:11836":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:40022:212":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"18:11309:16238":{"crate_id":18,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:4110:18352":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:8556:12688":{"crate_id":6,"path":["std","io","Bytes"],"kind":"struct"},"22:146:2502":{"crate_id":22,"path":["hybrid_array","Array"],"kind":"struct"},"12:2533:13988":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:11335:15222":{"crate_id":6,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"17:6239:13720":{"crate_id":17,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"6:9274:18450":{"crate_id":6,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:22617:17782":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"5:1785:12355":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"7:8290:15119":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:12727:5985":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"18:13451:12810":{"crate_id":18,"path":["object","read","Import"],"kind":"struct"},"24:30:6058":{"crate_id":24,"path":["block_buffer","read","ReadBuffer"],"kind":"struct"},"6:7746:37182":{"crate_id":6,"path":["std","panicking","Hook"],"kind":"enum"},"6:437:185":{"crate_id":6,"path":["std","thread","local","LocalKey"],"kind":"struct"},"18:12082:15719":{"crate_id":18,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"18:16832:12893":{"crate_id":18,"path":["object","xcoff","Rel64"],"kind":"struct"},"1:44866:17742":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:31414:196":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"6:8652:15183":{"crate_id":6,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"6:9172:15204":{"crate_id":6,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:9259:18448":{"crate_id":6,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"7:5151:14457":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:0:2659":{"crate_id":17,"path":["gimli"],"kind":"module"},"5:7747:17666":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:6384:12316":{"crate_id":6,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"5:1401:16402":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:9583:16562":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"23:785:18063":{"crate_id":23,"path":["typenum","private","Trim"],"kind":"trait"},"19:623:39054":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:1628:12396":{"crate_id":6,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:2950:13654":{"crate_id":17,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:11105:15205":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"1:42402:15496":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:44189:6010":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"18:11757:25540":{"crate_id":18,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:47597:11695":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"23:5714:6071":{"crate_id":23,"path":["typenum","generated","generic_const_mappings","ToUInt"],"kind":"trait"},"17:7578:15211":{"crate_id":17,"path":["gimli","read","op","Operation"],"kind":"enum"},"23:2513:2344":{"crate_id":23,"path":["typenum","generated","consts","U28"],"kind":"type_alias"},"7:5541:14624":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"7:4875:14355":{"crate_id":7,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"18:12524:16283":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"18:3854:16226":{"crate_id":18,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"18:11475:25520":{"crate_id":18,"path":["object","read","archive","SymbolIteratorInternal"],"kind":"enum"},"1:4946:11910":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"18:13055:12704":{"crate_id":18,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"18:15785:13340":{"crate_id":18,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:9308:16503":{"crate_id":6,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"5:7110:12407":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"18:15160:13131":{"crate_id":18,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"18:13838:12872":{"crate_id":18,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"7:1489:14149":{"crate_id":7,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"12:2137:16402":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"18:11386:25518":{"crate_id":18,"path":["object","read","archive","Members"],"kind":"enum"},"12:2323:16402":{"crate_id":12,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"12:671:5998":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:7909:16475":{"crate_id":6,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:23156:15245":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:6890:13659":{"crate_id":17,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:879:5998":{"crate_id":6,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:7804:37154":{"crate_id":6,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"18:14652:13031":{"crate_id":18,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"8:79:24413":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"6:12444:744":{"crate_id":6,"path":["std","f16"],"kind":"primitive"},"1:34294:17581":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:41227:16053":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:6064:13663":{"crate_id":17,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"12:430:39010":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"4:323:18036":{"crate_id":4,"path":["digest","core_api","wrapper","sealed","Sealed"],"kind":"trait"},"7:7316:14951":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:10709:12142":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"18:15602:13298":{"crate_id":18,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"7:5044:14438":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:33948:17580":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"18:12095:15721":{"crate_id":18,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:42216:17684":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"10:390:24420":{"crate_id":10,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"21:102:18085":{"crate_id":21,"path":["crypto_common","KeySizeUser"],"kind":"trait"},"15:7:16389":{"crate_id":15,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:23476:15269":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"16:394:24533":{"crate_id":16,"path":["addr2line","DebugFile"],"kind":"enum"},"12:854:16398":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"18:10803:12688":{"crate_id":18,"path":["object","read","util","Bytes"],"kind":"struct"},"1:3290:6039":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"18:13006:12783":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"18:16555:13565":{"crate_id":18,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"18:12931:12776":{"crate_id":18,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:13286:17735":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"5:3364:15919":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"5:726:16535":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:21956:31168":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"7:6507:14770":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:44116:6008":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:2968:18036":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:41114:16039":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:5648:16457":{"crate_id":6,"path":["std","process","ChildStdout"],"kind":"struct"},"6:12456:1865":{"crate_id":6,"path":["std","u64"],"kind":"primitive"},"17:7030:13738":{"crate_id":17,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"18:12306:15733":{"crate_id":18,"path":["object","read","macho","fat","MachOFatFile"],"kind":"struct"},"1:13172:2687":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:5318:13710":{"crate_id":17,"path":["gimli","constants","DwLns"],"kind":"struct"},"18:11448:16240":{"crate_id":18,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"7:5670:14684":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"7:5482:14608":{"crate_id":7,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"19:563:12550":{"crate_id":19,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"5:6125:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"5:7786:12388":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:42422:194":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"18:16714:13599":{"crate_id":18,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"7:5622:14664":{"crate_id":7,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"7:5375:14545":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"19:726:12567":{"crate_id":19,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:4174:18356":{"crate_id":6,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:3286:11722":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"1:8374:130":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:4184:13688":{"crate_id":17,"path":["gimli","constants","DwUt"],"kind":"struct"},"12:2349:16403":{"crate_id":12,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"18:13349:15752":{"crate_id":18,"path":["object","read","SymbolMap"],"kind":"struct"},"6:4938:18369":{"crate_id":6,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"18:12260:25611":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldSubCacheSlice"],"kind":"enum"},"25:329:2684":{"crate_id":25,"path":["const_oid","ObjectIdentifierRef"],"kind":"struct"},"19:718:12564":{"crate_id":19,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"12:2440:12372":{"crate_id":12,"path":["hashbrown","table","Drain"],"kind":"struct"},"1:42200:15487":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"18:12234:12790":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:9347:16509":{"crate_id":6,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"18:16084:13444":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:8711:13904":{"crate_id":17,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"4:411:2675":{"crate_id":4,"path":["digest","digest","DynDigest"],"kind":"trait"},"1:46343:15542":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"18:13070:12714":{"crate_id":18,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"6:9359:16511":{"crate_id":6,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:8565:15903":{"crate_id":17,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"18:15753:13334":{"crate_id":18,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:10452:11897":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"7:6411:14718":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"0:106:2379":{"crate_id":0,"path":["sha2","Sha384"],"kind":"type_alias"},"18:11720:15714":{"crate_id":18,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"6:3493:18337":{"crate_id":6,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"7:1521:14162":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"18:11952:16257":{"crate_id":18,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:23171:16007":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:45233:207":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"18:15939:13383":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"18:14586:13022":{"crate_id":18,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:3493:143":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"18:16026:13402":{"crate_id":18,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:30773:17387":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"6:12434:476":{"crate_id":6,"path":["std","char"],"kind":"primitive"},"18:506:12624":{"crate_id":18,"path":["object","read","any","Section"],"kind":"struct"},"6:12458:977":{"crate_id":6,"path":["std","isize"],"kind":"primitive"},"1:47053:15599":{"crate_id":1,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"1:45021:16138":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:44513:16100":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:46920:15594":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"7:4929:14383":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"18:15829:13352":{"crate_id":18,"path":["object","pe","ImageImportByName"],"kind":"struct"},"18:12028:16263":{"crate_id":18,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"7:5357:14535":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"1:45013:16136":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"7:6534:14777":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:9367:15211":{"crate_id":6,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"7:7361:14975":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:46393:15545":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:8503:13896":{"crate_id":17,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"5:7577:15979":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"18:5131:16227":{"crate_id":18,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"1:31056:11723":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"18:15050:13113":{"crate_id":18,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"7:7448:15004":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"4:537:5978":{"crate_id":4,"path":["digest","core_api","xof_reader","XofReaderCoreWrapper"],"kind":"struct"},"5:2148:15922":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"18:12122:15723":{"crate_id":18,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:40893:16031":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"18:13491:12812":{"crate_id":18,"path":["object","read","CodeView"],"kind":"struct"},"1:12950:16094":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"18:12018:16262":{"crate_id":18,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"1:40971:17666":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"18:15475:13277":{"crate_id":18,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"23:9642:5962":{"crate_id":23,"path":["typenum","uint","UTerm"],"kind":"struct"},"18:12897:15747":{"crate_id":18,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"1:43380:15514":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"7:4997:14413":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"7:6790:14893":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:46949:15595":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:4902:13697":{"crate_id":17,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:10978:15945":{"crate_id":6,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"6:5680:114":{"crate_id":6,"path":["std","process","Command"],"kind":"struct"},"1:2082:1373":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"16:288:24522":{"crate_id":16,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:3084:138":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"5:5525:12355":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:3126:24572":{"crate_id":17,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:8669:13837":{"crate_id":17,"path":["gimli","read","value","Value"],"kind":"enum"},"1:39924:17597":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"6:6879:16470":{"crate_id":6,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"6:8671:16496":{"crate_id":6,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"18:16179:13462":{"crate_id":18,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:44599:16023":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"25:193:2508":{"crate_id":25,"path":["const_oid","buffer","Buffer"],"kind":"struct"},"7:1539:14173":{"crate_id":7,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"18:12840:15740":{"crate_id":18,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"23:1174:6120":{"crate_id":23,"path":["typenum","type_operators","Abs"],"kind":"trait"},"1:41644:16068":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:43880:16084":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"18:13662:12830":{"crate_id":18,"path":["object","archive","AixHeader"],"kind":"struct"},"6:11804:15959":{"crate_id":6,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:11869:12345":{"crate_id":6,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"7:5412:1258":{"crate_id":7,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"23:642:6105":{"crate_id":23,"path":["typenum","marker_traits","Integer"],"kind":"trait"},"1:10458:206":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"7:5117:14454":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:3249:11773":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"18:16507:12857":{"crate_id":18,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"23:814:18051":{"crate_id":23,"path":["typenum","private","PrivateAnd"],"kind":"trait"},"17:7212:15853":{"crate_id":17,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:46410:15546":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:46518:15560":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:9754:12337":{"crate_id":6,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"1:44673:17741":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"7:6526:14772":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"7:5593:14645":{"crate_id":7,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"23:1031:18037":{"crate_id":23,"path":["typenum","private","IsLessPrivate"],"kind":"trait"},"1:11135:12431":{"crate_id":1,"path":["core","slice","sort","shared","smallsort","CopyOnDrop"],"kind":"struct"},"6:8581:16494":{"crate_id":6,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:4100:11836":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:41063:6014":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"18:12952:15750":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:22007:17784":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"7:8353:15133":{"crate_id":7,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:3402:16441":{"crate_id":6,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"7:5488:14609":{"crate_id":7,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"1:45274:15526":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"18:11401:12698":{"crate_id":18,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:2467:13627":{"crate_id":17,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:42362:15932":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:8842:18426":{"crate_id":6,"path":["std","path","Component"],"kind":"enum"},"6:3848:18350":{"crate_id":6,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"5:7609:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"18:16613:12871":{"crate_id":18,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"23:615:6088":{"crate_id":23,"path":["typenum","marker_traits","Bit"],"kind":"trait"},"17:6421:15757":{"crate_id":17,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:6640:16321":{"crate_id":17,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"18:1220:16217":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:8209:13664":{"crate_id":17,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"24:61:18036":{"crate_id":24,"path":["block_buffer","sealed","Sealed"],"kind":"trait"},"5:3268:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"4:359:2509":{"crate_id":4,"path":["digest","core_api","BufferKindUser"],"kind":"trait"},"1:42594:5998":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"21:110:2676":{"crate_id":21,"path":["crypto_common","Reset"],"kind":"trait"},"1:45009:16135":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:11335:18036":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:5348:13711":{"crate_id":17,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:10991:12429":{"crate_id":1,"path":["core","slice","sort","unstable","quicksort","GapGuard"],"kind":"struct"},"1:41621:16065":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:47627:11697":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"12:873:16400":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:3731:17598":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"18:12035:15920":{"crate_id":18,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"5:2266:15969":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:2155:11724":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:41628:16066":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"18:10696:12686":{"crate_id":18,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:4758:16554":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"6:6704:16067":{"crate_id":6,"path":["std","sync","once","Once"],"kind":"struct"},"4:385:2517":{"crate_id":4,"path":["digest","digest","HashMarker"],"kind":"trait"},"17:6084:15762":{"crate_id":17,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:44341:16092":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:22005:18036":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"18:16264:13485":{"crate_id":18,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"6:11049:37827":{"crate_id":6,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:40810:16026":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:8101:12311":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"18:12044:16268":{"crate_id":18,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:6114:12278":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:3587:13683":{"crate_id":17,"path":["gimli","arch","MIPS"],"kind":"struct"},"6:9148:199":{"crate_id":6,"path":["std","process","Output"],"kind":"struct"},"4:460:2666":{"crate_id":4,"path":["digest","FixedOutputReset"],"kind":"trait"},"21:112:2505":{"crate_id":21,"path":["crypto_common","AlgorithmName"],"kind":"trait"},"6:12455:1859":{"crate_id":6,"path":["std","u32"],"kind":"primitive"},"5:6559:18157":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:9584:16428":{"crate_id":6,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"6:11427:16528":{"crate_id":6,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"19:754:15710":{"crate_id":19,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"5:2368:15974":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"21:105:18086":{"crate_id":21,"path":["crypto_common","IvSizeUser"],"kind":"trait"},"18:11163:12714":{"crate_id":18,"path":["object","read","any","SymbolTable"],"kind":"struct"},"7:1675:14266":{"crate_id":7,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"18:12392:12729":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"18:16297:13492":{"crate_id":18,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"18:13719:12842":{"crate_id":18,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:5224:13707":{"crate_id":17,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:1928:16428":{"crate_id":6,"path":["std","env","Args"],"kind":"struct"},"6:4308:38007":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"7:5295:14518":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"18:14872:13080":{"crate_id":18,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"23:611:190":{"crate_id":23,"path":["typenum","marker_traits","NonZero"],"kind":"trait"},"17:8320:25443":{"crate_id":17,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:10998:12430":{"crate_id":1,"path":["core","slice","sort","unstable","quicksort","GapGuardRaw"],"kind":"struct"},"1:46875:15593":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"7:6716:14870":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"18:11851:16255":{"crate_id":18,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"18:16684:13591":{"crate_id":18,"path":["object","xcoff","FileAux64"],"kind":"struct"},"17:3889:12578":{"crate_id":17,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:8336:165":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"6:4826:14994":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"1:10235:11917":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"1:44267:16087":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"7:7518:15049":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:4915:11752":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"7:5387:14550":{"crate_id":7,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"18:15010:13110":{"crate_id":18,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:1106:16403":{"crate_id":6,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:5689:13716":{"crate_id":17,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"18:12293:16276":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"14:229:13987":{"crate_id":14,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:41184:16049":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:2084:197":{"crate_id":6,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"23:9019:5966":{"crate_id":23,"path":["typenum","bit","B1"],"kind":"struct"},"5:6757:12355":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:2684:13642":{"crate_id":17,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"12:798:12372":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"6:12459:1933":{"crate_id":6,"path":["std","usize"],"kind":"primitive"},"1:43429:11723":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:3295:6043":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:6063:12310":{"crate_id":6,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:12457:1847":{"crate_id":6,"path":["std","u128"],"kind":"primitive"},"18:667:12670":{"crate_id":18,"path":["object","read","any","Symbol"],"kind":"struct"},"1:40820:16027":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"7:7308:14946":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"23:654:6076":{"crate_id":23,"path":["typenum","marker_traits","PowerOfTwo"],"kind":"trait"},"18:14859:13079":{"crate_id":18,"path":["object","macho","RpathCommand"],"kind":"struct"},"5:7703:18120":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"18:14612:13026":{"crate_id":18,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"18:15136:12776":{"crate_id":18,"path":["object","macho","Relocation"],"kind":"struct"},"18:16377:13511":{"crate_id":18,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"18:15106:13120":{"crate_id":18,"path":["object","macho","Nlist32"],"kind":"struct"},"26:0:2382":{"crate_id":26,"path":["cfg_if"],"kind":"module"},"1:23487:15270":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"1:2998:145":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"6:8216:15137":{"crate_id":6,"path":["std","fs","FileTimes"],"kind":"struct"},"17:3695:13684":{"crate_id":17,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:23432:15265":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"6:9354:16510":{"crate_id":6,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"6:3443:16442":{"crate_id":6,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:3913:16447":{"crate_id":6,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:32631:16573":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"18:13515:25509":{"crate_id":18,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:6696:16340":{"crate_id":17,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:7401:39031":{"crate_id":17,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:46664:15568":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"18:15665:13312":{"crate_id":18,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"7:1507:14157":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"18:11173:39046":{"crate_id":18,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"12:1601:16410":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"5:1487:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"23:933:18066":{"crate_id":23,"path":["typenum","private","PrivateSetBit"],"kind":"trait"},"6:766:154":{"crate_id":6,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"12:396:12288":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:44106:5996":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:8627:15933":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"6:12401:37193":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"6:12448:920":{"crate_id":6,"path":["std","i8"],"kind":"primitive"},"1:23454:15267":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"1:46987:15597":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"5:7734:15982":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:4636:15990":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"4:457:2665":{"crate_id":4,"path":["digest","FixedOutput"],"kind":"trait"},"18:16341:13507":{"crate_id":18,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:3470:17589":{"crate_id":1,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"18:16036:13407":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"18:14114:12932":{"crate_id":18,"path":["object","elf","NoteHeader32"],"kind":"struct"},"18:12711:16293":{"crate_id":18,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"7:538:14120":{"crate_id":7,"path":["libc","unix","pollfd"],"kind":"struct"},"7:5165:14458":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"18:11818:16254":{"crate_id":18,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"18:14019:12904":{"crate_id":18,"path":["object","elf","Dyn32"],"kind":"struct"},"18:15777:13338":{"crate_id":18,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:44583:16105":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"0:102:2371":{"crate_id":0,"path":["sha2","Sha224"],"kind":"type_alias"},"5:3096:36703":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"18:16822:12888":{"crate_id":18,"path":["object","xcoff","Rel32"],"kind":"struct"},"7:5265:14502":{"crate_id":7,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"7:1632:14240":{"crate_id":7,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:47612:11696":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"12:123:12284":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:6744:12327":{"crate_id":6,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:44277:12688":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:47103:15601":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"18:16311:13499":{"crate_id":18,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"22:0:2663":{"crate_id":22,"path":["hybrid_array"],"kind":"module"},"17:7883:13839":{"crate_id":17,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:994:16401":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:8723:138":{"crate_id":17,"path":["gimli","read","Error"],"kind":"enum"},"18:13205:16309":{"crate_id":18,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:45208:151":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:3716:33478":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"7:564:14133":{"crate_id":7,"path":["libc","unix","itimerval"],"kind":"struct"},"18:11592:12663":{"crate_id":18,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:44815:16120":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"18:12135:15724":{"crate_id":18,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"23:1111:18041":{"crate_id":23,"path":["typenum","private","IsNotEqualPrivate"],"kind":"trait"},"18:15864:13361":{"crate_id":18,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:42902:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:46425:15547":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:2328:6050":{"crate_id":6,"path":["std","fs","read"],"kind":"function"},"18:11075:39044":{"crate_id":18,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:40000:210":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"17:4694:13692":{"crate_id":17,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:6843:15831":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:8151:13676":{"crate_id":17,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"6:6825:18444":{"crate_id":6,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"10:176:24485":{"crate_id":10,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"6:4116:18351":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:6305:15992":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"18:10332:25499":{"crate_id":18,"path":["object","common","RelocationEncoding"],"kind":"enum"},"7:5381:14547":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"18:14483:13009":{"crate_id":18,"path":["object","macho","Section64"],"kind":"struct"},"18:12906:12775":{"crate_id":18,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"5:3343:37098":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"18:2406:16220":{"crate_id":18,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"6:8827:15197":{"crate_id":6,"path":["std","path","PrefixComponent"],"kind":"struct"},"6:8632:18381":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"18:13733:12843":{"crate_id":18,"path":["object","elf","FileHeader32"],"kind":"struct"},"7:5551:14630":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:3307:38829":{"crate_id":6,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"6:2715:12302":{"crate_id":6,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"6:7333:37136":{"crate_id":6,"path":["std","sys","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"7:6672:14852":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"7:6700:14862":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"7:6666:14849":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"19:689:15700":{"crate_id":19,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:2596:679":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:4956:13699":{"crate_id":17,"path":["gimli","constants","DwVis"],"kind":"struct"},"18:12550:12761":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"18:14327:12982":{"crate_id":18,"path":["object","macho","FatHeader"],"kind":"struct"},"6:2479:18298":{"crate_id":6,"path":["std","fs","symlink_metadata"],"kind":"function"},"18:13970:12894":{"crate_id":18,"path":["object","elf","Rela64"],"kind":"struct"},"1:41205:16051":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"23:989:18033":{"crate_id":23,"path":["typenum","private","PrivateDivInt"],"kind":"trait"},"6:3310:38857":{"crate_id":6,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"7:6691:14856":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"1:47405:15638":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:7416:16354":{"crate_id":17,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"6:9436:12278":{"crate_id":6,"path":["std","sync","poison","Guard"],"kind":"struct"},"17:6408:15796":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"18:11026:39045":{"crate_id":18,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:22186:15244":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:4338:18378":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:41175:16048":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:9499:15942":{"crate_id":6,"path":["std","time","SystemTimeError"],"kind":"struct"},"21:81:6057":{"crate_id":21,"path":["crypto_common","BlockSizes"],"kind":"trait"},"6:5017:18366":{"crate_id":6,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:3305:13797":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"7:5217:14480":{"crate_id":7,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"18:11566:16244":{"crate_id":18,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"19:706:15703":{"crate_id":19,"path":["memchr","memmem","Searcher"],"kind":"struct"},"5:7211:264":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:8066:25441":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:42184:15485":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:47689:6546":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:22615:18036":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:33609:17575":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"12:1725:156":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:3048:24571":{"crate_id":17,"path":["gimli","common","SectionId"],"kind":"enum"},"6:8226:15927":{"crate_id":6,"path":["std","fs","Permissions"],"kind":"struct"},"18:10928:16232":{"crate_id":18,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"1:46681:15569":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"18:14708:13040":{"crate_id":18,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:12759:17728":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"18:15431:13246":{"crate_id":18,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:11932:16447":{"crate_id":6,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"5:7811:15988":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"6:5802:14900":{"crate_id":6,"path":["std","process","exit"],"kind":"function"},"6:4359:18380":{"crate_id":6,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"18:14750:13061":{"crate_id":18,"path":["object","macho","DylibModule32"],"kind":"struct"},"18:14547:13018":{"crate_id":18,"path":["object","macho","DylibCommand"],"kind":"struct"},"12:2466:12396":{"crate_id":12,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"5:3931:12396":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"6:1650:15919":{"crate_id":6,"path":["std","collections","hash","set","Union"],"kind":"struct"},"18:11678:16247":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:4837:11908":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"6:12385:16532":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"15:214:15905":{"crate_id":15,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:23498:15271":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"19:538:12548":{"crate_id":19,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"5:3092:36704":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:11789:6000":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:6042:13661":{"crate_id":17,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:10409:16515":{"crate_id":6,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"4:386:2339":{"crate_id":4,"path":["digest","digest","Digest"],"kind":"trait"},"18:10534:12680":{"crate_id":18,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:8620:15932":{"crate_id":6,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"7:7368:14979":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"5:7798:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:2570:13637":{"crate_id":17,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"7:6902:14928":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"7:523:14111":{"crate_id":7,"path":["libc","unix","hostent"],"kind":"struct"},"1:42466:11836":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"13:0:2655":{"crate_id":13,"path":["rustc_std_workspace_alloc"],"kind":"module"},"6:4492:16450":{"crate_id":6,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"23:1206:6079":{"crate_id":23,"path":["typenum","type_operators","Max"],"kind":"trait"},"1:46710:15570":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:2995:163":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"18:11864:16256":{"crate_id":18,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:40934:16033":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"struct"},"6:9326:37155":{"crate_id":6,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"6:923:15915":{"crate_id":6,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:8562:6002":{"crate_id":6,"path":["std","io","Split"],"kind":"struct"},"1:11623:6003":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:3073:124":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"18:13322:25508":{"crate_id":18,"path":["object","read","SymbolSection"],"kind":"enum"},"6:8510:15178":{"crate_id":6,"path":["std","io","IoSlice"],"kind":"struct"},"23:1274:6096":{"crate_id":23,"path":["typenum","type_operators","Logarithm2"],"kind":"trait"},"19:589:12551":{"crate_id":19,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:4936:18367":{"crate_id":6,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:46273:15534":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"19:608:16207":{"crate_id":19,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:4763:16555":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"15:31:16389":{"crate_id":15,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:9445:235":{"crate_id":6,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:42384:15495":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:3110:13679":{"crate_id":17,"path":["gimli","common","DwoId"],"kind":"struct"},"1:26383:267":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:47650:11698":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"5:7762:15985":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:21973:18043":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"6:9428:12324":{"crate_id":6,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"6:8371:18342":{"crate_id":6,"path":["std","io","error","ErrorKind"],"kind":"enum"},"7:6708:14866":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"17:2820:13648":{"crate_id":17,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:4940:18370":{"crate_id":6,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"8:0:1923":{"crate_id":8,"path":["unwind"],"kind":"module"},"5:4482:265":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"25:255:138":{"crate_id":25,"path":["const_oid","error","Error"],"kind":"enum"},"1:10460:11900":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:45017:16137":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"18:11291:39042":{"crate_id":18,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"18:11465:15711":{"crate_id":18,"path":["object","read","archive","ArchiveSymbolIterator"],"kind":"struct"},"19:573:12543":{"crate_id":19,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"5:2348:36589":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"12:1920:15919":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"1:40839:16023":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"5:7557:12372":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"7:6473:14746":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:910:15914":{"crate_id":6,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:7159:15852":{"crate_id":17,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"18:16798:13618":{"crate_id":18,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"1:2834:195":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:4520:17615":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:8258:15928":{"crate_id":6,"path":["std","hash","random","RandomState"],"kind":"struct"},"17:7554:25439":{"crate_id":17,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:47257:15634":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:3125:16550":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"7:5127:14455":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:45025:16139":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"5:2816:15237":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:6625:15826":{"crate_id":17,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"5:2585:15233":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"7:6917:14939":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:42458:5999":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:10456:11899":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"7:559:14131":{"crate_id":7,"path":["libc","unix","sigval"],"kind":"struct"},"1:47502:11689":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"18:15760:13335":{"crate_id":18,"path":["object","pe","ImageRelocation"],"kind":"struct"},"18:15739:13331":{"crate_id":18,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"5:4208:5999":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:8041:12534":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:10095:31226":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:11161:12341":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:21975:18044":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:3768:17599":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:3487:141":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:11541:6002":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:21919:11789":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:39985:213":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:306:24523":{"crate_id":16,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:43392:13872":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:7869:17670":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"6:957:16393":{"crate_id":6,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"5:3866:16538":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:2900:13652":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:7495:15877":{"crate_id":17,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"18:16218:13471":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:40942:15480":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:9904:85":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:8612:13678":{"crate_id":17,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:9440:234":{"crate_id":6,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:22066:17783":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:13027:6019":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"6:3684:18330":{"crate_id":6,"path":["std","io","BufRead"],"kind":"trait"},"6:10551:114":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"4:466:2668":{"crate_id":4,"path":["digest","ExtendableOutput"],"kind":"trait"},"18:14672:13034":{"crate_id":18,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:45225:227":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"17:7075:25436":{"crate_id":17,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"4:493:15240":{"crate_id":4,"path":["digest","core_api","ct_variable","NoOid"],"kind":"struct"},"17:4983:13700":{"crate_id":17,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"23:1091:18040":{"crate_id":23,"path":["typenum","private","IsLessOrEqualPrivate"],"kind":"trait"},"17:4929:13698":{"crate_id":17,"path":["gimli","constants","DwAccess"],"kind":"struct"},"7:6813:14899":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"5:7692:15981":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"10:422:24421":{"crate_id":10,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:32654:237":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:824:190":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"17:6998:15840":{"crate_id":17,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:5399:988":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:47522:6651":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:1852:703":{"crate_id":6,"path":["std","env"],"kind":"module"},"1:45335:15529":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"24:0:2503":{"crate_id":24,"path":["block_buffer"],"kind":"module"},"7:6638:14836":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"4:463:2667":{"crate_id":4,"path":["digest","XofReader"],"kind":"trait"},"1:47476:15641":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:1633:15916":{"crate_id":6,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:2798:201":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:3452:125":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"6:4899:18382":{"crate_id":6,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:8598:16388":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:8252:128":{"crate_id":6,"path":["std","fs","DirBuilder"],"kind":"struct"},"7:7454:15006":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"18:15064:13116":{"crate_id":18,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"5:780:250":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"18:11691:16248":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:41123:16040":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:42791:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:9232:15207":{"crate_id":6,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"18:10516:25505":{"crate_id":18,"path":["object","endian","Endianness"],"kind":"enum"},"18:11124:39049":{"crate_id":18,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"23:2397:18036":{"crate_id":23,"path":["typenum","sealed","Sealed"],"kind":"trait"},"6:3910:16446":{"crate_id":6,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:1982:16430":{"crate_id":6,"path":["std","error","Report"],"kind":"struct"},"6:8697:15184":{"crate_id":6,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"4:508:2350":{"crate_id":4,"path":["digest","core_api","ct_variable","CtVariableCoreWrapper"],"kind":"struct"},"18:14917:13089":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"7:4947:14391":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"18:10487:25504":{"crate_id":18,"path":["object","common","RelocationFlags"],"kind":"enum"},"6:384:16415":{"crate_id":6,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"18:10394:25501":{"crate_id":18,"path":["object","common","SegmentFlags"],"kind":"enum"},"7:5334:14532":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"1:47347:15636":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:8539:16037":{"crate_id":6,"path":["std","io","Chain"],"kind":"struct"},"17:6573:15823":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"7:5477:14606":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:23520:15273":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"12:351:39002":{"crate_id":12,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"18:14933:13090":{"crate_id":18,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"6:2325:16434":{"crate_id":6,"path":["std","fs","DirEntry"],"kind":"struct"},"6:11773:15956":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:46211:15530":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:6337:15787":{"crate_id":17,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:2415:24542":{"crate_id":17,"path":["gimli","common","Format"],"kind":"enum"},"18:10843:12691":{"crate_id":18,"path":["object","read","util","StringTable"],"kind":"struct"},"17:5198:13706":{"crate_id":17,"path":["gimli","constants","DwOrd"],"kind":"struct"},"6:9201:16502":{"crate_id":6,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"18:10115:25492":{"crate_id":18,"path":["object","common","AddressSize"],"kind":"enum"},"1:2045:678":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"6:8575:16492":{"crate_id":6,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:47180:15633":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"23:924:18053":{"crate_id":23,"path":["typenum","private","PrivateCmp"],"kind":"trait"},"18:12008:12617":{"crate_id":18,"path":["object","read","elf","note","Note"],"kind":"struct"},"18:16775:13613":{"crate_id":18,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"0:103:2373":{"crate_id":0,"path":["sha2","Sha256"],"kind":"type_alias"},"6:9295:15210":{"crate_id":6,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:9380:37246":{"crate_id":6,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:8546:15900":{"crate_id":17,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"21:35:18095":{"crate_id":21,"path":["crypto_common","hazmat","SerializableState"],"kind":"trait"},"7:4921:14380":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"18:12723:16294":{"crate_id":18,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:46241:15532":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"16:327:24527":{"crate_id":16,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:11775:6004":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:1115:16407":{"crate_id":6,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"18:12409:25612":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:39972:16021":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:45033:16141":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:2645:16435":{"crate_id":6,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"6:1097:16402":{"crate_id":6,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"12:1888:12372":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"7:8296:15120":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"7:5325:14529":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:4397:12278":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"19:491:15693":{"crate_id":19,"path":["memchr","cow","Imp"],"kind":"struct"},"17:3308:13624":{"crate_id":17,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:2803:135":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"18:11553:16243":{"crate_id":18,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:41421:16062":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"6:9215:15206":{"crate_id":6,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:11892:16446":{"crate_id":6,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:4411:16449":{"crate_id":6,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"12:1105:16405":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:5877:15923":{"crate_id":6,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"18:15905:13370":{"crate_id":18,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"12:102:15907":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:45029:16140":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:8789:150":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:12439:1707":{"crate_id":6,"path":["std","slice"],"kind":"primitive"},"7:6381:14693":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:5709:25429":{"crate_id":17,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"18:11579:16245":{"crate_id":18,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:1905:16427":{"crate_id":6,"path":["std","env","SplitPaths"],"kind":"struct"},"6:8646:16492":{"crate_id":6,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:1838:17521":{"crate_id":1,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"1:4605:16553":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:7192:25437":{"crate_id":17,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"20:0:1306":{"crate_id":20,"path":["panic_unwind"],"kind":"module"},"23:998:18035":{"crate_id":23,"path":["typenum","private","PrivateRem"],"kind":"trait"},"1:40323:17563":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:10448:129":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"18:12225:15732":{"crate_id":18,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"5:1250:36607":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"7:1551:14182":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:13227:15703":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"12:1140:16406":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:7919:16376":{"crate_id":17,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:8288:6045":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"5:7896:12400":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:2989:78":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"7:7341:14969":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"5:2162:16538":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"18:16739:13607":{"crate_id":18,"path":["object","xcoff","FunAux64"],"kind":"struct"},"18:14072:12917":{"crate_id":18,"path":["object","elf","Verdaux"],"kind":"struct"},"6:12220:12351":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"12:2420:11836":{"crate_id":12,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"7:5603:14650":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:7816:37152":{"crate_id":6,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"1:32578:13992":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"17:2550:13636":{"crate_id":17,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:44395:6004":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:8882:15934":{"crate_id":6,"path":["std","path","Components"],"kind":"struct"},"1:46454:15549":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:44291:6002":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"0:107:2381":{"crate_id":0,"path":["sha2","Sha512"],"kind":"type_alias"},"1:43627:12144":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:1624:12372":{"crate_id":6,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"5:5141:12278":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:661:16417":{"crate_id":6,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:2860:13650":{"crate_id":17,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:13238:17726":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"5:5570:18140":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:10774:16438":{"crate_id":6,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"1:44852:16121":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"18:15540:13287":{"crate_id":18,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"6:12440:1741":{"crate_id":6,"path":["std","str"],"kind":"primitive"},"6:4699:18383":{"crate_id":6,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"7:1589:14206":{"crate_id":7,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"7:5255:14496":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:33881:17576":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"18:13537:12776":{"crate_id":18,"path":["object","read","Relocation"],"kind":"struct"},"23:828:18059":{"crate_id":23,"path":["typenum","private","PrivateSub"],"kind":"trait"},"18:13610:12823":{"crate_id":18,"path":["object","read","CompressedData"],"kind":"struct"},"1:4754:221":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"6:9159:15203":{"crate_id":6,"path":["std","process","ExitStatus"],"kind":"struct"},"1:45287:30450":{"crate_id":1,"path":["core","task","wake","ExtData"],"kind":"enum"},"17:8058:16383":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"7:1684:14272":{"crate_id":7,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:44176:6015":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"18:13119:12786":{"crate_id":18,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"1:6018:12278":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:12379:2501":{"crate_id":1,"path":["core","slice","raw","from_ref"],"kind":"function"},"1:5126:17633":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"7:6564:14800":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"10:480:24418":{"crate_id":10,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"5:3707:5998":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"21:145:12541":{"crate_id":21,"path":["crypto_common","hazmat","DeserializeStateError"],"kind":"struct"},"18:14438:13003":{"crate_id":18,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:46649:15567":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:23509:15272":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"1:13233:17727":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:896:16311":{"crate_id":17,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"1:45308:180":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"5:7880:12396":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"6:12460:1435":{"crate_id":6,"path":["std","reference"],"kind":"primitive"},"1:14260:17777":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:31041:11766":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:44126:6009":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:43113:11897":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:42941:91":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"5:6838:11836":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:32713:6359":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"12:809:12396":{"crate_id":12,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"7:517:14108":{"crate_id":7,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:4152:13687":{"crate_id":17,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:6658:16331":{"crate_id":17,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:42643:90":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:4844:13695":{"crate_id":17,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:8836:32990":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"23:1221:6122":{"crate_id":23,"path":["typenum","type_operators","IsEqual"],"kind":"trait"},"18:11788:16250":{"crate_id":18,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:2530:13635":{"crate_id":17,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:12743:5987":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"17:7350:13779":{"crate_id":17,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:46226:15531":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"7:5241:14491":{"crate_id":7,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"7:5641:14673":{"crate_id":7,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"15:0:2657":{"crate_id":15,"path":["rustc_demangle"],"kind":"module"},"5:1123:12355":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"23:1211:6121":{"crate_id":23,"path":["typenum","type_operators","IsLess"],"kind":"trait"},"17:6738:39035":{"crate_id":17,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"7:5036:14433":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"12:299:15908":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:2990:13656":{"crate_id":17,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:6822:25434":{"crate_id":17,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"18:10218:25495":{"crate_id":18,"path":["object","common","ComdatKind"],"kind":"enum"},"4:454:2664":{"crate_id":4,"path":["digest","Update"],"kind":"trait"},"1:46858:15592":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"18:12736:16295":{"crate_id":18,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:44198:6013":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"6:9455:12331":{"crate_id":6,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"18:16642:13580":{"crate_id":18,"path":["object","xcoff","Symbol32"],"kind":"struct"},"7:6765:14884":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"18:14055:12909":{"crate_id":18,"path":["object","elf","Verdef"],"kind":"struct"},"1:44459:16097":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:7647:2546":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"18:13427:12808":{"crate_id":18,"path":["object","read","ObjectMapFile"],"kind":"struct"},"18:16323:13501":{"crate_id":18,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"7:5179:14459":{"crate_id":7,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:597:16416":{"crate_id":6,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:12432:420":{"crate_id":6,"path":["std","bool"],"kind":"primitive"},"4:566:2672":{"crate_id":4,"path":["digest","InvalidBufferSize"],"kind":"struct"},"7:8273:15114":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"18:15641:13307":{"crate_id":18,"path":["object","pe","ImageSymbol"],"kind":"struct"},"18:15973:13391":{"crate_id":18,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:22484:5993":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"7:5405:14561":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"5:3330:15918":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:11661:6020":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:2966:13655":{"crate_id":17,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:40797:15479":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"18:12625:12765":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:41105:15963":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:6389:16314":{"crate_id":17,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:42620:224":{"crate_id":1,"path":["core","sync","atomic","Ordering","Relaxed"],"kind":"variant"},"6:11057:16496":{"crate_id":6,"path":["std","sys","pal","unix","linux","pidfd","PidFd"],"kind":"struct"},"4:557:2518":{"crate_id":4,"path":["digest","InvalidOutputSize"],"kind":"struct"},"18:13014:16300":{"crate_id":18,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"12:1884:11836":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:3014:24570":{"crate_id":17,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"7:5682:14689":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:46600:15564":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:8080:18257":{"crate_id":6,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:14168:12433":{"crate_id":1,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"6:11065:16481":{"crate_id":6,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"17:7305:13773":{"crate_id":17,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:3349:16439":{"crate_id":6,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:42350:16078":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:40741:16024":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:45005:16134":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"17:7471:13786":{"crate_id":17,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"5:7617:15980":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:4684:11907":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"5:3088:15236":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:44495:16099":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"18:15714:13323":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:23259:30424":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"18:15036:13112":{"crate_id":18,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:3237:11772":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"18:10246:25496":{"crate_id":18,"path":["object","common","SymbolKind"],"kind":"enum"},"23:1153:18055":{"crate_id":23,"path":["typenum","private","PrivateLogarithm2"],"kind":"trait"},"1:43363:11723":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"7:8261:15112":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"4:357:2512":{"crate_id":4,"path":["digest","core_api","UpdateCore"],"kind":"trait"},"18:15689:13314":{"crate_id":18,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:902:11836":{"crate_id":6,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"5:1230:37100":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:8730:16497":{"crate_id":6,"path":["std","panic","PanicHookInfo"],"kind":"struct"},"17:7716:39036":{"crate_id":17,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"7:1711:14283":{"crate_id":7,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"18:13471:12773":{"crate_id":18,"path":["object","read","Export"],"kind":"struct"},"17:5449:13714":{"crate_id":17,"path":["gimli","constants","DwRle"],"kind":"struct"},"18:16761:13609":{"crate_id":18,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"6:6432:16465":{"crate_id":6,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"6:11032:15178":{"crate_id":6,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"6:5282:16452":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:6205:25431":{"crate_id":17,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:3858:71":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:33397:13794":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:22:826":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"17:2880:13651":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"5:3085:15967":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:34015:17578":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"7:6449:14737":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:12417:37790":{"crate_id":6,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:9193:5998":{"crate_id":6,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:40960:16034":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"12:685:5999":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"6:685:18255":{"crate_id":6,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:43867:15516":{"crate_id":1,"path":["core","slice","sort","stable","drift","DriftsortRun"],"kind":"struct"},"23:9480:6068":{"crate_id":23,"path":["typenum","array","TArr"],"kind":"struct"},"5:1524:5998":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"17:2840:13649":{"crate_id":17,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"18:12962:25637":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:6808:13657":{"crate_id":17,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"18:13854:12876":{"crate_id":18,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:6866:25435":{"crate_id":17,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"7:7414:14998":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:6914:15836":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"12:2566:15981":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"6:505:12294":{"crate_id":6,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:46550:15562":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"18:12886:15746":{"crate_id":18,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"23:612:6077":{"crate_id":23,"path":["typenum","marker_traits","Zero"],"kind":"trait"},"25:87:2341":{"crate_id":25,"path":["const_oid","traits","AssociatedOid"],"kind":"trait"},"7:5271:14505":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"7:6631:14835":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"18:1339:16218":{"crate_id":18,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"12:2539:13989":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"18:11319:39048":{"crate_id":18,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:22880:17868":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"18:12851:15744":{"crate_id":18,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"7:5019:14426":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:41083:16577":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"12:708:16393":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"24:85:2527":{"crate_id":24,"path":["block_buffer","BufferKind"],"kind":"trait"},"5:7821:16549":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"6:6535:220":{"crate_id":6,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"5:3720:5999":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:9463:162":{"crate_id":6,"path":["std","time","Instant"],"kind":"struct"},"7:5230:14484":{"crate_id":7,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"5:5300:12387":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:6487:12320":{"crate_id":6,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:46326:15541":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:41193:16050":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:41152:16044":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:7938:15886":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"5:4368:5998":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"7:7391:14997":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"18:14963:13096":{"crate_id":18,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"19:670:16212":{"crate_id":19,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"10:328:14033":{"crate_id":10,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:8366:16487":{"crate_id":6,"path":["std","io","error","Custom"],"kind":"struct"},"17:5649:13715":{"crate_id":17,"path":["gimli","constants","DwOp"],"kind":"struct"},"18:472:16215":{"crate_id":18,"path":["object","read","any","Segment"],"kind":"struct"},"6:9771:128":{"crate_id":6,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"17:5282:13709":{"crate_id":17,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"21:108:18087":{"crate_id":21,"path":["crypto_common","InnerUser"],"kind":"trait"},"6:8361:16486":{"crate_id":6,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:42515:17691":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"18:11902:12719":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"12:2121:15885":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"6:5870:12320":{"crate_id":6,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"18:15410:13236":{"crate_id":18,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"6:2729:12300":{"crate_id":6,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"18:14127:12936":{"crate_id":18,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:11582:12343":{"crate_id":6,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"6:11281:15204":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"7:4964:14397":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"11:0:2653":{"crate_id":11,"path":["adler"],"kind":"module"},"1:4497:110":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"18:12066:12723":{"crate_id":18,"path":["object","read","elf","version","Version"],"kind":"struct"},"12:2148:16403":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"18:15981:13392":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"18:15573:13290":{"crate_id":18,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"5:7120:12408":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"1:32745:115":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"18:12605:12714":{"crate_id":18,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"12:2228:15920":{"crate_id":12,"path":["hashbrown","table","HashTable"],"kind":"struct"},"18:0:2660":{"crate_id":18,"path":["object"],"kind":"module"},"5:3304:15917":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:6876:13735":{"crate_id":17,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:7907:13840":{"crate_id":17,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:7828:37129":{"crate_id":6,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"1:40100:5991":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"6:12446:763":{"crate_id":6,"path":["std","f64"],"kind":"primitive"},"23:1071:18039":{"crate_id":23,"path":["typenum","private","IsGreaterPrivate"],"kind":"trait"},"18:12335:16280":{"crate_id":18,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"5:3800:12355":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"12:364:12286":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"6:3304:38330":{"crate_id":6,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"18:16209:13469":{"crate_id":18,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"25:235:133":{"crate_id":25,"path":["const_oid","encoder","Encoder"],"kind":"struct"},"6:4994:12308":{"crate_id":6,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"18:14947:13092":{"crate_id":18,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"18:13933:12888":{"crate_id":18,"path":["object","elf","Rel32"],"kind":"struct"},"18:12826:15736":{"crate_id":18,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"18:13890:12883":{"crate_id":18,"path":["object","elf","Sym64"],"kind":"struct"},"1:23352:17416":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:21958:31170":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"7:5450:14588":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"7:497:14091":{"crate_id":7,"path":["libc","unix","rusage"],"kind":"struct"},"1:38620:17585":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"6:2011:18293":{"crate_id":6,"path":["std","error","Indented"],"kind":"struct"},"1:44574:16104":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:22923:18036":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"23:1251:6125":{"crate_id":23,"path":["typenum","type_operators","IsNotEqual"],"kind":"trait"},"5:7086:12392":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:31067:30546":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"1:44565:16103":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"18:11831:12704":{"crate_id":18,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"7:5395:14555":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:32655:6358":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"6:8492:12534":{"crate_id":6,"path":["std","io","util","Empty"],"kind":"struct"},"1:45037:16142":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:42865:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:44218:6012":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"6:8263:15931":{"crate_id":6,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"5:297:2673":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:41677:16070":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"18:10729:12687":{"crate_id":18,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:40831:16028":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"19:651:12543":{"crate_id":19,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"25:180:12525":{"crate_id":25,"path":["const_oid","arcs","RootArcs"],"kind":"struct"},"5:0:309":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:6269:15779":{"crate_id":17,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"18:11114:16235":{"crate_id":18,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"5:1002:5998":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"18:2437:16223":{"crate_id":18,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"6:378:16414":{"crate_id":6,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:44877:16122":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"6:4230:18361":{"crate_id":6,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:4:1271":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:2148:11726":{"crate_id":1,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"1:40854:17639":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"19:735:29699":{"crate_id":19,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"18:13547:16310":{"crate_id":18,"path":["object","read","RelocationMap"],"kind":"struct"},"18:15919:13377":{"crate_id":18,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:6302:15785":{"crate_id":17,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:9423:187":{"crate_id":6,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"18:10167:25494":{"crate_id":18,"path":["object","common","SectionKind"],"kind":"enum"},"17:7168:13761":{"crate_id":17,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:7386:13781":{"crate_id":17,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"23:821:18061":{"crate_id":23,"path":["typenum","private","PrivateXor"],"kind":"trait"},"7:1563:14190":{"crate_id":7,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:10669:157":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"18:15812:13344":{"crate_id":18,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:41133:134":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:2920:13653":{"crate_id":17,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"18:14975:13098":{"crate_id":18,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"18:13181:16307":{"crate_id":18,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"18:12776:16298":{"crate_id":18,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"18:13041:16303":{"crate_id":18,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"1:22462:17786":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"6:5192:18409":{"crate_id":6,"path":["std","panic","always_abort"],"kind":"function"},"6:952:16408":{"crate_id":6,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:7372:13668":{"crate_id":17,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:2450:13625":{"crate_id":17,"path":["gimli","common","Encoding"],"kind":"struct"},"15:165:24506":{"crate_id":15,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"21:125:18091":{"crate_id":21,"path":["crypto_common","InnerIvInit"],"kind":"trait"},"17:5727:12680":{"crate_id":17,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:8482:178":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:40771:16025":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"18:14832:13076":{"crate_id":18,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:5417:13713":{"crate_id":17,"path":["gimli","constants","DwMacro"],"kind":"struct"},"18:11527:16242":{"crate_id":18,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"6:1621:11836":{"crate_id":6,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:44709:16113":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"18:14043:12908":{"crate_id":18,"path":["object","elf","Versym"],"kind":"struct"},"18:16494:12843":{"crate_id":18,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"6:11492:14053":{"crate_id":6,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"6:12433:1188":{"crate_id":6,"path":["std","never"],"kind":"primitive"},"7:473:14080":{"crate_id":7,"path":["libc","unix","utimbuf"],"kind":"struct"},"5:4527:12278":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"18:16656:13584":{"crate_id":18,"path":["object","xcoff","Symbol64"],"kind":"struct"},"23:783:18032":{"crate_id":23,"path":["typenum","private","InternalMarker"],"kind":"trait"},"18:12163:15726":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"4:0:2338":{"crate_id":4,"path":["digest"],"kind":"module"},"6:988:16400":{"crate_id":6,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"4:547:2511":{"crate_id":4,"path":["digest","core_api","TruncSide"],"kind":"enum"},"1:40927:16032":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"18:15679:13313":{"crate_id":18,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:44723:16116":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"5:4163:12355":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"18:11805:16253":{"crate_id":18,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:5125:18403":{"crate_id":6,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"7:5520:14618":{"crate_id":7,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"1:22843:11710":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"17:7838:25440":{"crate_id":17,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"23:1905:18047":{"crate_id":23,"path":["typenum","uint","SetBit"],"kind":"trait"},"18:14284:12973":{"crate_id":18,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:10409:144":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"18:12869:12810":{"crate_id":18,"path":["object","read","pe","import","Import"],"kind":"enum"},"6:1639:15917":{"crate_id":6,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:5298:438":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:11345:239":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:8137:13675":{"crate_id":17,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:3967:12372":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"1:23279:30422":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:42328:30466":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"6:965:16395":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:2146:11725":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:2081:198":{"crate_id":6,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:40986:16035":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"12:1914:15918":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:5060:13701":{"crate_id":17,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:2620:13639":{"crate_id":17,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:5991:16463":{"crate_id":6,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"6:2518:18310":{"crate_id":6,"path":["std","fs","exists"],"kind":"function"},"6:12035:15962":{"crate_id":6,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"6:946:12396":{"crate_id":6,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"6:8287:15922":{"crate_id":6,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:3691:147":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"18:15655:13311":{"crate_id":18,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:40040:215":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"18:15946:13384":{"crate_id":18,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"18:11971:16259":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:22829:17867":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"1:46258:15533":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:44788:16119":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"18:15496:13282":{"crate_id":18,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:41161:16045":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:677:16418":{"crate_id":6,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:3320:17591":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"6:2551:2584":{"crate_id":6,"path":["std","io"],"kind":"module"},"1:46497:15559":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"23:9072:5964":{"crate_id":23,"path":["typenum","int","NInt"],"kind":"struct"},"6:8100:18283":{"crate_id":6,"path":["std","env","VarError"],"kind":"enum"},"19:659:16208":{"crate_id":19,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:908:16214":{"crate_id":17,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"5:985:12363":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"4:366:5974":{"crate_id":4,"path":["digest","core_api","XofReaderCore"],"kind":"trait"},"18:10564:12682":{"crate_id":18,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:14366:2009":{"crate_id":1,"path":["core","core_arch","arch","x86_64"],"kind":"module"},"18:15989:13394":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"18:14738:13059":{"crate_id":18,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"5:7601:11836":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"5:5574:18141":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"19:0:2661":{"crate_id":19,"path":["memchr"],"kind":"module"},"23:2525:2345":{"crate_id":23,"path":["typenum","generated","consts","U32"],"kind":"type_alias"},"17:3441:13682":{"crate_id":17,"path":["gimli","arch","LoongArch"],"kind":"struct"},"18:12920:15748":{"crate_id":18,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"18:13082:16236":{"crate_id":18,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"17:5144:13704":{"crate_id":17,"path":["gimli","constants","DwCc"],"kind":"struct"},"18:13781:12858":{"crate_id":18,"path":["object","elf","Ident"],"kind":"struct"},"6:3656:11895":{"crate_id":6,"path":["std","io","Write"],"kind":"trait"},"1:42244:15494":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"7:1530:14167":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"7:5570:14638":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"18:12176:15727":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"19:548:153":{"crate_id":19,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:41286:16058":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"18:11777:15717":{"crate_id":18,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"7:1494:14151":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"7:6623:14834":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"18:14845:13078":{"crate_id":18,"path":["object","macho","UuidCommand"],"kind":"struct"},"18:14599:13024":{"crate_id":18,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"12:1023:16402":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"18:2378:25567":{"crate_id":18,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:10983:15926":{"crate_id":6,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"7:1727:14288":{"crate_id":7,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"7:5205:14473":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:41143:16042":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:2840:202":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:7178:18452":{"crate_id":6,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:8798:17677":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"7:5186:14461":{"crate_id":7,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:5863:220":{"crate_id":6,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"18:16019:13400":{"crate_id":18,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"18:10274:25497":{"crate_id":18,"path":["object","common","SymbolScope"],"kind":"enum"},"7:4902:14367":{"crate_id":7,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:7358:13667":{"crate_id":17,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"18:10296:25498":{"crate_id":18,"path":["object","common","RelocationKind"],"kind":"enum"},"1:3001:258":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"17:7949:13671":{"crate_id":17,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:5734:16459":{"crate_id":6,"path":["std","process","Stdio"],"kind":"struct"},"12:2559:13993":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"12:1158:16407":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"6:3039:12307":{"crate_id":6,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:23341:16016":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"7:5088:14452":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:8028:13842":{"crate_id":17,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:4485:16552":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"7:8014:15097":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:6173:15771":{"crate_id":17,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"18:16332:13505":{"crate_id":18,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"23:1272:6103":{"crate_id":23,"path":["typenum","type_operators","SquareRoot"],"kind":"trait"},"23:1198:6082":{"crate_id":23,"path":["typenum","type_operators","PartialDiv"],"kind":"trait"},"6:3536:16069":{"crate_id":6,"path":["std","io","util","Repeat"],"kind":"struct"},"1:9433:16560":{"crate_id":1,"path":["core","panic","panic_info","PanicMessage"],"kind":"struct"},"1:44309:6006":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"7:491:14088":{"crate_id":7,"path":["libc","unix","rlimit"],"kind":"struct"},"18:15586:13295":{"crate_id":18,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:9909:92":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"7:8249:15110":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:5628:16456":{"crate_id":6,"path":["std","process","ChildStdin"],"kind":"struct"},"6:2323:139":{"crate_id":6,"path":["std","fs","File"],"kind":"struct"},"17:8014:13674":{"crate_id":17,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"18:16198:13468":{"crate_id":18,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:36689:13802":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:44088:5997":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"21:56:2506":{"crate_id":21,"path":["crypto_common","Block"],"kind":"type_alias"},"11:36:13995":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"6:2505:18308":{"crate_id":6,"path":["std","fs","read_dir"],"kind":"function"},"1:40782:30457":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:45215:219":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"23:1202:6078":{"crate_id":23,"path":["typenum","type_operators","Min"],"kind":"trait"},"1:32620:16572":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:21929:31166":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"17:2486:13633":{"crate_id":17,"path":["gimli","common","Register"],"kind":"struct"},"7:5349:14534":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"19:613:39055":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"23:9104:5967":{"crate_id":23,"path":["typenum","int","Z0"],"kind":"struct"},"7:5471:14603":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"6:6225:220":{"crate_id":6,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"18:11926:12721":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"7:553:14128":{"crate_id":7,"path":["libc","unix","linger"],"kind":"struct"},"18:5305:16228":{"crate_id":18,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"6:9749:16482":{"crate_id":6,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"6:6400:12319":{"crate_id":6,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"18:14358:12989":{"crate_id":18,"path":["object","macho","MachHeader32"],"kind":"struct"},"18:583:16216":{"crate_id":18,"path":["object","read","any","Comdat"],"kind":"struct"},"12:2301:15885":{"crate_id":12,"path":["hashbrown","table","Entry"],"kind":"enum"},"7:6462:14738":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:41214:16052":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"18:13385:15753":{"crate_id":18,"path":["object","read","ObjectMap"],"kind":"struct"},"1:2713:104":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"18:14346:12987":{"crate_id":18,"path":["object","macho","FatArch64"],"kind":"struct"},"17:5742:12681":{"crate_id":17,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"5:1586:15915":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:8675:14979":{"crate_id":6,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"23:1131:18042":{"crate_id":23,"path":["typenum","private","IsGreaterOrEqualPrivate"],"kind":"trait"},"1:15:2626":{"crate_id":1,"path":["core","write"],"kind":"macro"},"7:1569:14192":{"crate_id":7,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:13218:16562":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:234:226":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:9244:18449":{"crate_id":6,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:22060:17780":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"18:14886:13083":{"crate_id":18,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:5113:13703":{"crate_id":17,"path":["gimli","constants","DwId"],"kind":"struct"},"12:881:16401":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:32645:16020":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"17:4404:13691":{"crate_id":17,"path":["gimli","constants","DwTag"],"kind":"struct"},"7:1514:14159":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:5172:13705":{"crate_id":17,"path":["gimli","constants","DwInl"],"kind":"struct"},"7:8255:15111":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:41262:12561":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"17:6970:13660":{"crate_id":17,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"12:785:15915":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"18:10630:12684":{"crate_id":18,"path":["object","endian","U64Bytes"],"kind":"struct"},"24:151:138":{"crate_id":24,"path":["block_buffer","Error"],"kind":"struct"},"1:44261:16086":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"17:7959:15889":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:3522:6042":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:6822:16467":{"crate_id":6,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:2704:13643":{"crate_id":17,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:43884:6028":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"10:445:24419":{"crate_id":10,"path":["miniz_oxide","MZError"],"kind":"enum"},"21:123:18090":{"crate_id":21,"path":["crypto_common","InnerInit"],"kind":"trait"},"10:0:2652":{"crate_id":10,"path":["miniz_oxide"],"kind":"module"},"18:12570:16286":{"crate_id":18,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:13448:120":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"7:5507:14617":{"crate_id":7,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"1:47513:11690":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"5:7718:12382":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:11268:15203":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"18:12371:12727":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"25:16:2685":{"crate_id":25,"path":["const_oid","arcs","Arcs"],"kind":"struct"},"7:4829:14321":{"crate_id":7,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:14148:12316":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:46837:15591":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:10450:11896":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"17:546:15755":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:23243:15251":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:8052:12339":{"crate_id":6,"path":["std","thread","Thread"],"kind":"struct"},"12:1049:16403":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:3317:17590":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"19:643:12543":{"crate_id":19,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:47008:15598":{"crate_id":1,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"7:8267:15113":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:10660:16501":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"18:13983:12895":{"crate_id":18,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"18:10141:25493":{"crate_id":18,"path":["object","common","BinaryFormat"],"kind":"enum"},"5:1370:15885":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:6440:25432":{"crate_id":17,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"4:361:5972":{"crate_id":4,"path":["digest","core_api","FixedOutputCore"],"kind":"trait"},"18:11432:25519":{"crate_id":18,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"18:16145:13451":{"crate_id":18,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"7:6680:14854":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"23:613:195":{"crate_id":23,"path":["typenum","marker_traits","Ord"],"kind":"trait"},"1:41036:16575":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:47376:15637":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"22:96:6046":{"crate_id":22,"path":["hybrid_array","traits","ArraySize"],"kind":"trait"},"1:6191:15991":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"18:317:16213":{"crate_id":18,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:47493:6472":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"18:13266:25507":{"crate_id":18,"path":["object","read","ObjectKind"],"kind":"enum"},"23:2813:2516":{"crate_id":23,"path":["typenum","generated","consts","U128"],"kind":"type_alias"},"1:41659:12426":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"23:1007:18074":{"crate_id":23,"path":["typenum","private","PrivateMin"],"kind":"trait"},"18:12976:12779":{"crate_id":18,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:42602:5999":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:11803:6005":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"18:13145:16304":{"crate_id":18,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"5:1595:16408":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:4812:18356":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"18:11706:16249":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:7807:39039":{"crate_id":17,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:13969:205":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"5:1386:16403":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"5:2173:16539":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"17:6942:15838":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"5:1605:16393":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"18:15024:13111":{"crate_id":18,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:4566:16451":{"crate_id":6,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"6:10954:16523":{"crate_id":6,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"1:7753:17644":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"18:12056:12722":{"crate_id":18,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"23:8998:5965":{"crate_id":23,"path":["typenum","bit","B0"],"kind":"struct"},"18:16171:13459":{"crate_id":18,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:12461:13":{"crate_id":6,"path":["std","fn"],"kind":"primitive"},"7:5007:14420":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:8804:6660":{"crate_id":6,"path":["std","path","State"],"kind":"enum"},"23:1241:6124":{"crate_id":23,"path":["typenum","type_operators","IsLessOrEqual"],"kind":"trait"},"7:8330:15127":{"crate_id":7,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"18:11958:16258":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"19:515:12546":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"7:5366:14539":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"18:11617:16236":{"crate_id":18,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:41650:16069":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:5757:13717":{"crate_id":17,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:7508:15880":{"crate_id":17,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"19:581:11789":{"crate_id":19,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"7:8343:15131":{"crate_id":7,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:46468:15550":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:47548:11692":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:12973:16095":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:8626:15904":{"crate_id":17,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:38730:17587":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"23:1231:6123":{"crate_id":23,"path":["typenum","type_operators","IsGreater"],"kind":"trait"},"1:34467:17582":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:4810:13694":{"crate_id":17,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:46808:15590":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"4:368:2513":{"crate_id":4,"path":["digest","core_api","VariableOutputCore"],"kind":"trait"},"5:212:12354":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"18:13095:12785":{"crate_id":18,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"12:1880:5998":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"23:2555:2812":{"crate_id":23,"path":["typenum","generated","consts","U42"],"kind":"type_alias"},"5:789:119":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:6123:13662":{"crate_id":17,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"5:6711:12372":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"7:578:14141":{"crate_id":7,"path":["libc","unix","servent"],"kind":"struct"},"1:44694:16107":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:42978:98":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"7:479:14083":{"crate_id":7,"path":["libc","unix","timeval"],"kind":"struct"},"1:42162:170":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:5357:16558":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"7:6777:14886":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"17:4241:13689":{"crate_id":17,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:11167:12342":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:8427:6356":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"19:521:29701":{"crate_id":19,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:1645:15918":{"crate_id":6,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:6713:16342":{"crate_id":17,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:23235:15250":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:12335:6018":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"6:10703:12338":{"crate_id":6,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"6:4677:18382":{"crate_id":6,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"7:5635:14670":{"crate_id":7,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"18:10418:25502":{"crate_id":18,"path":["object","common","SectionFlags"],"kind":"enum"},"18:15121:13124":{"crate_id":18,"path":["object","macho","Nlist64"],"kind":"struct"},"6:10568:38931":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"1:43674:16082":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"18:10977:39047":{"crate_id":18,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:41411:16061":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"22:5356:6035":{"crate_id":22,"path":["hybrid_array","iter","TryFromIteratorError"],"kind":"struct"},"6:10780:16442":{"crate_id":6,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"1:42554:226":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"17:2748:13645":{"crate_id":17,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"18:14627:13029":{"crate_id":18,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"5:4560:12278":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"6:12435:1893":{"crate_id":6,"path":["std","unit"],"kind":"primitive"},"1:3005:257":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"18:15439:13247":{"crate_id":18,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"7:5249:14494":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"5:1616:16394":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"18:14393:12993":{"crate_id":18,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:1083:15885":{"crate_id":6,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:11149:2676":{"crate_id":6,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"18:10549:12681":{"crate_id":18,"path":["object","endian","BigEndian"],"kind":"struct"},"17:7282:15867":{"crate_id":17,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:2343:11727":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:3434:17596":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:42754:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:11787:16474":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:43652:157":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"6:7498:38003":{"crate_id":6,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"18:11630:12706":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"18:12249:16273":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:44037:16582":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:6953:15839":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:22709:17864":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"6:8014:15135":{"crate_id":6,"path":["std","thread","local","AccessError"],"kind":"struct"},"18:15887:13366":{"crate_id":18,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"18:14796:13071":{"crate_id":18,"path":["object","macho","DylibReference"],"kind":"struct"},"18:14140:12937":{"crate_id":18,"path":["object","elf","HashHeader"],"kind":"struct"},"1:40080:216":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"15:40:12858":{"crate_id":15,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"7:5420:14567":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"5:2256:12295":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:44137:6016":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"7:5107:14453":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"18:3720:16225":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:45298:16585":{"crate_id":1,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"16:0:2658":{"crate_id":16,"path":["addr2line"],"kind":"module"},"17:6852:15832":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"7:7332:14963":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"18:12359:16282":{"crate_id":18,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"18:14640:13030":{"crate_id":18,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:3566:12278":{"crate_id":6,"path":["std","io","Guard"],"kind":"struct"},"8:32:24406":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"18:15090:13118":{"crate_id":18,"path":["object","macho","NoteCommand"],"kind":"struct"},"18:15769:13336":{"crate_id":18,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:7337:13777":{"crate_id":17,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"7:1696:14276":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"18:14312:12980":{"crate_id":18,"path":["object","macho","DyldSubCacheEntryV2"],"kind":"struct"},"12:835:16395":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:7818:31264":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:47434:15639":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"7:4842:14331":{"crate_id":7,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:3325:17592":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"12:1085:39005":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:22058:18036":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:23103:16006":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:8000:13673":{"crate_id":17,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:41246:16055":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"6:7954:12335":{"crate_id":6,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:2495:18303":{"crate_id":6,"path":["std","fs","canonicalize"],"kind":"function"},"6:10390:16427":{"crate_id":6,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"17:6462:25433":{"crate_id":17,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"25:89:2686":{"crate_id":25,"path":["const_oid","traits","DynAssociatedOid"],"kind":"trait"},"12:2366:16413":{"crate_id":12,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"18:15701:13317":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:6749:13728":{"crate_id":17,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"18:16668:13586":{"crate_id":18,"path":["object","xcoff","FileAux32"],"kind":"struct"},"17:4120:13686":{"crate_id":17,"path":["gimli","constants","DwSect"],"kind":"struct"},"7:5224:14481":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"19:113:29691":{"crate_id":19,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:2736:113":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"6:5313:16452":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"7:6740:14875":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"7:4970:14399":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:6794:15828":{"crate_id":17,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"18:12648:12766":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"23:1168:6119":{"crate_id":23,"path":["typenum","type_operators","Same"],"kind":"trait"},"18:14299:12978":{"crate_id":18,"path":["object","macho","DyldSubCacheEntryV1"],"kind":"struct"},"5:6157:12387":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:22174:18036":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"7:5562:14636":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:9450:12330":{"crate_id":6,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"6:12445:747":{"crate_id":6,"path":["std","f32"],"kind":"primitive"},"7:5428:14572":{"crate_id":7,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:2052:11763":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:10069:811":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"7:1667:14265":{"crate_id":7,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"7:5311:14525":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:11734:6007":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"6:9209:11836":{"crate_id":6,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"12:2380:5998":{"crate_id":12,"path":["hashbrown","table","Iter"],"kind":"struct"},"5:7645:11836":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:8233:25442":{"crate_id":17,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:32656:244":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:46358:15543":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:8519:18312":{"crate_id":6,"path":["std","io","SeekFrom"],"kind":"enum"},"6:1869:16426":{"crate_id":6,"path":["std","env","VarsOs"],"kind":"struct"},"23:9535:5988":{"crate_id":23,"path":["typenum","Greater"],"kind":"struct"},"18:13028:16302":{"crate_id":18,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"1:23210:16011":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:42506:16578":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"18:13157:16305":{"crate_id":18,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"1:3239:118":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:22457:18036":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"23:1276:6084":{"crate_id":23,"path":["typenum","type_operators","Gcd"],"kind":"trait"},"18:16385:13514":{"crate_id":18,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:3665:37115":{"crate_id":6,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"7:4914:14376":{"crate_id":7,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:6984:13677":{"crate_id":17,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"6:4015:16448":{"crate_id":6,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:6256:15778":{"crate_id":17,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:46748:15572":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:8209:15926":{"crate_id":6,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:40998:12688":{"crate_id":1,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"1:41669:15481":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"18:14507:13010":{"crate_id":18,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:2610:11710":{"crate_id":1,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"18:13757:12857":{"crate_id":18,"path":["object","elf","FileHeader64"],"kind":"struct"},"6:8586:18349":{"crate_id":6,"path":["std","net","Shutdown"],"kind":"enum"},"19:635:12563":{"crate_id":19,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"18:11421:16239":{"crate_id":18,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:8892:5998":{"crate_id":6,"path":["std","path","Iter"],"kind":"struct"},"1:31003:6037":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"19:698:15701":{"crate_id":19,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"18:10097:25491":{"crate_id":18,"path":["object","common","SubArchitecture"],"kind":"enum"},"17:6028:13658":{"crate_id":17,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"4:320:5977":{"crate_id":4,"path":["digest","core_api","wrapper","CoreProxy"],"kind":"trait"},"18:13290:12638":{"crate_id":18,"path":["object","read","SectionIndex"],"kind":"struct"},"1:33185:13796":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"18:14405:12995":{"crate_id":18,"path":["object","macho","LcStr"],"kind":"struct"},"3:0:2649":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"12:2545:13990":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"18:11653:12708":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:4766:13693":{"crate_id":17,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:11736:6660":{"crate_id":6,"path":["std","sys","thread_local","fast_local","eager","State"],"kind":"enum"},"17:155:12281":{"crate_id":17,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"17:8585:16385":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:11300:15221":{"crate_id":6,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"18:15621:13299":{"crate_id":18,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"5:5424:12389":{"crate_id":5,"path":["alloc","rc","UniqueRcUninit"],"kind":"struct"},"1:10443:120":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:46290:15535":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:2018:794":{"crate_id":6,"path":["std","ffi"],"kind":"module"},"1:44097:5995":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:44359:16093":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:4330:18377":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"18:11878:12714":{"crate_id":18,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"24:143:6055":{"crate_id":24,"path":["block_buffer","Lazy"],"kind":"struct"},"15:187:24510":{"crate_id":15,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:11817:6001":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:47082:15600":{"crate_id":1,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"1:3613:211":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"18:16812:13619":{"crate_id":18,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"18:15286:13133":{"crate_id":18,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"5:4298:12278":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"6:532:12295":{"crate_id":6,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:46970:15596":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"18:322:16214":{"crate_id":18,"path":["object","read","util","DebugLen"],"kind":"struct"},"12:0:2654":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"1:2222:189":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"19:680:15697":{"crate_id":19,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:22078:15244":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:46372:15544":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"25:0:2340":{"crate_id":25,"path":["const_oid"],"kind":"module"},"1:45203:15525":{"crate_id":1,"path":["core","future","async_drop","Noop"],"kind":"struct"},"12:772:15914":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:3686:254":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"5:1636:16537":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:12406:18259":{"crate_id":6,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"5:5971:251":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:4267:13690":{"crate_id":17,"path":["gimli","constants","DwChildren"],"kind":"struct"},"6:6950:233":{"crate_id":6,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"25:290:2342":{"crate_id":25,"path":["const_oid","ObjectIdentifier"],"kind":"struct"},"23:1190:6075":{"crate_id":23,"path":["typenum","type_operators","Cmp"],"kind":"trait"},"5:3338:15916":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"12:328:15911":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"18:12787:12768":{"crate_id":18,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"4:355:2508":{"crate_id":4,"path":["digest","core_api","Buffer"],"kind":"type_alias"},"5:4133:12372":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"18:13306:12804":{"crate_id":18,"path":["object","read","SymbolIndex"],"kind":"struct"},"18:12860:15745":{"crate_id":18,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:5111:18402":{"crate_id":6,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"18:15315:13153":{"crate_id":18,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:45266:16583":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:903:16213":{"crate_id":17,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"1:6814:15993":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"23:1151:18058":{"crate_id":23,"path":["typenum","private","PrivateSquareRoot"],"kind":"trait"},"19:507:12543":{"crate_id":19,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"5:3456:12396":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"7:5025:14429":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:1489:156":{"crate_id":6,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"6:1617:5998":{"crate_id":6,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:41276:16057":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:44208:6011":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:7752:17643":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"5:885:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:23531:15274":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"17:8179:13849":{"crate_id":17,"path":["gimli","read","UnitOffset"],"kind":"struct"},"5:1577:15914":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"6:12451:914":{"crate_id":6,"path":["std","i64"],"kind":"primitive"},"5:7637:11836":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"18:10368:25500":{"crate_id":18,"path":["object","common","FileFlags"],"kind":"enum"},"6:11088:37799":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:7009:15998":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"18:11358:25517":{"crate_id":18,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"18:15876:13362":{"crate_id":18,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"25:245:6660":{"crate_id":25,"path":["const_oid","encoder","State"],"kind":"enum"},"19:481:15692":{"crate_id":19,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:32714:11777":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:7223:15854":{"crate_id":17,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"7:545:14123":{"crate_id":7,"path":["libc","unix","winsize"],"kind":"struct"},"6:6018:16464":{"crate_id":6,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:44740:16117":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"0:0:2036":{"crate_id":0,"path":["sha2"],"kind":"module"},"12:1907:15917":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:42441:173":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"7:4896:14364":{"crate_id":7,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"7:5069:14451":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:6098:16312":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"18:14902:13085":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"7:6748:14876":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"4:476:2670":{"crate_id":4,"path":["digest","VariableOutput"],"kind":"trait"},"17:8298:15893":{"crate_id":17,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"6:8238:140":{"crate_id":6,"path":["std","fs","FileType"],"kind":"struct"},"6:9481:15215":{"crate_id":6,"path":["std","time","SystemTime"],"kind":"struct"},"17:3987:12586":{"crate_id":17,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"6:573:12296":{"crate_id":6,"path":["std","thread","Packet"],"kind":"struct"},"5:6927:12355":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:46439:15548":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"7:0:1013":{"crate_id":7,"path":["libc"],"kind":"module"},"17:8043:39033":{"crate_id":17,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"7:5057:14442":{"crate_id":7,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"7:5288:14516":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"18:15963:13388":{"crate_id":18,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"7:8319:15126":{"crate_id":7,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:5473:203":{"crate_id":6,"path":["std","path","Path"],"kind":"struct"},"18:16283:13490":{"crate_id":18,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"18:10793:12569":{"crate_id":18,"path":["object","read","read_cache","ReadCacheRange"],"kind":"struct"},"6:11383:15223":{"crate_id":6,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:2969:17386":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:2992:77":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"4:363:5973":{"crate_id":4,"path":["digest","core_api","ExtendableOutputCore"],"kind":"trait"},"7:6652:14847":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:6837:16353":{"crate_id":17,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"21:1180:12542":{"crate_id":21,"path":["crypto_common","InvalidLength"],"kind":"struct"},"7:485:14086":{"crate_id":7,"path":["libc","unix","timespec"],"kind":"struct"},"18:11733:25539":{"crate_id":18,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"5:3851:15922":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:2640:13640":{"crate_id":17,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:628:18253":{"crate_id":6,"path":["std","ascii","AsciiExt"],"kind":"trait"},"7:465:14075":{"crate_id":7,"path":["libc","unix","group"],"kind":"struct"},"17:6781:13731":{"crate_id":17,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"7:5629:14667":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"6:8279:16485":{"crate_id":6,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"18:16187:13463":{"crate_id":18,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:34082:17577":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:45211:164":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:10454:11898":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:3676:5992":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:9470:16561":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:22937:17862":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"1:2710:103":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"7:5648:14676":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"7:6770:14885":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"12:488:154":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"7:5341:14533":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"7:5196:14468":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"18:10938:39043":{"crate_id":18,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"18:12798:25636":{"crate_id":18,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"10:500:14056":{"crate_id":10,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"22:31:12278":{"crate_id":22,"path":["hybrid_array","from_fn","Guard"],"kind":"struct"},"7:1657:14259":{"crate_id":7,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"5:1214:36600":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"18:15557:13289":{"crate_id":18,"path":["object","pe","Guid"],"kind":"struct"},"18:13398:12807":{"crate_id":18,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:4824:14992":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"6:0:1733":{"crate_id":6,"path":["std"],"kind":"module"},"18:14001:12903":{"crate_id":18,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"6:2477:11699":{"crate_id":6,"path":["std","fs","metadata"],"kind":"function"},"1:7014:2508":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:4893:11909":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:31035:6038":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"18:10663:12685":{"crate_id":18,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:11292:37830":{"crate_id":6,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"12:1005:15885":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"18:10823:12690":{"crate_id":18,"path":["object","read","util","ByteString"],"kind":"struct"},"18:14416:12996":{"crate_id":18,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"7:5658:14677":{"crate_id":7,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"6:11073:16459":{"crate_id":6,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"18:16701:13593":{"crate_id":18,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"7:4890:14362":{"crate_id":7,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"18:13909:12884":{"crate_id":18,"path":["object","elf","Syminfo32"],"kind":"struct"},"18:16595:12861":{"crate_id":18,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"18:16159:13457":{"crate_id":18,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:41237:16054":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"18:13361:12806":{"crate_id":18,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:45324:16146":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"7:6480:14750":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"12:830:16408":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"7:6823:14902":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:3375:13798":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"6:8909:15939":{"crate_id":6,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:23465:15268":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"17:7969:15890":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"7:4881:14357":{"crate_id":7,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"18:11222:16236":{"crate_id":18,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"7:7539:15063":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"7:1500:14154":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"12:1580:16409":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"18:12673:16287":{"crate_id":18,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:23294:30437":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:39968:6041":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"5:3297:5998":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:4218:18358":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"6:11353:162":{"crate_id":6,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"18:14099:12926":{"crate_id":18,"path":["object","elf","Vernaux"],"kind":"struct"},"1:23410:15263":{"crate_id":1,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"18:15896:13369":{"crate_id":18,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"23:1051:18038":{"crate_id":23,"path":["typenum","private","IsEqualPrivate"],"kind":"trait"},"17:2724:13644":{"crate_id":17,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"18:16241:13484":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"7:6723:14871":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"1:4827:12418":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:8034:15136":{"crate_id":6,"path":["std","thread","ThreadId"],"kind":"struct"},"17:6111:15766":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:3347:16438":{"crate_id":6,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:3481:2551":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:4777:18400":{"crate_id":6,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:10390:226":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"6:2242:129":{"crate_id":6,"path":["std","ffi","os_str","Display"],"kind":"struct"},"18:14269:12969":{"crate_id":18,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:2435:24569":{"crate_id":17,"path":["gimli","common","Vendor"],"kind":"enum"},"5:6578:18159":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"5:1415:16407":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"18:13945:12891":{"crate_id":18,"path":["object","elf","Rela32"],"kind":"struct"},"1:42450:5998":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"6:982:16398":{"crate_id":6,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"7:7548:15066":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:40130:16574":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"18:14773:13070":{"crate_id":18,"path":["object","macho","DylibModule64"],"kind":"struct"},"23:1279:6081":{"crate_id":23,"path":["typenum","type_operators","ToInt"],"kind":"trait"},"6:4346:18379":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:12989:16098":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:10411:16514":{"crate_id":6,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"6:3074:138":{"crate_id":6,"path":["std","io","error","Error"],"kind":"struct"},"1:46579:15563":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:46632:15566":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:12452:895":{"crate_id":6,"path":["std","i128"],"kind":"primitive"},"5:7774:15987":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:3490:142":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"18:13222:25506":{"crate_id":18,"path":["object","read","FileKind"],"kind":"enum"},"1:43127:11898":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"18:16786:13615":{"crate_id":18,"path":["object","xcoff","StatAux"],"kind":"struct"},"1:13994:16568":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"7:5282:14513":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"7:6521:14771":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"5:3694:182":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:0:510":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"18:15997:13395":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:8756:15194":{"crate_id":6,"path":["std","path","Prefix"],"kind":"enum"},"17:7462:16355":{"crate_id":17,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"18:12583:12764":{"crate_id":18,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:44545:16101":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"5:7545:15978":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:12028:15962":{"crate_id":6,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:7424:25438":{"crate_id":17,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"7:7469:15011":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:4208:18357":{"crate_id":6,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"6:8549:16061":{"crate_id":6,"path":["std","io","Take"],"kind":"struct"},"1:40137:15348":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:10661:153":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"18:14152:12940":{"crate_id":18,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:3072:226":{"crate_id":6,"path":["std","io","error","Result"],"kind":"type_alias"},"7:6882:14914":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:6144:25430":{"crate_id":17,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"25:284:15879":{"crate_id":25,"path":["const_oid","parser","Parser"],"kind":"struct"},"18:16399:13517":{"crate_id":18,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:8267:13858":{"crate_id":17,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:12441:1831":{"crate_id":6,"path":["std","tuple"],"kind":"primitive"},"18:12191:15728":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"23:2573:2346":{"crate_id":23,"path":["typenum","generated","consts","U48"],"kind":"type_alias"},"18:11606:12714":{"crate_id":18,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:47455:15640":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"18:12816:12773":{"crate_id":18,"path":["object","read","pe","export","Export"],"kind":"struct"},"6:3445:16443":{"crate_id":6,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:2660:13641":{"crate_id":17,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:34813:13801":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"4:472:2669":{"crate_id":4,"path":["digest","ExtendableOutputReset"],"kind":"trait"},"1:41635:16067":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:41056:16576":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:22815:18036":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"5:4997:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:7259:15866":{"crate_id":17,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"21:114:18088":{"crate_id":21,"path":["crypto_common","KeyInit"],"kind":"trait"},"7:1690:14275":{"crate_id":7,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"7:6437:14733":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"7:7986:15094":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"18:15418:13239":{"crate_id":18,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"18:13818:12871":{"crate_id":18,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:44608:16028":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"18:11457:12702":{"crate_id":18,"path":["object","read","archive","ArchiveOffset"],"kind":"struct"},"1:10090:32991":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:2332:18295":{"crate_id":6,"path":["std","fs","read_to_string"],"kind":"function"},"17:7980:13672":{"crate_id":17,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"6:9185:15205":{"crate_id":6,"path":["std","process","ExitCode"],"kind":"struct"},"7:6876:14913":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"23:1261:6092":{"crate_id":23,"path":["typenum","type_operators","IsGreaterOrEqual"],"kind":"trait"},"1:3697:17593":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"12:1564:24500":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:44900:16130":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:23187:15246":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"18:12280:16274":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"12:2551:39011":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:3703:17595":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:4873:13696":{"crate_id":17,"path":["gimli","constants","DwDs"],"kind":"struct"},"24:135:2504":{"crate_id":24,"path":["block_buffer","Eager"],"kind":"struct"},"18:11998:16261":{"crate_id":18,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"7:4976:14402":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"6:12447:742":{"crate_id":6,"path":["std","f128"],"kind":"primitive"},"18:13871:12878":{"crate_id":18,"path":["object","elf","Sym32"],"kind":"struct"},"5:3309:37097":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"6:2751:16436":{"crate_id":6,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"5:6041:12372":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:14205:152":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"23:9598:5961":{"crate_id":23,"path":["typenum","uint","UInt"],"kind":"struct"},"6:10283:16075":{"crate_id":6,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"17:8528:15897":{"crate_id":17,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"18:13209:138":{"crate_id":18,"path":["object","read","Error"],"kind":"struct"},"6:8898:15202":{"crate_id":6,"path":["std","path","Ancestors"],"kind":"struct"},"7:6599:14822":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"18:16132:13445":{"crate_id":18,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:32743:11776":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"1:32624:13837":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"6:9313:116":{"crate_id":6,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:13877:16048":{"crate_id":1,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"18:14031:12907":{"crate_id":18,"path":["object","elf","Dyn64"],"kind":"struct"},"15:202:18146":{"crate_id":15,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:47533:11691":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"5:7537:11836":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:4539:17616":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"6:8115:16481":{"crate_id":6,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:3599:15181":{"crate_id":6,"path":["std","io","Read"],"kind":"trait"},"7:532:14117":{"crate_id":7,"path":["libc","unix","iovec"],"kind":"struct"},"6:8029:16477":{"crate_id":6,"path":["std","thread","Builder"],"kind":"struct"},"23:1195:6093":{"crate_id":23,"path":["typenum","type_operators","Len"],"kind":"trait"},"18:13570:25510":{"crate_id":18,"path":["object","read","CompressionFormat"],"kind":"enum"},"6:11953:16448":{"crate_id":6,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:13837:16564":{"crate_id":1,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"12:434:39006":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"18:13554:12815":{"crate_id":18,"path":["object","read","RelocationMapEntry"],"kind":"struct"},"6:2493:18302":{"crate_id":6,"path":["std","fs","read_link"],"kind":"function"},"5:6178:18149":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:7789:39037":{"crate_id":17,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:42828:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"18:12762:16297":{"crate_id":18,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:892:5999":{"crate_id":6,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"18:11503:12703":{"crate_id":18,"path":["object","read","archive","ArchiveSymbol"],"kind":"struct"},"1:23373:18036":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"7:1643:14248":{"crate_id":7,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:4822:14990":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"17:3834:13685":{"crate_id":17,"path":["gimli","arch","X86"],"kind":"struct"},"17:5255:13708":{"crate_id":17,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:43120:11896":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"7:5051:14440":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"18:13798:12861":{"crate_id":18,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:23321:16013":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:41435:16063":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:43664:6660":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"18:15852:13355":{"crate_id":18,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"7:6443:14736":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:7842:37156":{"crate_id":6,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"1:2746:11768":{"crate_id":1,"path":["core","clone","CloneToUninit"],"kind":"trait"},"1:44441:16096":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:46535:15561":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:8483:13895":{"crate_id":17,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:39888:17600":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:12438:335":{"crate_id":6,"path":["std","array"],"kind":"primitive"},"18:12749:16296":{"crate_id":18,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:44237:15518":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"18:15836:13353":{"crate_id":18,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"6:7392:12332":{"crate_id":6,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"18:12149:15725":{"crate_id":18,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:45059:131":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"6:10477:18433":{"crate_id":6,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"1:41008:17652":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:34149:17579":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:2506:13634":{"crate_id":17,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"5:7259:12412":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:6502:24541":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"23:1184:6080":{"crate_id":23,"path":["typenum","type_operators","Pow"],"kind":"trait"},"7:4937:14385":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:7765:13819":{"crate_id":17,"path":["gimli","read","op","Piece"],"kind":"struct"},"18:13958:12893":{"crate_id":18,"path":["object","elf","Rel64"],"kind":"struct"},"1:45083:16143":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"25:11:72":{"crate_id":25,"path":["const_oid","arcs","Arc"],"kind":"type_alias"},"1:46617:15565":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:8096:16384":{"crate_id":17,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"18:13592:12820":{"crate_id":18,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:42516:17690":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"7:4816:14311":{"crate_id":7,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:47559:11693":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"7:5494:14611":{"crate_id":7,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"6:3400:16440":{"crate_id":6,"path":["std","io","stdio","Stdout"],"kind":"struct"},"18:15531:13283":{"crate_id":18,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"7:4805:14303":{"crate_id":7,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"15:220:13982":{"crate_id":15,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"7:8302:15121":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"18:11065:16234":{"crate_id":18,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:6159:15768":{"crate_id":17,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"7:6731:14872":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"18:2227:16219":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"6:8638:16495":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:43408:30545":{"crate_id":1,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"18:3503:16224":{"crate_id":18,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"7:4792:14294":{"crate_id":7,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:40060:214":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"18:10031:25490":{"crate_id":18,"path":["object","common","Architecture"],"kind":"enum"},"14:0:2656":{"crate_id":14,"path":["std_detect"],"kind":"module"},"6:12052:12349":{"crate_id":6,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"5:6525:12395":{"crate_id":5,"path":["alloc","sync","UniqueArcUninit"],"kind":"struct"},"6:4146:18353":{"crate_id":6,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:43134:11899":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"4:484:2671":{"crate_id":4,"path":["digest","VariableOutputReset"],"kind":"trait"},"1:23221:30429":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"4:519:5976":{"crate_id":4,"path":["digest","core_api","rt_variable","RtVariableCoreWrapper"],"kind":"struct"},"18:12941:12778":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:8165:13666":{"crate_id":17,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:8013:18036":{"crate_id":6,"path":["std","sealed","Sealed"],"kind":"trait"},"18:11985:16260":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:43467:11906":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:34640:17583":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:9742:139":{"crate_id":6,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"17:2796:13647":{"crate_id":17,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:40955:107":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"7:6659:14848":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:7990:15891":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"19:96:29690":{"crate_id":19,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:43446:138":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"21:94:6057":{"crate_id":21,"path":["crypto_common","sealed","BlockSizes"],"kind":"trait"},"18:16750:13608":{"crate_id":18,"path":["object","xcoff","ExpAux"],"kind":"struct"},"7:6611:14827":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:12450:908":{"crate_id":6,"path":["std","i32"],"kind":"primitive"},"7:6493:14759":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:5805:18431":{"crate_id":6,"path":["std","process","Termination"],"kind":"trait"},"6:8501:15177":{"crate_id":6,"path":["std","io","util","Sink"],"kind":"struct"},"17:6608:206":{"crate_id":17,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"5:3086:37101":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:14125:116":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"6:7423:12333":{"crate_id":6,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"18:13169:16306":{"crate_id":18,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"18:14997:13109":{"crate_id":18,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:2760:11769":{"crate_id":1,"path":["core","clone","InitializingSlice"],"kind":"struct"},"5:4573:12379":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"7:8199:15109":{"crate_id":7,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"23:835:18034":{"crate_id":23,"path":["typenum","private","PrivateIntegerAdd"],"kind":"trait"},"1:44918:16132":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"6:12454:1853":{"crate_id":6,"path":["std","u16"],"kind":"primitive"},"18:13921:12887":{"crate_id":18,"path":["object","elf","Syminfo64"],"kind":"struct"},"18:10442:25503":{"crate_id":18,"path":["object","common","SymbolFlags"],"kind":"enum"},"23:1016:18076":{"crate_id":23,"path":["typenum","private","PrivateMax"],"kind":"trait"},"6:9142:16501":{"crate_id":6,"path":["std","process","CommandArgs"],"kind":"struct"},"6:12437:1329":{"crate_id":6,"path":["std","pointer"],"kind":"primitive"},"7:4869:14354":{"crate_id":7,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"}},"external_crates":{"26":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"23":{"name":"typenum","html_root_url":"https://docs.rs/typenum/1.17.0/"},"20":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"const_oid","html_root_url":null},"22":{"name":"hybrid_array","html_root_url":null},"19":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"digest","html_root_url":null},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"27":{"name":"cpufeatures","html_root_url":null},"24":{"name":"block_buffer","html_root_url":null},"21":{"name":"crypto_common","html_root_url":null},"18":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"6":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":30}