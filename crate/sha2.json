{"root":"0:0:1665","crate_version":"0.10.6","includes_private":false,"index":{"0:99:1656":{"id":"0:99:1656","crate_id":0,"name":"Sha256","span":{"filename":"src/lib.rs","begin":[87,0],"end":[87,84]},"visibility":"public","docs":"SHA-256 hasher.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"CoreWrapper","id":"4:492:1631","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CtVariableCoreWrapper","id":"4:473:1632","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"U32","id":"24:2520:1627","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"OidSha256","id":"0:361:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"b:1:2239-0:127:1639":{"id":"b:1:2239-0:127:1639","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2680:5678","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2233:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2241:27496"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:24:1171-0:127:1639":{"id":"b:24:1171-0:127:1639","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.16.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"24:1168:5369","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["24:1173:183"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11921:34237":{"id":"1:11921:34237","crate_id":1,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:11840:409","self::pattern":"1:11520:16425"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11525:15239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11911:34232":{"id":"1:11911:34232","crate_id":1,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:53:1794":{"id":"0:53:1794","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[42,4],"end":[42,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5215","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5215","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5215","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5215","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5215","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5215","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UTerm","id":"24:6363:5216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B1","id":"24:5724:5220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"0:75:1800":{"id":"0:75:1800","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[134,4],"end":[142,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buffer",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Buffer","id":"4:328:1774","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}}}}],["out",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Output","id":"22:16:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2241:27496":{"id":"1:2241:27496","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:127:1639":{"id":"0:127:1639","crate_id":0,"name":"Sha256VarCore","span":{"filename":"src/core_api.rs","begin":[18,0],"end":[21,1]},"visibility":"public","docs":"Core block-level SHA-256 hasher with variable output size.\n\nSupports initialization only for 28 and 32 byte output sizes,\ni.e. 224 and 256 bits respectively.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:2673:217-0:127:1639","a:1:8140:16390-0:127:1639","a:1:8139:16391-0:127:1639","a:1:2687:225-0:127:1639","a:1:2737:5679-0:127:1639","b:1:3328-0:127:1639","b:1:2532-0:127:1639","b:1:2543-0:127:1639","b:1:2239-0:127:1639","b:1:2528-0:127:1639","b:1:2236-0:127:1639","b:1:2538-0:127:1639","b:5:683-0:127:1639","b:24:1171-0:127:1639","0:130","0:59","0:46","0:50","0:61","0:54","0:48","0:45","0:52"]}},"1:11868:34219":{"id":"1:11868:34219","crate_id":1,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"1:11520:16425","`DoubleEndedIterator`":"1:7125:120","prim@char":"6:11840:409","str::split_whitespace":"1:11846:29122","str::rsplit":"1:11874:34220"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"1:50726:5271","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11525:15239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11851:32192":{"id":"1:11851:32192","crate_id":1,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"6:11840:409","self::pattern":"1:11520:16425"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11525:15239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2546:127":{"id":"1:2546:127","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"1:39833:5990","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:100:1658":{"id":"0:100:1658","crate_id":0,"name":"Sha512_224","span":{"filename":"src/lib.rs","begin":[89,0],"end":[89,92]},"visibility":"public","docs":"SHA-512/224 hasher.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"CoreWrapper","id":"4:492:1631","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CtVariableCoreWrapper","id":"4:473:1632","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"U28","id":"24:2508:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"OidSha512_224","id":"0:425:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"1:11941:15731":{"id":"1:11941:15731","crate_id":1,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2538-0:132:1640":{"id":"b:1:2538-0:132:1640","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2512:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2508:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2541:127","1:2542:1441"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11857:34218":{"id":"1:11857:34218","crate_id":1,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"6:11840:409","self::pattern":"1:11520:16425"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11525:15239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11525:15239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11540:16432","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:683-0:132:1640":{"id":"b:5:683-0:132:1640","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2253:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:679:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:685:14669","5:686:27500","5:687:27501"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:2687:225-0:127:1639":{"id":"a:1:2687:225-0:127:1639","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2687:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:135":{"id":"0:135","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[89,9],"end":[89,14]},"visibility":{"restricted":{"parent":"0:17:1630","path":"::core_api"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2253:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:136:413"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:74:924":{"id":"0:74:924","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[121,4],"end":[131,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["output_size",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48878:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"InvalidOutputSize","id":"4:522:1784","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:73:1795":{"id":"0:73:1795","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[118,4],"end":[118,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"resolved_path","inner":{"name":"TruncSide","id":"4:512:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}},"b:1:2543-0:132:1640":{"id":"b:1:2543-0:132:1640","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2502:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2512:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2546:127","1:2547:1440"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11830:5823":{"id":"1:11830:5823","crate_id":1,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"6:11857:1462"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:46":{"id":"0:46","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[25,0],"end":[27,1]},"visibility":{"restricted":{"parent":"0:17:1630","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"22:22:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:47:1790"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2528-0:132:1640":{"id":"b:1:2528-0:132:1640","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2505:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2502:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2531:11082"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:77":{"id":"0:77","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[145,0],"end":[150,1]},"visibility":{"restricted":{"parent":"0:17:1630","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"22:46:1771","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:78:1813"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[113,0],"end":[115,1]},"visibility":{"restricted":{"parent":"0:17:1630","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"22:33:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:71:1794"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[95,0],"end":[95,36]},"visibility":{"restricted":{"parent":"0:17:1630","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:357:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11844:14814":{"id":"1:11844:14814","crate_id":1,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"6:11840:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"1:50702:14786","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:686:27500":{"id":"5:686:27500","crate_id":5,"name":"to_owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:67:1791":{"id":"0:67:1791","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[102,4],"end":[102,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Eager","id":"25:77:1770","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:60:1813":{"id":"0:60:1813","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[73,4],"end":[75,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8966:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8955:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11840:34212":{"id":"1:11840:34212","crate_id":1,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"6:11846:1366","crate::ops::IndexMut":"1:2996:16271","str::slice_unchecked":"1:11839:34211"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:11846:29122":{"id":"1:11846:29122","crate_id":1,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:11847:29103"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"1:51000:14802","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11850:29135":{"id":"1:11850:29135","crate_id":1,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"1:51018:14804","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2541:127":{"id":"1:2541:127","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"1:2512:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"1:11843:14805":{"id":"1:11843:14805","crate_id":1,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"6:11840:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"1:50696:14785","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11883:34223":{"id":"1:11883:34223","crate_id":1,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"6:11840:409","self::pattern":"1:11520:16425","str::rsplitn":"1:11886:34224"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"1:50830:5273","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11525:15239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11942:34243":{"id":"1:11942:34243","crate_id":1,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4500:34243"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"1:51025:14728","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:96-0:127:1639":{"id":"0:96-0:127:1639","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[75,19],"end":[75,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"core_api::Sha256VarCore","name":"Sha256VarCore","id":"0:127:1639","glob":false}},"a:1:8140:16390-0:127:1639":{"id":"a:1:8140:16390-0:127:1639","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8140:16390","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:5286:34912":{"id":"5:5286:34912","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:1936","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6907:14177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:1936","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6907:14177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:5:683-0:127:1639":{"id":"b:5:683-0:127:1639","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2253:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"5:679:228","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["5:685:14669","5:686:27500","5:687:27501"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:2737:5679-0:132:1640":{"id":"a:1:2737:5679-0:132:1640","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2737:5679","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:5301:34915":{"id":"5:5301:34915","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7156:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7156:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5293:34914":{"id":"5:5293:34914","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7156:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7156:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5285":{"id":"5:5285","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5196:1366","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5286:34912","5:5287:11037","5:5290:34913","5:5293:34914","5:5301:34915","5:5302:34916","5:5303:16368","5:5304:15726","5:5305:15727"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11828:34210":{"id":"1:11828:34210","crate_id":1,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:57:1800":{"id":"0:57:1800","crate_id":0,"name":"finalize_variable_core","span":{"filename":"src/core_api.rs","begin":[60,4],"end":[68,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buffer",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Buffer","id":"4:328:1774","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}}}}],["out",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Output","id":"22:16:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:24:1171-0:132:1640":{"id":"b:24:1171-0:132:1640","crate_id":0,"name":null,"span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.16.0/src/type_operators.rs","begin":[34,0],"end":[34,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Same","id":"24:1168:5369","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["24:1173:183"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:101:1660":{"id":"0:101:1660","crate_id":0,"name":"Sha512_256","span":{"filename":"src/lib.rs","begin":[91,0],"end":[91,92]},"visibility":"public","docs":"SHA-512/256 hasher.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"CoreWrapper","id":"4:492:1631","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CtVariableCoreWrapper","id":"4:473:1632","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"U32","id":"24:2520:1627","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"OidSha512_256","id":"0:441:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"1:11940:15730":{"id":"1:11940:15730","crate_id":1,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5290:34913":{"id":"5:5290:34913","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7156:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7156:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11525:15239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2538-0:127:1639":{"id":"b:1:2538-0:127:1639","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2512:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2508:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2541:127","1:2542:1441"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:78:1813":{"id":"0:78:1813","crate_id":0,"name":"write_alg_name","span":{"filename":"src/core_api.rs","begin":[147,4],"end":[149,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8966:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8955:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11895:1890":{"id":"1:11895:1890","crate_id":1,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:11520:16425","`DoubleEndedIterator`":"1:7125:120","prim@char":"6:11840:409","str::matches":"1:11895:1890"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"1:50930:14798","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11525:15239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11933:34241":{"id":"1:11933:34241","crate_id":1,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:11840:409","self::pattern":"1:11520:16425"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11525:15239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11525:15239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11540:16432","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5304:15726":{"id":"5:5304:15726","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:11940:15730"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7156:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11854:34217":{"id":"1:11854:34217","crate_id":1,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"6:11840:409","self::pattern":"1:11520:16425"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11525:15239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11839:34211":{"id":"1:11839:34211","crate_id":1,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"6:11846:1366","str::slice_mut_unchecked":"1:11840:34212","crate::ops::Index":"1:2992:16270"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:11842:34214":{"id":"1:11842:34214","crate_id":1,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:11841:34213"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11939:15729":{"id":"1:11939:15729","crate_id":1,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11847:29103":{"id":"1:11847:29103","crate_id":1,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:11846:29122"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"1:51009:14803","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:61":{"id":"0:61","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[78,0],"end":[83,1]},"visibility":{"restricted":{"parent":"0:17:1630","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9006:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:62:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2673:217-0:127:1639":{"id":"a:1:2673:217-0:127:1639","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2673:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:11918:34236":{"id":"1:11918:34236","crate_id":1,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:11840:409","self::pattern":"1:11520:16425"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11525:15239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2531:11082":{"id":"1:2531:11082","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2505:132"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11915:34235":{"id":"1:11915:34235","crate_id":1,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"6:11840:409","self::pattern":"1:11520:16425"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11525:15239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11525:15239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:11545:16431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[17,9],"end":[17,14]},"visibility":{"restricted":{"parent":"0:17:1630","path":"::core_api"}},"docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2253:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:131:413"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5305:15727":{"id":"5:5305:15727","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:11941:15731"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7156:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:49:1791":{"id":"0:49:1791","crate_id":0,"name":"BufferKind","span":{"filename":"src/core_api.rs","begin":[30,4],"end":[30,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Eager","id":"25:77:1770","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:132:1640":{"id":"0:132:1640","crate_id":0,"name":"Sha512VarCore","span":{"filename":"src/core_api.rs","begin":[90,0],"end":[93,1]},"visibility":"public","docs":"Core block-level SHA-512 hasher with variable output size.\n\nSupports initialization only for 28, 32, 48, and 64 byte output sizes,\ni.e. 224, 256, 384, and 512 bits respectively.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:2673:217-0:132:1640","a:1:8140:16390-0:132:1640","a:1:8139:16391-0:132:1640","a:1:2687:225-0:132:1640","a:1:2737:5679-0:132:1640","b:1:3328-0:132:1640","b:1:2532-0:132:1640","b:1:2543-0:132:1640","b:1:2239-0:132:1640","b:1:2528-0:132:1640","b:1:2236-0:132:1640","b:1:2538-0:132:1640","b:5:683-0:132:1640","b:24:1171-0:132:1640","0:64","0:79","0:135","0:77","0:70","0:66","0:72","0:68","0:63"]}},"0:55:1795":{"id":"0:55:1795","crate_id":0,"name":"TRUNC_SIDE","span":{"filename":"src/core_api.rs","begin":[46,4],"end":[46,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_const","inner":{"type":{"kind":"resolved_path","inner":{"name":"TruncSide","id":"4:512:1777","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"default":"TruncSide::Left"}},"1:11860:11127":{"id":"1:11860:11127","crate_id":1,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:48736:176","prim@char":"6:11840:409","self::pattern":"1:11520:16425"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11525:15239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2239-0:132:1640":{"id":"b:1:2239-0:132:1640","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2680:5678","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2233:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2241:27496"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:64":{"id":"0:64","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[97,0],"end":[99,1]},"visibility":{"restricted":{"parent":"0:17:1630","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["block_size"],"trait":{"name":"BlockSizeUser","id":"22:22:1773","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:65:1790"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11945:34244":{"id":"1:11945:34244","crate_id":1,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4498:34244"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"1:51043:14721","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3328-0:127:1639":{"id":"b:1:3328-0:127:1639","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2680:5678","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3326:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3330:1454"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:50":{"id":"0:50","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[33,0],"end":[39,1]},"visibility":{"restricted":{"parent":"0:17:1630","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:330:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:51:1792"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2673:217-0:132:1640":{"id":"a:1:2673:217-0:132:1640","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2673:217","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:11829:310":{"id":"1:11829:310","crate_id":1,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:11830:5823","`u8`":"6:11857:1462"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11944:16298":{"id":"1:11944:16298","crate_id":1,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4501:16298"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"1:51034:14716","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11845:14658":{"id":"1:11845:14658","crate_id":1,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"1:50712:11826","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:8139:16391-0:127:1639":{"id":"a:1:8139:16391-0:127:1639","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8139:16391","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"24:1173:183":{"id":"24:1173:183","crate_id":24,"name":"Output","span":{"filename":"/home/runner/.cargo/registry/src/index.crates.io-6f17d22bba15001f/typenum-1.16.0/src/type_operators.rs","begin":[35,4],"end":[35,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"1:11849:34216":{"id":"1:11849:34216","crate_id":1,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"1:50990:14801","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11874:34220":{"id":"1:11874:34220","crate_id":1,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"1:11520:16425","`DoubleEndedIterator`":"1:7125:120","prim@char":"6:11840:409","str::split":"1:11868:34219"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"1:50744:5275","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11525:15239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11525:15239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11540:16432","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:69:1792":{"id":"0:69:1792","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[107,4],"end":[110,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["blocks",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"Block","id":"22:12:1772","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11892:34226":{"id":"1:11892:34226","crate_id":1,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11525:15239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11525:15239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11540:16432","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:102:1662":{"id":"0:102:1662","crate_id":0,"name":"Sha384","span":{"filename":"src/lib.rs","begin":[93,0],"end":[93,84]},"visibility":"public","docs":"SHA-384 hasher.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"CoreWrapper","id":"4:492:1631","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CtVariableCoreWrapper","id":"4:473:1632","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"U48","id":"24:2568:1628","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"OidSha384","id":"0:377:1643","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"1:11871:29115":{"id":"1:11871:29115","crate_id":1,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"6:11840:409","self::pattern":"1:11520:16425"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"1:11344:5288","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11525:15239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11821:34206":{"id":"1:11821:34206","crate_id":1,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11833:15505":{"id":"1:11833:15505","crate_id":1,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:48736:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9701:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9701:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11889:34225":{"id":"1:11889:34225","crate_id":1,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11525:15239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:8140:16390-0:132:1640":{"id":"a:1:8140:16390-0:132:1640","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:8140:16390","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:11913:34233":{"id":"1:11913:34233","crate_id":1,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:8139:16391-0:132:1640":{"id":"a:1:8139:16391-0:132:1640","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:8139:16391","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:47:1790":{"id":"0:47:1790","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[26,4],"end":[26,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5215","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5215","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5215","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5215","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5215","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5215","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5215","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UTerm","id":"24:6363:5216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B1","id":"24:5724:5220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"1:2534:680":{"id":"1:2534:680","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2532-0:132:1640":{"id":"b:1:2532-0:132:1640","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2505:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2534:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11831:5829":{"id":"1:11831:5829","crate_id":1,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:48736:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9701:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9701:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3328-0:132:1640":{"id":"b:1:3328-0:132:1640","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2680:5678","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3326:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3330:1454"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:80:656":{"id":"0:80:656","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[154,4],"end":[156,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8966:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8955:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:72":{"id":"0:72","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[117,0],"end":[143,1]},"visibility":{"restricted":{"parent":"0:17:1630","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:341:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:73:1795","0:74:924","0:75:1800"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11864:11088":{"id":"1:11864:11088","crate_id":1,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"1:48736:176","prim@char":"6:11840:409","self::pattern":"1:11520:16425"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11525:15239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11525:15239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11540:16432","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11930:34240":{"id":"1:11930:34240","crate_id":1,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"6:11840:409","self::pattern":"1:11520:16425"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11525:15239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11938:15725":{"id":"1:11938:15725","crate_id":1,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11909:34231":{"id":"1:11909:34231","crate_id":1,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:3330:1454":{"id":"1:3330:1454","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"1:47073:14285","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11837:15507":{"id":"1:11837:15507","crate_id":1,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9701:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9701:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:5-4:0:1619":{"id":"0:5-4:0:1619","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,17],"end":[54,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"digest","name":"digest","id":"4:0:1619","glob":false}},"1:11877:34221":{"id":"1:11877:34221","crate_id":1,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:11520:16425","str::split":"1:11868:34219","prim@char":"6:11840:409","`DoubleEndedIterator`":"1:7125:120","str::rsplit_terminator":"1:11880:34222"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"1:50776:14791","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11525:15239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:98:1654":{"id":"0:98:1654","crate_id":0,"name":"Sha224","span":{"filename":"src/lib.rs","begin":[85,0],"end":[85,84]},"visibility":"public","docs":"SHA-224 hasher.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"CoreWrapper","id":"4:492:1631","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CtVariableCoreWrapper","id":"4:473:1632","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"U28","id":"24:2508:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"OidSha224","id":"0:409:1647","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"1:11819:797":{"id":"1:11819:797","crate_id":1,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"6:11840:409"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2687:225-0:132:1640":{"id":"a:1:2687:225-0:132:1640","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2687:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2236-0:132:1640":{"id":"b:1:2236-0:132:1640","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2680:5678","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2230:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2238:1847"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:71:1794":{"id":"0:71:1794","crate_id":0,"name":"OutputSize","span":{"filename":"src/core_api.rs","begin":[114,4],"end":[114,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5215","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5215","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5215","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5215","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5215","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5215","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5215","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UTerm","id":"24:6363:5216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B1","id":"24:5724:5220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"1:11880:34222":{"id":"1:11880:34222","crate_id":1,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"1:11520:16425","str::split":"1:11868:34219","prim@char":"6:11840:409","str::split_terminator":"1:11877:34221"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"1:50794:14792","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11525:15239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11525:15239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11540:16432","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11835:15506":{"id":"1:11835:15506","crate_id":1,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9701:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9701:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:11927:34239":{"id":"1:11927:34239","crate_id":1,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"6:11840:409","self::pattern":"1:11520:16425"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11525:15239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11525:15239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11540:16432","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1665":{"id":"0:0:1665","crate_id":0,"name":"sha2","span":{"filename":"src/lib.rs","begin":[1,0],"end":[95,84]},"visibility":"public","docs":"An implementation of the [SHA-2][1] cryptographic hash algorithms.\n\nThere are 6 standard algorithms specified in the SHA-2 standard: [`Sha224`],\n[`Sha256`], [`Sha512_224`], [`Sha512_256`], [`Sha384`], and [`Sha512`].\n\nAlgorithmically, there are only 2 core algorithms: SHA-256 and SHA-512.\nAll other algorithms are just applications of these with different initial\nhash values, and truncated to different digest bit lengths. The first two\nalgorithms in the list are based on SHA-256, while the last three on SHA-512.\n\n# Usage\n\n```rust\nuse hex_literal::hex;\nuse sha2::{Sha256, Sha512, Digest};\n\n// create a Sha256 object\nlet mut hasher = Sha256::new();\n\n// write input message\nhasher.update(b\"hello world\");\n\n// read hash digest and consume hasher\nlet result = hasher.finalize();\n\nassert_eq!(result[..], hex!(\"\n    b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\n\")[..]);\n\n// same for Sha512\nlet mut hasher = Sha512::new();\nhasher.update(b\"hello world\");\nlet result = hasher.finalize();\n\nassert_eq!(result[..], hex!(\"\n    309ecc489c12d6eb4cc40f50c902f2b4d0ed77ee511a7c7a9bcd3ca86d4cd86f\n    989dd35bc5ff499670da34255b45b0cfd830e81f605dcf7dc5542e93ae9cd76f\n\")[..]);\n```\n\nAlso see [RustCrypto/hashes][2] readme.\n\n[1]: https://en.wikipedia.org/wiki/SHA-2\n[2]: https://github.com/RustCrypto/hashes","links":{"`Sha256`":"0:99:1656","`Sha224`":"0:98:1654","`Sha512`":"0:103:1664","`Sha384`":"0:102:1662","`Sha512_256`":"0:101:1660","`Sha512_224`":"0:100:1658"},"attrs":["#![no_std]","#![doc(html_logo_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\",\nhtml_favicon_url =\n\"https://raw.githubusercontent.com/RustCrypto/media/6ee8e381/logo.svg\")]","#![warn(missing_docs, rust_2018_idioms)]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:5-4:0:1619","0:6-4:358:1620","0:96-0:127:1639","0:97-0:132:1640","0:98:1654","0:99:1656","0:100:1658","0:101:1660","0:102:1662","0:103:1664"],"is_stripped":false}},"0:68":{"id":"0:68","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[105,0],"end":[111,1]},"visibility":{"restricted":{"parent":"0:17:1630","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UpdateCore","id":"4:330:1778","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:69:1792"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11901:34228":{"id":"1:11901:34228","crate_id":1,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:11520:16425","`DoubleEndedIterator`":"1:7125:120","prim@char":"6:11840:409","str::rmatch_indices":"1:11904:34229"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"1:50876:14795","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11525:15239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11914:34234":{"id":"1:11914:34234","crate_id":1,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:62:656":{"id":"0:62:656","crate_id":0,"name":"fmt","span":{"filename":"src/core_api.rs","begin":[80,4],"end":[82,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8966:131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8955:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2542:1441":{"id":"1:2542:1441","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48878:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"1:2512:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:54":{"id":"0:54","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[45,0],"end":[69,1]},"visibility":{"restricted":{"parent":"0:17:1630","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"VariableOutputCore","id":"4:341:1779","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:55:1795","0:56:924","0:57:1800"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11822:34207":{"id":"1:11822:34207","crate_id":1,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:103:1664":{"id":"0:103:1664","crate_id":0,"name":"Sha512","span":{"filename":"src/lib.rs","begin":[95,0],"end":[95,84]},"visibility":"public","docs":"SHA-512 hasher.","links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"CoreWrapper","id":"4:492:1631","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CtVariableCoreWrapper","id":"4:473:1632","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"U64","id":"24:2616:1629","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"OidSha512","id":"0:393:1645","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"b:1:2543-0:127:1639":{"id":"b:1:2543-0:127:1639","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2502:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2512:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2546:127","1:2547:1440"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2528-0:127:1639":{"id":"b:1:2528-0:127:1639","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2505:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2502:147","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2531:11082"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:2737:5679-0:127:1639":{"id":"a:1:2737:5679-0:127:1639","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2737:5679","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:6-4:358:1620":{"id":"0:6-4:358:1620","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[54,23],"end":[54,29]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"digest::Digest","name":"Digest","id":"4:358:1620","glob":false}},"1:2547:1440":{"id":"1:2547:1440","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48878:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"1:2512:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11827:34209":{"id":"1:11827:34209","crate_id":1,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:11088:16433"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11848:34215":{"id":"1:11848:34215","crate_id":1,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"1:50980:14800","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11886:34224":{"id":"1:11886:34224","crate_id":1,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"6:11840:409","str::splitn":"1:11883:34223","self::pattern":"1:11520:16425"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"1:50848:5269","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11525:15239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11525:15239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11540:16432","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11898:34227":{"id":"1:11898:34227","crate_id":1,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:11520:16425","`DoubleEndedIterator`":"1:7125:120","prim@char":"6:11840:409","str::matches":"1:11895:1890"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"1:50948:14799","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11525:15239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11525:15239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11540:16432","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11824:34208":{"id":"1:11824:34208","crate_id":1,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:11822:34207"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11907:34230":{"id":"1:11907:34230","crate_id":1,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:51:1792":{"id":"0:51:1792","crate_id":0,"name":"update_blocks","span":{"filename":"src/core_api.rs","begin":[35,4],"end":[38,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["blocks",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"Block","id":"22:12:1772","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11904:34229":{"id":"1:11904:34229","crate_id":1,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"1:11520:16425","`DoubleEndedIterator`":"1:7125:120","prim@char":"6:11840:409","str::match_indices":"1:11901:34228"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"1:50894:14796","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11525:15239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11525:15239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11540:16432","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:56:924":{"id":"0:56:924","crate_id":0,"name":"new","span":{"filename":"src/core_api.rs","begin":[49,4],"end":[57,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["output_size",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48878:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"InvalidOutputSize","id":"4:522:1784","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:66":{"id":"0:66","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[101,0],"end":[103,1]},"visibility":{"restricted":{"parent":"0:17:1630","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:332:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:67:1791"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:59":{"id":"0:59","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[71,0],"end":[76,1]},"visibility":{"restricted":{"parent":"0:17:1630","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AlgorithmName","id":"22:46:1771","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:60:1813"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[41,0],"end":[43,1]},"visibility":{"restricted":{"parent":"0:17:1630","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["output_size"],"trait":{"name":"OutputSizeUser","id":"22:33:1776","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:53:1794"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:136:413":{"id":"0:136:413","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[89,9],"end":[89,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11936:34242":{"id":"1:11936:34242","crate_id":1,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:11482:126","`FromStr`":"1:11481:16099"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48878:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"1:11481:16099","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:11481:16099","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:45":{"id":"0:45","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[23,0],"end":[23,36]},"visibility":{"restricted":{"parent":"0:17:1630","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"HashMarker","id":"4:357:1783","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5287:11037":{"id":"5:5287:11037","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7156:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7156:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11525:15239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5303:16368":{"id":"5:5303:16368","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7156:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7156:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2532-0:127:1639":{"id":"b:1:2532-0:127:1639","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2505:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2534:680"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2236-0:127:1639":{"id":"b:1:2236-0:127:1639","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2680:5678","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2230:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2238:1847"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:685:14669":{"id":"5:685:14669","crate_id":5,"name":"Owned","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"5:5302:34916":{"id":"5:5302:34916","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:288:1936","`String`":"5:7156:221"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:1936","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6907:14177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7156:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11841:34213":{"id":"1:11841:34213","crate_id":1,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:11842:34214"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:65:1790":{"id":"0:65:1790","crate_id":0,"name":"BlockSize","span":{"filename":"src/core_api.rs","begin":[98,4],"end":[98,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5215","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5215","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5215","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5215","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5215","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5215","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5215","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UInt","id":"24:6316:5215","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"UTerm","id":"24:6363:5216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B1","id":"24:5724:5220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"B0","id":"24:5702:5219","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"1:11820:11089":{"id":"1:11820:11089","crate_id":1,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11818":{"id":"1:11818","crate_id":1,"name":null,"span":null,"visibility":{"restricted":{"parent":"1:11083:1366","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["1:11819:797","1:11820:11089","1:11821:34206","1:11822:34207","1:11824:34208","1:11827:34209","1:11828:34210","1:11829:310","1:11830:5823","1:11831:5829","1:11833:15505","1:11835:15506","1:11837:15507","1:11839:34211","1:11840:34212","1:11841:34213","1:11842:34214","1:11843:14805","1:11844:14814","1:11845:14658","1:11846:29122","1:11847:29103","1:11848:34215","1:11849:34216","1:11850:29135","1:11851:32192","1:11854:34217","1:11857:34218","1:11860:11127","1:11864:11088","1:11868:34219","1:11871:29115","1:11874:34220","1:11877:34221","1:11880:34222","1:11883:34223","1:11886:34224","1:11889:34225","1:11892:34226","1:11895:1890","1:11898:34227","1:11901:34228","1:11904:34229","1:11907:34230","1:11909:34231","1:11911:34232","1:11913:34233","1:11914:34234","1:11915:34235","1:11918:34236","1:11921:34237","1:11924:34238","1:11927:34239","1:11930:34240","1:11933:34241","1:11936:34242","1:11938:15725","1:11939:15729","1:11940:15730","1:11941:15731","1:11942:34243","1:11944:16298","1:11945:34244"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:131:413":{"id":"0:131:413","crate_id":0,"name":"clone","span":{"filename":"src/core_api.rs","begin":[17,9],"end":[17,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11924:34238":{"id":"1:11924:34238","crate_id":1,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"6:11840:409","self::pattern":"1:11520:16425"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:48734:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11525:15239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11525:15239","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11540:16432","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:48":{"id":"0:48","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[29,0],"end":[31,1]},"visibility":{"restricted":{"parent":"0:17:1630","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BufferKindUser","id":"4:332:1775","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha256VarCore","id":"0:127:1639","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:49:1791"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:79":{"id":"0:79","crate_id":0,"name":null,"span":{"filename":"src/core_api.rs","begin":[152,0],"end":[157,1]},"visibility":{"restricted":{"parent":"0:17:1630","path":"::core_api"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9006:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Sha512VarCore","id":"0:132:1640","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:80:656"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:97-0:132:1640":{"id":"0:97-0:132:1640","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[75,34],"end":[75,47]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"core_api::Sha512VarCore","name":"Sha512VarCore","id":"0:132:1640","glob":false}},"5:687:27501":{"id":"5:687:27501","crate_id":5,"name":"clone_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2238:1847":{"id":"1:2238:1847","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"0:99:1656":{"crate_id":0,"path":["sha2","Sha256"],"kind":"typedef"},"4:492:1631":{"crate_id":4,"path":["digest","core_api","wrapper","CoreWrapper"],"kind":"struct"},"1:50453:15256":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"7:547:13168":{"crate_id":7,"path":["libc","unix","pollfd"],"kind":"struct"},"19:614:38323":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:3010:22550":{"crate_id":17,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:54769:10988":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:54541:14377":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"6:4704:17044":{"crate_id":6,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:2385:14182":{"crate_id":6,"path":["std","fs","metadata"],"kind":"function"},"1:50077:14781":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:50980:14800":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"6:5018:15143":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:54644:10980":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"6:8350:14134":{"crate_id":6,"path":["std","path","Prefix"],"kind":"enum"},"1:4001:103":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"6:486:11528":{"crate_id":6,"path":["std","thread","local","fast","Key"],"kind":"struct"},"7:4575:13547":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"18:12926:12440":{"crate_id":18,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"7:4525:13524":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:49051:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"15:7:15081":{"crate_id":15,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"18:13047:12468":{"crate_id":18,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:4707:16359":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"6:7264:37096":{"crate_id":6,"path":["std","panicking","Hook"],"kind":"enum"},"17:6146:14532":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:8564:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:21392:16727":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"6:11806:37093":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"7:4210:13412":{"crate_id":7,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"18:9631:14963":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"6:11229:14661":{"crate_id":6,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"18:10121:11891":{"crate_id":18,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"7:5605:13753":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:52791:14348":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:1639:14622":{"crate_id":6,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:7166:23414":{"crate_id":17,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:6070:12744":{"crate_id":17,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:48802:5268":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"17:5996:15016":{"crate_id":17,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:2791:12811":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"19:690:14425":{"crate_id":19,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:1866:15117":{"crate_id":6,"path":["std","env","SplitPaths"],"kind":"struct"},"15:165:22492":{"crate_id":15,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"19:699:14426":{"crate_id":19,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"18:10532:127":{"crate_id":18,"path":["object","read","Error"],"kind":"struct"},"6:5361:15147":{"crate_id":6,"path":["std","process","ChildStdin"],"kind":"struct"},"7:5520:13713":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"18:10088:11888":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"24:828:16752":{"crate_id":24,"path":["typenum","private","PrivateSub"],"kind":"trait"},"1:51687:15257":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:4012:17036":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:2803:16259":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:47646:14742":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:51477:14840":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"4:436:1932":{"crate_id":4,"path":["digest","ExtendableOutputReset"],"kind":"trait"},"1:47303:28585":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:50634:5281":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"6:1889:15118":{"crate_id":6,"path":["std","env","Args"],"kind":"struct"},"1:51290:14819":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:3089:5262":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:2992:16270":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:3932:11489":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"6:3477:36660":{"crate_id":6,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"7:4317:13464":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"19:707:14428":{"crate_id":19,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:5163:12734":{"crate_id":17,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"24:924:16746":{"crate_id":24,"path":["typenum","private","PrivateCmp"],"kind":"trait"},"17:2930:22549":{"crate_id":17,"path":["gimli","common","SectionId"],"kind":"enum"},"1:10086:5276":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"24:653:5357":{"crate_id":24,"path":["typenum","marker_traits","TypeArray"],"kind":"trait"},"1:48033:14767":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"18:12073:12185":{"crate_id":18,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:2683:223":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:8978:15197":{"crate_id":6,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"18:9328:14949":{"crate_id":18,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:57202:16519":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"7:1601:13253":{"crate_id":7,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:20870:16727":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:12435:16479":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"4:294:16727":{"crate_id":4,"path":["digest","core_api","wrapper","sealed","Sealed"],"kind":"trait"},"7:6402:13939":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:46978:198":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"18:10445:11906":{"crate_id":18,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"24:1878:16738":{"crate_id":24,"path":["typenum","uint","GetBit"],"kind":"trait"},"6:11462:14166":{"crate_id":6,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"18:11149:11995":{"crate_id":18,"path":["object","elf","Rel32"],"kind":"struct"},"17:4327:12714":{"crate_id":17,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:21286:5263":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:38660:180":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"0:0:1665":{"crate_id":0,"path":["sha2"],"kind":"module"},"18:1903:23518":{"crate_id":18,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:11855:730":{"crate_id":6,"path":["std","i64"],"kind":"primitive"},"18:11368:12047":{"crate_id":18,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"7:6303:13902":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"7:4356:13484":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"18:13382:12576":{"crate_id":18,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"5:6599:241":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"18:11054:11979":{"crate_id":18,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:2858:16267":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:7202:156":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:51708:158":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:48946:180":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"5:3057:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"7:62:17172":{"crate_id":7,"path":["libc","unix","DIR"],"kind":"enum"},"18:10374:14446":{"crate_id":18,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"6:8154:11826":{"crate_id":6,"path":["std","io","Bytes"],"kind":"struct"},"18:12164:12201":{"crate_id":18,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"6:9067:216":{"crate_id":6,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:51161:14815":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"13:1840:11555":{"crate_id":13,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:5853:11496":{"crate_id":6,"path":["std","sync","mpmc","array","Channel"],"kind":"struct"},"18:12550:12292":{"crate_id":18,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"6:5527:17115":{"crate_id":6,"path":["std","process","Termination"],"kind":"trait"},"6:10402:15133":{"crate_id":6,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"17:6528:14557":{"crate_id":17,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:6270:12679":{"crate_id":17,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"6:10803:15168":{"crate_id":6,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:11481:16099":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:46912:195":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"18:10682:11931":{"crate_id":18,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:5628:14484":{"crate_id":17,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:11844:308":{"crate_id":6,"path":["std","array"],"kind":"primitive"},"1:51461:14836":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:48066:14770":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"5:288:1936":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"18:967:14925":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:5447:15007":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"7:4249:13433":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:11863:1515":{"crate_id":6,"path":["std","usize"],"kind":"primitive"},"7:1556:13222":{"crate_id":7,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:14:1891":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:49493:11157":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"6:3354:14769":{"crate_id":6,"path":["std","io","util","Repeat"],"kind":"struct"},"18:12850:12423":{"crate_id":18,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"18:10949:11950":{"crate_id":18,"path":["object","elf","FileHeader32"],"kind":"struct"},"19:507:11709":{"crate_id":19,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:3643:17026":{"crate_id":6,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:4849:12730":{"crate_id":17,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:47489:14735":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"5:2880:36334":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"18:9681:11771":{"crate_id":18,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:2779:12808":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"6:2252:15123":{"crate_id":6,"path":["std","fs","DirEntry"],"kind":"struct"},"1:39882:11048":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:6668:12792":{"crate_id":17,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"6:8492:5267":{"crate_id":6,"path":["std","path","Iter"],"kind":"struct"},"18:9738:14436":{"crate_id":18,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:48017:14765":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"7:6458:13962":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:683:15110":{"crate_id":6,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"18:10207:14991":{"crate_id":18,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"18:12118:12194":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:7426:15076":{"crate_id":17,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"7:5871:13867":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:52613:14342":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:5780:14501":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:7357:12857":{"crate_id":17,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:6719:38307":{"crate_id":17,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"5:6001:16841":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:3936:17030":{"crate_id":6,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"23:195:5393":{"crate_id":23,"path":["generic_array","iter","GenericArrayIter"],"kind":"struct"},"5:5390:11568":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:51644:208":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:48921:5267":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"18:12087:12188":{"crate_id":18,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"6:10816:15151":{"crate_id":6,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:47456:101":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:47707:14750":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"7:6963:14037":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:9893:5271":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"17:4217:12711":{"crate_id":17,"path":["gimli","constants","DwForm"],"kind":"struct"},"18:13374:12575":{"crate_id":18,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:2152:578":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:9173:15118":{"crate_id":6,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:7942:15080":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"22:48:16777":{"crate_id":22,"path":["crypto_common","KeyInit"],"kind":"trait"},"18:9831:14977":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"5:5142:16825":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:53158:14359":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"7:5682:13802":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"18:12617:12347":{"crate_id":18,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"5:1387:11094":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:6472:12775":{"crate_id":17,"path":["gimli","read","line","LineRow"],"kind":"struct"},"18:11774:12126":{"crate_id":18,"path":["object","macho","SubClientCommand"],"kind":"struct"},"5:3488:5267":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"18:10608:11793":{"crate_id":18,"path":["object","read","SectionIndex"],"kind":"struct"},"7:5551:13726":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:47626:14739":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:51634:202":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"4:418:1927":{"crate_id":4,"path":["digest","Update"],"kind":"trait"},"7:482:13128":{"crate_id":7,"path":["libc","unix","utimbuf"],"kind":"struct"},"7:1517:13203":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"18:8951:38315":{"crate_id":18,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:6319:163":{"crate_id":6,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"18:9857:14982":{"crate_id":18,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"7:4654:13583":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:7818:14632":{"crate_id":6,"path":["std","fs","Permissions"],"kind":"struct"},"1:11293:14794":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:47748:14754":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:21628:14700":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:51358:14830":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"6:5396:15149":{"crate_id":6,"path":["std","process","ChildStderr"],"kind":"struct"},"1:2854:16266":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"19:548:140":{"crate_id":19,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:1641:11039":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"6:6032:11496":{"crate_id":6,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"18:11235:12011":{"crate_id":18,"path":["object","elf","Dyn32"],"kind":"struct"},"18:12103:12190":{"crate_id":18,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"18:10796:11935":{"crate_id":18,"path":["object","read","CodeView"],"kind":"struct"},"1:4344:11591":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:2764:16097":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"1:50270:14318":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"13:1003:15094":{"crate_id":13,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"7:1692:13315":{"crate_id":7,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"24:1131:16735":{"crate_id":24,"path":["typenum","private","IsGreaterOrEqualPrivate"],"kind":"trait"},"19:609:14915":{"crate_id":19,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"5:6087:11573":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"13:659:11094":{"crate_id":13,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:2844:12816":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"6:2028:182":{"crate_id":6,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"18:11841:12135":{"crate_id":18,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:8711:656":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"6:11444:14165":{"crate_id":6,"path":["std","alloc","System"],"kind":"struct"},"19:582:11053":{"crate_id":19,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:4545:12720":{"crate_id":17,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:57559:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"18:386:14923":{"crate_id":18,"path":["object","read","any","Segment"],"kind":"struct"},"1:8569:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"20:0:1010":{"crate_id":20,"path":["panic_unwind"],"kind":"module"},"18:12361:12239":{"crate_id":18,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:6619:12786":{"crate_id":17,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:11847:1444":{"crate_id":6,"path":["std","tuple"],"kind":"primitive"},"17:5761:15009":{"crate_id":17,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:0:1358":{"crate_id":6,"path":["std"],"kind":"module"},"17:3402:12703":{"crate_id":17,"path":["gimli","arch","X86"],"kind":"struct"},"6:11035:14157":{"crate_id":6,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"5:5723:11566":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"6:6355:15158":{"crate_id":6,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"18:487:14924":{"crate_id":18,"path":["object","read","any","Comdat"],"kind":"struct"},"1:47343:14720":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:54716:10985":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:7791:11772":{"crate_id":6,"path":["std","fs","Metadata"],"kind":"struct"},"7:5702:13810":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"18:8241:23469":{"crate_id":18,"path":["object","common","SymbolKind"],"kind":"enum"},"16:0:1920":{"crate_id":16,"path":["addr2line"],"kind":"module"},"17:3026:11736":{"crate_id":17,"path":["gimli","arch","Arm"],"kind":"struct"},"17:6137:14531":{"crate_id":17,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"5:6501:11581":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"24:6363:5216":{"crate_id":24,"path":["typenum","uint","UTerm"],"kind":"struct"},"17:2842:12674":{"crate_id":17,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"10:709:5945":{"crate_id":10,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"18:12033:12181":{"crate_id":18,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:4754:781":{"crate_id":1,"path":["core","iter"],"kind":"module"},"6:10628:14644":{"crate_id":6,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"7:5751:13830":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:53181:14360":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:630:16935":{"crate_id":6,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:10013:5289":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:11843:1028":{"crate_id":6,"path":["std","pointer"],"kind":"primitive"},"7:4755:13631":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"18:10159:11893":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:2909:116":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:57637:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"19:521:27227":{"crate_id":19,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:5703:14492":{"crate_id":17,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"18:12874:12425":{"crate_id":18,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"6:7023:36887":{"crate_id":6,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"18:12485:12241":{"crate_id":18,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"6:5049:15143":{"crate_id":6,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"18:10221:14995":{"crate_id":18,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:7462:11938":{"crate_id":6,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"5:688:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"18:13413:12584":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"5:1243:15094":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:2579:115":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"6:8838:14148":{"crate_id":6,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:20417:27679":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"17:4297:12713":{"crate_id":17,"path":["gimli","constants","DwLle"],"kind":"struct"},"18:11939:12164":{"crate_id":18,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"5:1463:15218":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"5:6155:11555":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"7:6312:13908":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"0:101:1660":{"crate_id":0,"path":["sha2","Sha512_256"],"kind":"typedef"},"13:1832:5267":{"crate_id":13,"path":["hashbrown","set","Iter"],"kind":"struct"},"24:1905:16740":{"crate_id":24,"path":["typenum","uint","SetBit"],"kind":"trait"},"6:11196:14657":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"5:784:11540":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:47729:14752":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"18:13141:12497":{"crate_id":18,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"5:6998:11094":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:3384:11489":{"crate_id":6,"path":["std","io","Guard"],"kind":"struct"},"1:48058:14291":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:48583:14297":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:11344:5288":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"18:11199:12002":{"crate_id":18,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:8400:5945":{"crate_id":6,"path":["std","path","State"],"kind":"enum"},"7:5490:13696":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:47473:28557":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"7:1511:13200":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"18:11853:12136":{"crate_id":18,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"18:12781:12407":{"crate_id":18,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:7600:14076":{"crate_id":6,"path":["std","thread","ThreadId"],"kind":"struct"},"6:663:15107":{"crate_id":6,"path":["std","backtrace","Backtrace"],"kind":"struct"},"4:484:5236":{"crate_id":4,"path":["digest","core_api","rt_variable","RtVariableCoreWrapper"],"kind":"struct"},"24:1091:16733":{"crate_id":24,"path":["typenum","private","IsLessOrEqualPrivate"],"kind":"trait"},"6:5464:15151":{"crate_id":6,"path":["std","process","Stdio"],"kind":"struct"},"17:7483:12695":{"crate_id":17,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"5:2142:36345":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"13:2198:13029":{"crate_id":13,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"9:0:1666":{"crate_id":9,"path":["cfg_if"],"kind":"module"},"18:12514:12261":{"crate_id":18,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:2769:16098":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:8088:12851":{"crate_id":6,"path":["std","io","util","Empty"],"kind":"struct"},"18:13580:12627":{"crate_id":18,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:48685:14633":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:52861:14350":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:7479:16374":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:51315:14820":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"5:2162:14676":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"7:488:13131":{"crate_id":7,"path":["libc","unix","timeval"],"kind":"struct"},"18:13354:12570":{"crate_id":18,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:11850:630":{"crate_id":6,"path":["std","f32"],"kind":"primitive"},"19:644:11709":{"crate_id":19,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:2850:16265":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:7249:15068":{"crate_id":17,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"10:592:22346":{"crate_id":10,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"1:2499:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"7:1707:13324":{"crate_id":7,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"18:12609:12344":{"crate_id":18,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:50532:5277":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:7872:14624":{"crate_id":6,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:2692:5311":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:47608:14665":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"18:9223:23486":{"crate_id":18,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:12102:135":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"7:4499:13510":{"crate_id":7,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:10048:5275":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"5:1959:14624":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"13:2053:14588":{"crate_id":13,"path":["hashbrown","set","Entry"],"kind":"enum"},"6:4879:17084":{"crate_id":6,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:54675:10982":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"5:6969:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"18:13527:12618":{"crate_id":18,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"13:1120:15098":{"crate_id":13,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:7942:15174":{"crate_id":6,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:47813:14761":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"18:13340:12564":{"crate_id":18,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"19:755:14435":{"crate_id":19,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"13:738:14618":{"crate_id":13,"path":["hashbrown","map","Values"],"kind":"struct"},"1:53261:14361":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"18:9751:14438":{"crate_id":18,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:6396:15159":{"crate_id":6,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:8509:14640":{"crate_id":6,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:12527:1578":{"crate_id":1,"path":["core","core_arch","arch","x86_64"],"kind":"module"},"1:47423:16324":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:0:486":{"crate_id":1,"path":["core"],"kind":"module"},"18:9691:14968":{"crate_id":18,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"18:9577:11848":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"7:506:13139":{"crate_id":7,"path":["libc","unix","rusage"],"kind":"struct"},"1:21:667":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"24:835:16725":{"crate_id":24,"path":["typenum","private","PrivateIntegerAdd"],"kind":"trait"},"17:5525:14476":{"crate_id":17,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"18:10721:11932":{"crate_id":18,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"18:247:14922":{"crate_id":18,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:20451:27892":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:3326:68":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:38677:11053":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"5:1055:33921":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:12115:16477":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:9011:119":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:9006:111":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"17:5596:12737":{"crate_id":17,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:2680:5678":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:50513:5264":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:4399:11173":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"23:382:5385":{"crate_id":23,"path":["generic_array","GenericArrayImplOdd"],"kind":"struct"},"10:676:22335":{"crate_id":10,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"1:3179:16274":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"7:1642:13285":{"crate_id":7,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"18:9722:11852":{"crate_id":18,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:47089:15248":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"7:5886:13878":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:51304:16443":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"24:654:5324":{"crate_id":24,"path":["typenum","marker_traits","PowerOfTwo"],"kind":"trait"},"1:5661:30234":{"crate_id":1,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"17:7135:38305":{"crate_id":17,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"13:810:15100":{"crate_id":13,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:6171:12749":{"crate_id":17,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:2825:12673":{"crate_id":17,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:53339:14362":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:2922:5391":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:3716:12708":{"crate_id":17,"path":["gimli","constants","DwChildren"],"kind":"struct"},"19:564:11716":{"crate_id":19,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"18:10270:14999":{"crate_id":18,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"5:6977:14680":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"7:4537:13531":{"crate_id":7,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"18:10520:11914":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"18:9021:14938":{"crate_id":18,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"7:4112:13344":{"crate_id":7,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:3599:12705":{"crate_id":17,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"7:4377:13493":{"crate_id":7,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"5:3132:36286":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:1823:14186":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:30015:28576":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:2557:12662":{"crate_id":17,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"7:4631:13576":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:4817:12729":{"crate_id":17,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:6298:14541":{"crate_id":17,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:6284:12696":{"crate_id":17,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"18:8911:38319":{"crate_id":18,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:8069:127":{"crate_id":17,"path":["gimli","read","Error"],"kind":"enum"},"23:422:5386":{"crate_id":23,"path":["generic_array","ArrayBuilder"],"kind":"struct"},"18:12695:12390":{"crate_id":18,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:47363:16322":{"crate_id":1,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"13:2205:14681":{"crate_id":13,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:54754:10987":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:6656:16365":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:52761:14347":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:10846:14146":{"crate_id":6,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"7:6434:13950":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"7:4608:13567":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"5:1376:5268":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:3689:12707":{"crate_id":17,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:8179:15183":{"crate_id":6,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"7:1649:13289":{"crate_id":7,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:11862:775":{"crate_id":6,"path":["std","isize"],"kind":"primitive"},"1:2816:12812":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"17:2300:12646":{"crate_id":17,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:51147:14812":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"23:300:5400":{"crate_id":23,"path":["generic_array","sequence","Shorten"],"kind":"trait"},"1:20601:16490":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"7:5743:13828":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:8228:14634":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"5:6907:14177":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"18:10385:14450":{"crate_id":18,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"6:7585:36857":{"crate_id":6,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"1:53497:14365":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"18:9805:11917":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"13:98:14610":{"crate_id":13,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"19:681:14422":{"crate_id":19,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:7707:15169":{"crate_id":6,"path":["std","error","private","Internal"],"kind":"struct"},"6:4121:17053":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"5:5703:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"7:6564:14028":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"23:346:5401":{"crate_id":23,"path":["generic_array","sequence","Concat"],"kind":"trait"},"1:9023:11160":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"18:1021:14926":{"crate_id":18,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"6:4601:13931":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"6:11181:14164":{"crate_id":6,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:48720:14306":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"18:12964:12449":{"crate_id":18,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:21720:28584":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"7:6510:14003":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"7:1660:13297":{"crate_id":7,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:6252:14540":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"5:1228:15095":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:53835:14370":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:54041:14371":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"18:8991:38318":{"crate_id":18,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"13:2080:15095":{"crate_id":13,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:11072:14156":{"crate_id":6,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"22:42:16776":{"crate_id":22,"path":["crypto_common","InnerUser"],"kind":"trait"},"1:2307:124":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:21644:14193":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"18:11217:12010":{"crate_id":18,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:47617:14738":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:5184:22520":{"crate_id":17,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:223:207":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"7:4189:13404":{"crate_id":7,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:47380:14716":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"13:353:11469":{"crate_id":13,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:11682:11534":{"crate_id":6,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"7:4621:13572":{"crate_id":7,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"18:10490:11910":{"crate_id":18,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:4689:12725":{"crate_id":17,"path":["gimli","constants","DwDsc"],"kind":"struct"},"13:762:11471":{"crate_id":13,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"17:7319:14594":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:48048:11598":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:2687:225":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"17:6903:14152":{"crate_id":17,"path":["gimli","read","op","Operation"],"kind":"enum"},"18:13231:12520":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"7:123:17227":{"crate_id":7,"path":["libc","unix","fpos_t"],"kind":"enum"},"6:7687:16953":{"crate_id":6,"path":["std","env","VarError"],"kind":"enum"},"1:22200:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"18:11500:12080":{"crate_id":18,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:52650:14344":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"18:13366:12572":{"crate_id":18,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"18:10642:23479":{"crate_id":18,"path":["object","read","SymbolSection"],"kind":"enum"},"24:1007:16767":{"crate_id":24,"path":["typenum","private","PrivateMin"],"kind":"trait"},"17:2993:12698":{"crate_id":17,"path":["gimli","common","DwoId"],"kind":"struct"},"17:2579:12663":{"crate_id":17,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:10996:14145":{"crate_id":6,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"10:586:13033":{"crate_id":10,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"13:119:11465":{"crate_id":13,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:8797:5267":{"crate_id":6,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"23:437:5387":{"crate_id":23,"path":["generic_array","ArrayConsumer"],"kind":"struct"},"18:10894:11943":{"crate_id":18,"path":["object","read","CompressedData"],"kind":"struct"},"1:9243:144":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:1550:11489":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"6:8743:15186":{"crate_id":6,"path":["std","process","CommandArgs"],"kind":"struct"},"6:8867:17133":{"crate_id":6,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:6241:14539":{"crate_id":17,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"18:8368:23473":{"crate_id":18,"path":["object","common","FileFlags"],"kind":"enum"},"6:4439:17060":{"crate_id":6,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:2230:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"24:642:5356":{"crate_id":24,"path":["typenum","marker_traits","Integer"],"kind":"trait"},"1:53385:14363":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:3152:5261":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:12323:11504":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"13:393:38287":{"crate_id":13,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"19:636:11729":{"crate_id":19,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"18:12730:12391":{"crate_id":18,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"18:13176:12505":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:688:16940":{"crate_id":6,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:9110:14643":{"crate_id":6,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:7473:15213":{"crate_id":6,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"7:5453:13670":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"18:9658:14965":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"5:6939:11547":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:11211:15163":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:5558:23406":{"crate_id":17,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"24:989:16724":{"crate_id":24,"path":["typenum","private","PrivateDivInt"],"kind":"trait"},"24:613:179":{"crate_id":24,"path":["typenum","marker_traits","Ord"],"kind":"trait"},"17:7659:23417":{"crate_id":17,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:8986:14152":{"crate_id":6,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:48947:205":{"crate_id":1,"path":["core","sync","atomic","Ordering","Relaxed"],"kind":"foreign_type"},"18:12630:12354":{"crate_id":18,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:4024:16301":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"7:5709:13811":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:3389:15230":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"6:11840:409":{"crate_id":6,"path":["std","char"],"kind":"primitive"},"6:7848:118":{"crate_id":6,"path":["std","fs","DirBuilder"],"kind":"struct"},"7:5670:13797":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"7:6287:13890":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"7:5482:13694":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:8761:14144":{"crate_id":6,"path":["std","process","ExitStatus"],"kind":"struct"},"17:7497:12685":{"crate_id":17,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:48794:5267":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"22:54:16779":{"crate_id":22,"path":["crypto_common","InnerInit"],"kind":"trait"},"4:457:14178":{"crate_id":4,"path":["digest","core_api","ct_variable","NoOid"],"kind":"struct"},"18:10403:11933":{"crate_id":18,"path":["object","read","pe","import","Import"],"kind":"enum"},"24:1031:16730":{"crate_id":24,"path":["typenum","private","IsLessPrivate"],"kind":"trait"},"18:13007:12457":{"crate_id":18,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:21129:16487":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"24:785:16756":{"crate_id":24,"path":["typenum","private","Trim"],"kind":"trait"},"25:93:127":{"crate_id":25,"path":["block_buffer","Error"],"kind":"struct"},"5:1091:33919":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"5:4103:5267":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:2433:12657":{"crate_id":17,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"18:10434:14452":{"crate_id":18,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"18:9165:38311":{"crate_id":18,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"7:579:13184":{"crate_id":7,"path":["libc","unix","tms"],"kind":"struct"},"5:7063:16805":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"7:4241:13430":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:1634:577":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"18:11661:12109":{"crate_id":18,"path":["object","macho","Section32"],"kind":"struct"},"1:22299:167":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"18:12134:12195":{"crate_id":18,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"18:13114:12490":{"crate_id":18,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"18:10921:11944":{"crate_id":18,"path":["object","archive","Header"],"kind":"struct"},"13:60:38285":{"crate_id":13,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:7956:12697":{"crate_id":17,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"5:3611:14624":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"18:11356:12044":{"crate_id":18,"path":["object","elf","HashHeader"],"kind":"struct"},"4:336:5230":{"crate_id":4,"path":["digest","core_api","ExtendableOutputCore"],"kind":"trait"},"18:11271:12016":{"crate_id":18,"path":["object","elf","Verdef"],"kind":"struct"},"1:48734:178":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"4:341:1779":{"crate_id":4,"path":["digest","core_api","VariableOutputCore"],"kind":"trait"},"7:4645:13580":{"crate_id":7,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:3989:15232":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:9861:14775":{"crate_id":6,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"10:382:22431":{"crate_id":10,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:6805:12851":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"5:6931:11555":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"18:12237:12217":{"crate_id":18,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:3278:15134":{"crate_id":6,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:48024:14766":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"5:3127:14619":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"18:12934:12443":{"crate_id":18,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:12836:5859":{"crate_id":1,"path":["core","core_arch","x86","cpuid","__cpuid_count"],"kind":"function"},"6:3239:15132":{"crate_id":6,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:9091:14157":{"crate_id":6,"path":["std","time","SystemTime"],"kind":"struct"},"0:102:1662":{"crate_id":0,"path":["sha2","Sha384"],"kind":"typedef"},"6:946:11555":{"crate_id":6,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"6:11304:11530":{"crate_id":6,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:12837:5858":{"crate_id":1,"path":["core","core_arch","x86","cpuid","__cpuid"],"kind":"function"},"13:861:15093":{"crate_id":13,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"5:7139:14687":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:21668:14704":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"18:8774:11828":{"crate_id":18,"path":["object","read","util","ByteString"],"kind":"struct"},"7:5694:13809":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:22101:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"4:531:1935":{"crate_id":4,"path":["digest","InvalidBufferSize"],"kind":"struct"},"19:0:1923":{"crate_id":19,"path":["memchr"],"kind":"module"},"6:3276:15133":{"crate_id":6,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:8184:17024":{"crate_id":6,"path":["std","net","Shutdown"],"kind":"enum"},"7:4669:13591":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:11008:36879":{"crate_id":6,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"23:260:5397":{"crate_id":23,"path":["generic_array","sequence","GenericSequence"],"kind":"trait"},"6:11854:729":{"crate_id":6,"path":["std","i32"],"kind":"primitive"},"1:2933:5680":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:7872:14600":{"crate_id":17,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"18:10283:15000":{"crate_id":18,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:7097:5684":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:47655:14743":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"13:1138:15099":{"crate_id":13,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"6:7952:17018":{"crate_id":6,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:5787:11494":{"crate_id":6,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:47764:11727":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"18:11315:12033":{"crate_id":18,"path":["object","elf","Vernaux"],"kind":"struct"},"6:8147:14760":{"crate_id":6,"path":["std","io","Take"],"kind":"struct"},"6:721:16941":{"crate_id":6,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"17:8014:12852":{"crate_id":17,"path":["gimli","read","value","Value"],"kind":"enum"},"6:8173:15181":{"crate_id":6,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:2367:12654":{"crate_id":17,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"18:9712:11851":{"crate_id":18,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"6:920:14617":{"crate_id":6,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"6:11811:16942":{"crate_id":6,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:58912:14382":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"7:4561:13541":{"crate_id":7,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"8:0:1505":{"crate_id":8,"path":["unwind"],"kind":"module"},"6:11846:1366":{"crate_id":6,"path":["std","str"],"kind":"primitive"},"6:10338:11521":{"crate_id":6,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"10:33:22397":{"crate_id":10,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"5:6511:11582":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"18:8666:11824":{"crate_id":18,"path":["object","endian","I32Bytes"],"kind":"struct"},"6:2873:11488":{"crate_id":6,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"7:4447:13506":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:20726:16486":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"19:531:14419":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:50067:5945":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"5:836:11543":{"crate_id":5,"path":["alloc","collections","binary_heap","retain","RebuildOnDrop"],"kind":"struct"},"18:13158:12501":{"crate_id":18,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:48810:11094":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"23:403:1827":{"crate_id":23,"path":["generic_array","GenericArray"],"kind":"struct"},"10:956:22330":{"crate_id":10,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"18:10139:11842":{"crate_id":18,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:6108:11504":{"crate_id":6,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"15:215:14608":{"crate_id":15,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:3173:16272":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"18:13572:12624":{"crate_id":18,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"19:515:11712":{"crate_id":19,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"7:6332:13914":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"25:106:5232":{"crate_id":25,"path":["block_buffer","BlockBuffer"],"kind":"struct"},"17:4385:12716":{"crate_id":17,"path":["gimli","constants","DwAccess"],"kind":"struct"},"18:9885:14985":{"crate_id":18,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:3964:17033":{"crate_id":6,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"7:4149:13371":{"crate_id":7,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"5:5614:11555":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"7:6489:13989":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"18:9339:14950":{"crate_id":18,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:10141:5269":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:4603:13933":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"6:10396:15129":{"crate_id":6,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"18:10752:11933":{"crate_id":18,"path":["object","read","Import"],"kind":"struct"},"1:21819:16100":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"4:334:5229":{"crate_id":4,"path":["digest","core_api","FixedOutputCore"],"kind":"trait"},"17:4262:12712":{"crate_id":17,"path":["gimli","constants","DwAte"],"kind":"struct"},"13:2190:38284":{"crate_id":13,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"18:12307:12225":{"crate_id":18,"path":["object","macho","Nlist32"],"kind":"struct"},"6:962:15100":{"crate_id":6,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"7:4708:13611":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"24:1174:5370":{"crate_id":24,"path":["typenum","type_operators","Abs"],"kind":"trait"},"18:8339:23472":{"crate_id":18,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:6161:23409":{"crate_id":17,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:52631:14343":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:51110:16438":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:10929:11525":{"crate_id":6,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"18:11528:12087":{"crate_id":18,"path":["object","macho","FatHeader"],"kind":"struct"},"18:12176:12203":{"crate_id":18,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"5:7233:11471":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"17:7298:14593":{"crate_id":17,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"7:4222:13417":{"crate_id":7,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"24:621:1781":{"crate_id":24,"path":["typenum","marker_traits","Unsigned"],"kind":"trait"},"1:9021:191":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"6:11864:1102":{"crate_id":6,"path":["std","reference"],"kind":"primitive"},"1:8245:15239":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"13:1872:14622":{"crate_id":13,"path":["hashbrown","set","Union"],"kind":"struct"},"7:1568:13231":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:11591:16440":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"18:8475:23454":{"crate_id":18,"path":["object","endian","Endianness"],"kind":"enum"},"6:11865:13":{"crate_id":6,"path":["std","fn"],"kind":"primitive"},"7:5737:13825":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"18:11828:12134":{"crate_id":18,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"6:6644:15158":{"crate_id":6,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"18:3125:14933":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:7557:14595":{"crate_id":17,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"7:6339:13918":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"18:12797:12410":{"crate_id":18,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"18:13459:12598":{"crate_id":18,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"13:1044:22486":{"crate_id":13,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"18:12739:12395":{"crate_id":18,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:10734:1768":{"crate_id":1,"path":["core","slice","raw","from_ref"],"kind":"function"},"6:4150:17056":{"crate_id":6,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"18:9553:11842":{"crate_id":18,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"7:1506:13198":{"crate_id":7,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:10609:15208":{"crate_id":6,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"6:8819:14147":{"crate_id":6,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"7:7176:14052":{"crate_id":7,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:47355:14721":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:47461:14734":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"18:13536:12620":{"crate_id":18,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"4:430:1931":{"crate_id":4,"path":["digest","ExtendableOutput"],"kind":"trait"},"18:9108:14939":{"crate_id":18,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"6:1125:15099":{"crate_id":6,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:3201:15130":{"crate_id":6,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:6654:12790":{"crate_id":17,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"7:4506:13512":{"crate_id":7,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:5541:14478":{"crate_id":17,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"6:3707:15138":{"crate_id":6,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"18:9250:14942":{"crate_id":18,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"18:8510:11819":{"crate_id":18,"path":["object","endian","BigEndian"],"kind":"struct"},"6:1093:14588":{"crate_id":6,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:49733:67":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"18:10108:14990":{"crate_id":18,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"22:56:16780":{"crate_id":22,"path":["crypto_common","InnerIvInit"],"kind":"trait"},"1:11088:16433":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:6873:36658":{"crate_id":6,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"8:32:22314":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"18:13557:12623":{"crate_id":18,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"6:10807:13101":{"crate_id":6,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:52715:14346":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"18:11617:12101":{"crate_id":18,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"7:4345:13480":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:1969:16973":{"crate_id":6,"path":["std","error","Indented"],"kind":"struct"},"7:4693:13605":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:9975:5272":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:1940:15120":{"crate_id":6,"path":["std","error","Report"],"kind":"struct"},"17:4786:12728":{"crate_id":17,"path":["gimli","constants","DwLns"],"kind":"struct"},"5:5094:11537":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:7084:133":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:39869:15169":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"18:9475:14958":{"crate_id":18,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"7:6362:13936":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"19:113:27217":{"crate_id":19,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:6865:11495":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"6:8813:11094":{"crate_id":6,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:2487:12659":{"crate_id":17,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"18:12060:12184":{"crate_id":18,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:49507:11158":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"25:77:1770":{"crate_id":25,"path":["block_buffer","Eager"],"kind":"struct"},"17:5878:22521":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:52512:14338":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:52591:14341":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:29939:5390":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:7670:14625":{"crate_id":6,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:21786:14706":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:3167:134":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:8299:14124":{"crate_id":6,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:49854:11155":{"crate_id":1,"path":["core","fmt","FlagV1"],"kind":"enum"},"18:11186:12001":{"crate_id":18,"path":["object","elf","Rela64"],"kind":"struct"},"18:11034:11978":{"crate_id":18,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:2302:185":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:6816:14580":{"crate_id":17,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:21807:14709":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:889:5267":{"crate_id":6,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"7:6555:14025":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"18:12948:12446":{"crate_id":18,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:8167:14800":{"crate_id":6,"path":["std","io","Lines"],"kind":"struct"},"1:20404:11053":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:7947:15175":{"crate_id":6,"path":["std","io","error","Custom"],"kind":"struct"},"7:1894:18561":{"crate_id":7,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"6:413:162":{"crate_id":6,"path":["std","thread","local","LocalKey"],"kind":"struct"},"13:1085:15097":{"crate_id":13,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"13:1681:143":{"crate_id":13,"path":["hashbrown","set","HashSet"],"kind":"struct"},"18:13327:12558":{"crate_id":18,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:11016:14162":{"crate_id":6,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"1:9283:11378":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:8805:15188":{"crate_id":6,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:12136:32137":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:5122:12733":{"crate_id":17,"path":["gimli","constants","DwOp"],"kind":"struct"},"6:1813:598":{"crate_id":6,"path":["std","env"],"kind":"module"},"6:2591:11483":{"crate_id":6,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:7343:12693":{"crate_id":17,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:47827:14762":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:9936:5288":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"18:11639:12108":{"crate_id":18,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"24:1168:5369":{"crate_id":24,"path":["typenum","type_operators","Same"],"kind":"trait"},"1:21612:14192":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:8966:15195":{"crate_id":6,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"18:9401:11839":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:3429:15136":{"crate_id":6,"path":["std","io","IoSliceMut"],"kind":"struct"},"6:4762:11490":{"crate_id":6,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"5:6201:11537":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"6:4785:17043":{"crate_id":6,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:2681:11046":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:12188:15241":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"7:4408:13503":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:7051:16375":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"23:143:5394":{"crate_id":23,"path":["generic_array","functional","MappedGenericSequence"],"kind":"trait"},"24:1151:16751":{"crate_id":24,"path":["typenum","private","PrivateSquareRoot"],"kind":"trait"},"17:6017:15030":{"crate_id":17,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"6:547:11479":{"crate_id":6,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:50990:14801":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"21:46:127":{"crate_id":21,"path":["blobby","Error"],"kind":"enum"},"1:57611:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:5472:12681":{"crate_id":17,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:22266:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"18:12251:12218":{"crate_id":18,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:46896:197":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"19:766:27226":{"crate_id":19,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:25640:14212":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"7:4216:13414":{"crate_id":7,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"4:332:1775":{"crate_id":4,"path":["digest","core_api","BufferKindUser"],"kind":"trait"},"7:7230:14055":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:4888:12731":{"crate_id":17,"path":["gimli","constants","DwMacro"],"kind":"struct"},"7:6519:14006":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:971:15086":{"crate_id":6,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"22:22:1773":{"crate_id":22,"path":["crypto_common","BlockSizeUser"],"kind":"trait"},"7:7299:14070":{"crate_id":7,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"7:526:13156":{"crate_id":7,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"5:781:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:10169:5270":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"18:10708:14458":{"crate_id":18,"path":["object","read","ObjectMap"],"kind":"struct"},"18:12008:12178":{"crate_id":18,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"24:783:16721":{"crate_id":24,"path":["typenum","private","InternalMarker"],"kind":"trait"},"1:9278:11377":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"13:300:14614":{"crate_id":13,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:5388:12680":{"crate_id":17,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:48600:16384":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:3263:12702":{"crate_id":17,"path":["gimli","arch","RiscV"],"kind":"struct"},"21:118:16717":{"crate_id":21,"path":["blobby","Blob6Iterator"],"kind":"struct"},"7:4683:13599":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:3854:12709":{"crate_id":17,"path":["gimli","constants","DwTag"],"kind":"struct"},"24:1184:5328":{"crate_id":24,"path":["typenum","type_operators","Pow"],"kind":"trait"},"1:48819:14309":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"7:4125:13353":{"crate_id":7,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:51473:14839":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:3162:231":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:7278:12690":{"crate_id":17,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:3206:16277":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:10687:5287":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:6186:12678":{"crate_id":17,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:7088:149":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"18:10394:14451":{"crate_id":18,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:11545:16431":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:20664:16492":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:52428:14335":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:4441:12718":{"crate_id":17,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:8966:131":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:47333:14719":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"7:5508:13709":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:50605:5279":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"24:1279:5329":{"crate_id":24,"path":["typenum","type_operators","ToInt"],"kind":"trait"},"6:11852:731":{"crate_id":6,"path":["std","i8"],"kind":"primitive"},"1:48672:14778":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:4662:12724":{"crate_id":17,"path":["gimli","constants","DwOrd"],"kind":"struct"},"4:383:1939":{"crate_id":4,"path":["digest","digest","DynDigest"],"kind":"trait"},"18:11014:11968":{"crate_id":18,"path":["object","elf","SectionHeader32"],"kind":"struct"},"18:10233:14996":{"crate_id":18,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"5:7156:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:5815:23407":{"crate_id":17,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"18:10822:23480":{"crate_id":18,"path":["object","read","RelocationTarget"],"kind":"enum"},"5:7250:11576":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"4:421:1928":{"crate_id":4,"path":["digest","FixedOutput"],"kind":"trait"},"4:328:1774":{"crate_id":4,"path":["digest","core_api","Buffer"],"kind":"typedef"},"1:10127:5273":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"21:79:16714":{"crate_id":21,"path":["blobby","Blob3Iterator"],"kind":"struct"},"6:1628:14620":{"crate_id":6,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:21538:14699":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"7:1580:13239":{"crate_id":7,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"7:4284:13448":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:6735:15045":{"crate_id":17,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"7:4771:13636":{"crate_id":7,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:1606:5267":{"crate_id":6,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"18:13436:12597":{"crate_id":18,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"13:815:15087":{"crate_id":13,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"18:13039:12467":{"crate_id":18,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"6:6915:11514":{"crate_id":6,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"6:3167:38196":{"crate_id":6,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:7309:12691":{"crate_id":17,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:21757:28549":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"17:2320:12652":{"crate_id":17,"path":["gimli","common","Register"],"kind":"struct"},"6:576:11480":{"crate_id":6,"path":["std","thread","Packet"],"kind":"struct"},"17:5460:14471":{"crate_id":17,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"13:0:1917":{"crate_id":13,"path":["hashbrown"],"kind":"module"},"19:599:38320":{"crate_id":19,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:7603:12873":{"crate_id":17,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"18:11974:12175":{"crate_id":18,"path":["object","macho","DylibModule64"],"kind":"struct"},"7:532:13159":{"crate_id":7,"path":["libc","unix","hostent"],"kind":"struct"},"17:4574:12721":{"crate_id":17,"path":["gimli","constants","DwId"],"kind":"struct"},"17:7093:12833":{"crate_id":17,"path":["gimli","read","op","Piece"],"kind":"struct"},"18:9350:11813":{"crate_id":18,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"6:6575:11512":{"crate_id":6,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:46936:196":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"13:777:11475":{"crate_id":13,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"1:9019:11159":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:6593:14570":{"crate_id":17,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"22:33:1776":{"crate_id":22,"path":["crypto_common","OutputSizeUser"],"kind":"trait"},"18:10360:14442":{"crate_id":18,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"18:10182:11894":{"crate_id":18,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"13:1859:14620":{"crate_id":13,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:22332:168":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"6:10683:118":{"crate_id":6,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"7:7253:14061":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"5:1212:14588":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"24:1251:5374":{"crate_id":24,"path":["typenum","type_operators","IsNotEqual"],"kind":"trait"},"17:5963:191":{"crate_id":17,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:2253:105":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"5:2874:36363":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"13:1518:22487":{"crate_id":13,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:998:15092":{"crate_id":6,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"18:8701:11825":{"crate_id":18,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:51034:14716":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"5:7051:14681":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:8332:17091":{"crate_id":6,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"6:1830:15116":{"crate_id":6,"path":["std","env","VarsOs"],"kind":"struct"},"6:7573:16727":{"crate_id":6,"path":["std","sealed","Sealed"],"kind":"trait"},"18:10497:23587":{"crate_id":18,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"18:12909:12435":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:7288:14592":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:20677:16727":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:47000:200":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"18:12322:12229":{"crate_id":18,"path":["object","macho","Nlist64"],"kind":"struct"},"18:8162:23467":{"crate_id":18,"path":["object","common","SectionKind"],"kind":"enum"},"13:632:5267":{"crate_id":13,"path":["hashbrown","map","Iter"],"kind":"struct"},"18:13478:12603":{"crate_id":18,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"24:844:16749":{"crate_id":24,"path":["typenum","private","PrivatePow"],"kind":"trait"},"18:11087:11985":{"crate_id":18,"path":["object","elf","Sym32"],"kind":"struct"},"18:11893:12140":{"crate_id":18,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:2341:12653":{"crate_id":17,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"14:0:1918":{"crate_id":14,"path":["std_detect"],"kind":"module"},"1:9868:5268":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"6:11327:15137":{"crate_id":6,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"18:11300:12027":{"crate_id":18,"path":["object","elf","Verneed"],"kind":"struct"},"7:4459:13507":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"10:19:22396":{"crate_id":10,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"24:612:5325":{"crate_id":24,"path":["typenum","marker_traits","Zero"],"kind":"trait"},"10:896:22328":{"crate_id":10,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:53415:14364":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"7:5851:13853":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:48039:14769":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:5588:11492":{"crate_id":6,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"7:4310:13461":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"7:5723:13822":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:9017:11158":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:5347:15144":{"crate_id":6,"path":["std","process","Child"],"kind":"struct"},"6:10828:36667":{"crate_id":6,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"6:11861:1458":{"crate_id":6,"path":["std","u128"],"kind":"primitive"},"17:5411:12682":{"crate_id":17,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"7:5845:13852":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:1758:14183":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"18:13594:12630":{"crate_id":18,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"18:9873:14984":{"crate_id":18,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"5:4064:11489":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"6:7649:16937":{"crate_id":6,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:8973:15196":{"crate_id":6,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:9482:11602":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:11540:16432":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:50579:5283":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:5581:203":{"crate_id":6,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:51695:14326":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:7929:15077":{"crate_id":17,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:22431:14210":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:53685:14369":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:6259:203":{"crate_id":6,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:49291:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"18:10350:11901":{"crate_id":18,"path":["object","read","pe","export","Export"],"kind":"struct"},"19:652:11709":{"crate_id":19,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"10:649:22348":{"crate_id":10,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"18:10310:15002":{"crate_id":18,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:2605:12664":{"crate_id":17,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"24:2808:1782":{"crate_id":24,"path":["typenum","generated","consts","U128"],"kind":"typedef"},"7:4826:13666":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:5949:203":{"crate_id":6,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"7:0:802":{"crate_id":7,"path":["libc"],"kind":"module"},"6:8749:183":{"crate_id":6,"path":["std","process","Output"],"kind":"struct"},"22:0:1925":{"crate_id":22,"path":["crypto_common"],"kind":"module"},"18:8596:11822":{"crate_id":18,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:2282:12644":{"crate_id":17,"path":["gimli","common","Encoding"],"kind":"struct"},"1:4289:11590":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"18:12980:12453":{"crate_id":18,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:2401:16982":{"crate_id":6,"path":["std","fs","read_link"],"kind":"function"},"18:11161:11998":{"crate_id":18,"path":["object","elf","Rela32"],"kind":"struct"},"5:6349:11537":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:21741:28577":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:5494:23405":{"crate_id":17,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"22:36:16774":{"crate_id":22,"path":["crypto_common","KeySizeUser"],"kind":"trait"},"6:912:11094":{"crate_id":6,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"24:1276:5332":{"crate_id":24,"path":["typenum","type_operators","Gcd"],"kind":"trait"},"17:6034:15034":{"crate_id":17,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:4144:12710":{"crate_id":17,"path":["gimli","constants","DwAt"],"kind":"struct"},"5:3477:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:2862:16268":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:47716:14751":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:11851:631":{"crate_id":6,"path":["std","f64"],"kind":"primitive"},"23:317:5271":{"crate_id":23,"path":["generic_array","sequence","Split"],"kind":"trait"},"17:6781:15046":{"crate_id":17,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:50696:14785":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"13:1029:15095":{"crate_id":13,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:48708:14305":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"18:8494:11818":{"crate_id":18,"path":["object","endian","LittleEndian"],"kind":"struct"},"24:6316:5215":{"crate_id":24,"path":["typenum","uint","UInt"],"kind":"struct"},"23:123:16718":{"crate_id":23,"path":["generic_array","arr","AddLength"],"kind":"trait"},"17:2535:12661":{"crate_id":17,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:7472:16299":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"5:3680:11471":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"17:7372:38304":{"crate_id":17,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"18:9844:14980":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:30073:28562":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"18:1962:14931":{"crate_id":18,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:49751:70":{"crate_id":1,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"7:4778:13639":{"crate_id":7,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"18:9371:14939":{"crate_id":18,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"6:11053:14163":{"crate_id":6,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:11534:14428":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:52937:14352":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"23:163:5396":{"crate_id":23,"path":["generic_array","functional","FunctionalSequence"],"kind":"trait"},"18:2916:14932":{"crate_id":18,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"5:6961:11094":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:47778:14756":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:2705:12668":{"crate_id":17,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:2838:12815":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"24:1211:5233":{"crate_id":24,"path":["typenum","type_operators","IsLess"],"kind":"trait"},"24:1231:5372":{"crate_id":24,"path":["typenum","type_operators","IsGreater"],"kind":"trait"},"21:11:16706":{"crate_id":21,"path":["blobby","BlobIterator"],"kind":"struct"},"13:2069:15094":{"crate_id":13,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:11494:14664":{"crate_id":6,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:49331:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:9021:14155":{"crate_id":6,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"6:5381:15148":{"crate_id":6,"path":["std","process","ChildStdout"],"kind":"struct"},"17:6210:14537":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:6109:12747":{"crate_id":17,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:6463:14555":{"crate_id":17,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"18:9909:11854":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"5:6947:36283":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:54433:14375":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:1749:14180":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:50285:14783":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"5:273:11537":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:7595:15164":{"crate_id":6,"path":["std","thread","Builder"],"kind":"struct"},"1:2344:186":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:22233:5258":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:2389:12655":{"crate_id":17,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"4:358:1620":{"crate_id":4,"path":["digest","digest","Digest"],"kind":"trait"},"1:50522:5265":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:9984:36892":{"crate_id":6,"path":["std","sys","unix","os","Env"],"kind":"struct"},"13:320:11467":{"crate_id":13,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"18:11787:12127":{"crate_id":18,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"22:39:16775":{"crate_id":22,"path":["crypto_common","IvSizeUser"],"kind":"trait"},"6:981:16946":{"crate_id":6,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"7:4257:13436":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:11853:728":{"crate_id":6,"path":["std","i16"],"kind":"primitive"},"5:1422:15100":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"18:11125:11991":{"crate_id":18,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:7044:38303":{"crate_id":17,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"7:4675:13594":{"crate_id":7,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"5:3093:14620":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"5:7079:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:48861:16393":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"18:8272:23470":{"crate_id":18,"path":["object","common","SymbolScope"],"kind":"enum"},"5:2094:14673":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:49870:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"23:362:5312":{"crate_id":23,"path":["generic_array","ArrayLength"],"kind":"trait"},"1:2833:16264":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:22068:175":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:51453:14834":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:2593:127":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"17:7469:12694":{"crate_id":17,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:52360:14332":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"18:12768:12402":{"crate_id":18,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:2727:12669":{"crate_id":17,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"18:8418:23475":{"crate_id":18,"path":["object","common","SectionFlags"],"kind":"enum"},"6:10912:1940":{"crate_id":6,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:5614:14483":{"crate_id":17,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:7435:12861":{"crate_id":17,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:2940:5260":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"24:933:16759":{"crate_id":24,"path":["typenum","private","PrivateSetBit"],"kind":"trait"},"22:46:1771":{"crate_id":22,"path":["crypto_common","AlgorithmName"],"kind":"trait"},"18:13518:12614":{"crate_id":18,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"18:11721:12118":{"crate_id":18,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"6:10441:11522":{"crate_id":6,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:47503:16329":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"typedef"},"7:5759:13832":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:50712:11826":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:47103:14286":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:9159:15240":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:54183:14372":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:9368:15170":{"crate_id":6,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"7:1531:13208":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:10663:14077":{"crate_id":6,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"6:11822:36669":{"crate_id":6,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:51325:14824":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"26:0:1666":{"crate_id":26,"path":["cfg_if"],"kind":"module"},"24:942:16761":{"crate_id":24,"path":["typenum","private","PrivateDiv"],"kind":"trait"},"18:12046:12183":{"crate_id":18,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:20846:16727":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"5:1413:14618":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"19:491:14418":{"crate_id":19,"path":["memchr","cow","Imp"],"kind":"struct"},"7:4807:13658":{"crate_id":7,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:50702:14786":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:11309:14797":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:1107:15094":{"crate_id":6,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:21134:16510":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"13:1534:15101":{"crate_id":13,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:50624:5280":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:48937:11094":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:57598:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"18:9897:14986":{"crate_id":18,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"13:1852:14619":{"crate_id":13,"path":["hashbrown","set","Intersection"],"kind":"struct"},"5:1708:11471":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"1:21793:14209":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"18:9601:11850":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"7:6534:14013":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:51445:14832":{"crate_id":1,"path":["core","str","LinesAnyMap"],"kind":"struct"},"6:3704:15137":{"crate_id":6,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"18:12211:12215":{"crate_id":18,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:4413:12717":{"crate_id":17,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:20638:16491":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"7:500:13136":{"crate_id":7,"path":["libc","unix","rlimit"],"kind":"struct"},"17:7329:12692":{"crate_id":17,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"10:0:1914":{"crate_id":10,"path":["miniz_oxide"],"kind":"module"},"1:22365:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"18:11343:12043":{"crate_id":18,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:9051:164":{"crate_id":6,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"7:5533:13714":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:48629:14304":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"5:3943:5268":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"19:727:11733":{"crate_id":19,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:51449:14833":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:47386:16323":{"crate_id":1,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"5:5548:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:5203:11818":{"crate_id":17,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"6:8137:14737":{"crate_id":6,"path":["std","io","Chain"],"kind":"struct"},"18:9501:11835":{"crate_id":18,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:53651:14368":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:47402:14728":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"6:9062:215":{"crate_id":6,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"22:75:11704":{"crate_id":22,"path":["crypto_common","InvalidLength"],"kind":"struct"},"6:1478:143":{"crate_id":6,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"10:111:22342":{"crate_id":10,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"1:20472:16737":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"6:3958:17032":{"crate_id":6,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"6:7796:15170":{"crate_id":6,"path":["std","fs","ReadDir"],"kind":"struct"},"24:2508:1626":{"crate_id":24,"path":["typenum","generated","consts","U28"],"kind":"typedef"},"1:51500:121":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"17:6052:15042":{"crate_id":17,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"18:9362:11842":{"crate_id":18,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"7:1720:13328":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:30179:28586":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"6:11841:1478":{"crate_id":6,"path":["std","unit"],"kind":"primitive"},"6:4667:17060":{"crate_id":6,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"18:9446:14954":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:54739:10986":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"7:5635:13776":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"18:12816:12411":{"crate_id":18,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"7:4290:13450":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:20851:16483":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"17:4921:12732":{"crate_id":17,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:48852:15251":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:51000:14802":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"7:1606:13255":{"crate_id":7,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:12163:189":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"7:4427:13504":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"18:10506:11911":{"crate_id":18,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"6:10120:17117":{"crate_id":6,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"6:4589:17033":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"7:4136:13361":{"crate_id":7,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:22398:166":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"22:12:1772":{"crate_id":22,"path":["crypto_common","Block"],"kind":"typedef"},"1:47595:14737":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:2338:179":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"5:3902:11537":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:4728:28378":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"6:526:11478":{"crate_id":6,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"22:44:1940":{"crate_id":22,"path":["crypto_common","Reset"],"kind":"trait"},"1:6563:16378":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:6376:23410":{"crate_id":17,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"7:6419:13944":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:50289:5296":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"18:12022:12180":{"crate_id":18,"path":["object","macho","TwolevelHint"],"kind":"struct"},"24:1190:5323":{"crate_id":24,"path":["typenum","type_operators","Cmp"],"kind":"trait"},"18:13279:12557":{"crate_id":18,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:6124:11507":{"crate_id":6,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"7:7224:14054":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"7:595:13194":{"crate_id":7,"path":["libc","unix","protoent"],"kind":"struct"},"1:4150:11170":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"17:8056:12919":{"crate_id":17,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"6:1634:14621":{"crate_id":6,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"7:6548:14022":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:4749:12727":{"crate_id":17,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:2496:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:2937:5681":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"17:3566:12704":{"crate_id":17,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:51457:14835":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"18:9061:11842":{"crate_id":18,"path":["object","read","any","SymbolTable"],"kind":"struct"},"6:355:15103":{"crate_id":6,"path":["std","thread","scoped","Scope"],"kind":"struct"},"18:8871:14935":{"crate_id":18,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:7396:23415":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:2771:12671":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"18:12291:12223":{"crate_id":18,"path":["object","macho","NoteCommand"],"kind":"struct"},"7:7247:14060":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"18:242:14921":{"crate_id":18,"path":["object","read","util","DebugByte"],"kind":"struct"},"18:8212:23468":{"crate_id":18,"path":["object","common","ComdatKind"],"kind":"enum"},"7:1538:13211":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"18:13221:12515":{"crate_id":18,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"18:11576:12097":{"crate_id":18,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:49131:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:50930:14798":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"6:10984:14144":{"crate_id":6,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"19:719:11730":{"crate_id":19,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:51018:14804":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:54792:10989":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"10:800:13085":{"crate_id":10,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"18:12638:12355":{"crate_id":18,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"18:562:11938":{"crate_id":18,"path":["object","read","any","Symbol"],"kind":"struct"},"18:13184:12507":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:7516:30307":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"15:160:15081":{"crate_id":15,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:7909:14606":{"crate_id":17,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:4299:11171":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"18:3249:14934":{"crate_id":18,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"5:7178:15229":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"25:85:5307":{"crate_id":25,"path":["block_buffer","Lazy"],"kind":"struct"},"18:10075:14988":{"crate_id":18,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:3950:17031":{"crate_id":6,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"18:12972:12451":{"crate_id":18,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"4:330:1778":{"crate_id":4,"path":["digest","core_api","UpdateCore"],"kind":"trait"},"6:4008:17035":{"crate_id":6,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"13:725:14617":{"crate_id":13,"path":["hashbrown","map","Keys"],"kind":"struct"},"24:615:5336":{"crate_id":24,"path":["typenum","marker_traits","Bit"],"kind":"trait"},"1:51737:14329":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"7:7236:14056":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:57572:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"18:10466:14454":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"6:776:141":{"crate_id":6,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"6:8920:15189":{"crate_id":6,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"1:29756:16062":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"1:9499:11483":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"18:8393:23474":{"crate_id":18,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:54635:5787":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:6316:14549":{"crate_id":17,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"15:187:22497":{"crate_id":15,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:46834:16276":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:47409:14729":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"17:2465:12658":{"crate_id":17,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:4563:16316":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"18:13082:12479":{"crate_id":18,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"18:10420:11905":{"crate_id":18,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"18:11485:12076":{"crate_id":18,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:1604:1332":{"crate_id":1,"path":["core","mem","size_of"],"kind":"function"},"24:1051:16731":{"crate_id":24,"path":["typenum","private","IsEqualPrivate"],"kind":"trait"},"6:6432:11511":{"crate_id":6,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"18:9764:14439":{"crate_id":18,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:51043:14721":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:4721:12726":{"crate_id":17,"path":["gimli","constants","DwIdx"],"kind":"struct"},"18:10997:11965":{"crate_id":18,"path":["object","elf","Ident"],"kind":"struct"},"1:9514:11607":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"10:863:22327":{"crate_id":10,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"5:864:11545":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:11223:14660":{"crate_id":6,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:54579:14378":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"7:6321:13909":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"4:357:1783":{"crate_id":4,"path":["digest","digest","HashMarker"],"kind":"trait"},"1:10155:5274":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:3243:16278":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:52490:14337":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:51481:14162":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:12380:139":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"4:522:1784":{"crate_id":4,"path":["digest","InvalidOutputSize"],"kind":"struct"},"1:54831:5860":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:4201:15140":{"crate_id":6,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:48010:14764":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"13:1628:11476":{"crate_id":13,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:7847:12911":{"crate_id":17,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"6:9965:15117":{"crate_id":6,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"18:11259:12015":{"crate_id":18,"path":["object","elf","Versym"],"kind":"struct"},"18:9155:14940":{"crate_id":18,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:10190:15150":{"crate_id":6,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:3377:16251":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"1:21680:28563":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"18:9947:23560":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"15:221:12995":{"crate_id":15,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"7:474:13123":{"crate_id":7,"path":["libc","unix","group"],"kind":"struct"},"1:47442:14290":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"13:2184:13027":{"crate_id":13,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:20432:27679":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:1917:14187":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:1116:15095":{"crate_id":6,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"16:175:22502":{"crate_id":16,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"18:13168:12504":{"crate_id":18,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:51652:192":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"13:2178:13026":{"crate_id":13,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"7:4277:13445":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:7856:15172":{"crate_id":6,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"7:4814:13661":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:50830:5273":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:49784:109":{"crate_id":1,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"1:47546:15249":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"5:4219:242":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:49091:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:3321:17015":{"crate_id":6,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"5:3086:5267":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"7:4602:13564":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:51521:14841":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"24:1206:5327":{"crate_id":24,"path":["typenum","type_operators","Max"],"kind":"trait"},"1:49211:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"18:13126:12493":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"7:4544:13532":{"crate_id":7,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:54664:5936":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"18:8561:11821":{"crate_id":18,"path":["object","endian","U32Bytes"],"kind":"struct"},"18:12860:12424":{"crate_id":18,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:5981:14529":{"crate_id":17,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:2261:22522":{"crate_id":17,"path":["gimli","common","Format"],"kind":"enum"},"17:2793:12672":{"crate_id":17,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"6:2655:15126":{"crate_id":6,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"18:8822:38310":{"crate_id":18,"path":["object","read","any","FileInternal"],"kind":"enum"},"7:4339:13477":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"18:8752:11826":{"crate_id":18,"path":["object","read","util","Bytes"],"kind":"struct"},"17:7237:12855":{"crate_id":17,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"24:2520:1627":{"crate_id":24,"path":["typenum","generated","consts","U32"],"kind":"typedef"},"1:47799:14760":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:4706:17046":{"crate_id":6,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:50794:14792":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"18:12278:12222":{"crate_id":18,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"7:4726:13622":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"5:3568:11537":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"18:9539:14961":{"crate_id":18,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"4:440:1933":{"crate_id":4,"path":["digest","VariableOutput"],"kind":"trait"},"17:5793:14462":{"crate_id":17,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:7388:15075":{"crate_id":17,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:50542:5278":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"12:36:13031":{"crate_id":12,"path":["adler","algo","U32X4"],"kind":"struct"},"1:50684:14784":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:6508:17129":{"crate_id":6,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"7:7259:14062":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"18:9671:14966":{"crate_id":18,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:0:433":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"5:1443:15086":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:3900:17029":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:2911:127":{"crate_id":6,"path":["std","io","error","Error"],"kind":"struct"},"6:11838:367":{"crate_id":6,"path":["std","bool"],"kind":"primitive"},"18:11909:12145":{"crate_id":18,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"18:8110:23453":{"crate_id":18,"path":["object","common","AddressSize"],"kind":"enum"},"5:5138:5401":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"18:8295:23471":{"crate_id":18,"path":["object","common","RelocationKind"],"kind":"enum"},"18:8881:38316":{"crate_id":18,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"7:4639:13579":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:52813:14349":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:4870:17083":{"crate_id":6,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"7:6385:13937":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"5:6922:14679":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"16:214:22507":{"crate_id":16,"path":["addr2line","RangeAttributes"],"kind":"struct"},"13:1555:15102":{"crate_id":13,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:2867:16269":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"24:6250:5254":{"crate_id":24,"path":["typenum","Greater"],"kind":"struct"},"6:11388:15139":{"crate_id":6,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"6:4664:17085":{"crate_id":6,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:50038:14780":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"18:1771:14927":{"crate_id":18,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"0:98:1654":{"crate_id":0,"path":["sha2","Sha224"],"kind":"typedef"},"18:12349:12232":{"crate_id":18,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:6392:14766":{"crate_id":6,"path":["std","sync","once","Once"],"kind":"struct"},"17:3632:12706":{"crate_id":17,"path":["gimli","constants","DwUt"],"kind":"struct"},"24:1272:5352":{"crate_id":24,"path":["typenum","type_operators","SquareRoot"],"kind":"trait"},"7:1701:13321":{"crate_id":7,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:9229:140":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"7:562:13176":{"crate_id":7,"path":["libc","unix","linger"],"kind":"struct"},"6:975:15087":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:8247:15181":{"crate_id":6,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:3237:15131":{"crate_id":6,"path":["std","io","stdio","Stdout"],"kind":"struct"},"18:11174:12000":{"crate_id":18,"path":["object","elf","Rel64"],"kind":"struct"},"18:9263:14943":{"crate_id":18,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:7890:14603":{"crate_id":17,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"19:660:14916":{"crate_id":19,"path":["memchr","memmem","FindIter"],"kind":"struct"},"7:4716:13616":{"crate_id":7,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"7:4747:13629":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:3906:17028":{"crate_id":6,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"18:12337:11906":{"crate_id":18,"path":["object","macho","Relocation"],"kind":"struct"},"7:4234:13426":{"crate_id":7,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:1622:14619":{"crate_id":6,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"18:10670:14457":{"crate_id":18,"path":["object","read","SymbolMap"],"kind":"struct"},"6:992:15090":{"crate_id":6,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"24:1202:5326":{"crate_id":24,"path":["typenum","type_operators","Min"],"kind":"trait"},"24:821:16754":{"crate_id":24,"path":["typenum","private","PrivateXor"],"kind":"trait"},"1:4227:15235":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:6505:15160":{"crate_id":6,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"24:1241:5373":{"crate_id":24,"path":["typenum","type_operators","IsLessOrEqual"],"kind":"trait"},"19:736:27225":{"crate_id":19,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:49757:130":{"crate_id":1,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"7:4389:13502":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"4:427:1930":{"crate_id":4,"path":["digest","XofReader"],"kind":"trait"},"6:3164:38200":{"crate_id":6,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"18:13148:12498":{"crate_id":18,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"18:10625:11929":{"crate_id":18,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:6780:17138":{"crate_id":6,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:6704:12795":{"crate_id":17,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"24:998:16726":{"crate_id":24,"path":["typenum","private","PrivateRem"],"kind":"trait"},"1:5417:14690":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"6:5095:188":{"crate_id":6,"path":["std","path","PathBuf"],"kind":"struct"},"13:697:15086":{"crate_id":13,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:52406:14334":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"19:590:11717":{"crate_id":19,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"24:611:5235":{"crate_id":24,"path":["typenum","marker_traits","NonZero"],"kind":"trait"},"1:8956:11151":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"6:5524:13839":{"crate_id":6,"path":["std","process","exit"],"kind":"function"},"18:10774:11901":{"crate_id":18,"path":["object","read","Export"],"kind":"struct"},"1:47739:14753":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"18:9422:14952":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:1891:15119":{"crate_id":6,"path":["std","env","ArgsOs"],"kind":"struct"},"1:51725:14844":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:6690:12687":{"crate_id":17,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:11746:111":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:2909:207":{"crate_id":6,"path":["std","io","error","Result"],"kind":"typedef"},"1:47276:14716":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"18:12884:12426":{"crate_id":18,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:8277:13918":{"crate_id":6,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"18:12756:12397":{"crate_id":18,"path":["object","pe","Guid"],"kind":"struct"},"1:50030:11380":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"18:9283:14945":{"crate_id":18,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:58933:14383":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"1:52530:14339":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"7:5730:13824":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"0:100:1658":{"crate_id":0,"path":["sha2","Sha512_224"],"kind":"typedef"},"13:1065:38283":{"crate_id":13,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"5:6274:11094":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:47282:14717":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"5:1404:14617":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:4373:11024":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"18:8941:14936":{"crate_id":18,"path":["object","read","any","SectionIterator"],"kind":"struct"},"7:6582:14031":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"7:4585:13553":{"crate_id":7,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:49251:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:8116:16992":{"crate_id":6,"path":["std","io","SeekFrom"],"kind":"enum"},"5:4297:11561":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:47664:14744":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:2974:16275":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"7:1674:13308":{"crate_id":7,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"6:600:15106":{"crate_id":6,"path":["std","thread","JoinHandle"],"kind":"struct"},"18:11708:12115":{"crate_id":18,"path":["object","macho","Fvmlib"],"kind":"struct"},"18:9930:11856":{"crate_id":18,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"21:66:16713":{"crate_id":21,"path":["blobby","Blob2Iterator"],"kind":"struct"},"1:49500:11156":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"18:11684:12114":{"crate_id":18,"path":["object","macho","Section64"],"kind":"struct"},"1:52316:14330":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:21591:14190":{"crate_id":1,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"1:2233:98":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"18:13134:12496":{"crate_id":18,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:6842:14586":{"crate_id":17,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:2518:15124":{"crate_id":6,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"18:11734:11861":{"crate_id":18,"path":["object","macho","Dylib"],"kind":"struct"},"17:2657:12666":{"crate_id":17,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:50046:11379":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"18:9293:14946":{"crate_id":18,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:2828:16263":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:9691:16727":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:46795:16279":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:2581:11485":{"crate_id":6,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:53575:14366":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:8498:14143":{"crate_id":6,"path":["std","path","Ancestors"],"kind":"struct"},"13:669:15085":{"crate_id":13,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"7:5615:13760":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"18:11536:12089":{"crate_id":18,"path":["object","macho","FatArch32"],"kind":"struct"},"1:54495:14376":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"13:822:16946":{"crate_id":13,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:49371:10992":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:47416:14730":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"6:8851:17132":{"crate_id":6,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"7:4327:13471":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:52959:14353":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:8925:106":{"crate_id":6,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:9015:11157":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"24:1221:5371":{"crate_id":24,"path":["typenum","type_operators","IsEqual"],"kind":"trait"},"7:5578:13746":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"18:8796:11829":{"crate_id":18,"path":["object","read","util","StringTable"],"kind":"struct"},"18:10854:23481":{"crate_id":18,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:6123:12676":{"crate_id":17,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"24:5746:5217":{"crate_id":24,"path":["typenum","int","PInt"],"kind":"struct"},"17:4606:12722":{"crate_id":17,"path":["gimli","constants","DwCc"],"kind":"struct"},"8:79:22321":{"crate_id":8,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"18:10296:15001":{"crate_id":18,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:7808:14077":{"crate_id":6,"path":["std","fs","FileTimes"],"kind":"struct"},"6:4599:13929":{"crate_id":6,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:7475:16373":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:11367:15138":{"crate_id":6,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"18:11137:11994":{"crate_id":18,"path":["object","elf","Syminfo64"],"kind":"struct"},"10:977:13104":{"crate_id":10,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:2684:222":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"10:622:22347":{"crate_id":10,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"7:119:17226":{"crate_id":7,"path":["libc","unix","FILE"],"kind":"enum"},"18:10257:14998":{"crate_id":18,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"7:7289:14068":{"crate_id":7,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:29979:11042":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:6211:11492":{"crate_id":6,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:9400:11600":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:7047:5354":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:8440:17106":{"crate_id":6,"path":["std","path","Component"],"kind":"enum"},"1:29973:5389":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:8423:14137":{"crate_id":6,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:2868:12675":{"crate_id":17,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"24:5814:5221":{"crate_id":24,"path":["typenum","int","Z0"],"kind":"struct"},"27:0:1667":{"crate_id":27,"path":["cpufeatures"],"kind":"module"},"5:2375:14171":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"6:11860:1461":{"crate_id":6,"path":["std","u64"],"kind":"primitive"},"1:47678:14747":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:3188:12701":{"crate_id":17,"path":["gimli","arch","AArch64"],"kind":"struct"},"5:679:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"4:160:1633":{"crate_id":4,"path":["digest","impl_oid_carrier"],"kind":"macro"},"1:9844:5267":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"15:202:16833":{"crate_id":15,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"18:9382:11837":{"crate_id":18,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"7:4788:13644":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"7:4485:13509":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"7:4195:13405":{"crate_id":7,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:3493:17010":{"crate_id":6,"path":["std","io","BufRead"],"kind":"trait"},"1:2774:12810":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:47586:15250":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:5219:11819":{"crate_id":17,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"4:448:1934":{"crate_id":4,"path":["digest","VariableOutputReset"],"kind":"trait"},"1:52983:14354":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:4218:204":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"4:512:1777":{"crate_id":4,"path":["digest","core_api","TruncSide"],"kind":"enum"},"1:2799:16261":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"4:473:1632":{"crate_id":4,"path":["digest","core_api","ct_variable","CtVariableCoreWrapper"],"kind":"struct"},"5:1454:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"7:4471:13508":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"6:7621:11522":{"crate_id":6,"path":["std","thread","Thread"],"kind":"struct"},"1:20720:16484":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:50670:14319":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:534:14460":{"crate_id":17,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"7:4371:13491":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"5:3623:15219":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"5:3699:11537":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"7:7008:14051":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:5882:14692":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"24:5702:5219":{"crate_id":24,"path":["typenum","bit","B0"],"kind":"struct"},"24:5780:5218":{"crate_id":24,"path":["typenum","int","NInt"],"kind":"struct"},"5:632:15216":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"6:1613:11555":{"crate_id":6,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"18:12225:12216":{"crate_id":18,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:3457:11740":{"crate_id":17,"path":["gimli","arch","X86_64"],"kind":"struct"},"15:31:15081":{"crate_id":15,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:49514:11159":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"7:4364:13489":{"crate_id":7,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"18:9700:14971":{"crate_id":18,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:51469:14838":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"6:4137:17055":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"6:3486:16991":{"crate_id":6,"path":["std","io","Seek"],"kind":"trait"},"19:624:38321":{"crate_id":19,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"7:7276:14067":{"crate_id":7,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"22:51:16778":{"crate_id":22,"path":["crypto_common","KeyIvInit"],"kind":"trait"},"18:13393:12581":{"crate_id":18,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"5:36:11535":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"19:538:11714":{"crate_id":19,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"6:11487:14664":{"crate_id":6,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:4519:12719":{"crate_id":17,"path":["gimli","constants","DwLang"],"kind":"struct"},"15:40:11965":{"crate_id":15,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:47291:14718":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:47022:5259":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:52382:14333":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"18:11594:12098":{"crate_id":18,"path":["object","macho","LoadCommand"],"kind":"struct"},"5:4722:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:50504:5266":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:153:11462":{"crate_id":17,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"24:1274:5345":{"crate_id":24,"path":["typenum","type_operators","Logarithm2"],"kind":"trait"},"6:4353:15142":{"crate_id":6,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"25:36:1791":{"crate_id":25,"path":["block_buffer","BufferKind"],"kind":"trait"},"7:4663:13589":{"crate_id":7,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:54655:10981":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:7267:14589":{"crate_id":17,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:20767:14188":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:7825:12910":{"crate_id":17,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"18:0:1922":{"crate_id":18,"path":["object"],"kind":"module"},"7:554:13171":{"crate_id":7,"path":["libc","unix","winsize"],"kind":"struct"},"18:10875:11940":{"crate_id":18,"path":["object","read","CompressedFileRange"],"kind":"struct"},"18:420:11779":{"crate_id":18,"path":["object","read","any","Section"],"kind":"struct"},"18:10546:23477":{"crate_id":18,"path":["object","read","FileKind"],"kind":"enum"},"1:48566:14295":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:4020:17038":{"crate_id":6,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"6:8104:14118":{"crate_id":6,"path":["std","io","IoSlice"],"kind":"struct"},"1:57585:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:11058:5251":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:21703:14198":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:8482:14635":{"crate_id":6,"path":["std","path","Components"],"kind":"struct"},"6:8775:14145":{"crate_id":6,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:54371:14374":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"18:9317:14948":{"crate_id":18,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:8233:17057":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"7:4591:13556":{"crate_id":7,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"7:6985:14038":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:10034:15200":{"crate_id":6,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"24:6192:5322":{"crate_id":24,"path":["typenum","array","TArr"],"kind":"struct"},"6:3807:15139":{"crate_id":6,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"18:9778:14440":{"crate_id":18,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"5:3153:14622":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:51025:14728":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"23:369:5384":{"crate_id":23,"path":["generic_array","GenericArrayImplEven"],"kind":"struct"},"7:1713:13325":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"7:5544:13722":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:933:14618":{"crate_id":6,"path":["std","collections","hash","map","Values"],"kind":"struct"},"5:2873:14669":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:680:15108":{"crate_id":6,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"13:985:14588":{"crate_id":13,"path":["hashbrown","map","Entry"],"kind":"enum"},"7:5597:13748":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:2031:181":{"crate_id":6,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:8273:15185":{"crate_id":6,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"7:568:13179":{"crate_id":7,"path":["libc","unix","sigval"],"kind":"struct"},"24:5724:5220":{"crate_id":24,"path":["typenum","bit","B1"],"kind":"struct"},"7:573:13181":{"crate_id":7,"path":["libc","unix","itimerval"],"kind":"struct"},"1:22830:14211":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"5:1329:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:6330:12752":{"crate_id":17,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"6:4928:17090":{"crate_id":6,"path":["std","panic","always_abort"],"kind":"function"},"1:20877:16488":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"18:11436:12051":{"crate_id":18,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"25:0:1769":{"crate_id":25,"path":["block_buffer"],"kind":"module"},"1:20718:16727":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"24:6294:125":{"crate_id":24,"path":["typenum","Equal"],"kind":"struct"},"10:827:22422":{"crate_id":10,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:4353:11172":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:46881:14714":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"21:105:16716":{"crate_id":21,"path":["blobby","Blob5Iterator"],"kind":"struct"},"18:11761:12124":{"crate_id":18,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:6609:214":{"crate_id":6,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:51226:14817":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:47073:14285":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"17:6359:14551":{"crate_id":17,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:50894:14796":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"7:4267:13442":{"crate_id":7,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"18:9791:14441":{"crate_id":18,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:6829:14583":{"crate_id":17,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"7:1524:13206":{"crate_id":7,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:12354:202":{"crate_id":1,"path":["core","task","ready","Ready"],"kind":"struct"},"5:3119:14621":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:8141:15238":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:9013:11156":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"7:4820:13663":{"crate_id":7,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:5664:14490":{"crate_id":17,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:39833:5990":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"18:13071:12475":{"crate_id":18,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"14:108:38290":{"crate_id":14,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:4533:17076":{"crate_id":6,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:3411:14121":{"crate_id":6,"path":["std","io","Read"],"kind":"trait"},"1:49766:67":{"crate_id":1,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"1:11074:5253":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"18:13492:12605":{"crate_id":18,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"18:8631:11823":{"crate_id":18,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:1004:15093":{"crate_id":6,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"10:505:22471":{"crate_id":10,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:7567:23416":{"crate_id":17,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"19:671:14920":{"crate_id":19,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:2823:16262":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:51132:14806":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"5:5739:16836":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"12:0:1916":{"crate_id":12,"path":["adler"],"kind":"module"},"5:1432:15085":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:20879:14188":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"18:8137:23466":{"crate_id":18,"path":["object","common","BinaryFormat"],"kind":"enum"},"5:219:11536":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:47319:14289":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"5:1366:5267":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"18:10332:23585":{"crate_id":18,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:52668:14345":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"24:1071:16732":{"crate_id":24,"path":["typenum","private","IsGreaterPrivate"],"kind":"trait"},"1:3640:11094":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:9025:11161":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"6:11845:1336":{"crate_id":6,"path":["std","slice"],"kind":"primitive"},"5:2884:36335":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"13:444:141":{"crate_id":13,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:49171:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"18:10321:11896":{"crate_id":18,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"23:0:1826":{"crate_id":23,"path":["generic_array"],"kind":"module"},"7:6440:13951":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"7:5592:13747":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"6:11142:14653":{"crate_id":6,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"7:6991:14040":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"16:193:22503":{"crate_id":16,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"6:3998:17034":{"crate_id":6,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:6790:12800":{"crate_id":17,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"19:574:11709":{"crate_id":19,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"5:3872:11555":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:5933:11492":{"crate_id":6,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:51338:14828":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"5:2604:14175":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"18:12148:12197":{"crate_id":18,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"18:11247:12014":{"crate_id":18,"path":["object","elf","Dyn64"],"kind":"struct"},"1:50553:5285":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:2631:12665":{"crate_id":17,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:5374:12677":{"crate_id":17,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:57624:243":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"7:494:13134":{"crate_id":7,"path":["libc","unix","timespec"],"kind":"struct"},"1:22134:173":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"5:3098:36285":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:11233:14788":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:2508:235":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"7:4700:983":{"crate_id":7,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"5:2065:14671":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:2502:147":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:8139:16391":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"18:9193:38312":{"crate_id":18,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"18:12265:12221":{"crate_id":18,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:9701:219":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"7:4304:13458":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:2811:16260":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"18:9820:14976":{"crate_id":18,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:6474:1810":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:3093:15127":{"crate_id":6,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"17:5737:14498":{"crate_id":17,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:2459:16727":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:46956:199":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"6:8943:36656":{"crate_id":6,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"18:11559:12094":{"crate_id":18,"path":["object","macho","MachHeader32"],"kind":"struct"},"6:10673:129":{"crate_id":6,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:47636:14741":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:6877:23413":{"crate_id":17,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:51178:14816":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"18:11547:12092":{"crate_id":18,"path":["object","macho","FatArch64"],"kind":"struct"},"1:47082:12852":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"5:1257:15099":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:2750:11049":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"6:2259:16975":{"crate_id":6,"path":["std","fs","read_to_string"],"kind":"function"},"6:2255:11586":{"crate_id":6,"path":["std","fs","read"],"kind":"function"},"17:7980:23418":{"crate_id":17,"path":["gimli","read","value","ValueType"],"kind":"enum"},"5:6482:11568":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:47566:5283":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:5433:14467":{"crate_id":17,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:50592:5284":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:7970:14607":{"crate_id":17,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"18:11515:12085":{"crate_id":18,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:0:1921":{"crate_id":17,"path":["gimli"],"kind":"module"},"1:50726:5271":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"18:13506:12612":{"crate_id":18,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:20449:27889":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"7:4550:13535":{"crate_id":7,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"13:1866:14621":{"crate_id":13,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:11525:15239":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"18:9644:14964":{"crate_id":18,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"5:3501:5268":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"13:751:11555":{"crate_id":13,"path":["hashbrown","map","Drain"],"kind":"struct"},"18:10062:14987":{"crate_id":18,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:50614:5282":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:4108:14689":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:6496:23411":{"crate_id":17,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"18:12955:12448":{"crate_id":18,"path":["object","pe","ImageRelocation"],"kind":"struct"},"7:4615:13569":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"18:13214:12513":{"crate_id":18,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"6:7664:16939":{"crate_id":6,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:8095:14117":{"crate_id":6,"path":["std","io","util","Sink"],"kind":"struct"},"1:52336:14331":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"5:3245:11471":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"10:188:22376":{"crate_id":10,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"17:6676:12686":{"crate_id":17,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"19:80:27215":{"crate_id":19,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:2683:12667":{"crate_id":17,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"6:2413:16988":{"crate_id":6,"path":["std","fs","read_dir"],"kind":"function"},"17:2411:12656":{"crate_id":17,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"7:4162:13381":{"crate_id":7,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:48543:152":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:7452:195":{"crate_id":17,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"7:4106:13343":{"crate_id":7,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:2785:16256":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"18:9031:38314":{"crate_id":18,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:21485:14698":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:7511:12864":{"crate_id":17,"path":["gimli","read","UnitOffset"],"kind":"struct"},"18:11800:12129":{"crate_id":18,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:11270:14793":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"5:1612:11537":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:5711:15152":{"crate_id":6,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"5:4234:11561":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:48929:5268":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"7:4296:13453":{"crate_id":7,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"6:902:5268":{"crate_id":6,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:49011:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:8931:15191":{"crate_id":6,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"6:1610:11094":{"crate_id":6,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"24:1198:5330":{"crate_id":24,"path":["typenum","type_operators","PartialDiv"],"kind":"trait"},"24:1153:16748":{"crate_id":24,"path":["typenum","private","PrivateLogarithm2"],"kind":"trait"},"6:8055:15176":{"crate_id":6,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"24:814:16744":{"crate_id":24,"path":["typenum","private","PrivateAnd"],"kind":"trait"},"1:48785:11093":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:54701:10984":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"18:9274:14944":{"crate_id":18,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"5:4034:11489":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"13:387:38286":{"crate_id":13,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"18:8526:11820":{"crate_id":18,"path":["object","endian","U16Bytes"],"kind":"struct"},"5:4264:11489":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:2512:234":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"18:11606:12100":{"crate_id":18,"path":["object","macho","LcStr"],"kind":"struct"},"4:502:5238":{"crate_id":4,"path":["digest","core_api","xof_reader","XofReaderCoreWrapper"],"kind":"struct"},"4:291:5237":{"crate_id":4,"path":["digest","core_api","wrapper","CoreProxy"],"kind":"trait"},"6:7680:14628":{"crate_id":6,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"24:6172:5321":{"crate_id":24,"path":["typenum","array","ATerm"],"kind":"struct"},"1:51253:14818":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:10651:14652":{"crate_id":6,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:5839:23408":{"crate_id":17,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:4222:15234":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"6:8239:15184":{"crate_id":6,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"18:8055:23455":{"crate_id":18,"path":["object","common","Architecture"],"kind":"enum"},"7:6425:13946":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"18:12896:12429":{"crate_id":18,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"22:16:183":{"crate_id":22,"path":["crypto_common","Output"],"kind":"typedef"},"18:10245:14997":{"crate_id":18,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"24:1261:5341":{"crate_id":24,"path":["typenum","type_operators","IsGreaterOrEqual"],"kind":"trait"},"23:295:5399":{"crate_id":23,"path":["generic_array","sequence","Lengthen"],"kind":"trait"},"17:6865:14587":{"crate_id":17,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"18:10476:23586":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"6:10703:36877":{"crate_id":6,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"7:1728:13332":{"crate_id":7,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:6567:14569":{"crate_id":17,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"18:11330:12039":{"crate_id":18,"path":["object","elf","NoteHeader32"],"kind":"struct"},"3:0:1911":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"17:6345:12684":{"crate_id":17,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"18:9118:38317":{"crate_id":18,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"7:4437:13505":{"crate_id":7,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:2807:16258":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:7864:15173":{"crate_id":6,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:5510:14473":{"crate_id":17,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"7:7218:14053":{"crate_id":7,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:51009:14803":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:361:15104":{"crate_id":6,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"18:1931:14928":{"crate_id":18,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"6:8906:14151":{"crate_id":6,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:5595:11493":{"crate_id":6,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:7148:5683":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:3191:32188":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:5744:15156":{"crate_id":6,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"15:0:1919":{"crate_id":15,"path":["rustc_demangle"],"kind":"module"},"1:4081:15233":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:2737:5679":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"17:6517:14556":{"crate_id":17,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:11859:1460":{"crate_id":6,"path":["std","u32"],"kind":"primitive"},"6:2403:16983":{"crate_id":6,"path":["std","fs","canonicalize"],"kind":"function"},"18:8441:23476":{"crate_id":18,"path":["object","common","SymbolFlags"],"kind":"enum"},"13:1845:11471":{"crate_id":13,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"7:6279:13885":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"13:853:15092":{"crate_id":13,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"5:1071:36362":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:3161:37788":{"crate_id":6,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"6:3199:15129":{"crate_id":6,"path":["std","io","stdio","Stdin"],"kind":"struct"},"6:967:15085":{"crate_id":6,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:7511:11516":{"crate_id":6,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:54690:10983":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"6:11856:726":{"crate_id":6,"path":["std","i128"],"kind":"primitive"},"17:4357:12715":{"crate_id":17,"path":["gimli","constants","DwEnd"],"kind":"struct"},"18:9303:11835":{"crate_id":18,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:12312:106":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"5:6643:11573":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:7543:12683":{"crate_id":17,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"18:13059:12474":{"crate_id":18,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"21:92:16715":{"crate_id":21,"path":["blobby","Blob4Iterator"],"kind":"struct"},"18:10973:11964":{"crate_id":18,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:5494:14691":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:10638:14631":{"crate_id":6,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:47096:11171":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"6:5207:187":{"crate_id":6,"path":["std","path","Path"],"kind":"struct"},"24:1195:5342":{"crate_id":24,"path":["typenum","type_operators","Len"],"kind":"trait"},"24:1111:16734":{"crate_id":24,"path":["typenum","private","IsNotEqualPrivate"],"kind":"trait"},"6:8883:17134":{"crate_id":6,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"5:2876:14174":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:7574:14072":{"crate_id":6,"path":["std","thread","local","AccessError"],"kind":"struct"},"18:13031:12466":{"crate_id":18,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:8955:207":{"crate_id":1,"path":["core","fmt","Result"],"kind":"typedef"},"5:961:11537":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"18:10845:11906":{"crate_id":18,"path":["object","read","Relocation"],"kind":"struct"},"6:11857:1462":{"crate_id":6,"path":["std","u8"],"kind":"primitive"},"13:646:5268":{"crate_id":13,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:39873:14713":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"6:6561:17131":{"crate_id":6,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:48649:28570":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"7:1744:13337":{"crate_id":7,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:47696:14749":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:50744:5275":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:4099:36893":{"crate_id":6,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:53005:14355":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"7:1684:13314":{"crate_id":7,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:11839:921":{"crate_id":6,"path":["std","never"],"kind":"primitive"},"18:9458:14955":{"crate_id":18,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"6:7801:14631":{"crate_id":6,"path":["std","fs","OpenOptions"],"kind":"struct"},"18:12748:12396":{"crate_id":18,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:48870:190":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"6:2250:128":{"crate_id":6,"path":["std","fs","File"],"kind":"struct"},"1:8140:16390":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:7059:14309":{"crate_id":17,"path":["gimli","read","op","Location"],"kind":"enum"},"1:51465:14837":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"4:0:1619":{"crate_id":4,"path":["digest"],"kind":"module"},"5:6668:11585":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:20470:16736":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"19:96:27216":{"crate_id":19,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"5:1973:15219":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"5:5812:11489":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:50948:14799":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:8221:14633":{"crate_id":6,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"5:7004:11094":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"7:541:13165":{"crate_id":7,"path":["libc","unix","iovec"],"kind":"struct"},"18:9433:14953":{"crate_id":18,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"21:0:1924":{"crate_id":21,"path":["blobby"],"kind":"module"},"17:2894:22548":{"crate_id":17,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"4:339:5231":{"crate_id":4,"path":["digest","core_api","XofReaderCore"],"kind":"trait"},"1:6610:29430":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:2387:16978":{"crate_id":6,"path":["std","fs","symlink_metadata"],"kind":"function"},"18:8814:128":{"crate_id":18,"path":["object","read","any","File"],"kind":"struct"},"1:53080:14357":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:51533:16455":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"18:11106:11990":{"crate_id":18,"path":["object","elf","Sym64"],"kind":"struct"},"1:48878:207":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"6:8789:14146":{"crate_id":6,"path":["std","process","ExitCode"],"kind":"struct"},"1:2673:217":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"6:4281:15141":{"crate_id":6,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"0:103:1664":{"crate_id":0,"path":["sha2","Sha512"],"kind":"typedef"},"4:424:1929":{"crate_id":4,"path":["digest","FixedOutputReset"],"kind":"trait"},"18:11951:12166":{"crate_id":18,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:9361:128":{"crate_id":6,"path":["std","sys","unix","fs","File"],"kind":"struct"},"6:1828:15115":{"crate_id":6,"path":["std","env","Vars"],"kind":"struct"},"7:587:13189":{"crate_id":7,"path":["libc","unix","servent"],"kind":"struct"},"17:2749:12670":{"crate_id":17,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:7211:12854":{"crate_id":17,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:2615:15125":{"crate_id":6,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"18:13024:12465":{"crate_id":18,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:47536:11592":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:48971:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:10654:5286":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"7:652:17584":{"crate_id":7,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:6059:38306":{"crate_id":17,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:7125:120":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"18:11873:12139":{"crate_id":18,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:4708:17047":{"crate_id":6,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"5:2055:11479":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"25:22:16727":{"crate_id":25,"path":["block_buffer","sealed","Sealed"],"kind":"trait"},"17:6200:14536":{"crate_id":17,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:2460:5991":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"5:4817:11489":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:7703:15168":{"crate_id":6,"path":["std","env","JoinPathsError"],"kind":"struct"},"18:10455:11909":{"crate_id":18,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"18:13203:12512":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:6743:23412":{"crate_id":17,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:50776:14791":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:7117:38308":{"crate_id":17,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:22167:174":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"18:9627:14962":{"crate_id":18,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:52460:14336":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"13:274:14611":{"crate_id":13,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:2996:16271":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:11520:16425":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"6:11125:11526":{"crate_id":6,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:3506:11555":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"6:10923:11524":{"crate_id":6,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:1617:11471":{"crate_id":6,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"18:13404:12582":{"crate_id":18,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:5718:15155":{"crate_id":6,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"18:12674:12385":{"crate_id":18,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"5:6916:11094":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"18:11813:12131":{"crate_id":18,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"5:7167:14688":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"6:4461:17061":{"crate_id":6,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:53127:14358":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:50848:5269":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"7:7265:14063":{"crate_id":7,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:956:11471":{"crate_id":6,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"6:7530:11518":{"crate_id":6,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"18:9488:14959":{"crate_id":18,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"6:5275:119":{"crate_id":6,"path":["std","path","Display"],"kind":"struct"},"1:47687:14748":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:30001:67":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:50055:144":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:2795:16257":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:2724:11047":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"13:1836:11094":{"crate_id":13,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"6:3468:11151":{"crate_id":6,"path":["std","io","Write"],"kind":"trait"},"18:13100:12483":{"crate_id":18,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:5949:14526":{"crate_id":17,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:1735:16248":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"24:2568:1628":{"crate_id":24,"path":["typenum","generated","consts","U48"],"kind":"typedef"},"1:4:994":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"18:13091:12482":{"crate_id":18,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:47788:14757":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:8732:30306":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:49818:71":{"crate_id":1,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"1:21695:14197":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:52561:14340":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"19:481:14417":{"crate_id":19,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:54293:14373":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"11:0:1915":{"crate_id":11,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:2685:108":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"17:2509:12660":{"crate_id":17,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:21394:16485":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"18:11288:12024":{"crate_id":18,"path":["object","elf","Verdaux"],"kind":"struct"},"6:10207:38102":{"crate_id":6,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"18:12836:12419":{"crate_id":18,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:3977:15231":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:4129:17054":{"crate_id":6,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"7:4569:13545":{"crate_id":7,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"24:2616:1629":{"crate_id":24,"path":["typenum","generated","consts","U64"],"kind":"typedef"},"7:4736:13623":{"crate_id":7,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:53029:14356":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"18:11070:11983":{"crate_id":18,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:50085:14782":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"6:10693:14118":{"crate_id":6,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"5:4938:11566":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:47055:15247":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:20689:16482":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:53621:14367":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"24:0:1780":{"crate_id":24,"path":["typenum"],"kind":"module"},"7:5514:13712":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"24:1016:16769":{"crate_id":24,"path":["typenum","private","PrivateMax"],"kind":"trait"},"13:834:15090":{"crate_id":13,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:10399:15131":{"crate_id":6,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"18:11748:12123":{"crate_id":18,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:21298:27684":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"10:920:22329":{"crate_id":10,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:4635:12723":{"crate_id":17,"path":["gimli","constants","DwInl"],"kind":"struct"},"12:44:13032":{"crate_id":12,"path":["adler","Adler32"],"kind":"struct"},"6:10633:14646":{"crate_id":6,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:54617:14379":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"7:1586:13241":{"crate_id":7,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"24:2392:16727":{"crate_id":24,"path":["typenum","sealed","Sealed"],"kind":"trait"},"6:9000:36668":{"crate_id":6,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"7:5792:13841":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:49796:127":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"6:9072:14156":{"crate_id":6,"path":["std","time","Instant"],"kind":"struct"},"7:1614:13260":{"crate_id":7,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"18:13192:12508":{"crate_id":18,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"14:220:13025":{"crate_id":14,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:5410:15150":{"crate_id":6,"path":["std","process","Command"],"kind":"struct"},"7:5782:13838":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"18:12198:12214":{"crate_id":18,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:11148:15212":{"crate_id":6,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:8737:27972":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:11245:11528":{"crate_id":6,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"6:6156:15157":{"crate_id":6,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"5:881:5267":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"18:11997:12176":{"crate_id":18,"path":["object","macho","DylibReference"],"kind":"struct"},"5:7096:14682":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"18:9071:38313":{"crate_id":18,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"6:8160:5271":{"crate_id":6,"path":["std","io","Split"],"kind":"struct"},"1:2943:5682":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:7831:129":{"crate_id":6,"path":["std","fs","FileType"],"kind":"struct"},"6:11858:1459":{"crate_id":6,"path":["std","u16"],"kind":"primitive"},"18:10528:15004":{"crate_id":18,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"7:5564:13735":{"crate_id":7,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:50876:14795":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"18:9526:14960":{"crate_id":18,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"18:10583:23478":{"crate_id":18,"path":["object","read","ObjectKind"],"kind":"enum"},"18:8981:14937":{"crate_id":18,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"6:10295:15186":{"crate_id":6,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:5235:12735":{"crate_id":17,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"7:4516:13519":{"crate_id":7,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"5:7110:28557":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:8255:14123":{"crate_id":6,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"6:9373:11520":{"crate_id":6,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:2505:132":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:1670:1066":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"24:6272:5255":{"crate_id":24,"path":["typenum","Less"],"kind":"struct"},"7:4201:13407":{"crate_id":7,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:52907:14351":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"7:1547:13216":{"crate_id":7,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:7637:14596":{"crate_id":17,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"18:9183:14941":{"crate_id":18,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"5:7126:14685":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"}},"external_crates":{"26":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"23":{"name":"generic_array","html_root_url":null},"20":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"block_buffer","html_root_url":null},"22":{"name":"crypto_common","html_root_url":null},"19":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"digest","html_root_url":null},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"27":{"name":"cpufeatures","html_root_url":null},"24":{"name":"typenum","html_root_url":"https://docs.rs/typenum/1.16.0/"},"21":{"name":"blobby","html_root_url":"https://docs.rs/blobby/0.3.1/"},"18":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"9":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"6":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}