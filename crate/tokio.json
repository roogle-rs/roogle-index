{"root":"0:0:1919","crate_version":"1.20.1","includes_private":false,"index":{"0:342":{"id":"0:342","crate_id":0,"name":null,"span":{"filename":"src/io/mod.rs","begin":[205,18],"end":[205,23]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"std::io::Error","name":"Error","id":"1:3841:127","glob":false}},"2:4866:4386":{"id":"2:4866:4386","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4867:2720","2:4868:59217","2:4869:2725"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:224":{"id":"0:224","crate_id":0,"name":null,"span":{"filename":"src/io/mod.rs","begin":[194,0],"end":[194,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::async_seek::AsyncSeek","name":"AsyncSeek","id":"0:208:2260","glob":false}},"2:13794:2713":{"id":"2:13794:2713","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:13241:4733","FromStr::Err":"2:13241:4733"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47875:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:13241:4733","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13241:4733","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:144:2348":{"id":"0:144:2348","crate_id":0,"name":"poll_fill_buf","span":{"filename":"src/io/async_buf_read.rs","begin":[110,4],"end":[112,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14329:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50616:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3839:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:137:2348":{"id":"0:137:2348","crate_id":0,"name":"poll_fill_buf","span":{"filename":"src/io/async_buf_read.rs","begin":[90,4],"end":[92,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14329:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50616:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3839:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3442:3302":{"id":"2:3442:3302","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3443:181","2:3444:915"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:294:2545":{"id":"0:294:2545","crate_id":0,"name":"poll_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[389,4],"end":[395,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14329:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10862:2444","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50616:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3839:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8687:120":{"id":"2:8687:120","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8688:4061","2:8689:4062","2:8690:4063","2:8691:4064","2:8695:4065","2:8698:4066"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8844:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13705:33046":{"id":"2:13705:33046","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:15750:3185"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49996:5222","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:222:2433":{"id":"0:222:2433","crate_id":0,"name":"start_seek","span":{"filename":"src/io/async_seek.rs","begin":[84,4],"end":[86,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["pos",{"kind":"resolved_path","inner":{"name":"SeekFrom","id":"1:10874:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3839:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3148:75":{"id":"2:3148:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3150:306"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:127:2256":{"id":"0:127:2256","crate_id":0,"name":"AsyncBufRead","span":{"filename":"src/io/async_buf_read.rs","begin":[23,0],"end":[63,1]},"visibility":"public","docs":"Reads bytes asynchronously.\n\nThis trait is analogous to [`std::io::BufRead`], but integrates with\nthe asynchronous task system. In particular, the [`poll_fill_buf`] method,\nunlike [`BufRead::fill_buf`], will automatically queue the current task for wakeup\nand return if data is not yet available, rather than blocking the calling\nthread.\n\nUtilities for working with `AsyncBufRead` values are provided by\n[`AsyncBufReadExt`].\n\n[`std::io::BufRead`]: std::io::BufRead\n[`poll_fill_buf`]: AsyncBufRead::poll_fill_buf\n[`BufRead::fill_buf`]: std::io::BufRead::fill_buf\n[`AsyncBufReadExt`]: crate::io::AsyncBufReadExt","links":{"std::io::BufRead":"1:4511:2368","AsyncBufRead::poll_fill_buf":"0:127:2256","std::io::BufRead::fill_buf":"1:4511:2368"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:128:2348","0:129:2358"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"AsyncRead","id":"0:169:2258","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:131","0:133","0:135","0:139","0:142"]}},"2:4082:1432":{"id":"2:4082:1432","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:46278:4957","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:321:2582":{"id":"0:321:2582","crate_id":0,"name":"initialized","span":{"filename":"src/io/read_buf.rs","begin":[90,4],"end":[95,5]},"visibility":"public","docs":"Returns a shared reference to the initialized portion of the buffer.\n\nThis includes the filled portion.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:265:2557":{"id":"0:265:2557","crate_id":0,"name":"is_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[246,4],"end":[248,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:139":{"id":"0:139","crate_id":0,"name":null,"span":{"filename":"src/io/async_buf_read.rs","begin":[99,0],"end":[107,1]},"visibility":{"restricted":{"parent":"0:107:2255","path":"::io::async_buf_read"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsyncBufRead","id":"0:127:2256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"items":["0:140:2348","0:141:2358"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13715:56462":{"id":"2:13715:56462","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:15744:3180","self::pattern":"2:13302:4968"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:4967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13312:4967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13327:4971","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13798:56348":{"id":"2:13798:56348","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6164:61299":{"id":"5:6164:61299","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2363","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8200:4195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2363","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8200:4195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6186:56345":{"id":"5:6186:56345","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:15750:3185"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8455:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:324:2599":{"id":"0:324:2599","crate_id":0,"name":"unfilled_mut","span":{"filename":"src/io/read_buf.rs","begin":[135,4],"end":[137,5]},"visibility":"public","docs":"Returns a mutable reference to the unfilled part of the buffer without ensuring that it has been fully\ninitialized.\n\n# Safety\n\nThe caller must not de-initialize portions of the buffer that have already been initialized.\nThis includes any bytes in the region marked as uninitialized by `ReadBuf`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninit","id":"2:32578:2565","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:779:2348":{"id":"0:779:2348","crate_id":0,"name":"poll_fill_buf","span":{"filename":"src/io/async_buf_read.rs","begin":[78,4],"end":[78,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14329:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50616:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3839:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3154:149":{"id":"2:3154:149","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3156:4060"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:338":{"id":"0:338","crate_id":0,"name":null,"span":{"filename":"src/io/mod.rs","begin":[200,0],"end":[200,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::read_buf::ReadBuf","name":"ReadBuf","id":"0:308:2264","glob":false}},"1:5560:4637":{"id":"1:5560:4637","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5561:56126","1:5562:56127","1:5563:56128","1:5564:56129"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:268":{"id":"0:268","crate_id":0,"name":null,"span":{"filename":"src/io/async_write.rs","begin":[259,0],"end":[288,1]},"visibility":{"restricted":{"parent":"0:227:2261","path":"::io::async_write"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["poll_write_vectored","is_write_vectored"],"trait":{"name":"AsyncWrite","id":"0:248:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7874:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}},"items":["0:269:2479","0:270:2545","0:271:2557","0:272:2486","0:273:2532"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:266:2486":{"id":"0:266:2486","crate_id":0,"name":"poll_flush","span":{"filename":"src/io/async_write.rs","begin":[250,4],"end":[252,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14329:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50616:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3839:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13701:5242":{"id":"2:13701:5242","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15744:3180"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49683:5206","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6746:4623":{"id":"1:6746:4623","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6747:58527"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:249:2479":{"id":"0:249:2479","crate_id":0,"name":"poll_write","span":{"filename":"src/io/async_write.rs","begin":[58,4],"end":[62,40]},"visibility":"default","docs":"Attempt to write bytes from `buf` into the object.\n\nOn success, returns `Poll::Ready(Ok(num_bytes_written))`. If successful,\nthen it must be guaranteed that `n <= buf.len()`. A return value of `0`\ntypically means that the underlying object is no longer able to accept\nbytes and will likely not be able to in the future as well, or that the\nbuffer provided is empty.\n\nIf the object is not ready for writing, the method returns\n`Poll::Pending` and arranges for the current task (via\n`cx.waker()`) to receive a notification when the object becomes\nwritable or is closed.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14329:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50616:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47875:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}},{"type":{"kind":"resolved_path","inner":{"name":"io::Error","id":"1:3841:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"5:6498:224":{"id":"5:6498:224","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6499:1400"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:149:2257":{"id":"0:149:2257","crate_id":0,"name":"async_read","span":{"filename":"src/io/async_read.rs","begin":[1,0],"end":[131,1]},"visibility":{"restricted":{"parent":"0:106:1851","path":"::io"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:169:2258"],"is_stripped":true}},"2:3484:3312":{"id":"2:3484:3312","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3486:181","2:3487:357"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3255:127":{"id":"2:3255:127","crate_id":2,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3256:3141","2:3258:58537","2:3259:58538","2:3260:58539"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"2:10533:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Display","id":"2:10540:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:142":{"id":"0:142","crate_id":0,"name":null,"span":{"filename":"src/io/async_buf_read.rs","begin":[109,0],"end":[117,1]},"visibility":{"restricted":{"parent":"0:107:2255","path":"::io::async_buf_read"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3148:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"2:3388:1917","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsyncBufRead","id":"0:127:2256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"io::Cursor","id":"1:10658:2367","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:144:2348","0:145:2358"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13312:4967":{"id":"2:13312:4967","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13314:4970","2:13315:59122","2:13316:59123","2:13317:59124","2:13318:59126","2:13319:59125","2:13320:59127"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5574:4643":{"id":"1:5574:4643","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5575:58046"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10355:4630","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:252:2545":{"id":"0:252:2545","crate_id":0,"name":"poll_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[158,4],"end":[168,5]},"visibility":"default","docs":"Like [`poll_write`], except that it writes from a slice of buffers.\n\nData is copied from each buffer in order, with the final buffer\nread from possibly being only partially consumed. This method must\nbehave as a call to [`write`] with the buffers concatenated would.\n\nThe default implementation calls [`poll_write`] with either the first nonempty\nbuffer provided, or an empty one if none exists.\n\nOn success, returns `Poll::Ready(Ok(num_bytes_written))`.\n\nIf the object is not ready for writing, the method returns\n`Poll::Pending` and arranges for the current task (via\n`cx.waker()`) to receive a notification when the object becomes\nwritable or is closed.\n\n# Note\n\nThis should be implemented as a single \"atomic\" write action. If any\ndata has been partially written, it is wrong to return an error or\npending.\n\n[`poll_write`]: AsyncWrite::poll_write","links":{"AsyncWrite::poll_write":"0:248:2262","`write`":"2:14:2562"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14329:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10862:2444","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50616:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47875:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}},{"type":{"kind":"resolved_path","inner":{"name":"io::Error","id":"1:3841:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13682:60643":{"id":"2:13682:60643","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:15750:3185"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6650:4627":{"id":"1:6650:4627","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6651:55818"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:784:2402":{"id":"0:784:2402","crate_id":0,"name":"poll_read","span":{"filename":"src/io/async_read.rs","begin":[77,4],"end":[77,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14329:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:308:2264","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50616:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3839:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:787:2433":{"id":"0:787:2433","crate_id":0,"name":"start_seek","span":{"filename":"src/io/async_seek.rs","begin":[66,4],"end":[66,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["pos",{"kind":"resolved_path","inner":{"name":"SeekFrom","id":"1:10874:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3839:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3199:1419":{"id":"2:3199:1419","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47875:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"2:3164:228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:295:2557":{"id":"0:295:2557","crate_id":0,"name":"is_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[397,4],"end":[399,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:183:2402":{"id":"0:183:2402","crate_id":0,"name":"poll_read","span":{"filename":"src/io/async_read.rs","begin":[109,4],"end":[130,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14329:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:308:2264","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50616:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3839:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:138:2358":{"id":"0:138:2358","crate_id":0,"name":"consume","span":{"filename":"src/io/async_buf_read.rs","begin":[94,4],"end":[96,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["amt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:60":{"id":"0:60","crate_id":0,"name":null,"span":{"filename":"src/macros/support.rs","begin":[7,0],"end":[7,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"std::future::Future","name":"Future","id":"2:14027:138","glob":false}},"0:59:2024":{"id":"0:59:2024","crate_id":0,"name":"support","span":{"filename":"src/macros/support.rs","begin":[1,0],"end":[9,24]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(hidden)]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:60","0:63","0:66"],"is_stripped":true}},"2:10542:3553":{"id":"2:10542:3553","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10543:661"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10533:109":{"id":"2:10533:109","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10534:661"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6246:4618":{"id":"1:6246:4618","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6247:58480","1:6248:1863","1:6249:58481","1:6250:58482","1:6251:58483","1:6252:58484"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10355:4630","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:251:2532":{"id":"0:251:2532","crate_id":0,"name":"poll_shutdown","span":{"filename":"src/io/async_write.rs","begin":[133,4],"end":[133,96]},"visibility":"default","docs":"Initiates or attempts to shut down this writer, returning success when\nthe I/O connection has completely shut down.\n\nThis method is intended to be used for asynchronous shutdown of I/O\nconnections. For example this is suitable for implementing shutdown of a\nTLS connection or calling `TcpStream::shutdown` on a proxied connection.\nProtocols sometimes need to flush out final pieces of data or otherwise\nperform a graceful shutdown handshake, reading/writing more data as\nappropriate. This method is the hook for such protocols to implement the\ngraceful shutdown logic.\n\nThis `shutdown` method is required by implementers of the\n`AsyncWrite` trait. Wrappers typically just want to proxy this call\nthrough to the wrapped type, and base types will typically implement\nshutdown logic here or just return `Ok(().into())`. Note that if you're\nwrapping an underlying `AsyncWrite` a call to `shutdown` implies that\ntransitively the entire stream has been shut down. After your wrapper's\nshutdown logic has been executed you should shut down the underlying\nstream.\n\nInvocation of a `shutdown` implies an invocation of `flush`. Once this\nmethod returns `Ready` it implies that a flush successfully happened\nbefore the shutdown happened. That is, callers don't need to call\n`flush` before calling `shutdown`. They can rely that by calling\n`shutdown` any pending buffered data will be written out.\n\n# Return value\n\nThis function returns a `Poll<io::Result<()>>` classified as such:\n\n* `Poll::Ready(Ok(()))` - indicates that the connection was\n  successfully shut down and is now safe to deallocate/drop/close\n  resources associated with it. This method means that the current task\n  will no longer receive any notifications due to this method and the\n  I/O object itself is likely no longer usable.\n\n* `Poll::Pending` - indicates that shutdown is initiated but could\n  not complete just yet. This may mean that more I/O needs to happen to\n  continue this shutdown operation. The current task is scheduled to\n  receive a notification when it's otherwise ready to continue the\n  shutdown operation. When woken up this method should be called again.\n\n* `Poll::Ready(Err(e))` - indicates a fatal error has happened with shutdown,\n  indicating that the shutdown operation did not complete successfully.\n  This typically means that the I/O object is no longer usable.\n\n# Errors\n\nThis function can return normal I/O errors through `Err`, described\nabove. Additionally this method may also render the underlying\n`Write::write` method no longer usable (e.g. will return errors in the\nfuture). It's recommended that once `shutdown` is called the\n`write` method is no longer called.\n\n# Panics\n\nThis function will panic if not called within the context of a future's\ntask.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14329:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50616:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47875:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"io::Error","id":"1:3841:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:2900:183":{"id":"2:2900:183","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2902:605","2:2903:909"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13327:4971":{"id":"2:13327:4971","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13329:4061","2:13330:60258","2:13331:60259"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Searcher","id":"2:13321:4970","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6646:4624":{"id":"1:6646:4624","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6647:56318"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2905:124":{"id":"2:2905:124","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2900:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:334:661":{"id":"0:334:661","crate_id":0,"name":"fmt","span":{"filename":"src/io/read_buf.rs","begin":[274,4],"end":[280,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10493:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10482:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3347:211":{"id":"2:3347:211","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4511:2368":{"id":"1:4511:2368","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4512:2369","1:4513:2358","1:4514:4128","1:4516:3349","1:4517:4129","1:4519:2290","1:4520:4130"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Read","id":"1:4429:3346","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6183:61302":{"id":"5:6183:61302","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8455:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8455:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:172":{"id":"0:172","crate_id":0,"name":null,"span":{"filename":"src/io/async_read.rs","begin":[72,0],"end":[74,1]},"visibility":{"restricted":{"parent":"0:149:2257","path":"::io::async_read"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsyncRead","id":"0:169:2258","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"2:3388:1917","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsyncRead","id":"0:169:2258","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2363","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:783:2402"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:327:2406":{"id":"0:327:2406","crate_id":0,"name":"remaining","span":{"filename":"src/io/read_buf.rs","begin":[179,4],"end":[181,5]},"visibility":"public","docs":"Returns the number of bytes at the end of the slice that have not yet been filled.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13676":{"id":"2:13676","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12755:1343","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13677:795","2:13678:2548","2:13679:60641","2:13680:60642","2:13682:60643","2:13685:56122","2:13686:60644","2:13687:305","2:13688:2625","2:13689:2760","2:13691:2361","2:13693:56425","2:13695:56426","2:13697:4706","2:13698:60645","2:13699:2409","2:13700:56445","2:13701:5242","2:13702:4997","2:13703:4593","2:13704:33056","2:13705:33046","2:13706:4130","2:13707:60646","2:13708:33041","2:13709:56460","2:13712:56461","2:13715:56462","2:13718:2547","2:13722:4066","2:13726:2290","2:13729:32923","2:13732:56454","2:13735:60647","2:13738:60648","2:13741:56456","2:13744:56458","2:13747:60649","2:13750:60650","2:13753:3260","2:13756:60651","2:13759:60652","2:13762:60653","2:13765:60654","2:13767:60655","2:13769:60656","2:13771:60657","2:13772:60658","2:13773:60659","2:13776:60660","2:13779:15668","2:13782:56463","2:13785:60661","2:13788:60662","2:13791:60663","2:13794:2713","2:13796:5361","2:13797:56347","2:13798:56348","2:13799:56349","2:13800:60664","2:13802:4670","2:13803:60665"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13753:3260":{"id":"2:13753:3260","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"prim@char":"1:15744:3180","str::matches":"1:15750:3185","`DoubleEndedIterator`":"2:8687:120","self::pattern":"2:13302:4968"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49917:5218","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:4967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13773:60659":{"id":"2:13773:60659","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:13302:4968","prim@char":"1:15744:3180"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:4967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13312:4967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13332:4972","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13332:4972":{"id":"2:13332:4972","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13327:4971","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:401":{"id":"0:401","crate_id":0,"name":null,"span":{"filename":"src/net/addr.rs","begin":[77,0],"end":[77,38]},"visibility":{"restricted":{"parent":"0:355:2666","path":"::net::addr"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ToSocketAddrs","id":"0:381:2668","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SocketAddrV6","id":"1:10966:2687","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:184":{"id":"0:184","crate_id":0,"name":null,"span":{"filename":"src/io/mod.rs","begin":[191,0],"end":[191,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::async_read::AsyncRead","name":"AsyncRead","id":"0:169:2258","glob":false}},"2:9127:4162":{"id":"2:9127:4162","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8844:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3420:3304":{"id":"2:3420:3304","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3422:181","2:3423:1358"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:208:2260":{"id":"0:208:2260","crate_id":0,"name":"AsyncSeek","span":{"filename":"src/io/async_seek.rs","begin":[18,0],"end":[47,1]},"visibility":"public","docs":"Seek bytes asynchronously.\n\nThis trait is analogous to the [`std::io::Seek`] trait, but integrates\nwith the asynchronous task system. In particular, the `start_seek`\nmethod, unlike [`Seek::seek`], will not block the calling thread.\n\nUtilities for working with `AsyncSeek` values are provided by\n[`AsyncSeekExt`].\n\n[`std::io::Seek`]: std::io::Seek\n[`Seek::seek`]: std::io::Seek::seek()\n[`AsyncSeekExt`]: crate::io::AsyncSeekExt","links":{"std::io::Seek::seek()":"1:4504:2443","std::io::Seek":"1:4504:2443"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:209:2433","0:210:2441"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:212","0:214","0:216","0:220"]}},"2:3356:217":{"id":"2:3356:217","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:146":{"id":"0:146","crate_id":0,"name":null,"span":{"filename":"src/io/mod.rs","begin":[188,0],"end":[188,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::async_buf_read::AsyncBufRead","name":"AsyncBufRead","id":"0:127:2256","glob":false}},"0:296:2486":{"id":"0:296:2486","crate_id":0,"name":"poll_flush","span":{"filename":"src/io/async_write.rs","begin":[401,4],"end":[403,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14329:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50616:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3839:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:297:2532":{"id":"0:297:2532","crate_id":0,"name":"poll_shutdown","span":{"filename":"src/io/async_write.rs","begin":[405,4],"end":[407,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14329:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50616:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3839:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:788:2441":{"id":"0:788:2441","crate_id":0,"name":"poll_complete","span":{"filename":"src/io/async_seek.rs","begin":[66,4],"end":[66,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14329:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50616:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3839:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3357:106":{"id":"2:3357:106","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2867:104","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:178:2402":{"id":"0:178:2402","crate_id":0,"name":"poll_read","span":{"filename":"src/io/async_read.rs","begin":[85,4],"end":[91,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14329:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:308:2264","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50616:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3839:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6171:61301":{"id":"5:6171:61301","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8455:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8455:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13779:15668":{"id":"2:13779:15668","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:13302:4968","prim@char":"1:15744:3180"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47750:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:4967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13700:56445":{"id":"2:13700:56445","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:15750:3185"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13759:60652":{"id":"2:13759:60652","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"prim@char":"1:15744:3180","`DoubleEndedIterator`":"2:8687:120","self::pattern":"2:13302:4968","str::rmatch_indices":"1:15750:3185"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49863:5215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:4967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5504:4638":{"id":"1:5504:4638","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5505:55749","1:5506:55751","1:5507:55750","1:5508:55752"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:66":{"id":"0:66","crate_id":0,"name":null,"span":{"filename":"src/macros/support.rs","begin":[9,0],"end":[9,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"std::task::Poll","name":"Poll","id":"2:50616:190","glob":false}},"1:5520:4640":{"id":"1:5520:4640","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5521:6639","1:5522:7911"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:275:2479":{"id":"0:275:2479","crate_id":0,"name":"poll_write","span":{"filename":"src/io/async_write.rs","begin":[291,4],"end":[297,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14329:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50616:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3839:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6648:4626":{"id":"1:6648:4626","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6649:58428"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:14042:150":{"id":"2:14042:150","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:14043:181","2:14044:150","2:14045:769"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:288:2545":{"id":"0:288:2545","crate_id":0,"name":"poll_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[359,4],"end":[365,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14329:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10862:2444","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50616:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3839:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:348":{"id":"0:348","crate_id":0,"name":null,"span":{"filename":"src/io/mod.rs","begin":[205,36],"end":[205,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"std::io::Result","name":"Result","id":"1:3839:205","glob":false}},"2:10781:146":{"id":"2:10781:146","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10782:653","2:10783:2562","2:10784:4238","2:10785:4239","2:10786:4240","2:10787:4241","2:10788:4242","2:10789:4243","2:10790:4244","2:10791:4245","2:10792:4246","2:10793:4247","2:10794:4248","2:10795:4249","2:10796:4250","2:10797:1536"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13744:56458":{"id":"2:13744:56458","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"str::splitn":"1:15750:3185","prim@char":"1:15744:3180","self::pattern":"2:13302:4968"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49835:5187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:4967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13312:4967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13327:4971","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:381:2668":{"id":"0:381:2668","crate_id":0,"name":"ToSocketAddrs","span":{"filename":"src/net/addr.rs","begin":[19,0],"end":[19,53]},"visibility":"public","docs":"Converts or resolves without blocking to one or more `SocketAddr` values.\n\n# DNS\n\nImplementations of `ToSocketAddrs` for string types require a DNS lookup.\n\n# Calling\n\nCurrently, this trait is only used as an argument to Tokio functions that\nneed to reference a target socket address. To perform a `SocketAddr`\nconversion directly, use [`lookup_host()`](super::lookup_host()).\n\nThis trait is sealed and is intended to be opaque. The details of the trait\nwill change. Stabilization is pending enhancements to the Rust language.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"sealed::ToSocketAddrsPriv","id":"0:437:2698","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:384","0:391","0:396","0:401","0:406","0:411","0:416","0:421"]}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/macros/support.rs","begin":[8,0],"end":[8,22]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"std::pin::Pin","name":"Pin","id":"2:47867:188","glob":false}},"2:3726:3324":{"id":"2:3726:3324","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3728:60145","2:3729:60146","2:3730:56460"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:129:2358":{"id":"0:129:2358","crate_id":0,"name":"consume","span":{"filename":"src/io/async_buf_read.rs","begin":[62,4],"end":[62,49]},"visibility":"default","docs":"Tells this buffer that `amt` bytes have been consumed from the buffer,\nso they should no longer be returned in calls to [`poll_read`].\n\nThis function is a lower-level call. It needs to be paired with the\n[`poll_fill_buf`] method to function properly. This function does\nnot perform any I/O, it simply informs this object that some amount of\nits buffer, returned from [`poll_fill_buf`], has been consumed and should\nno longer be returned. As such, this function may do odd things if\n[`poll_fill_buf`] isn't called before calling it.\n\nThe `amt` must be `<=` the number of bytes in the buffer returned by\n[`poll_fill_buf`].\n\n[`poll_read`]: AsyncRead::poll_read\n[`poll_fill_buf`]: AsyncBufRead::poll_fill_buf","links":{"AsyncBufRead::poll_fill_buf":"0:127:2256","AsyncRead::poll_read":"0:169:2258"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["amt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:248:2262":{"id":"0:248:2262","crate_id":0,"name":"AsyncWrite","span":{"filename":"src/io/async_write.rs","begin":[45,0],"end":[183,1]},"visibility":"public","docs":"Writes bytes asynchronously.\n\nThe trait inherits from [`std::io::Write`] and indicates that an I/O object is\n**nonblocking**. All non-blocking I/O objects must return an error when\nbytes cannot be written instead of blocking the current thread.\n\nSpecifically, this means that the [`poll_write`] function will return one of\nthe following:\n\n* `Poll::Ready(Ok(n))` means that `n` bytes of data was immediately\n  written.\n\n* `Poll::Pending` means that no data was written from the buffer\n  provided. The I/O object is not currently writable but may become writable\n  in the future. Most importantly, **the current future's task is scheduled\n  to get unparked when the object is writable**. This means that like\n  `Future::poll` you'll receive a notification when the I/O object is\n  writable again.\n\n* `Poll::Ready(Err(e))` for other errors are standard I/O errors coming from the\n  underlying object.\n\nThis trait importantly means that the [`write`][stdwrite] method only works in\nthe context of a future's task. The object may panic if used outside of a task.\n\nNote that this trait also represents that the  [`Write::flush`][stdflush] method\nworks very similarly to the `write` method, notably that `Ok(())` means that the\nwriter has successfully been flushed, a \"would block\" error means that the\ncurrent task is ready to receive a notification when flushing can make more\nprogress, and otherwise normal errors can happen as well.\n\nUtilities for working with `AsyncWrite` values are provided by\n[`AsyncWriteExt`].\n\n[`std::io::Write`]: std::io::Write\n[`poll_write`]: AsyncWrite::poll_write()\n[stdwrite]: std::io::Write::write()\n[stdflush]: std::io::Write::flush()\n[`AsyncWriteExt`]: crate::io::AsyncWriteExt","links":{"std::io::Write::flush()":"1:4486:2560","std::io::Write::write()":"1:4486:2560","std::io::Write":"1:4486:2560","AsyncWrite::poll_write()":"0:248:2262"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:249:2479","0:250:2486","0:251:2532","0:252:2545","0:255:2557"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:257","0:259","0:261","0:268","0:274","0:280","0:286","0:292"]}},"0:106:1851":{"id":"0:106:1851","crate_id":0,"name":"io","span":{"filename":"src/io/mod.rs","begin":[1,0],"end":[276,1]},"visibility":"public","docs":"Traits, helpers, and type definitions for asynchronous I/O functionality.\n\nThis module is the asynchronous version of `std::io`. Primarily, it\ndefines two traits, [`AsyncRead`] and [`AsyncWrite`], which are asynchronous\nversions of the [`Read`] and [`Write`] traits in the standard library.\n\n# AsyncRead and AsyncWrite\n\nLike the standard library's [`Read`] and [`Write`] traits, [`AsyncRead`] and\n[`AsyncWrite`] provide the most general interface for reading and writing\ninput and output. Unlike the standard library's traits, however, they are\n_asynchronous_ &mdash; meaning that reading from or writing to a `tokio::io`\ntype will _yield_ to the Tokio scheduler when IO is not ready, rather than\nblocking. This allows other tasks to run while waiting on IO.\n\nAnother difference is that `AsyncRead` and `AsyncWrite` only contain\ncore methods needed to provide asynchronous reading and writing\nfunctionality. Instead, utility methods are defined in the [`AsyncReadExt`]\nand [`AsyncWriteExt`] extension traits. These traits are automatically\nimplemented for all values that implement `AsyncRead` and `AsyncWrite`\nrespectively.\n\nEnd users will rarely interact directly with `AsyncRead` and\n`AsyncWrite`. Instead, they will use the async functions defined in the\nextension traits. Library authors are expected to implement `AsyncRead`\nand `AsyncWrite` in order to provide types that behave like byte streams.\n\nEven with these differences, Tokio's `AsyncRead` and `AsyncWrite` traits\ncan be used in almost exactly the same manner as the standard library's\n`Read` and `Write`. Most types in the standard library that implement `Read`\nand `Write` have asynchronous equivalents in `tokio` that implement\n`AsyncRead` and `AsyncWrite`, such as [`File`] and [`TcpStream`].\n\nFor example, the standard library documentation introduces `Read` by\n[demonstrating][std_example] reading some bytes from a [`std::fs::File`]. We\ncan do the same with [`tokio::fs::File`][`File`]:\n\n```no_run\nuse tokio::io::{self, AsyncReadExt};\nuse tokio::fs::File;\n\n#[tokio::main]\nasync fn main() -> io::Result<()> {\n    let mut f = File::open(\"foo.txt\").await?;\n    let mut buffer = [0; 10];\n\n    // read up to 10 bytes\n    let n = f.read(&mut buffer).await?;\n\n    println!(\"The bytes: {:?}\", &buffer[..n]);\n    Ok(())\n}\n```\n\n[`File`]: crate::fs::File\n[`TcpStream`]: crate::net::TcpStream\n[`std::fs::File`]: std::fs::File\n[std_example]: std::io#read-and-write\n\n## Buffered Readers and Writers\n\nByte-based interfaces are unwieldy and can be inefficient, as we'd need to be\nmaking near-constant calls to the operating system. To help with this,\n`std::io` comes with [support for _buffered_ readers and writers][stdbuf],\nand therefore, `tokio::io` does as well.\n\nTokio provides an async version of the [`std::io::BufRead`] trait,\n[`AsyncBufRead`]; and async [`BufReader`] and [`BufWriter`] structs, which\nwrap readers and writers. These wrappers use a buffer, reducing the number\nof calls and providing nicer methods for accessing exactly what you want.\n\nFor example, [`BufReader`] works with the [`AsyncBufRead`] trait to add\nextra methods to any async reader:\n\n```no_run\nuse tokio::io::{self, BufReader, AsyncBufReadExt};\nuse tokio::fs::File;\n\n#[tokio::main]\nasync fn main() -> io::Result<()> {\n    let f = File::open(\"foo.txt\").await?;\n    let mut reader = BufReader::new(f);\n    let mut buffer = String::new();\n\n    // read a line into buffer\n    reader.read_line(&mut buffer).await?;\n\n    println!(\"{}\", buffer);\n    Ok(())\n}\n```\n\n[`BufWriter`] doesn't add any new ways of writing; it just buffers every call\nto [`write`](crate::io::AsyncWriteExt::write). However, you **must** flush\n[`BufWriter`] to ensure that any buffered data is written.\n\n```no_run\nuse tokio::io::{self, BufWriter, AsyncWriteExt};\nuse tokio::fs::File;\n\n#[tokio::main]\nasync fn main() -> io::Result<()> {\n    let f = File::create(\"foo.txt\").await?;\n    {\n        let mut writer = BufWriter::new(f);\n\n        // Write a byte to the buffer.\n        writer.write(&[42u8]).await?;\n\n        // Flush the buffer before it goes out of scope.\n        writer.flush().await?;\n\n    } // Unless flushed or shut down, the contents of the buffer is discarded on drop.\n\n    Ok(())\n}\n```\n\n[stdbuf]: std::io#bufreader-and-bufwriter\n[`std::io::BufRead`]: std::io::BufRead\n[`AsyncBufRead`]: crate::io::AsyncBufRead\n[`BufReader`]: crate::io::BufReader\n[`BufWriter`]: crate::io::BufWriter\n\n## Implementing AsyncRead and AsyncWrite\n\nBecause they are traits, we can implement [`AsyncRead`] and [`AsyncWrite`] for\nour own types, as well. Note that these traits must only be implemented for\nnon-blocking I/O types that integrate with the futures type system. In\nother words, these types must never block the thread, and instead the\ncurrent task is notified when the I/O resource is ready.\n\n## Conversion to and from Sink/Stream\n\nIt is often convenient to encapsulate the reading and writing of\nbytes and instead work with a [`Sink`] or [`Stream`] of some data\ntype that is encoded as bytes and/or decoded from bytes. Tokio\nprovides some utility traits in the [tokio-util] crate that\nabstract the asynchronous buffering that is required and allows\nyou to write [`Encoder`] and [`Decoder`] functions working with a\nbuffer of bytes, and then use that [\"codec\"] to transform anything\nthat implements [`AsyncRead`] and [`AsyncWrite`] into a `Sink`/`Stream` of\nyour structured data.\n\n[tokio-util]: https://docs.rs/tokio-util/0.6/tokio_util/codec/index.html\n\n# Standard input and output\n\nTokio provides asynchronous APIs to standard [input], [output], and [error].\nThese APIs are very similar to the ones provided by `std`, but they also\nimplement [`AsyncRead`] and [`AsyncWrite`].\n\nNote that the standard input / output APIs  **must** be used from the\ncontext of the Tokio runtime, as they require Tokio-specific features to\nfunction. Calling these functions outside of a Tokio runtime will panic.\n\n[input]: fn@stdin\n[output]: fn@stdout\n[error]: fn@stderr\n\n# `std` re-exports\n\nAdditionally, [`Error`], [`ErrorKind`], [`Result`], and [`SeekFrom`] are\nre-exported from `std::io` for ease of use.\n\n[`AsyncRead`]: trait@AsyncRead\n[`AsyncWrite`]: trait@AsyncWrite\n[`AsyncReadExt`]: trait@AsyncReadExt\n[`AsyncWriteExt`]: trait@AsyncWriteExt\n[\"codec\"]: https://docs.rs/tokio-util/0.6/tokio_util/codec/index.html\n[`Encoder`]: https://docs.rs/tokio-util/0.6/tokio_util/codec/trait.Encoder.html\n[`Decoder`]: https://docs.rs/tokio-util/0.6/tokio_util/codec/trait.Decoder.html\n[`Error`]: struct@Error\n[`ErrorKind`]: enum@ErrorKind\n[`Result`]: type@Result\n[`Read`]: std::io::Read\n[`SeekFrom`]: enum@SeekFrom\n[`Sink`]: https://docs.rs/futures/0.3/futures/sink/trait.Sink.html\n[`Stream`]: https://docs.rs/futures/0.3/futures/stream/trait.Stream.html\n[`Write`]: std::io::Write","links":{"enum@ErrorKind":"1:10738:2265","trait@AsyncRead":"0:169:2258","std::io::BufRead":"1:4511:2368","struct@Error":"1:3841:127","type@Result":"1:3839:205","std::io#bufreader-and-bufwriter":"1:3127:1851","std::fs::File":"1:2953:128","crate::io::AsyncBufRead":"0:127:2256","std::io#read-and-write":"1:3127:1851","enum@SeekFrom":"1:10874:2266","std::io::Read":"1:4429:3346","std::io::Write":"1:4486:2560","trait@AsyncWrite":"0:248:2262"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:146","0:184","0:224","0:298","0:338","0:342","0:345","0:348","0:351"],"is_stripped":false}},"0:176":{"id":"0:176","crate_id":0,"name":null,"span":{"filename":"src/io/async_read.rs","begin":[80,0],"end":[92,1]},"visibility":{"restricted":{"parent":"0:149:2257","path":"::io::async_read"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"DerefMut","id":"2:3583:2320","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"2:3388:1917","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"","id":"2:3570:116","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"AsyncRead","id":"0:169:2258","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsyncRead","id":"0:169:2258","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"items":["0:178:2402"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13691:2361":{"id":"2:13691:2361","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47750:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47750:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11175:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11175:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:789:2479":{"id":"0:789:2479","crate_id":0,"name":"poll_write","span":{"filename":"src/io/async_write.rs","begin":[218,4],"end":[218,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14329:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50616:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3839:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:391":{"id":"0:391","crate_id":0,"name":null,"span":{"filename":"src/net/addr.rs","begin":[50,0],"end":[50,36]},"visibility":{"restricted":{"parent":"0:355:2666","path":"::net::addr"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ToSocketAddrs","id":"0:381:2668","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SocketAddr","id":"1:10931:2685","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:14426:141":{"id":"2:14426:141","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14427:278","2:14428:519","2:14429:281","2:14430:1082"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3474:3310":{"id":"2:3474:3310","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3476:181","2:3477:352"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13689:2760":{"id":"2:13689:2760","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47750:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47750:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11175:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11175:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3479:3311":{"id":"2:3479:3311","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3481:181","2:3482:354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:2851-0:308:2264":{"id":"b:2:2851-0:308:2264","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2845:5012","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:308:2264","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2853:55745"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:798:2532":{"id":"0:798:2532","crate_id":0,"name":"poll_shutdown","span":{"filename":"src/io/async_write.rs","begin":[222,4],"end":[222,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14329:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50616:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3839:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:272:2486":{"id":"0:272:2486","crate_id":0,"name":"poll_flush","span":{"filename":"src/io/async_write.rs","begin":[281,4],"end":[283,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14329:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50616:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3839:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3812:137":{"id":"2:3812:137","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3814:688"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"2:3807:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6184:61303":{"id":"5:6184:61303","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:8455:216","`Box<str>`":"5:444:2363"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2363","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8200:4195","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8455:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13747:60649":{"id":"2:13747:60649","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47750:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:4967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13693:56425":{"id":"2:13693:56425","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11175:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11175:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:396":{"id":"0:396","crate_id":0,"name":null,"span":{"filename":"src/net/addr.rs","begin":[64,0],"end":[64,38]},"visibility":{"restricted":{"parent":"0:355:2666","path":"::net::addr"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ToSocketAddrs","id":"0:381:2668","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SocketAddrV4","id":"1:10954:2686","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:351":{"id":"0:351","crate_id":0,"name":null,"span":{"filename":"src/io/mod.rs","begin":[205,44],"end":[205,52]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"std::io::SeekFrom","name":"SeekFrom","id":"1:10874:2266","glob":false}},"0:181":{"id":"0:181","crate_id":0,"name":null,"span":{"filename":"src/io/async_read.rs","begin":[108,0],"end":[131,1]},"visibility":{"restricted":{"parent":"0:149:2257","path":"::io::async_read"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3148:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"2:3388:1917","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsyncRead","id":"0:169:2258","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"io::Cursor","id":"1:10658:2367","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:183:2402"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13702:4997":{"id":"2:13702:4997","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15744:3180"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49689:5207","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:263:2479":{"id":"0:263:2479","crate_id":0,"name":"poll_write","span":{"filename":"src/io/async_write.rs","begin":[230,4],"end":[236,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14329:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50616:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3839:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13708:33041":{"id":"2:13708:33041","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:50005:5223","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2853:55745":{"id":"2:2853:55745","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10548:3560":{"id":"2:10548:3560","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10549:661"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:326:2620":{"id":"0:326:2620","crate_id":0,"name":"initialize_unfilled_to","span":{"filename":"src/io/read_buf.rs","begin":[156,4],"end":[175,5]},"visibility":"public","docs":"Returns a mutable reference to the first `n` bytes of the unfilled part of the buffer, ensuring it is\nfully initialized.\n\n# Panics\n\nPanics if `self.remaining()` is less than `n`.","links":{},"attrs":["#[inline]","#[track_caller]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:773:1870":{"id":"0:773:1870","crate_id":0,"name":"util","span":{"filename":"src/util/mod.rs","begin":[1,0],"end":[83,21]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":true}},"2:23738:17152":{"id":"2:23738:17152","crate_id":2,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23739:59432","2:23740:59433","2:23741:59434"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialOrd","id":"2:23733:5019","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3807:225":{"id":"2:3807:225","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3808:181","2:3809:3327","2:3810:687","2:3811:370"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FromResidual","id":"2:3812:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"2:3807:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:795:2545":{"id":"0:795:2545","crate_id":0,"name":"poll_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[222,4],"end":[222,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14329:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10862:2444","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50616:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3839:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8606:4942":{"id":"2:8606:4942","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8608:4117"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3570:116":{"id":"2:3570:116","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3571:222","2:3572:544"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:255:2557":{"id":"0:255:2557","crate_id":0,"name":"is_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[180,4],"end":[182,5]},"visibility":"default","docs":"Determines if this writer has an efficient [`poll_write_vectored`]\nimplementation.\n\nIf a writer does not override the default [`poll_write_vectored`]\nimplementation, code using it may want to avoid the method all together\nand coalesce writes into a single buffer for higher performance.\n\nThe default implementation returns `false`.\n\n[`poll_write_vectored`]: AsyncWrite::poll_write_vectored","links":{"AsyncWrite::poll_write_vectored":"0:248:2262"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3388:1917":{"id":"2:3388:1917","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5906:5368":{"id":"5:5906:5368","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5908:181","5:5909:433"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:8602:4943":{"id":"2:8602:4943","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8604:4116"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13729:32923":{"id":"2:13729:32923","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:13302:4968","prim@char":"1:15744:3180"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:13094:5180","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:4967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3513:3319":{"id":"2:3513:3319","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3515:1237"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13703:4593":{"id":"2:13703:4593","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49699:3351","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13769:60656":{"id":"2:13769:60656","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3509:3318":{"id":"2:3509:3318","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3511:358"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:313":{"id":"0:313","crate_id":0,"name":null,"span":{"filename":"src/io/read_buf.rs","begin":[29,0],"end":[271,1]},"visibility":{"restricted":{"parent":"0:301:2263","path":"::io::read_buf"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:308:2264","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:315:922","0:316:2587","0:317:2589","0:318:2581","0:319:2593","0:320:2596","0:321:2582","0:322:2603","0:323:2614","0:324:2599","0:325:2619","0:326:2620","0:327:2406","0:328:2629","0:329:2633","0:330:2636","0:331:328","0:332:2410"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3594:2885":{"id":"2:3594:2885","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3595:579"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:355:2666":{"id":"0:355:2666","crate_id":0,"name":"addr","span":{"filename":"src/net/addr.rs","begin":[1,0],"end":[333,1]},"visibility":{"restricted":{"parent":"0:354:1852","path":"::net"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:381:2668"],"is_stripped":true}},"2:10540:119":{"id":"2:10540:119","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10541:661"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:781:2348":{"id":"0:781:2348","crate_id":0,"name":"poll_fill_buf","span":{"filename":"src/io/async_buf_read.rs","begin":[82,4],"end":[82,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14329:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50616:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3839:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8643:151":{"id":"2:8643:151","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8644:2720","2:8645:2703","2:8646:770"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:319:2593":{"id":"0:319:2593","crate_id":0,"name":"filled_mut","span":{"filename":"src/io/read_buf.rs","begin":[71,4],"end":[76,5]},"visibility":"public","docs":"Returns a mutable reference to the filled portion of the buffer.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:264:2545":{"id":"0:264:2545","crate_id":0,"name":"poll_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[238,4],"end":[244,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14329:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10862:2444","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50616:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3839:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13799:56349":{"id":"2:13799:56349","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8639:136":{"id":"2:8639:136","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8641:685"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8167:4868":{"id":"2:8167:4868","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8168:59533","2:8169:59534","2:8170:59531","2:8171:59529","2:8172:59535","2:8173:59532","2:8174:59530"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2867:104","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2946:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:290:2486":{"id":"0:290:2486","crate_id":0,"name":"poll_flush","span":{"filename":"src/io/async_write.rs","begin":[371,4],"end":[373,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14329:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50616:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3839:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:623:1363":{"id":"0:623:1363","crate_id":0,"name":"sync","span":{"filename":"src/loom/std/mod.rs","begin":[53,0],"end":[53,19]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":true}},"0:179":{"id":"0:179","crate_id":0,"name":null,"span":{"filename":"src/io/async_read.rs","begin":[94,0],"end":[106,1]},"visibility":{"restricted":{"parent":"0:149:2257","path":"::io::async_read"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsyncRead","id":"0:169:2258","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"items":["0:180:2402"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3454:3307":{"id":"2:3454:3307","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3456:895"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:0:1919":{"id":"0:0:1919","crate_id":0,"name":"tokio","span":{"filename":"src/lib.rs","begin":[1,0],"end":[568,26]},"visibility":"public","docs":"A runtime for writing reliable network applications without compromising speed.\n\nTokio is an event-driven, non-blocking I/O platform for writing asynchronous\napplications with the Rust programming language. At a high level, it\nprovides a few major components:\n\n* Tools for [working with asynchronous tasks][tasks], including\n  [synchronization primitives and channels][sync] and [timeouts, sleeps, and\n  intervals][time].\n* APIs for [performing asynchronous I/O][io], including [TCP and UDP][net] sockets,\n  [filesystem][fs] operations, and [process] and [signal] management.\n* A [runtime] for executing asynchronous code, including a task scheduler,\n  an I/O driver backed by the operating system's event queue (epoll, kqueue,\n  IOCP, etc...), and a high performance timer.\n\nGuide level documentation is found on the [website].\n\n[tasks]: #working-with-tasks\n[sync]: crate::sync\n[time]: crate::time\n[io]: #asynchronous-io\n[net]: crate::net\n[fs]: crate::fs\n[process]: crate::process\n[signal]: crate::signal\n[fs]: crate::fs\n[runtime]: crate::runtime\n[website]: https://tokio.rs/tokio/tutorial\n\n# A Tour of Tokio\n\nTokio consists of a number of modules that provide a range of functionality\nessential for implementing asynchronous applications in Rust. In this\nsection, we will take a brief tour of Tokio, summarizing the major APIs and\ntheir uses.\n\nThe easiest way to get started is to enable all features. Do this by\nenabling the `full` feature flag:\n\n```toml\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n### Authoring applications\n\nTokio is great for writing applications and most users in this case shouldn't\nworry too much about what features they should pick. If you're unsure, we suggest\ngoing with `full` to ensure that you don't run into any road blocks while you're\nbuilding your application.\n\n#### Example\n\nThis example shows the quickest way to get started with Tokio.\n\n```toml\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n### Authoring libraries\n\nAs a library author your goal should be to provide the lightest weight crate\nthat is based on Tokio. To achieve this you should ensure that you only enable\nthe features you need. This allows users to pick up your crate without having\nto enable unnecessary features.\n\n#### Example\n\nThis example shows how you may want to import features for a library that just\nneeds to `tokio::spawn` and use a `TcpStream`.\n\n```toml\ntokio = { version = \"1\", features = [\"rt\", \"net\"] }\n```\n\n## Working With Tasks\n\nAsynchronous programs in Rust are based around lightweight, non-blocking\nunits of execution called [_tasks_][tasks]. The [`tokio::task`] module provides\nimportant tools for working with tasks:\n\n* The [`spawn`] function and [`JoinHandle`] type, for scheduling a new task\n  on the Tokio runtime and awaiting the output of a spawned task, respectively,\n* Functions for [running blocking operations][blocking] in an asynchronous\n  task context.\n\nThe [`tokio::task`] module is present only when the \"rt\" feature flag\nis enabled.\n\n[tasks]: task/index.html#what-are-tasks\n[`tokio::task`]: crate::task\n[`spawn`]: crate::task::spawn()\n[`JoinHandle`]: crate::task::JoinHandle\n[blocking]: task/index.html#blocking-and-yielding\n\nThe [`tokio::sync`] module contains synchronization primitives to use when\nneeding to communicate or share data. These include:\n\n* channels ([`oneshot`], [`mpsc`], [`watch`], and [`broadcast`]), for sending values\n  between tasks,\n* a non-blocking [`Mutex`], for controlling access to a shared, mutable\n  value,\n* an asynchronous [`Barrier`] type, for multiple tasks to synchronize before\n  beginning a computation.\n\nThe `tokio::sync` module is present only when the \"sync\" feature flag is\nenabled.\n\n[`tokio::sync`]: crate::sync\n[`Mutex`]: crate::sync::Mutex\n[`Barrier`]: crate::sync::Barrier\n[`oneshot`]: crate::sync::oneshot\n[`mpsc`]: crate::sync::mpsc\n[`watch`]: crate::sync::watch\n[`broadcast`]: crate::sync::broadcast\n\nThe [`tokio::time`] module provides utilities for tracking time and\nscheduling work. This includes functions for setting [timeouts][timeout] for\ntasks, [sleeping][sleep] work to run in the future, or [repeating an operation at an\ninterval][interval].\n\nIn order to use `tokio::time`, the \"time\" feature flag must be enabled.\n\n[`tokio::time`]: crate::time\n[sleep]: crate::time::sleep()\n[interval]: crate::time::interval()\n[timeout]: crate::time::timeout()\n\nFinally, Tokio provides a _runtime_ for executing asynchronous tasks. Most\napplications can use the [`#[tokio::main]`][main] macro to run their code on the\nTokio runtime. However, this macro provides only basic configuration options. As\nan alternative, the [`tokio::runtime`] module provides more powerful APIs for configuring\nand managing runtimes. You should use that module if the `#[tokio::main]` macro doesn't\nprovide the functionality you need.\n\nUsing the runtime requires the \"rt\" or \"rt-multi-thread\" feature flags, to\nenable the basic [single-threaded scheduler][rt] and the [thread-pool\nscheduler][rt-multi-thread], respectively. See the [`runtime` module\ndocumentation][rt-features] for details. In addition, the \"macros\" feature\nflag enables the `#[tokio::main]` and `#[tokio::test]` attributes.\n\n[main]: attr.main.html\n[`tokio::runtime`]: crate::runtime\n[`Builder`]: crate::runtime::Builder\n[`Runtime`]: crate::runtime::Runtime\n[rt]: runtime/index.html#current-thread-scheduler\n[rt-multi-thread]: runtime/index.html#multi-thread-scheduler\n[rt-features]: runtime/index.html#runtime-scheduler\n\n## CPU-bound tasks and blocking code\n\nTokio is able to concurrently run many tasks on a few threads by repeatedly\nswapping the currently running task on each thread. However, this kind of\nswapping can only happen at `.await` points, so code that spends a long time\nwithout reaching an `.await` will prevent other tasks from running. To\ncombat this, Tokio provides two kinds of threads: Core threads and blocking\nthreads. The core threads are where all asynchronous code runs, and Tokio\nwill by default spawn one for each CPU core. The blocking threads are\nspawned on demand, can be used to run blocking code that would otherwise\nblock other tasks from running and are kept alive when not used for a certain\namount of time which can be configured with [`thread_keep_alive`].\nSince it is not possible for Tokio to swap out blocking tasks, like it\ncan do with asynchronous code, the upper limit on the number of blocking\nthreads is very large. These limits can be configured on the [`Builder`].\n\nTo spawn a blocking task, you should use the [`spawn_blocking`] function.\n\n[`Builder`]: crate::runtime::Builder\n[`spawn_blocking`]: crate::task::spawn_blocking()\n[`thread_keep_alive`]: crate::runtime::Builder::thread_keep_alive()\n\n```\n#[tokio::main]\nasync fn main() {\n    // This is running on a core thread.\n\n    let blocking_task = tokio::task::spawn_blocking(|| {\n        // This is running on a blocking thread.\n        // Blocking here is ok.\n    });\n\n    // We can wait for the blocking task like this:\n    // If the blocking task panics, the unwrap below will propagate the\n    // panic.\n    blocking_task.await.unwrap();\n}\n```\n\nIf your code is CPU-bound and you wish to limit the number of threads used\nto run it, you should use a separate thread pool dedicated to CPU bound tasks.\nFor example, you could consider using the [rayon] library for CPU-bound\ntasks. It is also possible to create an extra Tokio runtime dedicated to\nCPU-bound tasks, but if you do this, you should be careful that the extra\nruntime runs _only_ CPU-bound tasks, as IO-bound tasks on that runtime\nwill behave poorly.\n\nHint: If using rayon, you can use a [`oneshot`] channel to send the result back\nto Tokio when the rayon task finishes.\n\n[rayon]: https://docs.rs/rayon\n[`oneshot`]: crate::sync::oneshot\n\n## Asynchronous IO\n\nAs well as scheduling and running tasks, Tokio provides everything you need\nto perform input and output asynchronously.\n\nThe [`tokio::io`] module provides Tokio's asynchronous core I/O primitives,\nthe [`AsyncRead`], [`AsyncWrite`], and [`AsyncBufRead`] traits. In addition,\nwhen the \"io-util\" feature flag is enabled, it also provides combinators and\nfunctions for working with these traits, forming as an asynchronous\ncounterpart to [`std::io`].\n\nTokio also includes APIs for performing various kinds of I/O and interacting\nwith the operating system asynchronously. These include:\n\n* [`tokio::net`], which contains non-blocking versions of [TCP], [UDP], and\n  [Unix Domain Sockets][UDS] (enabled by the \"net\" feature flag),\n* [`tokio::fs`], similar to [`std::fs`] but for performing filesystem I/O\n  asynchronously (enabled by the \"fs\" feature flag),\n* [`tokio::signal`], for asynchronously handling Unix and Windows OS signals\n  (enabled by the \"signal\" feature flag),\n* [`tokio::process`], for spawning and managing child processes (enabled by\n  the \"process\" feature flag).\n\n[`tokio::io`]: crate::io\n[`AsyncRead`]: crate::io::AsyncRead\n[`AsyncWrite`]: crate::io::AsyncWrite\n[`AsyncBufRead`]: crate::io::AsyncBufRead\n[`std::io`]: std::io\n[`tokio::net`]: crate::net\n[TCP]: crate::net::tcp\n[UDP]: crate::net::UdpSocket\n[UDS]: crate::net::unix\n[`tokio::fs`]: crate::fs\n[`std::fs`]: std::fs\n[`tokio::signal`]: crate::signal\n[`tokio::process`]: crate::process\n\n# Examples\n\nA simple TCP echo server:\n\n```no_run\nuse tokio::net::TcpListener;\nuse tokio::io::{AsyncReadExt, AsyncWriteExt};\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let listener = TcpListener::bind(\"127.0.0.1:8080\").await?;\n\n    loop {\n        let (mut socket, _) = listener.accept().await?;\n\n        tokio::spawn(async move {\n            let mut buf = [0; 1024];\n\n            // In a loop, read data from the socket and write the data back.\n            loop {\n                let n = match socket.read(&mut buf).await {\n                    // socket closed\n                    Ok(n) if n == 0 => return,\n                    Ok(n) => n,\n                    Err(e) => {\n                        eprintln!(\"failed to read from socket; err = {:?}\", e);\n                        return;\n                    }\n                };\n\n                // Write the data back\n                if let Err(e) = socket.write_all(&buf[0..n]).await {\n                    eprintln!(\"failed to write to socket; err = {:?}\", e);\n                    return;\n                }\n            }\n        });\n    }\n}\n```\n\n## Feature flags\n\nTokio uses a set of [feature flags] to reduce the amount of compiled code. It\nis possible to just enable certain features over others. By default, Tokio\ndoes not enable any features but allows one to enable a subset for their use\ncase. Below is a list of the available feature flags. You may also notice\nabove each function, struct and trait there is listed one or more feature flags\nthat are required for that item to be used. If you are new to Tokio it is\nrecommended that you use the `full` feature flag which will enable all public APIs.\nBeware though that this will pull in many extra dependencies that you may not\nneed.\n\n- `full`: Enables all features listed below except `test-util` and `tracing`.\n- `rt`: Enables `tokio::spawn`, the basic (current thread) scheduler,\n        and non-scheduler utilities.\n- `rt-multi-thread`: Enables the heavier, multi-threaded, work-stealing scheduler.\n- `io-util`: Enables the IO based `Ext` traits.\n- `io-std`: Enable `Stdout`, `Stdin` and `Stderr` types.\n- `net`: Enables `tokio::net` types such as `TcpStream`, `UnixStream` and\n         `UdpSocket`, as well as (on Unix-like systems) `AsyncFd` and (on\n         FreeBSD) `PollAio`.\n- `time`: Enables `tokio::time` types and allows the schedulers to enable\n          the built in timer.\n- `process`: Enables `tokio::process` types.\n- `macros`: Enables `#[tokio::main]` and `#[tokio::test]` macros.\n- `sync`: Enables all `tokio::sync` types.\n- `signal`: Enables all `tokio::signal` types.\n- `fs`: Enables `tokio::fs` types.\n- `test-util`: Enables testing based infrastructure for the Tokio runtime.\n\n_Note: `AsyncRead` and `AsyncWrite` traits do not require any features and are\nalways available._\n\n### Internal features\n\nThese features do not expose any new API, but influence internal\nimplementation aspects of Tokio, and can pull in additional\ndependencies.\n\n- `parking_lot`: As a potential optimization, use the _parking_lot_ crate's\nsynchronization primitives internally. MSRV may increase according to the\n_parking_lot_ release in use.\n\n### Unstable features\n\nSome feature flags are only available when specifying the `tokio_unstable` flag:\n\n- `tracing`: Enables tracing events.\n\nLikewise, some parts of the API are only available with the same flag:\n\n- [`task::JoinSet`]\n- [`task::Builder`]\n  \nThis flag enables **unstable** features. The public API of these features\nmay break in 1.x releases. To enable these features, the `--cfg\ntokio_unstable` argument must be passed to `rustc` when compiling. This\nserves to explicitly opt-in to features which may break semver conventions,\nsince Cargo [does not yet directly support such opt-ins][unstable features].\n\nYou can specify it in your project's `.cargo/config.toml` file:\n\n```toml\n[build]\nrustflags = [\"--cfg\", \"tokio_unstable\"]\n```\n\nAlternatively, you can specify it with an environment variable:\n\n```sh\n## Many *nix shells:\nexport RUSTFLAGS=\"--cfg tokio_unstable\"\ncargo build\n```\n\n```powershell\n## Windows PowerShell:\n$Env:RUSTFLAGS=\"--cfg tokio_unstable\"\ncargo build\n```\n\n[unstable features]: https://internals.rust-lang.org/t/feature-request-unstable-opt-in-non-transitive-crate-features/16193#why-not-a-crate-feature-2\n[feature flags]: https://doc.rust-lang.org/cargo/reference/manifest.html#the-features-section","links":{"crate::io":"0:106:1851","std::fs":"1:2895:1850","crate::io::AsyncRead":"0:169:2258","crate::io::AsyncWrite":"0:248:2262","crate::net":"0:354:1852","crate::sync":"0:830:1363","crate::io::AsyncBufRead":"0:127:2256","crate::task":"0:772:1381","std::io":"1:3127:1851"},"attrs":["#![allow(clippy :: cognitive_complexity, clippy :: large_enum_variant, clippy\n:: needless_doctest_main)]","#![warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\nunreachable_pub)]","#![deny(unused_must_use)]","#![doc(test(no_crate_inject,\nattr(deny(warnings, rust_2018_idioms), allow(dead_code, unused_variables))))]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:106:1851","0:354:1852","0:772:1381","0:775:1897","0:54:1007"],"is_stripped":false}},"2:10544:3552":{"id":"2:10544:3552","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10545:661"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13686:60644":{"id":"2:13686:60644","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:10550:189":{"id":"2:10550:189","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10551:661"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:287:2479":{"id":"0:287:2479","crate_id":0,"name":"poll_write","span":{"filename":"src/io/async_write.rs","begin":[351,4],"end":[357,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14329:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50616:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3839:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:284:2486":{"id":"0:284:2486","crate_id":0,"name":"poll_flush","span":{"filename":"src/io/async_write.rs","begin":[341,4],"end":[343,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14329:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50616:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3839:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:261":{"id":"0:261","crate_id":0,"name":null,"span":{"filename":"src/io/async_write.rs","begin":[225,0],"end":[257,1]},"visibility":{"restricted":{"parent":"0:227:2261","path":"::io::async_write"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"DerefMut","id":"2:3583:2320","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"2:3388:1917","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"","id":"2:3570:116","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"AsyncWrite","id":"0:248:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["poll_write_vectored","is_write_vectored"],"trait":{"name":"AsyncWrite","id":"0:248:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"items":["0:263:2479","0:264:2545","0:265:2557","0:266:2486","0:267:2532"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:6574:4661":{"id":"1:6574:4661","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6575:9352","1:6576:58060"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10355:4630","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:23108:5091":{"id":"2:23108:5091","crate_id":2,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23109:60025","2:23110:1230","2:23111:1231","2:23112:60026","2:23113:60027","2:23114:60028","2:23115:60029","2:23116:60030","2:23117:60031","2:23118:60032"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3357:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23121:4630","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:4129:4959":{"id":"2:4129:4959","crate_id":2,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4130:58539"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:333":{"id":"0:333","crate_id":0,"name":null,"span":{"filename":"src/io/read_buf.rs","begin":[273,0],"end":[281,1]},"visibility":{"restricted":{"parent":"0:301:2263","path":"::io::read_buf"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10533:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:308:2264","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":["0:334:661"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3388:1917-0:308:2264":{"id":"a:2:3388:1917-0:308:2264","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:3388:1917","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:308:2264","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13741:56456":{"id":"2:13741:56456","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:15744:3180","str::rsplitn":"1:15750:3185","self::pattern":"2:13302:4968"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49817:5186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:4967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3231:115":{"id":"2:3231:115","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3232:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13688:2625":{"id":"2:13688:2625","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15761:3194"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10546:3559":{"id":"2:10546:3559","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10547:661"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3359:220-0:308:2264":{"id":"a:2:3359:220-0:308:2264","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3359:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:308:2264","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:273:2532":{"id":"0:273:2532","crate_id":0,"name":"poll_shutdown","span":{"filename":"src/io/async_write.rs","begin":[285,4],"end":[287,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14329:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50616:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3839:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:280":{"id":"0:280","crate_id":0,"name":null,"span":{"filename":"src/io/async_write.rs","begin":[320,0],"end":[348,1]},"visibility":{"restricted":{"parent":"0:227:2261","path":"::io::async_write"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["poll_write_vectored","is_write_vectored"],"trait":{"name":"AsyncWrite","id":"0:248:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"io::Cursor","id":"1:10658:2367","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7874:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}}}}],"bindings":[]}}}},"items":["0:281:2479","0:282:2545","0:283:2557","0:284:2486","0:285:2532"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:315:922":{"id":"0:315:922","crate_id":0,"name":"new","span":{"filename":"src/io/read_buf.rs","begin":[32,4],"end":[40,5]},"visibility":"public","docs":"Creates a new `ReadBuf` from a fully initialized buffer.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:308:2264","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:421":{"id":"0:421","crate_id":0,"name":null,"span":{"filename":"src/net/addr.rs","begin":[132,0],"end":[132,39]},"visibility":{"restricted":{"parent":"0:355:2666","path":"::net::addr"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ToSocketAddrs","id":"0:381:2668","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"SocketAddr","id":"1:10931:2685","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:9124:4161":{"id":"2:9124:4161","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8844:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:131":{"id":"0:131","crate_id":0,"name":null,"span":{"filename":"src/io/async_buf_read.rs","begin":[77,0],"end":[79,1]},"visibility":{"restricted":{"parent":"0:107:2255","path":"::io::async_buf_read"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsyncBufRead","id":"0:127:2256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"2:3388:1917","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsyncBufRead","id":"0:127:2256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2363","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:779:2348","0:780:2358"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:4486:2560":{"id":"1:4486:2560","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4487:2562","1:4488:2561","1:4490:2557","1:4491:2563","1:4492:4146","1:4493:4147","1:4494:4148","1:4503:4092"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13241:4733":{"id":"2:13241:4733","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13242:126","2:13243:55994"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13726:2290":{"id":"2:13726:2290","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"`DoubleEndedIterator`":"2:8687:120","self::pattern":"2:13302:4968","str::split_whitespace":"1:15750:3185","str::rsplit":"1:15750:3185","prim@char":"1:15744:3180"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49713:2312","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:4967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3505:3317":{"id":"2:3505:3317","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3507:355"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23072:5090":{"id":"2:23072:5090","crate_id":2,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23073:5016","2:23074:60025","2:23075:1230","2:23076:1231","2:23077:43578","2:23078:60070","2:23079:60071","2:23080:60072","2:23081:60073","2:23082:60074","2:23083:60026","2:23084:60027","2:23085:60028","2:23086:60029","2:23087:60030","2:23088:60031","2:23089:60032"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3357:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23121:4630","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:844:223":{"id":"5:844:223","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:845:4125","5:846:2715","5:847:4126"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13771:60657":{"id":"2:13771:60657","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:308:2264":{"id":"0:308:2264","crate_id":0,"name":"ReadBuf","span":{"filename":"src/io/read_buf.rs","begin":[23,0],"end":[27,1]},"visibility":"public","docs":"A wrapper around a byte buffer that is incrementally filled and initialized.\n\nThis type is a sort of \"double cursor\". It tracks three regions in the\nbuffer: a region at the beginning of the buffer that has been logically\nfilled with data, a region that has been initialized at some point but not\nyet logically filled, and a region at the end that may be uninitialized.\nThe filled region is guaranteed to be a subset of the initialized region.\n\nIn summary, the contents of the buffer can be visualized as:\n\n```not_rust\n[             capacity              ]\n[ filled |         unfilled         ]\n[    initialized    | uninitialized ]\n```\n\nIt is undefined behavior to de-initialize any bytes from the uninitialized\nregion, since it is merely unknown whether this region is uninitialized or\nnot, and if part of it turns out to be initialized, it must stay initialized.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:313","a:2:3388:1917-0:308:2264","a:2:3347:211-0:308:2264","a:2:3359:220-0:308:2264","a:2:9503:3619-0:308:2264","a:2:9504:3618-0:308:2264","b:2:3195-0:308:2264","b:2:3184-0:308:2264","b:2:4080-0:308:2264","b:2:2851-0:308:2264","b:2:3180-0:308:2264","b:2:3190-0:308:2264","b:2:2848-0:308:2264","0:333"]}},"0:772:1381":{"id":"0:772:1381","crate_id":0,"name":"task","span":{"filename":"src/task/mod.rs","begin":[1,0],"end":[324,1]},"visibility":"public","docs":"Asynchronous green-threads.\n\n## What are Tasks?\n\nA _task_ is a light weight, non-blocking unit of execution. A task is similar\nto an OS thread, but rather than being managed by the OS scheduler, they are\nmanaged by the [Tokio runtime][rt]. Another name for this general pattern is\n[green threads]. If you are familiar with [Go's goroutines], [Kotlin's\ncoroutines], or [Erlang's processes], you can think of Tokio's tasks as\nsomething similar.\n\nKey points about tasks include:\n\n* Tasks are **light weight**. Because tasks are scheduled by the Tokio\n  runtime rather than the operating system, creating new tasks or switching\n  between tasks does not require a context switch and has fairly low\n  overhead. Creating, running, and destroying large numbers of tasks is\n  quite cheap, especially compared to OS threads.\n\n* Tasks are scheduled **cooperatively**. Most operating systems implement\n  _preemptive multitasking_. This is a scheduling technique where the\n  operating system allows each thread to run for a period of time, and then\n  _preempts_ it, temporarily pausing that thread and switching to another.\n  Tasks, on the other hand, implement _cooperative multitasking_. In\n  cooperative multitasking, a task is allowed to run until it _yields_,\n  indicating to the Tokio runtime's scheduler that it cannot currently\n  continue executing. When a task yields, the Tokio runtime switches to\n  executing the next task.\n\n* Tasks are **non-blocking**. Typically, when an OS thread performs I/O or\n  must synchronize with another thread, it _blocks_, allowing the OS to\n  schedule another thread. When a task cannot continue executing, it must\n  yield instead, allowing the Tokio runtime to schedule another task. Tasks\n  should generally not perform system calls or other operations that could\n  block a thread, as this would prevent other tasks running on the same\n  thread from executing as well. Instead, this module provides APIs for\n  running blocking operations in an asynchronous context.\n\n[rt]: crate::runtime\n[green threads]: https://en.wikipedia.org/wiki/Green_threads\n[Go's goroutines]: https://tour.golang.org/concurrency/1\n[Kotlin's coroutines]: https://kotlinlang.org/docs/reference/coroutines-overview.html\n[Erlang's processes]: http://erlang.org/doc/getting_started/conc_prog.html#processes\n\n## Working with Tasks\n\nThis module provides the following APIs for working with tasks:\n\n### Spawning\n\nPerhaps the most important function in this module is [`task::spawn`]. This\nfunction can be thought of as an async equivalent to the standard library's\n[`thread::spawn`][`std::thread::spawn`]. It takes an `async` block or other\n[future], and creates a new task to run that work concurrently:\n\n```\nuse tokio::task;\n\n# async fn doc() {\ntask::spawn(async {\n    // perform some work here...\n});\n# }\n```\n\nLike [`std::thread::spawn`], `task::spawn` returns a [`JoinHandle`] struct.\nA `JoinHandle` is itself a future which may be used to await the output of\nthe spawned task. For example:\n\n```\nuse tokio::task;\n\n# #[tokio::main] async fn main() -> Result<(), Box<dyn std::error::Error>> {\nlet join = task::spawn(async {\n    // ...\n    \"hello world!\"\n});\n\n// ...\n\n// Await the result of the spawned task.\nlet result = join.await?;\nassert_eq!(result, \"hello world!\");\n# Ok(())\n# }\n```\n\nAgain, like `std::thread`'s [`JoinHandle` type][thread_join], if the spawned\ntask panics, awaiting its `JoinHandle` will return a [`JoinError`]. For\nexample:\n\n```\nuse tokio::task;\n\n# #[tokio::main] async fn main() {\nlet join = task::spawn(async {\n    panic!(\"something bad happened!\")\n});\n\n// The returned result indicates that the task failed.\nassert!(join.await.is_err());\n# }\n```\n\n`spawn`, `JoinHandle`, and `JoinError` are present when the \"rt\"\nfeature flag is enabled.\n\n[`task::spawn`]: crate::task::spawn()\n[future]: std::future::Future\n[`std::thread::spawn`]: std::thread::spawn\n[`JoinHandle`]: crate::task::JoinHandle\n[thread_join]: std::thread::JoinHandle\n[`JoinError`]: crate::task::JoinError\n\n### Blocking and Yielding\n\nAs we discussed above, code running in asynchronous tasks should not perform\noperations that can block. A blocking operation performed in a task running\non a thread that is also running other tasks would block the entire thread,\npreventing other tasks from running.\n\nInstead, Tokio provides two APIs for running blocking operations in an\nasynchronous context: [`task::spawn_blocking`] and [`task::block_in_place`].\n\nBe aware that if you call a non-async method from async code, that non-async\nmethod is still inside the asynchronous context, so you should also avoid\nblocking operations there. This includes destructors of objects destroyed in\nasync code.\n\n#### spawn_blocking\n\nThe `task::spawn_blocking` function is similar to the `task::spawn` function\ndiscussed in the previous section, but rather than spawning an\n_non-blocking_ future on the Tokio runtime, it instead spawns a\n_blocking_ function on a dedicated thread pool for blocking tasks. For\nexample:\n\n```\nuse tokio::task;\n\n# async fn docs() {\ntask::spawn_blocking(|| {\n    // do some compute-heavy work or call synchronous code\n});\n# }\n```\n\nJust like `task::spawn`, `task::spawn_blocking` returns a `JoinHandle`\nwhich we can use to await the result of the blocking operation:\n\n```rust\n# use tokio::task;\n# async fn docs() -> Result<(), Box<dyn std::error::Error>>{\nlet join = task::spawn_blocking(|| {\n    // do some compute-heavy work or call synchronous code\n    \"blocking completed\"\n});\n\nlet result = join.await?;\nassert_eq!(result, \"blocking completed\");\n# Ok(())\n# }\n```\n\n#### block_in_place\n\nWhen using the [multi-threaded runtime][rt-multi-thread], the [`task::block_in_place`]\nfunction is also available. Like `task::spawn_blocking`, this function\nallows running a blocking operation from an asynchronous context. Unlike\n`spawn_blocking`, however, `block_in_place` works by transitioning the\n_current_ worker thread to a blocking thread, moving other tasks running on\nthat thread to another worker thread. This can improve performance by avoiding\ncontext switches.\n\nFor example:\n\n```\nuse tokio::task;\n\n# async fn docs() {\nlet result = task::block_in_place(|| {\n    // do some compute-heavy work or call synchronous code\n    \"blocking completed\"\n});\n\nassert_eq!(result, \"blocking completed\");\n# }\n```\n\n#### yield_now\n\nIn addition, this module provides a [`task::yield_now`] async function\nthat is analogous to the standard library's [`thread::yield_now`]. Calling\nand `await`ing this function will cause the current task to yield to the\nTokio runtime's scheduler, allowing other tasks to be\nscheduled. Eventually, the yielding task will be polled again, allowing it\nto execute. For example:\n\n```rust\nuse tokio::task;\n\n# #[tokio::main] async fn main() {\nasync {\n    task::spawn(async {\n        // ...\n        println!(\"spawned task done!\")\n    });\n\n    // Yield, allowing the newly-spawned task to execute first.\n    task::yield_now().await;\n    println!(\"main task done!\");\n}\n# .await;\n# }\n```\n\n### Cooperative scheduling\n\nA single call to [`poll`] on a top-level task may potentially do a lot of\nwork before it returns `Poll::Pending`. If a task runs for a long period of\ntime without yielding back to the executor, it can starve other tasks\nwaiting on that executor to execute them, or drive underlying resources.\nSince Rust does not have a runtime, it is difficult to forcibly preempt a\nlong-running task. Instead, this module provides an opt-in mechanism for\nfutures to collaborate with the executor to avoid starvation.\n\nConsider a future like this one:\n\n```\n# use tokio_stream::{Stream, StreamExt};\nasync fn drop_all<I: Stream + Unpin>(mut input: I) {\n    while let Some(_) = input.next().await {}\n}\n```\n\nIt may look harmless, but consider what happens under heavy load if the\ninput stream is _always_ ready. If we spawn `drop_all`, the task will never\nyield, and will starve other tasks and resources on the same executor.\n\nTo account for this, Tokio has explicit yield points in a number of library\nfunctions, which force tasks to return to the executor periodically.\n\n\n#### unconstrained\n\nIf necessary, [`task::unconstrained`] lets you opt out a future of Tokio's cooperative\nscheduling. When a future is wrapped with `unconstrained`, it will never be forced to yield to\nTokio. For example:\n\n```\n# #[tokio::main]\n# async fn main() {\nuse tokio::{task, sync::mpsc};\n\nlet fut = async {\n    let (tx, mut rx) = mpsc::unbounded_channel();\n\n    for i in 0..1000 {\n        let _ = tx.send(());\n        // This will always be ready. If coop was in effect, this code would be forced to yield\n        // periodically. However, if left unconstrained, then this code will never yield.\n        rx.recv().await;\n    }\n};\n\ntask::unconstrained(fut).await;\n# }\n```\n\n[`task::spawn_blocking`]: crate::task::spawn_blocking\n[`task::block_in_place`]: crate::task::block_in_place\n[rt-multi-thread]: ../runtime/index.html#threaded-scheduler\n[`task::yield_now`]: crate::task::yield_now()\n[`thread::yield_now`]: std::thread::yield_now\n[`task::unconstrained`]: crate::task::unconstrained()\n[`poll`]: method@std::future::Future::poll","links":{"std::thread::yield_now":"1:988:2761","std::future::Future":"2:14027:138","method@std::future::Future::poll":"2:14027:138","std::thread::spawn":"1:984:1867","std::thread::JoinHandle":"1:1041:2318"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":false}},"0:276:2545":{"id":"0:276:2545","crate_id":0,"name":"poll_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[299,4],"end":[305,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14329:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10862:2444","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50616:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3839:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2842:97":{"id":"2:2842:97","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2844:3249"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:7582:4755":{"id":"1:7582:4755","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7583:58915"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3853:3288":{"id":"2:3853:3288","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13788:60662":{"id":"2:13788:60662","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13302:4968","prim@char":"1:15744:3180"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:4967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6185:2298":{"id":"5:6185:2298","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8455:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8455:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9504:3618-0:308:2264":{"id":"a:2:9504:3618-0:308:2264","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:9504:3618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:308:2264","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:323:2614":{"id":"0:323:2614","crate_id":0,"name":"inner_mut","span":{"filename":"src/io/read_buf.rs","begin":[123,4],"end":[125,5]},"visibility":"public","docs":"Returns a mutable reference to the entire buffer, without ensuring that it has been fully\ninitialized.\n\nThe elements between 0 and `self.filled().len()` are filled, and those between 0 and\n`self.initialized().len()` are initialized (and so can be converted to a `&mut [u8]`).\n\nThe caller of this method must ensure that these invariants are upheld. For example, if the\ncaller initializes some of the uninitialized section of the buffer, it must call\n[`assume_init`](Self::assume_init) with the number of bytes initialized.\n\n# Safety\n\nThe caller must not de-initialize portions of the buffer that have already been initialized.\nThis includes any bytes in the region marked as uninitialized by `ReadBuf`.","links":{"Self::assume_init":"0:308:2264"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninit","id":"2:32578:2565","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:141:2358":{"id":"0:141:2358","crate_id":0,"name":"consume","span":{"filename":"src/io/async_buf_read.rs","begin":[104,4],"end":[106,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["amt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3355:218":{"id":"2:3355:218","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6577:4621":{"id":"1:6577:4621","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6578:7905"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10355:4630","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:293:2479":{"id":"0:293:2479","crate_id":0,"name":"poll_write","span":{"filename":"src/io/async_write.rs","begin":[381,4],"end":[387,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14329:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50616:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3839:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13756:60651":{"id":"2:13756:60651","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"`DoubleEndedIterator`":"2:8687:120","self::pattern":"2:13302:4968","prim@char":"1:15744:3180","str::matches":"1:15750:3185"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49935:5219","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:4967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13312:4967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13327:4971","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:318:2581":{"id":"0:318:2581","crate_id":0,"name":"filled","span":{"filename":"src/io/read_buf.rs","begin":[62,4],"end":[67,5]},"visibility":"public","docs":"Returns a shared reference to the filled portion of the buffer.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3597:130":{"id":"2:3597:130","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3599:377"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3600:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3198:127":{"id":"2:3198:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:39050:4756","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"2:13697:4706":{"id":"2:13697:4706","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:15750:3185","str::slice_mut_unchecked":"1:15750:3185","crate::ops::Index":"2:3655:3321"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:6224:4621":{"id":"1:6224:4621","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6225:4809","1:6226:4810","1:6227:7904","1:6228:56007","1:6230:56011","1:6232:56008","1:6233:56009","1:6235:56010"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10355:4630","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13738:60648":{"id":"2:13738:60648","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split":"1:15750:3185","self::pattern":"2:13302:4968","str::split_terminator":"1:15750:3185","prim@char":"1:15744:3180"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49781:5212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:4967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13312:4967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13327:4971","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:128:2348":{"id":"0:128:2348","crate_id":0,"name":"poll_fill_buf","span":{"filename":"src/io/async_buf_read.rs","begin":[45,4],"end":[45,92]},"visibility":"default","docs":"Attempts to return the contents of the internal buffer, filling it with more data\nfrom the inner reader if it is empty.\n\nOn success, returns `Poll::Ready(Ok(buf))`.\n\nIf no data is available for reading, the method returns\n`Poll::Pending` and arranges for the current task (via\n`cx.waker().wake_by_ref()`) to receive a notification when the object becomes\nreadable or is closed.\n\nThis function is a lower-level call. It needs to be paired with the\n[`consume`] method to function properly. When calling this\nmethod, none of the contents will be \"read\" in the sense that later\ncalling [`poll_read`] may return the same contents. As such, [`consume`] must\nbe called with the number of bytes that are consumed from this buffer to\nensure that the bytes are never returned twice.\n\nAn empty buffer returned indicates that the stream has reached EOF.\n\n[`poll_read`]: AsyncRead::poll_read\n[`consume`]: AsyncBufRead::consume","links":{"AsyncBufRead::consume":"0:127:2256","AsyncRead::poll_read":"0:169:2258"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14329:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50616:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3839:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:13718:2547":{"id":"2:13718:2547","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:47750:176","self::pattern":"2:13302:4968","prim@char":"1:15744:3180"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47750:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:4967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:219:2441":{"id":"0:219:2441","crate_id":0,"name":"poll_complete","span":{"filename":"src/io/async_seek.rs","begin":[78,4],"end":[80,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14329:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50616:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3839:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3518:3320":{"id":"2:3518:3320","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3520:1240"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:797:2486":{"id":"0:797:2486","crate_id":0,"name":"poll_flush","span":{"filename":"src/io/async_write.rs","begin":[222,4],"end":[222,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14329:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50616:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3839:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23208:4658":{"id":"2:23208:4658","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:23198:4630","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3462:3308":{"id":"2:3462:3308","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3464:1106"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:427:2697":{"id":"0:427:2697","crate_id":0,"name":"sealed","span":{"filename":"src/net/addr.rs","begin":[252,0],"end":[252,21]},"visibility":"crate","docs":"The contents of this trait are intended to remain private and __not__\npart of the `ToSocketAddrs` public API. The details will change over\ntime.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:441:2701"],"is_stripped":true}},"5:5910:5366":{"id":"5:5910:5366","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5912:181","5:5913:2022"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23733:5019":{"id":"2:23733:5019","crate_id":2,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23734:1273","2:23735:1272","2:23736:1270","2:23737:1269"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialEq","id":"2:23145:5018","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5512:4639":{"id":"1:5512:4639","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5513:6639","1:5514:56201","1:5515:56202"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6187:56346":{"id":"5:6187:56346","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:15750:3185"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8455:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23145:5018":{"id":"2:23145:5018","crate_id":2,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23146:5016","2:23147:1250","2:23148:1275"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:270:2545":{"id":"0:270:2545","crate_id":0,"name":"poll_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[269,4],"end":[275,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14329:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10862:2444","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50616:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3839:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5438:4664":{"id":"1:5438:4664","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5439:6069","1:5440:56122"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10355:4630","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3450:3309":{"id":"2:3450:3309","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3452:1359"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13706:4130":{"id":"2:13706:4130","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49967:2309","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:169:2258":{"id":"0:169:2258","crate_id":0,"name":"AsyncRead","span":{"filename":"src/io/async_read.rs","begin":[43,0],"end":[58,1]},"visibility":"public","docs":"Reads bytes from a source.\n\nThis trait is analogous to the [`std::io::Read`] trait, but integrates with\nthe asynchronous task system. In particular, the [`poll_read`] method,\nunlike [`Read::read`], will automatically queue the current task for wakeup\nand return if data is not yet available, rather than blocking the calling\nthread.\n\nSpecifically, this means that the `poll_read` function will return one of\nthe following:\n\n* `Poll::Ready(Ok(()))` means that data was immediately read and placed into\n  the output buffer. The amount of data read can be determined by the\n  increase in the length of the slice returned by `ReadBuf::filled`. If the\n  difference is 0, EOF has been reached.\n\n* `Poll::Pending` means that no data was read into the buffer\n  provided. The I/O object is not currently readable but may become readable\n  in the future. Most importantly, **the current future's task is scheduled\n  to get unparked when the object is readable**. This means that like\n  `Future::poll` you'll receive a notification when the I/O object is\n  readable again.\n\n* `Poll::Ready(Err(e))` for other errors are standard I/O errors coming from the\n  underlying object.\n\nThis trait importantly means that the `read` method only works in the\ncontext of a future's task. The object may panic if used outside of a task.\n\nUtilities for working with `AsyncRead` values are provided by\n[`AsyncReadExt`].\n\n[`poll_read`]: AsyncRead::poll_read\n[`std::io::Read`]: std::io::Read\n[`Read::read`]: std::io::Read::read\n[`AsyncReadExt`]: crate::io::AsyncReadExt","links":{"AsyncRead::poll_read":"0:169:2258","std::io::Read::read":"1:4429:3346","std::io::Read":"1:4429:3346"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:170:2402"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:172","0:174","0:176","0:179","0:181"]}},"2:13679:60641":{"id":"2:13679:60641","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13782:56463":{"id":"2:13782:56463","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:15744:3180","self::pattern":"2:13302:4968"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47750:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:4967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13312:4967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13327:4971","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:345":{"id":"0:345","crate_id":0,"name":null,"span":{"filename":"src/io/mod.rs","begin":[205,25],"end":[205,34]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"std::io::ErrorKind","name":"ErrorKind","id":"1:10738:2265","glob":false}},"0:289:2557":{"id":"0:289:2557","crate_id":0,"name":"is_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[367,4],"end":[369,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:792:2486":{"id":"0:792:2486","crate_id":0,"name":"poll_flush","span":{"filename":"src/io/async_write.rs","begin":[218,4],"end":[218,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14329:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50616:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3839:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3157:135":{"id":"2:3157:135","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3159:682"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:791:2557":{"id":"0:791:2557","crate_id":0,"name":"is_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[218,4],"end":[218,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:406":{"id":"0:406","crate_id":0,"name":null,"span":{"filename":"src/net/addr.rs","begin":[90,0],"end":[90,39]},"visibility":{"restricted":{"parent":"0:355:2666","path":"::net::addr"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ToSocketAddrs","id":"0:381:2668","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"IpAddr","id":"1:10980:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"kind":"primitive","inner":"u16"}]},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:250:2486":{"id":"0:250:2486","crate_id":0,"name":"poll_flush","span":{"filename":"src/io/async_write.rs","begin":[73,4],"end":[73,93]},"visibility":"default","docs":"Attempts to flush the object, ensuring that any buffered data reach\ntheir destination.\n\nOn success, returns `Poll::Ready(Ok(()))`.\n\nIf flushing cannot immediately complete, this method returns\n`Poll::Pending` and arranges for the current task (via\n`cx.waker()`) to receive a notification when the object can make\nprogress towards flushing.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14329:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50616:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47875:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"io::Error","id":"1:3841:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:2936:177":{"id":"2:2936:177","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2937:416","2:2938:2598","2:2939:2405","2:2940:4059"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2905:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2946:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:9131:4867":{"id":"2:9131:4867","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Step","id":"2:8167:4868","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13772:60658":{"id":"2:13772:60658","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:54:1007":{"id":"0:54:1007","crate_id":0,"name":"pin","span":{"filename":"src/macros/pin.rs","begin":[125,0],"end":[144,1]},"visibility":"public","docs":"Pins a value on the stack.\n\nCalls to `async fn` return anonymous [`Future`] values that are `!Unpin`.\nThese values must be pinned before they can be polled. Calling `.await` will\nhandle this, but consumes the future. If it is required to call `.await` on\na `&mut _` reference, the caller is responsible for pinning the future.\n\nPinning may be done by allocating with [`Box::pin`] or by using the stack\nwith the `pin!` macro.\n\nThe following will **fail to compile**:\n\n```compile_fail\nasync fn my_async_fn() {\n    // async logic here\n}\n\n#[tokio::main]\nasync fn main() {\n    let mut future = my_async_fn();\n    (&mut future).await;\n}\n```\n\nTo make this work requires pinning:\n\n```\nuse tokio::pin;\n\nasync fn my_async_fn() {\n    // async logic here\n}\n\n#[tokio::main]\nasync fn main() {\n    let future = my_async_fn();\n    pin!(future);\n\n    (&mut future).await;\n}\n```\n\nPinning is useful when using `select!` and stream operators that require `T:\nStream + Unpin`.\n\n[`Future`]: trait@std::future::Future\n[`Box::pin`]: std::boxed::Box::pin\n\n# Usage\n\nThe `pin!` macro takes **identifiers** as arguments. It does **not** work\nwith expressions.\n\nThe following does not compile as an expression is passed to `pin!`.\n\n```compile_fail\nasync fn my_async_fn() {\n    // async logic here\n}\n\n#[tokio::main]\nasync fn main() {\n    let mut future = pin!(my_async_fn());\n    (&mut future).await;\n}\n```\n\n# Examples\n\nUsing with select:\n\n```\nuse tokio::{pin, select};\nuse tokio_stream::{self as stream, StreamExt};\n\nasync fn my_async_fn() {\n    // async logic here\n}\n\n#[tokio::main]\nasync fn main() {\n    let mut stream = stream::iter(vec![1, 2, 3, 4]);\n\n    let future = my_async_fn();\n    pin!(future);\n\n    loop {\n        select! {\n            _ = &mut future => {\n                // Stop looping `future` will be polled after completion\n                break;\n            }\n            Some(val) = stream.next() => {\n                println!(\"got value = {}\", val);\n            }\n        }\n    }\n}\n```\n\nBecause assigning to a variable followed by pinning is common, there is also\na variant of the macro that supports doing both in one go.\n\n```\nuse tokio::{pin, select};\n\nasync fn my_async_fn() {\n    // async logic here\n}\n\n#[tokio::main]\nasync fn main() {\n    pin! {\n        let future1 = my_async_fn();\n        let future2 = my_async_fn();\n    }\n\n    select! {\n        _ = &mut future1 => {}\n        _ = &mut future2 => {}\n    }\n}\n```","links":{"std::boxed::Box::pin":"5:444:2363","trait@std::future::Future":"2:14027:138"},"attrs":["#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! pin {\n    ($($x:ident),*) => { ... };\n    ($(\n            let $x:ident = $init:expr;\n    )*) => { ... };\n}"},"2:13695:56426":{"id":"2:13695:56426","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11175:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11175:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:322:2603":{"id":"0:322:2603","crate_id":0,"name":"initialized_mut","span":{"filename":"src/io/read_buf.rs","begin":[101,4],"end":[106,5]},"visibility":"public","docs":"Returns a mutable reference to the initialized portion of the buffer.\n\nThis includes the filled portion.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8652:3631":{"id":"2:8652:3631","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8654:4067","2:8656:4068","2:8657:4069"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:220":{"id":"0:220","crate_id":0,"name":null,"span":{"filename":"src/io/async_seek.rs","begin":[83,0],"end":[90,1]},"visibility":{"restricted":{"parent":"0:187:2259","path":"::io::async_seek"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3148:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"2:3388:1917","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsyncSeek","id":"0:208:2260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"io::Cursor","id":"1:10658:2367","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:222:2433","0:223:2441"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13797:56347":{"id":"2:13797:56347","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:794:2479":{"id":"0:794:2479","crate_id":0,"name":"poll_write","span":{"filename":"src/io/async_write.rs","begin":[222,4],"end":[222,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14329:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50616:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3839:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:286":{"id":"0:286","crate_id":0,"name":null,"span":{"filename":"src/io/async_write.rs","begin":[350,0],"end":[378,1]},"visibility":{"restricted":{"parent":"0:227:2261","path":"::io::async_write"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["poll_write_vectored","is_write_vectored"],"trait":{"name":"AsyncWrite","id":"0:248:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"io::Cursor","id":"1:10658:2367","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7874:235","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:287:2479","0:288:2545","0:289:2557","0:290:2486","0:291:2532"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:4771:2668":{"id":"1:4771:2668","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4772:2702","1:4773:2667"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3193:127":{"id":"2:3193:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:3164:228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"0:411":{"id":"0:411","crate_id":0,"name":null,"span":{"filename":"src/net/addr.rs","begin":[104,0],"end":[104,41]},"visibility":{"restricted":{"parent":"0:355:2666","path":"::net::addr"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ToSocketAddrs","id":"0:381:2668","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"Ipv4Addr","id":"1:11003:2683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"kind":"primitive","inner":"u16"}]},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:8712:3630":{"id":"2:8712:3630","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8713:795","2:8714:2548"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8844:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:271:2557":{"id":"0:271:2557","crate_id":0,"name":"is_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[277,4],"end":[279,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:187:2259":{"id":"0:187:2259","crate_id":0,"name":"async_seek","span":{"filename":"src/io/async_seek.rs","begin":[1,0],"end":[90,1]},"visibility":{"restricted":{"parent":"0:106:1851","path":"::io"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:208:2260"],"is_stripped":true}},"2:13680:60642":{"id":"2:13680:60642","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3425:3301":{"id":"2:3425:3301","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3427:181","2:3428:894"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3180-0:308:2264":{"id":"b:2:3180-0:308:2264","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3157:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3154:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:308:2264","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3183:4060"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13709:56460":{"id":"2:13709:56460","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:13302:4968","prim@char":"1:15744:3180"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:4967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3195-0:308:2264":{"id":"b:2:3195-0:308:2264","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3154:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3164:228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:308:2264","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3198:127","2:3199:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:2850:3249":{"id":"2:2850:3249","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:216":{"id":"0:216","crate_id":0,"name":null,"span":{"filename":"src/io/async_seek.rs","begin":[69,0],"end":[81,1]},"visibility":{"restricted":{"parent":"0:187:2259","path":"::io::async_seek"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"DerefMut","id":"2:3583:2320","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"2:3388:1917","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"","id":"2:3570:116","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"AsyncSeek","id":"0:208:2260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsyncSeek","id":"0:208:2260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"items":["0:218:2433","0:219:2441"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:9130:4655":{"id":"1:9130:4655","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9131:58889","1:9132:58890","1:9133:58891","1:9134:58892","1:9135:58893","1:9136:40181","1:9137:58888"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10355:4630","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13678:2548":{"id":"2:13678:2548","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6344:4634":{"id":"1:6344:4634","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6345:58596","1:6346:58597"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10816:2746":{"id":"2:10816:2746","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10817:146","2:10818:2751","2:10819:4236"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:223:2441":{"id":"0:223:2441","crate_id":0,"name":"poll_complete","span":{"filename":"src/io/async_seek.rs","begin":[87,4],"end":[89,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14329:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50616:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3839:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:277:2557":{"id":"0:277:2557","crate_id":0,"name":"is_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[307,4],"end":[309,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:780:2358":{"id":"0:780:2358","crate_id":0,"name":"consume","span":{"filename":"src/io/async_buf_read.rs","begin":[78,4],"end":[78,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["amt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13800:60664":{"id":"2:13800:60664","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:15744:3180"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:50012:5224","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3186:682":{"id":"2:3186:682","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:218:2433":{"id":"0:218:2433","crate_id":0,"name":"start_seek","span":{"filename":"src/io/async_seek.rs","begin":[74,4],"end":[76,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["pos",{"kind":"resolved_path","inner":{"name":"SeekFrom","id":"1:10874:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3839:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2848-0:308:2264":{"id":"b:2:2848-0:308:2264","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2842:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:308:2264","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2850:3249"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3655:3321":{"id":"2:3655:3321","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3657:181","2:3658:755"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:269:2479":{"id":"0:269:2479","crate_id":0,"name":"poll_write","span":{"filename":"src/io/async_write.rs","begin":[260,4],"end":[267,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14329:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50616:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3839:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5432:4666":{"id":"1:5432:4666","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5433:56144","1:5434:5428"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10355:4630","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13776:60660":{"id":"2:13776:60660","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13302:4968","prim@char":"1:15744:3180"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:4967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:301:2263":{"id":"0:301:2263","crate_id":0,"name":"read_buf","span":{"filename":"src/io/read_buf.rs","begin":[1,0],"end":[295,1]},"visibility":{"restricted":{"parent":"0:106:1851","path":"::io"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:308:2264"],"is_stripped":true}},"0:133":{"id":"0:133","crate_id":0,"name":null,"span":{"filename":"src/io/async_buf_read.rs","begin":[81,0],"end":[83,1]},"visibility":{"restricted":{"parent":"0:107:2255","path":"::io::async_buf_read"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsyncBufRead","id":"0:127:2256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"2:3388:1917","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsyncBufRead","id":"0:127:2256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"items":["0:781:2348","0:782:2358"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3415:3299":{"id":"2:3415:3299","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3417:181","2:3418:266"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:135":{"id":"0:135","crate_id":0,"name":null,"span":{"filename":"src/io/async_buf_read.rs","begin":[85,0],"end":[97,1]},"visibility":{"restricted":{"parent":"0:107:2255","path":"::io::async_buf_read"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"DerefMut","id":"2:3583:2320","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"2:3388:1917","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"","id":"2:3570:116","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"AsyncBufRead","id":"0:127:2256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsyncBufRead","id":"0:127:2256","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"items":["0:137:2348","0:138:2358"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3183:4060":{"id":"2:3183:4060","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3157:135"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:214":{"id":"0:214","crate_id":0,"name":null,"span":{"filename":"src/io/async_seek.rs","begin":[65,0],"end":[67,1]},"visibility":{"restricted":{"parent":"0:187:2259","path":"::io::async_seek"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsyncSeek","id":"0:208:2260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"2:3388:1917","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsyncSeek","id":"0:208:2260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"items":["0:787:2433","0:788:2441"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13785:60661":{"id":"2:13785:60661","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:13302:4968","prim@char":"1:15744:3180"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:4967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13312:4967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13327:4971","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13762:60653":{"id":"2:13762:60653","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13302:4968","str::match_indices":"1:15750:3185","prim@char":"1:15744:3180","`DoubleEndedIterator`":"2:8687:120"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49881:5216","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:4967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13312:4967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13327:4971","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3458:3306":{"id":"2:3458:3306","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3460:560"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8844:157":{"id":"2:8844:157","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8845:2720","2:8846:924","2:8847:4070","2:8850:2725","2:8851:496","2:8853:4071","2:8856:4072","2:8857:4073","2:8858:4074","2:8859:4075","2:8861:4076","2:8863:4077","2:8864:4078","2:8866:843","2:8869:4079","2:8876:4080","2:8878:4081","2:8881:4082","2:8882:4083","2:8883:4084","2:8885:4085","2:8887:4086","2:8890:1311","2:8891:2596","2:8892:4087","2:8896:4088","2:8899:4089","2:8900:4090","2:8901:4091","2:8903:4092","2:8904:3635","2:8906:4093","2:8909:4094","2:8911:4095","2:8921:4096","2:8936:4097","2:8938:4098","2:8942:4099","2:8951:4100","2:8954:4101","2:8956:4102","2:8959:277","2:8966:295","2:8973:2547","2:8980:4103","2:8989:4104","2:8999:1016","2:9006:4105","2:9013:2598","2:9014:2405","2:9015:4106","2:9027:4107","2:9034:4108","2:9046:4109","2:9053:4110","2:9054:4111","2:9059:4112","2:9062:4113","2:9065:4114","2:9066:4115","2:9068:4116","2:9070:4117","2:9072:416","2:9075:4118","2:9078:999","2:9081:4119","2:9084:605","2:9087:4120","2:9090:909","2:9092:828","2:9094:794","2:9096:714","2:9098:697","2:9100:4121","2:9101:4122","2:9109:4123"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13722:4066":{"id":"2:13722:4066","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:47750:176","self::pattern":"2:13302:4968","prim@char":"1:15744:3180"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47750:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:4967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13312:4967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13327:4971","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:329:2633":{"id":"0:329:2633","crate_id":0,"name":"advance","span":{"filename":"src/io/read_buf.rs","begin":[200,4],"end":[203,5]},"visibility":"public","docs":"Advances the size of the filled region of the buffer.\n\nThe number of initialized bytes is not changed.\n\n# Panics\n\nPanics if the filled region of the buffer would become larger than the initialized region.","links":{},"attrs":["#[inline]","#[track_caller]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:416":{"id":"0:416","crate_id":0,"name":null,"span":{"filename":"src/net/addr.rs","begin":[118,0],"end":[118,41]},"visibility":{"restricted":{"parent":"0:355:2666","path":"::net::addr"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ToSocketAddrs","id":"0:381:2668","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"Ipv6Addr","id":"1:11020:2684","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"kind":"primitive","inner":"u16"}]},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:292":{"id":"0:292","crate_id":0,"name":null,"span":{"filename":"src/io/async_write.rs","begin":[380,0],"end":[408,1]},"visibility":{"restricted":{"parent":"0:227:2261","path":"::io::async_write"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["poll_write_vectored","is_write_vectored"],"trait":{"name":"AsyncWrite","id":"0:248:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"io::Cursor","id":"1:10658:2367","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2363","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:293:2479","0:294:2545","0:295:2557","0:296:2486","0:297:2532"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3495:3315":{"id":"2:3495:3315","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3497:181","2:3498:1239"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3164:228":{"id":"2:3164:228","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3166:127","2:3167:1419"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:790:2545":{"id":"0:790:2545","crate_id":0,"name":"poll_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[218,4],"end":[218,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14329:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10862:2444","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50616:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3839:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:267:2532":{"id":"0:267:2532","crate_id":0,"name":"poll_shutdown","span":{"filename":"src/io/async_write.rs","begin":[254,4],"end":[256,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14329:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50616:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3839:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:330:2636":{"id":"0:330:2636","crate_id":0,"name":"set_filled","span":{"filename":"src/io/read_buf.rs","begin":[217,4],"end":[223,5]},"visibility":"public","docs":"Sets the size of the filled region of the buffer.\n\nThe number of initialized bytes is not changed.\n\nNote that this can be used to *shrink* the filled region of the buffer in addition to growing it (for\nexample, by a `AsyncRead` implementation that compresses data in-place).\n\n# Panics\n\nPanics if the filled region of the buffer would become larger than the initialized region.","links":{},"attrs":["#[inline]","#[track_caller]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3086:4946":{"id":"2:3086:4946","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:3085:4630","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:209:2433":{"id":"0:209:2433","crate_id":0,"name":"start_seek","span":{"filename":"src/io/async_seek.rs","begin":[33,4],"end":[33,78]},"visibility":"default","docs":"Attempts to seek to an offset, in bytes, in a stream.\n\nA seek beyond the end of a stream is allowed, but behavior is defined\nby the implementation.\n\nIf this function returns successfully, then the job has been submitted.\nTo find out when it completes, call `poll_complete`.\n\n# Errors\n\nThis function can return [`io::ErrorKind::Other`] in case there is\nanother seek in progress. To avoid this, it is advisable that any call\nto `start_seek` is preceded by a call to `poll_complete` to ensure all\npending seeks have completed.","links":{"`io::ErrorKind::Other`":"1:10738:2265"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["position",{"kind":"resolved_path","inner":{"name":"SeekFrom","id":"1:10874:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3839:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"5:6168:61300":{"id":"5:6168:61300","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8455:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8455:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:4967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:354:1852":{"id":"0:354:1852","crate_id":0,"name":"net","span":{"filename":"src/net/mod.rs","begin":[1,0],"end":[52,1]},"visibility":"public","docs":"TCP/UDP/Unix bindings for `tokio`.\n\nThis module contains the TCP/UDP/Unix networking types, similar to the standard\nlibrary, which can be used to implement networking protocols.\n\n# Organization\n\n* [`TcpListener`] and [`TcpStream`] provide functionality for communication over TCP\n* [`UdpSocket`] provides functionality for communication over UDP\n* [`UnixListener`] and [`UnixStream`] provide functionality for communication over a\nUnix Domain Stream Socket **(available on Unix only)**\n* [`UnixDatagram`] provides functionality for communication\nover Unix Domain Datagram Socket **(available on Unix only)**\n\n[`TcpListener`]: TcpListener\n[`TcpStream`]: TcpStream\n[`UdpSocket`]: UdpSocket\n[`UnixListener`]: UnixListener\n[`UnixStream`]: UnixStream\n[`UnixDatagram`]: UnixDatagram","links":{},"attrs":["#![cfg(not(loom))]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:443"],"is_stripped":false}},"0:145:2358":{"id":"0:145:2358","crate_id":0,"name":"consume","span":{"filename":"src/io/async_buf_read.rs","begin":[114,4],"end":[116,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["amt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13699:2409":{"id":"2:13699:2409","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:15750:3185"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13803:60665":{"id":"2:13803:60665","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:15744:3180"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:50030:5225","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4429:3346":{"id":"1:4429:3346","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4430:3723","1:4431:4588","1:4433:4589","1:4434:4590","1:4435:3347","1:4436:4591","1:4437:2263","1:4439:4592","1:4440:4092","1:4441:4593","1:4442:4075","1:4444:2596"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12742:5354":{"id":"2:12742:5354","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12743:2720","2:12744:59396"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:103":{"id":"0:103","crate_id":0,"name":null,"span":{"filename":"src/future/mod.rs","begin":[9,0],"end":[9,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"poll_fn::poll_fn","name":"poll_fn","id":"0:92:2120","glob":false}},"0:441:2701":{"id":"0:441:2701","crate_id":0,"name":"Internal","span":{"filename":"src/net/addr.rs","begin":[270,4],"end":[270,24]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(missing_debug_implementations)]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"unit","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":[],"impls":[]}},"2:11175:214":{"id":"2:11175:214","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:11177:181","2:11178:2760","2:11179:2361","2:11180:56425","2:11181:56426","2:11182:755","2:11183:756"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:11166:4630","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:107:2255":{"id":"0:107:2255","crate_id":0,"name":"async_buf_read","span":{"filename":"src/io/async_buf_read.rs","begin":[1,0],"end":[117,1]},"visibility":{"restricted":{"parent":"0:106:1851","path":"::io"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:127:2256"],"is_stripped":true}},"0:257":{"id":"0:257","crate_id":0,"name":null,"span":{"filename":"src/io/async_write.rs","begin":[217,0],"end":[219,1]},"visibility":{"restricted":{"parent":"0:227:2261","path":"::io::async_write"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsyncWrite","id":"0:248:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"2:3388:1917","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["poll_write_vectored","is_write_vectored"],"trait":{"name":"AsyncWrite","id":"0:248:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2363","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:789:2479","0:790:2545","0:791:2557","0:792:2486","0:793:2532"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13791:60663":{"id":"2:13791:60663","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:13302:4968","prim@char":"1:15744:3180"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:4967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13312:4967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13327:4971","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:1075:4668":{"id":"1:1075:4668","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1076:4125","1:1077:5361","1:1078:56345","1:1079:56346","1:1080:56347","1:1081:56348","1:1082:56349"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3637:3283":{"id":"2:3637:3283","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3639:238","2:3640:206","2:3641:60416"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:446:1853":{"id":"0:446:1853","crate_id":0,"name":"loom","span":{"filename":"src/loom/mod.rs","begin":[1,0],"end":[14,31]},"visibility":"crate","docs":"This module abstracts over `loom` and `std::sync` depending on whether we\nare running tests or not.","links":{},"attrs":["#![allow(unused)]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":true}},"0:332:2410":{"id":"0:332:2410","crate_id":0,"name":"put_slice","span":{"filename":"src/io/read_buf.rs","begin":[248,4],"end":[270,5]},"visibility":"public","docs":"Appends data to the buffer, advancing the written position and possibly also the initialized position.\n\n# Panics\n\nPanics if `self.remaining()` is less than `buf.len()`.","links":{},"attrs":["#[inline]","#[track_caller]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3600:131":{"id":"2:3600:131","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3602:378"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3603:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3160:229":{"id":"2:3160:229","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3162:127","2:3163:1420"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10771:142":{"id":"2:10771:142","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10772:716","2:10774:4237"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:331:328":{"id":"0:331:328","crate_id":0,"name":"assume_init","span":{"filename":"src/io/read_buf.rs","begin":[234,4],"end":[239,5]},"visibility":"public","docs":"Asserts that the first `n` unfilled bytes of the buffer are initialized.\n\n`ReadBuf` assumes that bytes are never de-initialized, so this method does nothing when called with fewer\nbytes than are already known to be initialized.\n\n# Safety\n\nThe caller must ensure that `n` unfilled bytes of the buffer have already been initialized.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13321:4970":{"id":"2:13321:4970","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13323:4990","2:13324:924","2:13325:59399","2:13326:59400"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:320:2596":{"id":"0:320:2596","crate_id":0,"name":"take","span":{"filename":"src/io/read_buf.rs","begin":[80,4],"end":[84,5]},"visibility":"public","docs":"Returns a new `ReadBuf` comprised of the unfilled section up to `n`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:308:2264","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3194:1420":{"id":"2:3194:1420","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47875:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:3164:228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9503:3619":{"id":"2:9503:3619","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:291:2532":{"id":"0:291:2532","crate_id":0,"name":"poll_shutdown","span":{"filename":"src/io/async_write.rs","begin":[375,4],"end":[377,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14329:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50616:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3839:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:384":{"id":"0:384","crate_id":0,"name":null,"span":{"filename":"src/net/addr.rs","begin":[34,0],"end":[34,55]},"visibility":{"restricted":{"parent":"0:355:2666","path":"::net::addr"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ToSocketAddrs","id":"0:381:2668","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ToSocketAddrs","id":"0:381:2668","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13802:4670":{"id":"2:13802:4670","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:15744:3180"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:50021:4671","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:274":{"id":"0:274","crate_id":0,"name":null,"span":{"filename":"src/io/async_write.rs","begin":[290,0],"end":[318,1]},"visibility":{"restricted":{"parent":"0:227:2261","path":"::io::async_write"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["poll_write_vectored","is_write_vectored"],"trait":{"name":"AsyncWrite","id":"0:248:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"io::Cursor","id":"1:10658:2367","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}}],"bindings":[]}}}},"items":["0:275:2479","0:276:2545","0:277:2557","0:278:2486","0:279:2532"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3583:2320":{"id":"2:3583:2320","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3584:546"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Deref","id":"2:3570:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:283:2557":{"id":"0:283:2557","crate_id":0,"name":"is_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[337,4],"end":[339,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:24042:5017":{"id":"2:24042:5017","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:24043:5016"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:24038:4630","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"2:3357:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13685:56122":{"id":"2:13685:56122","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12766:5318"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3190-0:308:2264":{"id":"b:2:3190-0:308:2264","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3164:228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3160:229","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:308:2264","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3193:127","2:3194:1420"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:783:2402":{"id":"0:783:2402","crate_id":0,"name":"poll_read","span":{"filename":"src/io/async_read.rs","begin":[73,4],"end":[73,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14329:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:308:2264","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50616:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3839:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14510:4194":{"id":"2:14510:4194","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14511:58367","2:14512:58368","2:14513:58369","2:14514:58370","2:14515:58371","2:14516:58372","2:14517:4092"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13687:305":{"id":"2:13687:305","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:15750:3185","`u8`":"1:15761:3194"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13765:60654":{"id":"2:13765:60654","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23357:17133":{"id":"2:23357:17133","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23358:8467","2:23359:59847","2:23360:59848"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:23350:4630","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:282:2545":{"id":"0:282:2545","crate_id":0,"name":"poll_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[329,4],"end":[335,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14329:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10862:2444","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50616:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3839:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:447:1334":{"id":"0:447:1334","crate_id":0,"name":"std","span":{"filename":"src/loom/std/mod.rs","begin":[1,0],"end":[108,1]},"visibility":{"restricted":{"parent":"0:446:1853","path":"::loom"}},"docs":null,"links":{},"attrs":["#[cfg(not(all(test, loom)))]","#![allow(unused_imports, dead_code)]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":true}},"5:6163":{"id":"5:6163","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5976:1343","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6164:61299","5:6165:3353","5:6168:61300","5:6171:61301","5:6183:61302","5:6184:61303","5:6185:2298","5:6186:56345","5:6187:56346"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:9504:3618":{"id":"2:9504:3618","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:279:2532":{"id":"0:279:2532","crate_id":0,"name":"poll_shutdown","span":{"filename":"src/io/async_write.rs","begin":[315,4],"end":[317,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14329:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50616:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3839:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3467:3313":{"id":"2:3467:3313","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3468:181","2:3469:954"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13707:60646":{"id":"2:13707:60646","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49977:5220","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:298":{"id":"0:298","crate_id":0,"name":null,"span":{"filename":"src/io/mod.rs","begin":[197,0],"end":[197,38]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::async_write::AsyncWrite","name":"AsyncWrite","id":"0:248:2262","glob":false}},"0:785:2433":{"id":"0:785:2433","crate_id":0,"name":"start_seek","span":{"filename":"src/io/async_seek.rs","begin":[62,4],"end":[62,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["pos",{"kind":"resolved_path","inner":{"name":"SeekFrom","id":"1:10874:2266","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3839:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10554:3558":{"id":"2:10554:3558","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10555:661"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13698:60645":{"id":"2:13698:60645","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"crate::ops::IndexMut":"2:3659:3322","str::slice_unchecked":"1:15750:3185","`str`":"1:15750:3185"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3489:3314":{"id":"2:3489:3314","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3491:181","2:3492:1236"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:325:2619":{"id":"0:325:2619","crate_id":0,"name":"initialize_unfilled","span":{"filename":"src/io/read_buf.rs","begin":[144,4],"end":[146,5]},"visibility":"public","docs":"Returns a mutable reference to the unfilled part of the buffer, ensuring it is fully initialized.\n\nSince `ReadBuf` tracks the region of the buffer that has been initialized, this is effectively \"free\" after\nthe first use.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:4078:68":{"id":"2:4078:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4079:1432"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"2:14027:138":{"id":"2:14027:138","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:14028:181","2:14029:1015"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6472:4641":{"id":"1:6472:4641","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6473:58603","1:6474:9237","1:6475:9238","1:6476:9240","1:6477:9239","1:6478:9241","1:6479:9242","1:6480:9244","1:6481:6681","1:6482:9247","1:6483:9248","1:6484:9249","1:6485:9250","1:6486:9251","1:6487:9252","1:6488:9245","1:6489:9246"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13712:56461":{"id":"2:13712:56461","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:15744:3180","self::pattern":"2:13302:4968"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:4967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13796:5361":{"id":"2:13796:5361","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:285:2532":{"id":"0:285:2532","crate_id":0,"name":"poll_shutdown","span":{"filename":"src/io/async_write.rs","begin":[345,4],"end":[347,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14329:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50616:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3839:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:782:2358":{"id":"0:782:2358","crate_id":0,"name":"consume","span":{"filename":"src/io/async_buf_read.rs","begin":[82,4],"end":[82,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["amt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:328:2629":{"id":"0:328:2629","crate_id":0,"name":"clear","span":{"filename":"src/io/read_buf.rs","begin":[187,4],"end":[189,5]},"visibility":"public","docs":"Clears the buffer, resetting the filled region to empty.\n\nThe number of initialized bytes is not changed, and the contents of the buffer are not modified.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2946:184":{"id":"2:2946:184","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2948:999","2:2949:828","2:2950:794","2:2951:714","2:2952:697"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2900:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3352:2362":{"id":"2:3352:2362","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2867:104":{"id":"2:2867:104","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2868:409","2:2869:411"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3890:3289":{"id":"2:3890:3289","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:775:1897":{"id":"0:775:1897","crate_id":0,"name":"stream","span":{"filename":"src/lib.rs","begin":[495,0],"end":[495,14]},"visibility":"public","docs":"Due to the `Stream` trait's inclusion in `std` landing later than Tokio's 1.0\nrelease, most of the Tokio stream utilities have been moved into the [`tokio-stream`]\ncrate.\n\n# Why was `Stream` not included in Tokio 1.0?\n\nOriginally, we had planned to ship Tokio 1.0 with a stable `Stream` type\nbut unfortunately the [RFC] had not been merged in time for `Stream` to\nreach `std` on a stable compiler in time for the 1.0 release of Tokio. For\nthis reason, the team has decided to move all `Stream` based utilities to\nthe [`tokio-stream`] crate. While this is not ideal, once `Stream` has made\nit into the standard library and the MSRV period has passed, we will implement\nstream for our different types.\n\nWhile this may seem unfortunate, not all is lost as you can get much of the\n`Stream` support with `async/await` and `while let` loops. It is also possible\nto create a `impl Stream` from `async fn` using the [`async-stream`] crate.\n\n[`tokio-stream`]: https://docs.rs/tokio-stream\n[`async-stream`]: https://docs.rs/async-stream\n[RFC]: https://github.com/rust-lang/rfcs/pull/2996\n\n# Example\n\nConvert a [`sync::mpsc::Receiver`] to an `impl Stream`.\n\n```rust,no_run\nuse tokio::sync::mpsc;\n\nlet (tx, mut rx) = mpsc::channel::<usize>(16);\n\nlet stream = async_stream::stream! {\n    while let Some(item) = rx.recv().await {\n        yield item;\n    }\n};\n```","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":false}},"a:2:9503:3619-0:308:2264":{"id":"a:2:9503:3619-0:308:2264","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:9503:3619","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:308:2264","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"2:13677:795":{"id":"2:13677:795","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15744:3180"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:69:694":{"id":"0:69:694","crate_id":0,"name":"future","span":{"filename":"src/future/mod.rs","begin":[1,0],"end":[30,1]},"visibility":"crate","docs":"Asynchronous values.","links":{},"attrs":["#![allow(unreachable_pub)]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:103"],"is_stripped":true}},"0:212":{"id":"0:212","crate_id":0,"name":null,"span":{"filename":"src/io/async_seek.rs","begin":[61,0],"end":[63,1]},"visibility":{"restricted":{"parent":"0:187:2259","path":"::io::async_seek"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsyncSeek","id":"0:208:2260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"2:3388:1917","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsyncSeek","id":"0:208:2260","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2363","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:785:2433","0:786:2441"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3359:220":{"id":"2:3359:220","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3501:3316":{"id":"2:3501:3316","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3503:353"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:210:2441":{"id":"0:210:2441","crate_id":0,"name":"poll_complete","span":{"filename":"src/io/async_seek.rs","begin":[46,4],"end":[46,90]},"visibility":"default","docs":"Waits for a seek operation to complete.\n\nIf the seek operation completed successfully,\nthis method returns the new position from the start of the stream.\nThat position can be used later with [`SeekFrom::Start`]. Repeatedly\ncalling this function without calling `start_seek` might return the\nsame result.\n\n# Errors\n\nSeeking to a negative offset is considered an error.","links":{"`SeekFrom::Start`":"1:10874:2266"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14329:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50616:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3839:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:174":{"id":"0:174","crate_id":0,"name":null,"span":{"filename":"src/io/async_read.rs","begin":[76,0],"end":[78,1]},"visibility":{"restricted":{"parent":"0:149:2257","path":"::io::async_read"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsyncRead","id":"0:169:2258","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"2:3388:1917","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsyncRead","id":"0:169:2258","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"items":["0:784:2402"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3603:132":{"id":"2:3603:132","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3605:181","2:3606:379"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3347:211-0:308:2264":{"id":"a:2:3347:211-0:308:2264","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:3347:211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:308:2264","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:4504:2443":{"id":"1:4504:2443","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4505:2293","1:4506:4142","1:4507:4143","1:4508:4144"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3151:74":{"id":"2:3151:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3153:2365"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:281:2479":{"id":"0:281:2479","crate_id":0,"name":"poll_write","span":{"filename":"src/io/async_write.rs","begin":[321,4],"end":[327,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14329:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50616:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3839:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5582:4645":{"id":"1:5582:4645","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5583:6639"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3795:3325":{"id":"2:3795:3325","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"2:3726:3324","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:316:2587":{"id":"0:316:2587","crate_id":0,"name":"uninit","span":{"filename":"src/io/read_buf.rs","begin":[46,4],"end":[52,5]},"visibility":"public","docs":"Creates a new `ReadBuf` from a fully uninitialized buffer.\n\nUse `assume_init` if part of the buffer is known to be already initialized.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninit","id":"2:32578:2565","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:308:2264","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3818:3327":{"id":"2:3818:3327","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3820:55019"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6165:3353":{"id":"5:6165:3353","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8455:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8455:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:4967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3446:3305":{"id":"2:3446:3305","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3448:267"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:278:2486":{"id":"0:278:2486","crate_id":0,"name":"poll_flush","span":{"filename":"src/io/async_write.rs","begin":[311,4],"end":[313,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14329:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50616:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3839:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5526:4641":{"id":"1:5526:4641","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5527:8893","1:5528:58119","1:5529:6639","1:5530:58120","1:5531:4809","1:5532:4810","1:5533:58121","1:5534:1307","1:5535:58122","1:5536:58123","1:5537:58124","1:5538:58125","1:5539:58126","1:5540:58127","1:5541:58128","1:5542:58129"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13732:56454":{"id":"2:13732:56454","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:13302:4968","`DoubleEndedIterator`":"2:8687:120","str::split":"1:15750:3185","prim@char":"1:15744:3180"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49731:5183","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:4967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13312:4967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13327:4971","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:796:2557":{"id":"0:796:2557","crate_id":0,"name":"is_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[222,4],"end":[222,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23019:5013":{"id":"2:23019:5013","crate_id":2,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23020:5016","2:23021:60025","2:23022:60289","2:23023:60290","2:23024:60291","2:23025:43578","2:23026:60292","2:23027:60293","2:23028:60294","2:23029:60295","2:23030:60296","2:23031:60297","2:23032:60298","2:23033:60299","2:23034:60300","2:23035:60301","2:23036:60074","2:23037:60302","2:23038:59433","2:23039:59432","2:23040:59434","2:23041:60026","2:23042:60027","2:23043:60028","2:23044:60029"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3357:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23121:4630","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:180:2402":{"id":"0:180:2402","crate_id":0,"name":"poll_read","span":{"filename":"src/io/async_read.rs","begin":[95,4],"end":[105,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14329:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:308:2264","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50616:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3839:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:793:2532":{"id":"0:793:2532","crate_id":0,"name":"poll_shutdown","span":{"filename":"src/io/async_write.rs","begin":[218,4],"end":[218,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14329:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50616:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3839:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:443":{"id":"0:443","crate_id":0,"name":null,"span":{"filename":"src/net/mod.rs","begin":[28,0],"end":[28,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"addr::ToSocketAddrs","name":"ToSocketAddrs","id":"0:381:2668","glob":false}},"0:786:2441":{"id":"0:786:2441","crate_id":0,"name":"poll_complete","span":{"filename":"src/io/async_seek.rs","begin":[62,4],"end":[62,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14329:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50616:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3839:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13704:33056":{"id":"2:13704:33056","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:15750:3185"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49987:5221","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23405:5039":{"id":"2:23405:5039","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdElement","id":"2:24042:5017","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23396:4630","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2845:5012":{"id":"2:2845:5012","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2847:55745"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2842:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13767:60655":{"id":"2:13767:60655","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3:1848":{"id":"0:3:1848","crate_id":0,"name":"macros","span":{"filename":"src/macros/mod.rs","begin":[1,0],"end":[40,16]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_use]","#[doc(hidden)]","#![allow(unused_macros)]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":true}},"0:317:2589":{"id":"0:317:2589","crate_id":0,"name":"capacity","span":{"filename":"src/io/read_buf.rs","begin":[56,4],"end":[58,5]},"visibility":"public","docs":"Returns the total capacity of the buffer.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:259":{"id":"0:259","crate_id":0,"name":null,"span":{"filename":"src/io/async_write.rs","begin":[221,0],"end":[223,1]},"visibility":{"restricted":{"parent":"0:227:2261","path":"::io::async_write"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsyncWrite","id":"0:248:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"2:3388:1917","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["poll_write_vectored","is_write_vectored"],"trait":{"name":"AsyncWrite","id":"0:248:2262","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"items":["0:794:2479","0:795:2545","0:796:2557","0:797:2486","0:798:2532"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:140:2348":{"id":"0:140:2348","crate_id":0,"name":"poll_fill_buf","span":{"filename":"src/io/async_buf_read.rs","begin":[100,4],"end":[102,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14329:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50616:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3839:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3430:3300":{"id":"2:3430:3300","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3432:181","2:3433:559"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3436:3303":{"id":"2:3436:3303","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3438:181","2:3439:1105"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:227:2261":{"id":"0:227:2261","crate_id":0,"name":"async_write","span":{"filename":"src/io/async_write.rs","begin":[1,0],"end":[408,1]},"visibility":{"restricted":{"parent":"0:106:1851","path":"::io"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:248:2262"],"is_stripped":true}},"1:5570:4642":{"id":"1:5570:4642","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5571:58119"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3659:3322":{"id":"2:3659:3322","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3661:756"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Index","id":"2:3655:3321","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13735:60647":{"id":"2:13735:60647","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"str::rsplit_terminator":"1:15750:3185","`DoubleEndedIterator`":"2:8687:120","self::pattern":"2:13302:4968","prim@char":"1:15744:3180","str::split":"1:15750:3185"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49763:5211","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:4967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10483:2560":{"id":"2:10483:2560","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10484:1536","2:10485:58333","2:10487:4148"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3184-0:308:2264":{"id":"b:2:3184-0:308:2264","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3157:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:308:2264","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3186:682"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13750:60650":{"id":"2:13750:60650","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47750:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:4967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13312:4967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13327:4971","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10552:3557":{"id":"2:10552:3557","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10553:661"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:4080-0:308:2264":{"id":"b:2:4080-0:308:2264","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2362","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4078:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:308:2264","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:4082:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:170:2402":{"id":"0:170:2402","crate_id":0,"name":"poll_read","span":{"filename":"src/io/async_read.rs","begin":[53,4],"end":[57,30]},"visibility":"default","docs":"Attempts to read from the `AsyncRead` into `buf`.\n\nOn success, returns `Poll::Ready(Ok(()))` and places data in the\nunfilled portion of `buf`. If no data was read (`buf.filled().len()` is\nunchanged), it implies that EOF has been reached.\n\nIf no data is available for reading, the method returns `Poll::Pending`\nand arranges for the current task (via `cx.waker()`) to receive a\nnotification when the object becomes readable or is closed.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47867:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14329:2128","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:308:2264","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50616:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3839:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"paths":{"17:13708:7228":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"5:8209:2703":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"12:2419:3456":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:13515:7166":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:3443:3354":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"16:5887:5951":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:10643:6570":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:9326:6120":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:9396:6434":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:25022:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:3583:2320":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:1533:3475":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:5311:9079":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:7980:6293":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"2:28300:4953":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:10198:6550":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:11810:6738":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"16:3743:7322":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:10728:4468":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"16:6931:6010":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:3637:3283":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"2:47867:188":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:10516:6556":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:10816:2746":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"16:5427:5751":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:1504:3471":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:13029:7029":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:5570:4642":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"6:6902:9363":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:23261:5016":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:12573:6879":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"12:750:2702":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"5:8432:5427":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:10473:13038":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:11530:6676":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:3231:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:49817:5186":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:12455:6860":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:11826:55858":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"17:10503:6126":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:23202:4656":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:11282:47749":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"5:7306:3466":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:9948:6536":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"9:0:3162":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:53543:5082":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:5582:9196":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:49671:5093":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"12:432:5611":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:4332:8897":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:46597:5343":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"16:4871:7344":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:1449:3464":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:46966:4926":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:9636:6530":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"16:2754:5955":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:10688:7705":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:0:1334":{"crate_id":1,"path":["std"],"kind":"module"},"6:4061:8808":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:4356:8909":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:49521:5192":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:11784:6733":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:9426:8133":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"16:4573:7334":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:13020:5213":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:3836:4869":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:11133:3397":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:10777:142":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"17:11181:6629":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:10422:6553":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:32578:2565":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:1626:8615":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"5:8549:4197":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:23121:4630":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"18:849:6156":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:13404:7130":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"5:6775:5392":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:11379:3463":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"5:5910:5366":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:6342:5779":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:15249:5637":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:15760:3193":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:11433:2702":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:7992:4928":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:53608:7830":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:4008:6447":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:5194:3415":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:11547:6678":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:13147:7071":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:5432:4666":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:10913:6612":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"5:8403:5277":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"18:829:6155":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:14390:201":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"1:1015:205":{"crate_id":1,"path":["std","thread","Result"],"kind":"typedef"},"17:9131:47745":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:7741:5804":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"12:979:3475":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"5:853:108":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:2905:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:4020:8791":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:49552:5195":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:6331:5625":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:6120:9264":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:6486:9251":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:46663:5339":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"6:5247:9045":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:49863:5215":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:13332:4972":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:11182:4843":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:15759:3192":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:2845:5012":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:4098:8828":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"12:1256:3479":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:1500:3470":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:14426:141":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:10364:6097":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:49731:5183":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"18:739:6421":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:11457:6656":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:3655:3321":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:52349:5078":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:53397:5079":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"18:837:4970":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:545:8499":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"6:0:800":{"crate_id":6,"path":["libc"],"kind":"module"},"17:12183:6800":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:8426:3432":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:5293:9067":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"5:4509:2702":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:10489:6555":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:12731:6907":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:9579:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"2:47816:3129":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:13323:7114":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:49633:5200":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"16:3576:6453":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:13155:7072":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:24758:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:12298:6289":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"2:51555:5052":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"12:940:3472":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"9:234:5501":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"2:10552:3557":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:5229:9035":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:11175:214":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:1606:8601":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"5:6759:2753":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"6:6007:9226":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:15768:3201":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:49294:5359":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:50130:4976":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:5504:4638":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:7719:8066":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"6:4116:8837":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:3793:4471":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:4148:8851":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"12:869:3466":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"16:6518:5717":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:5643:4836":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"18:169:54035":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:15761:3194":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:10377:2765":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:6484:9249":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:49055:7758":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"5:1256:60578":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"12:466:61987":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"12:764:3463":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"18:611:6162":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:15745:3181":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:25490:5119":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"5:5488:3338":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:46696:5134":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:10738:2265":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:3908:7324":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:6577:4621":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:12660:6896":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:681:6443":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"5:1663:2702":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:46845:3350":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:15152:2677":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:9520:4795":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"16:3029:5967":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:11579:6684":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:12892:6919":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"12:472:61988":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:15214:7916":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:2441:7859":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:13986:2287":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:11224:9236":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"16:4660:7337":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:8419:3406":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:10542:3553":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"6:5447:9149":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:13887:7282":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"16:5348:5746":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:7579:4754":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:14118:187":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:10489:7870":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:8477:2754":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:9361:6433":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:53599:7829":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:8844:157":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:15767:3200":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:13711:4750":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:12607:6892":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:49623:5199":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:14835:3567":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"17:13573:7178":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:4028:8794":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:2525:4774":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"16:6656:6001":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"12:1703:5621":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:11188:4802":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:50460:5232":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:15750:3185":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:50651:3290":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"16:7702:5712":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:5301:9072":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:9431:6435":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"12:1682:5620":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:10634:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:37870:178":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:12431:6857":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:3356:217":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"16:2861:5963":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:11130:6625":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:12160:7860":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:50428:5230":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"2:49084:2714":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:11085:6087":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:15769:3202":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:13785:7252":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:12038:3568":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"16:5460:5753":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:11086:55848":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"17:10988:6618":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:8076:3525":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"1:4163:4787":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"6:4142:8849":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:3603:132":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:48136:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"16:3770:7323":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:5697:5103":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:51871:5053":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:1764:8696":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:11170:2685":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"8:0:3161":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:10851:6605":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"16:6286:5626":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"6:618:8544":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:13873:7275":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:7659:5803":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:4903:7345":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"9:692:5476":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"1:5520:4640":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:23350:4630":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:46587:5342":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:12490:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"17:10166:6548":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:12557:6875":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:7754:5805":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"16:2792:5688":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:3375:4054":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:10831:6107":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:48010:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:46557:5130":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:13908:7288":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"6:4532:8984":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:14300:4662":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:12766:5318":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"19:0:996":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:8652:3631":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"12:162:5610":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:4127:8842":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"12:559:143":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:52799:5067":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:5438:4664":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:23405:5039":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:10493:134":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:15749:3184":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:3659:3322":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:13377:7126":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:13257:7099":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:3795:3325":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:50456:5231":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:10048:6544":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:11884:4682":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"16:6549:5719":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:10266:6105":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:23733:5019":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:14510:4194":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:50005:5223":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:1041:2318":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:2185:4673":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:9558:6310":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"1:2163:2702":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:9920:6535":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:5398:9129":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:10604:4431":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:5158:2675":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"5:8200:4195":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:9503:3619":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"13:121:46059":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:12157:6797":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"0:354:1852":{"crate_id":0,"path":["tokio","net"],"kind":"module"},"17:13794:7254":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:2166:579":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"9:900:8472":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:5455:9151":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:12700:6901":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"9:1020:5543":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:14329:2128":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:9505:3617":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"11:54:5596":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"17:8954:6062":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:2748:580":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:11591:6687":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"12:1162:5606":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:4410:8935":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:5526:4641":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:8712:4821":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"6:4055:8806":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:10617:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:48750:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:13094:5180":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:13507:7163":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"16:0:3168":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:13992:2285":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:15758:3191":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:2842:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:9646:62002":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"16:4803:7342":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"6:1748:8691":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"9:603:45589":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:10394:6093":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:6035:5741":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:3164:228":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"12:1147:3478":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:5178:9015":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:24385:7715":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:10733:4469":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:13755:7246":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:53795:7841":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:56601:237":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:24989:165":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:3743:6052":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:51280:7768":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:11563:6683":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:2376:3285":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:783:6311":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"17:11640:6694":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:11797:6737":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"16:547:5946":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"16:7449:5711":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:6557:5785":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"16:7200:5720":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:1491:3468":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:11769:6727":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:53733:7839":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"12:933:3471":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:53505:5062":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:2895:1850":{"crate_id":1,"path":["std","fs"],"kind":"module"},"1:7714:3524":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"2:49763:5211":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:53654:7834":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:53718:7838":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:5499:5334":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:13312:4967":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:5117:3408":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:11474:6661":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:1645:3478":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:3151:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:48774:133":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"2:50485:3572":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"2:2271:3738":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"6:5433:9144":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"5:8240:60543":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"16:6949:6011":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:9826:6107":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:14338:7912":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:542:5675":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"18:754:62009":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:13059:5217":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"5:1673:3463":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:53257:5075":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:9504:3618":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:3086:4946":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:2370:601":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:12057:3569":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:47016:4915":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:5048:2860":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:2936:177":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:46790:6283":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:10533:109":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"5:1533:3477":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"5:8297:2703":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:14864:7913":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:52145:7782":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:6214:9320":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"12:114:61991":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:5567:9185":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:13247:7098":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:9275:6523":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:7906:4076":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:2543:6122":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:3478:5974":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:5541:9170":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:8197:5430":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"2:47791:2702":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:9930:61999":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"5:5948:6270":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"17:10390:6103":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:11898:4685":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:6114:9262":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:53756:7840":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"17:11985:6768":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:14705:6320":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"16:5721:5763":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:2981:5976":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:3509:3318":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:8268:4683":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:11876:2702":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:49102:7764":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:11922:6753":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:4321:8891":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:1634:8620":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"13:0:3159":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:56562:237":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:3428:4674":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:15494:6321":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:7582:4755":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:10340:6099":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:3462:3308":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:11196:3402":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"5:8344:3456":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:1526:8558":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:5745:5764":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:6925:9369":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:12348:6841":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:10771:142":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:13975:7300":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:1654:3479":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:7464:4748":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"6:4277:8868":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:15710:58463":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:3419:6291":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:5512:4639":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:3413:965":{"crate_id":2,"path":["core","ops"],"kind":"module"},"17:10304:6095":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:10862:2444":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:13481:7153":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:13817:7267":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:56166:5096":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"7:38:45411":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:46957:4910":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:13302:4968":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:1190:8130":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"2:3489:3314":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:1462:3465":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:13421:7137":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:2554:4775":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:51454:5072":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:49072:146":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"5:3105:60636":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"16:7110:5796":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"16:5869:189":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"5:1626:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:13043:5214":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:49881:5216":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:11962:4689":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:12360:6843":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:49531:5193":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:4287:8875":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"5:8532:3467":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"18:866:6158":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:48262:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:6205:9317":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:11246:4625":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:1149:7850":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"16:6141:5774":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"5:3104:4125":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:47918:2702":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:2698:179":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:13988:694":{"crate_id":2,"path":["core","future"],"kind":"module"},"17:9291:6432":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:6224:4621":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:2953:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"16:4840:7343":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:50321:5285":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:4:981":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:7294:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:53147:5055":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:21:673":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:24824:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:7519:4750":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:50341:5286":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:4753:3338":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"6:601:8536":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"1:2405:7858":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"16:6717:5788":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:10548:3560":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:2955:4428":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:52379:5081":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:24923:3529":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:11822:6741":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:3479:3311":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:11652:5187":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:46896:4905":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"20:0:1918":{"crate_id":20,"path":["pin_project_lite"],"kind":"module"},"5:8224:3466":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"6:1531:8560":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:50659:3291":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:32404:5307":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:9183:6060":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:10610:6567":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"6:4474:8961":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:13953:7294":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:13369:7124":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:12026:6772":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:5745:4842":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:12406:6853":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"16:6050:5770":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:11968:6765":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"5:0:278":{"crate_id":5,"path":["alloc"],"kind":"module"},"9:1056:5536":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:57876:7848":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"1:14766:4751":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:6482:9247":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"12:2392:8466":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:13612:7190":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"5:981:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"5:2266:6263":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"5:7714:4201":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:49298:5358":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:12646:6895":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:15071:4652":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:48524:3559":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:2035:145":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:47026:4921":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:14350:4430":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:6246:4618":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:13472:7152":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:4509:8974":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:10980:2682":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"9:927:45514":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:13917:7290":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:7416:4745":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"5:7918:6275":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:51755:5077":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"17:11212:6084":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:992:1854":{"crate_id":1,"path":["std","thread","park"],"kind":"function"},"1:15748:3183":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:50308:4986":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:11494:6671":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"6:1704:8674":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:7369:5704":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:1636:3477":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"16:7295:5708":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"5:3395:2702":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:12004:3435":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:8175:2714":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"2:2198:1052":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"5:4694:236":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:10009:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"5:3436:4672":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:13853:6317":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"17:12093:6788":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:607:8539":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:10483:2560":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:14027:138":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:14699:6319":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:8606:4942":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:1305:143":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"12:952:3473":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:5412:5750":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"6:5426:9143":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"16:6691:5787":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:10925:6613":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:6648:4626":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"6:1551:8568":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:12497:4427":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"5:6498:224":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:3521:7320":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"6:4230:8865":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:3686:7321":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:3461:5975":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"16:3077:6025":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:52585:5058":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:10540:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:14:2562":{"crate_id":2,"path":["core","write"],"kind":"macro"},"16:7238:5722":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:6159:5705":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:2191:4674":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:14872:4759":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"16:7379:5725":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:14816:9458":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:46357:5110":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"16:3177:5969":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:3467:3313":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:10895:3350":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:46836:4919":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:46937:4909":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:10367:55837":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"1:11450:4729":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:8847:3438":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:11837:57983":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"2:50452:5237":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:3436:3303":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:23944:60465":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:47750:176":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:4486:2560":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:10068:6105":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"16:3221:5971":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:8097:4901":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:12318:6822":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:13129:7066":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"16:6679:6003":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"7:85:45418":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:10642:4781":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"6:5390:9128":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:14798:3568":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:46640:5338":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"10:0:3163":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"5:1055:5384":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:7121:5797":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:46905:4906":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:5676:12034":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"6:5488:9159":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:1588:8591":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:24890:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"5:2376:5455":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:50115:4973":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"5:3905:6261":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:4351:7328":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:9087:47744":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:4067:8810":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:3355:218":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:3877:8702":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"5:8254:2703":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:50672:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"14:244:7606":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:10104:6135":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"18:668:6166":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"18:790:6151":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"5:3948:2367":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:13557:7175":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:3896:8712":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:11822:9499":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"2:24334:7710":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:4242:8866":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:12014:3440":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:46617:5337":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"6:161:40553":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"12:2269:3477":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:10356:3539":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:12543:6873":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"16:7051:5791":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:5248:3417":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"6:634:8554":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:46985:4912":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:6746:4623":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:12716:6903":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"5:1276:5437":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"16:5605:5757":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:6099:5772":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"5:8455:216":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:50444:5238":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:3112:4444":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:5113:3407":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:48346:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:2314:6098":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:49503:5190":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:48052:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"5:4017:3467":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"5:6739:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:24410:39900":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:13660:7227":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"5:3462:4675":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"16:6858:6007":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:991:2764":{"crate_id":1,"path":["std","thread","sleep"],"kind":"function"},"2:50012:5224":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:11447:5180":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:12687:6900":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:49713:2312":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"6:6643:9348":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:12019:3567":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"5:6562:3466":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:7100:5795":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"9:469:45520":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:2484:47831":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:3494:6449":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:8643:151":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:11433:6655":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:53639:7833":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"16:2959:5965":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:3450:3309":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:49512:5191":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:4440:8946":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:4429:3346":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"5:1751:194":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:3474:3310":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:13859:7273":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:57897:7849":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"2:8687:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:24038:4630":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:3495:3315":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"6:565:8516":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:10874:2266":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:48510:3552":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"5:3366:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:49835:5187":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:24497:5266":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"12:2280:3478":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:10954:2686":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"6:4256:8867":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:3818:3327":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:4088:8821":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:11305:6633":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:14077:59216":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:9517:3351":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:3883:8703":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:10853:2311":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:9259:6522":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:53459:5044":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"14:189:7601":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:13735:7240":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:4270:4807":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"16:4942:7346":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"9:157:5493":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"17:9883:62004":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"18:661:6165":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:3430:3300":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"16:5698:5762":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"14:56:6656":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:2695:180":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"9:1075:5544":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:5216:9034":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:10407:6092":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:12983:5210":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"16:4495:7333":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:11892:2703":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:11381:6637":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"5:7547:6261":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:3981:8771":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:12746:6633":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"1:10466:3480":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"16:4381:7329":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:9160:6083":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:11814:4753":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"18:857:6157":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"16:7471:5699":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"9:27:5525":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"17:13428:7138":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"3:0:431":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:13495:7160":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"16:2733:5939":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:39126:4055":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"5:1072:2702":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:13037:7031":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:13345:7119":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:15093:2675":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:53680:7836":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:13584:7182":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:50436:5235":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"5:7736:4202":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:14391:55850":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:46305:5102":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"6:1544:8566":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"5:8477:5363":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:46278:4957":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:11689:6705":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:12499:6316":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:51577:5056":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:4392:8928":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"15:0:3167":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:13306:7109":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:10476:6125":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:14556:4667":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:49541:5194":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:24447:39901":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:12512:6868":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:1132:4776":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:510:6440":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"16:4689:7338":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:15223:55839":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"16:5498:5754":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:9240:6035":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:10242:6314":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:2867:104":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:11985:2758":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:47799:3463":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:4370:2310":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"6:580:8525":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"16:3340:5954":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:10004:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:49094:7763":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:24358:5154":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:607:6442":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"5:8262:194":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:7141:5799":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:5285:2677":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:46715:5276":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"5:1710:3465":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:5867:2679":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:9553:6309":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"1:15755:3188":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:4516:8977":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:1669:8649":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:12015:6771":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:12009:2757":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:12196:6801":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"18:774:6414":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:13281:7101":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:11066:3140":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"14:216:46093":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:1157:12032":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:894:3537":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"14:250:7608":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:46670:5340":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:12921:6939":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:11725:6710":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:10211:6551":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:6610:4907":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"5:1518:3478":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:2900:183":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:49047:3487":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:48813:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"5:5166:661":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"6:6967:9377":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:11234:6082":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:46195:197":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:4234:2289":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"12:2036:2703":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:13241:4733":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:10167:7917":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:13215:7086":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"6:571:8519":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"5:6340:4201":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"16:7721:5714":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:5405:9130":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"16:7637:5802":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:3726:3324":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:32644:60193":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"16:5530:5755":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:5547:9171":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:6856:9361":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:14153:2130":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:820:6311":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"2:4078:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:13073:7060":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:6574:4661":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"6:1712:8675":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"5:8291:2703":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:11890:6743":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"12:1238:5609":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"16:6482:5996":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:10382:2768":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:15756:3189":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:9004:47741":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:4316:7327":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:22817:60461":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"18:621:6413":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:3359:220":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"9:749:5478":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"16:5855:5766":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:51777:5080":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:4511:2368":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"5:69:4196":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:987:2762":{"crate_id":1,"path":["std","thread","current"],"kind":"function"},"13:233:8465":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:10650:3358":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:14957:4702":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:11003:2683":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"5:383:4391":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"5:3114:8064":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"5:3554:3467":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"9:686:5474":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"2:46217:199":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:9131:4867":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:3812:137":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:10912:3351":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:1496:3469":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:5737:4841":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:13602:7185":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"16:4716:7339":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:10846:2308":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"12:856:3465":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"2:51346:5071":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:8929:47740":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:47858:3705":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:52461:5066":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:672:40883":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"16:6277:5777":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:46113:196":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"12:1103:3476":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:13565:7177":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:10582:4427":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:2170:3466":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:5289:5701":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:2946:184":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:52122:7781":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:994:2763":{"crate_id":1,"path":["std","thread","park_timeout"],"kind":"function"},"6:3960:8763":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:51993:5046":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:51901:5057":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:6243:9336":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"16:2813:5981":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"5:2619:5443":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:10918:2312":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:10962:6616":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:46173:198":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:3600:131":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:10571:6064":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"5:2328:5440":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:4195:2287":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:10407:2767":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:11002:6619":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:11754:6721":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:1521:3473":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"18:744:62008":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:4340:8901":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:5268:2738":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:11122:3402":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:11701:6708":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:51632:7772":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"12:815:3470":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"6:4425:8939":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:7768:5709":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:4599:7335":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:53703:7837":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:13180:7082":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:23108:5091":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:1152:7852":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"12:2045:3467":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"1:7919:3525":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"6:3993:8776":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:11168:6627":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:10107:641":{"crate_id":2,"path":["core","sync","atomic","fence"],"kind":"function"},"12:2412:8469":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:11680:5189":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"5:1547:3479":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"6:4208:8863":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:13961:7297":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:15131:2672":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:3425:3301":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:47849:3616":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:50440:5234":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:6908:9364":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:2403:7857":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:1622:3476":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:9381:6307":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:7596:1363":{"crate_id":1,"path":["std","sync"],"kind":"module"},"0:775:1897":{"crate_id":0,"path":["tokio","stream"],"kind":"module"},"17:13529:7168":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:46800:7748":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"6:6016:9227":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:9587:62006":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"2:49917:5218":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:8849:6080":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:696:2766":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:10318:6107":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:4447:3348":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:3501:3316":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:6724:4628":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"5:4765:6266":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:12634:6894":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:3420:3304":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:6190:5776":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:3807:225":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:32744:60192":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"5:4036:6261":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:14975:4709":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:9033:47742":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"6:6057:9254":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"18:782:6414":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:6650:4627":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:15715:12033":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:5204:9030":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"1:11273:3609":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:11486:5181":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"5:844:223":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:8639:136":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:4135:8847":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:50432:5233":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"16:7826:5101":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"5:5388:200":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:14067:2767":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:11907:6749":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:46271:3326":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:52091:7780":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"5:8449:9381":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"2:49996:5222":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:4402:3338":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"17:10464:6123":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:50273:4983":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:4160:4786":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:14569:4753":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"6:6027:9232":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:3442:3302":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"12:2398:8467":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"5:1502:3476":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:612:8541":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:46886:4904":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:4459:2703":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:22851:60491":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:4012:8789":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:10544:3552":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:13522:7167":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"16:6504:5784":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:13233:7094":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:2179:4672":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:8403:59824":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"2:5004:3423":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:32940:3389":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:2248:3739":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"16:3314:5953":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"16:2905:5964":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:11671:6704":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:2464:7860":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:10558:6563":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:12165:5201":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:10156:6443":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:5753:4844":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"6:4005:8785":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"5:3110:8063":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:4308:8887":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:2937:5987":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:4454:8954":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"5:8466:5362":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:10240:6031":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:1537:8563":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"12:2066:4674":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"16:7281:5707":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:3907:8720":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"12:183:5614":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"18:678:142":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:49781:5212":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:24476:9496":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:3322:2304":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:46914:7749":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:48871:4221":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"2:3148:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:4063:2264":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"2:51947:5042":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:22849:60494":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:7073:7862":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:46710:100":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:48304:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:56549:237":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:51392:5051":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:2041:3338":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:10455:6124":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:7402:4744":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:5184:3414":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"5:4372:3463":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:46867:4923":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:13440:7144":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:24042:5017":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:50298:4985":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:49604:5197":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"3:321:205":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:10899:6608":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"12:1666:5619":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:4495:58332":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:5366:9116":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:32592:60195":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"17:12469:6862":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:9254:59115":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:13094:7065":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"5:3106:8062":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:5560:4637":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"5:8232:5386":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:7309:5706":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"16:4271:7326":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:9836:62001":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"6:6914:9365":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:4197:3361":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"5:3814:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:11220:4660":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"6:1733:4803":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"5:4281:3466":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:11020:2684":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"2:50616:190":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:51525:5064":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:14042:150":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:13539:7171":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:11355:2702":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:11653:6695":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"16:7025:5694":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"18:637:6414":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:2196:4675":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"5:7943:6281":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:9706:6531":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"16:4439:7331":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:12130:6793":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:3853:3288":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:46530:4671":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:14325:4429":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:48094:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:10493:2701":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"16:6060:5742":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:6665:9349":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:50701:4389":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:47253:2310":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:48783:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"17:12758:6910":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:9746:6532":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:32584:3388":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"2:46820:4918":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:8167:4868":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:47006:4914":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:12198:5202":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:50093:4969":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"7:0:1484":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:46609:5225":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"6:6937:9371":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:0:489":{"crate_id":2,"path":["core"],"kind":"module"},"2:3824:3329":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:9466:6436":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"12:1203:5608":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:14683:6318":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:13530:109":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"11:46:8471":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"1:8850:2791":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:6129:9267":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:6979:9379":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"5:3441:5379":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"16:7169:5718":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:14790:55854":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"6:6931:9370":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:4411:7330":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:13196:7085":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:15726:55838":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:5715:4839":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:11999:2755":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:2167:2703":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"16:7155:5800":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"5:8270:5375":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:4157:6065":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:13361:7122":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:37894:4131":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"6:3972:8766":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:4823:4863":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:23357:17133":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:3154:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:10530:6557":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:8926:2756":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"16:4198:7325":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:11786:4751":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"1:14778:4752":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"5:3960:5431":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"18:820:6154":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:46129:194":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:47807:2703":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:15757:3190":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:50209:4981":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:48220:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"16:2839:5962":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:47875:205":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"18:694:6167":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:6381:5715":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:1621:8613":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:49987:5221":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:5982:9208":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"5:1729:3469":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:12003:6769":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:46994:4913":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:12222:6805":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:4968:3422":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"16:5941:5769":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"16:3265:5973":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:10435:12029":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:51679:5085":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"9:809:2714":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:984:1867":{"crate_id":1,"path":["std","thread","spawn"],"kind":"function"},"6:157:40552":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:46536:6354":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:10905:2313":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"18:704:6414":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:1662:8645":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:5362:5747":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:46946:4924":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:10082:6133":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:5566:5756":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"18:811:6153":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:4386:8925":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:3597:130":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:9796:62000":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:10587:4429":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:24857:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:8525:3441":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:50689:4950":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:6080:9255":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:3129:5977":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:13899:7284":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"12:2072:4675":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"2:50030:5225":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:53665:7835":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:10093:6134":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:14358:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"6:1680:8657":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:4771:2668":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"16:5326:5745":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"18:645:6164":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"16:6630:5999":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:52303:5074":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"16:5303:5744":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:5331:9095":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"16:5998:5721":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:13327:4971":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:23407:5016":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"12:787:3469":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"9:996:5542":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"0:0:1919":{"crate_id":0,"path":["tokio"],"kind":"module"},"2:6687:4922":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:14315:9500":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"5:1684:2703":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:49683:5206":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"18:801:6152":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"9:722:5477":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"16:5443:5752":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:10445:6484":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:7814:3525":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"5:1296:5438":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:4081:8818":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:10546:3559":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:47235:3434":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:13463:7149":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"9:41:5526":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"2:47943:178":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:3388:1917":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"12:1121:3477":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:12048:6781":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:4866:4386":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:23932:4657":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:39086:2701":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:10545:6560":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"5:1740:3470":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:49935:5219":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:46677:5341":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:3157:135":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:5574:4643":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:6229:9327":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:15754:3187":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:23738:17152":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"5:1760:5435":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"16:5649:5759":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:3415:3299":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:51324:5083":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"16:6595:5716":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:1475:3466":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"6:5974:9203":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"5:444:2363":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:46312:3415":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"0:106:1851":{"crate_id":0,"path":["tokio","io"],"kind":"module"},"17:13938:7293":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:9064:47743":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"15:269:5633":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:9130:4655":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:10966:2687":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"2:51614:5041":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:56523:237":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:10931:2685":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"2:24210:5250":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:10550:189":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:10801:6055":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:12237:6808":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:53628:7832":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"5:8389:5425":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"6:1694:8668":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:9414:8132":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"2:49578:4918":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:1527:3474":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:10925:2309":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:9716:61997":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:10435:6042":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:6688:9360":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:11514:6672":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"16:7063:5792":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:4628:7336":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:10937:6614":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:4038:8800":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:4811:4862":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:48178:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:6106:2681":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:14927:4700":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:25088:164":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:46573:5132":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:11774:181":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:13138:7070":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:50021:4671":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:11800:4752":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:4538:8987":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:11335:6058":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:49967:2309":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:39050:4756":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:10949:6615":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:3497:3359":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:24956:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:12250:6809":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"6:3966:8764":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:14969:4708":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:5260:9054":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"1:5582:4645":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:1468:2741":{"crate_id":2,"path":["core","hint","spin_loop"],"kind":"function"},"2:23145:5018":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:49613:5198":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"12:777:2703":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:2173:3384":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:988:2761":{"crate_id":1,"path":["std","thread","yield_now"],"kind":"function"},"1:10577:4426":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:10622:6568":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:24483:5312":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:900:3538":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:22804:4131":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:9124:4161":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"12:843:3464":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"5:3838:3463":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:12302:6817":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:51300:7769":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"16:7868:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:15763:3196":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:9756:62005":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:14374:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"18:720:6416":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:11742:6718":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"16:6310:5778":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:49689:5207":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:1576:8582":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:22832:60461":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:3484:3312":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:46039:3330":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:53335:5059":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:6646:4624":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"16:7323:5724":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"17:13763:7247":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:23198:4630":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:3570:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:10594:4430":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:15238:5637":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:9206:47746":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:0:3169":{"crate_id":17,"path":["object"],"kind":"module"},"2:10536:109":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"2:47244:7752":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:11364:4724":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:15751:3186":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"5:4665:6264":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"17:1236:6444":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"14:231:5365":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:4485:8967":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:539:8496":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:5239:3416":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:50161:4980":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:1721:8681":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"5:3402:4673":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:51424:5084":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:24318:9493":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:8760:3442":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:3103:5978":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"5:4581:5415":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"18:0:3170":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:9561:6086":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"6:1600:8599":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:10223:6040":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:11404:2312":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:5291:3418":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:10450:12031":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:1017:3525":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:51595:7771":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:10147:6547":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"6:626:8549":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:11102:47748":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:2262:4954":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:50608:3282":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"9:776:5523":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"16:6130:5773":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:7450:4747":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:12957:6970":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:14942:4701":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:12674:6899":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:2466:7861":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"6:1912:41857":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"16:7792:5739":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:47228:7702":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"12:895:5598":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"2:47273:7703":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:12527:6872":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:48768:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"2:46928:4908":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"16:6089:5771":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:13595:7183":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:51825:5065":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:5186:9017":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:1740:8687":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"16:5639:5758":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"2:46239:3323":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:47944:203":{"crate_id":2,"path":["core","sync","atomic","Ordering","Relaxed"],"kind":"foreign_type"},"16:7079:5793":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:15762:3195":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:10788:6604":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:7782:5710":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"5:8419:5426":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:46727:5277":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:989:997":{"crate_id":1,"path":["std","thread","panicking"],"kind":"function"},"6:4446:8949":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:11068:6061":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:5273:6523":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"16:3155:5968":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:47968:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"18:729:62010":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:3353:3421":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:12482:6863":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"5:1152:6261":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:3505:3317":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"12:2404:61986":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"5:7473:2703":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"19:117:8417":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"6:6153:9278":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:10781:146":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"5:5861:6261":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"16:5217:5956":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"5:1909:6261":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:10015:6541":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:4110:8834":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:11017:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:4179:8861":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:12117:6790":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:47037:2313":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:49699:3351":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"12:1784:6259":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:294:6438":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:8961:7864":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"2:25055:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"16:6407:5780":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:3352:2362":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"5:7351:6261":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:3513:3319":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:6250:9339":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"12:2059:4673":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:14339:3292":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:10821:3485":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:13016:7022":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:13989:2289":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"17:11031:47747":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:11946:4688":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:48531:3560":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:7129:4925":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"12:353:8059":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:13689:8072":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"2:23019:5013":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:11844:8033":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"1:7119:186":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"16:4975:7347":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:5984:2680":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"18:885:6159":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:3357:106":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:12143:6575":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:10127:6107":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:11314:6121":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:12070:6782":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:3127:1851":{"crate_id":1,"path":["std","io"],"kind":"module"},"17:13331:7117":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:48801:107":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"6:4362:8912":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"12:2253:3476":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:47926:3463":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:9958:61998":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"5:3825:2702":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:12496:6866":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:8712:3630":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"18:766:6426":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:5998:9220":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:3347:211":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:48517:3553":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:15764:3197":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:14552:7870":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"17:13549:7174":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:1431:3463":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:8695:3434":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:7228:185":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"6:4379:8923":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"5:2843:5442":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:5398:1899":{"crate_id":1,"path":["std","os"],"kind":"module"},"6:6943:9372":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:9505:4794":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"2:24791:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:10658:2367":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:47262:7754":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"16:4467:7332":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:12770:6917":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"16:7684:5713":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:5766:4845":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:10775:6602":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"18:712:4131":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:3446:3305":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:8433:3433":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:10814:6056":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:15747:3182":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:47782:2720":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"5:1719:3468":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:49977:5220":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:11638:5186":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:50236:4982":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:13271:7100":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:53619:7831":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"16:7131:5798":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:11423:4726":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"5:7048:3115":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"16:3199:5970":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:10482:205":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"5:8215:5385":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:13410:4762":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"16:5374:5748":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:10355:4630":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:11603:6688":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:2174:3467":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"1:11177:4840":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"18:136:54033":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:15744:3180":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"16:3402:5689":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:6472:4641":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:13747:7243":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:14320:9502":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:46066:3284":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:24281:7708":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"2:39090:3350":{"crate_id":2,"path":["core","error","Chain"],"kind":"struct"},"16:6433:5781":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"5:984:5383":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:24370:5155":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:8590:162":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"12:2052:4672":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:46975:4911":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:11956:6763":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:3518:3320":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:4464:8960":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:11768:4749":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:3409:2306":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:6344:4634":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:4160:8860":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:10220:5167":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:3594:2885":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:9786:6533":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"6:5478:9157":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:2961:3347":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"17:13293:7104":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"16:6980:5790":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"12:1881:145":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:13536:4758":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:3255:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:3084:3708":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:11937:6758":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:4275:3360":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:47934:2703":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"5:5609:2753":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:47047:4916":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:3890:3289":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"16:6012:5700":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:3987:8773":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:11628:6693":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:8626:7864":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"6:6097:9257":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:11439:4728":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:12417:6855":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:10217:6312":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"16:6490:5783":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:51494:7770":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:24302:5159":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:12282:6816":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:1441:2703":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"6:5288:9066":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:10456:2745":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"2:3160:229":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"6:6896:9362":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:24139:5249":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:6904:3608":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:49452:5185":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:11597:5184":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:8902:47739":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:52225:5086":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"6:1727:8684":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:50598:201":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:11409:6641":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"16:5784:5765":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:3933:8740":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:50497:5295":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"16:5959:5693":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:12742:5354":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:15766:3199":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:24431:39892":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:1485:3467":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"2:5723:781":{"crate_id":2,"path":["core","iter"],"kind":"module"},"6:4218:8864":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:52044:7779":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"16:5668:5760":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:56536:237":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:13323:7859":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"9:963:5541":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:9127:4162":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:3102:4439":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:2958:3723":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:1510:3472":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:5176:7348":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"16:7208:5801":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:5161:2672":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:5274:9065":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:13452:7145":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:3841:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:8275:4684":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:11615:6691":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:50448:5236":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:4835:102":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:13673:4748":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:22870:60489":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"16:3051:6024":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:48835:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"2:53581:5047":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:5122:3409":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:6870:59380":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"2:4144:4963":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"12:2032:2702":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"6:5439:9147":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"5:2005:3467":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"1:7042:7862":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:2883:5982":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:46545:5129":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"16:5948:5961":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:4048:8803":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:10058:6139":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"5:8372:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:13342:8071":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"5:7205:6275":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"17:9988:47793":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"5:7874:235":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:11559:5183":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:14381:2444":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"6:5149:8991":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"5:8356:3457":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"14:11:7601":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:6184:9304":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:6954:9376":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:4775:7341":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:4129:4959":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"16:4743:7340":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:4273:2285":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"16:6533:5994":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:4526:8982":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:5257:6522":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"6:6671:9351":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:12209:6803":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:10215:5166":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"16:7247:5736":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"6:533:8494":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:11381:4725":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:2512:6094":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:8167:3525":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"2:56588:237":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:4346:8903":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:11666:5188":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:13774:7251":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"16:6643:6000":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:6135:9268":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:11256:6630":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:23396:4630":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"14:0:3166":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:3297:6026":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:48388:3431":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:51725:5073":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:5378:9121":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"16:3366:5979":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:22872:60493":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:46298:5101":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"1:1418:2702":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:4402:8931":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:46743:5278":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:15743:3179":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:47057:4917":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:49063:3486":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:15765:3198":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"6:4434:8945":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:6034:9236":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"5:1701:3464":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:13784:4749":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"16:2772:5988":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:4236:3362":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:4075:8815":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:11945:6760":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"12:1183:5607":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"5:2284:5381":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"5:5906:5368":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:13721:7234":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:49591:5196":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:1075:4668":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:50464:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:14223:6355":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"2:3085:4630":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:50144:4979":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:51923:5060":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:32544:3387":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:3454:3307":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:13352:7121":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:13321:4970":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:513:8483":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"16:5685:5761":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:586:8528":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:11013:6620":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"12:2040:3466":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:10136:6534":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:5902:5767":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"18:152:54034":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:4315:8888":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:48887:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:51969:5045":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:23072:5090":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"16:3007:5966":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:3365:3420":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"6:3920:8730":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"12:399:5612":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:11166:4630":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"5:3407:5378":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"6:4296:8880":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:46858:4920":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:11202:4808":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:10586:6565":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:13840:7268":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:12383:6852":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:5516:5944":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"16:5923:5768":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:12528:7899":{"crate_id":1,"path":["std","sys","unix","fs","TimespecDebugAdapter"],"kind":"struct"},"17:12620:6893":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"16:5238:46164":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:10874:6606":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"5:777:7683":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"14:194:46087":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:3100:4438":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"12:928:3468":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:25121:5252":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"5:6851:3338":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"0:54:1007":{"crate_id":0,"path":["tokio","pin"],"kind":"macro"},"12:0:3165":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"1:11109:3400":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"16:7184:6012":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"18:651:6161":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:9625:4967":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:12442:6858":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:53005:5087":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:4198:8862":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:4504:2443":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:15742:3178":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:50287:4984":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:13177:4804":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:56575:237":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:11917:4686":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:7415:5723":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"5:5962:6273":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"2:46876:4903":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"16:7090:5794":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:10039:6543":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:9648:6311":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"1:11037:3399":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"17:11713:6709":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:5210:9033":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:24509:5265":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:7436:4746":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:9873:6534":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:11142:6626":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"16:6468:5782":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"5:4308:6261":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:12170:6798":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:6268:9342":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:11291:4714":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:10291:6096":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"6:4493:8969":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:8602:4943":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"16:6604:5786":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:12262:6810":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"6:593:8531":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:10598:6566":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:12585:6881":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"6:527:8491":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:1558:8571":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:6026:5698":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"4:0:3160":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:11524:5182":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"12:379:5613":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:3086:4434":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:299:6439":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:24393:7716":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:7762:6293":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"18:896:6160":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"15:248:5629":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"17:1311:6140":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"14:47:7601":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:23208:4658":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:46153:195":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:4416:8936":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:3839:205":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"17:10115:6136":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:46656:5224":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:6173:5775":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"12:880:3467":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"17:10187:6549":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:8346:2308":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:9539:6081":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:10660:47931":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"16:6873:3129":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:49657:5281":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:3458:3306":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:10028:6542":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:11341:2714":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"16:5396:5749":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:11354:6057":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:52649:5043":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:11930:4687":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:3243:5972":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:8261:202":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"15:230:5628":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:9676:62003":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:46634:4671":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"11:0:3164":{"crate_id":11,"path":["adler"],"kind":"module"},"1:9421:6308":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"2:13378:4975":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"12:971:3474":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:4848:4743":{"crate_id":1,"path":["std","net","ip","display_buffer","IpDisplayBuffer"],"kind":"struct"},"6:1567:8576":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:52615:5061":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:52539:5054":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:13167:7077":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"6:521:8488":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"6:5419:9141":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:10554:3558":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:51476:5076":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:5240:9043":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:51370:5063":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"16:7264:194":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"5:4709:6266":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:2487:3741":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:10253:6034":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:4157:4785":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"16:6075:5702":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:88:40486":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"6:4373:8920":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"16:6907:5789":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:11128:3401":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:10975:6617":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"5:2396:5439":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:7355:5703":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"0:772:1381":{"crate_id":0,"path":["tokio","task"],"kind":"module"}},"external_crates":{"20":{"name":"pin_project_lite","html_root_url":null},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":18}