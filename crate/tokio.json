{"root":"0:0:1882","crate_version":"1.19.2","includes_private":false,"index":{"2:8767:4921":{"id":"2:8767:4921","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"2:7808:4922","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:390":{"id":"0:390","crate_id":0,"name":null,"span":{"filename":"src/net/addr.rs","begin":[50,0],"end":[50,36]},"visibility":{"restricted":{"parent":"0:354:2625","path":"::net::addr"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"ToSocketAddrs","id":"0:380:2627","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"SocketAddr","id":"1:11020:2644","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:217:2392":{"id":"0:217:2392","crate_id":0,"name":"start_seek","span":{"filename":"src/io/async_seek.rs","begin":[74,4],"end":[76,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["pos",{"kind":"resolved_path","inner":{"name":"SeekFrom","id":"1:10962:2223","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5561:4544":{"id":"1:5561:4544","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5562:6021","1:5563:56086"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10447:4517","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3294:3268":{"id":"2:3294:3268","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3296:1082"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:143:2305":{"id":"0:143:2305","crate_id":0,"name":"poll_fill_buf","span":{"filename":"src/io/async_buf_read.rs","begin":[110,4],"end":[112,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["_cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13852:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50050:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12867:4751":{"id":"2:12867:4751","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12862:4756","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3422:2845":{"id":"2:3422:2845","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3423:559"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:415":{"id":"0:415","crate_id":0,"name":null,"span":{"filename":"src/net/addr.rs","begin":[118,0],"end":[118,41]},"visibility":{"restricted":{"parent":"0:354:2625","path":"::net::addr"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"ToSocketAddrs","id":"0:380:2627","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"Ipv6Addr","id":"1:11077:2643","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},{"kind":"primitive","inner":"u16"}]},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:290:2491":{"id":"0:290:2491","crate_id":0,"name":"poll_shutdown","span":{"filename":"src/io/async_write.rs","begin":[375,4],"end":[377,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13852:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50050:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3483:3281":{"id":"2:3483:3281","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3485:167","2:3486:731"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2319","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:137:2315":{"id":"0:137:2315","crate_id":0,"name":"consume","span":{"filename":"src/io/async_buf_read.rs","begin":[94,4],"end":[96,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["amt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:275:2504":{"id":"0:275:2504","crate_id":0,"name":"poll_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[299,4],"end":[305,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13852:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10950:2403","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50050:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6695:4509":{"id":"1:6695:4509","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6696:56165","1:6697:56166"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10447:4517","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13229:32874":{"id":"2:13229:32874","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:15747:3145"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49433:5111","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3079:74":{"id":"2:3079:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3081:2322"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2319","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:6698:4507":{"id":"1:6698:4507","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6699:7822"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10447:4517","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13309:60477":{"id":"2:13309:60477","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:15741:3140","self::pattern":"2:12837:4752"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:4753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:4753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12862:4756","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:330:311":{"id":"0:330:311","crate_id":0,"name":"assume_init","span":{"filename":"src/io/read_buf.rs","begin":[231,4],"end":[236,5]},"visibility":"public","docs":"Asserts that the first `n` unfilled bytes of the buffer are initialized.\n\n`ReadBuf` assumes that bytes are never de-initialized, so this method does nothing when called with fewer\nbytes than are already known to be initialized.\n\n# Safety\n\nThe caller must ensure that `n` unfilled bytes of the buffer have already been initialized.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3411:2277":{"id":"2:3411:2277","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3412:526"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3398:112","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10134:3513":{"id":"2:10134:3513","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10135:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10130:3505":{"id":"2:10130:3505","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10131:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:284:2491":{"id":"0:284:2491","crate_id":0,"name":"poll_shutdown","span":{"filename":"src/io/async_write.rs","begin":[345,4],"end":[347,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13852:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50050:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:314:898":{"id":"0:314:898","crate_id":0,"name":"new","span":{"filename":"src/io/read_buf.rs","begin":[32,4],"end":[40,5]},"visibility":"public","docs":"Creates a new `ReadBuf` from a fully initialized buffer.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:307:2221","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5555:4546":{"id":"1:5555:4546","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5556:56162","1:5557:5325"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10447:4517","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:793:2438":{"id":"0:793:2438","crate_id":0,"name":"poll_write","span":{"filename":"src/io/async_write.rs","begin":[222,4],"end":[222,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13852:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50050:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:323:2558":{"id":"0:323:2558","crate_id":0,"name":"unfilled_mut","span":{"filename":"src/io/read_buf.rs","begin":[135,4],"end":[137,5]},"visibility":"public","docs":"Returns a mutable reference to the unfilled part of the buffer without ensuring that it has been fully\ninitialized.\n\n# Safety\n\nThe caller must not de-initialize portions of the buffer that have already been initialized.\nThis includes any bytes in the region marked as uninitialized by `ReadBuf`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninit","id":"2:32050:2524","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}},"param_names":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3337:3277":{"id":"2:3337:3277","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3339:338"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:2785-0:307:2221":{"id":"b:2:2785-0:307:2221","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2319","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2779:4882","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:307:2221","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:2787:55526"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13295:60473":{"id":"2:13295:60473","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:395":{"id":"0:395","crate_id":0,"name":null,"span":{"filename":"src/net/addr.rs","begin":[64,0],"end":[64,38]},"visibility":{"restricted":{"parent":"0:354:2625","path":"::net::addr"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"ToSocketAddrs","id":"0:380:2627","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"SocketAddrV4","id":"1:11044:2645","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5817:5278":{"id":"5:5817:5278","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5819:167","5:5820:415"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2319","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13219:54080":{"id":"2:13219:54080","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10737:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10737:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:10343:142":{"id":"2:10343:142","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10344:632","2:10345:2521","2:10346:4170","2:10347:4171","2:10348:4172","2:10349:4173","2:10350:4174","2:10351:4175","2:10352:4176","2:10353:4177","2:10354:4178","2:10355:4179","2:10356:4180","2:10357:4181","2:10358:4182","2:10359:1498"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4614:2402":{"id":"1:4614:2402","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4615:2250","1:4616:4074","1:4617:4075","1:4618:4076"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:353:1814":{"id":"0:353:1814","crate_id":0,"name":"net","span":{"filename":"src/net/mod.rs","begin":[1,0],"end":[52,1]},"visibility":"public","docs":"TCP/UDP/Unix bindings for `tokio`.\n\nThis module contains the TCP/UDP/Unix networking types, similar to the standard\nlibrary, which can be used to implement networking protocols.\n\n# Organization\n\n* [`TcpListener`] and [`TcpStream`] provide functionality for communication over TCP\n* [`UdpSocket`] provides functionality for communication over UDP\n* [`UnixListener`] and [`UnixStream`] provide functionality for communication over a\nUnix Domain Stream Socket **(available on Unix only)**\n* [`UnixDatagram`] provides functionality for communication\nover Unix Domain Datagram Socket **(available on Unix only)**\n\n[`TcpListener`]: TcpListener\n[`TcpStream`]: TcpStream\n[`UdpSocket`]: UdpSocket\n[`UnixListener`]: UnixListener\n[`UnixStream`]: UnixStream\n[`UnixDatagram`]: UnixDatagram","links":{},"attrs":["#![cfg(not(loom))]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:380:2627"]}},"b:2:3118-0:307:2221":{"id":"b:2:3118-0:307:2221","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3092:212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3088:213","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:307:2221","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3121:123","2:3122:1385"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:6066:61115":{"id":"5:6066:61115","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:2320","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8079:4127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:2320","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8079:4127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2867:163":{"id":"2:2867:163","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2868:398","2:2869:2557","2:2870:2362","2:2871:3992"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2836:120","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2877:170","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:324:2578":{"id":"0:324:2578","crate_id":0,"name":"initialize_unfilled","span":{"filename":"src/io/read_buf.rs","begin":[144,4],"end":[146,5]},"visibility":"public","docs":"Returns a mutable reference to the unfilled part of the buffer, ensuring it is fully initialized.\n\nSince `ReadBuf` tracks the region of the buffer that has been initialized, this is effectively \"free\" after\nthe first use.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:179:2359":{"id":"0:179:2359","crate_id":0,"name":"poll_read","span":{"filename":"src/io/async_read.rs","begin":[95,4],"end":[105,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["_cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13852:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:307:2221","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50050:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:344":{"id":"0:344","crate_id":0,"name":null,"span":{"filename":"src/io/mod.rs","begin":[205,25],"end":[205,34]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"std::io::ErrorKind","name":"ErrorKind","id":"1:10826:2222","glob":false}},"2:13320:5276":{"id":"2:13320:5276","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:54:984":{"id":"0:54:984","crate_id":0,"name":"pin","span":{"filename":"src/macros/pin.rs","begin":[125,0],"end":[144,1]},"visibility":"public","docs":"Pins a value on the stack.\n\nCalls to `async fn` return anonymous [`Future`] values that are `!Unpin`.\nThese values must be pinned before they can be polled. Calling `.await` will\nhandle this, but consumes the future. If it is required to call `.await` on\na `&mut _` reference, the caller is responsible for pinning the future.\n\nPinning may be done by allocating with [`Box::pin`] or by using the stack\nwith the `pin!` macro.\n\nThe following will **fail to compile**:\n\n```compile_fail\nasync fn my_async_fn() {\n    // async logic here\n}\n\n#[tokio::main]\nasync fn main() {\n    let mut future = my_async_fn();\n    (&mut future).await;\n}\n```\n\nTo make this work requires pinning:\n\n```\nuse tokio::pin;\n\nasync fn my_async_fn() {\n    // async logic here\n}\n\n#[tokio::main]\nasync fn main() {\n    let future = my_async_fn();\n    pin!(future);\n\n    (&mut future).await;\n}\n```\n\nPinning is useful when using `select!` and stream operators that require `T:\nStream + Unpin`.\n\n[`Future`]: trait@std::future::Future\n[`Box::pin`]: std::boxed::Box::pin\n\n# Usage\n\nThe `pin!` macro takes **identifiers** as arguments. It does **not** work\nwith expressions.\n\nThe following does not compile as an expression is passed to `pin!`.\n\n```compile_fail\nasync fn my_async_fn() {\n    // async logic here\n}\n\n#[tokio::main]\nasync fn main() {\n    let mut future = pin!(my_async_fn());\n    (&mut future).await;\n}\n```\n\n# Examples\n\nUsing with select:\n\n```\nuse tokio::{pin, select};\nuse tokio_stream::{self as stream, StreamExt};\n\nasync fn my_async_fn() {\n    // async logic here\n}\n\n#[tokio::main]\nasync fn main() {\n    let mut stream = stream::iter(vec![1, 2, 3, 4]);\n\n    let future = my_async_fn();\n    pin!(future);\n\n    loop {\n        select! {\n            _ = &mut future => {\n                // Stop looping `future` will be polled after completion\n                break;\n            }\n            Some(val) = stream.next() => {\n                println!(\"got value = {}\", val);\n            }\n        }\n    }\n}\n```\n\nBecause assigning to a variable followed by pinning is common, there is also\na variant of the macro that supports doing both in one go.\n\n```\nuse tokio::{pin, select};\n\nasync fn my_async_fn() {\n    // async logic here\n}\n\n#[tokio::main]\nasync fn main() {\n    pin! {\n        let future1 = my_async_fn();\n        let future2 = my_async_fn();\n    }\n\n    select! {\n        _ = &mut future1 => {}\n        _ = &mut future2 => {}\n    }\n}\n```","links":{"trait@std::future::Future":"2:13550:134","std::boxed::Box::pin":"5:421:2320"},"attrs":["#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! pin {\n    ($($x:ident),*) => { ... };\n    ($(\n            let $x:ident = $init:expr;\n    )*) => { ... };\n}"},"2:13300:60476":{"id":"2:13300:60476","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:12837:4752","prim@char":"1:15741:3140"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:4753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3428:127":{"id":"2:3428:127","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3430:361"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3431:128","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:2782-0:307:2221":{"id":"b:2:2782-0:307:2221","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2319","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2776:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:307:2221","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:2784:3209"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3306:3270":{"id":"2:3306:3270","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3308:167","2:3309:335"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3111:3993":{"id":"2:3111:3993","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3085:131"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13297:60475":{"id":"2:13297:60475","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:15741:3140","self::pattern":"2:12837:4752"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:4753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:4753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"2:12867:4751","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13222:60461":{"id":"2:13222:60461","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"crate::ops::IndexMut":"2:3487:3282","`str`":"1:15747:3145","str::slice_unchecked":"1:15747:3145"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:263:2504":{"id":"0:263:2504","crate_id":0,"name":"poll_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[238,4],"end":[244,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13852:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10950:2403","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50050:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:295:2445":{"id":"0:295:2445","crate_id":0,"name":"poll_flush","span":{"filename":"src/io/async_write.rs","begin":[401,4],"end":[403,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13852:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50050:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13271:60465":{"id":"2:13271:60465","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47192:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:4753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:333:640":{"id":"0:333:640","crate_id":0,"name":"fmt","span":{"filename":"src/io/read_buf.rs","begin":[270,4],"end":[276,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10079:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10068:191","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3191:205-0:307:2221":{"id":"a:2:3191:205-0:307:2221","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3191:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:307:2221","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3252:3264":{"id":"2:3252:3264","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3254:167","2:3255:1326"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3085:131":{"id":"2:3085:131","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3087:661"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6769:4513":{"id":"1:6769:4513","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6770:56503"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13289:60470":{"id":"2:13289:60470","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13303:15515":{"id":"2:13303:15515","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:15741:3140","self::pattern":"2:12837:4752"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47192:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:4753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3122:1385":{"id":"2:3122:1385","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47319:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3092:212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13204:60458":{"id":"2:13204:60458","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13203:60457":{"id":"2:13203:60457","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8284:147":{"id":"2:8284:147","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8285:2680","2:8286:2662","2:8287:746"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:795:2516":{"id":"0:795:2516","crate_id":0,"name":"is_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[222,4],"end":[222,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2836:120":{"id":"2:2836:120","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2831:169","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:280:2438":{"id":"0:280:2438","crate_id":0,"name":"poll_write","span":{"filename":"src/io/async_write.rs","begin":[321,4],"end":[327,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13852:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50050:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:207:2217":{"id":"0:207:2217","crate_id":0,"name":"AsyncSeek","span":{"filename":"src/io/async_seek.rs","begin":[18,0],"end":[47,1]},"visibility":"public","docs":"Seek bytes asynchronously.\n\nThis trait is analogous to the [`std::io::Seek`] trait, but integrates\nwith the asynchronous task system. In particular, the `start_seek`\nmethod, unlike [`Seek::seek`], will not block the calling thread.\n\nUtilities for working with `AsyncSeek` values are provided by\n[`AsyncSeekExt`].\n\n[`std::io::Seek`]: std::io::Seek\n[`Seek::seek`]: std::io::Seek::seek()\n[`AsyncSeekExt`]: crate::io::AsyncSeekExt","links":{"std::io::Seek::seek()":"1:4614:2402","std::io::Seek":"1:4614:2402"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:208:2392","0:209:2400"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:211","0:213","0:215","0:219"]}},"0:177:2359":{"id":"0:177:2359","crate_id":0,"name":"poll_read","span":{"filename":"src/io/async_read.rs","begin":[85,4],"end":[91,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13852:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:307:2221","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50050:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10737:199":{"id":"2:10737:199","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:10739:167","2:10740:2720","2:10741:2318","2:10742:56960","2:10743:54080","2:10744:731","2:10745:732"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2319","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:10728:4517","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3187:203":{"id":"2:3187:203","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3082:145":{"id":"2:3082:145","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3084:3993"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:307:2221":{"id":"0:307:2221","crate_id":0,"name":"ReadBuf","span":{"filename":"src/io/read_buf.rs","begin":[23,0],"end":[27,1]},"visibility":"public","docs":"A wrapper around a byte buffer that is incrementally filled and initialized.\n\nThis type is a sort of \"double cursor\". It tracks three regions in the\nbuffer: a region at the beginning of the buffer that has been logically\nfilled with data, a region that has been initialized at some point but not\nyet logically filled, and a region at the end that may be uninitialized.\nThe filled region is guaranteed to be a subset of the initialized region.\n\nIn summary, the contents of the buffer can be visualized as:\n\n```not_rust\n[             capacity              ]\n[ filled |         unfilled         ]\n[    initialized    | uninitialized ]\n```\n\nIt is undefined behavior to de-initialize any bytes from the uninitialized\nregion, since it is merely unknown whether this region is uninitialized or\nnot, and if part of it turns out to be initialized, it must stay initialized.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:312","a:2:9140:3571-0:307:2221","a:2:3179:196-0:307:2221","a:2:3220:1880-0:307:2221","a:2:9139:3572-0:307:2221","a:2:3191:205-0:307:2221","b:2:3118-0:307:2221","b:2:3108-0:307:2221","b:2:3908-0:307:2221","b:2:3123-0:307:2221","b:2:2782-0:307:2221","b:2:2785-0:307:2221","b:2:3112-0:307:2221","0:332"]}},"2:13200":{"id":"2:13200","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12297:1311","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13201:771","2:13202:2507","2:13203:60457","2:13204:60458","2:13206:60459","2:13209:56086","2:13210:60460","2:13211:288","2:13212:2584","2:13213:2720","2:13215:2318","2:13217:56960","2:13219:54080","2:13221:4594","2:13222:60461","2:13223:2366","2:13224:56979","2:13225:5131","2:13226:4781","2:13227:4482","2:13228:32884","2:13229:32874","2:13230:4063","2:13231:60462","2:13232:32869","2:13233:56994","2:13236:56995","2:13239:56996","2:13242:2506","2:13246:3999","2:13250:2247","2:13253:32741","2:13256:56988","2:13259:60463","2:13262:60464","2:13265:56990","2:13268:56992","2:13271:60465","2:13274:60466","2:13277:3220","2:13280:60467","2:13283:60468","2:13286:60469","2:13289:60470","2:13291:60471","2:13293:60472","2:13295:60473","2:13296:60474","2:13297:60475","2:13300:60476","2:13303:15515","2:13306:56997","2:13309:60477","2:13312:60478","2:13315:60479","2:13318:2673","2:13320:5276","2:13321:56130","2:13322:56131","2:13323:56132","2:13324:60480","2:13326:4567","2:13327:60481"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:790:2516":{"id":"0:790:2516","crate_id":0,"name":"is_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[218,4],"end":[218,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13286:60469":{"id":"2:13286:60469","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"prim@char":"1:15741:3140","self::pattern":"2:12837:4752","str::match_indices":"1:15747:3145","`DoubleEndedIterator`":"2:8328:116"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49318:5105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:4753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:4753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12862:4756","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:785:2400":{"id":"0:785:2400","crate_id":0,"name":"poll_complete","span":{"filename":"src/io/async_seek.rs","begin":[62,4],"end":[62,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13852:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50050:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13228:32884":{"id":"2:13228:32884","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:15747:3145"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49424:5110","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:138":{"id":"0:138","crate_id":0,"name":null,"span":{"filename":"src/io/async_buf_read.rs","begin":[99,0],"end":[107,1]},"visibility":{"restricted":{"parent":"0:106:2212","path":"::io::async_buf_read"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsyncBufRead","id":"0:126:2213","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"items":["0:139:2305","0:140:2315"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13268:56992":{"id":"2:13268:56992","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"str::splitn":"1:15747:3145","self::pattern":"2:12837:4752","prim@char":"1:15741:3140"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49272:5075","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:4753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:4753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12862:4756","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:134":{"id":"0:134","crate_id":0,"name":null,"span":{"filename":"src/io/async_buf_read.rs","begin":[85,0],"end":[97,1]},"visibility":{"restricted":{"parent":"0:106:2212","path":"::io::async_buf_read"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DerefMut","id":"2:3411:2277","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3220:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:3398:112","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncBufRead","id":"0:126:2213","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsyncBufRead","id":"0:126:2213","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"items":["0:136:2305","0:137:2315"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:169:2359":{"id":"0:169:2359","crate_id":0,"name":"poll_read","span":{"filename":"src/io/async_read.rs","begin":[53,4],"end":[57,30]},"visibility":"default","docs":"Attempts to read from the `AsyncRead` into `buf`.\n\nOn success, returns `Poll::Ready(Ok(()))` and places data in the\nunfilled portion of `buf`. If no data was read (`buf.filled().len()` is\nunchanged), it implies that EOF has been reached.\n\nIf no data is available for reading, the method returns `Poll::Pending`\nand arranges for the current task (via `cx.waker()`) to receive a\nnotification when the object becomes readable or is closed.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13852:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:307:2221","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50050:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:3286:3267":{"id":"2:3286:3267","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3288:871"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:285":{"id":"0:285","crate_id":0,"name":null,"span":{"filename":"src/io/async_write.rs","begin":[350,0],"end":[378,1]},"visibility":{"restricted":{"parent":"0:226:2218","path":"::io::async_write"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["poll_write_vectored","is_write_vectored"],"trait":{"kind":"resolved_path","inner":{"name":"AsyncWrite","id":"0:247:2219","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"io::Cursor","id":"1:10746:2324","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7753:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"items":["0:286:2438","0:287:2504","0:288:2516","0:289:2445","0:290:2491"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:277:2445":{"id":"0:277:2445","crate_id":0,"name":"poll_flush","span":{"filename":"src/io/async_write.rs","begin":[311,4],"end":[313,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13852:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50050:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10132:3512":{"id":"2:10132:3512","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10133:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3299:3273":{"id":"2:3299:3273","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3300:167","2:3301:931"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10138:3510":{"id":"2:10138:3510","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10139:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13322:56131":{"id":"2:13322:56131","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4621:2325":{"id":"1:4621:2325","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4622:2326","1:4623:2315","1:4624:4061","1:4626:3309","1:4627:4062","1:4629:2247","1:4630:4063"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4539:3306","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3189:103":{"id":"2:3189:103","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2801:101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:328:2592":{"id":"0:328:2592","crate_id":0,"name":"advance","span":{"filename":"src/io/read_buf.rs","begin":[198,4],"end":[201,5]},"visibility":"public","docs":"Advances the size of the filled region of the buffer.\n\nThe number of initialized bytes is not changed.\n\n# Panics\n\nPanics if the filled region of the buffer would become larger than the initialized region.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3327:3275":{"id":"2:3327:3275","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3329:167","2:3330:1207"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:405":{"id":"0:405","crate_id":0,"name":null,"span":{"filename":"src/net/addr.rs","begin":[90,0],"end":[90,39]},"visibility":{"restricted":{"parent":"0:354:2625","path":"::net::addr"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"ToSocketAddrs","id":"0:380:2627","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"IpAddr","id":"1:11050:2641","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},{"kind":"primitive","inner":"u16"}]},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13201:771":{"id":"2:13201:771","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15741:3140"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3179:196-0:307:2221":{"id":"a:2:3179:196-0:307:2221","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3179:196","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:307:2221","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:273":{"id":"0:273","crate_id":0,"name":null,"span":{"filename":"src/io/async_write.rs","begin":[290,0],"end":[318,1]},"visibility":{"restricted":{"parent":"0:226:2218","path":"::io::async_write"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["poll_write_vectored","is_write_vectored"],"trait":{"kind":"resolved_path","inner":{"name":"AsyncWrite","id":"0:247:2219","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"io::Cursor","id":"1:10746:2324","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}}],"bindings":[]}},"param_names":[]}},"items":["0:274:2438","0:275:2504","0:276:2516","0:277:2445","0:278:2491"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:9139:3572-0:307:2221":{"id":"a:2:9139:3572-0:307:2221","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9139:3572","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:307:2221","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:294:2516":{"id":"0:294:2516","crate_id":0,"name":"is_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[397,4],"end":[399,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13262:60464":{"id":"2:13262:60464","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12837:4752","prim@char":"1:15741:3140","str::split_terminator":"1:15747:3145","str::split":"1:15747:3145"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49218:5101","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:4753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:4753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12862:4756","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3112-0:307:2221":{"id":"b:2:3112-0:307:2221","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3085:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:307:2221","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3114:661"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13293:60472":{"id":"2:13293:60472","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:215":{"id":"0:215","crate_id":0,"name":null,"span":{"filename":"src/io/async_seek.rs","begin":[69,0],"end":[81,1]},"visibility":{"restricted":{"parent":"0:186:2216","path":"::io::async_seek"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DerefMut","id":"2:3411:2277","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3220:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:3398:112","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncSeek","id":"0:207:2217","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsyncSeek","id":"0:207:2217","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"items":["0:217:2392","0:218:2400"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3268:3263":{"id":"2:3268:3263","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3270:167","2:3271:1081"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:182:2359":{"id":"0:182:2359","crate_id":0,"name":"poll_read","span":{"filename":"src/io/async_read.rs","begin":[109,4],"end":[130,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["_cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13852:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:307:2221","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50050:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23493:4933":{"id":"2:23493:4933","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:23494:4939"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23489:4517","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3189:103","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13236:56995":{"id":"2:13236:56995","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:12837:4752","prim@char":"1:15741:3140"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:4753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13210:60460":{"id":"2:13210:60460","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:796:2445":{"id":"0:796:2445","crate_id":0,"name":"poll_flush","span":{"filename":"src/io/async_write.rs","begin":[222,4],"end":[222,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13852:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50050:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6767:4511":{"id":"1:6767:4511","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6768:55925"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:312":{"id":"0:312","crate_id":0,"name":null,"span":{"filename":"src/io/read_buf.rs","begin":[29,0],"end":[267,1]},"visibility":{"restricted":{"parent":"0:300:2220","path":"::io::read_buf"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:307:2221","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["0:314:898","0:315:2546","0:316:2548","0:317:2540","0:318:2552","0:319:2555","0:320:2541","0:321:2562","0:322:2573","0:323:2558","0:324:2578","0:325:2579","0:326:2363","0:327:2588","0:328:2592","0:329:2595","0:330:311","0:331:2367"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:12862:4756":{"id":"2:12862:4756","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:12864:3994","2:12865:58913","2:12866:58914"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"2:12856:4755","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6593:4534":{"id":"1:6593:4534","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6594:56650","1:6595:9147","1:6596:9148","1:6597:9150","1:6598:9149","1:6599:9151","1:6600:9152","1:6601:9154","1:6602:6593","1:6603:9157","1:6604:9158","1:6605:9159","1:6606:9160","1:6607:9161","1:6608:9162","1:6609:9155","1:6610:9156"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13217:56960":{"id":"2:13217:56960","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10737:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10737:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:772:207":{"id":"5:772:207","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:773:4057","5:774:2675","5:775:4058"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:219":{"id":"0:219","crate_id":0,"name":null,"span":{"filename":"src/io/async_seek.rs","begin":[83,0],"end":[90,1]},"visibility":{"restricted":{"parent":"0:186:2216","path":"::io::async_seek"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"2:3076:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3220:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsyncSeek","id":"0:207:2217","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"io::Cursor","id":"1:10746:2324","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:221:2392","0:222:2400"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:12847:4753":{"id":"2:12847:4753","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12849:4755","2:12850:59182","2:12851:59183","2:12852:59184","2:12853:59186","2:12854:59185","2:12855:59187"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6067:3313":{"id":"5:6067:3313","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8341:201"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:4753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5643:4533":{"id":"1:5643:4533","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5644:6551","1:5645:7828"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:4689:4273":{"id":"2:4689:4273","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4690:2680","2:4691:58958","2:4692:2685"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13250:2247":{"id":"2:13250:2247","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::rsplit":"1:15747:3145","str::split_whitespace":"1:15747:3145","self::pattern":"2:12837:4752","`DoubleEndedIterator`":"2:8328:116","prim@char":"1:15741:3140"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49150:2269","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:4753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:319:2555":{"id":"0:319:2555","crate_id":0,"name":"take","span":{"filename":"src/io/read_buf.rs","begin":[80,4],"end":[84,5]},"visibility":"public","docs":"Returns a new `ReadBuf` comprised of the unfilled section up to `n`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:307:2221","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9225:4557":{"id":"1:9225:4557","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9226:56455","1:9227:56456","1:9228:56457","1:9229:56458","1:9230:5135","1:9231:40046","1:9232:56454"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10447:4517","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:383":{"id":"0:383","crate_id":0,"name":null,"span":{"filename":"src/net/addr.rs","begin":[34,0],"end":[34,55]},"visibility":{"restricted":{"parent":"0:354:2625","path":"::net::addr"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ToSocketAddrs","id":"0:380:2627","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2319","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"ToSocketAddrs","id":"0:380:2627","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13312:60478":{"id":"2:13312:60478","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:12837:4752","prim@char":"1:15741:3140"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:4753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:291":{"id":"0:291","crate_id":0,"name":null,"span":{"filename":"src/io/async_write.rs","begin":[380,0],"end":[408,1]},"visibility":{"restricted":{"parent":"0:226:2218","path":"::io::async_write"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["poll_write_vectored","is_write_vectored"],"trait":{"kind":"resolved_path","inner":{"name":"AsyncWrite","id":"0:247:2219","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"io::Cursor","id":"1:10746:2324","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:2320","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"items":["0:292:2438","0:293:2504","0:294:2516","0:295:2445","0:296:2491"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3623:3285":{"id":"2:3623:3285","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2319","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"2:3554:3284","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5635:4532":{"id":"1:5635:4532","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5636:6551","1:5637:56473","1:5638:56474"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6073:61117":{"id":"5:6073:61117","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8341:201"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3646:3287":{"id":"2:3646:3287","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3648:54815"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:254:2516":{"id":"0:254:2516","crate_id":0,"name":"is_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[180,4],"end":[182,5]},"visibility":"default","docs":"Determines if this writer has an efficient [`poll_write_vectored`]\nimplementation.\n\nIf a writer does not override the default [`poll_write_vectored`]\nimplementation, code using it may want to avoid the method all together\nand coalesce writes into a single buffer for higher performance.\n\nThe default implementation returns `false`.\n\n[`poll_write_vectored`]: AsyncWrite::poll_write_vectored","links":{"AsyncWrite::poll_write_vectored":"0:247:2219"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3126:123":{"id":"2:3126:123","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:38505:4525","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generics":{"params":[],"where_predicates":[]}}},"0:797:2491":{"id":"0:797:2491","crate_id":0,"name":"poll_shutdown","span":{"filename":"src/io/async_write.rs","begin":[222,4],"end":[222,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13852:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50050:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3076:75":{"id":"2:3076:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3078:289"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2319","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3425:126":{"id":"2:3425:126","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3427:360"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3428:127","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6065":{"id":"5:6065","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5885:1311","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6066:61115","5:6067:3313","5:6070:61116","5:6073:61117","5:6085:61118","5:6086:61119","5:6087:2255","5:6088:56128","5:6089:56129"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3220:1880":{"id":"2:3220:1880","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22844:4940":{"id":"2:22844:4940","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"2:23493:4933","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22835:4517","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:247:2219":{"id":"0:247:2219","crate_id":0,"name":"AsyncWrite","span":{"filename":"src/io/async_write.rs","begin":[45,0],"end":[183,1]},"visibility":"public","docs":"Writes bytes asynchronously.\n\nThe trait inherits from [`std::io::Write`] and indicates that an I/O object is\n**nonblocking**. All non-blocking I/O objects must return an error when\nbytes cannot be written instead of blocking the current thread.\n\nSpecifically, this means that the [`poll_write`] function will return one of\nthe following:\n\n* `Poll::Ready(Ok(n))` means that `n` bytes of data was immediately\n  written.\n\n* `Poll::Pending` means that no data was written from the buffer\n  provided. The I/O object is not currently writable but may become writable\n  in the future. Most importantly, **the current future's task is scheduled\n  to get unparked when the object is writable**. This means that like\n  `Future::poll` you'll receive a notification when the I/O object is\n  writable again.\n\n* `Poll::Ready(Err(e))` for other errors are standard I/O errors coming from the\n  underlying object.\n\nThis trait importantly means that the [`write`][stdwrite] method only works in\nthe context of a future's task. The object may panic if used outside of a task.\n\nNote that this trait also represents that the  [`Write::flush`][stdflush] method\nworks very similarly to the `write` method, notably that `Ok(())` means that the\nwriter has successfully been flushed, a \"would block\" error means that the\ncurrent task is ready to receive a notification when flushing can make more\nprogress, and otherwise normal errors can happen as well.\n\nUtilities for working with `AsyncWrite` values are provided by\n[`AsyncWriteExt`].\n\n[`std::io::Write`]: std::io::Write\n[`poll_write`]: AsyncWrite::poll_write()\n[stdwrite]: std::io::Write::write()\n[stdflush]: std::io::Write::flush()\n[`AsyncWriteExt`]: crate::io::AsyncWriteExt","links":{"AsyncWrite::poll_write()":"0:247:2219","std::io::Write":"1:4596:2519","std::io::Write::write()":"1:4596:2519","std::io::Write::flush()":"1:4596:2519"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:248:2438","0:249:2445","0:250:2491","0:251:2504","0:254:2516"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:256","0:258","0:260","0:267","0:273","0:279","0:285","0:291"]}},"0:781:2315":{"id":"0:781:2315","crate_id":0,"name":"consume","span":{"filename":"src/io/async_buf_read.rs","begin":[82,4],"end":[82,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["amt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3906:68":{"id":"2:3906:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3907:1398"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"2:3465:3243":{"id":"2:3465:3243","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3467:222","2:3468:192","2:3469:59910"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:267":{"id":"0:267","crate_id":0,"name":null,"span":{"filename":"src/io/async_write.rs","begin":[259,0],"end":[288,1]},"visibility":{"restricted":{"parent":"0:226:2218","path":"::io::async_write"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["poll_write_vectored","is_write_vectored"],"trait":{"kind":"resolved_path","inner":{"name":"AsyncWrite","id":"0:247:2219","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7753:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}},"param_names":[]}},"items":["0:268:2438","0:269:2504","0:270:2516","0:271:2445","0:272:2491"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13202:2507":{"id":"2:13202:2507","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3220:1880-0:307:2221":{"id":"a:2:3220:1880-0:307:2221","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3220:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:307:2221","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13246:3999":{"id":"2:13246:3999","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"2:12837:4752","`None`":"2:47192:162","prim@char":"1:15741:3140"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47192:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:4753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:4753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12862:4756","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13230:4063":{"id":"2:13230:4063","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49404:2266","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:292:2438":{"id":"0:292:2438","crate_id":0,"name":"poll_write","span":{"filename":"src/io/async_write.rs","begin":[381,4],"end":[387,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13852:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50050:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:251:2504":{"id":"0:251:2504","crate_id":0,"name":"poll_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[158,4],"end":[168,5]},"visibility":"default","docs":"Like [`poll_write`], except that it writes from a slice of buffers.\n\nData is copied from each buffer in order, with the final buffer\nread from possibly being only partially consumed. This method must\nbehave as a call to [`write`] with the buffers concatenated would.\n\nThe default implementation calls [`poll_write`] with either the first nonempty\nbuffer provided, or an empty one if none exists.\n\nOn success, returns `Poll::Ready(Ok(num_bytes_written))`.\n\nIf the object is not ready for writing, the method returns\n`Poll::Pending` and arranges for the current task (via\n`cx.waker()`) to receive a notification when the object becomes\nwritable or is closed.\n\n# Note\n\nThis should be implemented as a single \"atomic\" write action. If any\ndata has been partially written, it is wrong to return an error or\npending.\n\n[`poll_write`]: AsyncWrite::poll_write","links":{"`write`":"2:14:2521","AsyncWrite::poll_write":"0:247:2219"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13852:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10950:2403","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50050:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47319:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}},{"type":{"kind":"resolved_path","inner":{"name":"io::Error","id":"1:3955:123","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10140:3511":{"id":"2:10140:3511","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10141:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:266:2491":{"id":"0:266:2491","crate_id":0,"name":"poll_shutdown","span":{"filename":"src/io/async_write.rs","begin":[254,4],"end":[256,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13852:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50050:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:282:2516":{"id":"0:282:2516","crate_id":0,"name":"is_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[337,4],"end":[339,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6086:61119":{"id":"5:6086:61119","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:421:2320","`String`":"5:8341:201"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:2320","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8079:4127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13224:56979":{"id":"2:13224:56979","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:15747:3145"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5705:4539":{"id":"1:5705:4539","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5706:6551"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:380:2627":{"id":"0:380:2627","crate_id":0,"name":"ToSocketAddrs","span":{"filename":"src/net/addr.rs","begin":[19,0],"end":[19,53]},"visibility":"public","docs":"Converts or resolves without blocking to one or more `SocketAddr` values.\n\n# DNS\n\nImplementations of `ToSocketAddrs` for string types require a DNS lookup.\n\n# Calling\n\nCurrently, this trait is only used as an argument to Tokio functions that\nneed to reference a target socket address. To perform a `SocketAddr`\nconversion directly, use [`lookup_host()`](super::lookup_host()).\n\nThis trait is sealed and is intended to be opaque. The details of the trait\nwill change. Stabilization is pending enhancements to the Rust language.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"sealed::ToSocketAddrsPriv","id":"0:436:2657","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":["0:383","0:390","0:395","0:400","0:405","0:410","0:415","0:420"]}},"0:341":{"id":"0:341","crate_id":0,"name":null,"span":{"filename":"src/io/mod.rs","begin":[205,18],"end":[205,23]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"std::io::Error","name":"Error","id":"1:3955:123","glob":false}},"1:4539:3306":{"id":"1:4539:3306","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4540:4319","1:4541:4477","1:4543:4478","1:4544:4479","1:4545:3307","1:4546:4480","1:4547:2220","1:4549:4481","1:4550:4025","1:4551:4482","1:4552:4008","1:4554:2555"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9139:3572":{"id":"2:9139:3572","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:788:2438":{"id":"0:788:2438","crate_id":0,"name":"poll_write","span":{"filename":"src/io/async_write.rs","begin":[218,4],"end":[218,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13852:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50050:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:274:2438":{"id":"0:274:2438","crate_id":0,"name":"poll_write","span":{"filename":"src/io/async_write.rs","begin":[291,4],"end":[297,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13852:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50050:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:420":{"id":"0:420","crate_id":0,"name":null,"span":{"filename":"src/net/addr.rs","begin":[132,0],"end":[132,39]},"visibility":{"restricted":{"parent":"0:354:2625","path":"::net::addr"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"ToSocketAddrs","id":"0:380:2627","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"SocketAddr","id":"1:11020:2644","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13318:2673":{"id":"2:13318:2673","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12776:4630","`FromStr`":"2:12776:4630"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47319:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12776:4630","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12776:4630","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9140:3571-0:307:2221":{"id":"a:2:9140:3571-0:307:2221","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9140:3571","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:307:2221","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:410":{"id":"0:410","crate_id":0,"name":null,"span":{"filename":"src/net/addr.rs","begin":[104,0],"end":[104,41]},"visibility":{"restricted":{"parent":"0:354:2625","path":"::net::addr"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"ToSocketAddrs","id":"0:380:2627","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"Ipv4Addr","id":"1:11074:2642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},{"kind":"primitive","inner":"u16"}]},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:771:1349":{"id":"0:771:1349","crate_id":0,"name":"task","span":{"filename":"src/task/mod.rs","begin":[1,0],"end":[324,1]},"visibility":"public","docs":"Asynchronous green-threads.\n\n## What are Tasks?\n\nA _task_ is a light weight, non-blocking unit of execution. A task is similar\nto an OS thread, but rather than being managed by the OS scheduler, they are\nmanaged by the [Tokio runtime][rt]. Another name for this general pattern is\n[green threads]. If you are familiar with [Go's goroutines], [Kotlin's\ncoroutines], or [Erlang's processes], you can think of Tokio's tasks as\nsomething similar.\n\nKey points about tasks include:\n\n* Tasks are **light weight**. Because tasks are scheduled by the Tokio\n  runtime rather than the operating system, creating new tasks or switching\n  between tasks does not require a context switch and has fairly low\n  overhead. Creating, running, and destroying large numbers of tasks is\n  quite cheap, especially compared to OS threads.\n\n* Tasks are scheduled **cooperatively**. Most operating systems implement\n  _preemptive multitasking_. This is a scheduling technique where the\n  operating system allows each thread to run for a period of time, and then\n  _preempts_ it, temporarily pausing that thread and switching to another.\n  Tasks, on the other hand, implement _cooperative multitasking_. In\n  cooperative multitasking, a task is allowed to run until it _yields_,\n  indicating to the Tokio runtime's scheduler that it cannot currently\n  continue executing. When a task yields, the Tokio runtime switches to\n  executing the next task.\n\n* Tasks are **non-blocking**. Typically, when an OS thread performs I/O or\n  must synchronize with another thread, it _blocks_, allowing the OS to\n  schedule another thread. When a task cannot continue executing, it must\n  yield instead, allowing the Tokio runtime to schedule another task. Tasks\n  should generally not perform system calls or other operations that could\n  block a thread, as this would prevent other tasks running on the same\n  thread from executing as well. Instead, this module provides APIs for\n  running blocking operations in an asynchronous context.\n\n[rt]: crate::runtime\n[green threads]: https://en.wikipedia.org/wiki/Green_threads\n[Go's goroutines]: https://tour.golang.org/concurrency/1\n[Kotlin's coroutines]: https://kotlinlang.org/docs/reference/coroutines-overview.html\n[Erlang's processes]: http://erlang.org/doc/getting_started/conc_prog.html#processes\n\n## Working with Tasks\n\nThis module provides the following APIs for working with tasks:\n\n### Spawning\n\nPerhaps the most important function in this module is [`task::spawn`]. This\nfunction can be thought of as an async equivalent to the standard library's\n[`thread::spawn`][`std::thread::spawn`]. It takes an `async` block or other\n[future], and creates a new task to run that work concurrently:\n\n```\nuse tokio::task;\n\n# async fn doc() {\ntask::spawn(async {\n    // perform some work here...\n});\n# }\n```\n\nLike [`std::thread::spawn`], `task::spawn` returns a [`JoinHandle`] struct.\nA `JoinHandle` is itself a future which may be used to await the output of\nthe spawned task. For example:\n\n```\nuse tokio::task;\n\n# #[tokio::main] async fn main() -> Result<(), Box<dyn std::error::Error>> {\nlet join = task::spawn(async {\n    // ...\n    \"hello world!\"\n});\n\n// ...\n\n// Await the result of the spawned task.\nlet result = join.await?;\nassert_eq!(result, \"hello world!\");\n# Ok(())\n# }\n```\n\nAgain, like `std::thread`'s [`JoinHandle` type][thread_join], if the spawned\ntask panics, awaiting its `JoinHandle` will return a [`JoinError`]. For\nexample:\n\n```\nuse tokio::task;\n\n# #[tokio::main] async fn main() {\nlet join = task::spawn(async {\n    panic!(\"something bad happened!\")\n});\n\n// The returned result indicates that the task failed.\nassert!(join.await.is_err());\n# }\n```\n\n`spawn`, `JoinHandle`, and `JoinError` are present when the \"rt\"\nfeature flag is enabled.\n\n[`task::spawn`]: crate::task::spawn()\n[future]: std::future::Future\n[`std::thread::spawn`]: std::thread::spawn\n[`JoinHandle`]: crate::task::JoinHandle\n[thread_join]: std::thread::JoinHandle\n[`JoinError`]: crate::task::JoinError\n\n### Blocking and Yielding\n\nAs we discussed above, code running in asynchronous tasks should not perform\noperations that can block. A blocking operation performed in a task running\non a thread that is also running other tasks would block the entire thread,\npreventing other tasks from running.\n\nInstead, Tokio provides two APIs for running blocking operations in an\nasynchronous context: [`task::spawn_blocking`] and [`task::block_in_place`].\n\nBe aware that if you call a non-async method from async code, that non-async\nmethod is still inside the asynchronous context, so you should also avoid\nblocking operations there. This includes destructors of objects destroyed in\nasync code.\n\n#### spawn_blocking\n\nThe `task::spawn_blocking` function is similar to the `task::spawn` function\ndiscussed in the previous section, but rather than spawning an\n_non-blocking_ future on the Tokio runtime, it instead spawns a\n_blocking_ function on a dedicated thread pool for blocking tasks. For\nexample:\n\n```\nuse tokio::task;\n\n# async fn docs() {\ntask::spawn_blocking(|| {\n    // do some compute-heavy work or call synchronous code\n});\n# }\n```\n\nJust like `task::spawn`, `task::spawn_blocking` returns a `JoinHandle`\nwhich we can use to await the result of the blocking operation:\n\n```rust\n# use tokio::task;\n# async fn docs() -> Result<(), Box<dyn std::error::Error>>{\nlet join = task::spawn_blocking(|| {\n    // do some compute-heavy work or call synchronous code\n    \"blocking completed\"\n});\n\nlet result = join.await?;\nassert_eq!(result, \"blocking completed\");\n# Ok(())\n# }\n```\n\n#### block_in_place\n\nWhen using the [multi-threaded runtime][rt-multi-thread], the [`task::block_in_place`]\nfunction is also available. Like `task::spawn_blocking`, this function\nallows running a blocking operation from an asynchronous context. Unlike\n`spawn_blocking`, however, `block_in_place` works by transitioning the\n_current_ worker thread to a blocking thread, moving other tasks running on\nthat thread to another worker thread. This can improve performance by avoiding\ncontext switches.\n\nFor example:\n\n```\nuse tokio::task;\n\n# async fn docs() {\nlet result = task::block_in_place(|| {\n    // do some compute-heavy work or call synchronous code\n    \"blocking completed\"\n});\n\nassert_eq!(result, \"blocking completed\");\n# }\n```\n\n#### yield_now\n\nIn addition, this module provides a [`task::yield_now`] async function\nthat is analogous to the standard library's [`thread::yield_now`]. Calling\nand `await`ing this function will cause the current task to yield to the\nTokio runtime's scheduler, allowing other tasks to be\nscheduled. Eventually, the yielding task will be polled again, allowing it\nto execute. For example:\n\n```rust\nuse tokio::task;\n\n# #[tokio::main] async fn main() {\nasync {\n    task::spawn(async {\n        // ...\n        println!(\"spawned task done!\")\n    });\n\n    // Yield, allowing the newly-spawned task to execute first.\n    task::yield_now().await;\n    println!(\"main task done!\");\n}\n# .await;\n# }\n```\n\n### Cooperative scheduling\n\nA single call to [`poll`] on a top-level task may potentially do a lot of\nwork before it returns `Poll::Pending`. If a task runs for a long period of\ntime without yielding back to the executor, it can starve other tasks\nwaiting on that executor to execute them, or drive underlying resources.\nSince Rust does not have a runtime, it is difficult to forcibly preempt a\nlong-running task. Instead, this module provides an opt-in mechanism for\nfutures to collaborate with the executor to avoid starvation.\n\nConsider a future like this one:\n\n```\n# use tokio_stream::{Stream, StreamExt};\nasync fn drop_all<I: Stream + Unpin>(mut input: I) {\n    while let Some(_) = input.next().await {}\n}\n```\n\nIt may look harmless, but consider what happens under heavy load if the\ninput stream is _always_ ready. If we spawn `drop_all`, the task will never\nyield, and will starve other tasks and resources on the same executor.\n\nTo account for this, Tokio has explicit yield points in a number of library\nfunctions, which force tasks to return to the executor periodically.\n\n\n#### unconstrained\n\nIf necessary, [`task::unconstrained`] lets you opt out a future of Tokio's cooperative\nscheduling. When a future is wrapped with `unconstrained`, it will never be forced to yield to\nTokio. For example:\n\n```\n# #[tokio::main]\n# async fn main() {\nuse tokio::{task, sync::mpsc};\n\nlet fut = async {\n    let (tx, mut rx) = mpsc::unbounded_channel();\n\n    for i in 0..1000 {\n        let _ = tx.send(());\n        // This will always be ready. If coop was in effect, this code would be forced to yield\n        // periodically. However, if left unconstrained, then this code will never yield.\n        rx.recv().await;\n    }\n};\n\ntask::unconstrained(fut).await;\n# }\n```\n\n[`task::spawn_blocking`]: crate::task::spawn_blocking\n[`task::block_in_place`]: crate::task::block_in_place\n[rt-multi-thread]: ../runtime/index.html#threaded-scheduler\n[`task::yield_now`]: crate::task::yield_now()\n[`thread::yield_now`]: std::thread::yield_now\n[`task::unconstrained`]: crate::task::unconstrained()\n[`poll`]: method@std::future::Future::poll","links":{"method@std::future::Future::poll":"2:13550:134","std::future::Future":"2:13550:134","std::thread::spawn":"1:984:1829","std::thread::JoinHandle":"1:1041:2275","std::thread::yield_now":"1:988:2721"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[]}},"2:3121:123":{"id":"2:3121:123","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3092:212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"0:278:2491":{"id":"0:278:2491","crate_id":0,"name":"poll_shutdown","span":{"filename":"src/io/async_write.rs","begin":[315,4],"end":[317,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13852:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50050:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3157:111":{"id":"2:3157:111","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3158:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13227:4482":{"id":"2:13227:4482","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49136:3311","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13256:56988":{"id":"2:13256:56988","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"`DoubleEndedIterator`":"2:8328:116","self::pattern":"2:12837:4752","prim@char":"1:15741:3140","str::split":"1:15747:3145"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49168:5071","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:4753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:4753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12862:4756","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4899:2627":{"id":"1:4899:2627","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4900:2661","1:4901:2626"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3088:213":{"id":"2:3088:213","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3090:123","2:3091:1385"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:127:2305":{"id":"0:127:2305","crate_id":0,"name":"poll_fill_buf","span":{"filename":"src/io/async_buf_read.rs","begin":[45,4],"end":[45,92]},"visibility":"default","docs":"Attempts to return the contents of the internal buffer, filling it with more data\nfrom the inner reader if it is empty.\n\nOn success, returns `Poll::Ready(Ok(buf))`.\n\nIf no data is available for reading, the method returns\n`Poll::Pending` and arranges for the current task (via\n`cx.waker().wake_by_ref()`) to receive a notification when the object becomes\nreadable or is closed.\n\nThis function is a lower-level call. It needs to be paired with the\n[`consume`] method to function properly. When calling this\nmethod, none of the contents will be \"read\" in the sense that later\ncalling [`poll_read`] may return the same contents. As such, [`consume`] must\nbe called with the number of bytes that are consumed from this buffer to\nensure that the bytes are never returned twice.\n\nAn empty buffer returned indicates that the stream has reached EOF.\n\n[`poll_read`]: AsyncRead::poll_read\n[`consume`]: AsyncBufRead::consume","links":{"AsyncRead::poll_read":"0:168:2215","AsyncBufRead::consume":"0:126:2213"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13852:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50050:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:7808:4922":{"id":"2:7808:4922","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7809:59293","2:7810:59294","2:7811:59291","2:7812:59289","2:7813:59295","2:7814:59292","2:7815:59290"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2801:101","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2877:170","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13209:56086":{"id":"2:13209:56086","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12308:5232"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5649:4534":{"id":"1:5649:4534","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5650:8803","1:5651:55534","1:5652:6551","1:5653:58430","1:5654:4698","1:5655:4699","1:5656:58431","1:5657:1275","1:5658:58432","1:5659:58433","1:5660:58434","1:5661:58435","1:5662:58436","1:5663:58437","1:5664:58438","1:5665:58439"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:779:2315":{"id":"0:779:2315","crate_id":0,"name":"consume","span":{"filename":"src/io/async_buf_read.rs","begin":[78,4],"end":[78,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["amt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3188:202":{"id":"2:3188:202","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:276:2516":{"id":"0:276:2516","crate_id":0,"name":"is_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[307,4],"end":[309,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3127:1384":{"id":"2:3127:1384","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47319:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3092:212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8328:116":{"id":"2:8328:116","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8329:3994","2:8330:3995","2:8331:3996","2:8332:3997","2:8336:3998","2:8339:3999"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8482:153","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:279":{"id":"0:279","crate_id":0,"name":null,"span":{"filename":"src/io/async_write.rs","begin":[320,0],"end":[348,1]},"visibility":{"restricted":{"parent":"0:226:2218","path":"::io::async_write"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["poll_write_vectored","is_write_vectored"],"trait":{"kind":"resolved_path","inner":{"name":"AsyncWrite","id":"0:247:2219","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"io::Cursor","id":"1:10746:2324","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7753:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"items":["0:280:2438","0:281:2504","0:282:2516","0:283:2445","0:284:2491"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13326:4567":{"id":"2:13326:4567","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:15741:3140"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:49458:4568","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13321:56130":{"id":"2:13321:56130","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3114:661":{"id":"2:3114:661","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:792:2491":{"id":"0:792:2491","crate_id":0,"name":"poll_shutdown","span":{"filename":"src/io/async_write.rs","begin":[218,4],"end":[218,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13852:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50050:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:794:2504":{"id":"0:794:2504","crate_id":0,"name":"poll_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[222,4],"end":[222,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13852:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10950:2403","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50050:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13565:146":{"id":"2:13565:146","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13566:167","2:13567:146","2:13568:745"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2776:94":{"id":"2:2776:94","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2778:3209"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2319","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3274:3262":{"id":"2:3274:3262","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3275:167","2:3276:891"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:141":{"id":"0:141","crate_id":0,"name":null,"span":{"filename":"src/io/async_buf_read.rs","begin":[109,0],"end":[117,1]},"visibility":{"restricted":{"parent":"0:106:2212","path":"::io::async_buf_read"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"2:3076:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3220:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsyncBufRead","id":"0:126:2213","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"io::Cursor","id":"1:10746:2324","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:143:2305","0:144:2315"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:789:2504":{"id":"0:789:2504","crate_id":0,"name":"poll_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[218,4],"end":[218,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13852:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10950:2403","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50050:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2565:123":{"id":"1:2565:123","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2566:3101","1:2568:3132","1:2569:58518","1:2570:58519"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10119:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10126:115","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8353:3583":{"id":"2:8353:3583","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8354:771","2:8355:2507"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8482:153","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:289:2445":{"id":"0:289:2445","crate_id":0,"name":"poll_flush","span":{"filename":"src/io/async_write.rs","begin":[371,4],"end":[373,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13852:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50050:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2877:170":{"id":"2:2877:170","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2879:976","2:2880:804","2:2881:770","2:2882:693","2:2883:676"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2319","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2831:169","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8243:4919":{"id":"2:8243:4919","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8245:4048"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6367:4550":{"id":"1:6367:4550","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6368:56621","1:6369:1825","1:6370:56622","1:6371:56623","1:6372:56624","1:6373:56625"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10447:4517","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:322:2573":{"id":"0:322:2573","crate_id":0,"name":"inner_mut","span":{"filename":"src/io/read_buf.rs","begin":[123,4],"end":[125,5]},"visibility":"public","docs":"Returns a mutable reference to the entire buffer, without ensuring that it has been fully\ninitialized.\n\nThe elements between 0 and `self.filled().len()` are filled, and those between 0 and\n`self.initialized().len()` are initialized (and so can be converted to a `&mut [u8]`).\n\nThe caller of this method must ensure that these invariants are upheld. For example, if the\ncaller initializes some of the uninitialized section of the buffer, it must call\n[`assume_init`](Self::assume_init) with the number of bytes initialized.\n\n# Safety\n\nThe caller must not de-initialize portions of the buffer that have already been initialized.\nThis includes any bytes in the region marked as uninitialized by `ReadBuf`.","links":{"Self::assume_init":"0:307:2221"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninit","id":"2:32050:2524","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}},"param_names":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:783:2359":{"id":"0:783:2359","crate_id":0,"name":"poll_read","span":{"filename":"src/io/async_read.rs","begin":[77,4],"end":[77,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13852:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:307:2221","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50050:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3341:3278":{"id":"2:3341:3278","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3343:341"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13315:60479":{"id":"2:13315:60479","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:12837:4752","prim@char":"1:15741:3140"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:4753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:4753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12862:4756","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13280:60467":{"id":"2:13280:60467","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"`DoubleEndedIterator`":"2:8328:116","prim@char":"1:15741:3140","self::pattern":"2:12837:4752","str::matches":"1:15747:3145"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49372:5108","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:4753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:4753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12862:4756","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13550:134":{"id":"2:13550:134","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13551:167","2:13552:992"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:249:2445":{"id":"0:249:2445","crate_id":0,"name":"poll_flush","span":{"filename":"src/io/async_write.rs","begin":[73,4],"end":[73,93]},"visibility":"default","docs":"Attempts to flush the object, ensuring that any buffered data reach\ntheir destination.\n\nOn success, returns `Poll::Ready(Ok(()))`.\n\nIf flushing cannot immediately complete, this method returns\n`Poll::Pending` and arranges for the current task (via\n`cx.waker()`) to receive a notification when the object can make\nprogress towards flushing.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13852:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50050:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47319:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"io::Error","id":"1:3955:123","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:10069:2519":{"id":"2:10069:2519","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10070:1498","2:10071:59232","2:10073:4080"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:0:1882":{"id":"0:0:1882","crate_id":0,"name":"tokio","span":{"filename":"src/lib.rs","begin":[1,0],"end":[568,26]},"visibility":"public","docs":"A runtime for writing reliable network applications without compromising speed.\n\nTokio is an event-driven, non-blocking I/O platform for writing asynchronous\napplications with the Rust programming language. At a high level, it\nprovides a few major components:\n\n* Tools for [working with asynchronous tasks][tasks], including\n  [synchronization primitives and channels][sync] and [timeouts, sleeps, and\n  intervals][time].\n* APIs for [performing asynchronous I/O][io], including [TCP and UDP][net] sockets,\n  [filesystem][fs] operations, and [process] and [signal] management.\n* A [runtime] for executing asynchronous code, including a task scheduler,\n  an I/O driver backed by the operating system's event queue (epoll, kqueue,\n  IOCP, etc...), and a high performance timer.\n\nGuide level documentation is found on the [website].\n\n[tasks]: #working-with-tasks\n[sync]: crate::sync\n[time]: crate::time\n[io]: #asynchronous-io\n[net]: crate::net\n[fs]: crate::fs\n[process]: crate::process\n[signal]: crate::signal\n[fs]: crate::fs\n[runtime]: crate::runtime\n[website]: https://tokio.rs/tokio/tutorial\n\n# A Tour of Tokio\n\nTokio consists of a number of modules that provide a range of functionality\nessential for implementing asynchronous applications in Rust. In this\nsection, we will take a brief tour of Tokio, summarizing the major APIs and\ntheir uses.\n\nThe easiest way to get started is to enable all features. Do this by\nenabling the `full` feature flag:\n\n```toml\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n### Authoring applications\n\nTokio is great for writing applications and most users in this case shouldn't\nworry too much about what features they should pick. If you're unsure, we suggest\ngoing with `full` to ensure that you don't run into any road blocks while you're\nbuilding your application.\n\n#### Example\n\nThis example shows the quickest way to get started with Tokio.\n\n```toml\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n### Authoring libraries\n\nAs a library author your goal should be to provide the lightest weight crate\nthat is based on Tokio. To achieve this you should ensure that you only enable\nthe features you need. This allows users to pick up your crate without having\nto enable unnecessary features.\n\n#### Example\n\nThis example shows how you may want to import features for a library that just\nneeds to `tokio::spawn` and use a `TcpStream`.\n\n```toml\ntokio = { version = \"1\", features = [\"rt\", \"net\"] }\n```\n\n## Working With Tasks\n\nAsynchronous programs in Rust are based around lightweight, non-blocking\nunits of execution called [_tasks_][tasks]. The [`tokio::task`] module provides\nimportant tools for working with tasks:\n\n* The [`spawn`] function and [`JoinHandle`] type, for scheduling a new task\n  on the Tokio runtime and awaiting the output of a spawned task, respectively,\n* Functions for [running blocking operations][blocking] in an asynchronous\n  task context.\n\nThe [`tokio::task`] module is present only when the \"rt\" feature flag\nis enabled.\n\n[tasks]: task/index.html#what-are-tasks\n[`tokio::task`]: crate::task\n[`spawn`]: crate::task::spawn()\n[`JoinHandle`]: crate::task::JoinHandle\n[blocking]: task/index.html#blocking-and-yielding\n\nThe [`tokio::sync`] module contains synchronization primitives to use when\nneeding to communicate or share data. These include:\n\n* channels ([`oneshot`], [`mpsc`], [`watch`], and [`broadcast`]), for sending values\n  between tasks,\n* a non-blocking [`Mutex`], for controlling access to a shared, mutable\n  value,\n* an asynchronous [`Barrier`] type, for multiple tasks to synchronize before\n  beginning a computation.\n\nThe `tokio::sync` module is present only when the \"sync\" feature flag is\nenabled.\n\n[`tokio::sync`]: crate::sync\n[`Mutex`]: crate::sync::Mutex\n[`Barrier`]: crate::sync::Barrier\n[`oneshot`]: crate::sync::oneshot\n[`mpsc`]: crate::sync::mpsc\n[`watch`]: crate::sync::watch\n[`broadcast`]: crate::sync::broadcast\n\nThe [`tokio::time`] module provides utilities for tracking time and\nscheduling work. This includes functions for setting [timeouts][timeout] for\ntasks, [sleeping][sleep] work to run in the future, or [repeating an operation at an\ninterval][interval].\n\nIn order to use `tokio::time`, the \"time\" feature flag must be enabled.\n\n[`tokio::time`]: crate::time\n[sleep]: crate::time::sleep()\n[interval]: crate::time::interval()\n[timeout]: crate::time::timeout()\n\nFinally, Tokio provides a _runtime_ for executing asynchronous tasks. Most\napplications can use the [`#[tokio::main]`][main] macro to run their code on the\nTokio runtime. However, this macro provides only basic configuration options. As\nan alternative, the [`tokio::runtime`] module provides more powerful APIs for configuring\nand managing runtimes. You should use that module if the `#[tokio::main]` macro doesn't\nprovide the functionality you need.\n\nUsing the runtime requires the \"rt\" or \"rt-multi-thread\" feature flags, to\nenable the basic [single-threaded scheduler][rt] and the [thread-pool\nscheduler][rt-multi-thread], respectively. See the [`runtime` module\ndocumentation][rt-features] for details. In addition, the \"macros\" feature\nflag enables the `#[tokio::main]` and `#[tokio::test]` attributes.\n\n[main]: attr.main.html\n[`tokio::runtime`]: crate::runtime\n[`Builder`]: crate::runtime::Builder\n[`Runtime`]: crate::runtime::Runtime\n[rt]: runtime/index.html#current-thread-scheduler\n[rt-multi-thread]: runtime/index.html#multi-thread-scheduler\n[rt-features]: runtime/index.html#runtime-scheduler\n\n## CPU-bound tasks and blocking code\n\nTokio is able to concurrently run many tasks on a few threads by repeatedly\nswapping the currently running task on each thread. However, this kind of\nswapping can only happen at `.await` points, so code that spends a long time\nwithout reaching an `.await` will prevent other tasks from running. To\ncombat this, Tokio provides two kinds of threads: Core threads and blocking\nthreads. The core threads are where all asynchronous code runs, and Tokio\nwill by default spawn one for each CPU core. The blocking threads are\nspawned on demand, can be used to run blocking code that would otherwise\nblock other tasks from running and are kept alive when not used for a certain\namount of time which can be configured with [`thread_keep_alive`].\nSince it is not possible for Tokio to swap out blocking tasks, like it\ncan do with asynchronous code, the upper limit on the number of blocking\nthreads is very large. These limits can be configured on the [`Builder`].\n\nTo spawn a blocking task, you should use the [`spawn_blocking`] function.\n\n[`Builder`]: crate::runtime::Builder\n[`spawn_blocking`]: crate::task::spawn_blocking()\n[`thread_keep_alive`]: crate::runtime::Builder::thread_keep_alive()\n\n```\n#[tokio::main]\nasync fn main() {\n    // This is running on a core thread.\n\n    let blocking_task = tokio::task::spawn_blocking(|| {\n        // This is running on a blocking thread.\n        // Blocking here is ok.\n    });\n\n    // We can wait for the blocking task like this:\n    // If the blocking task panics, the unwrap below will propagate the\n    // panic.\n    blocking_task.await.unwrap();\n}\n```\n\nIf your code is CPU-bound and you wish to limit the number of threads used\nto run it, you should use a separate thread pool dedicated to CPU bound tasks.\nFor example, you could consider using the [rayon] library for CPU-bound\ntasks. It is also possible to create an extra Tokio runtime dedicated to\nCPU-bound tasks, but if you do this, you should be careful that the extra\nruntime runs _only_ CPU-bound tasks, as IO-bound tasks on that runtime\nwill behave poorly.\n\nHint: If using rayon, you can use a [`oneshot`] channel to send the result back\nto Tokio when the rayon task finishes.\n\n[rayon]: https://docs.rs/rayon\n[`oneshot`]: crate::sync::oneshot\n\n## Asynchronous IO\n\nAs well as scheduling and running tasks, Tokio provides everything you need\nto perform input and output asynchronously.\n\nThe [`tokio::io`] module provides Tokio's asynchronous core I/O primitives,\nthe [`AsyncRead`], [`AsyncWrite`], and [`AsyncBufRead`] traits. In addition,\nwhen the \"io-util\" feature flag is enabled, it also provides combinators and\nfunctions for working with these traits, forming as an asynchronous\ncounterpart to [`std::io`].\n\nTokio also includes APIs for performing various kinds of I/O and interacting\nwith the operating system asynchronously. These include:\n\n* [`tokio::net`], which contains non-blocking versions of [TCP], [UDP], and\n  [Unix Domain Sockets][UDS] (enabled by the \"net\" feature flag),\n* [`tokio::fs`], similar to [`std::fs`] but for performing filesystem I/O\n  asynchronously (enabled by the \"fs\" feature flag),\n* [`tokio::signal`], for asynchronously handling Unix and Windows OS signals\n  (enabled by the \"signal\" feature flag),\n* [`tokio::process`], for spawning and managing child processes (enabled by\n  the \"process\" feature flag).\n\n[`tokio::io`]: crate::io\n[`AsyncRead`]: crate::io::AsyncRead\n[`AsyncWrite`]: crate::io::AsyncWrite\n[`AsyncBufRead`]: crate::io::AsyncBufRead\n[`std::io`]: std::io\n[`tokio::net`]: crate::net\n[TCP]: crate::net::tcp\n[UDP]: crate::net::UdpSocket\n[UDS]: crate::net::unix\n[`tokio::fs`]: crate::fs\n[`std::fs`]: std::fs\n[`tokio::signal`]: crate::signal\n[`tokio::process`]: crate::process\n\n# Examples\n\nA simple TCP echo server:\n\n```no_run\nuse tokio::net::TcpListener;\nuse tokio::io::{AsyncReadExt, AsyncWriteExt};\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let listener = TcpListener::bind(\"127.0.0.1:8080\").await?;\n\n    loop {\n        let (mut socket, _) = listener.accept().await?;\n\n        tokio::spawn(async move {\n            let mut buf = [0; 1024];\n\n            // In a loop, read data from the socket and write the data back.\n            loop {\n                let n = match socket.read(&mut buf).await {\n                    // socket closed\n                    Ok(n) if n == 0 => return,\n                    Ok(n) => n,\n                    Err(e) => {\n                        eprintln!(\"failed to read from socket; err = {:?}\", e);\n                        return;\n                    }\n                };\n\n                // Write the data back\n                if let Err(e) = socket.write_all(&buf[0..n]).await {\n                    eprintln!(\"failed to write to socket; err = {:?}\", e);\n                    return;\n                }\n            }\n        });\n    }\n}\n```\n\n## Feature flags\n\nTokio uses a set of [feature flags] to reduce the amount of compiled code. It\nis possible to just enable certain features over others. By default, Tokio\ndoes not enable any features but allows one to enable a subset for their use\ncase. Below is a list of the available feature flags. You may also notice\nabove each function, struct and trait there is listed one or more feature flags\nthat are required for that item to be used. If you are new to Tokio it is\nrecommended that you use the `full` feature flag which will enable all public APIs.\nBeware though that this will pull in many extra dependencies that you may not\nneed.\n\n- `full`: Enables all features listed below except `test-util` and `tracing`.\n- `rt`: Enables `tokio::spawn`, the basic (current thread) scheduler,\n        and non-scheduler utilities.\n- `rt-multi-thread`: Enables the heavier, multi-threaded, work-stealing scheduler.\n- `io-util`: Enables the IO based `Ext` traits.\n- `io-std`: Enable `Stdout`, `Stdin` and `Stderr` types.\n- `net`: Enables `tokio::net` types such as `TcpStream`, `UnixStream` and\n         `UdpSocket`, as well as (on Unix-like systems) `AsyncFd` and (on\n         FreeBSD) `PollAio`.\n- `time`: Enables `tokio::time` types and allows the schedulers to enable\n          the built in timer.\n- `process`: Enables `tokio::process` types.\n- `macros`: Enables `#[tokio::main]` and `#[tokio::test]` macros.\n- `sync`: Enables all `tokio::sync` types.\n- `signal`: Enables all `tokio::signal` types.\n- `fs`: Enables `tokio::fs` types.\n- `test-util`: Enables testing based infrastructure for the Tokio runtime.\n\n_Note: `AsyncRead` and `AsyncWrite` traits do not require any features and are\nalways available._\n\n### Internal features\n\nThese features do not expose any new API, but influence internal\nimplementation aspects of Tokio, and can pull in additional\ndependencies.\n\n- `parking_lot`: As a potential optimization, use the _parking_lot_ crate's\nsynchronization primitives internally. MSRV may increase according to the\n_parking_lot_ release in use.\n\n### Unstable features\n\nSome feature flags are only available when specifying the `tokio_unstable` flag:\n\n- `tracing`: Enables tracing events.\n\nLikewise, some parts of the API are only available with the same flag:\n\n- [`task::JoinSet`]\n- [`task::Builder`]\n  \nThis flag enables **unstable** features. The public API of these features\nmay break in 1.x releases. To enable these features, the `--cfg\ntokio_unstable` argument must be passed to `rustc` when compiling. This\nserves to explicitly opt-in to features which may break semver conventions,\nsince Cargo [does not yet directly support such opt-ins][unstable features].\n\nYou can specify it in your project's `.cargo/config.toml` file:\n\n```toml\n[build]\nrustflags = [\"--cfg\", \"tokio_unstable\"]\n```\n\nAlternatively, you can specify it with an environment variable:\n\n```sh\n## Many *nix shells:\nexport RUSTFLAGS=\"--cfg tokio_unstable\"\ncargo build\n```\n\n```powershell\n## Windows PowerShell:\n$Env:RUSTFLAGS=\"--cfg tokio_unstable\"\ncargo build\n```\n\n[unstable features]: https://internals.rust-lang.org/t/feature-request-unstable-opt-in-non-transitive-crate-features/16193#why-not-a-crate-feature-2\n[feature flags]: https://doc.rust-lang.org/cargo/reference/manifest.html#the-features-section","links":{"crate::task":"0:771:1349","crate::io":"0:105:1813","crate::io::AsyncRead":"0:168:2215","crate::io::AsyncBufRead":"0:126:2213","crate::sync":"0:828:1331","std::fs":"1:3050:1812","std::io":"1:3276:1813","crate::io::AsyncWrite":"0:247:2219","crate::net":"0:353:1814"},"attrs":["#![allow(clippy :: cognitive_complexity, clippy :: large_enum_variant, clippy\n:: needless_doctest_main)]","#![warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\nunreachable_pub)]","#![deny(unused_must_use)]","#![doc(test(no_crate_inject,\nattr(deny(warnings, rust_2018_idioms), allow(dead_code, unused_variables))))]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:105:1813","0:353:1814","0:771:1349","0:774:1859","0:54:984"]}},"0:139:2305":{"id":"0:139:2305","crate_id":0,"name":"poll_fill_buf","span":{"filename":"src/io/async_buf_read.rs","begin":[100,4],"end":[102,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["_cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13852:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50050:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:250:2491":{"id":"0:250:2491","crate_id":0,"name":"poll_shutdown","span":{"filename":"src/io/async_write.rs","begin":[133,4],"end":[133,96]},"visibility":"default","docs":"Initiates or attempts to shut down this writer, returning success when\nthe I/O connection has completely shut down.\n\nThis method is intended to be used for asynchronous shutdown of I/O\nconnections. For example this is suitable for implementing shutdown of a\nTLS connection or calling `TcpStream::shutdown` on a proxied connection.\nProtocols sometimes need to flush out final pieces of data or otherwise\nperform a graceful shutdown handshake, reading/writing more data as\nappropriate. This method is the hook for such protocols to implement the\ngraceful shutdown logic.\n\nThis `shutdown` method is required by implementers of the\n`AsyncWrite` trait. Wrappers typically just want to proxy this call\nthrough to the wrapped type, and base types will typically implement\nshutdown logic here or just return `Ok(().into())`. Note that if you're\nwrapping an underlying `AsyncWrite` a call to `shutdown` implies that\ntransitively the entire stream has been shut down. After your wrapper's\nshutdown logic has been executed you should shut down the underlying\nstream.\n\nInvocation of a `shutdown` implies an invocation of `flush`. Once this\nmethod returns `Ready` it implies that a flush successfully happened\nbefore the shutdown happened. That is, callers don't need to call\n`flush` before calling `shutdown`. They can rely that by calling\n`shutdown` any pending buffered data will be written out.\n\n# Return value\n\nThis function returns a `Poll<io::Result<()>>` classified as such:\n\n* `Poll::Ready(Ok(()))` - indicates that the connection was\n  successfully shut down and is now safe to deallocate/drop/close\n  resources associated with it. This method means that the current task\n  will no longer receive any notifications due to this method and the\n  I/O object itself is likely no longer usable.\n\n* `Poll::Pending` - indicates that shutdown is initiated but could\n  not complete just yet. This may mean that more I/O needs to happen to\n  continue this shutdown operation. The current task is scheduled to\n  receive a notification when it's otherwise ready to continue the\n  shutdown operation. When woken up this method should be called again.\n\n* `Poll::Ready(Err(e))` - indicates a fatal error has happened with shutdown,\n  indicating that the shutdown operation did not complete successfully.\n  This typically means that the I/O object is no longer usable.\n\n# Errors\n\nThis function can return normal I/O errors through `Err`, described\nabove. Additionally this method may also render the underlying\n`Write::write` method no longer usable (e.g. will return errors in the\nfuture). It's recommended that once `shutdown` is called the\n`write` method is no longer called.\n\n# Panics\n\nThis function will panic if not called within the context of a future's\ntask.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13852:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50050:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47319:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"io::Error","id":"1:3955:123","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:3262:3260":{"id":"2:3262:3260","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3264:167","2:3265:539"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13283:60468":{"id":"2:13283:60468","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"prim@char":"1:15741:3140","str::rmatch_indices":"1:15747:3145","self::pattern":"2:12837:4752","`DoubleEndedIterator`":"2:8328:116"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49300:5104","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:4753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22799:16945":{"id":"2:22799:16945","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:22800:8390","2:22801:59904","2:22802:59905"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22792:4517","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13212:2584":{"id":"2:13212:2584","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15758:3154"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13324:60480":{"id":"2:13324:60480","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:15741:3140"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:49449:5113","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3321:3274":{"id":"2:3321:3274","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3323:167","2:3324:1204"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13253:32741":{"id":"2:13253:32741","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:15741:3140","self::pattern":"2:12837:4752"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:12629:5068","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:4753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13223:2366":{"id":"2:13223:2366","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:15747:3145"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:256":{"id":"0:256","crate_id":0,"name":null,"span":{"filename":"src/io/async_write.rs","begin":[217,0],"end":[219,1]},"visibility":{"restricted":{"parent":"0:226:2218","path":"::io::async_write"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2319","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncWrite","id":"0:247:2219","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3220:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["poll_write_vectored","is_write_vectored"],"trait":{"kind":"resolved_path","inner":{"name":"AsyncWrite","id":"0:247:2219","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:2320","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:788:2438","0:789:2504","0:790:2516","0:791:2445","0:792:2491"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3316:3272":{"id":"2:3316:3272","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3318:167","2:3319:340"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3345:3279":{"id":"2:3345:3279","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3347:1205"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3282:3269":{"id":"2:3282:3269","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3284:1327"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12284:5269":{"id":"2:12284:5269","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12285:2680","2:12286:59892"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13259:60463":{"id":"2:13259:60463","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"prim@char":"1:15741:3140","str::rsplit_terminator":"1:15747:3145","self::pattern":"2:12837:4752","str::split":"1:15747:3145","`DoubleEndedIterator`":"2:8328:116"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49200:5100","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:4753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:782:2359":{"id":"0:782:2359","crate_id":0,"name":"poll_read","span":{"filename":"src/io/async_read.rs","begin":[73,4],"end":[73,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13852:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:307:2221","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50050:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:260":{"id":"0:260","crate_id":0,"name":null,"span":{"filename":"src/io/async_write.rs","begin":[225,0],"end":[257,1]},"visibility":{"restricted":{"parent":"0:226:2218","path":"::io::async_write"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DerefMut","id":"2:3411:2277","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3220:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:3398:112","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncWrite","id":"0:247:2219","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["poll_write_vectored","is_write_vectored"],"trait":{"kind":"resolved_path","inner":{"name":"AsyncWrite","id":"0:247:2219","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"items":["0:262:2438","0:263:2504","0:264:2516","0:265:2445","0:266:2491"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:10126:115":{"id":"2:10126:115","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10127:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:347":{"id":"0:347","crate_id":0,"name":null,"span":{"filename":"src/io/mod.rs","begin":[205,36],"end":[205,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"std::io::Result","name":"Result","id":"1:3953:191","glob":false}},"2:3092:212":{"id":"2:3092:212","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3094:123","2:3095:1384"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3487:3282":{"id":"2:3487:3282","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3489:732"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2319","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3483:3281","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8482:153":{"id":"2:8482:153","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8483:2680","2:8484:900","2:8485:4003","2:8488:2685","2:8489:478","2:8491:4004","2:8494:4005","2:8495:4006","2:8496:4007","2:8497:4008","2:8499:4009","2:8501:4010","2:8502:4011","2:8504:819","2:8507:4012","2:8514:4013","2:8516:4014","2:8519:4015","2:8520:4016","2:8521:4017","2:8523:4018","2:8525:4019","2:8528:1279","2:8529:2555","2:8530:4020","2:8534:4021","2:8537:4022","2:8538:4023","2:8539:4024","2:8541:4025","2:8542:3588","2:8544:4026","2:8547:4027","2:8549:4028","2:8559:4029","2:8574:4030","2:8576:4031","2:8580:4032","2:8589:4033","2:8592:4034","2:8594:4035","2:8597:261","2:8604:278","2:8611:2506","2:8618:4036","2:8627:4037","2:8637:993","2:8644:4038","2:8651:2557","2:8652:2362","2:8653:4039","2:8665:4040","2:8672:4041","2:8684:4042","2:8691:4043","2:8692:4044","2:8697:4045","2:8700:4046","2:8703:4047","2:8704:4048","2:8706:4049","2:8708:398","2:8711:4050","2:8714:976","2:8717:4051","2:8720:585","2:8723:4052","2:8726:885","2:8728:804","2:8730:770","2:8732:693","2:8734:676","2:8736:4053","2:8737:4054","2:8745:4055"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4596:2519":{"id":"1:4596:2519","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4597:2521","1:4598:2520","1:4600:2516","1:4601:2522","1:4602:4078","1:4603:4079","1:4604:4080","1:4613:4025"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:221:2392":{"id":"0:221:2392","crate_id":0,"name":"start_seek","span":{"filename":"src/io/async_seek.rs","begin":[84,4],"end":[86,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["pos",{"kind":"resolved_path","inner":{"name":"SeekFrom","id":"1:10962:2223","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:786:2392":{"id":"0:786:2392","crate_id":0,"name":"start_seek","span":{"filename":"src/io/async_seek.rs","begin":[66,4],"end":[66,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["pos",{"kind":"resolved_path","inner":{"name":"SeekFrom","id":"1:10962:2223","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:296:2491":{"id":"0:296:2491","crate_id":0,"name":"poll_shutdown","span":{"filename":"src/io/async_write.rs","begin":[405,4],"end":[407,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13852:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50050:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:293:2504":{"id":"0:293:2504","crate_id":0,"name":"poll_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[389,4],"end":[395,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13852:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10950:2403","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50050:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:258":{"id":"0:258","crate_id":0,"name":null,"span":{"filename":"src/io/async_write.rs","begin":[221,0],"end":[223,1]},"visibility":{"restricted":{"parent":"0:226:2218","path":"::io::async_write"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2319","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncWrite","id":"0:247:2219","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3220:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["poll_write_vectored","is_write_vectored"],"trait":{"kind":"resolved_path","inner":{"name":"AsyncWrite","id":"0:247:2219","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"items":["0:793:2438","0:794:2504","0:795:2516","0:796:2445","0:797:2491"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13225:5131":{"id":"2:13225:5131","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15741:3140"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49120:5095","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3681:3248":{"id":"2:3681:3248","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2319","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"5:6070:61116":{"id":"5:6070:61116","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8341:201"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:4753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5821:5280":{"id":"5:5821:5280","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5823:167","5:5824:1981"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:288:2516":{"id":"0:288:2516","crate_id":0,"name":"is_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[367,4],"end":[369,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:316:2548":{"id":"0:316:2548","crate_id":0,"name":"capacity","span":{"filename":"src/io/read_buf.rs","begin":[56,4],"end":[58,5]},"visibility":"public","docs":"Returns the total capacity of the buffer.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:400":{"id":"0:400","crate_id":0,"name":null,"span":{"filename":"src/net/addr.rs","begin":[77,0],"end":[77,38]},"visibility":{"restricted":{"parent":"0:354:2625","path":"::net::addr"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"ToSocketAddrs","id":"0:380:2627","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"SocketAddrV6","id":"1:11047:2646","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"5:6089:56129":{"id":"5:6089:56129","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:15747:3145"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8293:3584":{"id":"2:8293:3584","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8295:4000","2:8297:4001","2:8298:4002"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3910:1398":{"id":"2:3910:1398","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:45728:4527","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:326:2363":{"id":"0:326:2363","crate_id":0,"name":"remaining","span":{"filename":"src/io/read_buf.rs","begin":[178,4],"end":[180,5]},"visibility":"public","docs":"Returns the number of bytes at the end of the slice that have not yet been filled.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:787:2400":{"id":"0:787:2400","crate_id":0,"name":"poll_complete","span":{"filename":"src/io/async_seek.rs","begin":[66,4],"end":[66,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13852:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50050:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:140:2315":{"id":"0:140:2315","crate_id":0,"name":"consume","span":{"filename":"src/io/async_buf_read.rs","begin":[104,4],"end":[106,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["amt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:286:2438":{"id":"0:286:2438","crate_id":0,"name":"poll_write","span":{"filename":"src/io/async_write.rs","begin":[351,4],"end":[357,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13852:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50050:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2779:4882":{"id":"2:2779:4882","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2781:55526"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2319","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2776:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2787:55526":{"id":"2:2787:55526","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9140:3571":{"id":"2:9140:3571","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13296:60474":{"id":"2:13296:60474","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3640:133":{"id":"2:3640:133","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3642:667"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3635:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:248:2438":{"id":"0:248:2438","crate_id":0,"name":"poll_write","span":{"filename":"src/io/async_write.rs","begin":[58,4],"end":[62,40]},"visibility":"default","docs":"Attempt to write bytes from `buf` into the object.\n\nOn success, returns `Poll::Ready(Ok(num_bytes_written))`. If successful,\nthen it must be guaranteed that `n <= buf.len()`. A return value of `0`\ntypically means that the underlying object is no longer able to accept\nbytes and will likely not be able to in the future as well, or that the\nbuffer provided is empty.\n\nIf the object is not ready for writing, the method returns\n`Poll::Pending` and arranges for the current task (via\n`cx.waker()`) to receive a notification when the object becomes\nwritable or is closed.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13852:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50050:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47319:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}},{"type":{"kind":"resolved_path","inner":{"name":"io::Error","id":"1:3955:123","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:13226:4781":{"id":"2:13226:4781","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15741:3140"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49126:5096","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:778:2305":{"id":"0:778:2305","crate_id":0,"name":"poll_fill_buf","span":{"filename":"src/io/async_buf_read.rs","begin":[78,4],"end":[78,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13852:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50050:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10136:175":{"id":"2:10136:175","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10137:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:327:2588":{"id":"0:327:2588","crate_id":0,"name":"clear","span":{"filename":"src/io/read_buf.rs","begin":[186,4],"end":[188,5]},"visibility":"public","docs":"Clears the buffer, resetting the filled region to empty.\n\nThe number of initialized bytes is not changed, and the contents of the buffer are not modified.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6861:4510":{"id":"1:6861:4510","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6862:56644"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10333:138":{"id":"2:10333:138","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10334:695","2:10336:4169"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:317:2540":{"id":"0:317:2540","crate_id":0,"name":"filled","span":{"filename":"src/io/read_buf.rs","begin":[62,4],"end":[67,5]},"visibility":"public","docs":"Returns a shared reference to the filled portion of the buffer.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6771:4514":{"id":"1:6771:4514","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6772:58603"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:173":{"id":"0:173","crate_id":0,"name":null,"span":{"filename":"src/io/async_read.rs","begin":[76,0],"end":[78,1]},"visibility":{"restricted":{"parent":"0:148:2214","path":"::io::async_read"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2319","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncRead","id":"0:168:2215","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3220:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsyncRead","id":"0:168:2215","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"items":["0:783:2359"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:315:2546":{"id":"0:315:2546","crate_id":0,"name":"uninit","span":{"filename":"src/io/read_buf.rs","begin":[46,4],"end":[52,5]},"visibility":"public","docs":"Creates a new `ReadBuf` from a fully uninitialized buffer.\n\nUse `assume_init` if part of the buffer is known to be already initialized.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninit","id":"2:32050:2524","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}},"param_names":[]}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:307:2221","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:780:2305":{"id":"0:780:2305","crate_id":0,"name":"poll_fill_buf","span":{"filename":"src/io/async_buf_read.rs","begin":[82,4],"end":[82,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13852:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50050:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:178":{"id":"0:178","crate_id":0,"name":null,"span":{"filename":"src/io/async_read.rs","begin":[94,0],"end":[106,1]},"visibility":{"restricted":{"parent":"0:148:2214","path":"::io::async_read"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsyncRead","id":"0:168:2215","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"items":["0:179:2359"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:281:2504":{"id":"0:281:2504","crate_id":0,"name":"poll_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[329,4],"end":[335,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13852:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10950:2403","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50050:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3635:209":{"id":"2:3635:209","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3636:167","2:3637:3287","2:3638:666","2:3639:353"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"2:3640:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3635:209","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:213":{"id":"0:213","crate_id":0,"name":null,"span":{"filename":"src/io/async_seek.rs","begin":[65,0],"end":[67,1]},"visibility":{"restricted":{"parent":"0:186:2216","path":"::io::async_seek"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2319","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncSeek","id":"0:207:2217","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3220:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsyncSeek","id":"0:207:2217","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"items":["0:786:2392","0:787:2400"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:332":{"id":"0:332","crate_id":0,"name":null,"span":{"filename":"src/io/read_buf.rs","begin":[269,0],"end":[277,1]},"visibility":{"restricted":{"parent":"0:300:2220","path":"::io::read_buf"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10119:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:307:2221","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"items":["0:333:640"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:12776:4630":{"id":"2:12776:4630","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12777:122","2:12778:58560"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:784:2392":{"id":"0:784:2392","crate_id":0,"name":"start_seek","span":{"filename":"src/io/async_seek.rs","begin":[62,4],"end":[62,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["pos",{"kind":"resolved_path","inner":{"name":"SeekFrom","id":"1:10962:2223","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8247:4918":{"id":"2:8247:4918","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8249:4049"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13265:56990":{"id":"2:13265:56990","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"str::rsplitn":"1:15747:3145","self::pattern":"2:12837:4752","prim@char":"1:15741:3140"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49254:5074","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:4753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:171":{"id":"0:171","crate_id":0,"name":null,"span":{"filename":"src/io/async_read.rs","begin":[72,0],"end":[74,1]},"visibility":{"restricted":{"parent":"0:148:2214","path":"::io::async_read"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2319","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncRead","id":"0:168:2215","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3220:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsyncRead","id":"0:168:2215","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:2320","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:782:2359"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:105:1813":{"id":"0:105:1813","crate_id":0,"name":"io","span":{"filename":"src/io/mod.rs","begin":[1,0],"end":[276,1]},"visibility":"public","docs":"Traits, helpers, and type definitions for asynchronous I/O functionality.\n\nThis module is the asynchronous version of `std::io`. Primarily, it\ndefines two traits, [`AsyncRead`] and [`AsyncWrite`], which are asynchronous\nversions of the [`Read`] and [`Write`] traits in the standard library.\n\n# AsyncRead and AsyncWrite\n\nLike the standard library's [`Read`] and [`Write`] traits, [`AsyncRead`] and\n[`AsyncWrite`] provide the most general interface for reading and writing\ninput and output. Unlike the standard library's traits, however, they are\n_asynchronous_ &mdash; meaning that reading from or writing to a `tokio::io`\ntype will _yield_ to the Tokio scheduler when IO is not ready, rather than\nblocking. This allows other tasks to run while waiting on IO.\n\nAnother difference is that `AsyncRead` and `AsyncWrite` only contain\ncore methods needed to provide asynchronous reading and writing\nfunctionality. Instead, utility methods are defined in the [`AsyncReadExt`]\nand [`AsyncWriteExt`] extension traits. These traits are automatically\nimplemented for all values that implement `AsyncRead` and `AsyncWrite`\nrespectively.\n\nEnd users will rarely interact directly with `AsyncRead` and\n`AsyncWrite`. Instead, they will use the async functions defined in the\nextension traits. Library authors are expected to implement `AsyncRead`\nand `AsyncWrite` in order to provide types that behave like byte streams.\n\nEven with these differences, Tokio's `AsyncRead` and `AsyncWrite` traits\ncan be used in almost exactly the same manner as the standard library's\n`Read` and `Write`. Most types in the standard library that implement `Read`\nand `Write` have asynchronous equivalents in `tokio` that implement\n`AsyncRead` and `AsyncWrite`, such as [`File`] and [`TcpStream`].\n\nFor example, the standard library documentation introduces `Read` by\n[demonstrating][std_example] reading some bytes from a [`std::fs::File`]. We\ncan do the same with [`tokio::fs::File`][`File`]:\n\n```no_run\nuse tokio::io::{self, AsyncReadExt};\nuse tokio::fs::File;\n\n#[tokio::main]\nasync fn main() -> io::Result<()> {\n    let mut f = File::open(\"foo.txt\").await?;\n    let mut buffer = [0; 10];\n\n    // read up to 10 bytes\n    let n = f.read(&mut buffer).await?;\n\n    println!(\"The bytes: {:?}\", &buffer[..n]);\n    Ok(())\n}\n```\n\n[`File`]: crate::fs::File\n[`TcpStream`]: crate::net::TcpStream\n[`std::fs::File`]: std::fs::File\n[std_example]: std::io#read-and-write\n\n## Buffered Readers and Writers\n\nByte-based interfaces are unwieldy and can be inefficient, as we'd need to be\nmaking near-constant calls to the operating system. To help with this,\n`std::io` comes with [support for _buffered_ readers and writers][stdbuf],\nand therefore, `tokio::io` does as well.\n\nTokio provides an async version of the [`std::io::BufRead`] trait,\n[`AsyncBufRead`]; and async [`BufReader`] and [`BufWriter`] structs, which\nwrap readers and writers. These wrappers use a buffer, reducing the number\nof calls and providing nicer methods for accessing exactly what you want.\n\nFor example, [`BufReader`] works with the [`AsyncBufRead`] trait to add\nextra methods to any async reader:\n\n```no_run\nuse tokio::io::{self, BufReader, AsyncBufReadExt};\nuse tokio::fs::File;\n\n#[tokio::main]\nasync fn main() -> io::Result<()> {\n    let f = File::open(\"foo.txt\").await?;\n    let mut reader = BufReader::new(f);\n    let mut buffer = String::new();\n\n    // read a line into buffer\n    reader.read_line(&mut buffer).await?;\n\n    println!(\"{}\", buffer);\n    Ok(())\n}\n```\n\n[`BufWriter`] doesn't add any new ways of writing; it just buffers every call\nto [`write`](crate::io::AsyncWriteExt::write). However, you **must** flush\n[`BufWriter`] to ensure that any buffered data is written.\n\n```no_run\nuse tokio::io::{self, BufWriter, AsyncWriteExt};\nuse tokio::fs::File;\n\n#[tokio::main]\nasync fn main() -> io::Result<()> {\n    let f = File::create(\"foo.txt\").await?;\n    {\n        let mut writer = BufWriter::new(f);\n\n        // Write a byte to the buffer.\n        writer.write(&[42u8]).await?;\n\n        // Flush the buffer before it goes out of scope.\n        writer.flush().await?;\n\n    } // Unless flushed or shut down, the contents of the buffer is discarded on drop.\n\n    Ok(())\n}\n```\n\n[stdbuf]: std::io#bufreader-and-bufwriter\n[`std::io::BufRead`]: std::io::BufRead\n[`AsyncBufRead`]: crate::io::AsyncBufRead\n[`BufReader`]: crate::io::BufReader\n[`BufWriter`]: crate::io::BufWriter\n\n## Implementing AsyncRead and AsyncWrite\n\nBecause they are traits, we can implement [`AsyncRead`] and [`AsyncWrite`] for\nour own types, as well. Note that these traits must only be implemented for\nnon-blocking I/O types that integrate with the futures type system. In\nother words, these types must never block the thread, and instead the\ncurrent task is notified when the I/O resource is ready.\n\n## Conversion to and from Sink/Stream\n\nIt is often convenient to encapsulate the reading and writing of\nbytes and instead work with a [`Sink`] or [`Stream`] of some data\ntype that is encoded as bytes and/or decoded from bytes. Tokio\nprovides some utility traits in the [tokio-util] crate that\nabstract the asynchronous buffering that is required and allows\nyou to write [`Encoder`] and [`Decoder`] functions working with a\nbuffer of bytes, and then use that [\"codec\"] to transform anything\nthat implements [`AsyncRead`] and [`AsyncWrite`] into a `Sink`/`Stream` of\nyour structured data.\n\n[tokio-util]: https://docs.rs/tokio-util/0.6/tokio_util/codec/index.html\n\n# Standard input and output\n\nTokio provides asynchronous APIs to standard [input], [output], and [error].\nThese APIs are very similar to the ones provided by `std`, but they also\nimplement [`AsyncRead`] and [`AsyncWrite`].\n\nNote that the standard input / output APIs  **must** be used from the\ncontext of the Tokio runtime, as they require Tokio-specific features to\nfunction. Calling these functions outside of a Tokio runtime will panic.\n\n[input]: fn@stdin\n[output]: fn@stdout\n[error]: fn@stderr\n\n# `std` re-exports\n\nAdditionally, [`Error`], [`ErrorKind`], [`Result`], and [`SeekFrom`] are\nre-exported from `std::io` for ease of use.\n\n[`AsyncRead`]: trait@AsyncRead\n[`AsyncWrite`]: trait@AsyncWrite\n[`AsyncReadExt`]: trait@AsyncReadExt\n[`AsyncWriteExt`]: trait@AsyncWriteExt\n[\"codec\"]: https://docs.rs/tokio-util/0.6/tokio_util/codec/index.html\n[`Encoder`]: https://docs.rs/tokio-util/0.6/tokio_util/codec/trait.Encoder.html\n[`Decoder`]: https://docs.rs/tokio-util/0.6/tokio_util/codec/trait.Decoder.html\n[`Error`]: struct@Error\n[`ErrorKind`]: enum@ErrorKind\n[`Result`]: type@Result\n[`Read`]: std::io::Read\n[`SeekFrom`]: enum@SeekFrom\n[`Sink`]: https://docs.rs/futures/0.3/futures/sink/trait.Sink.html\n[`Stream`]: https://docs.rs/futures/0.3/futures/stream/trait.Stream.html\n[`Write`]: std::io::Write","links":{"trait@AsyncWrite":"0:247:2219","std::io::BufRead":"1:4621:2325","enum@ErrorKind":"1:10826:2222","type@Result":"1:3953:191","std::fs::File":"1:3108:124","enum@SeekFrom":"1:10962:2223","struct@Error":"1:3955:123","std::io::Write":"1:4596:2519","crate::io::AsyncBufRead":"0:126:2213","std::io::Read":"1:4539:3306","std::io#bufreader-and-bufwriter":"1:3276:1813","trait@AsyncRead":"0:168:2215","std::io#read-and-write":"1:3276:1813"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:126:2213","0:168:2215","0:207:2217","0:247:2219","0:307:2221","0:341","0:344","0:347","0:350"]}},"2:3290:3266":{"id":"2:3290:3266","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3292:540"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13232:32869":{"id":"2:13232:32869","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:49442:5112","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:126:2213":{"id":"0:126:2213","crate_id":0,"name":"AsyncBufRead","span":{"filename":"src/io/async_buf_read.rs","begin":[23,0],"end":[63,1]},"visibility":"public","docs":"Reads bytes asynchronously.\n\nThis trait is analogous to [`std::io::BufRead`], but integrates with\nthe asynchronous task system. In particular, the [`poll_fill_buf`] method,\nunlike [`BufRead::fill_buf`], will automatically queue the current task for wakeup\nand return if data is not yet available, rather than blocking the calling\nthread.\n\nUtilities for working with `AsyncBufRead` values are provided by\n[`AsyncBufReadExt`].\n\n[`std::io::BufRead`]: std::io::BufRead\n[`poll_fill_buf`]: AsyncBufRead::poll_fill_buf\n[`BufRead::fill_buf`]: std::io::BufRead::fill_buf\n[`AsyncBufReadExt`]: crate::io::AsyncBufReadExt","links":{"AsyncBufRead::poll_fill_buf":"0:126:2213","std::io::BufRead":"1:4621:2325","std::io::BufRead::fill_buf":"1:4621:2325"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:127:2305","0:128:2315"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncRead","id":"0:168:2215","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":["0:130","0:132","0:134","0:138","0:141"]}},"2:13242:2506":{"id":"2:13242:2506","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"self::pattern":"2:12837:4752","prim@char":"1:15741:3140","`None`":"2:47192:162"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47192:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:4753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:264:2516":{"id":"0:264:2516","crate_id":0,"name":"is_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[246,4],"end":[248,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:144:2315":{"id":"0:144:2315","crate_id":0,"name":"consume","span":{"filename":"src/io/async_buf_read.rs","begin":[114,4],"end":[116,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["amt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3333:3276":{"id":"2:3333:3276","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3335:336"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:136:2305":{"id":"0:136:2305","crate_id":0,"name":"poll_fill_buf","span":{"filename":"src/io/async_buf_read.rs","begin":[90,4],"end":[92,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13852:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50050:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:329:2595":{"id":"0:329:2595","crate_id":0,"name":"set_filled","span":{"filename":"src/io/read_buf.rs","begin":[214,4],"end":[220,5]},"visibility":"public","docs":"Sets the size of the filled region of the buffer.\n\nThe number of initialized bytes is not changed.\n\nNote that this can be used to *shrink* the filled region of the buffer in addition to growing it (for\nexample, by a `AsyncRead` implementation that compresses data in-place).\n\n# Panics\n\nPanics if the filled region of the buffer would become larger than the initialized region.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:325:2579":{"id":"0:325:2579","crate_id":0,"name":"initialize_unfilled_to","span":{"filename":"src/io/read_buf.rs","begin":[155,4],"end":[174,5]},"visibility":"public","docs":"Returns a mutable reference to the first `n` bytes of the unfilled part of the buffer, ensuring it is\nfully initialized.\n\n# Panics\n\nPanics if `self.remaining()` is less than `n`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10378:2706":{"id":"2:10378:2706","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10379:142","2:10380:2711","2:10381:4168"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:269:2504":{"id":"0:269:2504","crate_id":0,"name":"poll_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[269,4],"end":[275,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13852:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10950:2403","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50050:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:132":{"id":"0:132","crate_id":0,"name":null,"span":{"filename":"src/io/async_buf_read.rs","begin":[81,0],"end":[83,1]},"visibility":{"restricted":{"parent":"0:106:2212","path":"::io::async_buf_read"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2319","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncBufRead","id":"0:126:2213","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3220:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsyncBufRead","id":"0:126:2213","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"items":["0:780:2305","0:781:2315"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:262:2438":{"id":"0:262:2438","crate_id":0,"name":"poll_write","span":{"filename":"src/io/async_write.rs","begin":[230,4],"end":[236,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13852:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50050:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:774:1859":{"id":"0:774:1859","crate_id":0,"name":"stream","span":{"filename":"src/lib.rs","begin":[495,0],"end":[495,17]},"visibility":"public","docs":"Due to the `Stream` trait's inclusion in `std` landing later than Tokio's 1.0\nrelease, most of the Tokio stream utilities have been moved into the [`tokio-stream`]\ncrate.\n\n# Why was `Stream` not included in Tokio 1.0?\n\nOriginally, we had planned to ship Tokio 1.0 with a stable `Stream` type\nbut unfortunately the [RFC] had not been merged in time for `Stream` to\nreach `std` on a stable compiler in time for the 1.0 release of Tokio. For\nthis reason, the team has decided to move all `Stream` based utilities to\nthe [`tokio-stream`] crate. While this is not ideal, once `Stream` has made\nit into the standard library and the MSRV period has passed, we will implement\nstream for our different types.\n\nWhile this may seem unfortunate, not all is lost as you can get much of the\n`Stream` support with `async/await` and `while let` loops. It is also possible\nto create a `impl Stream` from `async fn` using the [`async-stream`] crate.\n\n[`tokio-stream`]: https://docs.rs/tokio-stream\n[`async-stream`]: https://docs.rs/async-stream\n[RFC]: https://github.com/rust-lang/rfcs/pull/2996\n\n# Example\n\nConvert a [`sync::mpsc::Receiver`] to an `impl Stream`.\n\n```rust,no_run\nuse tokio::sync::mpsc;\n\nlet (tx, mut rx) = mpsc::channel::<usize>(16);\n\nlet stream = async_stream::stream! {\n    while let Some(item) = rx.recv().await {\n        yield item;\n    }\n};\n```","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[]}},"0:318:2552":{"id":"0:318:2552","crate_id":0,"name":"filled_mut","span":{"filename":"src/io/read_buf.rs","begin":[71,4],"end":[76,5]},"visibility":"public","docs":"Returns a mutable reference to the filled portion of the buffer.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6087:2255":{"id":"5:6087:2255","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8341:201"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13274:60466":{"id":"2:13274:60466","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47192:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:4753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:4753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12862:4756","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:222:2400":{"id":"0:222:2400","crate_id":0,"name":"poll_complete","span":{"filename":"src/io/async_seek.rs","begin":[87,4],"end":[89,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13852:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50050:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13233:56994":{"id":"2:13233:56994","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:12837:4752","prim@char":"1:15741:3140"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:4753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:128:2315":{"id":"0:128:2315","crate_id":0,"name":"consume","span":{"filename":"src/io/async_buf_read.rs","begin":[62,4],"end":[62,49]},"visibility":"default","docs":"Tells this buffer that `amt` bytes have been consumed from the buffer,\nso they should no longer be returned in calls to [`poll_read`].\n\nThis function is a lower-level call. It needs to be paired with the\n[`poll_fill_buf`] method to function properly. This function does\nnot perform any I/O, it simply informs this object that some amount of\nits buffer, returned from [`poll_fill_buf`], has been consumed and should\nno longer be returned. As such, this function may do odd things if\n[`poll_fill_buf`] isn't called before calling it.\n\nThe `amt` must be `<=` the number of bytes in the buffer returned by\n[`poll_fill_buf`].\n\n[`poll_read`]: AsyncRead::poll_read\n[`poll_fill_buf`]: AsyncBufRead::poll_fill_buf","links":{"AsyncRead::poll_read":"0:168:2215","AsyncBufRead::poll_fill_buf":"0:126:2213"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["amt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:2:3908-0:307:2221":{"id":"b:2:3908-0:307:2221","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2319","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3906:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:307:2221","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3910:1398"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:6345:4507":{"id":"1:6345:4507","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6346:4698","1:6347:4699","1:6348:7821","1:6349:58663","1:6351:58667","1:6353:58664","1:6354:58665","1:6356:58666"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10447:4517","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3247:3259":{"id":"2:3247:3259","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3249:167","2:3250:250"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3257:3261":{"id":"2:3257:3261","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3259:167","2:3260:870"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8763:4094":{"id":"2:8763:4094","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8482:153","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:14021:4126":{"id":"2:14021:4126","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14022:55948","2:14023:55949","2:14024:55950","2:14025:55951","2:14026:55952","2:14027:55953","2:14028:4025"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13206:60459":{"id":"2:13206:60459","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:15747:3145"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13291:60471":{"id":"2:13291:60471","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6393:208":{"id":"5:6393:208","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6394:4059"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3123-0:307:2221":{"id":"b:2:3123-0:307:2221","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3082:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3092:212","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:307:2221","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3126:123","2:3127:1384"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3014:4818":{"id":"2:3014:4818","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:3013:4517","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13327:60481":{"id":"2:13327:60481","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:15741:3140"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:49467:5114","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5697:4537":{"id":"1:5697:4537","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5698:56699"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10447:4517","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6085:61118":{"id":"5:6085:61118","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8341:201"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:168:2215":{"id":"0:168:2215","crate_id":0,"name":"AsyncRead","span":{"filename":"src/io/async_read.rs","begin":[43,0],"end":[58,1]},"visibility":"public","docs":"Reads bytes from a source.\n\nThis trait is analogous to the [`std::io::Read`] trait, but integrates with\nthe asynchronous task system. In particular, the [`poll_read`] method,\nunlike [`Read::read`], will automatically queue the current task for wakeup\nand return if data is not yet available, rather than blocking the calling\nthread.\n\nSpecifically, this means that the `poll_read` function will return one of\nthe following:\n\n* `Poll::Ready(Ok(()))` means that data was immediately read and placed into\n  the output buffer. The amount of data read can be determined by the\n  increase in the length of the slice returned by `ReadBuf::filled`. If the\n  difference is 0, EOF has been reached.\n\n* `Poll::Pending` means that no data was read into the buffer\n  provided. The I/O object is not currently readable but may become readable\n  in the future. Most importantly, **the current future's task is scheduled\n  to get unparked when the object is readable**. This means that like\n  `Future::poll` you'll receive a notification when the I/O object is\n  readable again.\n\n* `Poll::Ready(Err(e))` for other errors are standard I/O errors coming from the\n  underlying object.\n\nThis trait importantly means that the `read` method only works in the\ncontext of a future's task. The object may panic if used outside of a task.\n\nUtilities for working with `AsyncRead` values are provided by\n[`AsyncReadExt`].\n\n[`poll_read`]: AsyncRead::poll_read\n[`std::io::Read`]: std::io::Read\n[`Read::read`]: std::io::Read::read\n[`AsyncReadExt`]: crate::io::AsyncReadExt","links":{"std::io::Read::read":"1:4539:3306","std::io::Read":"1:4539:3306","AsyncRead::poll_read":"0:168:2215"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:169:2359"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:171","0:173","0:175","0:178","0:180"]}},"1:6465:4562":{"id":"1:6465:4562","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6466:56842","1:6467:56843"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3108-0:307:2221":{"id":"b:2:3108-0:307:2221","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3085:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3082:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:307:2221","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3111:3993"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13231:60462":{"id":"2:13231:60462","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49414:5109","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12856:4755":{"id":"2:12856:4755","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:12858:4774","2:12859:900","2:12860:59705","2:12861:59706"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:218:2400":{"id":"0:218:2400","crate_id":0,"name":"poll_complete","span":{"filename":"src/io/async_seek.rs","begin":[78,4],"end":[80,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13852:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50050:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:211":{"id":"0:211","crate_id":0,"name":null,"span":{"filename":"src/io/async_seek.rs","begin":[61,0],"end":[63,1]},"visibility":{"restricted":{"parent":"0:186:2216","path":"::io::async_seek"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2319","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncSeek","id":"0:207:2217","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3220:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsyncSeek","id":"0:207:2217","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:2320","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:784:2392","0:785:2400"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3718:3249":{"id":"2:3718:3249","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:268:2438":{"id":"0:268:2438","crate_id":0,"name":"poll_write","span":{"filename":"src/io/async_write.rs","begin":[260,4],"end":[267,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["_cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13852:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50050:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3554:3284":{"id":"2:3554:3284","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3556:59371","2:3557:59372","2:3558:56994"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2319","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3431:128":{"id":"2:3431:128","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3433:167","2:3434:362"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:265:2445":{"id":"0:265:2445","crate_id":0,"name":"poll_flush","span":{"filename":"src/io/async_write.rs","begin":[250,4],"end":[252,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13852:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50050:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8760:4093":{"id":"2:8760:4093","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8482:153","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:283:2445":{"id":"0:283:2445","crate_id":0,"name":"poll_flush","span":{"filename":"src/io/async_write.rs","begin":[341,4],"end":[343,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13852:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50050:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3191:205":{"id":"2:3191:205","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:331:2367":{"id":"0:331:2367","crate_id":0,"name":"put_slice","span":{"filename":"src/io/read_buf.rs","begin":[244,4],"end":[266,5]},"visibility":"public","docs":"Appends data to the buffer, advancing the written position and possibly also the initialized position.\n\n# Panics\n\nPanics if `self.remaining()` is less than `buf.len()`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5683:4535":{"id":"1:5683:4535","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5684:56110","1:5685:56111","1:5686:56112","1:5687:56113"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13211:288":{"id":"2:13211:288","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:15747:3145","`u8`":"1:15758:3154"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:1075:4565":{"id":"1:1075:4565","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1076:4057","1:1077:5276","1:1078:56128","1:1079:56129","1:1080:56130","1:1081:56131","1:1082:56132"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13306:56997":{"id":"2:13306:56997","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:12837:4752","prim@char":"1:15741:3140"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47192:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:4753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:4753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12862:4756","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2801:101":{"id":"2:2801:101","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2802:392","2:2803:394"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:7686:4653":{"id":"1:7686:4653","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7687:58746"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13277:3220":{"id":"2:13277:3220","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"prim@char":"1:15741:3140","str::matches":"1:15747:3145","self::pattern":"2:12837:4752","`DoubleEndedIterator`":"2:8328:116"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49354:5107","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:4753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:180":{"id":"0:180","crate_id":0,"name":null,"span":{"filename":"src/io/async_read.rs","begin":[108,0],"end":[131,1]},"visibility":{"restricted":{"parent":"0:148:2214","path":"::io::async_read"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"2:3076:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3220:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsyncRead","id":"0:168:2215","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"io::Cursor","id":"1:10746:2324","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:182:2359"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13323:56132":{"id":"2:13323:56132","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3179:196":{"id":"2:3179:196","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3184:2319":{"id":"2:3184:2319","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3311:3271":{"id":"2:3311:3271","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3313:167","2:3314:337"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13213:2720":{"id":"2:13213:2720","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47192:162"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47192:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10737:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10737:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6088:56128":{"id":"5:6088:56128","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:15747:3145"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8341:201","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10119:106":{"id":"2:10119:106","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10120:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13215:2318":{"id":"2:13215:2318","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47192:162"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47192:162","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10737:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10737:199","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5693:4536":{"id":"1:5693:4536","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5694:55534"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10128:3506":{"id":"2:10128:3506","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10129:640"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:271:2445":{"id":"0:271:2445","crate_id":0,"name":"poll_flush","span":{"filename":"src/io/async_write.rs","begin":[281,4],"end":[283,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["_cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13852:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50050:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2831:169":{"id":"2:2831:169","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2833:585","2:2834:885"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2319","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:321:2562":{"id":"0:321:2562","crate_id":0,"name":"initialized_mut","span":{"filename":"src/io/read_buf.rs","begin":[101,4],"end":[106,5]},"visibility":"public","docs":"Returns a mutable reference to the initialized portion of the buffer.\n\nThis includes the filled portion.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:175":{"id":"0:175","crate_id":0,"name":null,"span":{"filename":"src/io/async_read.rs","begin":[80,0],"end":[92,1]},"visibility":{"restricted":{"parent":"0:148:2214","path":"::io::async_read"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DerefMut","id":"2:3411:2277","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3220:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:3398:112","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncRead","id":"0:168:2215","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsyncRead","id":"0:168:2215","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"items":["0:177:2359"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:270:2516":{"id":"0:270:2516","crate_id":0,"name":"is_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[277,4],"end":[279,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13239:56996":{"id":"2:13239:56996","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:15741:3140","self::pattern":"2:12837:4752"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:4753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12847:4753","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12862:4756","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5627:4531":{"id":"1:5627:4531","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5628:55874","1:5629:55876","1:5630:55875","1:5631:55877"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:320:2541":{"id":"0:320:2541","crate_id":0,"name":"initialized","span":{"filename":"src/io/read_buf.rs","begin":[90,4],"end":[95,5]},"visibility":"public","docs":"Returns a shared reference to the initialized portion of the buffer.\n\nThis includes the filled portion.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:287:2504":{"id":"0:287:2504","crate_id":0,"name":"poll_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[359,4],"end":[365,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13852:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10950:2403","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50050:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3278:3265":{"id":"2:3278:3265","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3280:251"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13949:137":{"id":"2:13949:137","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13950:262","2:13951:501","2:13952:265","2:13953:1058"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8280:132":{"id":"2:8280:132","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8282:664"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3398:112":{"id":"2:3398:112","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3399:206","2:3400:524"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22650:4560":{"id":"2:22650:4560","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22640:4517","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:350":{"id":"0:350","crate_id":0,"name":null,"span":{"filename":"src/io/mod.rs","begin":[205,44],"end":[205,52]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"std::io::SeekFrom","name":"SeekFrom","id":"1:10962:2223","glob":false}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/io/async_buf_read.rs","begin":[77,0],"end":[79,1]},"visibility":{"restricted":{"parent":"0:106:2212","path":"::io::async_buf_read"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3184:2319","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncBufRead","id":"0:126:2213","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3220:1880","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsyncBufRead","id":"0:126:2213","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:421:2320","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:778:2305","0:779:2315"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2784:3209":{"id":"2:2784:3209","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3350:3280":{"id":"2:3350:3280","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3352:1208"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:209:2400":{"id":"0:209:2400","crate_id":0,"name":"poll_complete","span":{"filename":"src/io/async_seek.rs","begin":[46,4],"end":[46,90]},"visibility":"default","docs":"Waits for a seek operation to complete.\n\nIf the seek operation completed successfully,\nthis method returns the new position from the start of the stream.\nThat position can be used later with [`SeekFrom::Start`]. Repeatedly\ncalling this function without calling `start_seek` might return the\nsame result.\n\n# Errors\n\nSeeking to a negative offset is considered an error.","links":{"`SeekFrom::Start`":"1:10962:2223"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13852:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50050:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:272:2491":{"id":"0:272:2491","crate_id":0,"name":"poll_shutdown","span":{"filename":"src/io/async_write.rs","begin":[285,4],"end":[287,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["_cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13852:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50050:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:791:2445":{"id":"0:791:2445","crate_id":0,"name":"poll_flush","span":{"filename":"src/io/async_write.rs","begin":[218,4],"end":[218,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13852:2085","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50050:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:208:2392":{"id":"0:208:2392","crate_id":0,"name":"start_seek","span":{"filename":"src/io/async_seek.rs","begin":[33,4],"end":[33,78]},"visibility":"default","docs":"Attempts to seek to an offset, in bytes, in a stream.\n\nA seek beyond the end of a stream is allowed, but behavior is defined\nby the implementation.\n\nIf this function returns successfully, then the job has been submitted.\nTo find out when it completes, call `poll_complete`.\n\n# Errors\n\nThis function can return [`io::ErrorKind::Other`] in case there is\nanother seek in progress. To avoid this, it is advisable that any call\nto `start_seek` is preceded by a call to `poll_complete` to ensure all\npending seeks have completed.","links":{"`io::ErrorKind::Other`":"1:10826:2222"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47311:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["position",{"kind":"resolved_path","inner":{"name":"SeekFrom","id":"1:10962:2223","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3953:191","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:13221:4594":{"id":"2:13221:4594","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"str::slice_mut_unchecked":"1:15747:3145","`str`":"1:15747:3145","crate::ops::Index":"2:3483:3281"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"5:5520:2713":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:13780:7158":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"12:2032:4602":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"5:1080:6175":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:3718:3249":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:11850:4650":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:55833:221":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:9769:61497":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:49254:5074":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:11497:4626":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"6:6935:7887":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:2188:4604":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:45573:180":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:13456:4639":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:48951:5079":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:6345:4507":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:15760:3156":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:11387:2674":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:15742:3141":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:53096:7747":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:9521:8064":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"5:5299:186":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"14:250:7521":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:13377:7033":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:12040:6683":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:6085:9172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"5:5857:6184":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"2:11711:5090":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"6:4262:8778":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:45763:3368":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:46370:4891":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:46117:5254":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"6:5274:8977":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:3646:3287":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:8849:5965":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:14377:125":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:3652:3289":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:11470:4623":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:10353:5985":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:8276:2674":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"6:5563:9106":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:15754:3150":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:9140:3571":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:8691:158":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"5:1658:3422":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:45481:3290":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:9592:124":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"2:46704:7667":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:10279:5991":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:14351:4317":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"1:10575:7788":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:4395:8845":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:6413:5539":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:12467:6770":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:13978:7206":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:15753:3149":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"16:4762:7251":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:8861:3394":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"5:0:262":{"crate_id":5,"path":["alloc"],"kind":"module"},"16:7042:5925":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:4790:7252":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:563:8439":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:49599:4764":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"5:5399:3298":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:32214:58941":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"5:4199:3418":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:1717:8591":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"5:3732:156":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:14118:2727":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:49647:4765":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:14043:2242":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:11269:9146":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:9600:4683":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"2:49093:5182":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"16:4852:7254":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"0:54:984":{"crate_id":0,"path":["tokio","pin"],"kind":"macro"},"1:7700:1331":{"crate_id":1,"path":["std","sync"],"kind":"module"},"2:46183:5179":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"9:722:5391":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"2:48989:5083":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"5:7194:3418":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:55846:221":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:4281:8790":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:10704:125":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:46258:7661":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:4270:4675":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:53153:7752":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:11100:5973":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:11835:4649":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"16:3241:5885":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:11129:55552":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"6:6864:9265":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"18:866:6072":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:23587:5143":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:14943:4589":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"15:0:3127":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:2877:170":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:10746:2324":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:49300:5104":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"5:8317:5324":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"18:790:6065":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:4494:8884":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"16:5790:5624":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:12582:6787":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:7303:5781":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:4284:2662":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:9186:6013":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:51934:4966":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:1908:41785":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"6:6870:9266":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"6:6812:9262":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:3262:3260":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:294:6350":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:12069:3392":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"5:3354:4601":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:12795:6829":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:23751:5006":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:5191:8943":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:14782:4650":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:15723:55557":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:46300:4901":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:599:8459":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"6:4331:8813":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"0:105:1813":{"crate_id":0,"path":["tokio","io"],"kind":"module"},"2:24249:5147":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:46328:4887":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:50922:4976":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:11970:4578":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:5406:2636":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:1547:8489":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:13733:7140":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:8243:4919":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"16:5456:5603":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"5:8352:5284":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"16:2733:5593":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"5:8103:3418":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:11726:6620":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:7636:4819":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:2100:3341":{"crate_id":2,"path":["core","mem","swap"],"kind":"function"},"2:49467:5114":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"5:8119:60163":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:157:40484":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"5:8253:98":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:3188:202":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"6:4410:8849":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"12:937:3424":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:10502:6467":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:11001:6530":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:13172:6983":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:51027:4956":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:10134:3513":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"5:8335:9280":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"2:32114:58937":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"12:761:3415":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"16:4614:7246":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:10448:3492":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:4576:3298":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"16:6807:5768":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:49414:5109":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"3:0:413":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"16:7279:5926":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"5:912:5315":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:38505:4525":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:10333:138":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:11696:6616":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:22844:4940":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:9809:61501":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"12:556:139":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:10492:2727":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:49890:5121":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:2155:2661":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"6:6185:9230":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"5:6654:2713":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"5:3325:5310":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:4383:2242":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"5:1184:60130":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:10052:6455":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"12:2013:3418":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:12074:3520":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:10309:6225":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"16:3604:6365":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:7119:5641":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"12:2045:4604":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"2:12856:4755":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:13205:6994":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:5114:3371":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:9574:5972":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:4704:7249":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"18:644:6078":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"12:877:3419":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"2:52060:4958":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:0:471":{"crate_id":2,"path":["core"],"kind":"module"},"2:55885:221":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:5469:9069":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:2433:7776":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:9649:6442":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:6176:9227":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:10584:3310":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"12:925:3420":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:23822:5002":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:900:3491":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:49449:5113":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:4419:8855":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:12837:4752":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:10378:2706":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:15746:3144":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:14958:4590":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:12114:3522":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:9648:83":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:51361:4957":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:51133:4985":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:11077:2643":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"5:1446:3430":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:5736:5619":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:1622:8525":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:57142:7766":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"17:10623:6479":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:10079:130":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"6:4300:8798":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:12155:6705":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:6771:4514":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:9971:61499":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:10041:6454":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:5414:9054":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:15707:58599":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:2456:7777":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:52880:4979":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:51004:4952":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:46417:4894":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:49711:4767":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:48240:104":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"1:14834:3520":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"6:4215:8775":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:48960:5080":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:10541:2705":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"2:53127:7750":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:12284:5269":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:605:8462":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:45642:183":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:12234:6715":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:10738:3318":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:53283:7758":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:15136:2631":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:11030:123":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:1438:2662":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:681:6355":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:4317:8807":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"9:603:45493":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:13067:40009":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"12:463:61486":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"5:3359:5311":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"16:5505:5608":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:5561:5611":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"6:4272:8785":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:10887:6518":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"9:963:5455":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:24351:5149":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:2723:4523":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:5507:4990":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"6:5969:9130":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:3488:5889":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:15758:3154":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"6:1700:8584":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"18:169:53639":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"5:8271:5322":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"6:4203:8774":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:55820:221":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:49318:5105":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"6:584:8451":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"13:232:8388":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"12:181:5528":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:12776:4630":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"5:8303:5323":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:0:776":{"crate_id":6,"path":["libc"],"kind":"module"},"1:13583:4656":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:10458:6396":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"6:5269:8976":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:48486:3439":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"5:1923:3419":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"2:47707:87":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"9:900:8395":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:37324:164":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:46318:4886":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"12:160:5524":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:4127:8759":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:13810:7164":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:894:3490":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:6252:5755":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:52484:4987":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:4:958":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:8280:132":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:15755:3151":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:10477:6037":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:13641:173":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"18:136:53637":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:1041:2275":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:3681:3248":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:13488:7061":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"12:2331:3408":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"6:161:40485":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:9268:984":{"crate_id":2,"path":["core","pin"],"kind":"module"},"17:10224:6463":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:4646:4847":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:15246:5551":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:51330:4953":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"16:4734:7250":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:52126:4943":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:3235:4323":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"5:1827:6175":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:1572:8492":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:22640:4517":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:10117:6049":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:3425:126":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:13565:146":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"12:774:2662":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:5697:4537":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:45996:5047":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:4005:8701":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"18:837:4755":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:13402:7038":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:50868:4984":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:4936:3360":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:46347:4889":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:10814:6008":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"6:1602:8511":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:47302:4223":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:4325:8811":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:4614:2402":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"16:7342:5739":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:12182:6709":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:3278:3265":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:5007:3367":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"14:56:6568":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:11020:2644":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"17:10571:6475":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:13574:7086":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:13852:2085":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:11458:6567":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"6:5459:9067":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:5693:4536":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:12671:6807":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:12555:5102":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:14411:55732":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:23931:9392":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:10407:5979":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:3247:3259":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"16:3714:7233":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:3554:3284":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:8929:47344":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"5:6746:3298":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:9551:5966":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"16:7928:4864":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:48733:5274":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:2692:560":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:12610:6793":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:13564:7083":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:7808:4922":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"16:7786:5717":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:4634:4846":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:12913:4759":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:7420:5727":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"12:1118:3429":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:994:2723":{"crate_id":1,"path":["std","thread","park_timeout"],"kind":"function"},"1:1488:3420":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"16:5360:5598":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:6881:9270":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:7185:5774":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:9476:6348":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:45728:4527":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:12598:6791":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"5:3823:6175":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:3743:6005":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:13180:6984":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:46677:3386":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:13318:7016":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:46715:7615":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:13554:7080":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"19:0:973":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:5595:5613":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:22443:59090":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"16:7073:5770":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"5:2761:5357":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:12783:6822":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:53244:7757":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"16:6464:5719":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"5:5871:6187":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"17:10435:6465":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"12:976:3427":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:3013:4517":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"5:781:105":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"16:7295:5724":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:49442:5112":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"16:5753:5622":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:11678:6607":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:11665:6606":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:1527:8481":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:11291:4512":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"15:269:5547":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:3113:4319":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:5314:5249":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:24555:5153":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:3185:3374":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:51283:4965":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"5:8341:201":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"16:7195:5775":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"5:5077:640":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"6:1563:7879":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:4995:7258":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:9600:61500":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:10816:4357":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"12:1100:3428":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"16:3939:7236":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"18:744:61508":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:12247:6717":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"5:4583:6178":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"2:8328:116":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"16:7823:5718":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"5:3866:2324":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:3337:3277":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:15765:3161":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:3184:2319":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:5062:3369":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:5672:5615":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"12:747:2661":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:46695:2267":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:13788:7159":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:11944:2662":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:12221:6713":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:22846:4939":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:9225:4557":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"12:892:5512":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"2:9801:5054":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:2855:165":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:46071:5252":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"2:11159:5072":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"5:5772:6175":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:49874:5127":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:6208:5753":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:9139:3572":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:12725:6813":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"6:1540:8487":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:5838:4726":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:4227:8776":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:7628:4648":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:22420:59088":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"6:616:8467":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"5:8223:3408":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"9:1020:5457":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:4101:8747":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:3079:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:2801:101":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"17:13062:6943":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:11653:6605":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:4439:8864":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:49725:4768":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:11482:6568":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:7686:4653":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"16:2991:5890":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:50095:3251":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:11947:6665":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:2166:3419":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"2:49916:3525":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"5:909:93":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:22422:59091":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:13720:4646":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:49272:5075":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"18:660:6079":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"18:620:6325":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:8362:188":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"12:784:3421":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:3108:124":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"6:4112:8752":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:12168:6487":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:11231:5969":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"5:69:4128":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"16:2773:5902":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"0:771:1349":{"crate_id":0,"path":["tokio","task"],"kind":"module"},"16:4922:7256":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:15491:6234":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:11480:2661":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:3422:2845":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:23845:7629":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"5:3284:92":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"5:3032:7995":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"18:766:6338":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:8044:60014":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"16:6518:5761":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:10611:6478":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:5868:4729":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:3465:3243":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"5:1669:180":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:12073:6693":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:23658:5144":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:47970:3513":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:2159:2662":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"18:712:4065":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:49041:5086":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:1617:8523":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:49354:5107":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"15:248:5543":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:10962:2223":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:13758:4648":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:7815:3476":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"17:10304:5982":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:2171:4601":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:5521:1861":{"crate_id":1,"path":["std","os"],"kind":"module"},"17:10317:5981":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:47749:82":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:3640:133":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"16:7250:5780":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"13:120:45663":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:4658:99":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:21:652":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:23885:39719":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:9296:6344":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:12480:6772":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:3398:112":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:3207:3986":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"6:5386:9040":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:51409:4942":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:13272:7010":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:49050:5087":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"6:519:8411":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:11519:6583":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"5:6634:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:10106:6048":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:10126:115":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"5:6936:3075":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:5197:8944":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:23953:5168":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:15741:3140":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:14326:4518":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:48222:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"5:375:4279":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:11410:4621":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"20:0:1881":{"crate_id":20,"path":["pin_project_lite"],"kind":"module"},"2:45749:4864":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"1:7683:4652":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:8293:3584":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:48494:7672":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:9961:6448":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:1760:8606":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:2108:559":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"16:7453:5707":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"16:4641:7247":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:4689:4273":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:3311:3271":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"5:4627:6180":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:3549:7232":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:11118:47352":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:49136:3311":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"16:7236:5779":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"5:3935:3419":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"17:10266:5948":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:47311:174":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"6:4387:8841":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"12:1200:5522":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:49862:5122":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:46150:5052":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:51613:7699":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:12208:6712":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:11232:4691":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:10520:11884":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:8763:4094":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:632:8477":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:11895:7950":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"6:4293:8797":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"7:0:1449":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:5472:5606":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:11950:4577":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:10678:4315":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:10068:191":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"2:47539:85":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:10028:6453":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:13465:7056":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:11865:4651":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:10737:199":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:38568:3987":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:49736:4769":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:6014:5749":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:2204:4796":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"16:3338:5633":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"0:126:2213":{"crate_id":0,"path":["tokio","io","AsyncBufRead"],"kind":"trait"},"1:13384:8002":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:11588:6595":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"5:1461:3429":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:15747:3145":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:51384:4960":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:10535:11886":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:8268:3477":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"2:50127:4526":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:49746:4770":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"16:6744:5915":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:24453:5151":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:14040:2246":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"12:469:61487":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"16:6591:5764":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:12262:6720":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:12632:6804":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:7915:3477":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"1:10469:2725":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"16:7406:5710":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:24419:5150":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:46040:5257":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"16:4671:7248":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"5:1475:3431":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:7573:4646":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"16:5996:5748":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:4478:8879":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:52738:4975":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:4023:8710":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"18:0:3130":{"crate_id":18,"path":["memchr"],"kind":"module"},"6:1533:8484":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:23837:7628":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:8951:2751":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:46094:5253":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"1:7525:4643":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:8081:6206":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"5:1637:3420":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"5:7593:4133":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"5:7822:6194":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:3966:8681":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"16:6718:5913":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:8902:47343":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:12547:124":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:1472:3418":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:15751:3147":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:2512:5980":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:55727:4929":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:5281:2634":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:4621:2325":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:51851:4981":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:12054:2715":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:1018:3477":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:49530:4754":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:5649:4534":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:299:6351":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:7971:123":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:45688:3283":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"5:7093:6189":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"17:11970:6672":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:4596:2519":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:48523:2674":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:8177:3477":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"2:12308:5232":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:3116:3307":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:10558:12893":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:3411:2277":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:23966:5167":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:27770:4925":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:569:8442":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:3563:3314":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"16:7333:5725":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:12507:6775":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:47389:189":{"crate_id":2,"path":["core","sync","atomic","Ordering","Relaxed"],"kind":"foreign_type"},"1:7559:4645":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:4307:3321":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:57121:7765":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"17:9729:61502":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:32050:2524":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"5:8364:5285":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:3251:4328":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:820:6224":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"16:3195:5883":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"16:6768:5917":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"6:4501:8887":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:5185:8940":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:11048:5069":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:3085:131":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:13924:7196":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:13348:7026":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"12:112:61485":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:2543:6036":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"6:1665:8559":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:12095:6694":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:989:974":{"crate_id":1,"path":["std","thread","panicking"],"kind":"function"},"16:2754:5635":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:12039:2718":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:4060:8725":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:14977:4597":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:11993:6677":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:46670:7614":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:22441:59086":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:8534:3385":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:4385:3320":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:13590:7089":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:13429:7042":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:5228:8955":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:1619:3428":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"12:354:7990":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:3261:4333":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:49568:4760":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:53168:7753":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:4364:8833":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:5533:757":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:13831:4647":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:11744:5091":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:51234:4980":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:10140:5993":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:9516:6221":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"16:6152:5706":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:53142:7751":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:4350:7239":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"16:7571:5703":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:15766:3162":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:8020:3477":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"5:4612:220":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:3306:3270":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:11026:6532":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"6:3905:8640":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:13609:7094":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:1132:4528":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:49126:5096":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:46338:4888":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:7403:115":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"6:5400:9051":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:50050:176":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:3440:2261":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:13746:7146":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:12712:6812":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:9440:6347":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:4512:3298":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:14872:4657":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:50718:7685":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:3076:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:13532:7075":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"16:4535:7245":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:3908:4360":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:6614:9258":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"7:38:45315":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"5:8170:2662":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:11045:47351":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:9719:6443":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:12659:6806":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:14708:6233":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:2565:123":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"17:11572:6590":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"16:7514:5726":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"9:927:45418":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"5:5817:5278":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:7182:7780":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:10001:47397":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:6051:9165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:50787:4971":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:10200:6461":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:13547:7079":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"5:1224:5353":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:3257:3261":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"18:152:53638":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:24589:5154":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"6:4306:8801":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:47234:2661":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:55807:221":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:49404:2266":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:47665:80":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"19:117:8340":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"2:46427:4895":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:49674:4766":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"16:6964:3089":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:49882:5126":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:6767:4511":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:12456:6769":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:8760:4093":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:52817:4959":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"16:4386:7240":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:6636:5723":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:46050:5258":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:15712:11888":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:4459:8871":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:2190:4792":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:13356:7029":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:10459:55558":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"17:10656:6482":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:10160:6459":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:5071:3370":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:8060:3359":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:6861:4510":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"18:885:6073":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:1708:8585":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:48969:5081":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:3091:5939":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:10331:5993":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:13913:187":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"6:88:40418":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"6:4358:8830":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:14346:9398":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:14971:4596":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:11172:3357":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:48213:129":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"2:53107:7748":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"9:469:45424":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"9:1056:5450":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:3191:205":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:510:6352":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:2397:7775":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"16:7467:5708":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:11001:3311":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"16:7761:5783":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:48274:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"2:6773:4906":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:11983:4579":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"6:4241:8777":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:51085:7689":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"6:578:8448":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:11186:6539":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"18:811:6067":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"5:4226:6175":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:10941:2268":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"1:15157:2636":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:13331:7021":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"16:5815:5625":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"0:307:2221":{"crate_id":0,"path":["tokio","io","ReadBuf"],"kind":"struct"},"2:53221:7756":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:10343:142":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:11336:4611":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:3327:3275":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:13386:7034":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:9088:47348":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:6357:5757":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:5998:9142":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:6839:4515":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"6:525:8414":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:10447:4517":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:8247:4918":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:55872:221":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:12518:5099":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:51589:7698":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"16:6949:5921":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:2836:120":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"16:3287:5887":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"16:5407:5600":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"5:8111:5318":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:7158:5772":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:5273:5639":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:46448:4897":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:48891:5073":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:11242:5077":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:12287:6722":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:46499:4821":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:10543:6469":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:5555:4546":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:3800:7235":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"6:1690:8578":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:6367:4550":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:11009:5068":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"16:5330:6435":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:12059:3387":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:48979:5082":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"6:4371:8835":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:49108:4936":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"5:7615:4134":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"5:7239:6175":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"5:1591:3415":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:46686:7665":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:48541:7678":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"6:4425:8856":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:10912:6520":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:47949:3505":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:547:5620":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:1236:6356":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"16:4477:7243":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:11147:6537":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:6605:9159":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:10061:6456":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:11915:6655":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:11750:6622":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"5:3028:7994":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"14:231:5287":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:49372:5108":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:542:5642":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:9648:6222":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"1:8948:3390":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:52627:4955":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:11628:6600":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:10119:106":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:7550:4009":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:10844:5993":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:23489:4517":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"5:8133:2662":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:15756:3152":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:3664:4850":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"16:6366:5540":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"16:5522:5609":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:3990:8695":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:1152:7769":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:46408:4907":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:3957:8676":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:14401:2403":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:3197:3373":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:3617:3319":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:10377:5983":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:24959:5037":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:12594:5106":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"16:5707:5616":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"6:5987:9137":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:47250:2662":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:23901:39728":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"6:1744:8601":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:15763:3159":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:8796:3386":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:10934:2265":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"6:5548:9095":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:13799:7163":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:3274:3262":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"5:8149:5291":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:2177:4602":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:48207:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"2:23863:39727":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"6:591:8454":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:12118:6700":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:3014:4818":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:12275:6721":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"16:6166:5751":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:5975:5747":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:7013:3561":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:23729:7621":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"17:12327:6729":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:9332:6034":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:6554:5762":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"6:5428:9059":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:3945:8673":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"11:46:8394":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"2:1456:2701":{"crate_id":2,"path":["core","hint","spin_loop"],"kind":"function"},"2:46110:5113":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"12:2018:3419":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"17:9368:6345":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:6999:5769":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:3906:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:53116:7749":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"18:667:6080":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:49866:5124":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:22650:4560":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:12051:6684":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:2776:94":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"6:4341:8819":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:15757:3153":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"6:3862:8612":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"5:1619:3416":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:1642:3430":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"5:1204:5352":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:10122:106":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"2:3187:203":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"12:2039:4603":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:11226:4730":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:46388:4905":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:9653:6223":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"2:48189:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:984:1829":{"crate_id":1,"path":["std","thread","spawn"],"kind":"function"},"18:704:6326":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:47581:79":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:49200:5100":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:12385:6755":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"5:1602:2662":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:11318:3562":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:10950:6526":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:13506:7065":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"18:636:6326":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:15076:4554":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:10673:4314":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:11714:6617":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:11434:6553":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:4511:8892":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:22799:16945":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:47242:3415":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"9:776:5437":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"1:2162:3418":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"14:0:3126":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"6:4183:8772":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:8727:7782":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:1633:3429":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"5:2246:5355":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:22375:4065":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"9:686:5388":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"3:300:191":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:4073:8731":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:10211:6462":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:3294:3268":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:11074:2642":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"17:12373:6753":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"9:809:2674":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:5167:8927":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:13949:137":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:12442:6767":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"6:3868:8613":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"16:6491:5760":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"18:774:6326":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:10248:6355":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"5:3313:2661":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:10730:4669":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"6:5945:9113":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:3341:3278":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:11816:4647":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"5:6457:3418":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:46436:4896":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:5860:4728":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:12521:6778":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:14364:7829":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"18:820:6068":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:10081:5991":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"16:6072:5591":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:49028:5085":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:24317:3481":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:45619:184":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:4008:6359":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"13:0:3119":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:13054:6941":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"12:853:3417":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"17:13520:7072":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:2484:47435":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:13511:673":{"crate_id":2,"path":["core","future"],"kind":"module"},"6:1723:8594":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:49433:5111":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"16:7146:5771":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:9245:5949":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:6593:4534":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:6899:9273":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:50835:4951":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:13477:7057":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:11888:56183":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"17:13884:7185":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"5:8079:4127":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"16:7378:5711":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"18:782:6326":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:11277:6542":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"16:4304:7238":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:12010:6680":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:11254:5967":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"5:4290:3415":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:7870:5713":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:15739:3138":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:8482:153":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:15759:3155":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:12685:6808":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"6:4517:8894":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"16:3018:5880":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"16:3145:5891":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:3972:4856":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"2:3245:942":{"crate_id":2,"path":["core","ops"],"kind":"module"},"2:9738:620":{"crate_id":2,"path":["core","sync","atomic","fence"],"kind":"function"},"6:5255:8975":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"1:13904:6230":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:1501:3423":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:46479:2270":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"16:6691:5766":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:11200:5074":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:11014:2266":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:10334:6227":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"16:5421:5601":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:22703:4939":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"12:1180:5521":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:23768:9389":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:7987:2265":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:4871:2820":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"16:5314:6434":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"6:531:8417":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"4:0:3120":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:49168:5071":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:14814:9354":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"14:216:45697":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:52013:4954":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:11767:6630":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"16:6269:5756":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:6698:4507":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:10584:6016":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:47363:2661":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:10826:2222":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:3220:1880":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:13550:134":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:46165:97":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:10579:2660":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:49894:117":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"6:6239:9252":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:12771:6545":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:47259:3089":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:4480:2267":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:3345:3279":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"12:949:3425":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:1729:4692":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"12:429:5525":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:5295:45768":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:13600:59370":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:5221:8953":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:46025:5050":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:10941:3415":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:47225:2680":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:13306:7013":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:49458:4568":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:11847:6653":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"5:3878:5346":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"0:774:1859":{"crate_id":0,"path":["tokio","stream"],"kind":"module"},"2:3179:196":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:52943:4944":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"5:4499:5335":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"2:8767:4921":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:1446:3416":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:3529:2263":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:23784:7623":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"16:6780:5767":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:10138:3510":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:31875:5203":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"12:396:5526":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:12217:7777":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"12:2005:2661":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"16:7549:5715":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:9005:47345":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:10236:5954":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"5:2537:5358":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:992:1816":{"crate_id":1,"path":["std","thread","park"],"kind":"function"},"9:27:5439":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"6:5292:8989":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"5:5821:5280":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:9141:3570":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:10468:6038":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"5:4427:2661":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:1530:3427":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:8626:3393":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:9210:47350":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:13098:6972":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:6331:4890":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:46468:4902":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:9839:5993":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:2866:5877":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:11779:6633":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:12307:6728":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:11822:167":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:14795:3521":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"16:7738:5782":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"17:11199:6541":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:6893:9272":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"16:7264:5722":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"1:987:2722":{"crate_id":1,"path":["std","thread","current"],"kind":"function"},"6:6100:9177":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"18:610:6076":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"16:3064:5938":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:4193:8773":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:3539:6204":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"6:3892:8630":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:13942:7202":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:1524:3426":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:11007:2269":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"16:6021:5875":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"5:8176:2662":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"18:754:61507":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:6636:9259":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:10728:4517":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:46356:7662":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:13192:6989":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"6:610:8464":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:51694:4986":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:14000:7212":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"15:230:5542":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:12015:4581":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"9:157:5407":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"1:13736:8003":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:13582:7087":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:3268:3263":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"16:0:3128":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:537:8419":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:52277:4967":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:13760:7152":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:11214:2644":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:10529:6468":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:50941:7687":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"12:930:3423":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"5:772:207":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:7024:5924":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:6569:5910":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:11999:4580":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:3881:8622":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:14769:4649":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:5312:9005":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:3955:123":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:3252:3264":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:4173:2221":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"5:6239:4133":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"6:4145:8770":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:1428:3415":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:46170:5178":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:13898:7187":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:6404:4903":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:45981:4568":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"6:3972:8683":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:3282:3269":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:11499:6573":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:13240:6998":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"8:0:3121":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:3088:213":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:9933:6447":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"12:1159:5520":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:4347:8822":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:9943:61505":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:13453:7050":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:9886:6446":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:15744:3142":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"0:207:2217":{"crate_id":0,"path":["tokio","io","AsyncSeek"],"kind":"trait"},"16:7226:5778":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:48533:7677":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"5:7355:2662":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:13637:7102":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:11047:2646":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"6:5436:9061":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:7820:7997":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"1:4305:2244":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"6:4120:8757":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"9:1075:5458":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:4255:4696":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:10071:6053":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"16:7843:5784":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"14:189:7514":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:10149:6446":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:53206:7755":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:6068:9167":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"14:47:7514":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:45987:6267":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"18:694:6081":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:11328:6545":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:11738:6621":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:3110:4316":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"5:8141:180":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"18:801:6066":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:5990:2638":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:23809:5001":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:5384:5599":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:13986:7209":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:6155:9214":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:543:8422":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"6:6644:9261":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:46124:5255":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:50899:4972":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:10673:47535":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:2765:4524":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"5:2314:5354":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:9349:58633":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:11981:6675":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:13041:6934":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:10128:6050":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:10516:6040":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:8954:6014":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:5522:9080":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:10599:6477":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:10938:6525":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"5:2294:5369":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:10128:3506":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"16:6136:5745":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:4013:8704":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:6887:9271":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:11177:3351":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:47623:86":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:5241:8964":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:3951:8674":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:1075:4565":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:10988:6529":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:11406:6549":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"16:5231:7260":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"6:1554:7863":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:22644:4558":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:10635:6480":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"9:0:3122":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:15211:7833":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"11:0:3124":{"crate_id":11,"path":["adler"],"kind":"module"},"18:729:61509":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:46278:4900":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:14:2521":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:11109:3100":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"2:49553:4757":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"17:11932:6661":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:6110:5744":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:47388:164":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:50042:3242":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:607:6354":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:13497:7064":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:7392:5712":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:6731:5914":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"1:1482:3419":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"1:11427:4622":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"6:1676:8567":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"6:4033:8713":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"16:3522:6361":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:13446:7049":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:8369:4575":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:47413:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:3286:3267":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:13685:7139":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:1651:3431":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:51457:4946":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:9261:4753":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:6695:4509":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"5:2202:5313":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:14864:7830":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:11240:3358":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:5159:8925":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:12645:6805":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:624:8472":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:11877:55737":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"2:10339:138":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"17:9759:6444":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:9743:6224":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"16:4417:7241":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:11640:6603":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:4448:7242":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"12:866:3418":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"5:8286:5179":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"14:11:7514":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:46009:5048":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:50764:4983":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"5:3023:60454":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"5:1647:3421":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:4470:8877":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:12578:5103":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:5876:4731":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:32062:58940":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"1:7863:6206":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"1:7511:4642":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:6465:4562":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:47319:191":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:49759:7680":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"16:7894:5742":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:10179:6460":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:1518:3425":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:3118:5892":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:1311:6054":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"5:1549:91":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:10069:2519":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"16:3506:5888":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:11844:6202":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"1:4539:3306":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:4346:3322":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:49424:5110":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:2831:169":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:1302:139":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:10950:2403":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:8376:4576":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:15752:3148":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:13842:7179":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:9528:3311":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:4133:8761":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:5130:8901":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:46063:5114":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:13282:7011":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:3428:127":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"5:4683:6180":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:2314:5984":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:51773:4974":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"12:2025:4601":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:10864:6517":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"7:85:45322":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"5:7426:6175":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:47791:89":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:23493:4933":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:6124:9188":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"18:829:6069":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:48310:4152":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"6:4401:8846":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:46379:4892":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:6101:5702":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"16:7205:5776":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"16:6238:5709":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:46399:4893":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:1596:8509":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:1016:191":{"crate_id":1,"path":["std","thread","Result"],"kind":"typedef"},"2:53191:7754":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:6200:9237":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"16:6424:5759":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:3320:5940":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:51820:4978":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:9509:8063":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"2:10966:2269":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:4899:2627":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"17:11604:6596":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:1493:3421":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:10690:4318":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:51557:7697":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:51180:4973":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:5635:4532":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:13676:2087":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"16:2843:5876":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"6:6910:9277":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:6603:9157":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"6:4523:8897":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:15098:2634":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:6923:9278":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:9065:47347":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:11337:6035":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:49870:5123":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:49069:5089":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"16:6605:5721":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:9027:2716":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:11486:4625":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:11928:2661":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"1:5561:4544":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"5:3380:4604":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:4605:58559":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:4791:3375":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:4945:3362":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:13912:7194":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:9062:7782":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"6:6091:9174":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:6028:9164":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:2395:7774":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:48511:142":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:50032:187":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:2458:7778":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:13365:7776":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"5:3022:4057":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"16:5632:5614":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:46489:4899":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:11358:6011":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:50812:4963":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:11539:6584":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:13154:6978":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:13598:7090":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:7337:171":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:5683:4535":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:3487:3282":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:12064:2717":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:47963:3512":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:12195:6710":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:11166:3358":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"6:1630:8530":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:6852:9263":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:7151:7780":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:10403:5989":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:6221:9249":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:4449:8870":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:3772:7234":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:9689:61498":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"12:968:3426":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:13865:7180":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"12:1855:141":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"18:739:6333":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:783:6224":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"2:9643:76":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:48502:3438":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:11809:6645":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:15220:55556":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"5:7797:6189":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:12862:4756":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:51066:4941":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:51509:7696":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:52990:4962":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:7738:4884":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:15745:3143":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:3350:3280":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:6106:9178":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"16:7174:5773":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:45598:181":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:4157:6017":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:5705:4539":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:10489:6039":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:1190:8061":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"17:11378:6010":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:5528:9081":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"5:983:5316":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:6769:4513":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:8353:3583":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"16:2912:5878":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:4046:8718":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:3189:103":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"12:2303:8389":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:12494:6774":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:10551:3432":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:50739:7686":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:14571:4651":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:24487:4654":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"6:1658:8555":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:8527:3384":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:32015:3347":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:11616:6599":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:9404:6346":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:50086:3250":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"12:1651:5533":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:4164:8771":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:12554:4315":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:11044:2645":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"2:3333:3276":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:8578:2714":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:11962:6670":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:5346:5705":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"16:3041:5881":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"12:1762:6173":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:5889:4732":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:47293:3569":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"0:168:2215":{"crate_id":0,"path":["tokio","io","AsyncRead"],"kind":"trait"},"1:5766:4723":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"6:3997:8699":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:13119:6977":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:11152:3356":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"5:1678:5350":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:11228:5076":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"14:244:7519":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"18:650:6075":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"16:2945:5901":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:5407:9053":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:46131:5256":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"10:0:3123":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:11304:47353":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:50139:4277":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:15764:3160":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"12:812:3422":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:11082:5971":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:12946:6851":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:49878:5125":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"12:1144:3430":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:14702:6232":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:13219:4693":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"0:353:1814":{"crate_id":0,"path":["tokio","net"],"kind":"module"},"2:2867:163":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:51046:7688":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:13296:7012":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:47455:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"12:2009:2662":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:12408:6764":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:2431:4274":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"16:5488:5607":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:49929:5191":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"16:6620:5908":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:10259:7834":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:1415:2661":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:2140:1029":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:12142:6702":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:49886:5120":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:5210:8945":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:47497:78":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"16:3365:5634":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:13370:7031":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:6577:5763":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"16:3429:5637":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:2320:3245":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:11159:6538":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:11221:4727":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:55859:221":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:3157:111":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"16:6176:5752":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:22403:59006":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:46287:3310":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:24283:5148":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"16:6682:5720":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:11873:9395":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"2:37348:4065":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"6:4431:8859":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:46200:5180":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:991:2724":{"crate_id":1,"path":["std","thread","sleep"],"kind":"function"},"17:10926:6524":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:12552:6784":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:49218:5101":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"12:2315:61484":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"11:54:5510":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"17:13933:7200":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:5486:11889":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"1:1149:7767":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:48737:5273":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:10253:5945":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:4506:7244":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:10474:2728":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:10448:5956":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:4940:3361":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:2362:581":{"crate_id":1,"path":["std","env"],"kind":"module"},"16:5855:5626":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"9:41:5440":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"1:12094:3521":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:6107:2639":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:12847:4753":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:7228:172":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:9799:6445":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"16:6644:5765":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:11794:6639":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:46309:4904":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:47192:162":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"16:5927:5629":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:14341:9396":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:2004:3298":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:14554:7788":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:1459:3417":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"12:1253:3431":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:3623:3285":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:13862:3252":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:13746:6268":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"12:377:5527":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:10821:4358":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:3299:3273":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:46088:4568":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:7545:4644":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:13394:7036":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"5:6670:5306":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"9:996:5456":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:5953:9118":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:4344:2246":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:12982:6882":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:10975:6528":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:3233:4322":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"6:4083:8738":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:5960:5631":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"16:4823:7253":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:13620:7095":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:3218:5884":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:10994:2270":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:13819:7166":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:49582:4763":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:1736:8597":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"12:0:3125":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"5:1000:2661":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:3431:128":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:14021:4126":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:2852:166":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:12556:6229":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:10140:3511":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"12:2323:8392":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:6858:9264":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:11015:6531":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:5282:8982":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:9806:5055":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:5643:4533":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"6:5379:9039":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"16:6126:5750":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"5:1628:3417":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:12028:6681":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:9659:61503":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:3276:1813":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:9615:4684":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"6:3978:8686":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:49059:5088":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:3172:5882":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:12699:6811":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:7360:180":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:48252:123":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"18:849:6070":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"16:2816:5895":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:10917:2661":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:8298:5345":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"2:45721:3286":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"5:8419:3419":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"1:15740:3139":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:45808:5018":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"12:840:3416":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:10130:3505":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:50973:4964":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:53068:4947":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"16:7216:5777":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:9034:47346":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"16:6219:5754":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:3082:145":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:11936:4574":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:13772:7155":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:2779:4882":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"5:3743:2661":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:13540:7078":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:13062:7619":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"5:3472:3419":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"2:11121:5071":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:5017:3368":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"6:4095:8744":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:3483:3281":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:49150:2269":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:12629:5068":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:13163:6982":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:10132:3512":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:5978:9136":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:13221:6997":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:3316:3272":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:9476:6220":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:11214:5075":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:49120:5095":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:46458:4898":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"16:7884:5714":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:12756:6819":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:45509:3244":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"5:7753:219":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:51432:4945":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"5:6393:208":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:3321:3274":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"16:4230:7237":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:22388:59006":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"5:3024:7993":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:3635:209":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:10984:3310":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:15762:3158":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:0:3129":{"crate_id":17,"path":["object"],"kind":"module"},"2:48326:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:12431:6765":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:6525:59180":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"17:10420:5978":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:10962:6527":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:5091:2698":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:10383:3437":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:23938:5208":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:4827:3376":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:10558:6472":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:5580:5612":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:10827:6009":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:5359:9031":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:5347:9026":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"16:5433:5602":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"12:1667:5534":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:1522:7885":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:3264:5886":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:2794:5636":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:2027:141":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"18:677:138":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"5:8236:3409":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"16:3392:5893":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:5627:4531":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:14394:114":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"17:9264:6434":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:51211:4977":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:670:40813":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:53029:4982":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:4066:8728":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"5:3320:4602":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:13963:7205":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:11822:6649":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"16:6032:5640":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:988:2721":{"crate_id":1,"path":["std","thread","yield_now"],"kind":"function"},"2:2115:3344":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:11835:6650":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:2213:4797":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:6607:9161":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"6:4052:8720":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"6:6005:9146":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"5:3346:4603":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:23394:4559":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:15235:5551":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:9133:47349":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:696:2726":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:3249:4327":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:45557:182":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:10250:7617":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"17:13258:7006":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"16:5029:7259":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"16:6087:5704":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:49858:5119":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"12:1688:5535":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"16:5766:5623":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:7856:5785":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:4040:8716":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:14558:4547":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:15748:3146":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:4267:4674":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:53087:7746":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:9280:6435":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:2582:7779":{"crate_id":1,"path":["std","error","from","StringError"],"kind":"struct"},"5:1430:3428":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:6214:9246":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:1497:3422":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:12867:4751":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"5:3756:3415":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:49015:5084":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"16:4890:7255":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"9:234:5415":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"5:8088:2662":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"5:421:2320":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:511:8406":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:13627:7097":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:46248:6196":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"5:1581:2661":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"12:2309:8390":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:5371:9038":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:11086:5070":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:10788:6514":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"0:247:2219":{"crate_id":0,"path":["tokio","io","AsyncWrite"],"kind":"trait"},"2:22835:4517":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:1507:3424":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"6:4377:8838":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:9849:61504":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:3290:3266":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:8813:4710":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"1:10722:114":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"16:2968:5879":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:47956:3506":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"14:194:45691":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"0:380:2627":{"crate_id":0,"path":["tokio","net","ToSocketAddrs"],"kind":"trait"},"6:1584:8501":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:0:1302":{"crate_id":1,"path":["std"],"kind":"module"},"2:3092:212":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:6227:2640":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"0:0:1882":{"crate_id":0,"path":["tokio"],"kind":"module"},"18:720:6328":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:11265:4508":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"5:2184:6177":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"18:896:6074":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"18:857:6071":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:15761:3157":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"16:5717:5618":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:11080:3355":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"6:3918:8650":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:12568:6785":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:48942:5078":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"9:692:5390":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"2:50109:154":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:45756:4865":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:1157:11887":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"9:749:5392":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"1:2183:4603":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:2889:5896":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:11050:2641":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"17:11555:6588":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:3953:191":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"5:3954:6175":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:11246:4697":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:3050:1812":{"crate_id":1,"path":["std","fs"],"kind":"module"},"1:14927:4588":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:5420:9057":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:14686:6231":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:32056:3348":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"16:7477:5728":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"16:5941:175":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:10095:6047":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:47379:2662":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:10683:4317":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:52091:4961":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:9162:5968":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"1:14037:2244":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:24521:5152":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:12537:6780":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:12741:6815":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"16:4955:7257":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:24385:3482":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:10801:6516":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:8284:147":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:9896:61496":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:4557:3308":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:4273:4676":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:22792:4517":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"5:8094:5317":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"16:6391:5758":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:10136:175":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:12917:6831":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:45665:185":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"5:8436:4129":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:5284:2631":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:24215:5146":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"16:7804:5716":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:12343:6734":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:47371:3415":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"12:1235:5523":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"20":{"name":"pin_project_lite","html_root_url":null},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":15}