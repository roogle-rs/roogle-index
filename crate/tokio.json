{"root":"0:0","crate_version":"1.18.2","includes_private":false,"index":{"2:3092":{"id":"2:3092","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3063","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"0:285":{"id":"0:285","crate_id":0,"name":"poll_write","span":{"filename":"src/io/async_write.rs","begin":[351,4],"end":[357,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:49772","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3938","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3047":{"id":"2:3047","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3049"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3155","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementations":[]}},"0:281":{"id":"0:281","crate_id":0,"name":"is_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[337,4],"end":[339,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3249":{"id":"2:3249","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3251"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:210":{"id":"0:210","crate_id":0,"name":null,"span":{"filename":"src/io/async_seek.rs","begin":[61,0],"end":[63,1]},"visibility":{"restricted":{"parent":"0:185","path":"::io::async_seek"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3155","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncSeek","id":"0:206","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3191","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsyncSeek","id":"0:206","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:421","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:782","0:783"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:272":{"id":"0:272","crate_id":0,"name":null,"span":{"filename":"src/io/async_write.rs","begin":[290,0],"end":[318,1]},"visibility":{"restricted":{"parent":"0:225","path":"::io::async_write"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_write_vectored","poll_write_vectored"],"trait":{"kind":"resolved_path","inner":{"name":"AsyncWrite","id":"0:246","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"io::Cursor","id":"1:10649","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}}],"bindings":[]}},"param_names":[]}},"items":["0:273","0:274","0:275","0:276","0:277"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3292":{"id":"2:3292","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3294","2:3295"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10097":{"id":"2:10097","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10098","2:10100"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3162-0:306":{"id":"a:2:3162-0:306","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3162","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:772":{"id":"0:772","crate_id":0,"name":"stream","span":{"filename":"src/lib.rs","begin":[494,0],"end":[494,17]},"visibility":"public","docs":"Due to the `Stream` trait's inclusion in `std` landing later than Tokio's 1.0\nrelease, most of the Tokio stream utilities have been moved into the [`tokio-stream`]\ncrate.\n\n# Why was `Stream` not included in Tokio 1.0?\n\nOriginally, we had planned to ship Tokio 1.0 with a stable `Stream` type\nbut unfortunately the [RFC] had not been merged in time for `Stream` to\nreach `std` on a stable compiler in time for the 1.0 release of Tokio. For\nthis reason, the team has decided to move all `Stream` based utilities to\nthe [`tokio-stream`] crate. While this is not ideal, once `Stream` has made\nit into the standard library and the MSRV period has passed, we will implement\nstream for our different types.\n\nWhile this may seem unfortunate, not all is lost as you can get much of the\n`Stream` support with `async/await` and `while let` loops. It is also possible\nto create a `impl Stream` from `async fn` using the [`async-stream`] crate.\n\n[`tokio-stream`]: https://docs.rs/tokio-stream\n[`async-stream`]: https://docs.rs/async-stream\n[RFC]: https://github.com/rust-lang/rfcs/pull/2996\n\n# Example\n\nConvert a [`sync::mpsc::Receiver`] to an `impl Stream`.\n\n```rust,no_run\nuse tokio::sync::mpsc;\n\nlet (tx, mut rx) = mpsc::channel::<usize>(16);\n\nlet stream = async_stream::stream! {\n    while let Some(item) = rx.recv().await {\n        yield item;\n    }\n};\n```","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[]}},"1:5608":{"id":"1:5608","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5609","1:5610","1:5611"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:1075":{"id":"1:1075","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1076","1:1077","1:1078","1:1079","1:1080","1:1081","1:1082"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12046":{"id":"2:12046","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12047","2:12048"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2750":{"id":"2:2750","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2752"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3155","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2747","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:4594":{"id":"1:4594","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4595","1:4596","1:4597","1:4599","1:4600","1:4602","1:4603"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4512","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:133":{"id":"0:133","crate_id":0,"name":null,"span":{"filename":"src/io/async_buf_read.rs","begin":[85,0],"end":[97,1]},"visibility":{"restricted":{"parent":"0:105","path":"::io::async_buf_read"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DerefMut","id":"2:3382","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3191","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:3369","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncBufRead","id":"0:125","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsyncBufRead","id":"0:125","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"items":["0:135","0:136"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:138":{"id":"0:138","crate_id":0,"name":"poll_fill_buf","span":{"filename":"src/io/async_buf_read.rs","begin":[100,4],"end":[102,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["_cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:49772","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3938","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4872":{"id":"1:4872","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4873","1:4874"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:777":{"id":"0:777","crate_id":0,"name":"consume","span":{"filename":"src/io/async_buf_read.rs","begin":[78,4],"end":[78,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["amt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22605":{"id":"2:22605","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"2:23254","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22596","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13030":{"id":"2:13030","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:15638","str::splitn":"1:15643","self::pattern":"2:12599"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:48994","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12609","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12609","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12624","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12609":{"id":"2:12609","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12611","2:12612","2:12613","2:12614","2:12615","2:12616","2:12617"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2747":{"id":"2:2747","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2749"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3155","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementations":[]}},"0:286":{"id":"0:286","crate_id":0,"name":"poll_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[359,4],"end":[365,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10853","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:49772","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3938","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:7971":{"id":"2:7971","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7973"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:221":{"id":"0:221","crate_id":0,"name":"poll_complete","span":{"filename":"src/io/async_seek.rs","begin":[87,4],"end":[89,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:49772","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3938","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5770":{"id":"5:5770","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:8050","`Box<str>`":"5:421"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:421","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7755","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8050","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:177":{"id":"0:177","crate_id":0,"name":null,"span":{"filename":"src/io/async_read.rs","begin":[94,0],"end":[106,1]},"visibility":{"restricted":{"parent":"0:147","path":"::io::async_read"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsyncRead","id":"0:167","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"items":["0:178"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:329":{"id":"0:329","crate_id":0,"name":"assume_init","span":{"filename":"src/io/read_buf.rs","begin":[231,4],"end":[236,5]},"visibility":"public","docs":"Asserts that the first `n` unfilled bytes of the buffer are initialized.\n\n`ReadBuf` assumes that bytes are never de-initialized, so this method does nothing when called with fewer\nbytes than are already known to be initialized.\n\n# Safety\n\nThe caller must ensure that `n` unfilled bytes of the buffer have already been initialized.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13082":{"id":"2:13082","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:290":{"id":"0:290","crate_id":0,"name":null,"span":{"filename":"src/io/async_write.rs","begin":[380,0],"end":[408,1]},"visibility":{"restricted":{"parent":"0:225","path":"::io::async_write"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_write_vectored","poll_write_vectored"],"trait":{"kind":"resolved_path","inner":{"name":"AsyncWrite","id":"0:246","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"io::Cursor","id":"1:10649","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:421","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"items":["0:291","0:292","0:293","0:294","0:295"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:278":{"id":"0:278","crate_id":0,"name":null,"span":{"filename":"src/io/async_write.rs","begin":[320,0],"end":[348,1]},"visibility":{"restricted":{"parent":"0:225","path":"::io::async_write"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_write_vectored","poll_write_vectored"],"trait":{"kind":"resolved_path","inner":{"name":"AsyncWrite","id":"0:246","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"io::Cursor","id":"1:10649","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7429","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"items":["0:279","0:280","0:281","0:282","0:283"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:249":{"id":"0:249","crate_id":0,"name":"poll_shutdown","span":{"filename":"src/io/async_write.rs","begin":[133,4],"end":[133,96]},"visibility":"default","docs":"Initiates or attempts to shut down this writer, returning success when\nthe I/O connection has completely shut down.\n\nThis method is intended to be used for asynchronous shutdown of I/O\nconnections. For example this is suitable for implementing shutdown of a\nTLS connection or calling `TcpStream::shutdown` on a proxied connection.\nProtocols sometimes need to flush out final pieces of data or otherwise\nperform a graceful shutdown handshake, reading/writing more data as\nappropriate. This method is the hook for such protocols to implement the\ngraceful shutdown logic.\n\nThis `shutdown` method is required by implementers of the\n`AsyncWrite` trait. Wrappers typically just want to proxy this call\nthrough to the wrapped type, and base types will typically implement\nshutdown logic here or just return `Ok(().into())`. Note that if you're\nwrapping an underlying `AsyncWrite` a call to `shutdown` implies that\ntransitively the entire stream has been shut down. After your wrapper's\nshutdown logic has been executed you should shut down the underlying\nstream.\n\nInvocation of a `shutdown` implies an invocation of `flush`. Once this\nmethod returns `Ready` it implies that a flush successfully happened\nbefore the shutdown happened. That is, callers don't need to call\n`flush` before calling `shutdown`. They can rely that by calling\n`shutdown` any pending buffered data will be written out.\n\n# Return value\n\nThis function returns a `Poll<io::Result<()>>` classified as such:\n\n* `Poll::Ready(Ok(()))` - indicates that the connection was\n  successfully shut down and is now safe to deallocate/drop/close\n  resources associated with it. This method means that the current task\n  will no longer receive any notifications due to this method and the\n  I/O object itself is likely no longer usable.\n\n* `Poll::Pending` - indicates that shutdown is initiated but could\n  not complete just yet. This may mean that more I/O needs to happen to\n  continue this shutdown operation. The current task is scheduled to\n  receive a notification when it's otherwise ready to continue the\n  shutdown operation. When woken up this method should be called again.\n\n* `Poll::Ready(Err(e))` - indicates a fatal error has happened with shutdown,\n  indicating that the shutdown operation did not complete successfully.\n  This typically means that the I/O object is no longer usable.\n\n# Errors\n\nThis function can return normal I/O errors through `Err`, described\nabove. Additionally this method may also render the underlying\n`Write::write` method no longer usable (e.g. will return errors in the\nfuture). It's recommended that once `shutdown` is called the\n`write` method is no longer called.\n\n# Panics\n\nThis function will panic if not called within the context of a future's\ntask.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:49772","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47050","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"io::Error","id":"1:3940","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:2555":{"id":"1:2555","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2556","1:2558","1:2559","1:2560"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:9884","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:9891","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:4569":{"id":"1:4569","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4570","1:4571","1:4573","1:4574","1:4575","1:4576","1:4577","1:4586"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9901":{"id":"2:9901","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9902"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6742":{"id":"1:6742","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6743"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9899":{"id":"2:9899","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9900"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3265":{"id":"2:3265","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3267"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:295":{"id":"0:295","crate_id":0,"name":"poll_shutdown","span":{"filename":"src/io/async_write.rs","begin":[405,4],"end":[407,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:49772","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3938","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13027":{"id":"2:13027","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"str::rsplitn":"1:15643","self::pattern":"2:12599","prim@char":"1:15638"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:48976","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12609","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:265":{"id":"0:265","crate_id":0,"name":"poll_shutdown","span":{"filename":"src/io/async_write.rs","begin":[254,4],"end":[256,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:49772","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3938","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:127":{"id":"0:127","crate_id":0,"name":"consume","span":{"filename":"src/io/async_buf_read.rs","begin":[62,4],"end":[62,49]},"visibility":"default","docs":"Tells this buffer that `amt` bytes have been consumed from the buffer,\nso they should no longer be returned in calls to [`poll_read`].\n\nThis function is a lower-level call. It needs to be paired with the\n[`poll_fill_buf`] method to function properly. This function does\nnot perform any I/O, it simply informs this object that some amount of\nits buffer, returned from [`poll_fill_buf`], has been consumed and should\nno longer be returned. As such, this function may do odd things if\n[`poll_fill_buf`] isn't called before calling it.\n\nThe `amt` must be `<=` the number of bytes in the buffer returned by\n[`poll_fill_buf`].\n\n[`poll_read`]: AsyncRead::poll_read\n[`poll_fill_buf`]: AsyncBufRead::poll_fill_buf","links":{"AsyncRead::poll_read":"0:168","AsyncBufRead::poll_fill_buf":"0:126"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["amt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:12624":{"id":"2:12624","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:12626","2:12627","2:12628"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"2:12618","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13083":{"id":"2:13083","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9175":{"id":"1:9175","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9176","1:9177","1:9178","1:9179","1:9180","1:9181","1:9182"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10350","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2758":{"id":"2:2758","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:340":{"id":"0:340","crate_id":0,"name":null,"span":{"filename":"src/io/mod.rs","begin":[205,18],"end":[205,23]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"std::io::Error","name":"Error","id":"1:3940","glob":false}},"0:322":{"id":"0:322","crate_id":0,"name":"unfilled_mut","span":{"filename":"src/io/read_buf.rs","begin":[135,4],"end":[137,5]},"visibility":"public","docs":"Returns a mutable reference to the unfilled part of the buffer without ensuring that it has been fully\ninitialized.\n\n# Safety\n\nThe caller must not de-initialize portions of the buffer that have already been initialized.\nThis includes any bytes in the region marked as uninitialized by `ReadBuf`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninit","id":"2:31811","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}},"param_names":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:167":{"id":"0:167","crate_id":0,"name":"AsyncRead","span":{"filename":"src/io/async_read.rs","begin":[43,0],"end":[58,1]},"visibility":"public","docs":"Reads bytes from a source.\n\nThis trait is analogous to the [`std::io::Read`] trait, but integrates with\nthe asynchronous task system. In particular, the [`poll_read`] method,\nunlike [`Read::read`], will automatically queue the current task for wakeup\nand return if data is not yet available, rather than blocking the calling\nthread.\n\nSpecifically, this means that the `poll_read` function will return one of\nthe following:\n\n* `Poll::Ready(Ok(()))` means that data was immediately read and placed into\n  the output buffer. The amount of data read can be determined by the\n  increase in the length of the slice returned by `ReadBuf::filled`. If the\n  difference is 0, EOF has been reached.\n\n* `Poll::Pending` means that no data was read into the buffer\n  provided. The I/O object is not currently readable but may become readable\n  in the future. Most importantly, **the current future's task is scheduled\n  to get unparked when the object is readable**. This means that like\n  `Future::poll` you'll receive a notification when the I/O object is\n  readable again.\n\n* `Poll::Ready(Err(e))` for other errors are standard I/O errors coming from the\n  underlying object.\n\nThis trait importantly means that the `read` method only works in the\ncontext of a future's task. The object may panic if used outside of a task.\n\nUtilities for working with `AsyncRead` values are provided by\n[`AsyncReadExt`].\n\n[`poll_read`]: AsyncRead::poll_read\n[`std::io::Read`]: std::io::Read\n[`Read::read`]: std::io::Read::read\n[`AsyncReadExt`]: crate::io::AsyncReadExt","links":{"std::io::Read":"1:4512","AsyncRead::poll_read":"0:168","std::io::Read::read":"1:4513"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:168"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:170","0:172","0:174","0:177","0:179"]}},"0:394":{"id":"0:394","crate_id":0,"name":null,"span":{"filename":"src/net/addr.rs","begin":[64,0],"end":[64,38]},"visibility":{"restricted":{"parent":"0:353","path":"::net::addr"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"ToSocketAddrs","id":"0:379","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"SocketAddrV4","id":"1:10947","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:12966":{"id":"2:12966","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:104":{"id":"0:104","crate_id":0,"name":"io","span":{"filename":"src/io/mod.rs","begin":[1,0],"end":[276,1]},"visibility":"public","docs":"Traits, helpers, and type definitions for asynchronous I/O functionality.\n\nThis module is the asynchronous version of `std::io`. Primarily, it\ndefines two traits, [`AsyncRead`] and [`AsyncWrite`], which are asynchronous\nversions of the [`Read`] and [`Write`] traits in the standard library.\n\n# AsyncRead and AsyncWrite\n\nLike the standard library's [`Read`] and [`Write`] traits, [`AsyncRead`] and\n[`AsyncWrite`] provide the most general interface for reading and writing\ninput and output. Unlike the standard library's traits, however, they are\n_asynchronous_ &mdash; meaning that reading from or writing to a `tokio::io`\ntype will _yield_ to the Tokio scheduler when IO is not ready, rather than\nblocking. This allows other tasks to run while waiting on IO.\n\nAnother difference is that `AsyncRead` and `AsyncWrite` only contain\ncore methods needed to provide asynchronous reading and writing\nfunctionality. Instead, utility methods are defined in the [`AsyncReadExt`]\nand [`AsyncWriteExt`] extension traits. These traits are automatically\nimplemented for all values that implement `AsyncRead` and `AsyncWrite`\nrespectively.\n\nEnd users will rarely interact directly with `AsyncRead` and\n`AsyncWrite`. Instead, they will use the async functions defined in the\nextension traits. Library authors are expected to implement `AsyncRead`\nand `AsyncWrite` in order to provide types that behave like byte streams.\n\nEven with these differences, Tokio's `AsyncRead` and `AsyncWrite` traits\ncan be used in almost exactly the same manner as the standard library's\n`Read` and `Write`. Most types in the standard library that implement `Read`\nand `Write` have asynchronous equivalents in `tokio` that implement\n`AsyncRead` and `AsyncWrite`, such as [`File`] and [`TcpStream`].\n\nFor example, the standard library documentation introduces `Read` by\n[demonstrating][std_example] reading some bytes from a [`std::fs::File`]. We\ncan do the same with [`tokio::fs::File`][`File`]:\n\n```no_run\nuse tokio::io::{self, AsyncReadExt};\nuse tokio::fs::File;\n\n#[tokio::main]\nasync fn main() -> io::Result<()> {\n    let mut f = File::open(\"foo.txt\").await?;\n    let mut buffer = [0; 10];\n\n    // read up to 10 bytes\n    let n = f.read(&mut buffer).await?;\n\n    println!(\"The bytes: {:?}\", &buffer[..n]);\n    Ok(())\n}\n```\n\n[`File`]: crate::fs::File\n[`TcpStream`]: crate::net::TcpStream\n[`std::fs::File`]: std::fs::File\n[std_example]: std::io#read-and-write\n\n## Buffered Readers and Writers\n\nByte-based interfaces are unwieldy and can be inefficient, as we'd need to be\nmaking near-constant calls to the operating system. To help with this,\n`std::io` comes with [support for _buffered_ readers and writers][stdbuf],\nand therefore, `tokio::io` does as well.\n\nTokio provides an async version of the [`std::io::BufRead`] trait,\n[`AsyncBufRead`]; and async [`BufReader`] and [`BufWriter`] structs, which\nwrap readers and writers. These wrappers use a buffer, reducing the number\nof calls and providing nicer methods for accessing exactly what you want.\n\nFor example, [`BufReader`] works with the [`AsyncBufRead`] trait to add\nextra methods to any async reader:\n\n```no_run\nuse tokio::io::{self, BufReader, AsyncBufReadExt};\nuse tokio::fs::File;\n\n#[tokio::main]\nasync fn main() -> io::Result<()> {\n    let f = File::open(\"foo.txt\").await?;\n    let mut reader = BufReader::new(f);\n    let mut buffer = String::new();\n\n    // read a line into buffer\n    reader.read_line(&mut buffer).await?;\n\n    println!(\"{}\", buffer);\n    Ok(())\n}\n```\n\n[`BufWriter`] doesn't add any new ways of writing; it just buffers every call\nto [`write`](crate::io::AsyncWriteExt::write). However, you **must** flush\n[`BufWriter`] to ensure that any buffered data is written.\n\n```no_run\nuse tokio::io::{self, BufWriter, AsyncWriteExt};\nuse tokio::fs::File;\n\n#[tokio::main]\nasync fn main() -> io::Result<()> {\n    let f = File::create(\"foo.txt\").await?;\n    {\n        let mut writer = BufWriter::new(f);\n\n        // Write a byte to the buffer.\n        writer.write(&[42u8]).await?;\n\n        // Flush the buffer before it goes out of scope.\n        writer.flush().await?;\n\n    } // Unless flushed or shut down, the contents of the buffer is discarded on drop.\n\n    Ok(())\n}\n```\n\n[stdbuf]: std::io#bufreader-and-bufwriter\n[`std::io::BufRead`]: std::io::BufRead\n[`AsyncBufRead`]: crate::io::AsyncBufRead\n[`BufReader`]: crate::io::BufReader\n[`BufWriter`]: crate::io::BufWriter\n\n## Implementing AsyncRead and AsyncWrite\n\nBecause they are traits, we can implement [`AsyncRead`] and [`AsyncWrite`] for\nour own types, as well. Note that these traits must only be implemented for\nnon-blocking I/O types that integrate with the futures type system. In\nother words, these types must never block the thread, and instead the\ncurrent task is notified when the I/O resource is ready.\n\n## Conversion to and from Sink/Stream\n\nIt is often convenient to encapsulate the reading and writing of\nbytes and instead work with a [`Sink`] or [`Stream`] of some data\ntype that is encoded as bytes and/or decoded from bytes. Tokio\nprovides some utility traits in the [tokio-util] crate that\nabstract the asynchronous buffering that is required and allows\nyou to write [`Encoder`] and [`Decoder`] functions working with a\nbuffer of bytes, and then use that [\"codec\"] to transform anything\nthat implements [`AsyncRead`] and [`AsyncWrite`] into a `Sink`/`Stream` of\nyour structured data.\n\n[tokio-util]: https://docs.rs/tokio-util/0.6/tokio_util/codec/index.html\n\n# Standard input and output\n\nTokio provides asynchronous APIs to standard [input], [output], and [error].\nThese APIs are very similar to the ones provided by `std`, but they also\nimplement [`AsyncRead`] and [`AsyncWrite`].\n\nNote that the standard input / output APIs  **must** be used from the\ncontext of the Tokio runtime, as they require Tokio-specific features to\nfunction. Calling these functions outside of a Tokio runtime will panic.\n\n[input]: fn@stdin\n[output]: fn@stdout\n[error]: fn@stderr\n\n# `std` re-exports\n\nAdditionally, [`Error`], [`ErrorKind`], [`Result`], and [`SeekFrom`] are\nre-exported from `std::io` for ease of use.\n\n[`AsyncRead`]: trait@AsyncRead\n[`AsyncWrite`]: trait@AsyncWrite\n[`AsyncReadExt`]: trait@AsyncReadExt\n[`AsyncWriteExt`]: trait@AsyncWriteExt\n[\"codec\"]: https://docs.rs/tokio-util/0.6/tokio_util/codec/index.html\n[`Encoder`]: https://docs.rs/tokio-util/0.6/tokio_util/codec/trait.Encoder.html\n[`Decoder`]: https://docs.rs/tokio-util/0.6/tokio_util/codec/trait.Decoder.html\n[`Error`]: struct@Error\n[`ErrorKind`]: enum@ErrorKind\n[`Result`]: type@Result\n[`Read`]: std::io::Read\n[`SeekFrom`]: enum@SeekFrom\n[`Sink`]: https://docs.rs/futures/0.3/futures/sink/trait.Sink.html\n[`Stream`]: https://docs.rs/futures/0.3/futures/stream/trait.Stream.html\n[`Write`]: std::io::Write","links":{"std::io::BufRead":"1:4594","crate::io::AsyncBufRead":"0:125","enum@ErrorKind":"1:10729","std::fs::File":"1:3093","trait@AsyncWrite":"0:246","std::io#bufreader-and-bufwriter":"1:3261","std::io::Read":"1:4512","type@Result":"1:3938","enum@SeekFrom":"1:10865","std::io#read-and-write":"1:3261","struct@Error":"1:3940","trait@AsyncRead":"0:167","std::io::Write":"1:4569"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:125","0:167","0:206","0:246","0:306","0:340","0:343","0:346","0:349"]}},"0:311":{"id":"0:311","crate_id":0,"name":null,"span":{"filename":"src/io/read_buf.rs","begin":[29,0],"end":[267,1]},"visibility":{"restricted":{"parent":"0:299","path":"::io::read_buf"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["0:313","0:314","0:315","0:316","0:317","0:318","0:319","0:320","0:321","0:322","0:323","0:324","0:325","0:326","0:327","0:328","0:329","0:330"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:282":{"id":"0:282","crate_id":0,"name":"poll_flush","span":{"filename":"src/io/async_write.rs","begin":[341,4],"end":[343,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:49772","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3938","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:7984":{"id":"2:7984","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7986","2:7988","2:7989"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3525":{"id":"2:3525","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3527","2:3528","2:3529"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3155","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementations":[]}},"0:782":{"id":"0:782","crate_id":0,"name":"start_seek","span":{"filename":"src/io/async_seek.rs","begin":[62,4],"end":[62,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["pos",{"kind":"resolved_path","inner":{"name":"SeekFrom","id":"1:10865","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3938","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:317":{"id":"0:317","crate_id":0,"name":"filled_mut","span":{"filename":"src/io/read_buf.rs","begin":[71,4],"end":[76,5]},"visibility":"public","docs":"Returns a mutable reference to the filled portion of the buffer.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:330":{"id":"0:330","crate_id":0,"name":"put_slice","span":{"filename":"src/io/read_buf.rs","begin":[244,4],"end":[266,5]},"visibility":"public","docs":"Appends data to the buffer, advancing the written position and possibly also the initialized position.\n\n# Panics\n\nPanics if `self.remaining()` is less than `buf.len()`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13001":{"id":"2:13001","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:15638","self::pattern":"2:12599"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12609","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12609","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12624","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3089-0:306":{"id":"b:2:3089-0:306","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3063","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3059","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3092","2:3093"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13065":{"id":"2:13065","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:15638","self::pattern":"2:12599"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:46923","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12609","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8044":{"id":"2:8044","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8045","2:8046"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8170","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13071":{"id":"2:13071","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:12599","prim@char":"1:15638"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12609","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12609","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12624","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3059":{"id":"2:3059","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3061","2:3062"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3218":{"id":"2:3218","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3220","2:3221"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:262":{"id":"0:262","crate_id":0,"name":"poll_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[238,4],"end":[244,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10853","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:49772","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3938","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3245":{"id":"2:3245","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3246","2:3247"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:279":{"id":"0:279","crate_id":0,"name":"poll_write","span":{"filename":"src/io/async_write.rs","begin":[321,4],"end":[327,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:49772","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3938","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3611":{"id":"2:3611","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3613"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:379":{"id":"0:379","crate_id":0,"name":"ToSocketAddrs","span":{"filename":"src/net/addr.rs","begin":[19,0],"end":[19,53]},"visibility":"public","docs":"Converts or resolves without blocking to one or more `SocketAddr` values.\n\n# DNS\n\nImplementations of `ToSocketAddrs` for string types require a DNS lookup.\n\n# Calling\n\nCurrently, this trait is only used as an argument to Tokio functions that\nneed to reference a target socket address. To perform a `SocketAddr`\nconversion directly, use [`lookup_host()`](super::lookup_host()).\n\nThis trait is sealed and is intended to be opaque. The details of the trait\nwill change. Stabilization is pending enhancements to the Rust language.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"sealed::ToSocketAddrsPriv","id":"0:434","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":["0:382","0:389","0:394","0:399","0:404","0:409","0:414","0:419"]}},"0:246":{"id":"0:246","crate_id":0,"name":"AsyncWrite","span":{"filename":"src/io/async_write.rs","begin":[45,0],"end":[183,1]},"visibility":"public","docs":"Writes bytes asynchronously.\n\nThe trait inherits from [`std::io::Write`] and indicates that an I/O object is\n**nonblocking**. All non-blocking I/O objects must return an error when\nbytes cannot be written instead of blocking the current thread.\n\nSpecifically, this means that the [`poll_write`] function will return one of\nthe following:\n\n* `Poll::Ready(Ok(n))` means that `n` bytes of data was immediately\n  written.\n\n* `Poll::Pending` means that no data was written from the buffer\n  provided. The I/O object is not currently writable but may become writable\n  in the future. Most importantly, **the current future's task is scheduled\n  to get unparked when the object is writable**. This means that like\n  `Future::poll` you'll receive a notification when the I/O object is\n  writable again.\n\n* `Poll::Ready(Err(e))` for other errors are standard I/O errors coming from the\n  underlying object.\n\nThis trait importantly means that the [`write`][stdwrite] method only works in\nthe context of a future's task. The object may panic if used outside of a task.\n\nNote that this trait also represents that the  [`Write::flush`][stdflush] method\nworks very similarly to the `write` method, notably that `Ok(())` means that the\nwriter has successfully been flushed, a \"would block\" error means that the\ncurrent task is ready to receive a notification when flushing can make more\nprogress, and otherwise normal errors can happen as well.\n\nUtilities for working with `AsyncWrite` values are provided by\n[`AsyncWriteExt`].\n\n[`std::io::Write`]: std::io::Write\n[`poll_write`]: AsyncWrite::poll_write()\n[stdwrite]: std::io::Write::write()\n[stdflush]: std::io::Write::flush()\n[`AsyncWriteExt`]: crate::io::AsyncWriteExt","links":{"AsyncWrite::poll_write()":"0:247","std::io::Write":"1:4569","std::io::Write::write()":"1:4570","std::io::Write::flush()":"1:4574"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:247","0:248","0:249","0:250","0:253"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:255","0:257","0:259","0:266","0:272","0:278","0:284","0:290"]}},"0:327":{"id":"0:327","crate_id":0,"name":"advance","span":{"filename":"src/io/read_buf.rs","begin":[198,4],"end":[201,5]},"visibility":"public","docs":"Advances the size of the filled region of the buffer.\n\nThe number of initialized bytes is not changed.\n\n# Panics\n\nPanics if the filled region of the buffer would become larger than the initialized region.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3393":{"id":"2:3393","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3394"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12991":{"id":"2:12991","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:15643"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49155","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3652":{"id":"2:3652","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3155","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementations":[]}},"0:349":{"id":"0:349","crate_id":0,"name":null,"span":{"filename":"src/io/mod.rs","begin":[205,44],"end":[205,52]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"std::io::SeekFrom","name":"SeekFrom","id":"1:10865","glob":false}},"2:3594":{"id":"2:3594","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3155","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"2:3525","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3155":{"id":"2:3155","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3094-0:306":{"id":"b:2:3094-0:306","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3053","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3063","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3097","2:3098"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:328":{"id":"0:328","crate_id":0,"name":"set_filled","span":{"filename":"src/io/read_buf.rs","begin":[214,4],"end":[220,5]},"visibility":"public","docs":"Sets the size of the filled region of the buffer.\n\nThe number of initialized bytes is not changed.\n\nNote that this can be used to *shrink* the filled region of the buffer in addition to growing it (for\nexample, by a `AsyncRead` implementation that compresses data in-place).\n\n# Panics\n\nPanics if the filled region of the buffer would become larger than the initialized region.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:785":{"id":"0:785","crate_id":0,"name":"poll_complete","span":{"filename":"src/io/async_seek.rs","begin":[66,4],"end":[66,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:49772","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3938","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3150-0:306":{"id":"a:2:3150-0:306","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3150","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:791":{"id":"0:791","crate_id":0,"name":"poll_write","span":{"filename":"src/io/async_write.rs","begin":[222,4],"end":[222,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:49772","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3938","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5757":{"id":"5:5757","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8050"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8050","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:783":{"id":"0:783","crate_id":0,"name":"poll_complete","span":{"filename":"src/io/async_seek.rs","begin":[62,4],"end":[62,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:49772","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3938","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:7934":{"id":"2:7934","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7936"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3093":{"id":"2:3093","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47050","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3063","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3879-0:306":{"id":"b:2:3879-0:306","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3155","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:3877","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3881"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12994":{"id":"2:12994","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:49164","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12962":{"id":"2:12962","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12059","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:12963","2:12964","2:12965","2:12966","2:12968","2:12971","2:12972","2:12973","2:12974","2:12975","2:12977","2:12979","2:12981","2:12983","2:12984","2:12985","2:12986","2:12987","2:12988","2:12989","2:12990","2:12991","2:12992","2:12993","2:12994","2:12995","2:12998","2:13001","2:13004","2:13008","2:13012","2:13015","2:13018","2:13021","2:13024","2:13027","2:13030","2:13033","2:13036","2:13039","2:13042","2:13045","2:13048","2:13051","2:13053","2:13055","2:13057","2:13058","2:13059","2:13062","2:13065","2:13068","2:13071","2:13074","2:13077","2:13080","2:13082","2:13083","2:13084","2:13085","2:13086","2:13088","2:13089"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:786":{"id":"0:786","crate_id":0,"name":"poll_write","span":{"filename":"src/io/async_write.rs","begin":[218,4],"end":[218,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:49772","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3938","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:253":{"id":"0:253","crate_id":0,"name":"is_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[180,4],"end":[182,5]},"visibility":"default","docs":"Determines if this writer has an efficient [`poll_write_vectored`]\nimplementation.\n\nIf a writer does not override the default [`poll_write_vectored`]\nimplementation, code using it may want to avoid the method all together\nand coalesce writes into a single buffer for higher performance.\n\nThe default implementation returns `false`.\n\n[`poll_write_vectored`]: AsyncWrite::poll_write_vectored","links":{"AsyncWrite::poll_write_vectored":"0:250"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:306":{"id":"0:306","crate_id":0,"name":"ReadBuf","span":{"filename":"src/io/read_buf.rs","begin":[23,0],"end":[27,1]},"visibility":"public","docs":"A wrapper around a byte buffer that is incrementally filled and initialized.\n\nThis type is a sort of \"double cursor\". It tracks three regions in the\nbuffer: a region at the beginning of the buffer that has been logically\nfilled with data, a region that has been initialized at some point but not\nyet logically filled, and a region at the end that may be uninitialized.\nThe filled region is guaranteed to be a subset of the initialized region.\n\nIn summary, the contents of the buffer can be visualized as:\n\n```not_rust\n[             capacity              ]\n[ filled |         unfilled         ]\n[    initialized    | uninitialized ]\n```\n\nIt is undefined behavior to de-initialize any bytes from the uninitialized\nregion, since it is merely unknown whether this region is uninitialized or\nnot, and if part of it turns out to be initialized, it must stay initialized.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:311","a:2:3162-0:306","a:2:8904-0:306","a:2:3150-0:306","a:2:8905-0:306","a:2:3191-0:306","b:2:2756-0:306","b:2:3879-0:306","b:2:3094-0:306","b:2:3089-0:306","b:2:3083-0:306","b:2:2753-0:306","b:2:3079-0:306","0:331"]}},"0:794":{"id":"0:794","crate_id":0,"name":"poll_flush","span":{"filename":"src/io/async_write.rs","begin":[222,4],"end":[222,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:49772","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3938","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12964":{"id":"2:12964","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13089":{"id":"2:13089","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:15638"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:49189","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13085":{"id":"2:13085","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6830":{"id":"1:6830","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6831"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:276":{"id":"0:276","crate_id":0,"name":"poll_flush","span":{"filename":"src/io/async_write.rs","begin":[311,4],"end":[313,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:49772","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3938","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3287":{"id":"2:3287","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3289","2:3290"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:788":{"id":"0:788","crate_id":0,"name":"is_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[218,4],"end":[218,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:140":{"id":"0:140","crate_id":0,"name":null,"span":{"filename":"src/io/async_buf_read.rs","begin":[109,0],"end":[117,1]},"visibility":{"restricted":{"parent":"0:105","path":"::io::async_buf_read"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"2:3047","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3191","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsyncBufRead","id":"0:125","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"io::Cursor","id":"1:10649","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:142","0:143"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:6669":{"id":"1:6669","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6670"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10350","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13711":{"id":"2:13711","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13712","2:13713","2:13714","2:13715"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:125":{"id":"0:125","crate_id":0,"name":"AsyncBufRead","span":{"filename":"src/io/async_buf_read.rs","begin":[23,0],"end":[63,1]},"visibility":"public","docs":"Reads bytes asynchronously.\n\nThis trait is analogous to [`std::io::BufRead`], but integrates with\nthe asynchronous task system. In particular, the [`poll_fill_buf`] method,\nunlike [`BufRead::fill_buf`], will automatically queue the current task for wakeup\nand return if data is not yet available, rather than blocking the calling\nthread.\n\nUtilities for working with `AsyncBufRead` values are provided by\n[`AsyncBufReadExt`].\n\n[`std::io::BufRead`]: std::io::BufRead\n[`poll_fill_buf`]: AsyncBufRead::poll_fill_buf\n[`BufRead::fill_buf`]: std::io::BufRead::fill_buf\n[`AsyncBufReadExt`]: crate::io::AsyncBufReadExt","links":{"AsyncBufRead::poll_fill_buf":"0:126","std::io::BufRead":"1:4594","std::io::BufRead::fill_buf":"1:4595"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:126","0:127"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncRead","id":"0:167","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":["0:129","0:131","0:133","0:137","0:140"]}},"2:3128":{"id":"2:3128","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3129"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13008":{"id":"2:13008","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the rightmost match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"prim@char":"1:15638","`None`":"2:46923","self::pattern":"2:12599"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:46923","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12609","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12609","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12624","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3097":{"id":"2:3097","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:38266","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generics":{"params":[],"where_predicates":[]}}},"2:3304":{"id":"2:3304","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3306"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:271":{"id":"0:271","crate_id":0,"name":"poll_shutdown","span":{"filename":"src/io/async_write.rs","begin":[285,4],"end":[287,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["_cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:49772","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3938","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12968":{"id":"2:12968","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:15643"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3606":{"id":"2:3606","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3607","2:3608","2:3609","2:3610"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"2:3611","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3606","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:343":{"id":"0:343","crate_id":0,"name":null,"span":{"filename":"src/io/mod.rs","begin":[205,25],"end":[205,34]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"std::io::ErrorKind","name":"ErrorKind","id":"1:10729","glob":false}},"2:12990":{"id":"2:12990","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:15643"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49146","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3082":{"id":"2:3082","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3056"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3162":{"id":"2:3162","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13068":{"id":"2:13068","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:12599","prim@char":"1:15638"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:46923","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12609","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12609","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12624","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4512":{"id":"1:4512","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4513","1:4514","1:4516","1:4517","1:4518","1:4519","1:4520","1:4522","1:4523","1:4524","1:4525","1:4527"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3253":{"id":"2:3253","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3255"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8452":{"id":"2:8452","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"2:7524","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3085":{"id":"2:3085","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6740":{"id":"1:6740","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6741"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12985":{"id":"2:12985","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:15643"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:792":{"id":"0:792","crate_id":0,"name":"poll_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[222,4],"end":[222,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10853","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:49772","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3938","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5751":{"id":"5:5751","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8050"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8050","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12609","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12979":{"id":"2:12979","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10500","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10500","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:5528":{"id":"1:5528","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5529","1:5530"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10350","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:2:3191-0:306":{"id":"a:2:3191-0:306","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3191","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:9834":{"id":"2:9834","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9835","2:9836","2:9838"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3223":{"id":"2:3223","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3225","2:3226"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:220":{"id":"0:220","crate_id":0,"name":"start_seek","span":{"filename":"src/io/async_seek.rs","begin":[84,4],"end":[86,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["pos",{"kind":"resolved_path","inner":{"name":"SeekFrom","id":"1:10865","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3938","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13012":{"id":"2:13012","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::split_whitespace":"1:15643","prim@char":"1:15638","self::pattern":"2:12599","str::rsplit":"1:15643","`DoubleEndedIterator`":"2:8019"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:48872","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12609","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:268":{"id":"0:268","crate_id":0,"name":"poll_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[269,4],"end":[275,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10853","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:49772","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3938","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3098":{"id":"2:3098","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47050","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3063","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:787":{"id":"0:787","crate_id":0,"name":"poll_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[218,4],"end":[218,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10853","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:49772","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3938","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:293":{"id":"0:293","crate_id":0,"name":"is_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[397,4],"end":[399,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:8904-0:306":{"id":"a:2:8904-0:306","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:8904","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"2:13783":{"id":"2:13783","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13784","2:13785","2:13786","2:13787","2:13788","2:13789","2:13790"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:319":{"id":"0:319","crate_id":0,"name":"initialized","span":{"filename":"src/io/read_buf.rs","begin":[90,4],"end":[95,5]},"visibility":"public","docs":"Returns a shared reference to the initialized portion of the buffer.\n\nThis includes the filled portion.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5666":{"id":"1:5666","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5667"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:178":{"id":"0:178","crate_id":0,"name":"poll_read","span":{"filename":"src/io/async_read.rs","begin":[95,4],"end":[105,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["_cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:306","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:49772","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3938","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3233":{"id":"2:3233","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3235","2:3236"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:143":{"id":"0:143","crate_id":0,"name":"consume","span":{"filename":"src/io/async_buf_read.rs","begin":[114,4],"end":[116,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["amt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5772":{"id":"5:5772","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:15643"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8050","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3454":{"id":"2:3454","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3456","2:3457"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3155","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementations":[]}},"0:284":{"id":"0:284","crate_id":0,"name":null,"span":{"filename":"src/io/async_write.rs","begin":[350,0],"end":[378,1]},"visibility":{"restricted":{"parent":"0:225","path":"::io::async_write"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_write_vectored","poll_write_vectored"],"trait":{"kind":"resolved_path","inner":{"name":"AsyncWrite","id":"0:246","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"io::Cursor","id":"1:10649","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7429","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"items":["0:285","0:286","0:287","0:288","0:289"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:389":{"id":"0:389","crate_id":0,"name":null,"span":{"filename":"src/net/addr.rs","begin":[50,0],"end":[50,36]},"visibility":{"restricted":{"parent":"0:353","path":"::net::addr"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"ToSocketAddrs","id":"0:379","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"SocketAddr","id":"1:10923","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:784":{"id":"0:784","crate_id":0,"name":"start_seek","span":{"filename":"src/io/async_seek.rs","begin":[66,4],"end":[66,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["pos",{"kind":"resolved_path","inner":{"name":"SeekFrom","id":"1:10865","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3938","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9893":{"id":"2:9893","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9894"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3399":{"id":"2:3399","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3401"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3402","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:142":{"id":"0:142","crate_id":0,"name":"poll_fill_buf","span":{"filename":"src/io/async_buf_read.rs","begin":[110,4],"end":[112,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["_cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:49772","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3938","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8904":{"id":"2:8904","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3277":{"id":"2:3277","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3279","2:3280"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:126":{"id":"0:126","crate_id":0,"name":"poll_fill_buf","span":{"filename":"src/io/async_buf_read.rs","begin":[45,4],"end":[45,92]},"visibility":"default","docs":"Attempts to return the contents of the internal buffer, filling it with more data\nfrom the inner reader if it is empty.\n\nOn success, returns `Poll::Ready(Ok(buf))`.\n\nIf no data is available for reading, the method returns\n`Poll::Pending` and arranges for the current task (via\n`cx.waker().wake_by_ref()`) to receive a notification when the object becomes\nreadable or is closed.\n\nThis function is a lower-level call. It needs to be paired with the\n[`consume`] method to function properly. When calling this\nmethod, none of the contents will be \"read\" in the sense that later\ncalling [`poll_read`] may return the same contents. As such, [`consume`] must\nbe called with the number of bytes that are consumed from this buffer to\nensure that the bytes are never returned twice.\n\nAn empty buffer returned indicates that the stream has reached EOF.\n\n[`poll_read`]: AsyncRead::poll_read\n[`consume`]: AsyncBufRead::consume","links":{"AsyncBufRead::consume":"0:127","AsyncRead::poll_read":"0:168"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:49772","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3938","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:12975":{"id":"2:12975","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:46923"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:46923","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10500","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10500","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:4517":{"id":"2:4517","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4518","2:4519","2:4520"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:170":{"id":"0:170","crate_id":0,"name":null,"span":{"filename":"src/io/async_read.rs","begin":[72,0],"end":[74,1]},"visibility":{"restricted":{"parent":"0:147","path":"::io::async_read"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3155","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncRead","id":"0:167","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3191","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsyncRead","id":"0:167","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:421","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:780"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2802":{"id":"2:2802","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2804","2:2805"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3155","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementations":[]}},"2:2985":{"id":"2:2985","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:2984","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3396":{"id":"2:3396","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3398"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3399","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3159":{"id":"2:3159","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9903":{"id":"2:9903","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9904"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:257":{"id":"0:257","crate_id":0,"name":null,"span":{"filename":"src/io/async_write.rs","begin":[221,0],"end":[223,1]},"visibility":{"restricted":{"parent":"0:225","path":"::io::async_write"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3155","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncWrite","id":"0:246","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3191","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_write_vectored","poll_write_vectored"],"trait":{"kind":"resolved_path","inner":{"name":"AsyncWrite","id":"0:246","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"items":["0:791","0:792","0:793","0:794","0:795"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:352":{"id":"0:352","crate_id":0,"name":"net","span":{"filename":"src/net/mod.rs","begin":[1,0],"end":[52,1]},"visibility":"public","docs":"TCP/UDP/Unix bindings for `tokio`.\n\nThis module contains the TCP/UDP/Unix networking types, similar to the standard\nlibrary, which can be used to implement networking protocols.\n\n# Organization\n\n* [`TcpListener`] and [`TcpStream`] provide functionality for communication over TCP\n* [`UdpSocket`] provides functionality for communication over UDP\n* [`UnixListener`] and [`UnixStream`] provide functionality for communication over a\nUnix Domain Stream Socket **(available on Unix only)**\n* [`UnixDatagram`] provides functionality for communication\nover Unix Domain Datagram Socket **(available on Unix only)**\n\n[`TcpListener`]: TcpListener\n[`TcpStream`]: TcpStream\n[`UdpSocket`]: UdpSocket\n[`UnixListener`]: UnixListener\n[`UnixStream`]: UnixStream\n[`UnixDatagram`]: UnixDatagram","links":{},"attrs":["#![cfg(not(loom))]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:379"]}},"0:320":{"id":"0:320","crate_id":0,"name":"initialized_mut","span":{"filename":"src/io/read_buf.rs","begin":[101,4],"end":[106,5]},"visibility":"public","docs":"Returns a mutable reference to the initialized portion of the buffer.\n\nThis includes the filled portion.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:214":{"id":"0:214","crate_id":0,"name":null,"span":{"filename":"src/io/async_seek.rs","begin":[69,0],"end":[81,1]},"visibility":{"restricted":{"parent":"0:185","path":"::io::async_seek"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DerefMut","id":"2:3382","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3191","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:3369","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncSeek","id":"0:206","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsyncSeek","id":"0:206","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"items":["0:216","0:217"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:776":{"id":"0:776","crate_id":0,"name":"poll_fill_buf","span":{"filename":"src/io/async_buf_read.rs","begin":[78,4],"end":[78,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:49772","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3938","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6316":{"id":"1:6316","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6317","1:6318","1:6319","1:6320","1:6322","1:6324","1:6325","1:6327"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10350","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:22411":{"id":"2:22411","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22401","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:207":{"id":"0:207","crate_id":0,"name":"start_seek","span":{"filename":"src/io/async_seek.rs","begin":[33,4],"end":[33,78]},"visibility":"default","docs":"Attempts to seek to an offset, in bytes, in a stream.\n\nA seek beyond the end of a stream is allowed, but behavior is defined\nby the implementation.\n\nIf this function returns successfully, then the job has been submitted.\nTo find out when it completes, call `poll_complete`.\n\n# Errors\n\nThis function can return [`io::ErrorKind::Other`] in case there is\nanother seek in progress. To avoid this, it is advisable that any call\nto `start_seek` is preceded by a call to `poll_complete` to ensure all\npending seeks have completed.","links":{"`io::ErrorKind::Other`":"1:10729"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["position",{"kind":"resolved_path","inner":{"name":"SeekFrom","id":"1:10865","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3938","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:288":{"id":"0:288","crate_id":0,"name":"poll_flush","span":{"filename":"src/io/async_write.rs","begin":[371,4],"end":[373,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:49772","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3938","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:275":{"id":"0:275","crate_id":0,"name":"is_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[307,4],"end":[309,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3261":{"id":"2:3261","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3263"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:176":{"id":"0:176","crate_id":0,"name":"poll_read","span":{"filename":"src/io/async_read.rs","begin":[85,4],"end":[91,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:306","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:49772","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3938","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5769":{"id":"5:5769","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8050"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8050","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:324":{"id":"0:324","crate_id":0,"name":"initialize_unfilled_to","span":{"filename":"src/io/read_buf.rs","begin":[155,4],"end":[174,5]},"visibility":"public","docs":"Returns a mutable reference to the first `n` bytes of the unfilled part of the buffer, ensuring it is\nfully initialized.\n\n# Panics\n\nPanics if `self.remaining()` is less than `n`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:294":{"id":"0:294","crate_id":0,"name":"poll_flush","span":{"filename":"src/io/async_write.rs","begin":[401,4],"end":[403,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:49772","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3938","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:269":{"id":"0:269","crate_id":0,"name":"is_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[277,4],"end":[279,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:382":{"id":"0:382","crate_id":0,"name":null,"span":{"filename":"src/net/addr.rs","begin":[34,0],"end":[34,55]},"visibility":{"restricted":{"parent":"0:353","path":"::net::addr"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ToSocketAddrs","id":"0:379","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3155","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"ToSocketAddrs","id":"0:379","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:7975":{"id":"2:7975","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7976","2:7977","2:7978"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12989":{"id":"2:12989","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:48858","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:247":{"id":"0:247","crate_id":0,"name":"poll_write","span":{"filename":"src/io/async_write.rs","begin":[58,4],"end":[62,40]},"visibility":"default","docs":"Attempt to write bytes from `buf` into the object.\n\nOn success, returns `Poll::Ready(Ok(num_bytes_written))`. If successful,\nthen it must be guaranteed that `n <= buf.len()`. A return value of `0`\ntypically means that the underlying object is no longer able to accept\nbytes and will likely not be able to in the future as well, or that the\nbuffer provided is empty.\n\nIf the object is not ready for writing, the method returns\n`Poll::Pending` and arranges for the current task (via\n`cx.waker()`) to receive a notification when the object becomes\nwritable or is closed.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:49772","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47050","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}},{"type":{"kind":"resolved_path","inner":{"name":"io::Error","id":"1:3940","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:13051":{"id":"2:13051","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13048":{"id":"2:13048","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"prim@char":"1:15638","`DoubleEndedIterator`":"2:8019","str::match_indices":"1:15643","self::pattern":"2:12599"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49040","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12609","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12609","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12624","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:270":{"id":"0:270","crate_id":0,"name":"poll_flush","span":{"filename":"src/io/async_write.rs","begin":[281,4],"end":[283,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["_cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:49772","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3938","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3369":{"id":"2:3369","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3370","2:3371"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3239":{"id":"2:3239","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3241","2:3242"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:266":{"id":"0:266","crate_id":0,"name":null,"span":{"filename":"src/io/async_write.rs","begin":[259,0],"end":[288,1]},"visibility":{"restricted":{"parent":"0:225","path":"::io::async_write"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_write_vectored","poll_write_vectored"],"trait":{"kind":"resolved_path","inner":{"name":"AsyncWrite","id":"0:246","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7429","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}},"param_names":[]}},"items":["0:267","0:268","0:269","0:270","0:271"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:790":{"id":"0:790","crate_id":0,"name":"poll_shutdown","span":{"filename":"src/io/async_write.rs","begin":[218,4],"end":[218,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:49772","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3938","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13004":{"id":"2:13004","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"prim@char":"1:15638","`None`":"2:46923","self::pattern":"2:12599"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:46923","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12609","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:255":{"id":"0:255","crate_id":0,"name":null,"span":{"filename":"src/io/async_write.rs","begin":[217,0],"end":[219,1]},"visibility":{"restricted":{"parent":"0:225","path":"::io::async_write"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3155","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncWrite","id":"0:246","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3191","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_write_vectored","poll_write_vectored"],"trait":{"kind":"resolved_path","inner":{"name":"AsyncWrite","id":"0:246","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:421","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:786","0:787","0:788","0:789","0:790"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:8170":{"id":"2:8170","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8171","2:8172","2:8173","2:8174","2:8176","2:8179","2:8180","2:8181","2:8182","2:8184","2:8186","2:8187","2:8189","2:8192","2:8199","2:8201","2:8204","2:8205","2:8206","2:8208","2:8210","2:8213","2:8214","2:8215","2:8219","2:8222","2:8223","2:8224","2:8226","2:8227","2:8229","2:8232","2:8234","2:8244","2:8259","2:8261","2:8265","2:8274","2:8277","2:8279","2:8282","2:8289","2:8296","2:8303","2:8312","2:8322","2:8329","2:8336","2:8337","2:8338","2:8350","2:8357","2:8369","2:8376","2:8377","2:8382","2:8385","2:8388","2:8389","2:8391","2:8393","2:8396","2:8399","2:8402","2:8405","2:8408","2:8411","2:8413","2:8415","2:8417","2:8419","2:8421","2:8422","2:8430"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2838":{"id":"2:2838","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2839","2:2840","2:2841","2:2842"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2807","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2848","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13058":{"id":"2:13058","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12993":{"id":"2:12993","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49136","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2753-0:306":{"id":"b:2:2753-0:306","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3155","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2747","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:2755"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12977":{"id":"2:12977","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:46923"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:46923","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10500","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10500","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10500":{"id":"2:10500","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:10502","2:10503","2:10504","2:10505","2:10506","2:10507","2:10508"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3155","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:10491","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:321":{"id":"0:321","crate_id":0,"name":"inner_mut","span":{"filename":"src/io/read_buf.rs","begin":[123,4],"end":[125,5]},"visibility":"public","docs":"Returns a mutable reference to the entire buffer, without ensuring that it has been fully\ninitialized.\n\nThe elements between 0 and `self.filled().len()` are filled, and those between 0 and\n`self.initialized().len()` are initialized (and so can be converted to a `&mut [u8]`).\n\nThe caller of this method must ensure that these invariants are upheld. For example, if the\ncaller initializes some of the uninitialized section of the buffer, it must call\n[`assume_init`](Self::assume_init) with the number of bytes initialized.\n\n# Safety\n\nThe caller must not de-initialize portions of the buffer that have already been initialized.\nThis includes any bytes in the region marked as uninitialized by `ReadBuf`.","links":{"Self::assume_init":"0:306"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninit","id":"2:31811","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}},"param_names":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:22560":{"id":"2:22560","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:22561","2:22562","2:22563"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22553","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:23254":{"id":"2:23254","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:23255"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23250","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3160","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:264":{"id":"0:264","crate_id":0,"name":"poll_flush","span":{"filename":"src/io/async_write.rs","begin":[250,4],"end":[252,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:49772","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3938","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13024":{"id":"2:13024","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"prim@char":"1:15638","self::pattern":"2:12599","str::split_terminator":"1:15643","str::split":"1:15643"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:48940","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12609","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12609","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12624","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:181":{"id":"0:181","crate_id":0,"name":"poll_read","span":{"filename":"src/io/async_read.rs","begin":[109,4],"end":[130,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["_cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:306","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:49772","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3938","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:129":{"id":"0:129","crate_id":0,"name":null,"span":{"filename":"src/io/async_buf_read.rs","begin":[77,0],"end":[79,1]},"visibility":{"restricted":{"parent":"0:105","path":"::io::async_buf_read"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3155","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncBufRead","id":"0:125","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3191","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsyncBufRead","id":"0:125","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:421","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:776","0:777"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:5622":{"id":"1:5622","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5623","1:5624","1:5625","1:5626","1:5627","1:5628","1:5629","1:5630","1:5631","1:5632","1:5633","1:5634","1:5635","1:5636","1:5637","1:5638"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12971":{"id":"2:12971","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12070"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13086":{"id":"2:13086","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:15638"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:49171","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:248":{"id":"0:248","crate_id":0,"name":"poll_flush","span":{"filename":"src/io/async_write.rs","begin":[73,4],"end":[73,93]},"visibility":"default","docs":"Attempts to flush the object, ensuring that any buffered data reach\ntheir destination.\n\nOn success, returns `Poll::Ready(Ok(()))`.\n\nIf flushing cannot immediately complete, this method returns\n`Poll::Pending` and arranges for the current task (via\n`cx.waker()`) to receive a notification when the object can make\nprogress towards flushing.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:49772","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47050","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"io::Error","id":"1:3940","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:9891":{"id":"2:9891","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9892"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12986":{"id":"2:12986","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:15643"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2772":{"id":"2:2772","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2773","2:2774"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5670":{"id":"1:5670","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5671"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10350","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3158":{"id":"2:3158","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6666":{"id":"1:6666","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6667","1:6668"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10350","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:273":{"id":"0:273","crate_id":0,"name":"poll_write","span":{"filename":"src/io/async_write.rs","begin":[291,4],"end":[297,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:49772","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3938","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3050":{"id":"2:3050","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3052"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3155","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementations":[]}},"2:13327":{"id":"2:13327","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13328","2:13329","2:13330"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2807":{"id":"2:2807","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2802","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:12963":{"id":"2:12963","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15638"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5534":{"id":"1:5534","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5535","1:5536"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10350","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:12965":{"id":"2:12965","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13057":{"id":"2:13057","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3382":{"id":"2:3382","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3383"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3369","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3617":{"id":"2:3617","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3619"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5771":{"id":"5:5771","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8050"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8050","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:280":{"id":"0:280","crate_id":0,"name":"poll_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[329,4],"end":[335,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10853","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:49772","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3938","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:795":{"id":"0:795","crate_id":0,"name":"poll_shutdown","span":{"filename":"src/io/async_write.rs","begin":[222,4],"end":[222,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:49772","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3938","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:139":{"id":"0:139","crate_id":0,"name":"consume","span":{"filename":"src/io/async_buf_read.rs","begin":[104,4],"end":[106,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["amt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5750":{"id":"5:5750","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:421","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7755","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:421","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:7755","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12618":{"id":"2:12618","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:12620","2:12621","2:12622","2:12623"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:781":{"id":"0:781","crate_id":0,"name":"poll_read","span":{"filename":"src/io/async_read.rs","begin":[77,4],"end":[77,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:306","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:49772","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3938","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13080":{"id":"2:13080","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:12538","FromStr::Err":"2:12539"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47050","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12538","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12538","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:414":{"id":"0:414","crate_id":0,"name":null,"span":{"filename":"src/net/addr.rs","begin":[118,0],"end":[118,41]},"visibility":{"restricted":{"parent":"0:353","path":"::net::addr"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"ToSocketAddrs","id":"0:379","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"Ipv6Addr","id":"1:10980","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},{"kind":"primitive","inner":"u16"}]},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13015":{"id":"2:13015","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:15638","self::pattern":"2:12599"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:12391","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12609","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6338":{"id":"1:6338","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6339","1:6340","1:6341","1:6342","1:6343","1:6344"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10350","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3150":{"id":"2:3150","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12988":{"id":"2:12988","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15638"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:48848","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13039":{"id":"2:13039","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"str::matches":"1:15643","`DoubleEndedIterator`":"2:8019","prim@char":"1:15638","self::pattern":"2:12599"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49076","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12609","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:7938":{"id":"2:7938","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7940"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3063":{"id":"2:3063","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3065","2:3066"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:0":{"id":"0:0","crate_id":0,"name":"tokio","span":{"filename":"src/lib.rs","begin":[1,0],"end":[567,26]},"visibility":"public","docs":"A runtime for writing reliable network applications without compromising speed.\n\nTokio is an event-driven, non-blocking I/O platform for writing asynchronous\napplications with the Rust programming language. At a high level, it\nprovides a few major components:\n\n* Tools for [working with asynchronous tasks][tasks], including\n  [synchronization primitives and channels][sync] and [timeouts, sleeps, and\n  intervals][time].\n* APIs for [performing asynchronous I/O][io], including [TCP and UDP][net] sockets,\n  [filesystem][fs] operations, and [process] and [signal] management.\n* A [runtime] for executing asynchronous code, including a task scheduler,\n  an I/O driver backed by the operating system's event queue (epoll, kqueue,\n  IOCP, etc...), and a high performance timer.\n\nGuide level documentation is found on the [website].\n\n[tasks]: #working-with-tasks\n[sync]: crate::sync\n[time]: crate::time\n[io]: #asynchronous-io\n[net]: crate::net\n[fs]: crate::fs\n[process]: crate::process\n[signal]: crate::signal\n[fs]: crate::fs\n[runtime]: crate::runtime\n[website]: https://tokio.rs/tokio/tutorial\n\n# A Tour of Tokio\n\nTokio consists of a number of modules that provide a range of functionality\nessential for implementing asynchronous applications in Rust. In this\nsection, we will take a brief tour of Tokio, summarizing the major APIs and\ntheir uses.\n\nThe easiest way to get started is to enable all features. Do this by\nenabling the `full` feature flag:\n\n```toml\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n### Authoring applications\n\nTokio is great for writing applications and most users in this case shouldn't\nworry too much about what features they should pick. If you're unsure, we suggest\ngoing with `full` to ensure that you don't run into any road blocks while you're\nbuilding your application.\n\n#### Example\n\nThis example shows the quickest way to get started with Tokio.\n\n```toml\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n### Authoring libraries\n\nAs a library author your goal should be to provide the lightest weight crate\nthat is based on Tokio. To achieve this you should ensure that you only enable\nthe features you need. This allows users to pick up your crate without having\nto enable unnecessary features.\n\n#### Example\n\nThis example shows how you may want to import features for a library that just\nneeds to `tokio::spawn` and use a `TcpStream`.\n\n```toml\ntokio = { version = \"1\", features = [\"rt\", \"net\"] }\n```\n\n## Working With Tasks\n\nAsynchronous programs in Rust are based around lightweight, non-blocking\nunits of execution called [_tasks_][tasks]. The [`tokio::task`] module provides\nimportant tools for working with tasks:\n\n* The [`spawn`] function and [`JoinHandle`] type, for scheduling a new task\n  on the Tokio runtime and awaiting the output of a spawned task, respectively,\n* Functions for [running blocking operations][blocking] in an asynchronous\n  task context.\n\nThe [`tokio::task`] module is present only when the \"rt\" feature flag\nis enabled.\n\n[tasks]: task/index.html#what-are-tasks\n[`tokio::task`]: crate::task\n[`spawn`]: crate::task::spawn()\n[`JoinHandle`]: crate::task::JoinHandle\n[blocking]: task/index.html#blocking-and-yielding\n\nThe [`tokio::sync`] module contains synchronization primitives to use when\nneeding to communicate or share data. These include:\n\n* channels ([`oneshot`], [`mpsc`], and [`watch`]), for sending values\n  between tasks,\n* a non-blocking [`Mutex`], for controlling access to a shared, mutable\n  value,\n* an asynchronous [`Barrier`] type, for multiple tasks to synchronize before\n  beginning a computation.\n\nThe `tokio::sync` module is present only when the \"sync\" feature flag is\nenabled.\n\n[`tokio::sync`]: crate::sync\n[`Mutex`]: crate::sync::Mutex\n[`Barrier`]: crate::sync::Barrier\n[`oneshot`]: crate::sync::oneshot\n[`mpsc`]: crate::sync::mpsc\n[`watch`]: crate::sync::watch\n\nThe [`tokio::time`] module provides utilities for tracking time and\nscheduling work. This includes functions for setting [timeouts][timeout] for\ntasks, [sleeping][sleep] work to run in the future, or [repeating an operation at an\ninterval][interval].\n\nIn order to use `tokio::time`, the \"time\" feature flag must be enabled.\n\n[`tokio::time`]: crate::time\n[sleep]: crate::time::sleep()\n[interval]: crate::time::interval()\n[timeout]: crate::time::timeout()\n\nFinally, Tokio provides a _runtime_ for executing asynchronous tasks. Most\napplications can use the [`#[tokio::main]`][main] macro to run their code on the\nTokio runtime. However, this macro provides only basic configuration options. As\nan alternative, the [`tokio::runtime`] module provides more powerful APIs for configuring\nand managing runtimes. You should use that module if the `#[tokio::main]` macro doesn't\nprovide the functionality you need.\n\nUsing the runtime requires the \"rt\" or \"rt-multi-thread\" feature flags, to\nenable the basic [single-threaded scheduler][rt] and the [thread-pool\nscheduler][rt-multi-thread], respectively. See the [`runtime` module\ndocumentation][rt-features] for details. In addition, the \"macros\" feature\nflag enables the `#[tokio::main]` and `#[tokio::test]` attributes.\n\n[main]: attr.main.html\n[`tokio::runtime`]: crate::runtime\n[`Builder`]: crate::runtime::Builder\n[`Runtime`]: crate::runtime::Runtime\n[rt]: runtime/index.html#current-thread-scheduler\n[rt-multi-thread]: runtime/index.html#multi-thread-scheduler\n[rt-features]: runtime/index.html#runtime-scheduler\n\n## CPU-bound tasks and blocking code\n\nTokio is able to concurrently run many tasks on a few threads by repeatedly\nswapping the currently running task on each thread. However, this kind of\nswapping can only happen at `.await` points, so code that spends a long time\nwithout reaching an `.await` will prevent other tasks from running. To\ncombat this, Tokio provides two kinds of threads: Core threads and blocking\nthreads. The core threads are where all asynchronous code runs, and Tokio\nwill by default spawn one for each CPU core. The blocking threads are\nspawned on demand, can be used to run blocking code that would otherwise\nblock other tasks from running and are kept alive when not used for a certain\namount of time which can be configured with [`thread_keep_alive`].\nSince it is not possible for Tokio to swap out blocking tasks, like it\ncan do with asynchronous code, the upper limit on the number of blocking\nthreads is very large. These limits can be configured on the [`Builder`].\n\nTo spawn a blocking task, you should use the [`spawn_blocking`] function.\n\n[`Builder`]: crate::runtime::Builder\n[`spawn_blocking`]: crate::task::spawn_blocking()\n[`thread_keep_alive`]: crate::runtime::Builder::thread_keep_alive()\n\n```\n#[tokio::main]\nasync fn main() {\n    // This is running on a core thread.\n\n    let blocking_task = tokio::task::spawn_blocking(|| {\n        // This is running on a blocking thread.\n        // Blocking here is ok.\n    });\n\n    // We can wait for the blocking task like this:\n    // If the blocking task panics, the unwrap below will propagate the\n    // panic.\n    blocking_task.await.unwrap();\n}\n```\n\nIf your code is CPU-bound and you wish to limit the number of threads used\nto run it, you should use a separate thread pool dedicated to CPU bound tasks.\nFor example, you could consider using the [rayon] library for CPU-bound\ntasks. It is also possible to create an extra Tokio runtime dedicated to\nCPU-bound tasks, but if you do this, you should be careful that the extra\nruntime runs _only_ CPU-bound tasks, as IO-bound tasks on that runtime\nwill behave poorly.\n\nHint: If using rayon, you can use a [`oneshot`] channel to send the result back\nto Tokio when the rayon task finishes.\n\n[rayon]: https://docs.rs/rayon\n[`oneshot`]: crate::sync::oneshot\n\n## Asynchronous IO\n\nAs well as scheduling and running tasks, Tokio provides everything you need\nto perform input and output asynchronously.\n\nThe [`tokio::io`] module provides Tokio's asynchronous core I/O primitives,\nthe [`AsyncRead`], [`AsyncWrite`], and [`AsyncBufRead`] traits. In addition,\nwhen the \"io-util\" feature flag is enabled, it also provides combinators and\nfunctions for working with these traits, forming as an asynchronous\ncounterpart to [`std::io`].\n\nTokio also includes APIs for performing various kinds of I/O and interacting\nwith the operating system asynchronously. These include:\n\n* [`tokio::net`], which contains non-blocking versions of [TCP], [UDP], and\n  [Unix Domain Sockets][UDS] (enabled by the \"net\" feature flag),\n* [`tokio::fs`], similar to [`std::fs`] but for performing filesystem I/O\n  asynchronously (enabled by the \"fs\" feature flag),\n* [`tokio::signal`], for asynchronously handling Unix and Windows OS signals\n  (enabled by the \"signal\" feature flag),\n* [`tokio::process`], for spawning and managing child processes (enabled by\n  the \"process\" feature flag).\n\n[`tokio::io`]: crate::io\n[`AsyncRead`]: crate::io::AsyncRead\n[`AsyncWrite`]: crate::io::AsyncWrite\n[`AsyncBufRead`]: crate::io::AsyncBufRead\n[`std::io`]: std::io\n[`tokio::net`]: crate::net\n[TCP]: crate::net::tcp\n[UDP]: crate::net::UdpSocket\n[UDS]: crate::net::unix\n[`tokio::fs`]: crate::fs\n[`std::fs`]: std::fs\n[`tokio::signal`]: crate::signal\n[`tokio::process`]: crate::process\n\n# Examples\n\nA simple TCP echo server:\n\n```no_run\nuse tokio::net::TcpListener;\nuse tokio::io::{AsyncReadExt, AsyncWriteExt};\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let listener = TcpListener::bind(\"127.0.0.1:8080\").await?;\n\n    loop {\n        let (mut socket, _) = listener.accept().await?;\n\n        tokio::spawn(async move {\n            let mut buf = [0; 1024];\n\n            // In a loop, read data from the socket and write the data back.\n            loop {\n                let n = match socket.read(&mut buf).await {\n                    // socket closed\n                    Ok(n) if n == 0 => return,\n                    Ok(n) => n,\n                    Err(e) => {\n                        eprintln!(\"failed to read from socket; err = {:?}\", e);\n                        return;\n                    }\n                };\n\n                // Write the data back\n                if let Err(e) = socket.write_all(&buf[0..n]).await {\n                    eprintln!(\"failed to write to socket; err = {:?}\", e);\n                    return;\n                }\n            }\n        });\n    }\n}\n```\n\n## Feature flags\n\nTokio uses a set of [feature flags] to reduce the amount of compiled code. It\nis possible to just enable certain features over others. By default, Tokio\ndoes not enable any features but allows one to enable a subset for their use\ncase. Below is a list of the available feature flags. You may also notice\nabove each function, struct and trait there is listed one or more feature flags\nthat are required for that item to be used. If you are new to Tokio it is\nrecommended that you use the `full` feature flag which will enable all public APIs.\nBeware though that this will pull in many extra dependencies that you may not\nneed.\n\n- `full`: Enables all features listed below except `test-util` and `tracing`.\n- `rt`: Enables `tokio::spawn`, the basic (current thread) scheduler,\n        and non-scheduler utilities.\n- `rt-multi-thread`: Enables the heavier, multi-threaded, work-stealing scheduler.\n- `io-util`: Enables the IO based `Ext` traits.\n- `io-std`: Enable `Stdout`, `Stdin` and `Stderr` types.\n- `net`: Enables `tokio::net` types such as `TcpStream`, `UnixStream` and\n         `UdpSocket`, as well as (on Unix-like systems) `AsyncFd` and (on\n         FreeBSD) `PollAio`.\n- `time`: Enables `tokio::time` types and allows the schedulers to enable\n          the built in timer.\n- `process`: Enables `tokio::process` types.\n- `macros`: Enables `#[tokio::main]` and `#[tokio::test]` macros.\n- `sync`: Enables all `tokio::sync` types.\n- `signal`: Enables all `tokio::signal` types.\n- `fs`: Enables `tokio::fs` types.\n- `test-util`: Enables testing based infrastructure for the Tokio runtime.\n\n_Note: `AsyncRead` and `AsyncWrite` traits do not require any features and are\nalways available._\n\n### Internal features\n\nThese features do not expose any new API, but influence internal\nimplementation aspects of Tokio, and can pull in additional\ndependencies.\n\n- `parking_lot`: As a potential optimization, use the _parking_lot_ crate's\nsynchronization primitives internally. MSRV may increase according to the\n_parking_lot_ release in use.\n\n### Unstable features\n\nSome feature flags are only available when specifying the `tokio_unstable` flag:\n\n- `tracing`: Enables tracing events.\n\nLikewise, some parts of the API are only available with the same flag:\n\n- [`task::JoinSet`]\n- [`task::Builder`]\n  \nThis flag enables **unstable** features. The public API of these features\nmay break in 1.x releases. To enable these features, the `--cfg\ntokio_unstable` argument must be passed to `rustc` when compiling. This\nserves to explicitly opt-in to features which may break semver conventions,\nsince Cargo [does not yet directly support such opt-ins][unstable features].\n\nYou can specify it in your project's `.cargo/config.toml` file:\n\n```toml\n[build]\nrustflags = [\"--cfg\", \"tokio_unstable\"]\n```\n\nAlternatively, you can specify it with an environment variable:\n\n```sh\n## Many *nix shells:\nexport RUSTFLAGS=\"--cfg tokio_unstable\"\ncargo build\n```\n\n```powershell\n## Windows PowerShell:\n$Env:RUSTFLAGS=\"--cfg tokio_unstable\"\ncargo build\n```\n\n[unstable features]: https://internals.rust-lang.org/t/feature-request-unstable-opt-in-non-transitive-crate-features/16193#why-not-a-crate-feature-2\n[feature flags]: https://doc.rust-lang.org/cargo/reference/manifest.html#the-features-section","links":{"crate::io::AsyncBufRead":"0:125","crate::sync":"0:826","std::fs":"1:3035","crate::net":"0:352","crate::io::AsyncWrite":"0:246","crate::task":"0:769","std::io":"1:3261","crate::io":"0:104","crate::io::AsyncRead":"0:167"},"attrs":["#![allow(clippy :: cognitive_complexity, clippy :: large_enum_variant, clippy\n:: needless_doctest_main)]","#![warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\nunreachable_pub)]","#![deny(unused_must_use)]","#![doc(test(no_crate_inject,\nattr(deny(warnings, rust_2018_idioms), allow(dead_code, unused_variables))))]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:104","0:352","0:769","0:772","0:53"]}},"2:3312":{"id":"2:3312","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3314"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12992":{"id":"2:12992","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49126","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3316":{"id":"2:3316","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3318"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:250":{"id":"0:250","crate_id":0,"name":"poll_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[158,4],"end":[168,5]},"visibility":"default","docs":"Like [`poll_write`], except that it writes from a slice of buffers.\n\nData is copied from each buffer in order, with the final buffer\nread from possibly being only partially consumed. This method must\nbehave as a call to [`write`] with the buffers concatenated would.\n\nThe default implementation calls [`poll_write`] with either the first nonempty\nbuffer provided, or an empty one if none exists.\n\nOn success, returns `Poll::Ready(Ok(num_bytes_written))`.\n\nIf the object is not ready for writing, the method returns\n`Poll::Pending` and arranges for the current task (via\n`cx.waker()`) to receive a notification when the object becomes\nwritable or is closed.\n\n# Note\n\nThis should be implemented as a single \"atomic\" write action. If any\ndata has been partially written, it is wrong to return an error or\npending.\n\n[`poll_write`]: AsyncWrite::poll_write","links":{"AsyncWrite::poll_write":"0:247","`write`":"2:14"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10853","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:49772","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47050","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}},{"type":{"kind":"resolved_path","inner":{"name":"io::Error","id":"1:3940","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3308":{"id":"2:3308","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3310"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3877":{"id":"2:3877","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3878"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"0:409":{"id":"0:409","crate_id":0,"name":null,"span":{"filename":"src/net/addr.rs","begin":[104,0],"end":[104,41]},"visibility":{"restricted":{"parent":"0:353","path":"::net::addr"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"ToSocketAddrs","id":"0:379","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"Ipv4Addr","id":"1:10977","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},{"kind":"primitive","inner":"u16"}]},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3160":{"id":"2:3160","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2772","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13021":{"id":"2:13021","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12599","prim@char":"1:15638","str::split":"1:15643","`DoubleEndedIterator`":"2:8019","str::rsplit_terminator":"1:15643"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:48922","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12609","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12972":{"id":"2:12972","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:314":{"id":"0:314","crate_id":0,"name":"uninit","span":{"filename":"src/io/read_buf.rs","begin":[46,4],"end":[52,5]},"visibility":"public","docs":"Creates a new `ReadBuf` from a fully uninitialized buffer.\n\nUse `assume_init` if part of the buffer is known to be already initialized.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninit","id":"2:31811","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}},"param_names":[]}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13045":{"id":"2:13045","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"prim@char":"1:15638","self::pattern":"2:12599","`DoubleEndedIterator`":"2:8019","str::rmatch_indices":"1:15643"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49022","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12609","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13062":{"id":"2:13062","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:12599","prim@char":"1:15638"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12609","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2755":{"id":"2:2755","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3436":{"id":"2:3436","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3438","2:3439","2:3440"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:291":{"id":"0:291","crate_id":0,"name":"poll_write","span":{"filename":"src/io/async_write.rs","begin":[381,4],"end":[387,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:49772","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3938","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:318":{"id":"0:318","crate_id":0,"name":"take","span":{"filename":"src/io/read_buf.rs","begin":[80,4],"end":[84,5]},"visibility":"public","docs":"Returns a new `ReadBuf` comprised of the unfilled section up to `n`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:306","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:136":{"id":"0:136","crate_id":0,"name":"consume","span":{"filename":"src/io/async_buf_read.rs","begin":[94,4],"end":[96,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["amt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12981":{"id":"2:12981","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10500","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10500","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:212":{"id":"0:212","crate_id":0,"name":null,"span":{"filename":"src/io/async_seek.rs","begin":[65,0],"end":[67,1]},"visibility":{"restricted":{"parent":"0:185","path":"::io::async_seek"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3155","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncSeek","id":"0:206","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3191","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsyncSeek","id":"0:206","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"items":["0:784","0:785"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:779":{"id":"0:779","crate_id":0,"name":"consume","span":{"filename":"src/io/async_buf_read.rs","begin":[82,4],"end":[82,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["amt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:789":{"id":"0:789","crate_id":0,"name":"poll_flush","span":{"filename":"src/io/async_write.rs","begin":[218,4],"end":[218,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:49772","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3938","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3079-0:306":{"id":"b:2:3079-0:306","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3056","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3053","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3082"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:6436":{"id":"1:6436","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6437","1:6438"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:326":{"id":"0:326","crate_id":0,"name":"clear","span":{"filename":"src/io/read_buf.rs","begin":[186,4],"end":[188,5]},"visibility":"public","docs":"Clears the buffer, resetting the filled region to empty.\n\nThe number of initialized bytes is not changed, and the contents of the buffer are not modified.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8905":{"id":"2:8905","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13312":{"id":"2:13312","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13313","2:13314"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5678":{"id":"1:5678","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5679"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:137":{"id":"0:137","crate_id":0,"name":null,"span":{"filename":"src/io/async_buf_read.rs","begin":[99,0],"end":[107,1]},"visibility":{"restricted":{"parent":"0:105","path":"::io::async_buf_read"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsyncBufRead","id":"0:125","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"items":["0:138","0:139"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:8448":{"id":"2:8448","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8170","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10107":{"id":"2:10107","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10108","2:10109","2:10110","2:10111","2:10112","2:10113","2:10114","2:10115","2:10116","2:10117","2:10118","2:10119","2:10120","2:10121","2:10122","2:10123"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13055":{"id":"2:13055","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:292":{"id":"0:292","crate_id":0,"name":"poll_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[389,4],"end":[395,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10853","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:49772","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3938","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:216":{"id":"0:216","crate_id":0,"name":"start_seek","span":{"filename":"src/io/async_seek.rs","begin":[74,4],"end":[76,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["pos",{"kind":"resolved_path","inner":{"name":"SeekFrom","id":"1:10865","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3938","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3053":{"id":"2:3053","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3055"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:174":{"id":"0:174","crate_id":0,"name":null,"span":{"filename":"src/io/async_read.rs","begin":[80,0],"end":[92,1]},"visibility":{"restricted":{"parent":"0:147","path":"::io::async_read"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DerefMut","id":"2:3382","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3191","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:3369","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncRead","id":"0:167","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsyncRead","id":"0:167","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"items":["0:176"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:10142":{"id":"2:10142","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10143","2:10144","2:10145"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:8905-0:306":{"id":"a:2:8905-0:306","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:8905","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:4587":{"id":"1:4587","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4588","1:4589","1:4590","1:4591"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3282":{"id":"2:3282","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3284","2:3285"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:315":{"id":"0:315","crate_id":0,"name":"capacity","span":{"filename":"src/io/read_buf.rs","begin":[56,4],"end":[58,5]},"visibility":"public","docs":"Returns the total capacity of the buffer.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:179":{"id":"0:179","crate_id":0,"name":null,"span":{"filename":"src/io/async_read.rs","begin":[108,0],"end":[131,1]},"visibility":{"restricted":{"parent":"0:147","path":"::io::async_read"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"2:3047","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3191","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsyncRead","id":"0:167","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"io::Cursor","id":"1:10649","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:181"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:12984":{"id":"2:12984","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:15643","str::slice_unchecked":"1:15643","crate::ops::IndexMut":"2:3458"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:12983":{"id":"2:12983","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"crate::ops::Index":"2:3454","str::slice_mut_unchecked":"1:15643","`str`":"1:15643"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:287":{"id":"0:287","crate_id":0,"name":"is_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[367,4],"end":[369,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:7654":{"id":"1:7654","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7655"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:208":{"id":"0:208","crate_id":0,"name":"poll_complete","span":{"filename":"src/io/async_seek.rs","begin":[46,4],"end":[46,90]},"visibility":"default","docs":"Waits for a seek operation to complete.\n\nIf the seek operation completed successfully,\nthis method returns the new position from the start of the stream.\nThat position can be used later with [`SeekFrom::Start`]. Repeatedly\ncalling this function without calling `start_seek` might return the\nsame result.\n\n# Errors\n\nSeeking to a negative offset is considered an error.","links":{"`SeekFrom::Start`":"1:10865"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:49772","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3938","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:12995":{"id":"2:12995","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:12599","prim@char":"1:15638"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12609","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6564":{"id":"1:6564","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6565","1:6566","1:6567","1:6568","1:6569","1:6570","1:6571","1:6572","1:6573","1:6574","1:6575","1:6576","1:6577","1:6578","1:6579","1:6580","1:6581"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:267":{"id":"0:267","crate_id":0,"name":"poll_write","span":{"filename":"src/io/async_write.rs","begin":[260,4],"end":[267,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["_cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:49772","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3938","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:404":{"id":"0:404","crate_id":0,"name":null,"span":{"filename":"src/net/addr.rs","begin":[90,0],"end":[90,39]},"visibility":{"restricted":{"parent":"0:353","path":"::net::addr"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"ToSocketAddrs","id":"0:379","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"IpAddr","id":"1:10953","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},{"kind":"primitive","inner":"u16"}]},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:2:2756-0:306":{"id":"b:2:2756-0:306","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3155","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2750","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:2758"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:331":{"id":"0:331","crate_id":0,"name":null,"span":{"filename":"src/io/read_buf.rs","begin":[269,0],"end":[277,1]},"visibility":{"restricted":{"parent":"0:299","path":"::io::read_buf"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:9884","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:306","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"items":["0:332"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:261":{"id":"0:261","crate_id":0,"name":"poll_write","span":{"filename":"src/io/async_write.rs","begin":[230,4],"end":[236,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:49772","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3938","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13059":{"id":"2:13059","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:15638","self::pattern":"2:12599"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12609","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12609","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"2:12629","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:277":{"id":"0:277","crate_id":0,"name":"poll_shutdown","span":{"filename":"src/io/async_write.rs","begin":[315,4],"end":[317,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:49772","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3938","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:346":{"id":"0:346","crate_id":0,"name":null,"span":{"filename":"src/io/mod.rs","begin":[205,36],"end":[205,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"std::io::Result","name":"Result","id":"1:3938","glob":false}},"0:274":{"id":"0:274","crate_id":0,"name":"poll_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[299,4],"end":[305,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10853","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:49772","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3938","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:172":{"id":"0:172","crate_id":0,"name":null,"span":{"filename":"src/io/async_read.rs","begin":[76,0],"end":[78,1]},"visibility":{"restricted":{"parent":"0:147","path":"::io::async_read"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3155","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncRead","id":"0:167","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3191","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsyncRead","id":"0:167","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"items":["0:781"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3056":{"id":"2:3056","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3058"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3298":{"id":"2:3298","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3300","2:3301"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3257":{"id":"2:3257","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3259"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13018":{"id":"2:13018","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"prim@char":"1:15638","str::split":"1:15643","self::pattern":"2:12599","`DoubleEndedIterator`":"2:8019"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:48890","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12609","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12609","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12624","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13033":{"id":"2:13033","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:46923","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12609","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:769":{"id":"0:769","crate_id":0,"name":"task","span":{"filename":"src/task/mod.rs","begin":[1,0],"end":[318,1]},"visibility":"public","docs":"Asynchronous green-threads.\n\n## What are Tasks?\n\nA _task_ is a light weight, non-blocking unit of execution. A task is similar\nto an OS thread, but rather than being managed by the OS scheduler, they are\nmanaged by the [Tokio runtime][rt]. Another name for this general pattern is\n[green threads]. If you are familiar with [Go's goroutines], [Kotlin's\ncoroutines], or [Erlang's processes], you can think of Tokio's tasks as\nsomething similar.\n\nKey points about tasks include:\n\n* Tasks are **light weight**. Because tasks are scheduled by the Tokio\n  runtime rather than the operating system, creating new tasks or switching\n  between tasks does not require a context switch and has fairly low\n  overhead. Creating, running, and destroying large numbers of tasks is\n  quite cheap, especially compared to OS threads.\n\n* Tasks are scheduled **cooperatively**. Most operating systems implement\n  _preemptive multitasking_. This is a scheduling technique where the\n  operating system allows each thread to run for a period of time, and then\n  _preempts_ it, temporarily pausing that thread and switching to another.\n  Tasks, on the other hand, implement _cooperative multitasking_. In\n  cooperative multitasking, a task is allowed to run until it _yields_,\n  indicating to the Tokio runtime's scheduler that it cannot currently\n  continue executing. When a task yields, the Tokio runtime switches to\n  executing the next task.\n\n* Tasks are **non-blocking**. Typically, when an OS thread performs I/O or\n  must synchronize with another thread, it _blocks_, allowing the OS to\n  schedule another thread. When a task cannot continue executing, it must\n  yield instead, allowing the Tokio runtime to schedule another task. Tasks\n  should generally not perform system calls or other operations that could\n  block a thread, as this would prevent other tasks running on the same\n  thread from executing as well. Instead, this module provides APIs for\n  running blocking operations in an asynchronous context.\n\n[rt]: crate::runtime\n[green threads]: https://en.wikipedia.org/wiki/Green_threads\n[Go's goroutines]: https://tour.golang.org/concurrency/1\n[Kotlin's coroutines]: https://kotlinlang.org/docs/reference/coroutines-overview.html\n[Erlang's processes]: http://erlang.org/doc/getting_started/conc_prog.html#processes\n\n## Working with Tasks\n\nThis module provides the following APIs for working with tasks:\n\n### Spawning\n\nPerhaps the most important function in this module is [`task::spawn`]. This\nfunction can be thought of as an async equivalent to the standard library's\n[`thread::spawn`][`std::thread::spawn`]. It takes an `async` block or other\n[future], and creates a new task to run that work concurrently:\n\n```\nuse tokio::task;\n\n# async fn doc() {\ntask::spawn(async {\n    // perform some work here...\n});\n# }\n```\n\nLike [`std::thread::spawn`], `task::spawn` returns a [`JoinHandle`] struct.\nA `JoinHandle` is itself a future which may be used to await the output of\nthe spawned task. For example:\n\n```\nuse tokio::task;\n\n# #[tokio::main] async fn main() -> Result<(), Box<dyn std::error::Error>> {\nlet join = task::spawn(async {\n    // ...\n    \"hello world!\"\n});\n\n// ...\n\n// Await the result of the spawned task.\nlet result = join.await?;\nassert_eq!(result, \"hello world!\");\n# Ok(())\n# }\n```\n\nAgain, like `std::thread`'s [`JoinHandle` type][thread_join], if the spawned\ntask panics, awaiting its `JoinHandle` will return a [`JoinError`]. For\nexample:\n\n```\nuse tokio::task;\n\n# #[tokio::main] async fn main() {\nlet join = task::spawn(async {\n    panic!(\"something bad happened!\")\n});\n\n// The returned result indicates that the task failed.\nassert!(join.await.is_err());\n# }\n```\n\n`spawn`, `JoinHandle`, and `JoinError` are present when the \"rt\"\nfeature flag is enabled.\n\n[`task::spawn`]: crate::task::spawn()\n[future]: std::future::Future\n[`std::thread::spawn`]: std::thread::spawn\n[`JoinHandle`]: crate::task::JoinHandle\n[thread_join]: std::thread::JoinHandle\n[`JoinError`]: crate::task::JoinError\n\n### Blocking and Yielding\n\nAs we discussed above, code running in asynchronous tasks should not perform\noperations that can block. A blocking operation performed in a task running\non a thread that is also running other tasks would block the entire thread,\npreventing other tasks from running.\n\nInstead, Tokio provides two APIs for running blocking operations in an\nasynchronous context: [`task::spawn_blocking`] and [`task::block_in_place`].\n\nBe aware that if you call a non-async method from async code, that non-async\nmethod is still inside the asynchronous context, so you should also avoid\nblocking operations there. This includes destructors of objects destroyed in\nasync code.\n\n#### spawn_blocking\n\nThe `task::spawn_blocking` function is similar to the `task::spawn` function\ndiscussed in the previous section, but rather than spawning an\n_non-blocking_ future on the Tokio runtime, it instead spawns a\n_blocking_ function on a dedicated thread pool for blocking tasks. For\nexample:\n\n```\nuse tokio::task;\n\n# async fn docs() {\ntask::spawn_blocking(|| {\n    // do some compute-heavy work or call synchronous code\n});\n# }\n```\n\nJust like `task::spawn`, `task::spawn_blocking` returns a `JoinHandle`\nwhich we can use to await the result of the blocking operation:\n\n```rust\n# use tokio::task;\n# async fn docs() -> Result<(), Box<dyn std::error::Error>>{\nlet join = task::spawn_blocking(|| {\n    // do some compute-heavy work or call synchronous code\n    \"blocking completed\"\n});\n\nlet result = join.await?;\nassert_eq!(result, \"blocking completed\");\n# Ok(())\n# }\n```\n\n#### block_in_place\n\nWhen using the [multi-threaded runtime][rt-multi-thread], the [`task::block_in_place`]\nfunction is also available. Like `task::spawn_blocking`, this function\nallows running a blocking operation from an asynchronous context. Unlike\n`spawn_blocking`, however, `block_in_place` works by transitioning the\n_current_ worker thread to a blocking thread, moving other tasks running on\nthat thread to another worker thread. This can improve performance by avoiding\ncontext switches.\n\nFor example:\n\n```\nuse tokio::task;\n\n# async fn docs() {\nlet result = task::block_in_place(|| {\n    // do some compute-heavy work or call synchronous code\n    \"blocking completed\"\n});\n\nassert_eq!(result, \"blocking completed\");\n# }\n```\n\n#### yield_now\n\nIn addition, this module provides a [`task::yield_now`] async function\nthat is analogous to the standard library's [`thread::yield_now`]. Calling\nand `await`ing this function will cause the current task to yield to the\nTokio runtime's scheduler, allowing other tasks to be\nscheduled. Eventually, the yielding task will be polled again, allowing it\nto execute. For example:\n\n```rust\nuse tokio::task;\n\n# #[tokio::main] async fn main() {\nasync {\n    task::spawn(async {\n        // ...\n        println!(\"spawned task done!\")\n    });\n\n    // Yield, allowing the newly-spawned task to execute first.\n    task::yield_now().await;\n    println!(\"main task done!\");\n}\n# .await;\n# }\n```\n\n### Cooperative scheduling\n\nA single call to [`poll`] on a top-level task may potentially do a lot of\nwork before it returns `Poll::Pending`. If a task runs for a long period of\ntime without yielding back to the executor, it can starve other tasks\nwaiting on that executor to execute them, or drive underlying resources.\nSince Rust does not have a runtime, it is difficult to forcibly preempt a\nlong-running task. Instead, this module provides an opt-in mechanism for\nfutures to collaborate with the executor to avoid starvation.\n\nConsider a future like this one:\n\n```\n# use tokio_stream::{Stream, StreamExt};\nasync fn drop_all<I: Stream + Unpin>(mut input: I) {\n    while let Some(_) = input.next().await {}\n}\n```\n\nIt may look harmless, but consider what happens under heavy load if the\ninput stream is _always_ ready. If we spawn `drop_all`, the task will never\nyield, and will starve other tasks and resources on the same executor.\n\nTo account for this, Tokio has explicit yield points in a number of library\nfunctions, which force tasks to return to the executor periodically.\n\n\n#### unconstrained\n\nIf necessary, [`task::unconstrained`] lets you opt out a future of Tokio's cooperative\nscheduling. When a future is wrapped with `unconstrained`, it will never be forced to yield to\nTokio. For example:\n\n```\n# #[tokio::main]\n# async fn main() {\nuse tokio::{task, sync::mpsc};\n\nlet fut = async {\n    let (tx, mut rx) = mpsc::unbounded_channel();\n\n    for i in 0..1000 {\n        let _ = tx.send(());\n        // This will always be ready. If coop was in effect, this code would be forced to yield\n        // periodically. However, if left unconstrained, then this code will never yield.\n        rx.recv().await;\n    }\n};\n\ntask::unconstrained(fut).await;\n# }\n```\n\n[`task::spawn_blocking`]: crate::task::spawn_blocking\n[`task::block_in_place`]: crate::task::block_in_place\n[rt-multi-thread]: ../runtime/index.html#threaded-scheduler\n[`task::yield_now`]: crate::task::yield_now()\n[`thread::yield_now`]: std::thread::yield_now\n[`task::unconstrained`]: crate::task::unconstrained()\n[`poll`]: method@std::future::Future::poll","links":{"std::thread::spawn":"1:984","std::future::Future":"2:13312","std::thread::yield_now":"1:988","std::thread::JoinHandle":"1:1041","method@std::future::Future::poll":"2:13314"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[]}},"2:13077":{"id":"2:13077","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:12599","prim@char":"1:15638"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12609","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12609","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12624","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3191":{"id":"2:3191","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13036":{"id":"2:13036","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:46923","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12609","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12609","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12624","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3689":{"id":"2:3689","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9895":{"id":"2:9895","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9896"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3270":{"id":"2:3270","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3271","2:3272"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6738":{"id":"1:6738","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6739"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12973":{"id":"2:12973","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:15643","`u8`":"1:15652"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2848":{"id":"2:2848","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2850","2:2851","2:2852","2:2853","2:2854"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3155","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2802","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:332":{"id":"0:332","crate_id":0,"name":"fmt","span":{"filename":"src/io/read_buf.rs","begin":[270,4],"end":[276,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:9844","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:9833","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:206":{"id":"0:206","crate_id":0,"name":"AsyncSeek","span":{"filename":"src/io/async_seek.rs","begin":[18,0],"end":[47,1]},"visibility":"public","docs":"Seek bytes asynchronously.\n\nThis trait is analogous to the [`std::io::Seek`] trait, but integrates\nwith the asynchronous task system. In particular, the `start_seek`\nmethod, unlike [`Seek::seek`], will not block the calling thread.\n\nUtilities for working with `AsyncSeek` values are provided by\n[`AsyncSeekExt`].\n\n[`std::io::Seek`]: std::io::Seek\n[`Seek::seek`]: std::io::Seek::seek()\n[`AsyncSeekExt`]: crate::io::AsyncSeekExt","links":{"std::io::Seek::seek()":"1:4588","std::io::Seek":"1:4587"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:207","0:208"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:210","0:212","0:214","0:218"]}},"1:5656":{"id":"1:5656","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5657","1:5658","1:5659","1:5660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:168":{"id":"0:168","crate_id":0,"name":"poll_read","span":{"filename":"src/io/async_read.rs","begin":[53,4],"end":[57,30]},"visibility":"default","docs":"Attempts to read from the `AsyncRead` into `buf`.\n\nOn success, returns `Poll::Ready(Ok(()))` and places data in the\nunfilled portion of `buf`. If no data was read (`buf.filled().len()` is\nunchanged), it implies that EOF has been reached.\n\nIf no data is available for reading, the method returns `Poll::Pending`\nand arranges for the current task (via `cx.waker()`) to receive a\nnotification when the object becomes readable or is closed.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:306","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:49772","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3938","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:283":{"id":"0:283","crate_id":0,"name":"poll_shutdown","span":{"filename":"src/io/async_write.rs","begin":[345,4],"end":[347,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:49772","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3938","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:419":{"id":"0:419","crate_id":0,"name":null,"span":{"filename":"src/net/addr.rs","begin":[132,0],"end":[132,39]},"visibility":{"restricted":{"parent":"0:353","path":"::net::addr"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"ToSocketAddrs","id":"0:379","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"SocketAddr","id":"1:10923","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:9905":{"id":"2:9905","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9906"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13084":{"id":"2:13084","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9897":{"id":"2:9897","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9898"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13074":{"id":"2:13074","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:12599","prim@char":"1:15638"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12609","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5754":{"id":"5:5754","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8050"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8050","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12609","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:778":{"id":"0:778","crate_id":0,"name":"poll_fill_buf","span":{"filename":"src/io/async_buf_read.rs","begin":[82,4],"end":[82,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:49772","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3938","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5501":{"id":"5:5501","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5503","5:5504"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3155","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[],"implementations":[]}},"0:793":{"id":"0:793","crate_id":0,"name":"is_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[222,4],"end":[222,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:53":{"id":"0:53","crate_id":0,"name":"pin","span":{"filename":"src/macros/pin.rs","begin":[125,0],"end":[144,1]},"visibility":"public","docs":"Pins a value on the stack.\n\nCalls to `async fn` return anonymous [`Future`] values that are `!Unpin`.\nThese values must be pinned before they can be polled. Calling `.await` will\nhandle this, but consumes the future. If it is required to call `.await` on\na `&mut _` reference, the caller is responsible for pinning the future.\n\nPinning may be done by allocating with [`Box::pin`] or by using the stack\nwith the `pin!` macro.\n\nThe following will **fail to compile**:\n\n```compile_fail\nasync fn my_async_fn() {\n    // async logic here\n}\n\n#[tokio::main]\nasync fn main() {\n    let mut future = my_async_fn();\n    (&mut future).await;\n}\n```\n\nTo make this work requires pinning:\n\n```\nuse tokio::pin;\n\nasync fn my_async_fn() {\n    // async logic here\n}\n\n#[tokio::main]\nasync fn main() {\n    let future = my_async_fn();\n    pin!(future);\n\n    (&mut future).await;\n}\n```\n\nPinning is useful when using `select!` and stream operators that require `T:\nStream + Unpin`.\n\n[`Future`]: trait@std::future::Future\n[`Box::pin`]: std::boxed::Box::pin\n\n# Usage\n\nThe `pin!` macro takes **identifiers** as arguments. It does **not** work\nwith expressions.\n\nThe following does not compile as an expression is passed to `pin!`.\n\n```compile_fail\nasync fn my_async_fn() {\n    // async logic here\n}\n\n#[tokio::main]\nasync fn main() {\n    let mut future = pin!(my_async_fn());\n    (&mut future).await;\n}\n```\n\n# Examples\n\nUsing with select:\n\n```\nuse tokio::{pin, select};\nuse tokio_stream::{self as stream, StreamExt};\n\nasync fn my_async_fn() {\n    // async logic here\n}\n\n#[tokio::main]\nasync fn main() {\n    let mut stream = stream::iter(vec![1, 2, 3, 4]);\n\n    let future = my_async_fn();\n    pin!(future);\n\n    loop {\n        select! {\n            _ = &mut future => {\n                // Stop looping `future` will be polled after completion\n                break;\n            }\n            Some(val) = stream.next() => {\n                println!(\"got value = {}\", val);\n            }\n        }\n    }\n}\n```\n\nBecause assigning to a variable followed by pinning is common, there is also\na variant of the macro that supports doing both in one go.\n\n```\nuse tokio::{pin, select};\n\nasync fn my_async_fn() {\n    // async logic here\n}\n\n#[tokio::main]\nasync fn main() {\n    pin! {\n        let future1 = my_async_fn();\n        let future2 = my_async_fn();\n    }\n\n    select! {\n        _ = &mut future1 => {}\n        _ = &mut future2 => {}\n    }\n}\n```","links":{"trait@std::future::Future":"2:13312","std::boxed::Box::pin":"5:421"},"attrs":["#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! pin {\n    ($($x:ident),*) => { ... };\n    ($(\n            let $x:ident = $init:expr;\n    )*) => { ... };\n}"},"5:5505":{"id":"5:5505","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5507","5:5508"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:135":{"id":"0:135","crate_id":0,"name":"poll_fill_buf","span":{"filename":"src/io/async_buf_read.rs","begin":[90,4],"end":[92,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:49772","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3938","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:218":{"id":"0:218","crate_id":0,"name":null,"span":{"filename":"src/io/async_seek.rs","begin":[83,0],"end":[90,1]},"visibility":{"restricted":{"parent":"0:185","path":"::io::async_seek"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsRef","id":"2:3047","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3191","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsyncSeek","id":"0:206","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"io::Cursor","id":"1:10649","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"items":["0:220","0:221"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13053":{"id":"2:13053","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13042":{"id":"2:13042","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"`DoubleEndedIterator`":"2:8019","self::pattern":"2:12599","prim@char":"1:15638","str::matches":"1:15643"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49094","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12609","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12609","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12624","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8445":{"id":"2:8445","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8170","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:259":{"id":"0:259","crate_id":0,"name":null,"span":{"filename":"src/io/async_write.rs","begin":[225,0],"end":[257,1]},"visibility":{"restricted":{"parent":"0:225","path":"::io::async_write"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DerefMut","id":"2:3382","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3191","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"","id":"2:3369","args":null,"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncWrite","id":"0:246","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"provided_trait_methods":["is_write_vectored","poll_write_vectored"],"trait":{"kind":"resolved_path","inner":{"name":"AsyncWrite","id":"0:246","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"items":["0:261","0:262","0:263","0:264","0:265"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:316":{"id":"0:316","crate_id":0,"name":"filled","span":{"filename":"src/io/read_buf.rs","begin":[62,4],"end":[67,5]},"visibility":"public","docs":"Returns a shared reference to the filled portion of the buffer.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9884":{"id":"2:9884","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:9885"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12538":{"id":"2:12538","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12539","2:12540"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3083-0:306":{"id":"b:2:3083-0:306","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3056","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"items":["2:3085"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"5:6071":{"id":"5:6071","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6072"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:399":{"id":"0:399","crate_id":0,"name":null,"span":{"filename":"src/net/addr.rs","begin":[77,0],"end":[77,38]},"visibility":{"restricted":{"parent":"0:353","path":"::net::addr"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"ToSocketAddrs","id":"0:379","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"SocketAddrV6","id":"1:10950","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3458":{"id":"2:3458","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3460"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3155","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3454","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:12629":{"id":"2:12629","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:12624","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13088":{"id":"2:13088","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:15638"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:49180","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:263":{"id":"0:263","crate_id":0,"name":"is_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[246,4],"end":[248,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3402":{"id":"2:3402","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3404","2:3405"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12974":{"id":"2:12974","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15652"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5616":{"id":"1:5616","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5617","1:5618"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5749":{"id":"5:5749","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5569","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5750","5:5751","5:5754","5:5757","5:5769","5:5770","5:5771","5:5772","5:5773"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3881":{"id":"2:3881","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:45489","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:313":{"id":"0:313","crate_id":0,"name":"new","span":{"filename":"src/io/read_buf.rs","begin":[32,4],"end":[40,5]},"visibility":"public","docs":"Creates a new `ReadBuf` from a fully initialized buffer.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:772":{"id":"5:772","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:773","5:774","5:775"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5773":{"id":"5:5773","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:15643"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8050","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:780":{"id":"0:780","crate_id":0,"name":"poll_read","span":{"filename":"src/io/async_read.rs","begin":[73,4],"end":[73,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:306","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:49772","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3938","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:289":{"id":"0:289","crate_id":0,"name":"poll_shutdown","span":{"filename":"src/io/async_write.rs","begin":[375,4],"end":[377,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:49772","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3938","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5600":{"id":"1:5600","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5601","1:5602","1:5603","1:5604"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3321":{"id":"2:3321","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3323"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:131":{"id":"0:131","crate_id":0,"name":null,"span":{"filename":"src/io/async_buf_read.rs","begin":[81,0],"end":[83,1]},"visibility":{"restricted":{"parent":"0:105","path":"::io::async_buf_read"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3155","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncBufRead","id":"0:125","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3191","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"AsyncBufRead","id":"0:125","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"items":["0:778","0:779"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:8019":{"id":"2:8019","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8020","2:8021","2:8022","2:8023","2:8027","2:8030"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8170","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:217":{"id":"0:217","crate_id":0,"name":"poll_complete","span":{"filename":"src/io/async_seek.rs","begin":[78,4],"end":[80,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47042","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}},"param_names":[]}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:13614","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:49772","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3938","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12998":{"id":"2:12998","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:12599","prim@char":"1:15638"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:12609","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3228":{"id":"2:3228","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3230","2:3231"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:7524":{"id":"2:7524","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7525","2:7526","2:7527","2:7528","2:7529","2:7530","2:7531"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2772","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2848","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:325":{"id":"0:325","crate_id":0,"name":"remaining","span":{"filename":"src/io/read_buf.rs","begin":[178,4],"end":[180,5]},"visibility":"public","docs":"Returns the number of bytes at the end of the slice that have not yet been filled.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:323":{"id":"0:323","crate_id":0,"name":"initialize_unfilled","span":{"filename":"src/io/read_buf.rs","begin":[144,4],"end":[146,5]},"visibility":"public","docs":"Returns a mutable reference to the unfilled part of the buffer, ensuring it is fully initialized.\n\nSince `ReadBuf` tracks the region of the buffer that has been initialized, this is effectively \"free\" after\nthe first use.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12987":{"id":"2:12987","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15638"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:48842","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"1:5534":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"12:853":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"6:1554":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:2182":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:4":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:8044":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:13783":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:14582":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:10279":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:10115":{"crate_id":2,"path":["core","hash","Hasher","write_usize"],"kind":"foreign_type"},"17:9088":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:10236":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"6:4518":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:45910":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:12010":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"18:660":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"5:3152":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"16:4386":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:6241":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"17:10516":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:6554":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:31636":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"16:6731":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:45449":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:8172":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator","next"],"kind":"foreign_type"},"1:14869":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:24078":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:10649":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:3961":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"16:3064":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:6080":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:11947":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:48701":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:8880":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"17:13221":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:9549":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"6:5358":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:7671":{"crate_id":1,"path":["std","sync"],"kind":"module"},"1:7306":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"9:603":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:12829":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"17:13331":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"5:7879":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:1075":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:48233":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"6:633":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:13540":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:4788":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:45736":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:46220":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:2543":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:48922":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:49588":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"6:4506":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:46101":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"12:2309":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:9162":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:4762":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:7342":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"5:7863":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:10224":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:46018":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"16:3772":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"5:772":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:6464":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:15648":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:3402":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:4336":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:47701":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:51810":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:49584":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:53002":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:3249":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:11996":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"5:1748":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:13362":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"6:570":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:31875":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"16:6269":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:12453":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"16:6101":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"18:896":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:52806":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:50458":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:6643":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:14240":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"17:11794":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:46981":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"16:6021":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:6898":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:11147":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:5254":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:12946":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:14000":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:10458":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"12:1144":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:10988":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:7828":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"1:14856":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:6738":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:9551":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:46230":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:15658":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:51570":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"16:3939":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:4317":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"6:4301":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:47228":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"16:7477":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:13282":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:46069":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"18:0":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:3506":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"12:1855":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:51413":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:7480":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"16:7360":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:11873":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"5:7980":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"14:194":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:49772":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:10724":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:1483":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:10438":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"9:692":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"1:10950":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"17:11328":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:22596":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:48976":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"5:1433":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:8636":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"12:1253":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"12:112":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:13403":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:2845":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"1:13932":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:7934":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:994":{"crate_id":1,"path":["std","thread","park_timeout"],"kind":"function"},"16:7786":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"14:11":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"5:6915":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"5:1604":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:3216":{"crate_id":2,"path":["core","ops"],"kind":"module"},"2:3253":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"16:4417":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"15:0":{"crate_id":15,"path":["addr2line"],"kind":"module"},"16:4477":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:10576":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:9943":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:9404":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"0:246":{"crate_id":0,"path":["tokio","io","AsyncWrite"],"kind":"trait"},"2:51732":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:49616":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:48815":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:23419":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:8233":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"16:3264":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:46973":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"16:4350":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:45834":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"14:216":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"16:6136":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"5:2182":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:24720":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:3316":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:49433":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:10160":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:46435":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:1690":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:52457":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"12:1235":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:10814":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:31975":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"17:12552":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"16:2912":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:1302":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:3635":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:52815":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:11383":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:45923":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:7269":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:46426":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:10910":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"12:354":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:3178":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"6:520":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:49468":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:9413":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:10109":{"crate_id":2,"path":["core","hash","Hasher","write"],"kind":"foreign_type"},"16:5522":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:3743":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:13258":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:3623":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"11:54":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"1:10844":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"16:6999":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"6:3887":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:10372":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:10983":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"16:6807":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:10211":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:52787":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:45359":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:10837":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:11400":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"6:532":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:10975":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"16:3018":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"5:5456":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:4662":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:10107":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:24010":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"6:4390":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"5:3233":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"6:4041":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:5385":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:22560":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"5:909":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:4122":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:24248":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"16:5855":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:5790":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:7158":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:11330":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:51049":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"14:231":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:6199":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:11831":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:9600":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"16:7236":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:1152":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:22204":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"0:379":{"crate_id":0,"path":["tokio","net","ToSocketAddrs"],"kind":"trait"},"2:4839":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:3098":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"6:6084":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"16:7195":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:6666":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:10351":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"5:2634":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:3162":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:13477":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:45242":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:9554":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"1:2387":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:7528":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"5:3679":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:4267":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:10420":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"9:927":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:13884":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:6636":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:22405":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:3393":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:12618":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:48048":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:12046":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:14215":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:31776":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:8192":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator","for_each"],"kind":"foreign_type"},"1:14677":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"16:7870":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"5:5505":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:3304":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:2156":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"6:5435":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:49612":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:13933":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:12016":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:11389":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"18:169":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:2750":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:4008":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"18:829":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:6620":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:6099":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:15645":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"18:801":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:10827":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:13938":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"16:4790":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:294":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:4157":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"16:5273":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:10904":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:6436":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:45749":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:1436":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:51176":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:12460":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:5608":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"16:6644":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"5:1500":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:10122":{"crate_id":2,"path":["core","hash","Hasher","write_length_prefix"],"kind":"foreign_type"},"2:49447":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:11032":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"2:49817":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:4278":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:12155":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"6:4115":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"12:949":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:2145":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:23254":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"16:5975":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:8222":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator","flatten"],"kind":"foreign_type"},"6:3857":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:3063":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:4243":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:2842":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:544":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"18:857":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:4320":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"12:1118":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:6909":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:3241":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:9498":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"2:3058":{"crate_id":2,"path":["core","convert","From","from"],"kind":"foreign_type"},"1:2152":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:15640":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:10990":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:8259":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator","is_partitioned"],"kind":"foreign_type"},"17:10543":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:49396":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:10061":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:3602":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:11069":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:47680":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:3168":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:10673":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"5:8061":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:48781":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:15654":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"6:5281":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:12456":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:27531":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:47522":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:1236":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"16:2968":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:5295":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"5:1558":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"4:0":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:10377":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:1405":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"5:1000":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:5666":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:49304":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:9513":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:4517":{"crate_id":1,"path":["std","io","Read","read_to_end"],"kind":"foreign_type"},"1:15034":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:48750":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:2004":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:8234":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator","partition"],"kind":"foreign_type"},"2:6047":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:7120":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:9417":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"2:46401":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"6:4090":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"18:774":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:12340":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"16:4922":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"5:5541":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"1:15649":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"6:1584":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:3261":{"crate_id":1,"path":["std","io"],"kind":"module"},"17:12494":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:55539":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:12675":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:11714":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:9839":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:49580":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"5:8012":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:5472":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:48763":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:1078":{"crate_id":1,"path":["std","ascii","AsciiExt","to_ascii_uppercase"],"kind":"foreign_type"},"2:13362":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:3150":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:9893":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:10147":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:47438":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:10071":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:11124":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:48737":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:22202":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:7494":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:3514":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:10353":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:4068":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"16:4890":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"18:644":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:11970":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:11473":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:31823":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"1:9051":{"crate_id":1,"path":["std","lazy","SyncOnceCell"],"kind":"struct"},"2:47186":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:3191":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:48682":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:13842":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:4426":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:49022":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:4530":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:23583":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:47480":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:4512":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"5:6332":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"6:5311":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:1472":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"17:11809":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:12599":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:12659":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:14841":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"5:4220":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"1:14709":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:8199":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator","filter"],"kind":"foreign_type"},"17:12408":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:4600":{"crate_id":1,"path":["std","io","BufRead","read_line"],"kind":"foreign_type"},"2:9897":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"16:6208":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:1487":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:13438":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:3220":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:12431":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:15646":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"5:1545":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:1527":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:13626":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"1:15647":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:5379":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"5:4152":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:11971":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"5:2202":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:12741":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:3594":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:13598":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"15:269":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:9887":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"2:52835":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:6067":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:15637":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"5:7102":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"16:4671":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:12287":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:12391":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:8213":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator","skip"],"kind":"foreign_type"},"18:820":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:13489":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"16:6605":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:10477":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"5:781":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:1491":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:48664":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:10953":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"6:3946":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:13271":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"16:7205":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:3967":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:51653":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:6175":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"12:377":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:3425":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:51845":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:50506":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:8187":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator","intersperse_with"],"kind":"foreign_type"},"6:6934":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:11847":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:2572":{"crate_id":1,"path":["std","error","from","StringError"],"kind":"struct"},"5:7809":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:3369":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:8510":{"crate_id":2,"path":["core","lazy","OnceCell"],"kind":"struct"},"6:6238":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:2985":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:1311":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:13772":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:24316":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:12356":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:10729":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:7453":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:8142":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"17:11604":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"16:6126":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:10641":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"5:3137":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:12118":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:49600":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:13935":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"17:11738":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:1602":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"16:7549":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"6:4454":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:11221":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:50618":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:12040":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"16:7279":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:1572":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:8499":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:22164":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:47102":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"16:6357":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:11791":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"1:10593":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"12:877":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"0:772":{"crate_id":0,"path":["tokio","stream"],"kind":"module"},"2:3312":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:12795":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:9296":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:14":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:5977":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:49146":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"5:7291":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:5257":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:12182":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:55578":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:4852":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:10728":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"16:5488":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:4061":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:4513":{"crate_id":1,"path":["std","io","Read","read"],"kind":"foreign_type"},"2:45940":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:10179":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:8543":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:10887":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"0:352":{"crate_id":0,"path":["tokio","net"],"kind":"module"},"17:13963":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"6:5413":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:5472":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:4405":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"5:5211":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:2312":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:11055":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"2:21":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:9646":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"17:9574":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:10142":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:45318":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:50930":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"9:27":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"2:46110":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:7378":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:1547":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:49290":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:4222":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:15650":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:4671":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:4444":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:52963":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:5678":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"12:784":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:11853":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"5:7833":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:15641":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:2178":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:51103":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"16:2794":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:2423":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:23570":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:7073":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:23692":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"6:579":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"5:5555":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"18:694":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:4257":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:3265":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:6320":{"crate_id":1,"path":["std","os","unix","process","CommandExt","pre_exec"],"kind":"foreign_type"},"6:6220":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:13272":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:2017":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:48890":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:47094":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:9005":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"16:2754":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"15:248":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"1:14770":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:4372":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"16:7333":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:11776":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"17:11555":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:1081":{"crate_id":1,"path":["std","ascii","AsciiExt","make_ascii_uppercase"],"kind":"foreign_type"},"2:3218":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:12070":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:6123":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:1190":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"17:13746":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"6:1717":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:14230":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:5841":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"9:1056":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:52940":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:10468":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:10128":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"6:670":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"5:7498":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:894":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:12327":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:11640":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"6:1563":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:51779":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:15655":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:23598":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:12626":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher","next_back"],"kind":"foreign_type"},"11:0":{"crate_id":11,"path":["adler"],"kind":"module"},"17:2484":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:8954":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"5:6135":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:50483":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:49126":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:1428":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"17:9280":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:14450":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:5811":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"12:866":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:46148":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:4198":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:11835":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:13819":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:47694":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:9834":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"18:650":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:6742":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:10771":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"5:7847":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:13370":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:49094":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"17:2314":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:24282":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:9559":{"crate_id":1,"path":["std","sys_common","rwlock","MovableRwLock"],"kind":"struct"},"6:6184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"12:469":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"6:5458":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:1723":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:49808":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:5616":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:13780":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:13348":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:38329":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"16:4535":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:7938":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"18:729":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:49321":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:11780":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"1:11168":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"16:5595":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:9659":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:8902":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:5528":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:4995":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"12:976":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"16:2773":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:13582":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:12307":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:12771":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:6577":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"18:837":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:6851":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:11915":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:3454":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:23727":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:2423":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:2161":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"12:2009":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:45871":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:47935":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"2:2205":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:3606":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:9971":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:11719":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:2755":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:50852":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:4575":{"crate_id":1,"path":["std","io","Write","write_all"],"kind":"foreign_type"},"2:48711":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:2747":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:13924":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:10897":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:10454":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:47119":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:11606":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"2:46446":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:4382":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:12073":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:6886":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"5:7795":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:5739":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"17:12234":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"18:811":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:12610":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:13180":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:22181":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"6:4128":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:11665":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:3050":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:4587":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:9210":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:46059":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"12:1100":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"16:7146":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:8227":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator","collect"],"kind":"foreign_type"},"17:12467":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"6:1736":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"16:5753":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:48994":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:47144":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:13642":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:8849":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:11337":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:10599":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"6:5406":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"16:4304":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:13520":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"5:1524":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"5:375":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:46408":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"12:2303":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:10719":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:8173":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator","size_hint"],"kind":"foreign_type"},"2:46078":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:10635":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:13098":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:5603":{"crate_id":1,"path":["std","os","unix","fs","FileExt","write_at"],"kind":"foreign_type"},"2:47050":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:52887":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:4000":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"18:744":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:4246":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:48245":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:9264":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:3218":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:10633":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:48673":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"0:206":{"crate_id":0,"path":["tokio","io","AsyncSeek"],"kind":"trait"},"2:50723":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:1418":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"9:1075":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"14:56":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"5:4378":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:6200":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"6:585":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"5:4015":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:48032":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"12:396":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:49481":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"1:14290":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"16:3320":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:13327":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:31811":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"5:2888":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:13664":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:13760":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:12783":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:4250":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:37109":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:9503":{"crate_id":2,"path":["core","sync","atomic","fence"],"kind":"function"},"6:5158":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:14454":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:8601":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:51276":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"6:6105":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:23714":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"5:1422":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:6316":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:9729":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:3059":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:542":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:22149":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:4743":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"16:4734":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"6:592":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:12685":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:47962":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"17:10200":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"16:3429":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:51228":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:10448":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:3973":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:696":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:4955":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"19:117":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"1:8773":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:3392":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:50899":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"16:4506":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:15620":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:15388":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:13273":{"crate_id":2,"path":["core","future"],"kind":"module"},"1:7785":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"2:3321":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"16:7024":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:11026":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:15143":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:8906":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"5:4772":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"2:51996":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"16:3218":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:46158":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:11519":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:10680":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:10461":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:2555":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"17:10403":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:48224":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"16:5766":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"12:2005":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:5963":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:7738":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:11313":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"6:4078":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:2149":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:9033":{"crate_id":2,"path":["core","pin"],"kind":"module"},"18:739":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:12051":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"5:2886":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:10052":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:12725":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:9299":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"0:0":{"crate_id":0,"path":["tokio"],"kind":"module"},"6:5427":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:7514":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:5378":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:6613":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:9901":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"16:3365":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"16:6152":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:6892":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:10212":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:161":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"5:7779":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:45998":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:3611":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:13356":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:14300":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"12:774":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:48216":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:2094":{"crate_id":2,"path":["core","mem","swap"],"kind":"function"},"16:6949":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:49604":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"18:636":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:11839":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:12538":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:49754":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:4570":{"crate_id":1,"path":["std","io","Write","write"],"kind":"foreign_type"},"2:22183":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"5:0":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:9245":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:5633":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt","mtime"],"kind":"foreign_type"},"12:930":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:4666":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:10487":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"16:6569":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"16:7392":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:52872":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"16:7467":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:11967":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"5:2075":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:8277":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator","reduce"],"kind":"foreign_type"},"17:13318":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:13062":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:55604":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:7250":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:9891":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:10938":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:12624":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"16:6166":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:7197":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"16:7971":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:51539":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:10444":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"16:2889":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"5:7885":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:3093":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"17:12385":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:5039":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:7971":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:11725":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:8492":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:46956":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:3101":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:51308":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:24180":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"6:3985":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"12:0":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"2:48872":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:13394":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"16:5384":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:5360":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:2352":{"crate_id":1,"path":["std","env"],"kind":"module"},"9:0":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"6:6811":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"16:6491":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:23512":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"5:7429":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"9:157":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"2:45790":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:2713":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"5:5501":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:50587":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:11030":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:15055":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:3056":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:8027":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator","rfold"],"kind":"foreign_type"},"1:11976":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:8020":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator","next_back"],"kind":"foreign_type"},"2:3261":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:1658":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:8445":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:5527":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:6880":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"5:7932":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:49458":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:49180":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:3548":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:11149":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:49252":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:7295":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:8448":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:9896":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:5600":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"5:3130":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:8548":{"crate_id":2,"path":["core","lazy","Lazy"],"kind":"struct"},"2:2807":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"12:812":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:8186":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator","intersperse"],"kind":"foreign_type"},"2:2802":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:3159":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:11045":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"12:925":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:47312":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:10331":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:5707":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"6:6090":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:23490":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"1:11962":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:13627":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:48613":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:9961":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"8:0":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:12095":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:13125":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:5656":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:23155":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:11588":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:13788":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:4519":{"crate_id":1,"path":["std","io","Read","read_exact"],"kind":"foreign_type"},"6:512":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"12:556":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"6:5562":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"12:2013":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:13163":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:681":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"16:6032":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"16:6964":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"6:5254":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:13497":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:3128":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"16:3488":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:11373":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:45850":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"7:38":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:49846":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:45864":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:7542":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"16:7884":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:12609":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:10140":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"16:4614":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"5:1613":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:12598":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:4173":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:0":{"crate_id":1,"path":["std"],"kind":"module"},"2:47687":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:3239":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:4366":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:7654":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"12:160":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:11993":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"16:6424":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:7454":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:48842":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:14664":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:9186":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:3234":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"16:3091":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:52910":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:46417":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:14690":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"17:12917":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:3877":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:7597":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:12208":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"16:5672":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"5:7770":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:10489":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:8327":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"6:3876":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"18:136":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"12:2039":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:49136":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:1456":{"crate_id":2,"path":["core","hint","spin_loop"],"kind":"function"},"17:11001":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:3399":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:38266":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"7:0":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:50437":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:12507":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"5:3123":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:4358":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"3:309":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:10482":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:8244":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator","partition_in_place"],"kind":"foreign_type"},"16:2991":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"16:547":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"6:6213":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:13240":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:52861":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:45988":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:3228":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:51128":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:7780":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"5:6769":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"2:52203":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"12:2045":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"12:747":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:9476":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"16:7303":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"5:2418":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:15659":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"6:5419":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:299":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"9:963":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:625":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:3129":{"crate_id":2,"path":["core","default","Default","default"],"kind":"foreign_type"},"2:7524":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:4596":{"crate_id":1,"path":["std","io","BufRead","consume"],"kind":"foreign_type"},"6:3940":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"5:3468":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:3308":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:47024":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:48772":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"5:912":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:8045":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator","len"],"kind":"foreign_type"},"6:6922":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:3282":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"3:0":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:4280":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"5:8073":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:4146":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"1:989":{"crate_id":1,"path":["std","thread","panicking"],"kind":"function"},"6:4512":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:2385":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:11117":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:3298":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:13737":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:987":{"crate_id":1,"path":["std","thread","current"],"kind":"function"},"2:50746":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"15:230":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:14283":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:9903":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:12537":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:15660":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:820":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"2:3277":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:2448":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:12824":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"2:45803":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:3156":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"6:1533":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:6857":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"16:6110":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:9408":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:8184":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator","zip"],"kind":"foreign_type"},"2:12623":{"crate_id":2,"path":["core","str","pattern","Searcher","next_reject"],"kind":"foreign_type"},"1:5635":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt","ctime"],"kind":"foreign_type"},"2:55565":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"18:766":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:48208":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:10014":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"12:2315":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:4797":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"6:526":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:6669":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:3172":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"5:2093":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:7843":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:11902":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:23250":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"16:2945":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"5:1219":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:49164":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:5670":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"5:7473":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:4028":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:46189":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:11726":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"6:3992":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:9368":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:13912":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"16:4448":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:8046":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"17:10611":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"16:5433":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"5:4992":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:13192":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"6:88":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:46087":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:24350":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:45426":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"18:610":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"16:3800":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"16:6366":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"6:5209":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:13446":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"18:849":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:4356":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:15652":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"16:7174":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:3053":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:10656":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:48848":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:11981":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"9:809":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:15651":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"12:1159":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:49651":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"2:2848":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:7880":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"5:8044":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"2:45270":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"6:4047":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:6744":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:48263":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"6:4353":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:15642":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:8421":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator","is_sorted"],"kind":"foreign_type"},"1:11143":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:8241":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"2:45890":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:10848":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:9026":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:49858":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"5:1576":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:10976":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:22605":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"5:2896":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:11277":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:10253":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:10028":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:1700":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"5:1567":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:52346":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:50641":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:3236":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:12275":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"12:429":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:49638":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"5:3924":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:11962":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:13624":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:3047":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:45489":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:4599":{"crate_id":1,"path":["std","io","BufRead","read_until"],"kind":"foreign_type"},"6:4018":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"6:1630":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"6:5184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:10801":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:3938":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"17:10304":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"5:7787":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:7804":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:13054":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"14:250":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:4420":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:3035":{"crate_id":1,"path":["std","fs"],"kind":"module"},"6:4210":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:9592":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"17:13799":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:3613":{"crate_id":2,"path":["core","ops","try_trait","FromResidual","from_residual"],"kind":"foreign_type"},"2:55446":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:10350":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:992":{"crate_id":1,"path":["std","thread","park"],"kind":"function"},"2:5232":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:11239":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:3652":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:10947":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"16:6219":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"5:983":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:49592":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"12:463":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:6338":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:10395":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:8219":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator","flat_map"],"kind":"foreign_type"},"17:11159":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:11378":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:14875":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:55552":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:15657":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:22136":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:22411":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"5:3548":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:4159":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:3604":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:0":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:13402":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:9034":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:9689":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:45765":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:10926":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:3458":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:1449":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:3195":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:10491":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"5:7764":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:5291":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:4594":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"16:7856":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:3292":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:8846":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:23662":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:11932":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:10558":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:11753":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:9360":{"crate_id":1,"path":["std","sys_common","condvar","Condvar"],"kind":"struct"},"6:5240":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"5:8026":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:9833":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"16:3549":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:5456":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"5:1837":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"5:6071":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"6:5468":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:10529":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:10097":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:3158":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:5231":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:56861":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"9:996":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:22464":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:10435":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:11004":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"5:3481":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"5:6348":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"12:2018":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"1:1041":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"1:8334":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:10151":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:12699":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:15638":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:2984":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:4188":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:4453":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"5:8050":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:11750":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:12221":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:5196":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:984":{"crate_id":1,"path":["std","thread","spawn"],"kind":"function"},"1:2167":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"16:7928":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:13733":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:15643":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"6:4312":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:9884":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:11129":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:13986":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:48691":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:8179":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator","advance_by"],"kind":"foreign_type"},"1:14729":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"6:3863":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:46040":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:23606":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:47396":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"16:6682":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"16:7420":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"6:5968":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:7151":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:4816":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:23699":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"5:5917":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"6:4096":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"5:1396":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"16:3522":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"16:6768":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"12:1200":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:22553":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:8180":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator","nth"],"kind":"foreign_type"},"1:14467":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:1157":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"16:3041":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:10586":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:9065":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:617":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:14604":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:12621":{"crate_id":2,"path":["core","str","pattern","Searcher","next"],"kind":"foreign_type"},"17:9759":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:12712":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"0:125":{"crate_id":0,"path":["tokio","io","AsyncBufRead"],"kind":"trait"},"17:13429":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"6:1522":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:49171":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:11539":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:4288":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"18:667":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:2866":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:12756":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:52599":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:14996":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:1497":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:51080":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"5:6612":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:13377":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:12582":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:13532":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:7985":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"17:12168":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:8223":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator","fuse"],"kind":"foreign_type"},"2:48791":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:6578":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"12:1688":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:9528":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"9:234":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"17:11358":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:23976":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"6:5129":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:10584":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:4517":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"5:1534":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"16:7264":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:52748":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"16:7042":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:4236":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:48459":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:15118":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:13942":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:46199":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:55526":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:1018":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"6:5346":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:47929":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"2:55591":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:10950":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:10864":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:46139":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:3952":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:6120":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:10853":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:1508":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"5:2134":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:9566":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:11779":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"12:2323":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:45780":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"10:0":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:10478":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:13685":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:14974":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:13564":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"14:244":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:3257":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"5:1586":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:12116":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"5:4310":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:8261":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator","try_fold"],"kind":"foreign_type"},"1:4588":{"crate_id":1,"path":["std","io","Seek","seek"],"kind":"foreign_type"},"2:46179":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:6518":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:600":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:7119":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:3055":{"crate_id":2,"path":["core","convert","Into","into"],"kind":"foreign_type"},"16:3118":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:48455":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:8705":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:5494":{"crate_id":1,"path":["std","os"],"kind":"module"},"2:45403":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"14:47":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:606":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:6004":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:47270":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:11628":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:23529":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:50660":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"9:1020":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:10704":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:1462":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:13620":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:13312":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:52536":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:1908":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:10407":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:56840":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"6:611":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:12622":{"crate_id":2,"path":["core","str","pattern","Searcher","next_match"],"kind":"foreign_type"},"2:3223":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:10923":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"16:2843":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:15109":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:6668":{"crate_id":1,"path":["std","os","linux","process","ChildExt","take_pidfd"],"kind":"foreign_type"},"17:9440":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:47920":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"6:5166":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"16:6591":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"5:1595":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:3160":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:9175":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:50765":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:15132":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:11194":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:50953":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"5:3660":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"1:5631":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt","atime"],"kind":"foreign_type"},"12:840":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"12:1762":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"9:41":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"6:1708":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"5:4325":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:8905":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:6050":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:46049":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"17:11767":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:3396":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:45828":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:37085":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"16:6780":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:12671":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:45811":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"9:776":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"2:7984":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:2107":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"5:1179":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:12442":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:49155":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:12629":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:9799":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:31817":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"1:991":{"crate_id":1,"path":["std","thread","sleep"],"kind":"function"},"2:24112":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:10917":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"6:5997":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:1520":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"5:7962":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"12:1651":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:4465":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:23624":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:50785":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:10266":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"18:720":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:5190":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:4276":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:5407":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:4571":{"crate_id":1,"path":["std","io","Write","write_vectored"],"kind":"foreign_type"},"17:13465":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:46167":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:13386":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:10571":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:11499":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:11847":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:45482":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:1079":{"crate_id":1,"path":["std","ascii","AsciiExt","to_ascii_lowercase"],"kind":"foreign_type"},"1:5601":{"crate_id":1,"path":["std","os","unix","fs","FileExt","read_at"],"kind":"foreign_type"},"1:1641":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"16:5960":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:4597":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"5:3591":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:13865":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"16:5996":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:9849":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"5:2892":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"16:3714":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:10106":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:7754":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:2772":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"17:11696":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:9133":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:1082":{"crate_id":1,"path":["std","ascii","AsciiExt","make_ascii_lowercase"],"kind":"foreign_type"},"16:5632":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"16:5505":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:11290":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:10149":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:6413":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"5:7995":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"18:620":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:22607":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:4872":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"2:50554":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"5:8145":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:5986":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:12645":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"16:5580":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:12317":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:11075":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:13154":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:47042":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:3246":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"6:1540":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:10098":{"crate_id":2,"path":["core","hash","Hash","hash"],"kind":"foreign_type"},"17:11015":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"16:7226":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"16:4704":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:10625":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:5258":{"crate_id":2,"path":["core","iter"],"kind":"module"},"16:5927":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"0:53":{"crate_id":0,"path":["tokio","pin"],"kind":"macro"},"6:4342":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:47110":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"16:6718":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"14:0":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:52709":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:9332":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:13978":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:23646":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:5862":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:11616":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"0:104":{"crate_id":0,"path":["tokio","io"],"kind":"module"},"6:4295":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:6982":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"18:782":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"18:712":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:13290":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:11254":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"17:12982":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"12:2331":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:49275":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"18:754":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:15639":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:4569":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"16:7406":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"5:3457":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:1199":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:7352":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"5:6312":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:9405":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"1:3095":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:3893":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:510":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:13590":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:48940":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:564":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:3270":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:10883":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:7975":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:11886":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:13675":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"1:10607":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:8170":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"5:5090":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:4489":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:45857":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"9:686":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"5:1080":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:11080":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"16:7185":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:5211":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"1:1623":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:4319":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"16:3338":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:49189":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:1132":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:6740":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:14762":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:51492":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"16:4823":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:8929":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:12262":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:15604":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"13:232":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"5:6424":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:14235":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"12:181":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:12247":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:10041":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"12:2025":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:0":{"crate_id":2,"path":["core"],"kind":"module"},"2:45380":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"12:1180":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:7514":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:9769":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:9571":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:4035":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:46031":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:13172":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:9412":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"1:7372":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:9895":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"5:3951":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"16:6238":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:11482":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:6635":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:2838":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:11738":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"6:5952":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:3617":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"18:790":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:11768":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:45905":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:49831":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:10362":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"7:85":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:4595":{"crate_id":1,"path":["std","io","BufRead","fill_buf"],"kind":"foreign_type"},"2:2663":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"16:5421":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:2512":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"5:2887":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:49764":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:10001":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:6667":{"crate_id":1,"path":["std","os","linux","process","ChildExt","pidfd"],"kind":"foreign_type"},"5:421":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:9899":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:13488":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:45721":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"16:5941":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:4240":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:10500":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:47944":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"18:152":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:13506":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:49608":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:9886":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:8274":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator","fold"],"kind":"foreign_type"},"2:46990":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:8171":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator","Item"],"kind":"foreign_type"},"1:988":{"crate_id":1,"path":["std","thread","yield_now"],"kind":"function"},"6:4140":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:4733":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:783":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"5:3603":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:8019":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:48858":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:4434":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:8204":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator","enumerate"],"kind":"foreign_type"},"2:13314":{"crate_id":2,"path":["core","future","future","Future","poll"],"kind":"foreign_type"},"17:13205":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:13614":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:6574":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:23348":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"2:8189":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator","map"],"kind":"foreign_type"},"17:607":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"16:6072":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:4574":{"crate_id":1,"path":["std","io","Write","flush"],"kind":"foreign_type"},"6:4473":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:13453":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:8208":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator","take_while"],"kind":"foreign_type"},"2:8452":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:9933":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:11118":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:8377":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator","unzip"],"kind":"foreign_type"},"6:4396":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:13637":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"6:6027":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:3913":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:12480":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:3436":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"16:6087":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:13119":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"16:3145":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:46130":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"6:4178":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:5370":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:6869":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:52826":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:1676":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"12:937":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"18:677":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"11:46":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"1:15656":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:13547":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:10502":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"12:761":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"12:2032":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"9:469":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:24214":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:47120":{"crate_id":2,"path":["core","sync","atomic","Ordering","Relaxed"],"kind":"foreign_type"},"5:7031":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:1617":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:49369":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:51002":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:10921":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:12539":{"crate_id":2,"path":["core","str","traits","FromStr","Err"],"kind":"foreign_type"},"1:9110":{"crate_id":1,"path":["std","lazy","SyncLazy"],"kind":"struct"},"13:120":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:52846":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:1632":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:10977":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"17:12343":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:11186":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:6154":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:47033":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:15644":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"16:6014":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:0":{"crate_id":17,"path":["object"],"kind":"module"},"1:10887":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:9905":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:11653":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:14266":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"6:0":{"crate_id":6,"path":["libc"],"kind":"module"},"2:9844":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:11918":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:45727":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"18:704":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:3525":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:8904":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"5:7755":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"16:7216":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:7571":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:3382":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:13711":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:13041":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"0:167":{"crate_id":0,"path":["tokio","io","AsyncRead"],"kind":"trait"},"18:866":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"12:892":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"18:885":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:11199":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:11678":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:3689":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"16:5029":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:47974":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:13306":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:6564":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:2173":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:48830":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"16:4230":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:11506":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:8722":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"1:5622":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:1665":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:11231":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:11082":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:10100":{"crate_id":2,"path":["core","hash","Hash","hash_slice"],"kind":"foreign_type"},"1:10865":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:13574":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"6:5268":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"6:538":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:11822":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:46965":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:10962":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:10095":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:1760":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:6252":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"0:306":{"crate_id":0,"path":["tokio","io","ReadBuf"],"kind":"struct"},"17:11406":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:12373":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:10623":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:11100":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:11458":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:11172":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:15653":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:3245":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:5717":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:5273":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:4414":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:13296":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:1149":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:11957":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"20:0":{"crate_id":20,"path":["pin_project_lite"],"kind":"module"},"1:10581":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"6:4055":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:23545":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"14:189":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:15609":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:11798":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"17:10788":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:2446":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"6:1596":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"19:0":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:10081":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:14013":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"16:5330":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:5833":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"9:749":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"1:10423":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"16:2816":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:3155":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"16:7823":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:12632":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:4496":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:49076":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"6:5227":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:46119":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"16:5561":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:47354":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:3524":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:47996":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"6:5547":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"16:6391":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:3233":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:6489":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:13609":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:50804":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:50692":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:9719":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"16:3287":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:10162":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"16:6691":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:2733":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:14825":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:10377":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:45334":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:6810":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"6:5944":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"12:968":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:13554":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:11942":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:1622":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"9:900":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:1478":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"5:8128":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"17:13898":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:5399":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:46923":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:12142":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:5849":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"16:5736":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"16:5815":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:4641":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:12280":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"5:69":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:1729":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:5346":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:11434":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:13508":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"2:49596":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:11304":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:10980":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"17:10912":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:4461":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"17:9809":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:15636":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:7266":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"5:7945":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:14598":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:3940":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:10117":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:8770":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:1514":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"0:769":{"crate_id":0,"path":["tokio","task"],"kind":"module"},"2:24146":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:10962":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"6:157":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:13799":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"17:12521":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"6:5220":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"16:7894":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:4107":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:46210":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:22401":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"5:3145":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"6:6863":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:900":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:10237":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:10103":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"1:12462":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:6670":{"crate_id":1,"path":["std","os","linux","process","CommandExt","create_pidfd"],"kind":"foreign_type"},"2:7703":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"6:4326":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:5314":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:10317":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:11135":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"6:1744":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:10810":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:2102":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:3287":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:4578":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:12568":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:14253":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:13810":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"16:7761":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"5:7839":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:52925":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:4008":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:11012":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"17:12195":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:1016":{"crate_id":1,"path":["std","thread","Result"],"kind":"typedef"},"17:10844":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:4485":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:45548":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"12:1667":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:51332":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:49040":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"9:722":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"1:8341":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"5:6870":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:1609":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:7651":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:6576":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"6:3900":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"13:0":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:2196":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:51151":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:50531":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"6:5521":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:6176":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:8263":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"17:11572":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:24044":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:52662":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"6:4359":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:12028":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:6830":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"5:1410":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:9649":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:48255":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:2773":{"crate_id":2,"path":["core","clone","Clone","clone"],"kind":"foreign_type"}},"external_crates":{"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"20":{"name":"pin_project_lite","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":14}