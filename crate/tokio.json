{"root":"0:0:1970","crate_version":"1.21.0","includes_private":false,"index":{"0:333:2703":{"id":"0:333:2703","crate_id":0,"name":"advance","span":{"filename":"src/io/read_buf.rs","begin":[200,4],"end":[203,5]},"visibility":"public","docs":"Advances the size of the filled region of the buffer.\n\nThe number of initialized bytes is not changed.\n\n# Panics\n\nPanics if the filled region of the buffer would become larger than the initialized region.","links":{},"attrs":["#[inline]","#[track_caller]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13832:4717":{"id":"2:13832:4717","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5446:4717"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:50097:4718","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:288:2556":{"id":"0:288:2556","crate_id":0,"name":"poll_flush","span":{"filename":"src/io/async_write.rs","begin":[341,4],"end":[343,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14359:2198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50692:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:385:2737":{"id":"0:385:2737","crate_id":0,"name":"ToSocketAddrs","span":{"filename":"src/net/addr.rs","begin":[19,0],"end":[19,53]},"visibility":"public","docs":"Converts or resolves without blocking to one or more `SocketAddr` values.\n\n# DNS\n\nImplementations of `ToSocketAddrs` for string types require a DNS lookup.\n\n# Calling\n\nCurrently, this trait is only used as an argument to Tokio functions that\nneed to reference a target socket address. To perform a `SocketAddr`\nconversion directly, use [`lookup_host()`](super::lookup_host()).\n\nThis trait is sealed and is intended to be opaque. The details of the trait\nwill change. Stabilization is pending enhancements to the Rust language.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"sealed::ToSocketAddrsPriv","id":"0:441:2767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:388","0:395","0:400","0:405","0:410","0:415","0:420","0:425"]}},"2:3171:150":{"id":"2:3171:150","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3173:4121"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13728:61317":{"id":"2:13728:61317","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"crate::ops::IndexMut":"2:3676:3389","str::slice_unchecked":"2:13727:4770","`str`":"1:15889:3253"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:2859:97":{"id":"2:2859:97","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2861:3317"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2432","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:23102:4948":{"id":"2:23102:4948","crate_id":2,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23103:4952","2:23104:59382","2:23105:1238","2:23106:1239","2:23107:43689","2:23108:59428","2:23109:59429","2:23110:59430","2:23111:59431","2:23112:59432","2:23113:59383","2:23114:59384","2:23115:59385","2:23116:59386","2:23117:59387","2:23118:59388","2:23119:59389"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3374:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23151:4699","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:3212-0:312:2334":{"id":"b:2:3212-0:312:2334","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3171:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3181:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:312:2334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3215:128","2:3216:1430"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:9143:4735":{"id":"1:9143:4735","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9144:56063","1:9145:56064","1:9146:56065","1:9147:56066","1:9148:56067","1:9149:40293","1:9150:56062"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:4699","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:261":{"id":"0:261","crate_id":0,"name":null,"span":{"filename":"src/io/async_write.rs","begin":[217,0],"end":[219,1]},"visibility":{"restricted":{"parent":"0:231:2331","path":"::io::async_write"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2432","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsyncWrite","id":"0:252:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"2:3405:1967","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_write_vectored","poll_write_vectored"],"trait":{"name":"AsyncWrite","id":"0:252:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2433","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:793:2549","0:794:2615","0:795:2627","0:796:2556","0:797:2602"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:23387:17235":{"id":"2:23387:17235","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23388:9442","2:23389:60744","2:23390:60745"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:23380:4699","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:14057:139":{"id":"2:14057:139","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:14058:183","2:14059:1020"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3522:3384":{"id":"2:3522:3384","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3524:360"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9154:4222":{"id":"2:9154:4222","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8874:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5497:4703":{"id":"1:5497:4703","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5498:59049","1:5499:59051","1:5500:59050","1:5501:59052"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:254:2556":{"id":"0:254:2556","crate_id":0,"name":"poll_flush","span":{"filename":"src/io/async_write.rs","begin":[73,4],"end":[73,93]},"visibility":"default","docs":"Attempts to flush the object, ensuring that any buffered data reach\ntheir destination.\n\nOn success, returns `Poll::Ready(Ok(()))`.\n\nIf flushing cannot immediately complete, this method returns\n`Poll::Pending` and arranges for the current task (via\n`cx.waker()`) to receive a notification when the object can make\nprogress towards flushing.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14359:2198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50692:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47933:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"io::Error","id":"1:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:3463:3372":{"id":"2:3463:3372","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3465:271"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3248:116":{"id":"2:3248:116","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3249:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2917:185":{"id":"2:2917:185","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2919:608","2:2920:913"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2432","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:338:664":{"id":"0:338:664","crate_id":0,"name":"fmt","span":{"filename":"src/io/read_buf.rs","begin":[274,4],"end":[280,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10523:135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10512:207","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:265":{"id":"0:265","crate_id":0,"name":null,"span":{"filename":"src/io/async_write.rs","begin":[225,0],"end":[257,1]},"visibility":{"restricted":{"parent":"0:231:2331","path":"::io::async_write"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"DerefMut","id":"2:3600:2390","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"2:3405:1967","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"","id":"2:3587:117","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"AsyncWrite","id":"0:252:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["is_write_vectored","poll_write_vectored"],"trait":{"name":"AsyncWrite","id":"0:252:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"items":["0:267:2549","0:268:2615","0:269:2627","0:270:2556","0:271:2602"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13780:61322":{"id":"2:13780:61322","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47808:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4983","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:4983","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:4987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3676:3389":{"id":"2:3676:3389","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3678:758"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2432","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Index","id":"2:3672:3388","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6183:61974":{"id":"5:6183:61974","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8472:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1970":{"id":"0:0:1970","crate_id":0,"name":"tokio","span":{"filename":"src/lib.rs","begin":[1,0],"end":[646,26]},"visibility":"public","docs":"A runtime for writing reliable network applications without compromising speed.\n\nTokio is an event-driven, non-blocking I/O platform for writing asynchronous\napplications with the Rust programming language. At a high level, it\nprovides a few major components:\n\n* Tools for [working with asynchronous tasks][tasks], including\n  [synchronization primitives and channels][sync] and [timeouts, sleeps, and\n  intervals][time].\n* APIs for [performing asynchronous I/O][io], including [TCP and UDP][net] sockets,\n  [filesystem][fs] operations, and [process] and [signal] management.\n* A [runtime] for executing asynchronous code, including a task scheduler,\n  an I/O driver backed by the operating system's event queue (epoll, kqueue,\n  IOCP, etc...), and a high performance timer.\n\nGuide level documentation is found on the [website].\n\n[tasks]: #working-with-tasks\n[sync]: crate::sync\n[time]: crate::time\n[io]: #asynchronous-io\n[net]: crate::net\n[fs]: crate::fs\n[process]: crate::process\n[signal]: crate::signal\n[fs]: crate::fs\n[runtime]: crate::runtime\n[website]: https://tokio.rs/tokio/tutorial\n\n# A Tour of Tokio\n\nTokio consists of a number of modules that provide a range of functionality\nessential for implementing asynchronous applications in Rust. In this\nsection, we will take a brief tour of Tokio, summarizing the major APIs and\ntheir uses.\n\nThe easiest way to get started is to enable all features. Do this by\nenabling the `full` feature flag:\n\n```toml\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n### Authoring applications\n\nTokio is great for writing applications and most users in this case shouldn't\nworry too much about what features they should pick. If you're unsure, we suggest\ngoing with `full` to ensure that you don't run into any road blocks while you're\nbuilding your application.\n\n#### Example\n\nThis example shows the quickest way to get started with Tokio.\n\n```toml\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n### Authoring libraries\n\nAs a library author your goal should be to provide the lightest weight crate\nthat is based on Tokio. To achieve this you should ensure that you only enable\nthe features you need. This allows users to pick up your crate without having\nto enable unnecessary features.\n\n#### Example\n\nThis example shows how you may want to import features for a library that just\nneeds to `tokio::spawn` and use a `TcpStream`.\n\n```toml\ntokio = { version = \"1\", features = [\"rt\", \"net\"] }\n```\n\n## Working With Tasks\n\nAsynchronous programs in Rust are based around lightweight, non-blocking\nunits of execution called [_tasks_][tasks]. The [`tokio::task`] module provides\nimportant tools for working with tasks:\n\n* The [`spawn`] function and [`JoinHandle`] type, for scheduling a new task\n  on the Tokio runtime and awaiting the output of a spawned task, respectively,\n* Functions for [running blocking operations][blocking] in an asynchronous\n  task context.\n\nThe [`tokio::task`] module is present only when the \"rt\" feature flag\nis enabled.\n\n[tasks]: task/index.html#what-are-tasks\n[`tokio::task`]: crate::task\n[`spawn`]: crate::task::spawn()\n[`JoinHandle`]: crate::task::JoinHandle\n[blocking]: task/index.html#blocking-and-yielding\n\nThe [`tokio::sync`] module contains synchronization primitives to use when\nneeding to communicate or share data. These include:\n\n* channels ([`oneshot`], [`mpsc`], [`watch`], and [`broadcast`]), for sending values\n  between tasks,\n* a non-blocking [`Mutex`], for controlling access to a shared, mutable\n  value,\n* an asynchronous [`Barrier`] type, for multiple tasks to synchronize before\n  beginning a computation.\n\nThe `tokio::sync` module is present only when the \"sync\" feature flag is\nenabled.\n\n[`tokio::sync`]: crate::sync\n[`Mutex`]: crate::sync::Mutex\n[`Barrier`]: crate::sync::Barrier\n[`oneshot`]: crate::sync::oneshot\n[`mpsc`]: crate::sync::mpsc\n[`watch`]: crate::sync::watch\n[`broadcast`]: crate::sync::broadcast\n\nThe [`tokio::time`] module provides utilities for tracking time and\nscheduling work. This includes functions for setting [timeouts][timeout] for\ntasks, [sleeping][sleep] work to run in the future, or [repeating an operation at an\ninterval][interval].\n\nIn order to use `tokio::time`, the \"time\" feature flag must be enabled.\n\n[`tokio::time`]: crate::time\n[sleep]: crate::time::sleep()\n[interval]: crate::time::interval()\n[timeout]: crate::time::timeout()\n\nFinally, Tokio provides a _runtime_ for executing asynchronous tasks. Most\napplications can use the [`#[tokio::main]`][main] macro to run their code on the\nTokio runtime. However, this macro provides only basic configuration options. As\nan alternative, the [`tokio::runtime`] module provides more powerful APIs for configuring\nand managing runtimes. You should use that module if the `#[tokio::main]` macro doesn't\nprovide the functionality you need.\n\nUsing the runtime requires the \"rt\" or \"rt-multi-thread\" feature flags, to\nenable the current-thread [single-threaded scheduler][rt] and the [multi-thread\nscheduler][rt-multi-thread], respectively. See the [`runtime` module\ndocumentation][rt-features] for details. In addition, the \"macros\" feature\nflag enables the `#[tokio::main]` and `#[tokio::test]` attributes.\n\n[main]: attr.main.html\n[`tokio::runtime`]: crate::runtime\n[`Builder`]: crate::runtime::Builder\n[`Runtime`]: crate::runtime::Runtime\n[rt]: runtime/index.html#current-thread-scheduler\n[rt-multi-thread]: runtime/index.html#multi-thread-scheduler\n[rt-features]: runtime/index.html#runtime-scheduler\n\n## CPU-bound tasks and blocking code\n\nTokio is able to concurrently run many tasks on a few threads by repeatedly\nswapping the currently running task on each thread. However, this kind of\nswapping can only happen at `.await` points, so code that spends a long time\nwithout reaching an `.await` will prevent other tasks from running. To\ncombat this, Tokio provides two kinds of threads: Core threads and blocking\nthreads. The core threads are where all asynchronous code runs, and Tokio\nwill by default spawn one for each CPU core. The blocking threads are\nspawned on demand, can be used to run blocking code that would otherwise\nblock other tasks from running and are kept alive when not used for a certain\namount of time which can be configured with [`thread_keep_alive`].\nSince it is not possible for Tokio to swap out blocking tasks, like it\ncan do with asynchronous code, the upper limit on the number of blocking\nthreads is very large. These limits can be configured on the [`Builder`].\n\nTo spawn a blocking task, you should use the [`spawn_blocking`] function.\n\n[`Builder`]: crate::runtime::Builder\n[`spawn_blocking`]: crate::task::spawn_blocking()\n[`thread_keep_alive`]: crate::runtime::Builder::thread_keep_alive()\n\n```\n#[tokio::main]\nasync fn main() {\n    // This is running on a core thread.\n\n    let blocking_task = tokio::task::spawn_blocking(|| {\n        // This is running on a blocking thread.\n        // Blocking here is ok.\n    });\n\n    // We can wait for the blocking task like this:\n    // If the blocking task panics, the unwrap below will propagate the\n    // panic.\n    blocking_task.await.unwrap();\n}\n```\n\nIf your code is CPU-bound and you wish to limit the number of threads used\nto run it, you should use a separate thread pool dedicated to CPU bound tasks.\nFor example, you could consider using the [rayon] library for CPU-bound\ntasks. It is also possible to create an extra Tokio runtime dedicated to\nCPU-bound tasks, but if you do this, you should be careful that the extra\nruntime runs _only_ CPU-bound tasks, as IO-bound tasks on that runtime\nwill behave poorly.\n\nHint: If using rayon, you can use a [`oneshot`] channel to send the result back\nto Tokio when the rayon task finishes.\n\n[rayon]: https://docs.rs/rayon\n[`oneshot`]: crate::sync::oneshot\n\n## Asynchronous IO\n\nAs well as scheduling and running tasks, Tokio provides everything you need\nto perform input and output asynchronously.\n\nThe [`tokio::io`] module provides Tokio's asynchronous core I/O primitives,\nthe [`AsyncRead`], [`AsyncWrite`], and [`AsyncBufRead`] traits. In addition,\nwhen the \"io-util\" feature flag is enabled, it also provides combinators and\nfunctions for working with these traits, forming as an asynchronous\ncounterpart to [`std::io`].\n\nTokio also includes APIs for performing various kinds of I/O and interacting\nwith the operating system asynchronously. These include:\n\n* [`tokio::net`], which contains non-blocking versions of [TCP], [UDP], and\n  [Unix Domain Sockets][UDS] (enabled by the \"net\" feature flag),\n* [`tokio::fs`], similar to [`std::fs`] but for performing filesystem I/O\n  asynchronously (enabled by the \"fs\" feature flag),\n* [`tokio::signal`], for asynchronously handling Unix and Windows OS signals\n  (enabled by the \"signal\" feature flag),\n* [`tokio::process`], for spawning and managing child processes (enabled by\n  the \"process\" feature flag).\n\n[`tokio::io`]: crate::io\n[`AsyncRead`]: crate::io::AsyncRead\n[`AsyncWrite`]: crate::io::AsyncWrite\n[`AsyncBufRead`]: crate::io::AsyncBufRead\n[`std::io`]: std::io\n[`tokio::net`]: crate::net\n[TCP]: crate::net::tcp\n[UDP]: crate::net::UdpSocket\n[UDS]: crate::net::unix\n[`tokio::fs`]: crate::fs\n[`std::fs`]: std::fs\n[`tokio::signal`]: crate::signal\n[`tokio::process`]: crate::process\n\n# Examples\n\nA simple TCP echo server:\n\n```no_run\nuse tokio::net::TcpListener;\nuse tokio::io::{AsyncReadExt, AsyncWriteExt};\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let listener = TcpListener::bind(\"127.0.0.1:8080\").await?;\n\n    loop {\n        let (mut socket, _) = listener.accept().await?;\n\n        tokio::spawn(async move {\n            let mut buf = [0; 1024];\n\n            // In a loop, read data from the socket and write the data back.\n            loop {\n                let n = match socket.read(&mut buf).await {\n                    // socket closed\n                    Ok(n) if n == 0 => return,\n                    Ok(n) => n,\n                    Err(e) => {\n                        eprintln!(\"failed to read from socket; err = {:?}\", e);\n                        return;\n                    }\n                };\n\n                // Write the data back\n                if let Err(e) = socket.write_all(&buf[0..n]).await {\n                    eprintln!(\"failed to write to socket; err = {:?}\", e);\n                    return;\n                }\n            }\n        });\n    }\n}\n```\n\n## Feature flags\n\nTokio uses a set of [feature flags] to reduce the amount of compiled code. It\nis possible to just enable certain features over others. By default, Tokio\ndoes not enable any features but allows one to enable a subset for their use\ncase. Below is a list of the available feature flags. You may also notice\nabove each function, struct and trait there is listed one or more feature flags\nthat are required for that item to be used. If you are new to Tokio it is\nrecommended that you use the `full` feature flag which will enable all public APIs.\nBeware though that this will pull in many extra dependencies that you may not\nneed.\n\n- `full`: Enables all features listed below except `test-util` and `tracing`.\n- `rt`: Enables `tokio::spawn`, the current-thread scheduler,\n        and non-scheduler utilities.\n- `rt-multi-thread`: Enables the heavier, multi-threaded, work-stealing scheduler.\n- `io-util`: Enables the IO based `Ext` traits.\n- `io-std`: Enable `Stdout`, `Stdin` and `Stderr` types.\n- `net`: Enables `tokio::net` types such as `TcpStream`, `UnixStream` and\n         `UdpSocket`, as well as (on Unix-like systems) `AsyncFd` and (on\n         FreeBSD) `PollAio`.\n- `time`: Enables `tokio::time` types and allows the schedulers to enable\n          the built in timer.\n- `process`: Enables `tokio::process` types.\n- `macros`: Enables `#[tokio::main]` and `#[tokio::test]` macros.\n- `sync`: Enables all `tokio::sync` types.\n- `signal`: Enables all `tokio::signal` types.\n- `fs`: Enables `tokio::fs` types.\n- `test-util`: Enables testing based infrastructure for the Tokio runtime.\n\n_Note: `AsyncRead` and `AsyncWrite` traits do not require any features and are\nalways available._\n\n### Internal features\n\nThese features do not expose any new API, but influence internal\nimplementation aspects of Tokio, and can pull in additional\ndependencies.\n\n- `parking_lot`: As a potential optimization, use the _parking_lot_ crate's\nsynchronization primitives internally. MSRV may increase according to the\n_parking_lot_ release in use.\n\n### Unstable features\n\nSome feature flags are only available when specifying the `tokio_unstable` flag:\n\n- `tracing`: Enables tracing events.\n\nLikewise, some parts of the API are only available with the same flag:\n\n- [`task::Builder`]\n- Some methods on [`task::JoinSet`]\n- [`runtime::RuntimeMetrics`]\n- [`runtime::Builder::unhandled_panic`]\n- [`task::Id`]\n\nThis flag enables **unstable** features. The public API of these features\nmay break in 1.x releases. To enable these features, the `--cfg\ntokio_unstable` argument must be passed to `rustc` when compiling. This\nserves to explicitly opt-in to features which may break semver conventions,\nsince Cargo [does not yet directly support such opt-ins][unstable features].\n\nYou can specify it in your project's `.cargo/config.toml` file:\n\n```toml\n[build]\nrustflags = [\"--cfg\", \"tokio_unstable\"]\n```\n\nAlternatively, you can specify it with an environment variable:\n\n```sh\n## Many *nix shells:\nexport RUSTFLAGS=\"--cfg tokio_unstable\"\ncargo build\n```\n\n```powershell\n## Windows PowerShell:\n$Env:RUSTFLAGS=\"--cfg tokio_unstable\"\ncargo build\n```\n\n[unstable features]: https://internals.rust-lang.org/t/feature-request-unstable-opt-in-non-transitive-crate-features/16193#why-not-a-crate-feature-2\n[feature flags]: https://doc.rust-lang.org/cargo/reference/manifest.html#the-features-section\n\n## WASM support\n\nTokio has some limited support for the WASM platform. Without the\n`tokio_unstable` flag, the following features are supported:\n\n * `sync`\n * `macros`\n * `io-util`\n * `rt`\n * `time`\n\nEnabling any other feature (including `full`) will cause a compilation\nfailure.\n\nThe `time` module will only work on WASM platforms that have support for\ntimers (e.g. wasm32-wasi). The timing functions will panic if used on a WASM\nplatform that does not support timers.\n\nNote also that if the runtime becomes indefinitely idle, it will panic\nimmediately instead of blocking forever. On platforms that don't support\ntime, this means that the runtime can never be idle in any way.\n\n### Unstable WASM support\n\nTokio also has unstable support for some additional WASM features. This\nrequires the use of the `tokio_unstable` flag.\n\nUsing this flag enables the use of `tokio::net` on the wasm32-wasi target.\nHowever, not all methods are available on the networking types as WASI\ncurrently does not support the creation of new sockets from within WASM.\nBecause of this, sockets must currently be created via the `FromRawFd`\ntrait.","links":{"crate::io::AsyncRead":"0:173:2328","crate::io::AsyncBufRead":"0:131:2326","crate::io::AsyncWrite":"0:252:2332","crate::sync":"0:834:1373","crate::net":"0:358:1899","std::fs":"1:2851:1897","crate::task":"0:776:1391","std::io":"1:3085:1906","crate::io":"0:110:1906"},"attrs":["#![allow(clippy :: cognitive_complexity, clippy :: large_enum_variant, clippy\n:: needless_doctest_main)]","#![warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\nunreachable_pub)]","#![deny(unused_must_use)]","#![doc(test(no_crate_inject,\nattr(deny(warnings, rust_2018_idioms), allow(dead_code, unused_variables))))]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:110:1906","0:358:1899","0:776:1391","0:779:1949","0:56:1012"],"is_stripped":false}},"0:267:2549":{"id":"0:267:2549","crate_id":0,"name":"poll_write","span":{"filename":"src/io/async_write.rs","begin":[230,4],"end":[236,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14359:2198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50692:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:1031:4715":{"id":"1:1031:4715","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1032:4186","1:1033:5432","1:1034:56198","1:1035:56199","1:1036:56200","1:1037:56201","1:1038:56202"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:445:2770":{"id":"0:445:2770","crate_id":0,"name":"Internal","span":{"filename":"src/net/addr.rs","begin":[270,4],"end":[270,24]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(missing_debug_implementations)]"],"deprecation":null,"kind":"struct","inner":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":[]}},"2:3376:224":{"id":"2:3376:224","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:4097-0:312:2334":{"id":"b:2:4097-0:312:2334","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2432","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4095:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:312:2334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:4099:1443"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:796:2556":{"id":"0:796:2556","crate_id":0,"name":"poll_flush","span":{"filename":"src/io/async_write.rs","begin":[218,4],"end":[218,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14359:2198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50692:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:324:2666":{"id":"0:324:2666","crate_id":0,"name":"take","span":{"filename":"src/io/read_buf.rs","begin":[80,4],"end":[84,5]},"visibility":"public","docs":"Returns a new `ReadBuf` comprised of the unfilled section up to `n`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:312:2334","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:287:2627":{"id":"0:287:2627","crate_id":0,"name":"is_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[337,4],"end":[339,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3475:3373":{"id":"2:3475:3373","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3477:564"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:259:2627":{"id":"0:259:2627","crate_id":0,"name":"is_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[180,4],"end":[182,5]},"visibility":"default","docs":"Determines if this writer has an efficient [`poll_write_vectored`]\nimplementation.\n\nIf a writer does not override the default [`poll_write_vectored`]\nimplementation, code using it may want to avoid the method all together\nand coalesce writes into a single buffer for higher performance.\n\nThe default implementation returns `false`.\n\n[`poll_write_vectored`]: AsyncWrite::poll_write_vectored","links":{"AsyncWrite::poll_write_vectored":"0:256:2615"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:278":{"id":"0:278","crate_id":0,"name":null,"span":{"filename":"src/io/async_write.rs","begin":[290,0],"end":[318,1]},"visibility":{"restricted":{"parent":"0:231:2331","path":"::io::async_write"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_write_vectored","poll_write_vectored"],"trait":{"name":"AsyncWrite","id":"0:252:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"io::Cursor","id":"1:10719:2437","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}}],"bindings":[]}}}},"items":["0:279:2549","0:280:2615","0:281:2627","0:282:2556","0:283:2602"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:10584:3620":{"id":"2:10584:3620","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10585:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:784:2428":{"id":"0:784:2428","crate_id":0,"name":"consume","span":{"filename":"src/io/async_buf_read.rs","begin":[78,4],"end":[78,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["amt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:395":{"id":"0:395","crate_id":0,"name":null,"span":{"filename":"src/net/addr.rs","begin":[50,0],"end":[50,36]},"visibility":{"restricted":{"parent":"0:359:2735","path":"::net::addr"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ToSocketAddrs","id":"0:385:2737","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SocketAddr","id":"1:10999:2754","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:271:2602":{"id":"0:271:2602","crate_id":0,"name":"poll_shutdown","span":{"filename":"src/io/async_write.rs","begin":[254,4],"end":[256,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14359:2198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50692:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13759:33030":{"id":"2:13759:33030","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:13332:4984","prim@char":"1:15883:3248"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:13124:5251","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4983","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:213:2503":{"id":"0:213:2503","crate_id":0,"name":"start_seek","span":{"filename":"src/io/async_seek.rs","begin":[33,4],"end":[33,78]},"visibility":"default","docs":"Attempts to seek to an offset, in bytes, in a stream.\n\nA seek beyond the end of a stream is allowed, but behavior is defined\nby the implementation.\n\nIf this function returns successfully, then the job has been submitted.\nTo find out when it completes, call `poll_complete`.\n\n# Errors\n\nThis function can return [`io::ErrorKind::Other`] in case there is\nanother seek in progress. To avoid this, it is advisable that any call\nto `start_seek` is preceded by a call to `poll_complete` to ensure all\npending seeks have completed.","links":{"`io::ErrorKind::Other`":"1:10878:4592"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["position",{"kind":"resolved_path","inner":{"name":"SeekFrom","id":"1:10942:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:2:3405:1967-0:312:2334":{"id":"a:2:3405:1967-0:312:2334","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:3405:1967","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:312:2334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:10572:3615":{"id":"2:10572:3615","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10573:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:332:2699":{"id":"0:332:2699","crate_id":0,"name":"clear","span":{"filename":"src/io/read_buf.rs","begin":[187,4],"end":[189,5]},"visibility":"public","docs":"Clears the buffer, resetting the filled region to empty.\n\nThe number of initialized bytes is not changed, and the contents of the buffer are not modified.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3506:3381":{"id":"2:3506:3381","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3508:183","2:3509:1244"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10578:3622":{"id":"2:10578:3622","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10579:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3181:232":{"id":"2:3181:232","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3183:128","2:3184:1430"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:110:1906":{"id":"0:110:1906","crate_id":0,"name":"io","span":{"filename":"src/io/mod.rs","begin":[1,0],"end":[278,1]},"visibility":"public","docs":"Traits, helpers, and type definitions for asynchronous I/O functionality.\n\nThis module is the asynchronous version of `std::io`. Primarily, it\ndefines two traits, [`AsyncRead`] and [`AsyncWrite`], which are asynchronous\nversions of the [`Read`] and [`Write`] traits in the standard library.\n\n# AsyncRead and AsyncWrite\n\nLike the standard library's [`Read`] and [`Write`] traits, [`AsyncRead`] and\n[`AsyncWrite`] provide the most general interface for reading and writing\ninput and output. Unlike the standard library's traits, however, they are\n_asynchronous_ &mdash; meaning that reading from or writing to a `tokio::io`\ntype will _yield_ to the Tokio scheduler when IO is not ready, rather than\nblocking. This allows other tasks to run while waiting on IO.\n\nAnother difference is that `AsyncRead` and `AsyncWrite` only contain\ncore methods needed to provide asynchronous reading and writing\nfunctionality. Instead, utility methods are defined in the [`AsyncReadExt`]\nand [`AsyncWriteExt`] extension traits. These traits are automatically\nimplemented for all values that implement `AsyncRead` and `AsyncWrite`\nrespectively.\n\nEnd users will rarely interact directly with `AsyncRead` and\n`AsyncWrite`. Instead, they will use the async functions defined in the\nextension traits. Library authors are expected to implement `AsyncRead`\nand `AsyncWrite` in order to provide types that behave like byte streams.\n\nEven with these differences, Tokio's `AsyncRead` and `AsyncWrite` traits\ncan be used in almost exactly the same manner as the standard library's\n`Read` and `Write`. Most types in the standard library that implement `Read`\nand `Write` have asynchronous equivalents in `tokio` that implement\n`AsyncRead` and `AsyncWrite`, such as [`File`] and [`TcpStream`].\n\nFor example, the standard library documentation introduces `Read` by\n[demonstrating][std_example] reading some bytes from a [`std::fs::File`]. We\ncan do the same with [`tokio::fs::File`][`File`]:\n\n```no_run\nuse tokio::io::{self, AsyncReadExt};\nuse tokio::fs::File;\n\n#[tokio::main]\nasync fn main() -> io::Result<()> {\n    let mut f = File::open(\"foo.txt\").await?;\n    let mut buffer = [0; 10];\n\n    // read up to 10 bytes\n    let n = f.read(&mut buffer).await?;\n\n    println!(\"The bytes: {:?}\", &buffer[..n]);\n    Ok(())\n}\n```\n\n[`File`]: crate::fs::File\n[`TcpStream`]: crate::net::TcpStream\n[`std::fs::File`]: std::fs::File\n[std_example]: std::io#read-and-write\n\n## Buffered Readers and Writers\n\nByte-based interfaces are unwieldy and can be inefficient, as we'd need to be\nmaking near-constant calls to the operating system. To help with this,\n`std::io` comes with [support for _buffered_ readers and writers][stdbuf],\nand therefore, `tokio::io` does as well.\n\nTokio provides an async version of the [`std::io::BufRead`] trait,\n[`AsyncBufRead`]; and async [`BufReader`] and [`BufWriter`] structs, which\nwrap readers and writers. These wrappers use a buffer, reducing the number\nof calls and providing nicer methods for accessing exactly what you want.\n\nFor example, [`BufReader`] works with the [`AsyncBufRead`] trait to add\nextra methods to any async reader:\n\n```no_run\nuse tokio::io::{self, BufReader, AsyncBufReadExt};\nuse tokio::fs::File;\n\n#[tokio::main]\nasync fn main() -> io::Result<()> {\n    let f = File::open(\"foo.txt\").await?;\n    let mut reader = BufReader::new(f);\n    let mut buffer = String::new();\n\n    // read a line into buffer\n    reader.read_line(&mut buffer).await?;\n\n    println!(\"{}\", buffer);\n    Ok(())\n}\n```\n\n[`BufWriter`] doesn't add any new ways of writing; it just buffers every call\nto [`write`](crate::io::AsyncWriteExt::write). However, you **must** flush\n[`BufWriter`] to ensure that any buffered data is written.\n\n```no_run\nuse tokio::io::{self, BufWriter, AsyncWriteExt};\nuse tokio::fs::File;\n\n#[tokio::main]\nasync fn main() -> io::Result<()> {\n    let f = File::create(\"foo.txt\").await?;\n    {\n        let mut writer = BufWriter::new(f);\n\n        // Write a byte to the buffer.\n        writer.write(&[42u8]).await?;\n\n        // Flush the buffer before it goes out of scope.\n        writer.flush().await?;\n\n    } // Unless flushed or shut down, the contents of the buffer is discarded on drop.\n\n    Ok(())\n}\n```\n\n[stdbuf]: std::io#bufreader-and-bufwriter\n[`std::io::BufRead`]: std::io::BufRead\n[`AsyncBufRead`]: crate::io::AsyncBufRead\n[`BufReader`]: crate::io::BufReader\n[`BufWriter`]: crate::io::BufWriter\n\n## Implementing AsyncRead and AsyncWrite\n\nBecause they are traits, we can implement [`AsyncRead`] and [`AsyncWrite`] for\nour own types, as well. Note that these traits must only be implemented for\nnon-blocking I/O types that integrate with the futures type system. In\nother words, these types must never block the thread, and instead the\ncurrent task is notified when the I/O resource is ready.\n\n## Conversion to and from Sink/Stream\n\nIt is often convenient to encapsulate the reading and writing of\nbytes and instead work with a [`Sink`] or [`Stream`] of some data\ntype that is encoded as bytes and/or decoded from bytes. Tokio\nprovides some utility traits in the [tokio-util] crate that\nabstract the asynchronous buffering that is required and allows\nyou to write [`Encoder`] and [`Decoder`] functions working with a\nbuffer of bytes, and then use that [\"codec\"] to transform anything\nthat implements [`AsyncRead`] and [`AsyncWrite`] into a `Sink`/`Stream` of\nyour structured data.\n\n[tokio-util]: https://docs.rs/tokio-util/0.6/tokio_util/codec/index.html\n\n# Standard input and output\n\nTokio provides asynchronous APIs to standard [input], [output], and [error].\nThese APIs are very similar to the ones provided by `std`, but they also\nimplement [`AsyncRead`] and [`AsyncWrite`].\n\nNote that the standard input / output APIs  **must** be used from the\ncontext of the Tokio runtime, as they require Tokio-specific features to\nfunction. Calling these functions outside of a Tokio runtime will panic.\n\n[input]: fn@stdin\n[output]: fn@stdout\n[error]: fn@stderr\n\n# `std` re-exports\n\nAdditionally, [`Error`], [`ErrorKind`], [`Result`], and [`SeekFrom`] are\nre-exported from `std::io` for ease of use.\n\n[`AsyncRead`]: trait@AsyncRead\n[`AsyncWrite`]: trait@AsyncWrite\n[`AsyncReadExt`]: trait@AsyncReadExt\n[`AsyncWriteExt`]: trait@AsyncWriteExt\n[\"codec\"]: https://docs.rs/tokio-util/0.6/tokio_util/codec/index.html\n[`Encoder`]: https://docs.rs/tokio-util/0.6/tokio_util/codec/trait.Encoder.html\n[`Decoder`]: https://docs.rs/tokio-util/0.6/tokio_util/codec/trait.Decoder.html\n[`Error`]: struct@Error\n[`ErrorKind`]: enum@ErrorKind\n[`Result`]: type@Result\n[`Read`]: std::io::Read\n[`SeekFrom`]: enum@SeekFrom\n[`Sink`]: https://docs.rs/futures/0.3/futures/sink/trait.Sink.html\n[`Stream`]: https://docs.rs/futures/0.3/futures/stream/trait.Stream.html\n[`Write`]: std::io::Write","links":{"trait@AsyncWrite":"0:252:2332","crate::io::AsyncBufRead":"0:131:2326","enum@ErrorKind":"1:10799:2335","std::fs::File":"1:2909:129","type@Result":"1:3801:207","std::io#bufreader-and-bufwriter":"1:3085:1906","enum@SeekFrom":"1:10942:2336","struct@Error":"1:3803:128","std::io::BufRead":"1:4492:2438","trait@AsyncRead":"0:173:2328","std::io#read-and-write":"1:3085:1906","std::io::Write":"1:4467:2630","std::io::Read":"1:4410:3413"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:150","0:188","0:228","0:302","0:342","0:346","0:349","0:352","0:355"],"is_stripped":false}},"2:13342:4983":{"id":"2:13342:4983","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13344:4986","2:13345:60192","2:13346:60197","2:13347:60193","2:13348:60195","2:13349:60194","2:13350:60196"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23763:4954":{"id":"2:23763:4954","crate_id":2,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23764:1283","2:23765:1282","2:23766:1280","2:23767:1279"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialEq","id":"2:23175:5132","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:4467:2630":{"id":"1:4467:2630","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4468:2632","1:4469:2631","1:4471:2627","1:4472:2633","1:4473:4207","1:4474:4208","1:4475:4209","1:4484:4153"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3672:3388":{"id":"2:3672:3388","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3674:183","2:3675:757"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2432","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:9157:4223":{"id":"2:9157:4223","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8874:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:11205:218":{"id":"2:11205:218","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:11207:183","2:11208:2827","2:11209:2431","2:11210:57349","2:11211:57350","2:11212:757","2:11213:758"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2432","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:11196:4699","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3372:222":{"id":"2:3372:222","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13357:4987":{"id":"2:13357:4987","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13359:4122","2:13360:59602","2:13361:59603"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Searcher","id":"2:13351:4986","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13712:61315":{"id":"2:13712:61315","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13710:61314"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13771:57380":{"id":"2:13771:57380","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"str::rsplitn":"2:13774:57382","self::pattern":"2:13332:4984","prim@char":"1:15883:3248"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49893:5257","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4983","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:184:2472":{"id":"0:184:2472","crate_id":0,"name":"poll_read","span":{"filename":"src/io/async_read.rs","begin":[95,4],"end":[105,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14359:2198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:312:2334","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50692:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:785:2418":{"id":"0:785:2418","crate_id":0,"name":"poll_fill_buf","span":{"filename":"src/io/async_buf_read.rs","begin":[82,4],"end":[82,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14359:2198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50692:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3491:3377":{"id":"2:3491:3377","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3493:183","2:3494:357"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6241:4730":{"id":"1:6241:4730","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6242:59220","1:6243:1902","1:6244:59221","1:6245:59222","1:6246:59223","1:6247:59224"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:4699","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:272":{"id":"0:272","crate_id":0,"name":null,"span":{"filename":"src/io/async_write.rs","begin":[259,0],"end":[288,1]},"visibility":{"restricted":{"parent":"0:231:2331","path":"::io::async_write"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_write_vectored","poll_write_vectored"],"trait":{"name":"AsyncWrite","id":"0:252:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7891:239","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}},"items":["0:273:2549","0:274:2615","0:275:2627","0:276:2556","0:277:2602"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:216":{"id":"0:216","crate_id":0,"name":null,"span":{"filename":"src/io/async_seek.rs","begin":[61,0],"end":[63,1]},"visibility":{"restricted":{"parent":"0:191:2329","path":"::io::async_seek"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2432","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsyncSeek","id":"0:212:2330","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"2:3405:1967","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsyncSeek","id":"0:212:2330","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2433","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:789:2503","0:790:2511"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:4752:2737":{"id":"1:4752:2737","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4753:2771","1:4754:2736"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:447":{"id":"0:447","crate_id":0,"name":null,"span":{"filename":"src/net/mod.rs","begin":[30,0],"end":[30,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"addr::ToSocketAddrs","name":"ToSocketAddrs","id":"0:385:2737","glob":false}},"2:13745:57386":{"id":"2:13745:57386","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:15883:3248","self::pattern":"2:13332:4984"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4983","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:4983","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:4987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13727:4770":{"id":"2:13727:4770","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"crate::ops::Index":"2:3672:3388","`str`":"1:15889:3253","str::slice_mut_unchecked":"2:13728:61317"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:279:2549":{"id":"0:279:2549","crate_id":0,"name":"poll_write","span":{"filename":"src/io/async_write.rs","begin":[291,4],"end":[297,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14359:2198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50692:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:275:2627":{"id":"0:275:2627","crate_id":0,"name":"is_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[277,4],"end":[279,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:786:2428":{"id":"0:786:2428","crate_id":0,"name":"consume","span":{"filename":"src/io/async_buf_read.rs","begin":[82,4],"end":[82,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["amt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5505:4702":{"id":"1:5505:4702","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5506:7364","1:5507:56232","1:5508:56233"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:285:2549":{"id":"0:285:2549","crate_id":0,"name":"poll_write","span":{"filename":"src/io/async_write.rs","begin":[321,4],"end":[327,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14359:2198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50692:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4492:2438":{"id":"1:4492:2438","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4493:2439","1:4494:2428","1:4495:4189","1:4497:3416","1:4498:4190","1:4500:2360","1:4501:4191"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Read","id":"1:4410:3413","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6185:2368":{"id":"5:6185:2368","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8472:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3376:224-0:312:2334":{"id":"a:2:3376:224-0:312:2334","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3376:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:312:2334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:9533:3681":{"id":"2:9533:3681","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10846:2815":{"id":"2:10846:2815","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10847:147","2:10848:2820","2:10849:4297"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:178":{"id":"0:178","crate_id":0,"name":null,"span":{"filename":"src/io/async_read.rs","begin":[76,0],"end":[78,1]},"visibility":{"restricted":{"parent":"0:153:2327","path":"::io::async_read"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2432","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsyncRead","id":"0:173:2328","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"2:3405:1967","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsyncRead","id":"0:173:2328","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"items":["0:788:2472"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:187:2472":{"id":"0:187:2472","crate_id":0,"name":"poll_read","span":{"filename":"src/io/async_read.rs","begin":[109,4],"end":[130,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14359:2198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:312:2334","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50692:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9534:3680-0:312:2334":{"id":"a:2:9534:3680-0:312:2334","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:9534:3680","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:312:2334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3200:4121":{"id":"2:3200:4121","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3174:136"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13715:56058":{"id":"2:13715:56058","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12796:5389"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:180":{"id":"0:180","crate_id":0,"name":null,"span":{"filename":"src/io/async_read.rs","begin":[80,0],"end":[92,1]},"visibility":{"restricted":{"parent":"0:153:2327","path":"::io::async_read"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"DerefMut","id":"2:3600:2390","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"2:3405:1967","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"","id":"2:3587:117","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"AsyncRead","id":"0:173:2328","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsyncRead","id":"0:173:2328","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"items":["0:182:2472"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:150":{"id":"0:150","crate_id":0,"name":null,"span":{"filename":"src/io/mod.rs","begin":[186,0],"end":[186,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::async_buf_read::AsyncBufRead","name":"AsyncBufRead","id":"0:131:2326","glob":false}},"b:2:3207-0:312:2334":{"id":"b:2:3207-0:312:2334","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3181:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3177:233","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:312:2334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3210:128","2:3211:1431"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:299:2627":{"id":"0:299:2627","crate_id":0,"name":"is_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[397,4],"end":[399,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:320:2657":{"id":"0:320:2657","crate_id":0,"name":"uninit","span":{"filename":"src/io/read_buf.rs","begin":[46,4],"end":[52,5]},"visibility":"public","docs":"Creates a new `ReadBuf` from a fully uninitialized buffer.\n\nUse `assume_init` if part of the buffer is known to be already initialized.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninit","id":"2:32626:2635","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:312:2334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13821:61335":{"id":"2:13821:61335","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:15883:3248","self::pattern":"2:13332:4984"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4983","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:4983","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:4987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:415":{"id":"0:415","crate_id":0,"name":null,"span":{"filename":"src/net/addr.rs","begin":[104,0],"end":[104,41]},"visibility":{"restricted":{"parent":"0:359:2735","path":"::net::addr"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ToSocketAddrs","id":"0:385:2737","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"Ipv4Addr","id":"1:11071:2752","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"kind":"primitive","inner":"u16"}]},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:317":{"id":"0:317","crate_id":0,"name":null,"span":{"filename":"src/io/read_buf.rs","begin":[29,0],"end":[271,1]},"visibility":{"restricted":{"parent":"0:305:2333","path":"::io::read_buf"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:312:2334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:319:926","0:320:2657","0:321:2659","0:322:2651","0:323:2663","0:324:2666","0:325:2652","0:326:2673","0:327:2684","0:328:2669","0:329:2689","0:330:2690","0:331:2476","0:332:2699","0:333:2703","0:334:2706","0:335:333","0:336:2480"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:6187:56199":{"id":"5:6187:56199","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13829:56202"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:319:926":{"id":"0:319:926","crate_id":0,"name":"new","span":{"filename":"src/io/read_buf.rs","begin":[32,4],"end":[40,5]},"visibility":"public","docs":"Creates a new `ReadBuf` from a fully initialized buffer.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:312:2334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6184:61975":{"id":"5:6184:61975","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:8472:220","`Box<str>`":"5:444:2433"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2433","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8217:4256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:131:2326":{"id":"0:131:2326","crate_id":0,"name":"AsyncBufRead","span":{"filename":"src/io/async_buf_read.rs","begin":[23,0],"end":[63,1]},"visibility":"public","docs":"Reads bytes asynchronously.\n\nThis trait is analogous to [`std::io::BufRead`], but integrates with\nthe asynchronous task system. In particular, the [`poll_fill_buf`] method,\nunlike [`BufRead::fill_buf`], will automatically queue the current task for wakeup\nand return if data is not yet available, rather than blocking the calling\nthread.\n\nUtilities for working with `AsyncBufRead` values are provided by\n[`AsyncBufReadExt`].\n\n[`std::io::BufRead`]: std::io::BufRead\n[`poll_fill_buf`]: AsyncBufRead::poll_fill_buf\n[`BufRead::fill_buf`]: std::io::BufRead::fill_buf\n[`AsyncBufReadExt`]: crate::io::AsyncBufReadExt","links":{"AsyncBufRead::poll_fill_buf":"0:132:2418","std::io::BufRead::fill_buf":"1:4493:2439","std::io::BufRead":"1:4492:2438"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:132:2418","0:133:2428"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"AsyncRead","id":"0:173:2328","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:135","0:137","0:139","0:143","0:146"]}},"0:274:2615":{"id":"0:274:2615","crate_id":0,"name":"poll_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[269,4],"end":[275,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14359:2198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10930:2514","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50692:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:142:2428":{"id":"0:142:2428","crate_id":0,"name":"consume","span":{"filename":"src/io/async_buf_read.rs","begin":[94,4],"end":[96,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["amt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5519:4705":{"id":"1:5519:4705","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5520:6934","1:5521:56724","1:5522:7364","1:5523:56725","1:5524:4876","1:5525:4877","1:5526:56726","1:5527:1317","1:5528:56727","1:5529:56728","1:5530:56729","1:5531:56730","1:5532:56731","1:5533:56732","1:5534:56733","1:5535:56734"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3364:215":{"id":"2:3364:215","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8682:3693":{"id":"2:8682:3693","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8684:4128","2:8686:4129","2:8687:4130"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:792:2511":{"id":"0:792:2511","crate_id":0,"name":"poll_complete","span":{"filename":"src/io/async_seek.rs","begin":[66,4],"end":[66,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14359:2198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50692:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:282:2556":{"id":"0:282:2556","crate_id":0,"name":"poll_flush","span":{"filename":"src/io/async_write.rs","begin":[311,4],"end":[313,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14359:2198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50692:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13826:5432":{"id":"2:13826:5432","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:224":{"id":"0:224","crate_id":0,"name":null,"span":{"filename":"src/io/async_seek.rs","begin":[83,0],"end":[90,1]},"visibility":{"restricted":{"parent":"0:191:2329","path":"::io::async_seek"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3165:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"2:3405:1967","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsyncSeek","id":"0:212:2330","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"io::Cursor","id":"1:10719:2437","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:226:2503","0:227:2511"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2922:125":{"id":"2:2922:125","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2917:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13812:57387":{"id":"2:13812:57387","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:13332:4984","prim@char":"1:15883:3248"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47808:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4983","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:4983","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:4987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:67":{"id":"0:67","crate_id":0,"name":null,"span":{"filename":"src/macros/support.rs","begin":[8,0],"end":[8,22]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"std::pin::Pin","name":"Pin","id":"2:47925:190","glob":false}},"2:9161:4958":{"id":"2:9161:4958","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Step","id":"2:8197:4960","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3432:3366":{"id":"2:3432:3366","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3434:183","2:3435:270"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:148:2418":{"id":"0:148:2418","crate_id":0,"name":"poll_fill_buf","span":{"filename":"src/io/async_buf_read.rs","begin":[110,4],"end":[112,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14359:2198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50692:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:149:2428":{"id":"0:149:2428","crate_id":0,"name":"consume","span":{"filename":"src/io/async_buf_read.rs","begin":[114,4],"end":[116,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["amt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13737:61318":{"id":"2:13737:61318","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50053:5291","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:64":{"id":"0:64","crate_id":0,"name":null,"span":{"filename":"src/macros/support.rs","begin":[7,0],"end":[7,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"std::future::Future","name":"Future","id":"2:14057:139","glob":false}},"0:330:2690":{"id":"0:330:2690","crate_id":0,"name":"initialize_unfilled_to","span":{"filename":"src/io/read_buf.rs","begin":[156,4],"end":[175,5]},"visibility":"public","docs":"Returns a mutable reference to the first `n` bytes of the unfilled part of the buffer, ensuring it is\nfully initialized.\n\n# Panics\n\nPanics if `self.remaining()` is less than `n`.","links":{},"attrs":["#[inline]","#[track_caller]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:4146:4963":{"id":"2:4146:4963","crate_id":2,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4147:56150"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23175:5132":{"id":"2:23175:5132","crate_id":2,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23176:4952","2:23177:1260","2:23178:1285"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13829:56202":{"id":"2:13829:56202","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:294:2556":{"id":"0:294:2556","crate_id":0,"name":"poll_flush","span":{"filename":"src/io/async_write.rs","begin":[371,4],"end":[373,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14359:2198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50692:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:268:2615":{"id":"0:268:2615","crate_id":0,"name":"poll_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[238,4],"end":[244,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14359:2198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10930:2514","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50692:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6576:4698":{"id":"1:6576:4698","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6577:8860"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:4699","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2884:105":{"id":"2:2884:105","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2885:414","2:2886:416"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10513:2630":{"id":"2:10513:2630","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10514:1549","2:10515:57283","2:10517:4209"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13735:33153":{"id":"2:13735:33153","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"2:13734:33163"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:50072:5293","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:4099:1443":{"id":"2:4099:1443","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:46336:4964","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10811:147":{"id":"2:10811:147","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10812:656","2:10813:2632","2:10814:4299","2:10815:4300","2:10816:4301","2:10817:4302","2:10818:4303","2:10819:4304","2:10820:4305","2:10821:4306","2:10822:4307","2:10823:4308","2:10824:4309","2:10825:4310","2:10826:4311","2:10827:1549"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3496:3378":{"id":"2:3496:3378","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3498:183","2:3499:359"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:253:2549":{"id":"0:253:2549","crate_id":0,"name":"poll_write","span":{"filename":"src/io/async_write.rs","begin":[58,4],"end":[62,40]},"visibility":"default","docs":"Attempt to write bytes from `buf` into the object.\n\nOn success, returns `Poll::Ready(Ok(num_bytes_written))`. If successful,\nthen it must be guaranteed that `n <= buf.len()`. A return value of `0`\ntypically means that the underlying object is no longer able to accept\nbytes and will likely not be able to in the future as well, or that the\nbuffer provided is empty.\n\nIf the object is not ready for writing, the method returns\n`Poll::Pending` and arranges for the current task (via\n`cx.waker()`) to receive a notification when the object becomes\nwritable or is closed.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14359:2198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50692:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47933:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}},{"type":{"kind":"resolved_path","inner":{"name":"io::Error","id":"1:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:3165:75":{"id":"2:3165:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3167:311"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2432","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13271:4821":{"id":"2:13271:4821","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13272:127","2:13273:57222"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:334:2706":{"id":"0:334:2706","crate_id":0,"name":"set_filled","span":{"filename":"src/io/read_buf.rs","begin":[217,4],"end":[223,5]},"visibility":"public","docs":"Sets the size of the filled region of the buffer.\n\nThe number of initialized bytes is not changed.\n\nNote that this can be used to *shrink* the filled region of the buffer in addition to growing it (for\nexample, by a `AsyncRead` implementation that compresses data in-place).\n\n# Panics\n\nPanics if the filled region of the buffer would become larger than the initialized region.","links":{},"attrs":["#[inline]","#[track_caller]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3453:3370":{"id":"2:3453:3370","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3455:183","2:3456:1110"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3824:229":{"id":"2:3824:229","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3825:183","2:3826:3394","2:3827:690","2:3828:375"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FromResidual","id":"2:3829:138","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"2:3824:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13827:56200":{"id":"2:13827:56200","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:9533:3681-0:312:2334":{"id":"a:2:9533:3681-0:312:2334","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:9533:3681","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:312:2334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"1:5567:4708":{"id":"1:5567:4708","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5568:56503"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:4699","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:420":{"id":"0:420","crate_id":0,"name":null,"span":{"filename":"src/net/addr.rs","begin":[118,0],"end":[118,41]},"visibility":{"restricted":{"parent":"0:359:2735","path":"::net::addr"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ToSocketAddrs","id":"0:385:2737","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"Ipv6Addr","id":"1:11088:2753","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"kind":"primitive","inner":"u16"}]},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:277:2602":{"id":"0:277:2602","crate_id":0,"name":"poll_shutdown","span":{"filename":"src/io/async_write.rs","begin":[285,4],"end":[287,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14359:2198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50692:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3201-0:312:2334":{"id":"b:2:3201-0:312:2334","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3174:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:312:2334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3203:685"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3211:1431":{"id":"2:3211:1431","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47933:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:3181:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14540:4255":{"id":"2:14540:4255","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14541:58907","2:14542:58908","2:14543:58909","2:14544:58910","2:14545:58911","2:14546:58912","2:14547:4153"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:14072:151":{"id":"2:14072:151","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:14073:183","2:14074:151","2:14075:772"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3512:3382":{"id":"2:3512:3382","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3514:183","2:3515:1247"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:226:2503":{"id":"0:226:2503","crate_id":0,"name":"start_seek","span":{"filename":"src/io/async_seek.rs","begin":[84,4],"end":[86,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["pos",{"kind":"resolved_path","inner":{"name":"SeekFrom","id":"1:10942:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13786:61323":{"id":"2:13786:61323","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:13332:4984","prim@char":"1:15883:3248","`DoubleEndedIterator`":"2:8717:121","str::matches":"2:13783:3328"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50011:5290","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4983","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:4983","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:4987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:844:227":{"id":"5:844:227","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:845:4186","5:846:2784","5:847:4187"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3405:1967":{"id":"2:3405:1967","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13806:61332":{"id":"2:13806:61332","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13332:4984","prim@char":"1:15883:3248"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4983","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13709:61313":{"id":"2:13709:61313","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2870:55983":{"id":"2:2870:55983","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10576:3621":{"id":"2:10576:3621","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10577:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:290":{"id":"0:290","crate_id":0,"name":null,"span":{"filename":"src/io/async_write.rs","begin":[350,0],"end":[378,1]},"visibility":{"restricted":{"parent":"0:231:2331","path":"::io::async_write"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_write_vectored","poll_write_vectored"],"trait":{"name":"AsyncWrite","id":"0:252:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"io::Cursor","id":"1:10719:2437","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7891:239","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:291:2549","0:292:2615","0:293:2627","0:294:2556","0:295:2602"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:802:2602":{"id":"0:802:2602","crate_id":0,"name":"poll_shutdown","span":{"filename":"src/io/async_write.rs","begin":[222,4],"end":[222,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14359:2198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50692:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:263":{"id":"0:263","crate_id":0,"name":null,"span":{"filename":"src/io/async_write.rs","begin":[221,0],"end":[223,1]},"visibility":{"restricted":{"parent":"0:231:2331","path":"::io::async_write"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2432","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsyncWrite","id":"0:252:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"2:3405:1967","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["is_write_vectored","poll_write_vectored"],"trait":{"name":"AsyncWrite","id":"0:252:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"items":["0:798:2549","0:799:2615","0:800:2627","0:801:2556","0:802:2602"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:174:2472":{"id":"0:174:2472","crate_id":0,"name":"poll_read","span":{"filename":"src/io/async_read.rs","begin":[53,4],"end":[57,30]},"visibility":"default","docs":"Attempts to read from the `AsyncRead` into `buf`.\n\nOn success, returns `Poll::Ready(Ok(()))` and places data in the\nunfilled portion of `buf`. If no data was read (`buf.filled().len()` is\nunchanged), it implies that EOF has been reached.\n\nIf no data is available for reading, the method returns `Poll::Pending`\nand arranges for the current task (via `cx.waker()`) to receive a\nnotification when the object becomes readable or is closed.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14359:2198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:312:2334","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50692:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:13809:15770":{"id":"2:13809:15770","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:13332:4984","prim@char":"1:15883:3248"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47808:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4983","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:141:2418":{"id":"0:141:2418","crate_id":0,"name":"poll_fill_buf","span":{"filename":"src/io/async_buf_read.rs","begin":[90,4],"end":[92,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14359:2198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50692:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:798:2549":{"id":"0:798:2549","crate_id":0,"name":"poll_write","span":{"filename":"src/io/async_write.rs","begin":[222,4],"end":[222,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14359:2198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50692:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13792:61325":{"id":"2:13792:61325","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"prim@char":"1:15883:3248","`DoubleEndedIterator`":"2:8717:121","self::pattern":"2:13332:4984","str::match_indices":"2:13789:61324"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49957:5287","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4983","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:4983","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:4987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:295:2602":{"id":"0:295:2602","crate_id":0,"name":"poll_shutdown","span":{"filename":"src/io/async_write.rs","begin":[375,4],"end":[377,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14359:2198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50692:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13725:57350":{"id":"2:13725:57350","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11205:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11205:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:6498:228":{"id":"5:6498:228","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6499:1410"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6165:3420":{"id":"5:6165:3420","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8472:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4983","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10801:143":{"id":"2:10801:143","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10802:718","2:10804:4298"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:321:2659":{"id":"0:321:2659","crate_id":0,"name":"capacity","span":{"filename":"src/io/read_buf.rs","begin":[56,4],"end":[58,5]},"visibility":"public","docs":"Returns the total capacity of the buffer.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13719:2827":{"id":"2:13719:2827","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47810:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47808:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11205:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11205:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8742:3692":{"id":"2:8742:3692","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8743:798","2:8744:2618"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8874:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6467:4705":{"id":"1:6467:4705","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6468:55984","1:6469:7274","1:6470:7275","1:6471:7277","1:6472:7276","1:6473:7278","1:6474:7279","1:6475:7281","1:6476:6880","1:6477:7284","1:6478:7285","1:6479:7286","1:6480:7287","1:6481:7288","1:6482:7289","1:6483:7282","1:6484:7283"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13833:61337":{"id":"2:13833:61337","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5443:61337"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:50106:5296","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14456:142":{"id":"2:14456:142","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14457:283","2:14458:523","2:14459:286","2:14460:1087"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:302":{"id":"0:302","crate_id":0,"name":null,"span":{"filename":"src/io/mod.rs","begin":[195,0],"end":[195,38]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::async_write::AsyncWrite","name":"AsyncWrite","id":"0:252:2332","glob":false}},"0:256:2615":{"id":"0:256:2615","crate_id":0,"name":"poll_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[158,4],"end":[168,5]},"visibility":"default","docs":"Like [`poll_write`], except that it writes from a slice of buffers.\n\nData is copied from each buffer in order, with the final buffer\nread from possibly being only partially consumed. This method must\nbehave as a call to [`write`] with the buffers concatenated would.\n\nThe default implementation calls [`poll_write`] with either the first nonempty\nbuffer provided, or an empty one if none exists.\n\nOn success, returns `Poll::Ready(Ok(num_bytes_written))`.\n\nIf the object is not ready for writing, the method returns\n`Poll::Pending` and arranges for the current task (via\n`cx.waker()`) to receive a notification when the object becomes\nwritable or is closed.\n\n# Note\n\nThis should be implemented as a single \"atomic\" write action. If any\ndata has been partially written, it is wrong to return an error or\npending.\n\n[`poll_write`]: AsyncWrite::poll_write","links":{"`write`":"2:14:2632","AsyncWrite::poll_write":"0:253:2549"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14359:2198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10930:2514","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50692:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47933:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}},{"type":{"kind":"resolved_path","inner":{"name":"io::Error","id":"1:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:2:3364:215-0:312:2334":{"id":"a:2:3364:215-0:312:2334","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:3364:215","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:312:2334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:788:2472":{"id":"0:788:2472","crate_id":0,"name":"poll_read","span":{"filename":"src/io/async_read.rs","begin":[77,4],"end":[77,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14359:2198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:312:2334","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50692:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3484:3380":{"id":"2:3484:3380","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3485:183","2:3486:958"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:297:2549":{"id":"0:297:2549","crate_id":0,"name":"poll_write","span":{"filename":"src/io/async_write.rs","begin":[381,4],"end":[387,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14359:2198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50692:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:56:1012":{"id":"0:56:1012","crate_id":0,"name":"pin","span":{"filename":"src/macros/pin.rs","begin":[125,0],"end":[144,1]},"visibility":"public","docs":"Pins a value on the stack.\n\nCalls to `async fn` return anonymous [`Future`] values that are `!Unpin`.\nThese values must be pinned before they can be polled. Calling `.await` will\nhandle this, but consumes the future. If it is required to call `.await` on\na `&mut _` reference, the caller is responsible for pinning the future.\n\nPinning may be done by allocating with [`Box::pin`] or by using the stack\nwith the `pin!` macro.\n\nThe following will **fail to compile**:\n\n```compile_fail\nasync fn my_async_fn() {\n    // async logic here\n}\n\n#[tokio::main]\nasync fn main() {\n    let mut future = my_async_fn();\n    (&mut future).await;\n}\n```\n\nTo make this work requires pinning:\n\n```\nuse tokio::pin;\n\nasync fn my_async_fn() {\n    // async logic here\n}\n\n#[tokio::main]\nasync fn main() {\n    let future = my_async_fn();\n    pin!(future);\n\n    (&mut future).await;\n}\n```\n\nPinning is useful when using `select!` and stream operators that require `T:\nStream + Unpin`.\n\n[`Future`]: trait@std::future::Future\n[`Box::pin`]: std::boxed::Box::pin\n\n# Usage\n\nThe `pin!` macro takes **identifiers** as arguments. It does **not** work\nwith expressions.\n\nThe following does not compile as an expression is passed to `pin!`.\n\n```compile_fail\nasync fn my_async_fn() {\n    // async logic here\n}\n\n#[tokio::main]\nasync fn main() {\n    let mut future = pin!(my_async_fn());\n    (&mut future).await;\n}\n```\n\n# Examples\n\nUsing with select:\n\n```\nuse tokio::{pin, select};\nuse tokio_stream::{self as stream, StreamExt};\n\nasync fn my_async_fn() {\n    // async logic here\n}\n\n#[tokio::main]\nasync fn main() {\n    let mut stream = stream::iter(vec![1, 2, 3, 4]);\n\n    let future = my_async_fn();\n    pin!(future);\n\n    loop {\n        select! {\n            _ = &mut future => {\n                // Stop looping `future` will be polled after completion\n                break;\n            }\n            Some(val) = stream.next() => {\n                println!(\"got value = {}\", val);\n            }\n        }\n    }\n}\n```\n\nBecause assigning to a variable followed by pinning is common, there is also\na variant of the macro that supports doing both in one go.\n\n```\nuse tokio::{pin, select};\n\nasync fn my_async_fn() {\n    // async logic here\n}\n\n#[tokio::main]\nasync fn main() {\n    pin! {\n        let future1 = my_async_fn();\n        let future2 = my_async_fn();\n    }\n\n    select! {\n        _ = &mut future1 => {}\n        _ = &mut future2 => {}\n    }\n}\n```","links":{"std::boxed::Box::pin":"5:455:1012","trait@std::future::Future":"2:14057:139"},"attrs":["#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! pin {\n    ($($x:ident),*) => { ... };\n    ($(\n            let $x:ident = $init:expr;\n    )*) => { ... };\n}"},"0:801:2556":{"id":"0:801:2556","crate_id":0,"name":"poll_flush","span":{"filename":"src/io/async_write.rs","begin":[222,4],"end":[222,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14359:2198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50692:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:326:2673":{"id":"0:326:2673","crate_id":0,"name":"initialized_mut","span":{"filename":"src/io/read_buf.rs","begin":[101,4],"end":[106,5]},"visibility":"public","docs":"Returns a mutable reference to the initialized portion of the buffer.\n\nThis includes the filled portion.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:793:2549":{"id":"0:793:2549","crate_id":0,"name":"poll_write","span":{"filename":"src/io/async_write.rs","begin":[218,4],"end":[218,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14359:2198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50692:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13762:57378":{"id":"2:13762:57378","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"prim@char":"1:15883:3248","`DoubleEndedIterator`":"2:8717:121","self::pattern":"2:13332:4984","str::split":"2:13756:2360"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49807:5254","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4983","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:4983","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:4987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:281:2627":{"id":"0:281:2627","crate_id":0,"name":"is_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[307,4],"end":[309,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13732:5013":{"id":"2:13732:5013","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15883:3248"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49765:5278","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6841:4701":{"id":"1:6841:4701","crate_id":1,"name":"TcpStreamExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6842:56511","1:6843:56512"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:4699","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13795:61326":{"id":"2:13795:61326","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10582:3619":{"id":"2:10582:3619","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10583:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13815:61333":{"id":"2:13815:61333","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:15883:3248","self::pattern":"2:13332:4984"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4983","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:4983","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:4987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3447:3367":{"id":"2:3447:3367","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3449:183","2:3450:563"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13801:61329":{"id":"2:13801:61329","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:322:2651":{"id":"0:322:2651","crate_id":0,"name":"filled","span":{"filename":"src/io/read_buf.rs","begin":[62,4],"end":[67,5]},"visibility":"public","docs":"Returns a shared reference to the filled portion of the buffer.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:342":{"id":"0:342","crate_id":0,"name":null,"span":{"filename":"src/io/mod.rs","begin":[198,0],"end":[198,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::read_buf::ReadBuf","name":"ReadBuf","id":"0:312:2334","glob":false}},"0:269:2627":{"id":"0:269:2627","crate_id":0,"name":"is_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[246,4],"end":[248,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:349":{"id":"0:349","crate_id":0,"name":null,"span":{"filename":"src/io/mod.rs","begin":[203,25],"end":[203,34]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"std::io::ErrorKind","name":"ErrorKind","id":"1:10799:2335","glob":false}},"0:298:2615":{"id":"0:298:2615","crate_id":0,"name":"poll_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[389,4],"end":[395,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14359:2198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10930:2514","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50692:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:183":{"id":"0:183","crate_id":0,"name":null,"span":{"filename":"src/io/async_read.rs","begin":[94,0],"end":[106,1]},"visibility":{"restricted":{"parent":"0:153:2327","path":"::io::async_read"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsyncRead","id":"0:173:2328","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"items":["0:184:2472"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:4896:4453":{"id":"2:4896:4453","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4897:2789","2:4898:60328","2:4899:2794"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23238:4738":{"id":"2:23238:4738","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:23228:4699","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:185":{"id":"0:185","crate_id":0,"name":null,"span":{"filename":"src/io/async_read.rs","begin":[108,0],"end":[131,1]},"visibility":{"restricted":{"parent":"0:153:2327","path":"::io::async_read"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3165:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"2:3405:1967","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsyncRead","id":"0:173:2328","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"io::Cursor","id":"1:10719:2437","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:187:2472"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:23049:5131":{"id":"2:23049:5131","crate_id":2,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23050:4952","2:23051:59382","2:23052:59628","2:23053:59629","2:23054:59630","2:23055:43689","2:23056:59631","2:23057:59632","2:23058:59633","2:23059:59634","2:23060:59635","2:23061:59636","2:23062:59637","2:23063:59638","2:23064:59639","2:23065:59640","2:23066:59432","2:23067:59641","2:23068:59642","2:23069:59643","2:23070:59644","2:23071:59383","2:23072:59384","2:23073:59385","2:23074:59386"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3374:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23151:4699","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6647:4691":{"id":"1:6647:4691","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6648:57197"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3526:3385":{"id":"2:3526:3385","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3528:363"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13731:5313":{"id":"2:13731:5313","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15883:3248"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49759:5277","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3369:2432":{"id":"2:3369:2432","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5431:4726":{"id":"1:5431:4726","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5432:6099","1:5433:56058"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:4699","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:296":{"id":"0:296","crate_id":0,"name":null,"span":{"filename":"src/io/async_write.rs","begin":[380,0],"end":[408,1]},"visibility":{"restricted":{"parent":"0:231:2331","path":"::io::async_write"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_write_vectored","poll_write_vectored"],"trait":{"name":"AsyncWrite","id":"0:252:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"io::Cursor","id":"1:10719:2437","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2433","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:297:2549","0:298:2615","0:299:2627","0:300:2556","0:301:2602"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:794:2615":{"id":"0:794:2615","crate_id":0,"name":"poll_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[218,4],"end":[218,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14359:2198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10930:2514","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50692:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:346":{"id":"0:346","crate_id":0,"name":null,"span":{"filename":"src/io/mod.rs","begin":[203,18],"end":[203,23]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"std::io::Error","name":"Error","id":"1:3803:128","glob":false}},"2:10563:110":{"id":"2:10563:110","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10564:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3210:128":{"id":"2:3210:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:3181:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"2:2953:179":{"id":"2:2953:179","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2954:421","2:2955:2668","2:2956:2475","2:2957:4120"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2922:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2963:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13721:2431":{"id":"2:13721:2431","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47810:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47808:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11205:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11205:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3374:107":{"id":"2:3374:107","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:4410:3413":{"id":"1:4410:3413","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4411:3785","1:4412:4655","1:4414:4656","1:4415:4657","1:4416:3414","1:4417:4658","1:4418:2333","1:4420:4659","1:4421:4153","1:4422:4660","1:4423:4136","1:4425:2666"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:301:2602":{"id":"0:301:2602","crate_id":0,"name":"poll_shutdown","span":{"filename":"src/io/async_write.rs","begin":[405,4],"end":[407,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14359:2198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50692:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23435:5064":{"id":"2:23435:5064","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdElement","id":"2:24072:4953","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23426:4699","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:255:2602":{"id":"0:255:2602","crate_id":0,"name":"poll_shutdown","span":{"filename":"src/io/async_write.rs","begin":[133,4],"end":[133,96]},"visibility":"default","docs":"Initiates or attempts to shut down this writer, returning success when\nthe I/O connection has completely shut down.\n\nThis method is intended to be used for asynchronous shutdown of I/O\nconnections. For example this is suitable for implementing shutdown of a\nTLS connection or calling `TcpStream::shutdown` on a proxied connection.\nProtocols sometimes need to flush out final pieces of data or otherwise\nperform a graceful shutdown handshake, reading/writing more data as\nappropriate. This method is the hook for such protocols to implement the\ngraceful shutdown logic.\n\nThis `shutdown` method is required by implementers of the\n`AsyncWrite` trait. Wrappers typically just want to proxy this call\nthrough to the wrapped type, and base types will typically implement\nshutdown logic here or just return `Ok(().into())`. Note that if you're\nwrapping an underlying `AsyncWrite` a call to `shutdown` implies that\ntransitively the entire stream has been shut down. After your wrapper's\nshutdown logic has been executed you should shut down the underlying\nstream.\n\nInvocation of a `shutdown` implies an invocation of `flush`. Once this\nmethod returns `Ready` it implies that a flush successfully happened\nbefore the shutdown happened. That is, callers don't need to call\n`flush` before calling `shutdown`. They can rely that by calling\n`shutdown` any pending buffered data will be written out.\n\n# Return value\n\nThis function returns a `Poll<io::Result<()>>` classified as such:\n\n* `Poll::Ready(Ok(()))` - indicates that the connection was\n  successfully shut down and is now safe to deallocate/drop/close\n  resources associated with it. This method means that the current task\n  will no longer receive any notifications due to this method and the\n  I/O object itself is likely no longer usable.\n\n* `Poll::Pending` - indicates that shutdown is initiated but could\n  not complete just yet. This may mean that more I/O needs to happen to\n  continue this shutdown operation. The current task is scheduled to\n  receive a notification when it's otherwise ready to continue the\n  shutdown operation. When woken up this method should be called again.\n\n* `Poll::Ready(Err(e))` - indicates a fatal error has happened with shutdown,\n  indicating that the shutdown operation did not complete successfully.\n  This typically means that the I/O object is no longer usable.\n\n# Errors\n\nThis function can return normal I/O errors through `Err`, described\nabove. Additionally this method may also render the underlying\n`Write::write` method no longer usable (e.g. will return errors in the\nfuture). It's recommended that once `shutdown` is called the\n`write` method is no longer called.\n\n# Panics\n\nThis function will panic if not called within the context of a future's\ntask.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14359:2198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50692:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47933:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"io::Error","id":"1:3803:128","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:214:2511":{"id":"0:214:2511","crate_id":0,"name":"poll_complete","span":{"filename":"src/io/async_seek.rs","begin":[46,4],"end":[46,90]},"visibility":"default","docs":"Waits for a seek operation to complete.\n\nIf the seek operation completed successfully,\nthis method returns the new position from the start of the stream.\nThat position can be used later with [`SeekFrom::Start`]. Repeatedly\ncalling this function without calling `start_seek` might return the\nsame result.\n\n# Errors\n\nSeeking to a negative offset is considered an error.","links":{"`SeekFrom::Start`":"1:10943:4646"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14359:2198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50692:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:13718:2695":{"id":"2:13718:2695","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15900:3262"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:325:2652":{"id":"0:325:2652","crate_id":0,"name":"initialized","span":{"filename":"src/io/read_buf.rs","begin":[90,4],"end":[95,5]},"visibility":"public","docs":"Returns a shared reference to the initialized portion of the buffer.\n\nThis includes the filled portion.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:223:2511":{"id":"0:223:2511","crate_id":0,"name":"poll_complete","span":{"filename":"src/io/async_seek.rs","begin":[78,4],"end":[80,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14359:2198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50692:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13789:61324":{"id":"2:13789:61324","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"str::rmatch_indices":"2:13792:61325","prim@char":"1:15883:3248","`DoubleEndedIterator`":"2:8717:121","self::pattern":"2:13332:4984"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49939:5286","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4983","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3177:233":{"id":"2:3177:233","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3179:128","2:3180:1431"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23768:17254":{"id":"2:23768:17254","crate_id":2,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23769:59643","2:23770:59642","2:23771:59644"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialOrd","id":"2:23763:4954","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:779:1949":{"id":"0:779:1949","crate_id":0,"name":"stream","span":{"filename":"src/lib.rs","begin":[573,0],"end":[573,14]},"visibility":"public","docs":"Due to the `Stream` trait's inclusion in `std` landing later than Tokio's 1.0\nrelease, most of the Tokio stream utilities have been moved into the [`tokio-stream`]\ncrate.\n\n# Why was `Stream` not included in Tokio 1.0?\n\nOriginally, we had planned to ship Tokio 1.0 with a stable `Stream` type\nbut unfortunately the [RFC] had not been merged in time for `Stream` to\nreach `std` on a stable compiler in time for the 1.0 release of Tokio. For\nthis reason, the team has decided to move all `Stream` based utilities to\nthe [`tokio-stream`] crate. While this is not ideal, once `Stream` has made\nit into the standard library and the MSRV period has passed, we will implement\nstream for our different types.\n\nWhile this may seem unfortunate, not all is lost as you can get much of the\n`Stream` support with `async/await` and `while let` loops. It is also possible\nto create a `impl Stream` from `async fn` using the [`async-stream`] crate.\n\n[`tokio-stream`]: https://docs.rs/tokio-stream\n[`async-stream`]: https://docs.rs/async-stream\n[RFC]: https://github.com/rust-lang/rfcs/pull/2996\n\n# Example\n\nConvert a [`sync::mpsc::Receiver`] to an `impl Stream`.\n\n```rust,no_run\nuse tokio::sync::mpsc;\n\nlet (tx, mut rx) = mpsc::channel::<usize>(16);\n\nlet stream = async_stream::stream! {\n    while let Some(item) = rx.recv().await {\n        yield item;\n    }\n};\n```","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":false}},"0:276:2556":{"id":"0:276:2556","crate_id":0,"name":"poll_flush","span":{"filename":"src/io/async_write.rs","begin":[281,4],"end":[283,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14359:2198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50692:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:776:1391":{"id":"0:776:1391","crate_id":0,"name":"task","span":{"filename":"src/task/mod.rs","begin":[1,0],"end":[333,1]},"visibility":"public","docs":"Asynchronous green-threads.\n\n## What are Tasks?\n\nA _task_ is a light weight, non-blocking unit of execution. A task is similar\nto an OS thread, but rather than being managed by the OS scheduler, they are\nmanaged by the [Tokio runtime][rt]. Another name for this general pattern is\n[green threads]. If you are familiar with [Go's goroutines], [Kotlin's\ncoroutines], or [Erlang's processes], you can think of Tokio's tasks as\nsomething similar.\n\nKey points about tasks include:\n\n* Tasks are **light weight**. Because tasks are scheduled by the Tokio\n  runtime rather than the operating system, creating new tasks or switching\n  between tasks does not require a context switch and has fairly low\n  overhead. Creating, running, and destroying large numbers of tasks is\n  quite cheap, especially compared to OS threads.\n\n* Tasks are scheduled **cooperatively**. Most operating systems implement\n  _preemptive multitasking_. This is a scheduling technique where the\n  operating system allows each thread to run for a period of time, and then\n  _preempts_ it, temporarily pausing that thread and switching to another.\n  Tasks, on the other hand, implement _cooperative multitasking_. In\n  cooperative multitasking, a task is allowed to run until it _yields_,\n  indicating to the Tokio runtime's scheduler that it cannot currently\n  continue executing. When a task yields, the Tokio runtime switches to\n  executing the next task.\n\n* Tasks are **non-blocking**. Typically, when an OS thread performs I/O or\n  must synchronize with another thread, it _blocks_, allowing the OS to\n  schedule another thread. When a task cannot continue executing, it must\n  yield instead, allowing the Tokio runtime to schedule another task. Tasks\n  should generally not perform system calls or other operations that could\n  block a thread, as this would prevent other tasks running on the same\n  thread from executing as well. Instead, this module provides APIs for\n  running blocking operations in an asynchronous context.\n\n[rt]: crate::runtime\n[green threads]: https://en.wikipedia.org/wiki/Green_threads\n[Go's goroutines]: https://tour.golang.org/concurrency/1\n[Kotlin's coroutines]: https://kotlinlang.org/docs/reference/coroutines-overview.html\n[Erlang's processes]: http://erlang.org/doc/getting_started/conc_prog.html#processes\n\n## Working with Tasks\n\nThis module provides the following APIs for working with tasks:\n\n### Spawning\n\nPerhaps the most important function in this module is [`task::spawn`]. This\nfunction can be thought of as an async equivalent to the standard library's\n[`thread::spawn`][`std::thread::spawn`]. It takes an `async` block or other\n[future], and creates a new task to run that work concurrently:\n\n```\nuse tokio::task;\n\n# async fn doc() {\ntask::spawn(async {\n    // perform some work here...\n});\n# }\n```\n\nLike [`std::thread::spawn`], `task::spawn` returns a [`JoinHandle`] struct.\nA `JoinHandle` is itself a future which may be used to await the output of\nthe spawned task. For example:\n\n```\nuse tokio::task;\n\n# #[tokio::main] async fn main() -> Result<(), Box<dyn std::error::Error>> {\nlet join = task::spawn(async {\n    // ...\n    \"hello world!\"\n});\n\n// ...\n\n// Await the result of the spawned task.\nlet result = join.await?;\nassert_eq!(result, \"hello world!\");\n# Ok(())\n# }\n```\n\nAgain, like `std::thread`'s [`JoinHandle` type][thread_join], if the spawned\ntask panics, awaiting its `JoinHandle` will return a [`JoinError`]. For\nexample:\n\n```\nuse tokio::task;\n\n# #[tokio::main] async fn main() {\nlet join = task::spawn(async {\n    panic!(\"something bad happened!\")\n});\n\n// The returned result indicates that the task failed.\nassert!(join.await.is_err());\n# }\n```\n\n`spawn`, `JoinHandle`, and `JoinError` are present when the \"rt\"\nfeature flag is enabled.\n\n[`task::spawn`]: crate::task::spawn()\n[future]: std::future::Future\n[`std::thread::spawn`]: std::thread::spawn\n[`JoinHandle`]: crate::task::JoinHandle\n[thread_join]: std::thread::JoinHandle\n[`JoinError`]: crate::task::JoinError\n\n### Blocking and Yielding\n\nAs we discussed above, code running in asynchronous tasks should not perform\noperations that can block. A blocking operation performed in a task running\non a thread that is also running other tasks would block the entire thread,\npreventing other tasks from running.\n\nInstead, Tokio provides two APIs for running blocking operations in an\nasynchronous context: [`task::spawn_blocking`] and [`task::block_in_place`].\n\nBe aware that if you call a non-async method from async code, that non-async\nmethod is still inside the asynchronous context, so you should also avoid\nblocking operations there. This includes destructors of objects destroyed in\nasync code.\n\n#### spawn_blocking\n\nThe `task::spawn_blocking` function is similar to the `task::spawn` function\ndiscussed in the previous section, but rather than spawning an\n_non-blocking_ future on the Tokio runtime, it instead spawns a\n_blocking_ function on a dedicated thread pool for blocking tasks. For\nexample:\n\n```\nuse tokio::task;\n\n# async fn docs() {\ntask::spawn_blocking(|| {\n    // do some compute-heavy work or call synchronous code\n});\n# }\n```\n\nJust like `task::spawn`, `task::spawn_blocking` returns a `JoinHandle`\nwhich we can use to await the result of the blocking operation:\n\n```rust\n# use tokio::task;\n# async fn docs() -> Result<(), Box<dyn std::error::Error>>{\nlet join = task::spawn_blocking(|| {\n    // do some compute-heavy work or call synchronous code\n    \"blocking completed\"\n});\n\nlet result = join.await?;\nassert_eq!(result, \"blocking completed\");\n# Ok(())\n# }\n```\n\n#### block_in_place\n\nWhen using the [multi-threaded runtime][rt-multi-thread], the [`task::block_in_place`]\nfunction is also available. Like `task::spawn_blocking`, this function\nallows running a blocking operation from an asynchronous context. Unlike\n`spawn_blocking`, however, `block_in_place` works by transitioning the\n_current_ worker thread to a blocking thread, moving other tasks running on\nthat thread to another worker thread. This can improve performance by avoiding\ncontext switches.\n\nFor example:\n\n```\nuse tokio::task;\n\n# async fn docs() {\nlet result = task::block_in_place(|| {\n    // do some compute-heavy work or call synchronous code\n    \"blocking completed\"\n});\n\nassert_eq!(result, \"blocking completed\");\n# }\n```\n\n#### yield_now\n\nIn addition, this module provides a [`task::yield_now`] async function\nthat is analogous to the standard library's [`thread::yield_now`]. Calling\nand `await`ing this function will cause the current task to yield to the\nTokio runtime's scheduler, allowing other tasks to be\nscheduled. Eventually, the yielding task will be polled again, allowing it\nto execute. For example:\n\n```rust\nuse tokio::task;\n\n# #[tokio::main] async fn main() {\nasync {\n    task::spawn(async {\n        // ...\n        println!(\"spawned task done!\")\n    });\n\n    // Yield, allowing the newly-spawned task to execute first.\n    task::yield_now().await;\n    println!(\"main task done!\");\n}\n# .await;\n# }\n```\n\n### Cooperative scheduling\n\nA single call to [`poll`] on a top-level task may potentially do a lot of\nwork before it returns `Poll::Pending`. If a task runs for a long period of\ntime without yielding back to the executor, it can starve other tasks\nwaiting on that executor to execute them, or drive underlying resources.\nSince Rust does not have a runtime, it is difficult to forcibly preempt a\nlong-running task. Instead, this module provides an opt-in mechanism for\nfutures to collaborate with the executor to avoid starvation.\n\nConsider a future like this one:\n\n```\n# use tokio_stream::{Stream, StreamExt};\nasync fn drop_all<I: Stream + Unpin>(mut input: I) {\n    while let Some(_) = input.next().await {}\n}\n```\n\nIt may look harmless, but consider what happens under heavy load if the\ninput stream is _always_ ready. If we spawn `drop_all`, the task will never\nyield, and will starve other tasks and resources on the same executor.\n\nTo account for this, Tokio has explicit yield points in a number of library\nfunctions, which force tasks to return to the executor periodically.\n\n\n#### unconstrained\n\nIf necessary, [`task::unconstrained`] lets you opt a future out of of Tokio's cooperative\nscheduling. When a future is wrapped with `unconstrained`, it will never be forced to yield to\nTokio. For example:\n\n```\n# #[tokio::main]\n# async fn main() {\nuse tokio::{task, sync::mpsc};\n\nlet fut = async {\n    let (tx, mut rx) = mpsc::unbounded_channel();\n\n    for i in 0..1000 {\n        let _ = tx.send(());\n        // This will always be ready. If coop was in effect, this code would be forced to yield\n        // periodically. However, if left unconstrained, then this code will never yield.\n        rx.recv().await;\n    }\n};\n\ntask::unconstrained(fut).await;\n# }\n```\n\n[`task::spawn_blocking`]: crate::task::spawn_blocking\n[`task::block_in_place`]: crate::task::block_in_place\n[rt-multi-thread]: ../runtime/index.html#threaded-scheduler\n[`task::yield_now`]: crate::task::yield_now()\n[`thread::yield_now`]: std::thread::yield_now\n[`task::unconstrained`]: crate::task::unconstrained()\n[`poll`]: method@std::future::Future::poll","links":{"std::thread::yield_now":"1:944:2828","std::thread::spawn":"1:940:1919","std::thread::JoinHandle":"1:997:2388","std::future::Future":"2:14057:139","method@std::future::Future::poll":"2:14059:1020"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":false}},"2:3479:3375":{"id":"2:3479:3375","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3481:1111"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5575:4710":{"id":"1:5575:4710","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5576:7364"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3437:3371":{"id":"2:3437:3371","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3439:183","2:3440:1368"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6573:4696":{"id":"1:6573:4696","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6574:7391","1:6575:56558"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:4699","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:4485:2513":{"id":"1:4485:2513","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4486:2363","1:4487:4203","1:4488:4204","1:4489:4205"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5910:5437":{"id":"5:5910:5437","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5912:183","5:5913:2074"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13738:33148":{"id":"2:13738:33148","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:50081:5294","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13716:61316":{"id":"2:13716:61316","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13756:2360":{"id":"2:13756:2360","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::rsplit":"2:13762:57378","self::pattern":"2:13332:4984","prim@char":"1:15883:3248","str::split_whitespace":"2:13734:33163","`DoubleEndedIterator`":"2:8717:121"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49789:2382","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4983","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:291:2549":{"id":"0:291:2549","crate_id":0,"name":"poll_write","span":{"filename":"src/io/async_write.rs","begin":[351,4],"end":[357,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14359:2198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50692:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:800:2627":{"id":"0:800:2627","crate_id":0,"name":"is_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[222,4],"end":[222,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13783:3328":{"id":"2:13783:3328","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"str::matches":"2:13783:3328","prim@char":"1:15883:3248","`DoubleEndedIterator`":"2:8717:121","self::pattern":"2:13332:4984"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49993:5289","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4983","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13730:57369":{"id":"2:13730:57369","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13729:2479"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5553:4706":{"id":"1:5553:4706","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5554:56082","1:5555:56083","1:5556:56084","1:5557:56085"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13351:4986":{"id":"2:13351:4986","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13353:5006","2:13354:928","2:13355:60591","2:13356:60592"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:7602:4793":{"id":"1:7602:4793","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7603:56302"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12772:5425":{"id":"2:12772:5425","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12773:2789","2:12774:60524"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3611:2952":{"id":"2:3611:2952","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3612:583"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13739:57384":{"id":"2:13739:57384","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:13332:4984","prim@char":"1:15883:3248"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4983","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8874:158":{"id":"2:8874:158","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8875:2789","2:8876:928","2:8877:4131","2:8880:2794","2:8881:500","2:8883:4132","2:8886:4133","2:8887:4134","2:8888:4135","2:8889:4136","2:8891:4137","2:8893:4138","2:8894:4139","2:8896:847","2:8899:4140","2:8906:4141","2:8908:4142","2:8911:4143","2:8912:4144","2:8913:4145","2:8915:4146","2:8917:4147","2:8920:1321","2:8921:2666","2:8922:4148","2:8926:4149","2:8929:4150","2:8930:4151","2:8931:4152","2:8933:4153","2:8934:3697","2:8936:4154","2:8939:4155","2:8941:4156","2:8951:4157","2:8966:4158","2:8968:4159","2:8972:4160","2:8981:4161","2:8984:4162","2:8986:4163","2:8989:282","2:8996:300","2:9003:2617","2:9010:4164","2:9019:4165","2:9029:1021","2:9036:4166","2:9043:2668","2:9044:2475","2:9045:4167","2:9057:4168","2:9064:4169","2:9076:4170","2:9083:4171","2:9084:4172","2:9089:4173","2:9092:4174","2:9095:4175","2:9096:4176","2:9098:4177","2:9100:4178","2:9102:421","2:9105:4179","2:9108:1004","2:9111:4180","2:9114:608","2:9117:4181","2:9120:913","2:9122:832","2:9124:797","2:9126:716","2:9128:700","2:9130:4182","2:9131:4183","2:9139:4184"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3617:132":{"id":"2:3617:132","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3619:383"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3620:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:135":{"id":"0:135","crate_id":0,"name":null,"span":{"filename":"src/io/async_buf_read.rs","begin":[77,0],"end":[79,1]},"visibility":{"restricted":{"parent":"0:111:2325","path":"::io::async_buf_read"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2432","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsyncBufRead","id":"0:131:2326","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"2:3405:1967","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsyncBufRead","id":"0:131:2326","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2433","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:783:2418","0:784:2428"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13710:61314":{"id":"2:13710:61314","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:331:2476":{"id":"0:331:2476","crate_id":0,"name":"remaining","span":{"filename":"src/io/read_buf.rs","begin":[179,4],"end":[181,5]},"visibility":"public","docs":"Returns the number of bytes at the end of the slice that have not yet been filled.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:797:2602":{"id":"0:797:2602","crate_id":0,"name":"poll_shutdown","span":{"filename":"src/io/async_write.rs","begin":[218,4],"end":[218,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14359:2198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50692:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5513:4704":{"id":"1:5513:4704","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5514:7364","1:5515:8866"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3600:2390":{"id":"2:3600:2390","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3601:550"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Deref","id":"2:3587:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13707:798":{"id":"2:13707:798","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15883:3248"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:283:2602":{"id":"0:283:2602","crate_id":0,"name":"poll_shutdown","span":{"filename":"src/io/async_write.rs","begin":[315,4],"end":[317,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14359:2198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50692:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13828:56201":{"id":"2:13828:56201","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:352":{"id":"0:352","crate_id":0,"name":null,"span":{"filename":"src/io/mod.rs","begin":[203,36],"end":[203,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"std::io::Result","name":"Result","id":"1:3801:207","glob":false}},"2:13768:61320":{"id":"2:13768:61320","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split":"2:13756:2360","self::pattern":"2:13332:4984","prim@char":"1:15883:3248","str::split_terminator":"2:13765:61319"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49857:5283","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4983","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:4983","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:4987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:218":{"id":"0:218","crate_id":0,"name":null,"span":{"filename":"src/io/async_seek.rs","begin":[65,0],"end":[67,1]},"visibility":{"restricted":{"parent":"0:191:2329","path":"::io::async_seek"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2432","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsyncSeek","id":"0:212:2330","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"2:3405:1967","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsyncSeek","id":"0:212:2330","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"items":["0:791:2503","0:792:2511"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:23138:5173":{"id":"2:23138:5173","crate_id":2,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23139:59382","2:23140:1238","2:23141:1239","2:23142:59383","2:23143:59384","2:23144:59385","2:23145:59386","2:23146:59387","2:23147:59388","2:23148:59389"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3374:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23151:4699","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:400":{"id":"0:400","crate_id":0,"name":null,"span":{"filename":"src/net/addr.rs","begin":[64,0],"end":[64,38]},"visibility":{"restricted":{"parent":"0:359:2735","path":"::net::addr"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ToSocketAddrs","id":"0:385:2737","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SocketAddrV4","id":"1:11022:2755","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3459:3369":{"id":"2:3459:3369","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3460:183","2:3461:919"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:222:2503":{"id":"0:222:2503","crate_id":0,"name":"start_seek","span":{"filename":"src/io/async_seek.rs","begin":[74,4],"end":[76,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["pos",{"kind":"resolved_path","inner":{"name":"SeekFrom","id":"1:10942:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:24072:4953":{"id":"2:24072:4953","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:24073:4952"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:24068:4699","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"2:3374:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:227:2511":{"id":"0:227:2511","crate_id":0,"name":"poll_complete","span":{"filename":"src/io/async_seek.rs","begin":[87,4],"end":[89,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14359:2198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50692:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13797:61327":{"id":"2:13797:61327","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2963:186":{"id":"2:2963:186","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2965:1004","2:2966:832","2:2967:797","2:2968:716","2:2969:700"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2432","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2917:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3812:3392":{"id":"2:3812:3392","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2432","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"2:3743:3391","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8669:137":{"id":"2:8669:137","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8671:688"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:133:2428":{"id":"0:133:2428","crate_id":0,"name":"consume","span":{"filename":"src/io/async_buf_read.rs","begin":[62,4],"end":[62,49]},"visibility":"default","docs":"Tells this buffer that `amt` bytes have been consumed from the buffer,\nso they should no longer be returned in calls to [`poll_read`].\n\nThis function is a lower-level call. It needs to be paired with the\n[`poll_fill_buf`] method to function properly. This function does\nnot perform any I/O, it simply informs this object that some amount of\nits buffer, returned from [`poll_fill_buf`], has been consumed and should\nno longer be returned. As such, this function may do odd things if\n[`poll_fill_buf`] isn't called before calling it.\n\nThe `amt` must be `<=` the number of bytes in the buffer returned by\n[`poll_fill_buf`].\n\n[`poll_read`]: AsyncRead::poll_read\n[`poll_fill_buf`]: AsyncBufRead::poll_fill_buf","links":{"AsyncBufRead::poll_fill_buf":"0:132:2418","AsyncRead::poll_read":"0:174:2472"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["amt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:13802:61330":{"id":"2:13802:61330","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:790:2511":{"id":"0:790:2511","crate_id":0,"name":"poll_complete","span":{"filename":"src/io/async_seek.rs","begin":[62,4],"end":[62,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14359:2198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50692:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6645:4690":{"id":"1:6645:4690","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6646:56270"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9534:3680":{"id":"2:9534:3680","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13706":{"id":"2:13706","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12785:1353","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13707:798","2:13708:2618","2:13709:61313","2:13710:61314","2:13712:61315","2:13715:56058","2:13716:61316","2:13717:310","2:13718:2695","2:13719:2827","2:13721:2431","2:13723:57349","2:13725:57350","2:13727:4770","2:13728:61317","2:13729:2479","2:13730:57369","2:13731:5313","2:13732:5013","2:13733:4660","2:13734:33163","2:13735:33153","2:13736:4191","2:13737:61318","2:13738:33148","2:13739:57384","2:13742:57385","2:13745:57386","2:13748:2617","2:13752:4127","2:13756:2360","2:13759:33030","2:13762:57378","2:13765:61319","2:13768:61320","2:13771:57380","2:13774:57382","2:13777:61321","2:13780:61322","2:13783:3328","2:13786:61323","2:13789:61324","2:13792:61325","2:13795:61326","2:13797:61327","2:13799:61328","2:13801:61329","2:13802:61330","2:13803:61331","2:13806:61332","2:13809:15770","2:13812:57387","2:13815:61333","2:13818:61334","2:13821:61335","2:13824:2782","2:13826:5432","2:13827:56200","2:13828:56201","2:13829:56202","2:13830:61336","2:13832:4717","2:13833:61337"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:10574:3614":{"id":"2:10574:3614","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10575:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13723:57349":{"id":"2:13723:57349","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11205:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11205:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3587:117":{"id":"2:3587:117","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3588:226","2:3589:548"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:132:2418":{"id":"0:132:2418","crate_id":0,"name":"poll_fill_buf","span":{"filename":"src/io/async_buf_read.rs","begin":[45,4],"end":[45,92]},"visibility":"default","docs":"Attempts to return the contents of the internal buffer, filling it with more data\nfrom the inner reader if it is empty.\n\nOn success, returns `Poll::Ready(Ok(buf))`.\n\nIf no data is available for reading, the method returns\n`Poll::Pending` and arranges for the current task (via\n`cx.waker().wake_by_ref()`) to receive a notification when the object becomes\nreadable or is closed.\n\nThis function is a lower-level call. It needs to be paired with the\n[`consume`] method to function properly. When calling this\nmethod, none of the contents will be \"read\" in the sense that later\ncalling [`poll_read`] may return the same contents. As such, [`consume`] must\nbe called with the number of bytes that are consumed from this buffer to\nensure that the bytes are never returned twice.\n\nAn empty buffer returned indicates that the stream has reached EOF.\n\n[`poll_read`]: AsyncRead::poll_read\n[`consume`]: AsyncBufRead::consume","links":{"AsyncRead::poll_read":"0:174:2472","AsyncBufRead::consume":"0:133:2428"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14359:2198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50692:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:3654:3351":{"id":"2:3654:3351","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3656:242","2:3657:208","2:3658:60535"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3272:128":{"id":"2:3272:128","crate_id":2,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3273:3208","2:3275:56148","2:3276:56149","2:3277:56150"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"2:10563:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Display","id":"2:10570:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:783:2418":{"id":"0:783:2418","crate_id":0,"name":"poll_fill_buf","span":{"filename":"src/io/async_buf_read.rs","begin":[78,4],"end":[78,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14359:2198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50692:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3614:131":{"id":"2:3614:131","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3616:382"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3617:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8636:5059":{"id":"2:8636:5059","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8638:4178"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6186:56198":{"id":"5:6186:56198","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13828:56201"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13708:2618":{"id":"2:13708:2618","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:328:2669":{"id":"0:328:2669","crate_id":0,"name":"unfilled_mut","span":{"filename":"src/io/read_buf.rs","begin":[135,4],"end":[137,5]},"visibility":"public","docs":"Returns a mutable reference to the unfilled part of the buffer without ensuring that it has been fully\ninitialized.\n\n# Safety\n\nThe caller must not de-initialize portions of the buffer that have already been initialized.\nThis includes any bytes in the region marked as uninitialized by `ReadBuf`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninit","id":"2:32626:2635","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:146":{"id":"0:146","crate_id":0,"name":null,"span":{"filename":"src/io/async_buf_read.rs","begin":[109,0],"end":[117,1]},"visibility":{"restricted":{"parent":"0:111:2325","path":"::io::async_buf_read"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3165:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"2:3405:1967","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsyncBufRead","id":"0:131:2326","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"io::Cursor","id":"1:10719:2437","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:148:2418","0:149:2428"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:405":{"id":"0:405","crate_id":0,"name":null,"span":{"filename":"src/net/addr.rs","begin":[77,0],"end":[77,38]},"visibility":{"restricted":{"parent":"0:359:2735","path":"::net::addr"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ToSocketAddrs","id":"0:385:2737","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SocketAddrV6","id":"1:11034:2756","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:252:2332":{"id":"0:252:2332","crate_id":0,"name":"AsyncWrite","span":{"filename":"src/io/async_write.rs","begin":[45,0],"end":[183,1]},"visibility":"public","docs":"Writes bytes asynchronously.\n\nThe trait inherits from [`std::io::Write`] and indicates that an I/O object is\n**nonblocking**. All non-blocking I/O objects must return an error when\nbytes cannot be written instead of blocking the current thread.\n\nSpecifically, this means that the [`poll_write`] function will return one of\nthe following:\n\n* `Poll::Ready(Ok(n))` means that `n` bytes of data was immediately\n  written.\n\n* `Poll::Pending` means that no data was written from the buffer\n  provided. The I/O object is not currently writable but may become writable\n  in the future. Most importantly, **the current future's task is scheduled\n  to get unparked when the object is writable**. This means that like\n  `Future::poll` you'll receive a notification when the I/O object is\n  writable again.\n\n* `Poll::Ready(Err(e))` for other errors are standard I/O errors coming from the\n  underlying object.\n\nThis trait importantly means that the [`write`][stdwrite] method only works in\nthe context of a future's task. The object may panic if used outside of a task.\n\nNote that this trait also represents that the  [`Write::flush`][stdflush] method\nworks very similarly to the `write` method, notably that `Ok(())` means that the\nwriter has successfully been flushed, a \"would block\" error means that the\ncurrent task is ready to receive a notification when flushing can make more\nprogress, and otherwise normal errors can happen as well.\n\nUtilities for working with `AsyncWrite` values are provided by\n[`AsyncWriteExt`].\n\n[`std::io::Write`]: std::io::Write\n[`poll_write`]: AsyncWrite::poll_write()\n[stdwrite]: std::io::Write::write()\n[stdflush]: std::io::Write::flush()\n[`AsyncWriteExt`]: crate::io::AsyncWriteExt","links":{"AsyncWrite::poll_write()":"0:253:2549","std::io::Write::flush()":"1:4472:2633","std::io::Write":"1:4467:2630","std::io::Write::write()":"1:4468:2632"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:253:2549","0:254:2556","0:255:2602","0:256:2615","0:259:2627"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:261","0:263","0:265","0:272","0:278","0:284","0:290","0:296"]}},"0:312:2334":{"id":"0:312:2334","crate_id":0,"name":"ReadBuf","span":{"filename":"src/io/read_buf.rs","begin":[23,0],"end":[27,1]},"visibility":"public","docs":"A wrapper around a byte buffer that is incrementally filled and initialized.\n\nThis type is a sort of \"double cursor\". It tracks three regions in the\nbuffer: a region at the beginning of the buffer that has been logically\nfilled with data, a region that has been initialized at some point but not\nyet logically filled, and a region at the end that may be uninitialized.\nThe filled region is guaranteed to be a subset of the initialized region.\n\nIn summary, the contents of the buffer can be visualized as:\n\n```not_rust\n[             capacity              ]\n[ filled |         unfilled         ]\n[    initialized    | uninitialized ]\n```\n\nIt is undefined behavior to de-initialize any bytes from the uninitialized\nregion, since it is merely unknown whether this region is uninitialized or\nnot, and if part of it turns out to be initialized, it must stay initialized.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:317","a:2:3376:224-0:312:2334","a:2:3405:1967-0:312:2334","a:2:9533:3681-0:312:2334","a:2:9534:3680-0:312:2334","a:2:3364:215-0:312:2334","b:2:3201-0:312:2334","b:2:3197-0:312:2334","b:2:3207-0:312:2334","b:2:2868-0:312:2334","b:2:4097-0:312:2334","b:2:2865-0:312:2334","b:2:3212-0:312:2334","0:337"]}},"2:13729:2479":{"id":"2:13729:2479","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:13730:57369"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5425:4724":{"id":"1:5425:4724","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5426:56100","1:5427:5481"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:4699","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:2865-0:312:2334":{"id":"b:2:2865-0:312:2334","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2432","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:312:2334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2867:3317"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:270:2556":{"id":"0:270:2556","crate_id":0,"name":"poll_flush","span":{"filename":"src/io/async_write.rs","begin":[250,4],"end":[252,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14359:2198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50692:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3103:4979":{"id":"2:3103:4979","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:3102:4699","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:329:2689":{"id":"0:329:2689","crate_id":0,"name":"initialize_unfilled","span":{"filename":"src/io/read_buf.rs","begin":[144,4],"end":[146,5]},"visibility":"public","docs":"Returns a mutable reference to the unfilled part of the buffer, ensuring it is fully initialized.\n\nSince `ReadBuf` tracks the region of the buffer that has been initialized, this is effectively \"free\" after\nthe first use.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13803:61331":{"id":"2:13803:61331","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:15883:3248","self::pattern":"2:13332:4984"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4983","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:4983","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13362:4988","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:335:333":{"id":"0:335:333","crate_id":0,"name":"assume_init","span":{"filename":"src/io/read_buf.rs","begin":[234,4],"end":[239,5]},"visibility":"public","docs":"Asserts that the first `n` unfilled bytes of the buffer are initialized.\n\n`ReadBuf` assumes that bytes are never de-initialized, so this method does nothing when called with fewer\nbytes than are already known to be initialized.\n\n# Safety\n\nThe caller must ensure that `n` unfilled bytes of the buffer have already been initialized.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13733:4660":{"id":"2:13733:4660","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49775:3418","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3743:3391":{"id":"2:3743:3391","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3745:60246","2:3746:60247","2:3747:57384"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2432","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:107":{"id":"0:107","crate_id":0,"name":null,"span":{"filename":"src/future/mod.rs","begin":[9,0],"end":[9,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"poll_fn::poll_fn","name":"poll_fn","id":"0:96:2190","glob":false}},"2:3620:133":{"id":"2:3620:133","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3622:183","2:3623:384"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:358:1899":{"id":"0:358:1899","crate_id":0,"name":"net","span":{"filename":"src/net/mod.rs","begin":[1,0],"end":[56,1]},"visibility":"public","docs":"TCP/UDP/Unix bindings for `tokio`.\n\nThis module contains the TCP/UDP/Unix networking types, similar to the standard\nlibrary, which can be used to implement networking protocols.\n\n# Organization\n\n* [`TcpListener`] and [`TcpStream`] provide functionality for communication over TCP\n* [`UdpSocket`] provides functionality for communication over UDP\n* [`UnixListener`] and [`UnixStream`] provide functionality for communication over a\nUnix Domain Stream Socket **(available on Unix only)**\n* [`UnixDatagram`] provides functionality for communication\nover Unix Domain Datagram Socket **(available on Unix only)**\n\n[`TcpListener`]: TcpListener\n[`TcpStream`]: TcpStream\n[`UdpSocket`]: UdpSocket\n[`UnixListener`]: UnixListener\n[`UnixStream`]: UnixStream\n[`UnixDatagram`]: UnixDatagram","links":{},"attrs":["#![cfg(not(loom))]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:447"],"is_stripped":false}},"2:3835:3394":{"id":"2:3835:3394","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3837:55254"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13362:4988":{"id":"2:13362:4988","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:4987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:143":{"id":"0:143","crate_id":0,"name":null,"span":{"filename":"src/io/async_buf_read.rs","begin":[99,0],"end":[107,1]},"visibility":{"restricted":{"parent":"0:111:2325","path":"::io::async_buf_read"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsyncBufRead","id":"0:131:2326","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"items":["0:144:2418","0:145:2428"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:280:2615":{"id":"0:280:2615","crate_id":0,"name":"poll_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[299,4],"end":[305,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14359:2198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10930:2514","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50692:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8673:152":{"id":"2:8673:152","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8674:2789","2:8675:2772","2:8676:773"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:292:2615":{"id":"0:292:2615","crate_id":0,"name":"poll_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[359,4],"end":[365,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14359:2198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10930:2514","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50692:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:188":{"id":"0:188","crate_id":0,"name":null,"span":{"filename":"src/io/mod.rs","begin":[189,0],"end":[189,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::async_read::AsyncRead","name":"AsyncRead","id":"0:173:2328","glob":false}},"0:791:2503":{"id":"0:791:2503","crate_id":0,"name":"start_seek","span":{"filename":"src/io/async_seek.rs","begin":[66,4],"end":[66,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["pos",{"kind":"resolved_path","inner":{"name":"SeekFrom","id":"1:10942:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13774:57382":{"id":"2:13774:57382","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:15883:3248","str::splitn":"2:13771:57380","self::pattern":"2:13332:4984"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49911:5258","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4983","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:4983","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:4987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:4095:68":{"id":"2:4095:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4096:1443"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"2:13752:4127":{"id":"2:13752:4127","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:47810:176","prim@char":"1:15883:3248","self::pattern":"2:13332:4984"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47808:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4983","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:4983","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:4987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:139":{"id":"0:139","crate_id":0,"name":null,"span":{"filename":"src/io/async_buf_read.rs","begin":[85,0],"end":[97,1]},"visibility":{"restricted":{"parent":"0:111:2325","path":"::io::async_buf_read"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"DerefMut","id":"2:3600:2390","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"2:3405:1967","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"","id":"2:3587:117","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"AsyncBufRead","id":"0:131:2326","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsyncBufRead","id":"0:131:2326","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"items":["0:141:2418","0:142:2428"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13742:57385":{"id":"2:13742:57385","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:15883:3248","self::pattern":"2:13332:4984"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4983","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:410":{"id":"0:410","crate_id":0,"name":null,"span":{"filename":"src/net/addr.rs","begin":[90,0],"end":[90,39]},"visibility":{"restricted":{"parent":"0:359:2735","path":"::net::addr"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ToSocketAddrs","id":"0:385:2737","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"IpAddr","id":"1:11048:2751","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"kind":"primitive","inner":"u16"}]},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"5:6168:61972":{"id":"5:6168:61972","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8472:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4983","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:176":{"id":"0:176","crate_id":0,"name":null,"span":{"filename":"src/io/async_read.rs","begin":[72,0],"end":[74,1]},"visibility":{"restricted":{"parent":"0:153:2327","path":"::io::async_read"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2432","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsyncRead","id":"0:173:2328","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"2:3405:1967","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsyncRead","id":"0:173:2328","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2433","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:787:2472"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:10580:191":{"id":"2:10580:191","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10581:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3530:3386":{"id":"2:3530:3386","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3532:1245"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3197-0:312:2334":{"id":"b:2:3197-0:312:2334","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3174:136","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3171:150","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:312:2334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3200:4121"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3442:3368":{"id":"2:3442:3368","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3444:183","2:3445:898"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6219:4698":{"id":"1:6219:4698","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6220:4876","1:6221:4877","1:6222:8859","1:6223:56377","1:6225:56381","1:6227:56378","1:6228:56379","1:6230:56380"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:4699","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:173:2328":{"id":"0:173:2328","crate_id":0,"name":"AsyncRead","span":{"filename":"src/io/async_read.rs","begin":[43,0],"end":[58,1]},"visibility":"public","docs":"Reads bytes from a source.\n\nThis trait is analogous to the [`std::io::Read`] trait, but integrates with\nthe asynchronous task system. In particular, the [`poll_read`] method,\nunlike [`Read::read`], will automatically queue the current task for wakeup\nand return if data is not yet available, rather than blocking the calling\nthread.\n\nSpecifically, this means that the `poll_read` function will return one of\nthe following:\n\n* `Poll::Ready(Ok(()))` means that data was immediately read and placed into\n  the output buffer. The amount of data read can be determined by the\n  increase in the length of the slice returned by `ReadBuf::filled`. If the\n  difference is 0, EOF has been reached.\n\n* `Poll::Pending` means that no data was read into the buffer\n  provided. The I/O object is not currently readable but may become readable\n  in the future. Most importantly, **the current future's task is scheduled\n  to get unparked when the object is readable**. This means that like\n  `Future::poll` you'll receive a notification when the I/O object is\n  readable again.\n\n* `Poll::Ready(Err(e))` for other errors are standard I/O errors coming from the\n  underlying object.\n\nThis trait importantly means that the `read` method only works in the\ncontext of a future's task. The object may panic if used outside of a task.\n\nUtilities for working with `AsyncRead` values are provided by\n[`AsyncReadExt`].\n\n[`poll_read`]: AsyncRead::poll_read\n[`std::io::Read`]: std::io::Read\n[`Read::read`]: std::io::Read::read\n[`AsyncReadExt`]: crate::io::AsyncReadExt","links":{"std::io::Read":"1:4410:3413","AsyncRead::poll_read":"0:174:2472","std::io::Read::read":"1:4411:3785"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:174:2472"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:176","0:178","0:180","0:183","0:185"]}},"5:6171:61973":{"id":"5:6171:61973","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8472:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3907:3356":{"id":"2:3907:3356","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8197:4960":{"id":"2:8197:4960","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8198:60648","2:8199:60649","2:8200:60646","2:8201:60642","2:8202:60650","2:8203:60647","2:8204:60645"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2963:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:289:2602":{"id":"0:289:2602","crate_id":0,"name":"poll_shutdown","span":{"filename":"src/io/async_write.rs","begin":[345,4],"end":[347,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14359:2198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50692:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13736:4191":{"id":"2:13736:4191","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50043:2379","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3501:3379":{"id":"2:3501:3379","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3503:183","2:3504:362"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6745:4685":{"id":"1:6745:4685","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6746:57235"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:799:2615":{"id":"0:799:2615","crate_id":0,"name":"poll_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[222,4],"end":[222,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14359:2198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10930:2514","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50692:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3174:136":{"id":"2:3174:136","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3176:685"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13824:2782":{"id":"2:13824:2782","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:13272:127","`FromStr`":"2:13271:4821"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47933:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:13271:4821","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13271:4821","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:789:2503":{"id":"0:789:2503","crate_id":0,"name":"start_seek","span":{"filename":"src/io/async_seek.rs","begin":[62,4],"end":[62,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["pos",{"kind":"resolved_path","inner":{"name":"SeekFrom","id":"1:10942:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3203:685":{"id":"2:3203:685","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13717:310":{"id":"2:13717:310","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13718:2695","`u8`":"1:15900:3262"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:144:2418":{"id":"0:144:2418","crate_id":0,"name":"poll_fill_buf","span":{"filename":"src/io/async_buf_read.rs","begin":[100,4],"end":[102,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14359:2198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50692:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:273:2549":{"id":"0:273:2549","crate_id":0,"name":"poll_write","span":{"filename":"src/io/async_write.rs","begin":[260,4],"end":[267,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14359:2198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50692:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:388":{"id":"0:388","crate_id":0,"name":null,"span":{"filename":"src/net/addr.rs","begin":[34,0],"end":[34,55]},"visibility":{"restricted":{"parent":"0:359:2735","path":"::net::addr"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ToSocketAddrs","id":"0:385:2737","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2432","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ToSocketAddrs","id":"0:385:2737","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3216:1430":{"id":"2:3216:1430","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47933:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"2:3181:232","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3535:3387":{"id":"2:3535:3387","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3537:1248"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3168:74":{"id":"2:3168:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3170:2435"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2432","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:425":{"id":"0:425","crate_id":0,"name":null,"span":{"filename":"src/net/addr.rs","begin":[132,0],"end":[132,39]},"visibility":{"restricted":{"parent":"0:359:2735","path":"::net::addr"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ToSocketAddrs","id":"0:385:2737","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"SocketAddr","id":"1:10999:2754","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:300:2556":{"id":"0:300:2556","crate_id":0,"name":"poll_flush","span":{"filename":"src/io/async_write.rs","begin":[401,4],"end":[403,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14359:2198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50692:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3870:3355":{"id":"2:3870:3355","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2432","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13748:2617":{"id":"2:13748:2617","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"prim@char":"1:15883:3248","`None`":"2:47810:176","self::pattern":"2:13332:4984"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47808:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4983","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:145:2428":{"id":"0:145:2428","crate_id":0,"name":"consume","span":{"filename":"src/io/async_buf_read.rs","begin":[104,4],"end":[106,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["amt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5906:5435":{"id":"5:5906:5435","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5908:183","5:5909:438"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2432","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:2862:98":{"id":"2:2862:98","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2864:55983"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2432","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10570:120":{"id":"2:10570:120","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10571:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3215:128":{"id":"2:3215:128","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:39108:4794","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:212:2330":{"id":"0:212:2330","crate_id":0,"name":"AsyncSeek","span":{"filename":"src/io/async_seek.rs","begin":[18,0],"end":[47,1]},"visibility":"public","docs":"Seek bytes asynchronously.\n\nThis trait is analogous to the [`std::io::Seek`] trait, but integrates\nwith the asynchronous task system. In particular, the `start_seek`\nmethod, unlike [`Seek::seek`], will not block the calling thread.\n\nUtilities for working with `AsyncSeek` values are provided by\n[`AsyncSeekExt`].\n\n[`std::io::Seek`]: std::io::Seek\n[`Seek::seek`]: std::io::Seek::seek()\n[`AsyncSeekExt`]: crate::io::AsyncSeekExt","links":{"std::io::Seek::seek()":"1:4486:2363","std::io::Seek":"1:4485:2513"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:213:2503","0:214:2511"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:216","0:218","0:220","0:224"]}},"2:3373:221":{"id":"2:3373:221","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13799:61328":{"id":"2:13799:61328","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6163":{"id":"5:6163","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5976:1353","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6164:61971","5:6165:3420","5:6168:61972","5:6171:61973","5:6183:61974","5:6184:61975","5:6185:2368","5:6186:56198","5:6187:56199"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:323:2663":{"id":"0:323:2663","crate_id":0,"name":"filled_mut","span":{"filename":"src/io/read_buf.rs","begin":[71,4],"end":[76,5]},"visibility":"public","docs":"Returns a mutable reference to the filled portion of the buffer.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:182:2472":{"id":"0:182:2472","crate_id":0,"name":"poll_read","span":{"filename":"src/io/async_read.rs","begin":[85,4],"end":[91,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14359:2198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:312:2334","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50692:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13830:61336":{"id":"2:13830:61336","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5445:61336"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:50088:5295","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8632:5057":{"id":"2:8632:5057","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8634:4177"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13734:33163":{"id":"2:13734:33163","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"2:13735:33153"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:50063:5292","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/macros/support.rs","begin":[9,0],"end":[9,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"std::task::Poll","name":"Poll","id":"2:50692:192","glob":false}},"b:2:2868-0:312:2334":{"id":"b:2:2868-0:312:2334","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2432","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2862:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:312:2334","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2870:55983"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:293:2627":{"id":"0:293:2627","crate_id":0,"name":"is_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[367,4],"end":[369,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:337":{"id":"0:337","crate_id":0,"name":null,"span":{"filename":"src/io/read_buf.rs","begin":[273,0],"end":[281,1]},"visibility":{"restricted":{"parent":"0:305:2333","path":"::io::read_buf"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10563:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:312:2334","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":["0:338:664"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:220":{"id":"0:220","crate_id":0,"name":null,"span":{"filename":"src/io/async_seek.rs","begin":[69,0],"end":[81,1]},"visibility":{"restricted":{"parent":"0:191:2329","path":"::io::async_seek"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"DerefMut","id":"2:3600:2390","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"2:3405:1967","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"","id":"2:3587:117","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"AsyncSeek","id":"0:212:2330","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsyncSeek","id":"0:212:2330","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"items":["0:222:2503","0:223:2511"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:6339:4732":{"id":"1:6339:4732","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6340:59372","1:6341:59373"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8717:121":{"id":"2:8717:121","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8718:4122","2:8719:4123","2:8720:4124","2:8721:4125","2:8725:4126","2:8728:4127"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8874:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:336:2480":{"id":"0:336:2480","crate_id":0,"name":"put_slice","span":{"filename":"src/io/read_buf.rs","begin":[248,4],"end":[270,5]},"visibility":"public","docs":"Appends data to the buffer, advancing the written position and possibly also the initialized position.\n\n# Panics\n\nPanics if `self.remaining()` is less than `buf.len()`.","links":{},"attrs":["#[inline]","#[track_caller]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13777:61321":{"id":"2:13777:61321","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47808:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4983","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:355":{"id":"0:355","crate_id":0,"name":null,"span":{"filename":"src/io/mod.rs","begin":[203,44],"end":[203,52]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"std::io::SeekFrom","name":"SeekFrom","id":"1:10942:2336","glob":false}},"2:3518:3383":{"id":"2:3518:3383","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3520:358"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:284":{"id":"0:284","crate_id":0,"name":null,"span":{"filename":"src/io/async_write.rs","begin":[320,0],"end":[348,1]},"visibility":{"restricted":{"parent":"0:231:2331","path":"::io::async_write"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["is_write_vectored","poll_write_vectored"],"trait":{"name":"AsyncWrite","id":"0:252:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"io::Cursor","id":"1:10719:2437","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7891:239","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}}}}],"bindings":[]}}}},"items":["0:285:2549","0:286:2615","0:287:2627","0:288:2556","0:289:2602"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:5563:4707":{"id":"1:5563:4707","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5564:56724"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3467:3376":{"id":"2:3467:3376","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3469:1369"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13765:61319":{"id":"2:13765:61319","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"str::split":"2:13756:2360","`DoubleEndedIterator`":"2:8717:121","str::rsplit_terminator":"2:13768:61320","self::pattern":"2:13332:4984","prim@char":"1:15883:3248"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49839:5282","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4983","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:327:2684":{"id":"0:327:2684","crate_id":0,"name":"inner_mut","span":{"filename":"src/io/read_buf.rs","begin":[123,4],"end":[125,5]},"visibility":"public","docs":"Returns a mutable reference to the entire buffer, without ensuring that it has been fully\ninitialized.\n\nThe elements between 0 and `self.filled().len()` are filled, and those between 0 and\n`self.initialized().len()` are initialized (and so can be converted to a `&mut [u8]`).\n\nThe caller of this method must ensure that these invariants are upheld. For example, if the\ncaller initializes some of the uninitialized section of the buffer, it must call\n[`assume_init`](Self::assume_init) with the number of bytes initialized.\n\n# Safety\n\nThe caller must not de-initialize portions of the buffer that have already been initialized.\nThis includes any bytes in the region marked as uninitialized by `ReadBuf`.","links":{"Self::assume_init":"0:335:333"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninit","id":"2:32626:2635","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:787:2472":{"id":"0:787:2472","crate_id":0,"name":"poll_read","span":{"filename":"src/io/async_read.rs","begin":[73,4],"end":[73,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14359:2198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:312:2334","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50692:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2867:3317":{"id":"2:2867:3317","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:286:2615":{"id":"0:286:2615","crate_id":0,"name":"poll_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[329,4],"end":[335,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47925:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14359:2198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:10930:2514","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50692:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:3801:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13818:61334":{"id":"2:13818:61334","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:15883:3248","self::pattern":"2:13332:4984"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4983","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6649:4692":{"id":"1:6649:4692","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6650:59094"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6164:61971":{"id":"5:6164:61971","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2433","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8217:4256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2433","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8217:4256","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:795:2627":{"id":"0:795:2627","crate_id":0,"name":"is_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[218,4],"end":[218,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:228":{"id":"0:228","crate_id":0,"name":null,"span":{"filename":"src/io/mod.rs","begin":[192,0],"end":[192,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::async_seek::AsyncSeek","name":"AsyncSeek","id":"0:212:2330","glob":false}},"2:3471:3374":{"id":"2:3471:3374","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3473:899"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3829:138":{"id":"2:3829:138","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3831:691"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"2:3824:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:137":{"id":"0:137","crate_id":0,"name":null,"span":{"filename":"src/io/async_buf_read.rs","begin":[81,0],"end":[83,1]},"visibility":{"restricted":{"parent":"0:111:2325","path":"::io::async_buf_read"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2432","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsyncBufRead","id":"0:131:2326","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"2:3405:1967","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsyncBufRead","id":"0:131:2326","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"items":["0:785:2418","0:786:2428"],"negative":false,"synthetic":false,"blanket_impl":null}}},"paths":{"5:8314:2772":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:15905:3267":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:49160:8721":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"5:7891:239":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:11381:7641":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"12:2036:2772":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:2286:3799":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"16:6331:5696":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:12228:8817":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"12:1147:3542":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"12:880:3531":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"1:11048:2751":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"2:5034:3488":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"6:3877:6703":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:8195:2783":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"1:2481:4842":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:12557:7837":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"16:6381:5875":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:4005:6786":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:13840:8229":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:12482:7825":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:23426:4699":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:10228:8873":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:12512:7830":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"16:5443:5757":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:9154:4222":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:48446:3496":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:4356:6950":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:0:493":{"crate_id":2,"path":["core"],"kind":"module"},"16:3243:6042":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:37928:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:10937:7618":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:15896:3258":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:46667:5296":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:39148:4961":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"6:5433:7187":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:13293:8065":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:6100:2750":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"12:2052:4756":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:53832:8797":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"16:7721:5874":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:46211:197":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:2765:584":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:3870:3355":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:4048:6804":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:5405:7173":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:1311:6210":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:14420:203":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"12:952:3537":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:47933:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:48582:3621":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"16:6310:5914":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:9259:7527":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:4829:4801":{"crate_id":1,"path":["std","net","ip","display_buffer","IpDisplayBuffer"],"kind":"struct"},"12:1784:6329":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"5:3838:3527":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"16:6141:5910":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"5:8483:5445":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:3171:150":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:11710:5260":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:13785:8213":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"16:5530:5762":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"16:6075:5862":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:10942:2336":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:48110:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:12250:7771":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"16:6190:5912":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"14:56:7646":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:4219:3429":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:46735:5412":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:47074:5155":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:542:5795":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:3392:4115":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"0:56:1012":{"crate_id":0,"path":["tokio","pin"],"kind":"macro"},"16:3297:6096":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:9873:7539":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:12455:7822":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:47052:5153":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"6:513:6483":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:46675:5408":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:1447:3532":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:10719:2437":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:10476:6165":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"5:3554:3531":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"1:2909:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"12:114:62245":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:4538:9379":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:4296:6919":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:50169:4985":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:5668:5768":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:10364:6191":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:5639:5765":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"1:13928:6387":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"17:12469:7824":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:10198:7555":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:51947:5077":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:13215:8047":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"7:38:45522":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:48236:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:6241:4730":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"0:0:1970":{"crate_id":0,"path":["tokio"],"kind":"module"},"15:230:5699":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"5:4017:3531":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"17:9988:47904":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:14630:8827":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:8860:3503":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:10468:2834":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"5:984:5471":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:13094:8026":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"16:6858:6077":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"16:6595:5876":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:11890:9580":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"16:3051:6094":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:510:7449":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:49152:8720":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:51671:8728":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:5326:5748":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:13557:8136":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"11:0:3231":{"crate_id":11,"path":["adler"],"kind":"module"},"2:3364:215":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"6:607:6539":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:10211:7556":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:13357:4987":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:47907:3678":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"5:5910:5437":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:24953:3593":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:13233:8055":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:4012:6790":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:9533:3681":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:12093:7750":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:11985:4748":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:46655:5414":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:14460:2514":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"9:27:5596":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"18:837:4986":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:48841:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"16:2733:5785":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:24539:5336":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:11168:7631":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:2361:8815":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:696:2833":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:2922:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:1592:3541":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:49857:5283":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:9796:62260":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:547:5769":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:11952:4744":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:53333:5099":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:4467:8293":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:10318:6164":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:15633:6391":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:53081:5111":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:39144:2770":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"5:4372:3527":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:2213:1057":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:12646:7857":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"15:248:5700":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:3829:138":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:15232:2741":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:12143:7579":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:10039:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:46329:3393":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:14886:59254":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"16:6873:3196":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:23387:17235":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"6:5974:7240":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:11212:6182":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:2953:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"12:432:5682":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:49775:3418":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:3506:3381":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"5:1533:3541":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:3755:4538":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:5497:4703":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:6573:4696":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"9:900:9447":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:49747:5172":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:4135:6848":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"18:694:6237":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:3265:6043":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"16:4381:8290":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:51530:5096":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:6268:7383":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:4116:6838":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"17:12716:7865":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"6:4081:6819":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"16:4775:8302":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:1261:144":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:14369:3359":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:13345:8080":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:4467:2630":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:11905:56323":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"2:51376:8726":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"12:2392:9441":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"6:4509:7018":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"12:1703:5692":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:1669:6649":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:2420:8817":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"6:527:6491":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"9:776:5594":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"5:2619:5514":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:46097:3397":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:4410:3413":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:15881:3246":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:52725:5067":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:47286:8661":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:10801:143":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:3614:131":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:23151:4699":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"17:13529:8129":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:10253:6115":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"6:1606:6601":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:4402:6972":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"5:5962:6343":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"2:24311:8667":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"6:1558:6571":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:46972:8707":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:23228:4699":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:11689:7669":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:10807:143":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"5:3436:4756":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"6:626:6549":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:12596:8854":{"crate_id":1,"path":["std","sys","unix","fs","TimespecDebugAdapter"],"kind":"struct"},"5:3814:161":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:11579:7656":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:545:6499":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:3812:3392":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:9427:9089":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"2:10034:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"5:3441:5467":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:15897:3259":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"12:2253:3540":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:50081:5294":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:10980:3418":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"12:2040:3530":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:14:2632":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:1694:6668":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:12170:7760":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:1544:6566":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:13362:4988":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:6671:7390":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"16:5923:5904":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:3522:3384":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:25520:5198":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:5273:7528":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"18:811:6223":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:48871:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:47095:2383":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:5541:7207":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:5727:5168":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"16:2959:6035":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"5:1152:6331":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:46363:5042":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:46336:4964":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"6:586:6528":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:11491:4814":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"16:3521:8281":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:3382:3485":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:13404:8091":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"5:3106:9019":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:24169:5320":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:12700:7863":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:50206:4992":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:4373:6961":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:13440:8105":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:11238:2754":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:50573:5366":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"6:3972:6767":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:13774:8212":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"18:782:7424":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:8669:137":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:6645:4690":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:10340:6193":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:5293:7105":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"5:7477:2772":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:7470:4785":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:48826:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"6:4142:6850":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:5229:7071":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:13721:8195":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:11245:4911":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"6:4410:6976":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:5301:7110":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:945:1001":{"crate_id":1,"path":["std","thread","panicking"],"kind":"function"},"1:10443:2835":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:52198:8738":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"12:971:3538":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:13873:8236":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:50043:2379":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:12558:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"6:6908:7403":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:12957:7932":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:46916:5137":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"16:6533:6064":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:3370:3486":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"1:14399:9583":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"17:9706:7536":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"6:88:40597":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:46903:3417":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:11341:3671":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:53704:8789":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:32692:60292":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"5:7048:3182":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:46954:5141":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:6688:7399":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:3835:3394":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"9:686:5545":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"2:3518:3383":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:9004:47852":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:4476:57315":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:14061:2357":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:14107:60321":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:12282:7778":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:10578:3622":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"0:110:1906":{"crate_id":0,"path":["tokio","io"],"kind":"module"},"2:4095:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:53871:8798":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:11154:4904":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"2:53695:8788":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:11966:4747":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"16:3199:6040":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:13463:8110":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"7:0:1496":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:46187:196":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"16:6931:6080":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:13271:4821":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"5:8389:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:49939:5286":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:5210:7069":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"16:7684:5873":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:14862:4789":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:1578:3540":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:25151:5323":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:5078:2927":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:11068:6140":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:4599:8296":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:6080:7292":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:4146:4963":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"16:7415:5882":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:52875:5091":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:13089:5288":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:8849:6178":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:9535:3679":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:294:7447":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"16:3129:6047":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:3743:3391":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"16:7702:5872":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"9:1075:5615":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:24072:4953":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"5:8308:2772":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:3103:4979":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:9786:7538":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:13747:8204":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:51690:5065":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"5:4509:2771":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:8545:3505":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:47925:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:1031:4715":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:50053:5291":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:13247:8059":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:50540:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:7734:3588":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"1:12106:3630":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:50417:5357":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:46297:3390":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:13899:8245":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:56677:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:12674:7861":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:49644:5136":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"16:7155:5936":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:5978:2749":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"6:6243:7377":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:681:7452":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:4485:7011":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"12:559:144":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:13783:4788":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"1:1489:3539":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:11017:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:6943:9391":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:11013:7624":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"5:1055:5472":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:8902:47850":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:11177:3465":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"2:3463:3372":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:13794:8215":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:50504:5301":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"2:8022:5027":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:11282:47860":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"5:6562:3530":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:9526:4863":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:8288:4745":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"6:3960:6764":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:4308:6926":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:12015:7733":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:13257:8060":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"6:6925:7002":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:46615:5209":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"6:618:6544":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:10846:2815":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:11945:7723":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:47015:5149":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:10512:207":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"12:815:3534":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"12:472:62246":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"16:7264:196":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"9:157:5564":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"1:4146:4855":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:47808:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"9:722:5548":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"1:4180:3428":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:11409:7644":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:6184:7343":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"14:189:8560":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:8673:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:50374:5001":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:48194:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:13361:8083":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:25085:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:2917:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:50088:5295":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:5366:7155":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:52691:5085":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:5278:3482":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"16:6026:5858":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"12:1881:146":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:51446:5087":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"6:6250:7380":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:5151:2742":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:1704:6674":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:52661:5082":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:15324:56117":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:48320:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"12:2059:4757":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:4474:7005":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:634:6554":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"14:0:3233":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:12543:7835":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:10028:7547":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:9826:6164":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:13708:8189":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"16:7200:5880":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"12:2032:2771":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:13323:8075":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:2917:3414":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"17:13573:8139":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:47064:5154":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:49618:5266":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:12082:214":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:50520:5309":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:12634:7856":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:47084:5156":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:46986:5143":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"5:5861:6331":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:15904:3266":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:6477:7284":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"6:4532:9376":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:10665:4498":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:46356:5041":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"1:15901:3263":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:3442:3368":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"5:8406:5478":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:46415:5219":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:46692:4718":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:3803:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:14437:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:12228:5273":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:23175:5132":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"6:4315:6929":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:13908:8249":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:11264:3467":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:8874:158":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:15888:3252":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:47033:5151":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"16:7110:5932":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:46773:5347":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:4362:6953":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"5:1673:3527":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:3042:3770":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"6:6153:7317":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:46995:5148":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"9:927:45625":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"18:651:6231":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:5247:7083":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"16:6433:5917":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:10794:4536":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:10147:7552":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:15900:3262":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"16:6482:6066":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:7539:4788":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"6:5240:7079":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:1108:8809":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:15053:4766":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"5:853:109":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:14894:3630":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:7936:4137":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:5746:4915":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"6:4270:4874":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:2141:4757":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"12:1238:5680":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:13029:7990":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:8742:3692":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"5:777:8642":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:24415:8673":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:52425:5102":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:14912:9535":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"12:750:2771":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"5:3110:9020":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:14429:4497":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"5:1729:3533":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"9:809:2783":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:52069:5070":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:9033:47853":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:12417:7817":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:5784:5775":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:53619:5106":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:12496:7828":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"6:3883:6704":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:15886:3250":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:11494:7651":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:11181:7633":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:6856:7400":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:53715:8790":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"5:8226:2772":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:9948:7541":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"18:169:54146":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:46631:5211":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:11956:7726":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:10999:2754":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"6:1537:6563":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:25019:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:14665:4791":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:15903:3265":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:8376:2378":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:13377:8087":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"5:3825:2771":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:3600:2390":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:6035:5900":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:46878:5136":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"6:3987:6774":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"12:379:5684":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:2147:4758":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:9512:4862":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"18:739:7430":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"12:933:3535":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:13735:8201":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:53581:5086":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:10574:3614":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"5:2396:5510":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"18:829:6225":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"5:4765:6336":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"6:5216:7070":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"16:5257:7527":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"16:7309:5866":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:11822:7705":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"12:843:3528":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:13428:8099":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"3:0:436":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:57973:8806":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"2:24506:9577":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:46728:5411":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:10464:6161":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:9561:6158":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"5:3428:4758":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:46588:4718":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:24513:5383":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:8717:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:607:7451":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:47302:8710":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:12770:7879":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"16:6656:6071":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:5759:4916":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:7484:4786":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:10799:2335":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:49957:5287":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:7139:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:48404:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:6576:4698":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:4871:8305":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"16:6604:5922":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:46963:5142":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"5:3104:4186":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:6097:7294":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:10655:4497":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:3447:3367":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:23962:4737":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:6027:7269":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:3491:3377":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:15894:3256":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:49607:5265":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:22834:4192":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"16:6949:6081":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:13961:8258":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:8777:3506":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:11797:7701":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:46754:5213":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:24887:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"16:7121:5933":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"5:6759:2822":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:10015:7546":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"5:4665:6334":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"18:678:143":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:8863:2858":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"5:8494:5446":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"6:5982:7245":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:13073:5285":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:8954:6141":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:6665:9389":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:944:2828":{"crate_id":1,"path":["std","thread","yield_now"],"kind":"function"},"16:6468:5918":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:7616:1373":{"crate_id":1,"path":["std","sync"],"kind":"module"},"2:11477:5251":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:5455:9383":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:10250:5238":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:9653:6381":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"17:10775:7606":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:1680:6657":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"12:2412:9444":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:53657:5071":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:11457:7646":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:1431:3530":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:10610:7572":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:10187:7554":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:5860:2748":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:6173:5911":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:9161:4958":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:3676:3389":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:6089:5907":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:4127:6843":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:5321:3483":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"6:6979:7410":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"18:704:7424":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:23291:4952":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:10930:2514":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:14183:2200":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:4218:6885":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:11907:7713":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:3824:229":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:46171:198":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:7247:5895":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:2119:2771":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:14018:697":{"crate_id":2,"path":["core","future"],"kind":"module"},"6:4208:6884":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:13953:8255":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"16:5238:46275":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:4440:6987":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:11034:2756":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"5:1072:2771":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:4351:2380":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"6:4446:6990":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"5:8420:5348":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:601:6536":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:24821:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:47849:2771":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"5:4694:240":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:24364:8669":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:13245:4871":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"5:2266:6333":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:46768:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"17:12302:7779":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:14470:59257":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:4752:2737":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"1:5513:4704":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:2123:2772":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:2314:6192":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:11937:7721":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:14072:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:13539:8132":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:10223:6120":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:12573:7841":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"18:152:54145":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:3405:1967":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"12:1256:3543":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:11628:7665":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"9:234:5572":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"1:14379:4700":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:3430:969":{"crate_id":2,"path":["core","ops"],"kind":"module"},"2:24788:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:46231:200":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:6467:4705":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:9930:62255":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:10048:7549":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:53411:5083":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:1236:7453":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:11434:2382":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"16:4942:8307":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"12:2045:3531":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"6:6643:7389":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:3070:4511":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:2543:6160":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:11335:6137":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:53675:8786":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"16:4743:8301":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"1:6924:3670":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"16:5721:5773":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:5425:4724":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:1662:6645":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:10039:7548":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:3686:8282":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:3801:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"18:885:6229":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:1387:3527":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:24527:5337":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:4386:6966":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:5178:7051":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:15890:3254":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:11514:7652":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:12660:7858":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"12:1682:5691":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:9558:6379":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"2:50397:5356":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:12157:7759":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:10851:7609":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:51901:5089":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:14931:3629":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"17:11530:7653":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:13281:8062":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:11890:7707":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:10814:6135":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:11314:4688":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:49807:5254":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"12:2419:3520":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:47293:3499":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:14064:2359":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"5:5948:6340":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"16:5498:5760":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"16:6643:6070":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:6504:5920":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:3841:3396":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:15854:12116":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:15887:3251":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:11409:3527":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"6:1600:6599":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:11305:7637":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:1105:8807":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:3371:2376":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:14067:2355":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:5567:4708":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:49587:5263":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:13761:9029":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"6:1712:6675":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:56599:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:6120:7301":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:3155:6038":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:10245:5237":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:6007:7263":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"9:603:45700":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:15065:4772":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:13755:8207":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:1727:6684":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:3103:6048":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:51631:5076":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:11754:7685":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:10914:2378":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:4178:2357":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:9958:62254":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:6902:7402":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:7782:6363":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"1:11409:2783":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:13342:4983":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:971:207":{"crate_id":1,"path":["std","thread","Result"],"kind":"typedef"},"17:12026:7734":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"12:466:62244":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:46944:5140":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:9676:62258":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:8217:5483":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"16:5869:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:9517:3418":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:48362:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:11501:2771":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:3272:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"17:11603:7660":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"6:4392:6969":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:12731:7869":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:23437:4952":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:3405:3421":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:53741:8792":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:1551:6568":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:15253:2746":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:49657:5267":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:10584:3620":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:14779:6388":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:853:3600":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"9:963:5612":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:8127:5175":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"16:5685:5771":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"16:5412:5755":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:53779:8794":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:23102:4948":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:5529:5405":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:12567:6386":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:51977:5081":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:13016:7984":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:3461:6045":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:4160:6861":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"12:353:9016":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:8453:3498":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:24461:40004":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:3174:136":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:10511:12114":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:13352:8082":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:10586:7570":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:23232:4736":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:1113:12115":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"18:637:7424":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:47004:5146":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:13565:8138":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:1588:6591":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:5708:4910":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:8715:3499":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:24348:9574":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:46848:6353":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:15899:3261":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:10240:6112":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:3743:8283":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:52221:8739":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:49893:5257":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:5378:7160":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:15339:9536":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:13859:4787":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"16:5941:5905":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:14453:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"18:820:6224":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:3102:4699":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:11671:7668":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:52301:5110":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:6481:7288":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:11653:7667":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"16:6286:5697":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:10278:6382":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:13522:8128":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:3479:3375":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:11922:7717":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:11449:4813":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:52045:5069":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"16:4411:8291":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:1567:6576":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:13421:8098":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"12:1162:5677":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:5753:784":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:13180:8043":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:50561:3634":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"2:12796:5389":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"16:4271:8287":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"5:7312:3530":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"1:0:1344":{"crate_id":1,"path":["std"],"kind":"module"},"2:46253:199":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:12772:5425":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:3374:107":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:859:3601":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:4351:8289":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:10582:3619":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:9746:7537":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:12607:7854":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:49142:2783":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:57952:8805":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"17:10530:7562":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:4998:3487":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:32792:60288":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"1:948:1907":{"crate_id":1,"path":["std","thread","park"],"kind":"function"},"17:10058:6209":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:12077:213":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"6:5547:7208":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:12318:7784":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"9:0:3229":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:13859:8234":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:50524:5307":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"16:4316:8288":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:6745:4685":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:9157:4223":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"16:7741:5940":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:1483:3538":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:10993:2379":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"6:5488:7194":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:10660:48042":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:13560:110":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:46603:5208":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:2277:4980":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:10566:110":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"17:2512:6190":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:6277:5913":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:50011:5290":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:11589:5254":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:56664:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:5948:6031":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:6907:5925":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:6060:5901":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:23049:5131":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"5:8472:220":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"14:47:8560":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:10913:7616":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:49597:5264":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:13975:8261":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:51601:5088":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:12072:3500":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:12565:4494":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:52615:5078":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:11713:7673":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"12:2269:3541":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:12067:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:12620:7855":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:5563:4707":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:10811:147":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:51422:5095":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"16:2772:6058":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:13660:8188":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:50674:203":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:10874:7610":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:8449:3471":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:11088:2753":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"16:2861:6033":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:9883:62261":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:11134:3207":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"5:2376:5526":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:50384:5002":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:4143:4854":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"5:8436:5479":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:50072:5293":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:1480:2810":{"crate_id":2,"path":["core","hint","spin_loop"],"kind":"function"},"17:11591:7659":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:10678:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:32632:3457":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"17:13507:8124":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:9534:3680":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:14148:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:2359:8814":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"6:4198:6877":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"16:7141:5935":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:12383:7814":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"16:7369:5864":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:4256:2355":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:11725:7674":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:47865:2772":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"6:4075:6816":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:13394:8816":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"6:5398:7172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"12:895:5669":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"2:47115:5029":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"16:7184:6082":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:53794:8795":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:51999:5084":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:3085:1906":{"crate_id":1,"path":["std","io"],"kind":"module"},"6:3920:6731":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:24423:8674":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:672:40994":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"6:1764:6697":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:15893:3255":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"6:4346:6944":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:22847:59790":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"6:4242:6895":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:48001:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:11196:3466":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"16:4495:8294":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"16:6717:5924":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"5:3407:5466":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:1146:9087":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"2:11696:5259":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:15907:3269":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:50684:3350":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:12360:7805":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:1405:3528":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:3058:4505":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:49113:8715":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"14:244:8565":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"5:1909:6331":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:11196:4699":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:13124:5251":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:22902:60184":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"7:85:45529":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:2859:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:32592:3456":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:5396:5752":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:8295:4746":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:10622:7573":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:10166:7553":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:10068:6149":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"16:7051:5927":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"16:6557:5921":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"14:231:5448":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:11627:5255":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:46721:5410":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:48945:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:52167:8737":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:12048:7743":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"1:14417:8867":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:53684:8787":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:10570:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"6:1721:6681":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:580:6525":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:10963:3417":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:22881:60187":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:6900:60475":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"16:5887:5780":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:48808:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:15038:4765":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:46698:5409":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"1:947:2831":{"crate_id":1,"path":["std","thread","sleep"],"kind":"function"},"16:3007:6036":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:56242:5053":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:7093:8819":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:1456:3534":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:4148:6852":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:3908:8285":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:8939:2824":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:51552:5100":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:50536:5303":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:6016:7264":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:46714:5295":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:2130:3531":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"17:12758:7872":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"16:6050:5906":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:12222:7767":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:2654:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:13155:8033":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"18:621:7423":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:5331:7133":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:50508:5304":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:3853:5049":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:3369:2432":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:14801:6390":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"16:7449:5871":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:10517:2814":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"16:6630:6069":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"5:1256:60760":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:6647:4691":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:10291:6152":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:3496:3378":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:4110:6835":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:9064:47854":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:46785:5348":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:9131:47856":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:50220:4995":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"5:3395:2771":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:52120:8736":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:3654:3351":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"17:10975:7621":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:11516:5252":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:3181:232":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"16:7471:5859":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:10643:4494":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"5:6851:3405":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:10899:7612":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:13612:8151":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"6:1531:6560":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"12:1103:3540":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:50312:4998":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:5738:4913":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:13481:8114":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:10695:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:12117:7752":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"12:0:3232":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"11:46:9446":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"17:13763:8208":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:24477:40013":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"6:571:6519":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:53756:8793":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:4287:6914":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:49356:5429":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:49679:5269":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:10545:7565":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:50727:3357":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"19:0:1000":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"5:3114:9021":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:8610:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:9587:62262":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:12030:4751":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:47024:5150":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:2126:3530":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:7248:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"9:1020:5614":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:51831:5101":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"5:1684:2772":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:8197:4960":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:13887:8243":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:2911:4495":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:13147:8032":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:11433:7645":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:50765:5130":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:3743:6131":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:14404:4496":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:37952:4192":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"5:8217:4256":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"5:3366:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"14:250:8567":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"16:3494:7458":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:11130:7629":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"5:1626:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:52023:5066":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"5:4281:3530":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:4055:6807":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:9439:9090":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"1:10527:3544":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:50349:4999":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:24240:5321":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:1912:41968":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:7314:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"17:4008:7456":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:13452:8106":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:13332:4984":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:783:6381":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"16:6012:5860":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"5:1296:5509":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:15849:56358":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:4161:4962":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"17:12431:7819":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"12:183:5685":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"18:720:7426":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:2510:4843":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"16:3770:8284":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"18:766:7435":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:10428:56119":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"6:5204:7066":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:5998:7257":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:5998:5845":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:15895:3257":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"16:0:3235":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:12585:7843":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:5154:2741":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:3077:6095":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:46894:5135":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"16:5698:5772":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:1634:6620":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:997:2388":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"16:3576:7462":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:10496:12112":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:32988:3458":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:10435:6122":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:6967:7408":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:11960:2772":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:10303:6384":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"6:4526:9374":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:6114:7299":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:10127:6164":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"5:7731:4262":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:5745:5774":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:4428:3415":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:48929:4282":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"2:3459:3369":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:47320:8711":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:2851:1897":{"crate_id":1,"path":["std","fs"],"kind":"module"},"2:14359:2198":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:4485:2513":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:4841:5023":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:23238:4738":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:2397:8816":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:9655:4983":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:11518:4817":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:53535:5068":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:11668:5257":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"18:801:6222":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:4716:8300":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:4660:8298":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:612:6541":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:15377:5708":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:11854:4789":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"6:521:6488":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:46801:5349":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:6649:4692":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:14253:6425":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"17:12921:7901":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"16:5176:8309":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:9563:6380":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"1:4492:2438":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"5:8449:5480":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:24332:5190":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:9326:6156":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:6479:7286":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:39108:4794":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:9636:7535":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"16:5348:5749":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:3617:132":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:10534:13121":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:5730:4912":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"16:5566:5763":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:10949:7619":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:13351:4986":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"15:269:5704":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"16:7281:5867":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:1576:6582":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"18:744:62264":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"13:0:3226":{"crate_id":13,"path":["std_detect"],"kind":"module"},"5:8279:196":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:11432:4812":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"18:0:3237":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:11102:47859":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"12:162:5681":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"16:5902:5903":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:10417:3602":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:9240:6116":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:49578:5262":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"16:5217:5789":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"6:5582:7233":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:9087:47855":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"12:787:3533":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:12014:4750":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:5460:5758":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:10489:7560":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:47857:3527":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"6:3981:6772":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:4434:6986":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:50106:5296":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:47043:5152":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:10416:4699":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"5:1547:3543":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"12:869:3530":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"16:5649:5767":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"9:41:5597":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"1:15889:3253":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"17:11968:7727":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:10422:7558":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"5:8241:3530":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:15192:2742":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:2135:4756":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:565:6516":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:14968:4797":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"5:8287:5444":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"5:3462:4759":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:8929:47851":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"16:7768:5869":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"8:0:3228":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:12195:5272":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:12348:7803":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"16:6130:5909":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:24400:5186":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"12:1203:5679":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"5:1751:196":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"16:6549:5879":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:46370:3480":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"5:3402:4757":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"16:7659:5939":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:12130:7755":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:11944:2771":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:4379:6964":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"6:6931:7003":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:10902:3431":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"17:9466:7445":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"16:7792:5898":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:3907:6721":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:11474:7650":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:48278:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:7599:4792":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:4439:8292":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:9160:6181":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:6099:5908":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:5390:7167":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:14795:6389":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"5:2328:5511":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"13:121:46170":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"5:7935:6345":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:48589:3622":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"18:668:6236":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:3526:3385":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:12406:7815":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:10082:6203":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:14647:56120":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"5:7753:4263":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"16:6980:5926":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:50516:5305":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:52537:5090":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:12262:7772":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:15023:4764":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:49105:3551":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:4853:5024":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:5288:7104":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:5427:5756":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:50735:3358":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:11563:7655":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:12183:7762":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"11:54:5667":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"6:6057:7291":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:7782:5870":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:4061:6809":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:50097:4718":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:13481:4830":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:11201:3462":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:5214:3479":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:11701:7672":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:5303:5747":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:4464:7001":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"5:1663:2771":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:3248:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:3535:3387":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"5:7358:6331":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"5:8566:4258":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:5224:3480":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"6:4321:6932":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:47840:2789":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"5:8257:60815":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"16:3029:6037":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:2839:6032":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:11547:7654":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:2263:3800":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:23768:17254":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:48832:134":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"1:15898:3260":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"5:6739:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"16:6691:5923":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:11912:8990":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"1:15882:3247":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"5:2843:5513":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:12328:6359":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"6:4020:6792":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"5:981:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:11270:4875":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:49839:5282":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:10986:2382":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:5575:4710":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:10217:7452":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:9206:47857":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:50528:5308":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:10554:2770":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"12:399:5683":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"6:4098:6829":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:5269:3481":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:4865:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"12:2398:9442":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:48068:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:3432:3366":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"18:136:54144":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:1526:6558":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:13584:8143":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:3372:222":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:32446:5378":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:13607:4796":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:11085:6184":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:3587:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:10921:2381":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:46925:5138":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:12209:7765":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"12:764:3527":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"6:4230:6894":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:2651:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"5:3948:2437":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"5:4308:6331":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:10598:7571":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:10988:7622":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"16:3314:5782":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:46934:5139":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"5:1518:3542":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:9920:7540":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:5426:7186":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:23763:4954":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"5:5166:664":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"1:943:2829":{"crate_id":1,"path":["std","thread","current"],"kind":"function"},"1:5278:2746":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:2883:6052":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:11507:4816":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:13037:7992":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"17:13549:8135":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:22879:60189":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:47916:3767":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"16:4573:8295":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:10643:7575":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:2484:47942":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:3611:2952":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"5:5388:202":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:1452:3533":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:9836:62257":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:11002:7623":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:6214:7360":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:10438:2832":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:23138:5173":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"5:4581:5495":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"17:12687:7862":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:15315:8872":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:1610:3543":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:47311:2380":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:10851:3549":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:53730:8791":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:11769:7691":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:3437:3371":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:13271:8061":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"16:7355:5863":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"5:4709:6336":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:10513:2630":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:10788:7608":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:2963:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:51500:5108":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:24388:5185":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:7295:5868":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"5:1760:5506":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:13917:8251":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:14057:139":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:25118:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:56638:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:5516:5761":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:51755:5109":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"16:2792:5786":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:15902:3264":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"16:2981:6046":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"5:3905:6331":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:3168:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"16:2905:6034":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:3484:3380":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:50285:4997":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:5431:4726":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:10558:7568":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"21:0:1969":{"crate_id":21,"path":["socket2"],"kind":"module"},"2:47874:3196":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"6:5311:7117":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"12:940:3536":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:24440:40012":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:2754:5784":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"6:3896:6713":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:13369:8085":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"9:996:5613":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:8632:5057":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:1626:6615":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:5636:4907":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"17:9646:62256":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:10576:3621":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:25052:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"18:790:6221":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:15170:4721":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:14960:8869":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:2391:2179":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:2862:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:9275:7528":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:7238:5881":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"10:0:3230":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:5553:4706":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:8636:5059":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:7169:5878":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:8682:3693":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"12:979:3539":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:10136:7539":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:49911:5258":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"5:383:4458":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:23435:5064":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:5152:3474":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:24920:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"5:8361:3520":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:5478:7205":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:50532:5302":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:5149:7027":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"18:857:6227":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:14142:2834":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"16:3478:6044":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:5447:7192":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:7422:4782":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"16:7323:5883":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"16:3402:5787":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:51853:5104":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:3620:133":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"5:8249:5474":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:24068:4699":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:10580:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"16:7025:5792":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:7939:3589":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"2:13050:5284":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:10104:6205":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"12:2280:3542":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:1088:4844":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:50063:5292":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:3165:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:13938:8254":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"16:3177:6039":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:11784:7697":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:4516:7021":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:8433:60719":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"2:47976:2771":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"6:6205:7357":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"16:7868:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"6:0:803":{"crate_id":6,"path":["libc"],"kind":"module"},"2:48859:108":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"6:4493:7013":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:4277:6907":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:10093:6204":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:11810:7702":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"6:161:40664":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:10523:135":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"16:3366:6049":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:13013:5281":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:12892:7881":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"0:358:1899":{"crate_id":0,"path":["tokio","net"],"kind":"module"},"6:1733:4870":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:51570:8727":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:4489:2772":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:13515:8127":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:10718:8664":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:6841:4701":{"crate_id":1,"path":["std","os","net","tcp","TcpStreamExt"],"kind":"trait"},"2:50191:4989":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"16:3340:5783":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:5567:7222":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:9396:7443":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:12070:7744":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:3471:3374":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"6:5186:7053":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:5143:3472":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:4140:4853":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"12:2404:62249":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:3459:3426":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"5:5488:3405":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:2422:8818":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:5391:1951":{"crate_id":1,"path":["std","os"],"kind":"module"},"17:13196:8046":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:51356:8725":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:49993:5289":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:10304:6155":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"18:774:7424":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:10962:7620":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:11250:4914":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:46645:5413":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:4383:3405":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:48893:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"18:754:62267":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"5:5906:5435":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:51653:5080":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:12237:7770":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:48002:205":{"crate_id":2,"path":["core","sync","atomic","Ordering","Relaxed"],"kind":"foreign_type"},"17:9431:7444":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:11615:7663":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:5959:5791":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"5:1719:3532":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:13472:8113":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"5:444:2433":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:7739:9023":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"1:12087:3629":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"6:6229:7368":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:5519:4705":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:5298:2807":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:28330:5062":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:13817:8228":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:49733:5352":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"20:0:1968":{"crate_id":20,"path":["pin_project_lite"],"kind":"module"},"2:32640:60289":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"2:2181:583":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:53223:5079":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:10789:4535":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:8446:3497":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:9579:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"18:712:4192":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"5:8549:3531":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"5:3960:5484":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"6:1748:6691":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"18:849:6226":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:49130:147":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:10390:6163":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:10925:7617":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"16:7100:5931":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"12:2066:4758":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:5419:7184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:3373:221":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:1477:3537":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:6490:5919":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"14:11:8560":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:6219:4698":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"14:194:46198":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:10648:4496":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:10394:6189":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"5:5609:2822":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:2502:3802":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:46124:3352":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:1991:146":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:13167:8038":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:50748:159":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:11292:7273":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:2152:4759":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:56612:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:5374:5751":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:9267:58906":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:23380:4699":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"17:10516:7561":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:15071:4773":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"18:661:6235":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:3475:3373":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:52455:5105":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:1374:2771":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:539:6496":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"6:4332:6938":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:9716:62263":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:11256:7634":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:11985:7730":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:13413:9028":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:4258:3427":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:7208:5937":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:13306:8070":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:51400:5107":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:14456:142":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:50363:5000":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"9:469:45631":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:1441:3531":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"1:3284:2374":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:2188:3453":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"16:7754:5941":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:950:2830":{"crate_id":1,"path":["std","thread","park_timeout"],"kind":"function"},"17:9756:62259":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:56625:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"18:729:62266":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"5:3105:60898":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:3933:6741":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"5:844:227":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:3501:3379":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"16:4903:8306":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:13408:4991":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"5:69:4257":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"5:6340:4262":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:13331:8078":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:13602:8146":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:49121:3550":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"16:4198:8286":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:11234:6180":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"6:6937:7004":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:3467:3376":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"0:776:1391":{"crate_id":0,"path":["tokio","task"],"kind":"module"},"6:6896:7401":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:10407:6188":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:1740:6687":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:6339:4732":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"16:6679:6073":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:10266:6149":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:3060:4506":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"12:928:3532":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:10503:6166":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:11882:4791":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:10572:3615":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:2044:3405":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"9:692:5547":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"6:4028:6795":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:11894:56313":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"16:2813:6051":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:5439:7190":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"6:4454:6995":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:50777:4456":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:50512:5306":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:11314:6157":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:24854:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:22862:59790":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"6:6034:7273":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"14:216:46204":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:10137:644":{"crate_id":2,"path":["core","sync","atomic","fence"],"kind":"function"},"2:53809:8796":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:1460:3535":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:11640:7666":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:4416:6977":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:12003:7731":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:973:3589":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:4036:3430":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"2:7159:5147":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:3512:3382":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"16:4628:8297":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"6:593:6531":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:4038:6801":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"5:2284:5469":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:4840:8304":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"5:8232:5473":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:11031:47858":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:48568:3614":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:15865:56112":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:12125:3631":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:4067:6811":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"18:896:6230":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:11354:6136":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:11359:4802":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:12746:7637":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:13138:8031":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:10115:6206":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:14874:4790":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:49569:5261":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:10973:2383":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:23974:59788":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:11288:4697":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"15:0:3234":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:14394:9581":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"5:2005:3531":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"16:7379:5884":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"5:8373:3521":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:2884:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:7436:4783":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"5:8271:2772":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"5:1502:3540":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:157:40663":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:47992:2772":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"16:7131:5934":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"16:6407:5916":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"16:4975:8308":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:49670:5268":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:49759:5277":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:11385:2771":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:15884:3249":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"4:0:3227":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:10703:4849":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:10801:6134":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"6:4340:6942":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:8646:8821":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:2914:3785":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:5706:12117":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:10445:7493":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"12:2072:4759":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"1:8974:8821":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"6:6135:7306":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:12527:7834":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"18:611:6232":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:1418:3529":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:7062:8819":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:11842:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"16:3221:6041":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:6717:5145":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:4256:6906":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:46594:6424":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"12:777:2772":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:12053:2825":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:4179:6876":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:51468:5075":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:15906:3268":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:11071:2752":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"16:2937:6057":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:4157:6144":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:13495:8121":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"16:6518:5877":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:4088:6822":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:8497:2823":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:46275:201":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"16:5605:5764":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:8732:4888":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"2:3530:3386":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:4783:3405":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"2:50692:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:1466:3536":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"5:7207:6345":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"1:7456:4784":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"5:7960:6351":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:6914:7404":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"5:7551:6331":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:11682:5258":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"5:1740:3534":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:52379:5098":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"16:5289:5861":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:10638:4493":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:3453:3370":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"16:4689:8299":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"6:3993:6777":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:10455:6162":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:53473:5103":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:9361:7442":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:11836:4787":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:14634:4727":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"18:866:6228":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:8187:3589":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"1:10711:3425":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"16:7090:5930":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:10550:8827":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:47331:8662":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"16:6159:5865":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"3:321:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:47984:3527":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:50237:4996":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:9539:6179":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"6:1621:6613":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:24986:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"5:4036:6331":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:4425:6980":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:5274:7103":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:11142:7630":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"16:5362:5750":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"6:6129:7305":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:5505:4702":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"5:1276:5508":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"12:1183:5678":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:47105:5157":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:3907:3356":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:13595:8144":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:9183:6139":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:14540:4255":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"5:8466:9458":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"17:12442:7820":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:13129:8027":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:8096:3589":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"2:49765:5278":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:533:6494":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:51708:8729":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:10563:110":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:7602:4793":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:11190:3467":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:7826:5041":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"5:1710:3529":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:49699:5271":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:11205:218":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"16:6342:5915":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:51801:5097":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:4896:4453":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:3376:224":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:5147:3473":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:3044:4501":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"13:233:9440":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:49789:2382":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:11742:7682":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"0:779:1949":{"crate_id":0,"path":["tokio","stream"],"kind":"module"},"1:15883:3248":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"12:1121:3541":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:32626:2635":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:22900:60186":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"6:3966:6765":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:5260:7092":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:10831:6164":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:56651:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:4803:8303":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:6640:5144":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:11998:4749":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"6:6954:9395":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:49352:5430":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:1601:3542":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"5:6775:5451":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:12196:7763":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:7637:5938":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:4217:2359":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:48152:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:299:7448":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"5:6498:228":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:8000:6363":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"2:4:985":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:2326:604":{"crate_id":1,"path":["std","env"],"kind":"module"},"16:5855:5778":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:0:3236":{"crate_id":17,"path":["object"],"kind":"module"},"2:49518:5256":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:1397:2772":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"16:7079:5929":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:11868:4790":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"9:749:5549":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"17:9291:7441":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:15908:3270":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:49689:5270":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:9434:6378":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"1:11105:3464":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"2:11554:5253":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:3177:233":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"18:645:6234":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:9143:4735":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:7834:3589":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"2:21:676":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:11022:2755":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"1:13744:4786":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"12:856:3529":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"1:15388:5708":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:11256:4869":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:3381:6361":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:940:1919":{"crate_id":1,"path":["std","thread","spawn"],"kind":"function"},"22:0:803":{"crate_id":22,"path":["libc"],"kind":"module"},"16:7063:5928":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:10571:6143":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"12:1666:5690":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:39184:4116":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:8281:204":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:3672:3388":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:9394:6377":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"5:1701:3528":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:48575:3615":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:46858:8706":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:13073:8021":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:48026:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"9:1056:5607":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"1:6723:4689":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"}},"external_crates":{"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"20":{"name":"pin_project_lite","html_root_url":null},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"21":{"name":"socket2","html_root_url":"https://docs.rs/socket2/0.4/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"22":{"name":"libc","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":21}