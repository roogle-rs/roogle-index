{"root":"0:0:1917","crate_version":"1.20.1","includes_private":false,"index":{"2:13615:2287":{"id":"2:13615:2287","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"`DoubleEndedIterator`":"2:8591:120","prim@char":"1:15989:3177","self::pattern":"2:13202:4919","str::split_whitespace":"1:15995:3182","str::rsplit":"1:15995:3182"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49580:2309","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:4920","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:149:2254":{"id":"0:149:2254","crate_id":0,"name":"async_read","span":{"filename":"src/io/async_read.rs","begin":[1,0],"end":[131,1]},"visibility":{"restricted":{"parent":"0:106:1848","path":"::io"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:169:2255"],"is_stripped":true}},"0:324:2596":{"id":"0:324:2596","crate_id":0,"name":"unfilled_mut","span":{"filename":"src/io/read_buf.rs","begin":[135,4],"end":[137,5]},"visibility":"public","docs":"Returns a mutable reference to the unfilled part of the buffer without ensuring that it has been fully\ninitialized.\n\n# Safety\n\nThe caller must not de-initialize portions of the buffer that have already been initialized.\nThis includes any bytes in the region marked as uninitialized by `ReadBuf`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninit","id":"2:32458:2562","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:10390:2557":{"id":"2:10390:2557","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10391:1533","2:10392:58838","2:10394:4145"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:323:2611":{"id":"0:323:2611","crate_id":0,"name":"inner_mut","span":{"filename":"src/io/read_buf.rs","begin":[123,4],"end":[125,5]},"visibility":"public","docs":"Returns a mutable reference to the entire buffer, without ensuring that it has been fully\ninitialized.\n\nThe elements between 0 and `self.filled().len()` are filled, and those between 0 and\n`self.initialized().len()` are initialized (and so can be converted to a `&mut [u8]`).\n\nThe caller of this method must ensure that these invariants are upheld. For example, if the\ncaller initializes some of the uninitialized section of the buffer, it must call\n[`assume_init`](Self::assume_init) with the number of bytes initialized.\n\n# Safety\n\nThe caller must not de-initialize portions of the buffer that have already been initialized.\nThis includes any bytes in the region marked as uninitialized by `ReadBuf`.","links":{"Self::assume_init":"0:308:2261"},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninit","id":"2:32458:2562","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:2871:3246":{"id":"2:2871:3246","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:145:2355":{"id":"0:145:2355","crate_id":0,"name":"consume","span":{"filename":"src/io/async_buf_read.rs","begin":[114,4],"end":[116,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["amt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:296:2483":{"id":"0:296:2483","crate_id":0,"name":"poll_flush","span":{"filename":"src/io/async_write.rs","begin":[401,4],"end":[403,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14217:2125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50476:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:277:2554":{"id":"0:277:2554","crate_id":0,"name":"is_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[307,4],"end":[309,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:269:2476":{"id":"0:269:2476","crate_id":0,"name":"poll_write","span":{"filename":"src/io/async_write.rs","begin":[260,4],"end":[267,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14217:2125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50476:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:793:2529":{"id":"0:793:2529","crate_id":0,"name":"poll_shutdown","span":{"filename":"src/io/async_write.rs","begin":[218,4],"end":[218,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14217:2125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50476:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:783:2399":{"id":"0:783:2399","crate_id":0,"name":"poll_read","span":{"filename":"src/io/async_read.rs","begin":[73,4],"end":[73,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14217:2125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:308:2261","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50476:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13668:15759":{"id":"2:13668:15759","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:15989:3177","self::pattern":"2:13202:4919"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47617:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:4920","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3364:3299":{"id":"2:3364:3299","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3365:181","2:3366:913"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3380:3303":{"id":"2:3380:3303","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3382:559"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:342":{"id":"0:342","crate_id":0,"name":null,"span":{"filename":"src/io/mod.rs","begin":[205,18],"end":[205,23]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"std::io::Error","name":"Error","id":"1:4080:127","glob":false}},"2:3577:3318":{"id":"2:3577:3318","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3579:181","2:3580:753"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13571:60893":{"id":"2:13571:60893","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:15995:3182"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23613:4981":{"id":"2:23613:4981","crate_id":2,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23614:1270","2:23615:1269","2:23616:1267","2:23617:1266"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialEq","id":"2:23025:5089","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6707:4618":{"id":"1:6707:4618","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6708:57849","1:6709:9234","1:6710:9235","1:6711:9237","1:6712:9236","1:6713:9238","1:6714:9239","1:6715:9241","1:6716:6674","1:6717:9244","1:6718:9245","1:6719:9246","1:6720:9247","1:6721:9248","1:6722:9249","1:6723:9242","1:6724:9243"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:261":{"id":"0:261","crate_id":0,"name":null,"span":{"filename":"src/io/async_write.rs","begin":[225,0],"end":[257,1]},"visibility":{"restricted":{"parent":"0:227:2258","path":"::io::async_write"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"DerefMut","id":"2:3505:2317","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"2:3310:1915","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"","id":"2:3492:116","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"AsyncWrite","id":"0:248:2259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["poll_write_vectored","is_write_vectored"],"trait":{"name":"AsyncWrite","id":"0:248:2259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"items":["0:263:2476","0:264:2542","0:265:2554","0:266:2483","0:267:2529"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:6105:2295":{"id":"5:6105:2295","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8361:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8361:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6103:61552":{"id":"5:6103:61552","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8361:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8361:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:290:2483":{"id":"0:290:2483","crate_id":0,"name":"poll_flush","span":{"filename":"src/io/async_write.rs","begin":[371,4],"end":[373,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14217:2125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50476:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2921:183":{"id":"2:2921:183","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2923:604","2:2924:907"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:8543:136":{"id":"2:8543:136","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8545:684"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13565":{"id":"2:13565","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12662:1340","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13566:793","2:13567:2545","2:13568:60891","2:13569:60892","2:13571:60893","2:13574:55920","2:13575:60894","2:13576:304","2:13577:2622","2:13578:2757","2:13580:2358","2:13582:56289","2:13584:56290","2:13586:4714","2:13587:60895","2:13588:2406","2:13589:56309","2:13590:5238","2:13591:4948","2:13592:4590","2:13593:33173","2:13594:33163","2:13595:4127","2:13596:60896","2:13597:33158","2:13598:56324","2:13601:56325","2:13604:56326","2:13607:2544","2:13611:4063","2:13615:2287","2:13618:33030","2:13621:56318","2:13624:60897","2:13627:60898","2:13630:56320","2:13633:56322","2:13636:60899","2:13639:60900","2:13642:3257","2:13645:60901","2:13648:60902","2:13651:60903","2:13654:60904","2:13656:60905","2:13658:60906","2:13660:60907","2:13661:60908","2:13662:60909","2:13665:60910","2:13668:15759","2:13671:56327","2:13674:60911","2:13677:60912","2:13680:60913","2:13683:2710","2:13685:5354","2:13686:56209","2:13687:56210","2:13688:56211","2:13689:60914","2:13691:4665","2:13692:60915"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3492:116":{"id":"2:3492:116","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3493:221","2:3494:543"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3247:115":{"id":"2:3247:115","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3248:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:317:2586":{"id":"0:317:2586","crate_id":0,"name":"capacity","span":{"filename":"src/io/read_buf.rs","begin":[56,4],"end":[58,5]},"visibility":"public","docs":"Returns the total capacity of the buffer.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:4002-0:308:2261":{"id":"b:2:4002-0:308:2261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"2:4000:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:308:2261","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:4004:1429"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:447:1331":{"id":"0:447:1331","crate_id":0,"name":"std","span":{"filename":"src/loom/std/mod.rs","begin":[1,0],"end":[108,1]},"visibility":{"restricted":{"parent":"0:446:1850","path":"::loom"}},"docs":null,"links":{},"attrs":["#[cfg(not(all(test, loom)))]","#![allow(unused_imports, dead_code)]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":true}},"2:3406:3309":{"id":"2:3406:3309","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3408:181","2:3409:356"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2926:124":{"id":"2:2926:124","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2921:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:278:2483":{"id":"0:278:2483","crate_id":0,"name":"poll_flush","span":{"filename":"src/io/async_write.rs","begin":[311,4],"end":[313,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14217:2125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50476:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3342:3301":{"id":"2:3342:3301","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3344:181","2:3345:1355"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:169:2255":{"id":"0:169:2255","crate_id":0,"name":"AsyncRead","span":{"filename":"src/io/async_read.rs","begin":[43,0],"end":[58,1]},"visibility":"public","docs":"Reads bytes from a source.\n\nThis trait is analogous to the [`std::io::Read`] trait, but integrates with\nthe asynchronous task system. In particular, the [`poll_read`] method,\nunlike [`Read::read`], will automatically queue the current task for wakeup\nand return if data is not yet available, rather than blocking the calling\nthread.\n\nSpecifically, this means that the `poll_read` function will return one of\nthe following:\n\n* `Poll::Ready(Ok(()))` means that data was immediately read and placed into\n  the output buffer. The amount of data read can be determined by the\n  increase in the length of the slice returned by `ReadBuf::filled`. If the\n  difference is 0, EOF has been reached.\n\n* `Poll::Pending` means that no data was read into the buffer\n  provided. The I/O object is not currently readable but may become readable\n  in the future. Most importantly, **the current future's task is scheduled\n  to get unparked when the object is readable**. This means that like\n  `Future::poll` you'll receive a notification when the I/O object is\n  readable again.\n\n* `Poll::Ready(Err(e))` for other errors are standard I/O errors coming from the\n  underlying object.\n\nThis trait importantly means that the `read` method only works in the\ncontext of a future's task. The object may panic if used outside of a task.\n\nUtilities for working with `AsyncRead` values are provided by\n[`AsyncReadExt`].\n\n[`poll_read`]: AsyncRead::poll_read\n[`std::io::Read`]: std::io::Read\n[`Read::read`]: std::io::Read::read\n[`AsyncReadExt`]: crate::io::AsyncReadExt","links":{"std::io::Read":"1:4666:3343","std::io::Read::read":"1:4666:3343","AsyncRead::poll_read":"0:169:2255"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:170:2399"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:172","0:174","0:176","0:179","0:181"]}},"2:10688:146":{"id":"2:10688:146","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10689:652","2:10690:2559","2:10691:4235","2:10692:4236","2:10693:4237","2:10694:4238","2:10695:4239","2:10696:4240","2:10697:4241","2:10698:4242","2:10699:4243","2:10700:4244","2:10701:4245","2:10702:4246","2:10703:4247","2:10704:1533"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13651:60903":{"id":"2:13651:60903","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13202:4919","str::match_indices":"1:15995:3182","`DoubleEndedIterator`":"2:8591:120","prim@char":"1:15989:3177"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49748:5212","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:4920","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13212:4920","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13227:4923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:208:2257":{"id":"0:208:2257","crate_id":0,"name":"AsyncSeek","span":{"filename":"src/io/async_seek.rs","begin":[18,0],"end":[47,1]},"visibility":"public","docs":"Seek bytes asynchronously.\n\nThis trait is analogous to the [`std::io::Seek`] trait, but integrates\nwith the asynchronous task system. In particular, the `start_seek`\nmethod, unlike [`Seek::seek`], will not block the calling thread.\n\nUtilities for working with `AsyncSeek` values are provided by\n[`AsyncSeekExt`].\n\n[`std::io::Seek`]: std::io::Seek\n[`Seek::seek`]: std::io::Seek::seek()\n[`AsyncSeekExt`]: crate::io::AsyncSeekExt","links":{"std::io::Seek":"1:4741:2440","std::io::Seek::seek()":"1:4741:2440"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:209:2430","0:210:2438"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:212","0:214","0:216","0:220"]}},"0:315:920":{"id":"0:315:920","crate_id":0,"name":"new","span":{"filename":"src/io/read_buf.rs","begin":[32,4],"end":[40,5]},"visibility":"public","docs":"Creates a new `ReadBuf` from a fully initialized buffer.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:308:2261","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3717:3322":{"id":"2:3717:3322","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"2:3648:3321","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13627:60898":{"id":"2:13627:60898","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"prim@char":"1:15989:3177","self::pattern":"2:13202:4919","str::split_terminator":"1:15995:3182","str::split":"1:15995:3182"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49648:5208","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:4920","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13212:4920","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13227:4923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13688:56211":{"id":"2:13688:56211","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:790:2542":{"id":"0:790:2542","crate_id":0,"name":"poll_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[218,4],"end":[218,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14217:2125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:11103:2441","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50476:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6088:61550":{"id":"5:6088:61550","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8361:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8361:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:4920","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:775:1894":{"id":"0:775:1894","crate_id":0,"name":"stream","span":{"filename":"src/lib.rs","begin":[495,0],"end":[495,14]},"visibility":"public","docs":"Due to the `Stream` trait's inclusion in `std` landing later than Tokio's 1.0\nrelease, most of the Tokio stream utilities have been moved into the [`tokio-stream`]\ncrate.\n\n# Why was `Stream` not included in Tokio 1.0?\n\nOriginally, we had planned to ship Tokio 1.0 with a stable `Stream` type\nbut unfortunately the [RFC] had not been merged in time for `Stream` to\nreach `std` on a stable compiler in time for the 1.0 release of Tokio. For\nthis reason, the team has decided to move all `Stream` based utilities to\nthe [`tokio-stream`] crate. While this is not ideal, once `Stream` has made\nit into the standard library and the MSRV period has passed, we will implement\nstream for our different types.\n\nWhile this may seem unfortunate, not all is lost as you can get much of the\n`Stream` support with `async/await` and `while let` loops. It is also possible\nto create a `impl Stream` from `async fn` using the [`async-stream`] crate.\n\n[`tokio-stream`]: https://docs.rs/tokio-stream\n[`async-stream`]: https://docs.rs/async-stream\n[RFC]: https://github.com/rust-lang/rfcs/pull/2996\n\n# Example\n\nConvert a [`sync::mpsc::Receiver`] to an `impl Stream`.\n\n```rust,no_run\nuse tokio::sync::mpsc;\n\nlet (tx, mut rx) = mpsc::channel::<usize>(16);\n\nlet stream = async_stream::stream! {\n    while let Some(item) = rx.recv().await {\n        yield item;\n    }\n};\n```","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":false}},"a:2:3281:220-0:308:2261":{"id":"a:2:3281:220-0:308:2261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"2:3281:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:308:2261","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:328:2626":{"id":"0:328:2626","crate_id":0,"name":"clear","span":{"filename":"src/io/read_buf.rs","begin":[187,4],"end":[189,5]},"visibility":"public","docs":"Clears the buffer, resetting the filled region to empty.\n\nThe number of initialized bytes is not changed, and the contents of the buffer are not modified.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10678:142":{"id":"2:10678:142","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10679:715","2:10681:4234"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:326:2617":{"id":"0:326:2617","crate_id":0,"name":"initialize_unfilled_to","span":{"filename":"src/io/read_buf.rs","begin":[156,4],"end":[175,5]},"visibility":"public","docs":"Returns a mutable reference to the first `n` bytes of the unfilled part of the buffer, ensuring it is\nfully initialized.\n\n# Panics\n\nPanics if `self.remaining()` is less than `n`.","links":{},"attrs":["#[inline]","#[track_caller]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:443":{"id":"0:443","crate_id":0,"name":null,"span":{"filename":"src/net/mod.rs","begin":[28,0],"end":[28,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"addr::ToSocketAddrs","name":"ToSocketAddrs","id":"0:381:2665","glob":false}},"1:6883:4639":{"id":"1:6883:4639","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6884:56133"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13568:60891":{"id":"2:13568:60891","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:4004:1429":{"id":"2:4004:1429","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:46145:4659","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13597:33158":{"id":"2:13597:33158","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:49872:5219","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3734:137":{"id":"2:3734:137","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3736:687"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"2:3729:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:329:2630":{"id":"0:329:2630","crate_id":0,"name":"advance","span":{"filename":"src/io/read_buf.rs","begin":[200,4],"end":[203,5]},"visibility":"public","docs":"Advances the size of the filled region of the buffer.\n\nThe number of initialized bytes is not changed.\n\n# Panics\n\nPanics if the filled region of the buffer would become larger than the initialized region.","links":{},"attrs":["#[inline]","#[track_caller]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13624:60897":{"id":"2:13624:60897","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"str::rsplit_terminator":"1:15995:3182","prim@char":"1:15989:3177","`DoubleEndedIterator`":"2:8591:120","self::pattern":"2:13202:4919","str::split":"1:15995:3182"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49630:5207","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:4920","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:396":{"id":"0:396","crate_id":0,"name":null,"span":{"filename":"src/net/addr.rs","begin":[64,0],"end":[64,38]},"visibility":{"restricted":{"parent":"0:355:2663","path":"::net::addr"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ToSocketAddrs","id":"0:381:2665","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SocketAddrV4","id":"1:11195:2683","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:384":{"id":"0:384","crate_id":0,"name":null,"span":{"filename":"src/net/addr.rs","begin":[34,0],"end":[34,55]},"visibility":{"restricted":{"parent":"0:355:2663","path":"::net::addr"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ToSocketAddrs","id":"0:381:2665","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ToSocketAddrs","id":"0:381:2665","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13590:5238":{"id":"2:13590:5238","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15989:3177"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49550:5202","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:297:2529":{"id":"0:297:2529","crate_id":0,"name":"poll_shutdown","span":{"filename":"src/io/async_write.rs","begin":[405,4],"end":[407,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14217:2125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50476:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5811:4621":{"id":"1:5811:4621","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5812:57816"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10587:4630","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:255:2554":{"id":"0:255:2554","crate_id":0,"name":"is_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[180,4],"end":[182,5]},"visibility":"default","docs":"Determines if this writer has an efficient [`poll_write_vectored`]\nimplementation.\n\nIf a writer does not override the default [`poll_write_vectored`]\nimplementation, code using it may want to avoid the method all together\nand coalesce writes into a single buffer for higher performance.\n\nThe default implementation returns `false`.\n\n[`poll_write_vectored`]: AsyncWrite::poll_write_vectored","links":{"AsyncWrite::poll_write_vectored":"0:248:2259"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3175:135":{"id":"2:3175:135","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3177:681"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:283:2554":{"id":"0:283:2554","crate_id":0,"name":"is_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[337,4],"end":[339,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13660:60907":{"id":"2:13660:60907","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2869-0:308:2261":{"id":"b:2:2869-0:308:2261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"2:2863:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:308:2261","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2871:3246"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:8748:157":{"id":"2:8748:157","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8749:2717","2:8750:922","2:8751:4067","2:8754:2722","2:8755:495","2:8757:4068","2:8760:4069","2:8761:4070","2:8762:4071","2:8763:4072","2:8765:4073","2:8767:4074","2:8768:4075","2:8770:841","2:8773:4076","2:8780:4077","2:8782:4078","2:8785:4079","2:8786:4080","2:8787:4081","2:8789:4082","2:8791:4083","2:8794:1308","2:8795:2593","2:8796:4084","2:8800:4085","2:8803:4086","2:8804:4087","2:8805:4088","2:8807:4089","2:8808:3632","2:8810:4090","2:8813:4091","2:8815:4092","2:8825:4093","2:8840:4094","2:8842:4095","2:8846:4096","2:8855:4097","2:8858:4098","2:8860:4099","2:8863:276","2:8870:294","2:8877:2544","2:8884:4100","2:8893:4101","2:8903:1014","2:8910:4102","2:8917:2595","2:8918:2402","2:8919:4103","2:8931:4104","2:8938:4105","2:8950:4106","2:8957:4107","2:8958:4108","2:8963:4109","2:8966:4110","2:8969:4111","2:8970:4112","2:8972:4113","2:8974:4114","2:8976:415","2:8979:4115","2:8982:997","2:8985:4116","2:8988:604","2:8991:4117","2:8994:907","2:8996:826","2:8998:792","2:9000:713","2:9002:696","2:9004:4118","2:9005:4119","2:9013:4120"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:295:2554":{"id":"0:295:2554","crate_id":0,"name":"is_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[397,4],"end":[399,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:313":{"id":"0:313","crate_id":0,"name":null,"span":{"filename":"src/io/read_buf.rs","begin":[29,0],"end":[271,1]},"visibility":{"restricted":{"parent":"0:301:2260","path":"::io::read_buf"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:308:2261","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:315:920","0:316:2584","0:317:2586","0:318:2578","0:319:2590","0:320:2593","0:321:2579","0:322:2600","0:323:2611","0:324:2596","0:325:2616","0:326:2617","0:327:2403","0:328:2626","0:329:2630","0:330:2633","0:331:327","0:332:2407"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:781:2345":{"id":"0:781:2345","crate_id":0,"name":"poll_fill_buf","span":{"filename":"src/io/async_buf_read.rs","begin":[82,4],"end":[82,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14217:2125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50476:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8506:4960":{"id":"2:8506:4960","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8508:4113"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:381:2665":{"id":"0:381:2665","crate_id":0,"name":"ToSocketAddrs","span":{"filename":"src/net/addr.rs","begin":[19,0],"end":[19,53]},"visibility":"public","docs":"Converts or resolves without blocking to one or more `SocketAddr` values.\n\n# DNS\n\nImplementations of `ToSocketAddrs` for string types require a DNS lookup.\n\n# Calling\n\nCurrently, this trait is only used as an argument to Tokio functions that\nneed to reference a target socket address. To perform a `SocketAddr`\nconversion directly, use [`lookup_host()`](super::lookup_host()).\n\nThis trait is sealed and is intended to be opaque. The details of the trait\nwill change. Stabilization is pending enhancements to the Rust language.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"sealed::ToSocketAddrsPriv","id":"0:437:2695","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:384","0:391","0:396","0:401","0:406","0:411","0:416","0:421"]}},"1:6812:4636":{"id":"1:6812:4636","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6813:7902"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10587:4630","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6107:57370":{"id":"5:6107:57370","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:15995:3182"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8361:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:227:2258":{"id":"0:227:2258","crate_id":0,"name":"async_write","span":{"filename":"src/io/async_write.rs","begin":[1,0],"end":[408,1]},"visibility":{"restricted":{"parent":"0:106:1848","path":"::io"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:248:2259"],"is_stripped":true}},"0:66":{"id":"0:66","crate_id":0,"name":null,"span":{"filename":"src/macros/support.rs","begin":[9,0],"end":[9,24]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"std::task::Poll","name":"Poll","id":"2:50476:190","glob":false}},"0:281:2476":{"id":"0:281:2476","crate_id":0,"name":"poll_write","span":{"filename":"src/io/async_write.rs","begin":[321,4],"end":[327,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14217:2125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50476:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13680:60913":{"id":"2:13680:60913","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:15989:3177","self::pattern":"2:13202:4919"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:4920","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13212:4920","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13227:4923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:441:2698":{"id":"0:441:2698","crate_id":0,"name":"Internal","span":{"filename":"src/net/addr.rs","begin":[270,4],"end":[270,24]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(missing_debug_implementations)]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"unit","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":[],"impls":[]}},"0:267:2529":{"id":"0:267:2529","crate_id":0,"name":"poll_shutdown","span":{"filename":"src/io/async_write.rs","begin":[254,4],"end":[256,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14217:2125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50476:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4666:3343":{"id":"1:4666:3343","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4667:3720","1:4668:4585","1:4670:4586","1:4671:4587","1:4672:3344","1:4673:4588","1:4674:2260","1:4676:4589","1:4677:4089","1:4678:4590","1:4679:4072","1:4681:2593"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6084:61549":{"id":"5:6084:61549","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2360","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:4192","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2360","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:4192","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9407:3616":{"id":"2:9407:3616","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:623:1360":{"id":"0:623:1360","crate_id":0,"name":"sync","span":{"filename":"src/loom/std/mod.rs","begin":[53,0],"end":[53,19]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":true}},"1:6579:4672":{"id":"1:6579:4672","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6580:57842","1:6581:57843"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:250:2483":{"id":"0:250:2483","crate_id":0,"name":"poll_flush","span":{"filename":"src/io/async_write.rs","begin":[73,4],"end":[73,93]},"visibility":"default","docs":"Attempts to flush the object, ensuring that any buffered data reach\ntheir destination.\n\nOn success, returns `Poll::Ready(Ok(()))`.\n\nIf flushing cannot immediately complete, this method returns\n`Poll::Pending` and arranges for the current task (via\n`cx.waker()`) to receive a notification when the object can make\nprogress towards flushing.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14217:2125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50476:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47742:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"io::Error","id":"1:4080:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:220":{"id":"0:220","crate_id":0,"name":null,"span":{"filename":"src/io/async_seek.rs","begin":[83,0],"end":[90,1]},"visibility":{"restricted":{"parent":"0:187:2256","path":"::io::async_seek"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3166:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"2:3310:1915","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsyncSeek","id":"0:208:2257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"io::Cursor","id":"1:10900:2364","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:222:2430","0:223:2438"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:131":{"id":"0:131","crate_id":0,"name":null,"span":{"filename":"src/io/async_buf_read.rs","begin":[77,0],"end":[79,1]},"visibility":{"restricted":{"parent":"0:107:2252","path":"::io::async_buf_read"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsyncBufRead","id":"0:127:2253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"2:3310:1915","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsyncBufRead","id":"0:127:2253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2360","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:779:2345","0:780:2355"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:5669:4646":{"id":"1:5669:4646","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5670:55957","1:5671:5396"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10587:4630","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13598:56324":{"id":"2:13598:56324","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:13202:4919","prim@char":"1:15989:3177"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:4920","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23285:4980":{"id":"2:23285:4980","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdElement","id":"2:23922:4976","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23276:4630","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13587:60895":{"id":"2:13587:60895","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"crate::ops::IndexMut":"2:3581:3319","str::slice_unchecked":"1:15995:3182","`str`":"1:15995:3182"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:8547:151":{"id":"2:8547:151","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8548:2717","2:8549:2700","2:8550:768"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:140:2345":{"id":"0:140:2345","crate_id":0,"name":"poll_fill_buf","span":{"filename":"src/io/async_buf_read.rs","begin":[100,4],"end":[102,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14217:2125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50476:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10457:189":{"id":"2:10457:189","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10458:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:146":{"id":"0:146","crate_id":0,"name":null,"span":{"filename":"src/io/mod.rs","begin":[188,0],"end":[188,43]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::async_buf_read::AsyncBufRead","name":"AsyncBufRead","id":"0:127:2253","glob":false}},"1:4741:2440":{"id":"1:4741:2440","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4742:2290","1:4743:4139","1:4744:4140","1:4745:4141"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3368:3302":{"id":"2:3368:3302","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3370:266"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5807:4620":{"id":"1:5807:4620","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5808:57955"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:321:2579":{"id":"0:321:2579","crate_id":0,"name":"initialized","span":{"filename":"src/io/read_buf.rs","begin":[90,4],"end":[95,5]},"visibility":"public","docs":"Returns a shared reference to the initialized portion of the buffer.\n\nThis includes the filled portion.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14390:4191":{"id":"2:14390:4191","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14391:58567","2:14392:58568","2:14393:58569","2:14394:58570","2:14395:58571","2:14396:58572","2:14397:4089"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10447:119":{"id":"2:10447:119","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10448:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3104:4904":{"id":"2:3104:4904","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:3103:4630","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3440:3317":{"id":"2:3440:3317","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3442:1237"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3648:3321":{"id":"2:3648:3321","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3650:59607","2:3651:59608","2:3652:56324"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:294:2542":{"id":"0:294:2542","crate_id":0,"name":"poll_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[389,4],"end":[395,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14217:2125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:11103:2441","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50476:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:218:2430":{"id":"0:218:2430","crate_id":0,"name":"start_seek","span":{"filename":"src/io/async_seek.rs","begin":[74,4],"end":[76,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["pos",{"kind":"resolved_path","inner":{"name":"SeekFrom","id":"1:11115:2263","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:127:2253":{"id":"0:127:2253","crate_id":0,"name":"AsyncBufRead","span":{"filename":"src/io/async_buf_read.rs","begin":[23,0],"end":[63,1]},"visibility":"public","docs":"Reads bytes asynchronously.\n\nThis trait is analogous to [`std::io::BufRead`], but integrates with\nthe asynchronous task system. In particular, the [`poll_fill_buf`] method,\nunlike [`BufRead::fill_buf`], will automatically queue the current task for wakeup\nand return if data is not yet available, rather than blocking the calling\nthread.\n\nUtilities for working with `AsyncBufRead` values are provided by\n[`AsyncBufReadExt`].\n\n[`std::io::BufRead`]: std::io::BufRead\n[`poll_fill_buf`]: AsyncBufRead::poll_fill_buf\n[`BufRead::fill_buf`]: std::io::BufRead::fill_buf\n[`AsyncBufReadExt`]: crate::io::AsyncBufReadExt","links":{"AsyncBufRead::poll_fill_buf":"0:127:2253","std::io::BufRead::fill_buf":"1:4748:2365","std::io::BufRead":"1:4748:2365"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:128:2345","0:129:2355"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"AsyncRead","id":"0:169:2255","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:131","0:133","0:135","0:139","0:142"]}},"a:2:3269:211-0:308:2261":{"id":"a:2:3269:211-0:308:2261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"2:3269:211","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:308:2261","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"5:6085:3350":{"id":"5:6085:3350","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8361:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8361:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:4920","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6091:61551":{"id":"5:6091:61551","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8361:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8361:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3274:2359":{"id":"2:3274:2359","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3417:3312":{"id":"2:3417:3312","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3419:181","2:3420:1236"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:137:2345":{"id":"0:137:2345","crate_id":0,"name":"poll_fill_buf","span":{"filename":"src/io/async_buf_read.rs","begin":[90,4],"end":[92,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14217:2125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50476:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:794:2476":{"id":"0:794:2476","crate_id":0,"name":"poll_write","span":{"filename":"src/io/async_write.rs","begin":[222,4],"end":[222,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14217:2125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50476:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:783:222":{"id":"5:783:222","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:784:4122","5:785:2712","5:786:4123"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23618:17242":{"id":"2:23618:17242","crate_id":2,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23619:59724","2:23620:59725","2:23621:59726"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialOrd","id":"2:23613:4981","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:224":{"id":"0:224","crate_id":0,"name":null,"span":{"filename":"src/io/mod.rs","begin":[194,0],"end":[194,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::async_seek::AsyncSeek","name":"AsyncSeek","id":"0:208:2257","glob":false}},"0:282:2542":{"id":"0:282:2542","crate_id":0,"name":"poll_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[329,4],"end":[335,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14217:2125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:11103:2441","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50476:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13589:56309":{"id":"2:13589:56309","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:15995:3182"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:421":{"id":"0:421","crate_id":0,"name":null,"span":{"filename":"src/net/addr.rs","begin":[132,0],"end":[132,39]},"visibility":{"restricted":{"parent":"0:355:2663","path":"::net::addr"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ToSocketAddrs","id":"0:381:2665","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"SocketAddr","id":"1:11172:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:10461:3555":{"id":"2:10461:3555","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10462:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3211:127":{"id":"2:3211:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:3182:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"0:252:2542":{"id":"0:252:2542","crate_id":0,"name":"poll_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[158,4],"end":[168,5]},"visibility":"default","docs":"Like [`poll_write`], except that it writes from a slice of buffers.\n\nData is copied from each buffer in order, with the final buffer\nread from possibly being only partially consumed. This method must\nbehave as a call to [`write`] with the buffers concatenated would.\n\nThe default implementation calls [`poll_write`] with either the first nonempty\nbuffer provided, or an empty one if none exists.\n\nOn success, returns `Poll::Ready(Ok(num_bytes_written))`.\n\nIf the object is not ready for writing, the method returns\n`Poll::Pending` and arranges for the current task (via\n`cx.waker()`) to receive a notification when the object becomes\nwritable or is closed.\n\n# Note\n\nThis should be implemented as a single \"atomic\" write action. If any\ndata has been partially written, it is wrong to return an error or\npending.\n\n[`poll_write`]: AsyncWrite::poll_write","links":{"AsyncWrite::poll_write":"0:248:2259","`write`":"2:14:2559"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14217:2125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:11103:2441","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50476:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47742:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}},{"type":{"kind":"resolved_path","inner":{"name":"io::Error","id":"1:4080:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6881:4629":{"id":"1:6881:4629","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6882:59072"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:779:2345":{"id":"0:779:2345","crate_id":0,"name":"poll_fill_buf","span":{"filename":"src/io/async_buf_read.rs","begin":[78,4],"end":[78,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14217:2125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50476:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3269:211":{"id":"2:3269:211","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:248:2259":{"id":"0:248:2259","crate_id":0,"name":"AsyncWrite","span":{"filename":"src/io/async_write.rs","begin":[45,0],"end":[183,1]},"visibility":"public","docs":"Writes bytes asynchronously.\n\nThe trait inherits from [`std::io::Write`] and indicates that an I/O object is\n**nonblocking**. All non-blocking I/O objects must return an error when\nbytes cannot be written instead of blocking the current thread.\n\nSpecifically, this means that the [`poll_write`] function will return one of\nthe following:\n\n* `Poll::Ready(Ok(n))` means that `n` bytes of data was immediately\n  written.\n\n* `Poll::Pending` means that no data was written from the buffer\n  provided. The I/O object is not currently writable but may become writable\n  in the future. Most importantly, **the current future's task is scheduled\n  to get unparked when the object is writable**. This means that like\n  `Future::poll` you'll receive a notification when the I/O object is\n  writable again.\n\n* `Poll::Ready(Err(e))` for other errors are standard I/O errors coming from the\n  underlying object.\n\nThis trait importantly means that the [`write`][stdwrite] method only works in\nthe context of a future's task. The object may panic if used outside of a task.\n\nNote that this trait also represents that the  [`Write::flush`][stdflush] method\nworks very similarly to the `write` method, notably that `Ok(())` means that the\nwriter has successfully been flushed, a \"would block\" error means that the\ncurrent task is ready to receive a notification when flushing can make more\nprogress, and otherwise normal errors can happen as well.\n\nUtilities for working with `AsyncWrite` values are provided by\n[`AsyncWriteExt`].\n\n[`std::io::Write`]: std::io::Write\n[`poll_write`]: AsyncWrite::poll_write()\n[stdwrite]: std::io::Write::write()\n[stdflush]: std::io::Write::flush()\n[`AsyncWriteExt`]: crate::io::AsyncWriteExt","links":{"std::io::Write":"1:4723:2557","AsyncWrite::poll_write()":"0:248:2259","std::io::Write::flush()":"1:4723:2557","std::io::Write::write()":"1:4723:2557"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:249:2476","0:250:2483","0:251:2529","0:252:2542","0:255:2554"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:257","0:259","0:261","0:268","0:274","0:280","0:286","0:292"]}},"5:5837:5361":{"id":"5:5837:5361","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5839:181","5:5840:2019"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:406":{"id":"0:406","crate_id":0,"name":null,"span":{"filename":"src/net/addr.rs","begin":[90,0],"end":[90,39]},"visibility":{"restricted":{"parent":"0:355:2663","path":"::net::addr"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ToSocketAddrs","id":"0:381:2665","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"IpAddr","id":"1:11221:2679","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"kind":"primitive","inner":"u16"}]},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:170:2399":{"id":"0:170:2399","crate_id":0,"name":"poll_read","span":{"filename":"src/io/async_read.rs","begin":[53,4],"end":[57,30]},"visibility":"default","docs":"Attempts to read from the `AsyncRead` into `buf`.\n\nOn success, returns `Poll::Ready(Ok(()))` and places data in the\nunfilled portion of `buf`. If no data was read (`buf.filled().len()` is\nunchanged), it implies that EOF has been reached.\n\nIf no data is available for reading, the method returns `Poll::Pending`\nand arranges for the current task (via `cx.waker()`) to receive a\nnotification when the object becomes readable or is closed.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14217:2125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:308:2261","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50476:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:288:2542":{"id":"0:288:2542","crate_id":0,"name":"poll_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[359,4],"end":[365,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14217:2125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:11103:2441","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50476:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5833:5363":{"id":"5:5833:5363","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5835:181","5:5836:432"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3358:3300":{"id":"2:3358:3300","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3360:181","2:3361:1102"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13580:2358":{"id":"2:13580:2358","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47617:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47617:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11082:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11082:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3212:1417":{"id":"2:3212:1417","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47742:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"2:3182:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5757:4617":{"id":"1:5757:4617","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5758:6632","1:5759:7908"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22899:5088":{"id":"2:22899:5088","crate_id":2,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22900:4979","2:22901:60049","2:22902:60503","2:22903:60504","2:22904:60505","2:22905:43677","2:22906:60506","2:22907:60507","2:22908:60508","2:22909:60509","2:22910:60510","2:22911:60511","2:22912:60512","2:22913:60513","2:22914:60514","2:22915:60515","2:22916:60106","2:22917:60516","2:22918:59725","2:22919:59724","2:22920:59726","2:22921:60050","2:22922:60051","2:22923:60052","2:22924:60053"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23001:4630","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:3:1845":{"id":"0:3:1845","crate_id":0,"name":"macros","span":{"filename":"src/macros/mod.rs","begin":[1,0],"end":[40,16]},"visibility":"public","docs":null,"links":{},"attrs":["#[macro_use]","#[doc(hidden)]","#![allow(unused_macros)]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":true}},"2:3172:149":{"id":"2:3172:149","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3174:4057"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:338":{"id":"0:338","crate_id":0,"name":null,"span":{"filename":"src/io/mod.rs","begin":[200,0],"end":[200,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::read_buf::ReadBuf","name":"ReadBuf","id":"0:308:2261","glob":false}},"0:780:2355":{"id":"0:780:2355","crate_id":0,"name":"consume","span":{"filename":"src/io/async_buf_read.rs","begin":[78,4],"end":[78,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["amt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2967:184":{"id":"2:2967:184","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2969:997","2:2970:826","2:2971:792","2:2972:713","2:2973:696"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2921:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6809:4650":{"id":"1:6809:4650","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6810:9349","1:6811:56070"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10587:4630","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13636:60899":{"id":"2:13636:60899","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47617:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:4920","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13566:793":{"id":"2:13566:793","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15989:3177"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:128:2345":{"id":"0:128:2345","crate_id":0,"name":"poll_fill_buf","span":{"filename":"src/io/async_buf_read.rs","begin":[45,4],"end":[45,92]},"visibility":"default","docs":"Attempts to return the contents of the internal buffer, filling it with more data\nfrom the inner reader if it is empty.\n\nOn success, returns `Poll::Ready(Ok(buf))`.\n\nIf no data is available for reading, the method returns\n`Poll::Pending` and arranges for the current task (via\n`cx.waker().wake_by_ref()`) to receive a notification when the object becomes\nreadable or is closed.\n\nThis function is a lower-level call. It needs to be paired with the\n[`consume`] method to function properly. When calling this\nmethod, none of the contents will be \"read\" in the sense that later\ncalling [`poll_read`] may return the same contents. As such, [`consume`] must\nbe called with the number of bytes that are consumed from this buffer to\nensure that the bytes are never returned twice.\n\nAn empty buffer returned indicates that the stream has reached EOF.\n\n[`poll_read`]: AsyncRead::poll_read\n[`consume`]: AsyncBufRead::consume","links":{"AsyncRead::poll_read":"0:169:2255","AsyncBufRead::consume":"0:127:2253"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14217:2125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50476:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"1:6885:4640":{"id":"1:6885:4640","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6886:58246"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:210:2438":{"id":"0:210:2438","crate_id":0,"name":"poll_complete","span":{"filename":"src/io/async_seek.rs","begin":[46,4],"end":[46,90]},"visibility":"default","docs":"Waits for a seek operation to complete.\n\nIf the seek operation completed successfully,\nthis method returns the new position from the start of the stream.\nThat position can be used later with [`SeekFrom::Start`]. Repeatedly\ncalling this function without calling `start_seek` might return the\nsame result.\n\n# Errors\n\nSeeking to a negative offset is considered an error.","links":{"`SeekFrom::Start`":"1:11115:2263"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14217:2125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50476:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:13642:3257":{"id":"2:13642:3257","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"str::matches":"1:15995:3182","prim@char":"1:15989:3177","self::pattern":"2:13202:4919","`DoubleEndedIterator`":"2:8591:120"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49784:5214","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:4920","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:293:2476":{"id":"0:293:2476","crate_id":0,"name":"poll_write","span":{"filename":"src/io/async_write.rs","begin":[381,4],"end":[387,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14217:2125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50476:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:59:2021":{"id":"0:59:2021","crate_id":0,"name":"support","span":{"filename":"src/macros/support.rs","begin":[1,0],"end":[9,24]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(hidden)]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:60","0:63","0:66"],"is_stripped":true}},"0:333":{"id":"0:333","crate_id":0,"name":null,"span":{"filename":"src/io/read_buf.rs","begin":[273,0],"end":[281,1]},"visibility":{"restricted":{"parent":"0:301:2260","path":"::io::read_buf"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"2:10440:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:308:2261","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":["0:334:660"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:330:2633":{"id":"0:330:2633","crate_id":0,"name":"set_filled","span":{"filename":"src/io/read_buf.rs","begin":[217,4],"end":[223,5]},"visibility":"public","docs":"Sets the size of the filled region of the buffer.\n\nThe number of initialized bytes is not changed.\n\nNote that this can be used to *shrink* the filled region of the buffer in addition to growing it (for\nexample, by a `AsyncRead` implementation that compresses data in-place).\n\n# Panics\n\nPanics if the filled region of the buffer would become larger than the initialized region.","links":{},"attrs":["#[inline]","#[track_caller]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13654:60904":{"id":"2:13654:60904","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5675:4644":{"id":"1:5675:4644","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5676:6070","1:5677:55920"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10587:4630","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:264:2542":{"id":"0:264:2542","crate_id":0,"name":"poll_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[238,4],"end":[244,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14217:2125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:11103:2441","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50476:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6083":{"id":"5:6083","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5903:1340","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6084:61549","5:6085:3350","5:6088:61550","5:6091:61551","5:6103:61552","5:6104:61553","5:6105:2295","5:6106:57369","5:6107:57370"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:69:693":{"id":"0:69:693","crate_id":0,"name":"future","span":{"filename":"src/future/mod.rs","begin":[1,0],"end":[30,1]},"visibility":"crate","docs":"Asynchronous values.","links":{},"attrs":["#![allow(unreachable_pub)]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:103"],"is_stripped":true}},"2:3581:3319":{"id":"2:3581:3319","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3583:754"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Index","id":"2:3577:3318","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:318:2578":{"id":"0:318:2578","crate_id":0,"name":"filled","span":{"filename":"src/io/read_buf.rs","begin":[62,4],"end":[67,5]},"visibility":"public","docs":"Returns a shared reference to the filled portion of the buffer.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:181":{"id":"0:181","crate_id":0,"name":null,"span":{"filename":"src/io/async_read.rs","begin":[108,0],"end":[131,1]},"visibility":{"restricted":{"parent":"0:149:2254","path":"::io::async_read"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3166:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"2:3310:1915","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsyncRead","id":"0:169:2255","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"io::Cursor","id":"1:10900:2364","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:183:2399"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:9407:3616-0:308:2261":{"id":"a:2:9407:3616-0:308:2261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"2:9407:3616","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:308:2261","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"2:22952:5100":{"id":"2:22952:5100","crate_id":2,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22953:4979","2:22954:60049","2:22955:1227","2:22956:1228","2:22957:43677","2:22958:60102","2:22959:60103","2:22960:60104","2:22961:60105","2:22962:60106","2:22963:60050","2:22964:60051","2:22965:60052","2:22966:60053","2:22967:60054","2:22968:60055","2:22969:60056"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23001:4630","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13621:56318":{"id":"2:13621:56318","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"str::split":"1:15995:3182","self::pattern":"2:13202:4919","prim@char":"1:15989:3177","`DoubleEndedIterator`":"2:8591:120"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49598:5179","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:4920","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13212:4920","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13227:4923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3396:3307":{"id":"2:3396:3307","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3398:181","2:3399:351"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3182:227":{"id":"2:3182:227","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3184:127","2:3185:1416"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3423:3313":{"id":"2:3423:3313","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3425:352"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3389:3310":{"id":"2:3389:3310","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3390:181","2:3391:952"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6481:4633":{"id":"1:6481:4633","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6482:56173","1:6483:1860","1:6484:56174","1:6485:56175","1:6486:56176","1:6487:56177"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10587:4630","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3729:224":{"id":"2:3729:224","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3730:181","2:3731:3324","2:3732:686","2:3733:369"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FromResidual","id":"2:3734:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"2:3729:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3201:4057":{"id":"2:3201:4057","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3175:135"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:139":{"id":"0:139","crate_id":0,"name":null,"span":{"filename":"src/io/async_buf_read.rs","begin":[99,0],"end":[107,1]},"visibility":{"restricted":{"parent":"0:107:2252","path":"::io::async_buf_read"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsyncBufRead","id":"0:127:2253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"items":["0:140:2345","0:141:2355"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:287:2476":{"id":"0:287:2476","crate_id":0,"name":"poll_write","span":{"filename":"src/io/async_write.rs","begin":[351,4],"end":[357,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14217:2125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50476:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13588:2406":{"id":"2:13588:2406","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:15995:3182"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:285:2529":{"id":"0:285:2529","crate_id":0,"name":"poll_shutdown","span":{"filename":"src/io/async_write.rs","begin":[345,4],"end":[347,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14217:2125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50476:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:327:2403":{"id":"0:327:2403","crate_id":0,"name":"remaining","span":{"filename":"src/io/read_buf.rs","begin":[179,4],"end":[181,5]},"visibility":"public","docs":"Returns the number of bytes at the end of the slice that have not yet been filled.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:292":{"id":"0:292","crate_id":0,"name":null,"span":{"filename":"src/io/async_write.rs","begin":[380,0],"end":[408,1]},"visibility":{"restricted":{"parent":"0:227:2258","path":"::io::async_write"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["poll_write_vectored","is_write_vectored"],"trait":{"name":"AsyncWrite","id":"0:248:2259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"io::Cursor","id":"1:10900:2364","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2360","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:293:2476","0:294:2542","0:295:2554","0:296:2483","0:297:2529"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:798:2529":{"id":"0:798:2529","crate_id":0,"name":"poll_shutdown","span":{"filename":"src/io/async_write.rs","begin":[222,4],"end":[222,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14217:2125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50476:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:60":{"id":"0:60","crate_id":0,"name":null,"span":{"filename":"src/macros/support.rs","begin":[7,0],"end":[7,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"std::future::Future","name":"Future","id":"2:13915:138","glob":false}},"0:785:2430":{"id":"0:785:2430","crate_id":0,"name":"start_seek","span":{"filename":"src/io/async_seek.rs","begin":[62,4],"end":[62,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["pos",{"kind":"resolved_path","inner":{"name":"SeekFrom","id":"1:11115:2263","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3519:130":{"id":"2:3519:130","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3521:376"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3522:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:176":{"id":"0:176","crate_id":0,"name":null,"span":{"filename":"src/io/async_read.rs","begin":[80,0],"end":[92,1]},"visibility":{"restricted":{"parent":"0:149:2254","path":"::io::async_read"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"DerefMut","id":"2:3505:2317","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"2:3310:1915","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"","id":"2:3492:116","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"AsyncRead","id":"0:169:2255","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsyncRead","id":"0:169:2255","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"items":["0:178:2399"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13601:56325":{"id":"2:13601:56325","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:13202:4919","prim@char":"1:15989:3177"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:4920","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13576:304":{"id":"2:13576:304","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:16006:3191","str::as_mut_ptr":"1:15995:3182"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8510:4958":{"id":"2:8510:4958","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8512:4114"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3347:3298":{"id":"2:3347:3298","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3349:181","2:3350:892"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13658:60906":{"id":"2:13658:60906","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13661:60908":{"id":"2:13661:60908","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23025:5089":{"id":"2:23025:5089","crate_id":2,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23026:4979","2:23027:1247","2:23028:1272"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6459:4636":{"id":"1:6459:4636","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6460:4809","1:6461:4810","1:6462:7901","1:6463:58622","1:6465:58626","1:6467:58623","1:6468:58624","1:6470:58625"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10587:4630","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13685:5354":{"id":"2:13685:5354","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13596:60896":{"id":"2:13596:60896","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49844:5216","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:325:2616":{"id":"0:325:2616","crate_id":0,"name":"initialize_unfilled","span":{"filename":"src/io/read_buf.rs","begin":[144,4],"end":[146,5]},"visibility":"public","docs":"Returns a mutable reference to the unfilled part of the buffer, ensuring it is fully initialized.\n\nSince `ReadBuf` tracks the region of the buffer that has been initialized, this is effectively \"free\" after\nthe first use.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:135":{"id":"0:135","crate_id":0,"name":null,"span":{"filename":"src/io/async_buf_read.rs","begin":[85,0],"end":[97,1]},"visibility":{"restricted":{"parent":"0:107:2252","path":"::io::async_buf_read"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"DerefMut","id":"2:3505:2317","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"2:3310:1915","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"","id":"2:3492:116","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"AsyncBufRead","id":"0:127:2253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsyncBufRead","id":"0:127:2253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"items":["0:137:2345","0:138:2355"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:2:3310:1915-0:308:2261":{"id":"a:2:3310:1915-0:308:2261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"2:3310:1915","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:308:2261","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:2863:97":{"id":"2:2863:97","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2865:3246"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"5:6104:61553":{"id":"5:6104:61553","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:432:2360","`String`":"5:8361:216"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2360","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:4192","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8361:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:275:2476":{"id":"0:275:2476","crate_id":0,"name":"poll_write","span":{"filename":"src/io/async_write.rs","begin":[291,4],"end":[297,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14217:2125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50476:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9035:4863":{"id":"2:9035:4863","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Step","id":"2:8071:4864","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13687:56210":{"id":"2:13687:56210","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:279:2529":{"id":"0:279:2529","crate_id":0,"name":"poll_shutdown","span":{"filename":"src/io/async_write.rs","begin":[315,4],"end":[317,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14217:2125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50476:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:286":{"id":"0:286","crate_id":0,"name":null,"span":{"filename":"src/io/async_write.rs","begin":[350,0],"end":[378,1]},"visibility":{"restricted":{"parent":"0:227:2258","path":"::io::async_write"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["poll_write_vectored","is_write_vectored"],"trait":{"name":"AsyncWrite","id":"0:248:2259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"io::Cursor","id":"1:10900:2364","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7780:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:287:2476","0:288:2542","0:289:2554","0:290:2483","0:291:2529"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13232:4918":{"id":"2:13232:4918","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13227:4923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:141:2355":{"id":"0:141:2355","crate_id":0,"name":"consume","span":{"filename":"src/io/async_buf_read.rs","begin":[104,4],"end":[106,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["amt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:178:2399":{"id":"0:178:2399","crate_id":0,"name":"poll_read","span":{"filename":"src/io/async_read.rs","begin":[85,4],"end":[91,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14217:2125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:308:2261","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50476:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:334:660":{"id":"0:334:660","crate_id":0,"name":"fmt","span":{"filename":"src/io/read_buf.rs","begin":[274,4],"end":[280,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10400:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10389:205","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12649:5347":{"id":"2:12649:5347","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12650:2717","2:12651:59575"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8616:3627":{"id":"2:8616:3627","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8617:793","2:8618:2545"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8748:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:3202-0:308:2261":{"id":"b:2:3202-0:308:2261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"2:3175:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:308:2261","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3204:681"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13639:60900":{"id":"2:13639:60900","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47617:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:4920","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13212:4920","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13227:4923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:274":{"id":"0:274","crate_id":0,"name":null,"span":{"filename":"src/io/async_write.rs","begin":[290,0],"end":[318,1]},"visibility":{"restricted":{"parent":"0:227:2258","path":"::io::async_write"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["poll_write_vectored","is_write_vectored"],"trait":{"name":"AsyncWrite","id":"0:248:2259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"io::Cursor","id":"1:10900:2364","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}}],"bindings":[]}}}},"items":["0:275:2476","0:276:2542","0:277:2554","0:278:2483","0:279:2529"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3775:3285":{"id":"2:3775:3285","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13591:4948":{"id":"2:13591:4948","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15989:3177"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49556:5203","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13674:60911":{"id":"2:13674:60911","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:13202:4919","prim@char":"1:15989:3177"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:4920","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13212:4920","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13227:4923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:784:2399":{"id":"0:784:2399","crate_id":0,"name":"poll_read","span":{"filename":"src/io/async_read.rs","begin":[77,4],"end":[77,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14217:2125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:308:2261","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50476:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3277:218":{"id":"2:3277:218","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13689:60914":{"id":"2:13689:60914","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:15989:3177"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:49879:5220","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13569:60892":{"id":"2:13569:60892","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3411:3311":{"id":"2:3411:3311","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3413:181","2:3414:1233"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:212":{"id":"0:212","crate_id":0,"name":null,"span":{"filename":"src/io/async_seek.rs","begin":[61,0],"end":[63,1]},"visibility":{"restricted":{"parent":"0:187:2256","path":"::io::async_seek"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsyncSeek","id":"0:208:2257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"2:3310:1915","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsyncSeek","id":"0:208:2257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2360","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:785:2430","0:786:2438"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:5797:4619":{"id":"1:5797:4619","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5798:55939","1:5799:55940","1:5800:55941","1:5801:55942"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:187:2256":{"id":"0:187:2256","crate_id":0,"name":"async_seek","span":{"filename":"src/io/async_seek.rs","begin":[1,0],"end":[90,1]},"visibility":{"restricted":{"parent":"0:106:1848","path":"::io"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:208:2257"],"is_stripped":true}},"0:354:1849":{"id":"0:354:1849","crate_id":0,"name":"net","span":{"filename":"src/net/mod.rs","begin":[1,0],"end":[52,1]},"visibility":"public","docs":"TCP/UDP/Unix bindings for `tokio`.\n\nThis module contains the TCP/UDP/Unix networking types, similar to the standard\nlibrary, which can be used to implement networking protocols.\n\n# Organization\n\n* [`TcpListener`] and [`TcpStream`] provide functionality for communication over TCP\n* [`UdpSocket`] provides functionality for communication over UDP\n* [`UnixListener`] and [`UnixStream`] provide functionality for communication over a\nUnix Domain Stream Socket **(available on Unix only)**\n* [`UnixDatagram`] provides functionality for communication\nover Unix Domain Datagram Socket **(available on Unix only)**\n\n[`TcpListener`]: TcpListener\n[`TcpStream`]: TcpStream\n[`UdpSocket`]: UdpSocket\n[`UnixListener`]: UnixListener\n[`UnixStream`]: UnixStream\n[`UnixDatagram`]: UnixDatagram","links":{},"attrs":["#![cfg(not(loom))]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:443"],"is_stripped":false}},"0:319:2590":{"id":"0:319:2590","crate_id":0,"name":"filled_mut","span":{"filename":"src/io/read_buf.rs","begin":[71,4],"end":[76,5]},"visibility":"public","docs":"Returns a mutable reference to the filled portion of the buffer.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10455:3557":{"id":"2:10455:3557","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10456:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13630:56320":{"id":"2:13630:56320","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"self::pattern":"2:13202:4919","prim@char":"1:15989:3177","str::rsplitn":"1:15995:3182"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49684:5182","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:4920","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:4783:4383":{"id":"2:4783:4383","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4784:2717","2:4785:60189","2:4786:2722"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13915:138":{"id":"2:13915:138","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13916:181","2:13917:1013"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10723:2743":{"id":"2:10723:2743","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10724:146","2:10725:2748","2:10726:4233"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3337:3296":{"id":"2:3337:3296","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3339:181","2:3340:265"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3522:131":{"id":"2:3522:131","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3524:377"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3525:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"b:2:2872-0:308:2261":{"id":"b:2:2872-0:308:2261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"2:2866:4865","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:308:2261","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:2874:55847"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:280":{"id":"0:280","crate_id":0,"name":null,"span":{"filename":"src/io/async_write.rs","begin":[320,0],"end":[348,1]},"visibility":{"restricted":{"parent":"0:227:2258","path":"::io::async_write"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["poll_write_vectored","is_write_vectored"],"trait":{"name":"AsyncWrite","id":"0:248:2259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"io::Cursor","id":"1:10900:2364","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7780:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}}}}],"bindings":[]}}}},"items":["0:281:2476","0:282:2542","0:283:2554","0:284:2483","0:285:2529"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:291:2529":{"id":"0:291:2529","crate_id":0,"name":"poll_shutdown","span":{"filename":"src/io/async_write.rs","begin":[375,4],"end":[377,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14217:2125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50476:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:1075:4663":{"id":"1:1075:4663","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1076:4122","1:1077:5354","1:1078:57369","1:1079:57370","1:1080:56209","1:1081:56210","1:1082:56211"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3376:3304":{"id":"2:3376:3304","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3378:893"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:787:2430":{"id":"0:787:2430","crate_id":0,"name":"start_seek","span":{"filename":"src/io/async_seek.rs","begin":[66,4],"end":[66,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["pos",{"kind":"resolved_path","inner":{"name":"SeekFrom","id":"1:11115:2263","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13577:2622":{"id":"2:13577:2622","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:16006:3191"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1917":{"id":"0:0:1917","crate_id":0,"name":"tokio","span":{"filename":"src/lib.rs","begin":[1,0],"end":[568,26]},"visibility":"public","docs":"A runtime for writing reliable network applications without compromising speed.\n\nTokio is an event-driven, non-blocking I/O platform for writing asynchronous\napplications with the Rust programming language. At a high level, it\nprovides a few major components:\n\n* Tools for [working with asynchronous tasks][tasks], including\n  [synchronization primitives and channels][sync] and [timeouts, sleeps, and\n  intervals][time].\n* APIs for [performing asynchronous I/O][io], including [TCP and UDP][net] sockets,\n  [filesystem][fs] operations, and [process] and [signal] management.\n* A [runtime] for executing asynchronous code, including a task scheduler,\n  an I/O driver backed by the operating system's event queue (epoll, kqueue,\n  IOCP, etc...), and a high performance timer.\n\nGuide level documentation is found on the [website].\n\n[tasks]: #working-with-tasks\n[sync]: crate::sync\n[time]: crate::time\n[io]: #asynchronous-io\n[net]: crate::net\n[fs]: crate::fs\n[process]: crate::process\n[signal]: crate::signal\n[fs]: crate::fs\n[runtime]: crate::runtime\n[website]: https://tokio.rs/tokio/tutorial\n\n# A Tour of Tokio\n\nTokio consists of a number of modules that provide a range of functionality\nessential for implementing asynchronous applications in Rust. In this\nsection, we will take a brief tour of Tokio, summarizing the major APIs and\ntheir uses.\n\nThe easiest way to get started is to enable all features. Do this by\nenabling the `full` feature flag:\n\n```toml\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n### Authoring applications\n\nTokio is great for writing applications and most users in this case shouldn't\nworry too much about what features they should pick. If you're unsure, we suggest\ngoing with `full` to ensure that you don't run into any road blocks while you're\nbuilding your application.\n\n#### Example\n\nThis example shows the quickest way to get started with Tokio.\n\n```toml\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n### Authoring libraries\n\nAs a library author your goal should be to provide the lightest weight crate\nthat is based on Tokio. To achieve this you should ensure that you only enable\nthe features you need. This allows users to pick up your crate without having\nto enable unnecessary features.\n\n#### Example\n\nThis example shows how you may want to import features for a library that just\nneeds to `tokio::spawn` and use a `TcpStream`.\n\n```toml\ntokio = { version = \"1\", features = [\"rt\", \"net\"] }\n```\n\n## Working With Tasks\n\nAsynchronous programs in Rust are based around lightweight, non-blocking\nunits of execution called [_tasks_][tasks]. The [`tokio::task`] module provides\nimportant tools for working with tasks:\n\n* The [`spawn`] function and [`JoinHandle`] type, for scheduling a new task\n  on the Tokio runtime and awaiting the output of a spawned task, respectively,\n* Functions for [running blocking operations][blocking] in an asynchronous\n  task context.\n\nThe [`tokio::task`] module is present only when the \"rt\" feature flag\nis enabled.\n\n[tasks]: task/index.html#what-are-tasks\n[`tokio::task`]: crate::task\n[`spawn`]: crate::task::spawn()\n[`JoinHandle`]: crate::task::JoinHandle\n[blocking]: task/index.html#blocking-and-yielding\n\nThe [`tokio::sync`] module contains synchronization primitives to use when\nneeding to communicate or share data. These include:\n\n* channels ([`oneshot`], [`mpsc`], [`watch`], and [`broadcast`]), for sending values\n  between tasks,\n* a non-blocking [`Mutex`], for controlling access to a shared, mutable\n  value,\n* an asynchronous [`Barrier`] type, for multiple tasks to synchronize before\n  beginning a computation.\n\nThe `tokio::sync` module is present only when the \"sync\" feature flag is\nenabled.\n\n[`tokio::sync`]: crate::sync\n[`Mutex`]: crate::sync::Mutex\n[`Barrier`]: crate::sync::Barrier\n[`oneshot`]: crate::sync::oneshot\n[`mpsc`]: crate::sync::mpsc\n[`watch`]: crate::sync::watch\n[`broadcast`]: crate::sync::broadcast\n\nThe [`tokio::time`] module provides utilities for tracking time and\nscheduling work. This includes functions for setting [timeouts][timeout] for\ntasks, [sleeping][sleep] work to run in the future, or [repeating an operation at an\ninterval][interval].\n\nIn order to use `tokio::time`, the \"time\" feature flag must be enabled.\n\n[`tokio::time`]: crate::time\n[sleep]: crate::time::sleep()\n[interval]: crate::time::interval()\n[timeout]: crate::time::timeout()\n\nFinally, Tokio provides a _runtime_ for executing asynchronous tasks. Most\napplications can use the [`#[tokio::main]`][main] macro to run their code on the\nTokio runtime. However, this macro provides only basic configuration options. As\nan alternative, the [`tokio::runtime`] module provides more powerful APIs for configuring\nand managing runtimes. You should use that module if the `#[tokio::main]` macro doesn't\nprovide the functionality you need.\n\nUsing the runtime requires the \"rt\" or \"rt-multi-thread\" feature flags, to\nenable the basic [single-threaded scheduler][rt] and the [thread-pool\nscheduler][rt-multi-thread], respectively. See the [`runtime` module\ndocumentation][rt-features] for details. In addition, the \"macros\" feature\nflag enables the `#[tokio::main]` and `#[tokio::test]` attributes.\n\n[main]: attr.main.html\n[`tokio::runtime`]: crate::runtime\n[`Builder`]: crate::runtime::Builder\n[`Runtime`]: crate::runtime::Runtime\n[rt]: runtime/index.html#current-thread-scheduler\n[rt-multi-thread]: runtime/index.html#multi-thread-scheduler\n[rt-features]: runtime/index.html#runtime-scheduler\n\n## CPU-bound tasks and blocking code\n\nTokio is able to concurrently run many tasks on a few threads by repeatedly\nswapping the currently running task on each thread. However, this kind of\nswapping can only happen at `.await` points, so code that spends a long time\nwithout reaching an `.await` will prevent other tasks from running. To\ncombat this, Tokio provides two kinds of threads: Core threads and blocking\nthreads. The core threads are where all asynchronous code runs, and Tokio\nwill by default spawn one for each CPU core. The blocking threads are\nspawned on demand, can be used to run blocking code that would otherwise\nblock other tasks from running and are kept alive when not used for a certain\namount of time which can be configured with [`thread_keep_alive`].\nSince it is not possible for Tokio to swap out blocking tasks, like it\ncan do with asynchronous code, the upper limit on the number of blocking\nthreads is very large. These limits can be configured on the [`Builder`].\n\nTo spawn a blocking task, you should use the [`spawn_blocking`] function.\n\n[`Builder`]: crate::runtime::Builder\n[`spawn_blocking`]: crate::task::spawn_blocking()\n[`thread_keep_alive`]: crate::runtime::Builder::thread_keep_alive()\n\n```\n#[tokio::main]\nasync fn main() {\n    // This is running on a core thread.\n\n    let blocking_task = tokio::task::spawn_blocking(|| {\n        // This is running on a blocking thread.\n        // Blocking here is ok.\n    });\n\n    // We can wait for the blocking task like this:\n    // If the blocking task panics, the unwrap below will propagate the\n    // panic.\n    blocking_task.await.unwrap();\n}\n```\n\nIf your code is CPU-bound and you wish to limit the number of threads used\nto run it, you should use a separate thread pool dedicated to CPU bound tasks.\nFor example, you could consider using the [rayon] library for CPU-bound\ntasks. It is also possible to create an extra Tokio runtime dedicated to\nCPU-bound tasks, but if you do this, you should be careful that the extra\nruntime runs _only_ CPU-bound tasks, as IO-bound tasks on that runtime\nwill behave poorly.\n\nHint: If using rayon, you can use a [`oneshot`] channel to send the result back\nto Tokio when the rayon task finishes.\n\n[rayon]: https://docs.rs/rayon\n[`oneshot`]: crate::sync::oneshot\n\n## Asynchronous IO\n\nAs well as scheduling and running tasks, Tokio provides everything you need\nto perform input and output asynchronously.\n\nThe [`tokio::io`] module provides Tokio's asynchronous core I/O primitives,\nthe [`AsyncRead`], [`AsyncWrite`], and [`AsyncBufRead`] traits. In addition,\nwhen the \"io-util\" feature flag is enabled, it also provides combinators and\nfunctions for working with these traits, forming as an asynchronous\ncounterpart to [`std::io`].\n\nTokio also includes APIs for performing various kinds of I/O and interacting\nwith the operating system asynchronously. These include:\n\n* [`tokio::net`], which contains non-blocking versions of [TCP], [UDP], and\n  [Unix Domain Sockets][UDS] (enabled by the \"net\" feature flag),\n* [`tokio::fs`], similar to [`std::fs`] but for performing filesystem I/O\n  asynchronously (enabled by the \"fs\" feature flag),\n* [`tokio::signal`], for asynchronously handling Unix and Windows OS signals\n  (enabled by the \"signal\" feature flag),\n* [`tokio::process`], for spawning and managing child processes (enabled by\n  the \"process\" feature flag).\n\n[`tokio::io`]: crate::io\n[`AsyncRead`]: crate::io::AsyncRead\n[`AsyncWrite`]: crate::io::AsyncWrite\n[`AsyncBufRead`]: crate::io::AsyncBufRead\n[`std::io`]: std::io\n[`tokio::net`]: crate::net\n[TCP]: crate::net::tcp\n[UDP]: crate::net::UdpSocket\n[UDS]: crate::net::unix\n[`tokio::fs`]: crate::fs\n[`std::fs`]: std::fs\n[`tokio::signal`]: crate::signal\n[`tokio::process`]: crate::process\n\n# Examples\n\nA simple TCP echo server:\n\n```no_run\nuse tokio::net::TcpListener;\nuse tokio::io::{AsyncReadExt, AsyncWriteExt};\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let listener = TcpListener::bind(\"127.0.0.1:8080\").await?;\n\n    loop {\n        let (mut socket, _) = listener.accept().await?;\n\n        tokio::spawn(async move {\n            let mut buf = [0; 1024];\n\n            // In a loop, read data from the socket and write the data back.\n            loop {\n                let n = match socket.read(&mut buf).await {\n                    // socket closed\n                    Ok(n) if n == 0 => return,\n                    Ok(n) => n,\n                    Err(e) => {\n                        eprintln!(\"failed to read from socket; err = {:?}\", e);\n                        return;\n                    }\n                };\n\n                // Write the data back\n                if let Err(e) = socket.write_all(&buf[0..n]).await {\n                    eprintln!(\"failed to write to socket; err = {:?}\", e);\n                    return;\n                }\n            }\n        });\n    }\n}\n```\n\n## Feature flags\n\nTokio uses a set of [feature flags] to reduce the amount of compiled code. It\nis possible to just enable certain features over others. By default, Tokio\ndoes not enable any features but allows one to enable a subset for their use\ncase. Below is a list of the available feature flags. You may also notice\nabove each function, struct and trait there is listed one or more feature flags\nthat are required for that item to be used. If you are new to Tokio it is\nrecommended that you use the `full` feature flag which will enable all public APIs.\nBeware though that this will pull in many extra dependencies that you may not\nneed.\n\n- `full`: Enables all features listed below except `test-util` and `tracing`.\n- `rt`: Enables `tokio::spawn`, the basic (current thread) scheduler,\n        and non-scheduler utilities.\n- `rt-multi-thread`: Enables the heavier, multi-threaded, work-stealing scheduler.\n- `io-util`: Enables the IO based `Ext` traits.\n- `io-std`: Enable `Stdout`, `Stdin` and `Stderr` types.\n- `net`: Enables `tokio::net` types such as `TcpStream`, `UnixStream` and\n         `UdpSocket`, as well as (on Unix-like systems) `AsyncFd` and (on\n         FreeBSD) `PollAio`.\n- `time`: Enables `tokio::time` types and allows the schedulers to enable\n          the built in timer.\n- `process`: Enables `tokio::process` types.\n- `macros`: Enables `#[tokio::main]` and `#[tokio::test]` macros.\n- `sync`: Enables all `tokio::sync` types.\n- `signal`: Enables all `tokio::signal` types.\n- `fs`: Enables `tokio::fs` types.\n- `test-util`: Enables testing based infrastructure for the Tokio runtime.\n\n_Note: `AsyncRead` and `AsyncWrite` traits do not require any features and are\nalways available._\n\n### Internal features\n\nThese features do not expose any new API, but influence internal\nimplementation aspects of Tokio, and can pull in additional\ndependencies.\n\n- `parking_lot`: As a potential optimization, use the _parking_lot_ crate's\nsynchronization primitives internally. MSRV may increase according to the\n_parking_lot_ release in use.\n\n### Unstable features\n\nSome feature flags are only available when specifying the `tokio_unstable` flag:\n\n- `tracing`: Enables tracing events.\n\nLikewise, some parts of the API are only available with the same flag:\n\n- [`task::JoinSet`]\n- [`task::Builder`]\n  \nThis flag enables **unstable** features. The public API of these features\nmay break in 1.x releases. To enable these features, the `--cfg\ntokio_unstable` argument must be passed to `rustc` when compiling. This\nserves to explicitly opt-in to features which may break semver conventions,\nsince Cargo [does not yet directly support such opt-ins][unstable features].\n\nYou can specify it in your project's `.cargo/config.toml` file:\n\n```toml\n[build]\nrustflags = [\"--cfg\", \"tokio_unstable\"]\n```\n\nAlternatively, you can specify it with an environment variable:\n\n```sh\n## Many *nix shells:\nexport RUSTFLAGS=\"--cfg tokio_unstable\"\ncargo build\n```\n\n```powershell\n## Windows PowerShell:\n$Env:RUSTFLAGS=\"--cfg tokio_unstable\"\ncargo build\n```\n\n[unstable features]: https://internals.rust-lang.org/t/feature-request-unstable-opt-in-non-transitive-crate-features/16193#why-not-a-crate-feature-2\n[feature flags]: https://doc.rust-lang.org/cargo/reference/manifest.html#the-features-section","links":{"crate::io::AsyncWrite":"0:248:2259","crate::net":"0:354:1849","crate::task":"0:772:1378","std::io":"1:3366:1848","crate::io::AsyncBufRead":"0:127:2253","crate::sync":"0:830:1360","std::fs":"1:3134:1847","crate::io":"0:106:1848","crate::io::AsyncRead":"0:169:2255"},"attrs":["#![allow(clippy :: cognitive_complexity, clippy :: large_enum_variant, clippy\n:: needless_doctest_main)]","#![warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\nunreachable_pub)]","#![deny(unused_must_use)]","#![doc(test(no_crate_inject,\nattr(deny(warnings, rust_2018_idioms), allow(dead_code, unused_variables))))]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:106:1848","0:354:1849","0:772:1378","0:775:1894","0:54:1005"],"is_stripped":false}},"0:331:327":{"id":"0:331:327","crate_id":0,"name":"assume_init","span":{"filename":"src/io/read_buf.rs","begin":[234,4],"end":[239,5]},"visibility":"public","docs":"Asserts that the first `n` unfilled bytes of the buffer are initialized.\n\n`ReadBuf` assumes that bytes are never de-initialized, so this method does nothing when called with fewer\nbytes than are already known to be initialized.\n\n# Safety\n\nThe caller must ensure that `n` unfilled bytes of the buffer have already been initialized.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13212:4920":{"id":"2:13212:4920","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13214:4922","2:13215:60157","2:13216:60158","2:13217:60159","2:13218:60161","2:13219:60160","2:13220:60162"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13594:33163":{"id":"2:13594:33163","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:15995:3182"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49863:5218","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:179":{"id":"0:179","crate_id":0,"name":null,"span":{"filename":"src/io/async_read.rs","begin":[94,0],"end":[106,1]},"visibility":{"restricted":{"parent":"0:149:2254","path":"::io::async_read"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsyncRead","id":"0:169:2255","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"items":["0:180:2399"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:4051:4658":{"id":"2:4051:4658","crate_id":2,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4052:58871"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3166:75":{"id":"2:3166:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3168:305"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:4000:68":{"id":"2:4000:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4001:1429"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"2:13930:150":{"id":"2:13930:150","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13931:181","2:13932:150","2:13933:767"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3525:132":{"id":"2:3525:132","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3527:181","2:3528:378"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:284:2483":{"id":"0:284:2483","crate_id":0,"name":"poll_flush","span":{"filename":"src/io/async_write.rs","begin":[341,4],"end":[343,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14217:2125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50476:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13604:56326":{"id":"2:13604:56326","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:13202:4919","prim@char":"1:15989:3177"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:4920","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13212:4920","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13227:4923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13578:2757":{"id":"2:13578:2757","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47617:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47617:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11082:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11082:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:308:2261":{"id":"0:308:2261","crate_id":0,"name":"ReadBuf","span":{"filename":"src/io/read_buf.rs","begin":[23,0],"end":[27,1]},"visibility":"public","docs":"A wrapper around a byte buffer that is incrementally filled and initialized.\n\nThis type is a sort of \"double cursor\". It tracks three regions in the\nbuffer: a region at the beginning of the buffer that has been logically\nfilled with data, a region that has been initialized at some point but not\nyet logically filled, and a region at the end that may be uninitialized.\nThe filled region is guaranteed to be a subset of the initialized region.\n\nIn summary, the contents of the buffer can be visualized as:\n\n```not_rust\n[             capacity              ]\n[ filled |         unfilled         ]\n[    initialized    | uninitialized ]\n```\n\nIt is undefined behavior to de-initialize any bytes from the uninitialized\nregion, since it is merely unknown whether this region is uninitialized or\nnot, and if part of it turns out to be initialized, it must stay initialized.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":["0:313","a:2:9407:3616-0:308:2261","a:2:3269:211-0:308:2261","a:2:9408:3615-0:308:2261","a:2:3310:1915-0:308:2261","a:2:3281:220-0:308:2261","b:2:2869-0:308:2261","b:2:4002-0:308:2261","b:2:3202-0:308:2261","b:2:3213-0:308:2261","b:2:3198-0:308:2261","b:2:2872-0:308:2261","b:2:3208-0:308:2261","0:333"]}},"2:3435:3316":{"id":"2:3435:3316","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3437:1234"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:391":{"id":"0:391","crate_id":0,"name":null,"span":{"filename":"src/net/addr.rs","begin":[50,0],"end":[50,36]},"visibility":{"restricted":{"parent":"0:355:2663","path":"::net::addr"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ToSocketAddrs","id":"0:381:2665","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SocketAddr","id":"1:11172:2682","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:2866:4865":{"id":"2:2866:4865","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2868:55847"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2863:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:289:2554":{"id":"0:289:2554","crate_id":0,"name":"is_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[367,4],"end":[369,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13141:4742":{"id":"2:13141:4742","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13142:126","2:13143:58825"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22988:4964":{"id":"2:22988:4964","crate_id":2,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22989:60049","2:22990:1227","2:22991:1228","2:22992:60050","2:22993:60051","2:22994:60052","2:22995:60053","2:22996:60054","2:22997:60055","2:22998:60056"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23001:4630","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13656:60905":{"id":"2:13656:60905","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6106:57369":{"id":"5:6106:57369","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:15995:3182"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8361:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:792:2483":{"id":"0:792:2483","crate_id":0,"name":"poll_flush","span":{"filename":"src/io/async_write.rs","begin":[218,4],"end":[218,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14217:2125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50476:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:263:2476":{"id":"0:263:2476","crate_id":0,"name":"poll_write","span":{"filename":"src/io/async_write.rs","begin":[230,4],"end":[236,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14217:2125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50476:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:416":{"id":"0:416","crate_id":0,"name":null,"span":{"filename":"src/net/addr.rs","begin":[118,0],"end":[118,41]},"visibility":{"restricted":{"parent":"0:355:2663","path":"::net::addr"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ToSocketAddrs","id":"0:381:2665","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"Ipv6Addr","id":"1:11261:2681","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"kind":"primitive","inner":"u16"}]},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13611:4063":{"id":"2:13611:4063","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"2:13202:4919","prim@char":"1:15989:3177","`None`":"2:47617:176"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47617:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:4920","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13212:4920","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13227:4923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:214":{"id":"0:214","crate_id":0,"name":null,"span":{"filename":"src/io/async_seek.rs","begin":[65,0],"end":[67,1]},"visibility":{"restricted":{"parent":"0:187:2256","path":"::io::async_seek"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsyncSeek","id":"0:208:2257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"2:3310:1915","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsyncSeek","id":"0:208:2257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"items":["0:787:2430","0:788:2438"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:772:1378":{"id":"0:772:1378","crate_id":0,"name":"task","span":{"filename":"src/task/mod.rs","begin":[1,0],"end":[324,1]},"visibility":"public","docs":"Asynchronous green-threads.\n\n## What are Tasks?\n\nA _task_ is a light weight, non-blocking unit of execution. A task is similar\nto an OS thread, but rather than being managed by the OS scheduler, they are\nmanaged by the [Tokio runtime][rt]. Another name for this general pattern is\n[green threads]. If you are familiar with [Go's goroutines], [Kotlin's\ncoroutines], or [Erlang's processes], you can think of Tokio's tasks as\nsomething similar.\n\nKey points about tasks include:\n\n* Tasks are **light weight**. Because tasks are scheduled by the Tokio\n  runtime rather than the operating system, creating new tasks or switching\n  between tasks does not require a context switch and has fairly low\n  overhead. Creating, running, and destroying large numbers of tasks is\n  quite cheap, especially compared to OS threads.\n\n* Tasks are scheduled **cooperatively**. Most operating systems implement\n  _preemptive multitasking_. This is a scheduling technique where the\n  operating system allows each thread to run for a period of time, and then\n  _preempts_ it, temporarily pausing that thread and switching to another.\n  Tasks, on the other hand, implement _cooperative multitasking_. In\n  cooperative multitasking, a task is allowed to run until it _yields_,\n  indicating to the Tokio runtime's scheduler that it cannot currently\n  continue executing. When a task yields, the Tokio runtime switches to\n  executing the next task.\n\n* Tasks are **non-blocking**. Typically, when an OS thread performs I/O or\n  must synchronize with another thread, it _blocks_, allowing the OS to\n  schedule another thread. When a task cannot continue executing, it must\n  yield instead, allowing the Tokio runtime to schedule another task. Tasks\n  should generally not perform system calls or other operations that could\n  block a thread, as this would prevent other tasks running on the same\n  thread from executing as well. Instead, this module provides APIs for\n  running blocking operations in an asynchronous context.\n\n[rt]: crate::runtime\n[green threads]: https://en.wikipedia.org/wiki/Green_threads\n[Go's goroutines]: https://tour.golang.org/concurrency/1\n[Kotlin's coroutines]: https://kotlinlang.org/docs/reference/coroutines-overview.html\n[Erlang's processes]: http://erlang.org/doc/getting_started/conc_prog.html#processes\n\n## Working with Tasks\n\nThis module provides the following APIs for working with tasks:\n\n### Spawning\n\nPerhaps the most important function in this module is [`task::spawn`]. This\nfunction can be thought of as an async equivalent to the standard library's\n[`thread::spawn`][`std::thread::spawn`]. It takes an `async` block or other\n[future], and creates a new task to run that work concurrently:\n\n```\nuse tokio::task;\n\n# async fn doc() {\ntask::spawn(async {\n    // perform some work here...\n});\n# }\n```\n\nLike [`std::thread::spawn`], `task::spawn` returns a [`JoinHandle`] struct.\nA `JoinHandle` is itself a future which may be used to await the output of\nthe spawned task. For example:\n\n```\nuse tokio::task;\n\n# #[tokio::main] async fn main() -> Result<(), Box<dyn std::error::Error>> {\nlet join = task::spawn(async {\n    // ...\n    \"hello world!\"\n});\n\n// ...\n\n// Await the result of the spawned task.\nlet result = join.await?;\nassert_eq!(result, \"hello world!\");\n# Ok(())\n# }\n```\n\nAgain, like `std::thread`'s [`JoinHandle` type][thread_join], if the spawned\ntask panics, awaiting its `JoinHandle` will return a [`JoinError`]. For\nexample:\n\n```\nuse tokio::task;\n\n# #[tokio::main] async fn main() {\nlet join = task::spawn(async {\n    panic!(\"something bad happened!\")\n});\n\n// The returned result indicates that the task failed.\nassert!(join.await.is_err());\n# }\n```\n\n`spawn`, `JoinHandle`, and `JoinError` are present when the \"rt\"\nfeature flag is enabled.\n\n[`task::spawn`]: crate::task::spawn()\n[future]: std::future::Future\n[`std::thread::spawn`]: std::thread::spawn\n[`JoinHandle`]: crate::task::JoinHandle\n[thread_join]: std::thread::JoinHandle\n[`JoinError`]: crate::task::JoinError\n\n### Blocking and Yielding\n\nAs we discussed above, code running in asynchronous tasks should not perform\noperations that can block. A blocking operation performed in a task running\non a thread that is also running other tasks would block the entire thread,\npreventing other tasks from running.\n\nInstead, Tokio provides two APIs for running blocking operations in an\nasynchronous context: [`task::spawn_blocking`] and [`task::block_in_place`].\n\nBe aware that if you call a non-async method from async code, that non-async\nmethod is still inside the asynchronous context, so you should also avoid\nblocking operations there. This includes destructors of objects destroyed in\nasync code.\n\n#### spawn_blocking\n\nThe `task::spawn_blocking` function is similar to the `task::spawn` function\ndiscussed in the previous section, but rather than spawning an\n_non-blocking_ future on the Tokio runtime, it instead spawns a\n_blocking_ function on a dedicated thread pool for blocking tasks. For\nexample:\n\n```\nuse tokio::task;\n\n# async fn docs() {\ntask::spawn_blocking(|| {\n    // do some compute-heavy work or call synchronous code\n});\n# }\n```\n\nJust like `task::spawn`, `task::spawn_blocking` returns a `JoinHandle`\nwhich we can use to await the result of the blocking operation:\n\n```rust\n# use tokio::task;\n# async fn docs() -> Result<(), Box<dyn std::error::Error>>{\nlet join = task::spawn_blocking(|| {\n    // do some compute-heavy work or call synchronous code\n    \"blocking completed\"\n});\n\nlet result = join.await?;\nassert_eq!(result, \"blocking completed\");\n# Ok(())\n# }\n```\n\n#### block_in_place\n\nWhen using the [multi-threaded runtime][rt-multi-thread], the [`task::block_in_place`]\nfunction is also available. Like `task::spawn_blocking`, this function\nallows running a blocking operation from an asynchronous context. Unlike\n`spawn_blocking`, however, `block_in_place` works by transitioning the\n_current_ worker thread to a blocking thread, moving other tasks running on\nthat thread to another worker thread. This can improve performance by avoiding\ncontext switches.\n\nFor example:\n\n```\nuse tokio::task;\n\n# async fn docs() {\nlet result = task::block_in_place(|| {\n    // do some compute-heavy work or call synchronous code\n    \"blocking completed\"\n});\n\nassert_eq!(result, \"blocking completed\");\n# }\n```\n\n#### yield_now\n\nIn addition, this module provides a [`task::yield_now`] async function\nthat is analogous to the standard library's [`thread::yield_now`]. Calling\nand `await`ing this function will cause the current task to yield to the\nTokio runtime's scheduler, allowing other tasks to be\nscheduled. Eventually, the yielding task will be polled again, allowing it\nto execute. For example:\n\n```rust\nuse tokio::task;\n\n# #[tokio::main] async fn main() {\nasync {\n    task::spawn(async {\n        // ...\n        println!(\"spawned task done!\")\n    });\n\n    // Yield, allowing the newly-spawned task to execute first.\n    task::yield_now().await;\n    println!(\"main task done!\");\n}\n# .await;\n# }\n```\n\n### Cooperative scheduling\n\nA single call to [`poll`] on a top-level task may potentially do a lot of\nwork before it returns `Poll::Pending`. If a task runs for a long period of\ntime without yielding back to the executor, it can starve other tasks\nwaiting on that executor to execute them, or drive underlying resources.\nSince Rust does not have a runtime, it is difficult to forcibly preempt a\nlong-running task. Instead, this module provides an opt-in mechanism for\nfutures to collaborate with the executor to avoid starvation.\n\nConsider a future like this one:\n\n```\n# use tokio_stream::{Stream, StreamExt};\nasync fn drop_all<I: Stream + Unpin>(mut input: I) {\n    while let Some(_) = input.next().await {}\n}\n```\n\nIt may look harmless, but consider what happens under heavy load if the\ninput stream is _always_ ready. If we spawn `drop_all`, the task will never\nyield, and will starve other tasks and resources on the same executor.\n\nTo account for this, Tokio has explicit yield points in a number of library\nfunctions, which force tasks to return to the executor periodically.\n\n\n#### unconstrained\n\nIf necessary, [`task::unconstrained`] lets you opt out a future of Tokio's cooperative\nscheduling. When a future is wrapped with `unconstrained`, it will never be forced to yield to\nTokio. For example:\n\n```\n# #[tokio::main]\n# async fn main() {\nuse tokio::{task, sync::mpsc};\n\nlet fut = async {\n    let (tx, mut rx) = mpsc::unbounded_channel();\n\n    for i in 0..1000 {\n        let _ = tx.send(());\n        // This will always be ready. If coop was in effect, this code would be forced to yield\n        // periodically. However, if left unconstrained, then this code will never yield.\n        rx.recv().await;\n    }\n};\n\ntask::unconstrained(fut).await;\n# }\n```\n\n[`task::spawn_blocking`]: crate::task::spawn_blocking\n[`task::block_in_place`]: crate::task::block_in_place\n[rt-multi-thread]: ../runtime/index.html#threaded-scheduler\n[`task::yield_now`]: crate::task::yield_now()\n[`thread::yield_now`]: std::thread::yield_now\n[`task::unconstrained`]: crate::task::unconstrained()\n[`poll`]: method@std::future::Future::poll","links":{"std::thread::spawn":"1:984:1864","std::thread::yield_now":"1:988:2758","std::future::Future":"2:13915:138","method@std::future::Future::poll":"2:13915:138","std::thread::JoinHandle":"1:1041:2315"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":false}},"2:2874:55847":{"id":"2:2874:55847","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:222:2430":{"id":"0:222:2430","crate_id":0,"name":"start_seek","span":{"filename":"src/io/async_seek.rs","begin":[84,4],"end":[86,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["pos",{"kind":"resolved_path","inner":{"name":"SeekFrom","id":"1:11115:2263","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:138:2355":{"id":"0:138:2355","crate_id":0,"name":"consume","span":{"filename":"src/io/async_buf_read.rs","begin":[94,4],"end":[96,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["amt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23088:4678":{"id":"2:23088:4678","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:23078:4630","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3812:3286":{"id":"2:3812:3286","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2572:127":{"id":"1:2572:127","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2573:3138","1:2575:59217","1:2576:59218","1:2577:58871"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"2:10440:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Display","id":"2:10447:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3427:3314":{"id":"2:3427:3314","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3429:354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13227:4923":{"id":"2:13227:4923","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13229:4058","2:13230:59916","2:13231:59917"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Searcher","id":"2:13221:4922","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:773:1867":{"id":"0:773:1867","crate_id":0,"name":"util","span":{"filename":"src/util/mod.rs","begin":[1,0],"end":[83,21]},"visibility":"crate","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":true}},"1:5763:4618":{"id":"1:5763:4618","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5764:8890","1:5765:57955","1:5766:6632","1:5767:57956","1:5768:4809","1:5769:4810","1:5770:57957","1:5771:1304","1:5772:57958","1:5773:57959","1:5774:57960","1:5775:57961","1:5776:57962","1:5777:57963","1:5778:57964","1:5779:57965"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:316:2584":{"id":"0:316:2584","crate_id":0,"name":"uninit","span":{"filename":"src/io/read_buf.rs","begin":[46,4],"end":[52,5]},"visibility":"public","docs":"Creates a new `ReadBuf` from a fully uninitialized buffer.\n\nUse `assume_init` if part of the buffer is known to be already initialized.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["buf",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninit","id":"2:32458:2562","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:308:2261","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9031:4159":{"id":"2:9031:4159","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8748:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:788:2438":{"id":"0:788:2438","crate_id":0,"name":"poll_complete","span":{"filename":"src/io/async_seek.rs","begin":[66,4],"end":[66,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14217:2125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50476:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13592:4590":{"id":"2:13592:4590","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49566:3348","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3505:2317":{"id":"2:3505:2317","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3506:545"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Deref","id":"2:3492:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:797:2483":{"id":"0:797:2483","crate_id":0,"name":"poll_flush","span":{"filename":"src/io/async_write.rs","begin":[222,4],"end":[222,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14217:2125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50476:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14314:141":{"id":"2:14314:141","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14315:277","2:14316:518","2:14317:280","2:14318:1079"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3559:3280":{"id":"2:3559:3280","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3561:237","2:3562:206","2:3563:59789"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13645:60901":{"id":"2:13645:60901","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"prim@char":"1:15989:3177","self::pattern":"2:13202:4919","str::matches":"1:15995:3182","`DoubleEndedIterator`":"2:8591:120"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49802:5215","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:4920","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13212:4920","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13227:4923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23237:17223":{"id":"2:23237:17223","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23238:8464","2:23239:60037","2:23240:60038"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:23230:4630","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:272:2483":{"id":"0:272:2483","crate_id":0,"name":"poll_flush","span":{"filename":"src/io/async_write.rs","begin":[281,4],"end":[283,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14217:2125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50476:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:209:2430":{"id":"0:209:2430","crate_id":0,"name":"start_seek","span":{"filename":"src/io/async_seek.rs","begin":[33,4],"end":[33,78]},"visibility":"default","docs":"Attempts to seek to an offset, in bytes, in a stream.\n\nA seek beyond the end of a stream is allowed, but behavior is defined\nby the implementation.\n\nIf this function returns successfully, then the job has been submitted.\nTo find out when it completes, call `poll_complete`.\n\n# Errors\n\nThis function can return [`io::ErrorKind::Other`] in case there is\nanother seek in progress. To avoid this, it is advisable that any call\nto `start_seek` is preceded by a call to `poll_complete` to ensure all\npending seeks have completed.","links":{"`io::ErrorKind::Other`":"1:10979:2262"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["position",{"kind":"resolved_path","inner":{"name":"SeekFrom","id":"1:11115:2263","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"b:2:3208-0:308:2261":{"id":"b:2:3208-0:308:2261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"2:3182:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"2:3178:228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:308:2261","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3211:127","2:3212:1417"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3372:3306":{"id":"2:3372:3306","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3374:1356"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:9408:3615-0:308:2261":{"id":"a:2:9408:3615-0:308:2261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"2:9408:3615","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:308:2261","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:276:2542":{"id":"0:276:2542","crate_id":0,"name":"poll_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[299,4],"end":[305,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14217:2125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:11103:2441","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50476:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3431:3315":{"id":"2:3431:3315","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3433:357"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13671:56327":{"id":"2:13671:56327","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:15989:3177","self::pattern":"2:13202:4919"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47617:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:4920","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13212:4920","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13227:4923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:446:1850":{"id":"0:446:1850","crate_id":0,"name":"loom","span":{"filename":"src/loom/mod.rs","begin":[1,0],"end":[14,31]},"visibility":"crate","docs":"This module abstracts over `loom` and `std::sync` depending on whether we\nare running tests or not.","links":{},"attrs":["#![allow(unused)]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":true}},"2:10459:3554":{"id":"2:10459:3554","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10460:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:795:2542":{"id":"0:795:2542","crate_id":0,"name":"poll_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[222,4],"end":[222,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14217:2125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:11103:2441","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50476:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13221:4922":{"id":"2:13221:4922","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13223:4941","2:13224:922","2:13225:59406","2:13226:59407"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13691:4665":{"id":"2:13691:4665","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:15989:3177"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:49888:4666","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:332:2407":{"id":"0:332:2407","crate_id":0,"name":"put_slice","span":{"filename":"src/io/read_buf.rs","begin":[248,4],"end":[270,5]},"visibility":"public","docs":"Appends data to the buffer, advancing the written position and possibly also the initialized position.\n\n# Panics\n\nPanics if `self.remaining()` is less than `buf.len()`.","links":{},"attrs":["#[inline]","#[track_caller]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6981:4628":{"id":"1:6981:4628","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6982:57772"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3198-0:308:2261":{"id":"b:2:3198-0:308:2261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"2:3175:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"2:3172:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:308:2261","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3201:4057"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:129:2355":{"id":"0:129:2355","crate_id":0,"name":"consume","span":{"filename":"src/io/async_buf_read.rs","begin":[62,4],"end":[62,49]},"visibility":"default","docs":"Tells this buffer that `amt` bytes have been consumed from the buffer,\nso they should no longer be returned in calls to [`poll_read`].\n\nThis function is a lower-level call. It needs to be paired with the\n[`poll_fill_buf`] method to function properly. This function does\nnot perform any I/O, it simply informs this object that some amount of\nits buffer, returned from [`poll_fill_buf`], has been consumed and should\nno longer be returned. As such, this function may do odd things if\n[`poll_fill_buf`] isn't called before calling it.\n\nThe `amt` must be `<=` the number of bytes in the buffer returned by\n[`poll_fill_buf`].\n\n[`poll_read`]: AsyncRead::poll_read\n[`poll_fill_buf`]: AsyncBufRead::poll_fill_buf","links":{"AsyncBufRead::poll_fill_buf":"0:127:2253","AsyncRead::poll_read":"0:169:2255"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["amt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:13582:56289":{"id":"2:13582:56289","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11082:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11082:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:2957:177":{"id":"2:2957:177","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2958:415","2:2959:2595","2:2960:2402","2:2961:4056"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2926:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2967:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/macros/support.rs","begin":[8,0],"end":[8,22]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"std::pin::Pin","name":"Pin","id":"2:47734:188","glob":false}},"0:265:2554":{"id":"0:265:2554","crate_id":0,"name":"is_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[246,4],"end":[248,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8556:3628":{"id":"2:8556:3628","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8558:4064","2:8560:4065","2:8561:4066"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13633:56322":{"id":"2:13633:56322","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"self::pattern":"2:13202:4919","str::splitn":"1:15995:3182","prim@char":"1:15989:3177"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49702:5183","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:4920","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13212:4920","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13227:4923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13586:4714":{"id":"2:13586:4714","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:15995:3182","str::slice_mut_unchecked":"1:15995:3182","crate::ops::Index":"2:3577:3318"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:106:1848":{"id":"0:106:1848","crate_id":0,"name":"io","span":{"filename":"src/io/mod.rs","begin":[1,0],"end":[276,1]},"visibility":"public","docs":"Traits, helpers, and type definitions for asynchronous I/O functionality.\n\nThis module is the asynchronous version of `std::io`. Primarily, it\ndefines two traits, [`AsyncRead`] and [`AsyncWrite`], which are asynchronous\nversions of the [`Read`] and [`Write`] traits in the standard library.\n\n# AsyncRead and AsyncWrite\n\nLike the standard library's [`Read`] and [`Write`] traits, [`AsyncRead`] and\n[`AsyncWrite`] provide the most general interface for reading and writing\ninput and output. Unlike the standard library's traits, however, they are\n_asynchronous_ &mdash; meaning that reading from or writing to a `tokio::io`\ntype will _yield_ to the Tokio scheduler when IO is not ready, rather than\nblocking. This allows other tasks to run while waiting on IO.\n\nAnother difference is that `AsyncRead` and `AsyncWrite` only contain\ncore methods needed to provide asynchronous reading and writing\nfunctionality. Instead, utility methods are defined in the [`AsyncReadExt`]\nand [`AsyncWriteExt`] extension traits. These traits are automatically\nimplemented for all values that implement `AsyncRead` and `AsyncWrite`\nrespectively.\n\nEnd users will rarely interact directly with `AsyncRead` and\n`AsyncWrite`. Instead, they will use the async functions defined in the\nextension traits. Library authors are expected to implement `AsyncRead`\nand `AsyncWrite` in order to provide types that behave like byte streams.\n\nEven with these differences, Tokio's `AsyncRead` and `AsyncWrite` traits\ncan be used in almost exactly the same manner as the standard library's\n`Read` and `Write`. Most types in the standard library that implement `Read`\nand `Write` have asynchronous equivalents in `tokio` that implement\n`AsyncRead` and `AsyncWrite`, such as [`File`] and [`TcpStream`].\n\nFor example, the standard library documentation introduces `Read` by\n[demonstrating][std_example] reading some bytes from a [`std::fs::File`]. We\ncan do the same with [`tokio::fs::File`][`File`]:\n\n```no_run\nuse tokio::io::{self, AsyncReadExt};\nuse tokio::fs::File;\n\n#[tokio::main]\nasync fn main() -> io::Result<()> {\n    let mut f = File::open(\"foo.txt\").await?;\n    let mut buffer = [0; 10];\n\n    // read up to 10 bytes\n    let n = f.read(&mut buffer).await?;\n\n    println!(\"The bytes: {:?}\", &buffer[..n]);\n    Ok(())\n}\n```\n\n[`File`]: crate::fs::File\n[`TcpStream`]: crate::net::TcpStream\n[`std::fs::File`]: std::fs::File\n[std_example]: std::io#read-and-write\n\n## Buffered Readers and Writers\n\nByte-based interfaces are unwieldy and can be inefficient, as we'd need to be\nmaking near-constant calls to the operating system. To help with this,\n`std::io` comes with [support for _buffered_ readers and writers][stdbuf],\nand therefore, `tokio::io` does as well.\n\nTokio provides an async version of the [`std::io::BufRead`] trait,\n[`AsyncBufRead`]; and async [`BufReader`] and [`BufWriter`] structs, which\nwrap readers and writers. These wrappers use a buffer, reducing the number\nof calls and providing nicer methods for accessing exactly what you want.\n\nFor example, [`BufReader`] works with the [`AsyncBufRead`] trait to add\nextra methods to any async reader:\n\n```no_run\nuse tokio::io::{self, BufReader, AsyncBufReadExt};\nuse tokio::fs::File;\n\n#[tokio::main]\nasync fn main() -> io::Result<()> {\n    let f = File::open(\"foo.txt\").await?;\n    let mut reader = BufReader::new(f);\n    let mut buffer = String::new();\n\n    // read a line into buffer\n    reader.read_line(&mut buffer).await?;\n\n    println!(\"{}\", buffer);\n    Ok(())\n}\n```\n\n[`BufWriter`] doesn't add any new ways of writing; it just buffers every call\nto [`write`](crate::io::AsyncWriteExt::write). However, you **must** flush\n[`BufWriter`] to ensure that any buffered data is written.\n\n```no_run\nuse tokio::io::{self, BufWriter, AsyncWriteExt};\nuse tokio::fs::File;\n\n#[tokio::main]\nasync fn main() -> io::Result<()> {\n    let f = File::create(\"foo.txt\").await?;\n    {\n        let mut writer = BufWriter::new(f);\n\n        // Write a byte to the buffer.\n        writer.write(&[42u8]).await?;\n\n        // Flush the buffer before it goes out of scope.\n        writer.flush().await?;\n\n    } // Unless flushed or shut down, the contents of the buffer is discarded on drop.\n\n    Ok(())\n}\n```\n\n[stdbuf]: std::io#bufreader-and-bufwriter\n[`std::io::BufRead`]: std::io::BufRead\n[`AsyncBufRead`]: crate::io::AsyncBufRead\n[`BufReader`]: crate::io::BufReader\n[`BufWriter`]: crate::io::BufWriter\n\n## Implementing AsyncRead and AsyncWrite\n\nBecause they are traits, we can implement [`AsyncRead`] and [`AsyncWrite`] for\nour own types, as well. Note that these traits must only be implemented for\nnon-blocking I/O types that integrate with the futures type system. In\nother words, these types must never block the thread, and instead the\ncurrent task is notified when the I/O resource is ready.\n\n## Conversion to and from Sink/Stream\n\nIt is often convenient to encapsulate the reading and writing of\nbytes and instead work with a [`Sink`] or [`Stream`] of some data\ntype that is encoded as bytes and/or decoded from bytes. Tokio\nprovides some utility traits in the [tokio-util] crate that\nabstract the asynchronous buffering that is required and allows\nyou to write [`Encoder`] and [`Decoder`] functions working with a\nbuffer of bytes, and then use that [\"codec\"] to transform anything\nthat implements [`AsyncRead`] and [`AsyncWrite`] into a `Sink`/`Stream` of\nyour structured data.\n\n[tokio-util]: https://docs.rs/tokio-util/0.6/tokio_util/codec/index.html\n\n# Standard input and output\n\nTokio provides asynchronous APIs to standard [input], [output], and [error].\nThese APIs are very similar to the ones provided by `std`, but they also\nimplement [`AsyncRead`] and [`AsyncWrite`].\n\nNote that the standard input / output APIs  **must** be used from the\ncontext of the Tokio runtime, as they require Tokio-specific features to\nfunction. Calling these functions outside of a Tokio runtime will panic.\n\n[input]: fn@stdin\n[output]: fn@stdout\n[error]: fn@stderr\n\n# `std` re-exports\n\nAdditionally, [`Error`], [`ErrorKind`], [`Result`], and [`SeekFrom`] are\nre-exported from `std::io` for ease of use.\n\n[`AsyncRead`]: trait@AsyncRead\n[`AsyncWrite`]: trait@AsyncWrite\n[`AsyncReadExt`]: trait@AsyncReadExt\n[`AsyncWriteExt`]: trait@AsyncWriteExt\n[\"codec\"]: https://docs.rs/tokio-util/0.6/tokio_util/codec/index.html\n[`Encoder`]: https://docs.rs/tokio-util/0.6/tokio_util/codec/trait.Encoder.html\n[`Decoder`]: https://docs.rs/tokio-util/0.6/tokio_util/codec/trait.Decoder.html\n[`Error`]: struct@Error\n[`ErrorKind`]: enum@ErrorKind\n[`Result`]: type@Result\n[`Read`]: std::io::Read\n[`SeekFrom`]: enum@SeekFrom\n[`Sink`]: https://docs.rs/futures/0.3/futures/sink/trait.Sink.html\n[`Stream`]: https://docs.rs/futures/0.3/futures/stream/trait.Stream.html\n[`Write`]: std::io::Write","links":{"trait@AsyncRead":"0:169:2255","std::io::Read":"1:4666:3343","std::io#read-and-write":"1:3366:1848","trait@AsyncWrite":"0:248:2259","std::fs::File":"1:3192:128","std::io::Write":"1:4723:2557","type@Result":"1:4078:205","crate::io::AsyncBufRead":"0:127:2253","std::io::BufRead":"1:4748:2365","enum@SeekFrom":"1:11115:2263","struct@Error":"1:4080:127","std::io#bufreader-and-bufwriter":"1:3366:1848","enum@ErrorKind":"1:10979:2262"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:146","0:184","0:224","0:298","0:338","0:342","0:345","0:348","0:351"],"is_stripped":false}},"2:13648:60902":{"id":"2:13648:60902","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:13202:4919","`DoubleEndedIterator`":"2:8591:120","prim@char":"1:15989:3177","str::rmatch_indices":"1:15995:3182"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49730:5211","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:4920","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:251:2529":{"id":"0:251:2529","crate_id":0,"name":"poll_shutdown","span":{"filename":"src/io/async_write.rs","begin":[133,4],"end":[133,96]},"visibility":"default","docs":"Initiates or attempts to shut down this writer, returning success when\nthe I/O connection has completely shut down.\n\nThis method is intended to be used for asynchronous shutdown of I/O\nconnections. For example this is suitable for implementing shutdown of a\nTLS connection or calling `TcpStream::shutdown` on a proxied connection.\nProtocols sometimes need to flush out final pieces of data or otherwise\nperform a graceful shutdown handshake, reading/writing more data as\nappropriate. This method is the hook for such protocols to implement the\ngraceful shutdown logic.\n\nThis `shutdown` method is required by implementers of the\n`AsyncWrite` trait. Wrappers typically just want to proxy this call\nthrough to the wrapped type, and base types will typically implement\nshutdown logic here or just return `Ok(().into())`. Note that if you're\nwrapping an underlying `AsyncWrite` a call to `shutdown` implies that\ntransitively the entire stream has been shut down. After your wrapper's\nshutdown logic has been executed you should shut down the underlying\nstream.\n\nInvocation of a `shutdown` implies an invocation of `flush`. Once this\nmethod returns `Ready` it implies that a flush successfully happened\nbefore the shutdown happened. That is, callers don't need to call\n`flush` before calling `shutdown`. They can rely that by calling\n`shutdown` any pending buffered data will be written out.\n\n# Return value\n\nThis function returns a `Poll<io::Result<()>>` classified as such:\n\n* `Poll::Ready(Ok(()))` - indicates that the connection was\n  successfully shut down and is now safe to deallocate/drop/close\n  resources associated with it. This method means that the current task\n  will no longer receive any notifications due to this method and the\n  I/O object itself is likely no longer usable.\n\n* `Poll::Pending` - indicates that shutdown is initiated but could\n  not complete just yet. This may mean that more I/O needs to happen to\n  continue this shutdown operation. The current task is scheduled to\n  receive a notification when it's otherwise ready to continue the\n  shutdown operation. When woken up this method should be called again.\n\n* `Poll::Ready(Err(e))` - indicates a fatal error has happened with shutdown,\n  indicating that the shutdown operation did not complete successfully.\n  This typically means that the I/O object is no longer usable.\n\n# Errors\n\nThis function can return normal I/O errors through `Err`, described\nabove. Additionally this method may also render the underlying\n`Write::write` method no longer usable (e.g. will return errors in the\nfuture). It's recommended that once `shutdown` is called the\n`write` method is no longer called.\n\n# Panics\n\nThis function will panic if not called within the context of a future's\ntask.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14217:2125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50476:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47742:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"io::Error","id":"1:4080:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:174":{"id":"0:174","crate_id":0,"name":null,"span":{"filename":"src/io/async_read.rs","begin":[76,0],"end":[78,1]},"visibility":{"restricted":{"parent":"0:149:2254","path":"::io::async_read"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsyncRead","id":"0:169:2255","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"2:3310:1915","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsyncRead","id":"0:169:2255","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"items":["0:784:2399"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:183:2399":{"id":"0:183:2399","crate_id":0,"name":"poll_read","span":{"filename":"src/io/async_read.rs","begin":[109,4],"end":[130,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14217:2125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:308:2261","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50476:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:184":{"id":"0:184","crate_id":0,"name":null,"span":{"filename":"src/io/mod.rs","begin":[191,0],"end":[191,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::async_read::AsyncRead","name":"AsyncRead","id":"0:169:2255","glob":false}},"2:13683:2710":{"id":"2:13683:2710","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:13141:4742","`FromStr`":"2:13141:4742"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47742:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:13141:4742","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13141:4742","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:144:2345":{"id":"0:144:2345","crate_id":0,"name":"poll_fill_buf","span":{"filename":"src/io/async_buf_read.rs","begin":[110,4],"end":[112,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14217:2125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50476:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6411:223":{"id":"5:6411:223","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6412:1397"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13574:55920":{"id":"2:13574:55920","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12673:5310"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13595:4127":{"id":"2:13595:4127","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49834:2306","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23922:4976":{"id":"2:23922:4976","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:23923:4979"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:23918:4630","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"2:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3204:681":{"id":"2:3204:681","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:782:2355":{"id":"0:782:2355","crate_id":0,"name":"consume","span":{"filename":"src/io/async_buf_read.rs","begin":[82,4],"end":[82,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["amt",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3178:228":{"id":"2:3178:228","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3180:127","2:3181:1417"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:268":{"id":"0:268","crate_id":0,"name":null,"span":{"filename":"src/io/async_write.rs","begin":[259,0],"end":[288,1]},"visibility":{"restricted":{"parent":"0:227:2258","path":"::io::async_write"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["poll_write_vectored","is_write_vectored"],"trait":{"name":"AsyncWrite","id":"0:248:2259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"5:7780:234","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}},"items":["0:269:2476","0:270:2542","0:271:2554","0:272:2483","0:273:2529"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:5749:4616":{"id":"1:5749:4616","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5750:6632","1:5751:56110","1:5752:56111"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13665:60910":{"id":"2:13665:60910","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:15989:3177","self::pattern":"2:13202:4919"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:4920","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:786:2438":{"id":"0:786:2438","crate_id":0,"name":"poll_complete","span":{"filename":"src/io/async_seek.rs","begin":[62,4],"end":[62,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14217:2125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50476:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3352:3297":{"id":"2:3352:3297","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3354:181","2:3355:558"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5819:4623":{"id":"1:5819:4623","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5820:6632"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3216:127":{"id":"2:3216:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:38930:4655","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"2:13618:33030":{"id":"2:13618:33030","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:13202:4919","prim@char":"1:15989:3177"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:12994:5176","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:4920","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:301:2260":{"id":"0:301:2260","crate_id":0,"name":"read_buf","span":{"filename":"src/io/read_buf.rs","begin":[1,0],"end":[295,1]},"visibility":{"restricted":{"parent":"0:106:1848","path":"::io"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:308:2261"],"is_stripped":true}},"0:223:2438":{"id":"0:223:2438","crate_id":0,"name":"poll_complete","span":{"filename":"src/io/async_seek.rs","begin":[87,4],"end":[89,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14217:2125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50476:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:322:2600":{"id":"0:322:2600","crate_id":0,"name":"initialized_mut","span":{"filename":"src/io/read_buf.rs","begin":[101,4],"end":[106,5]},"visibility":"public","docs":"Returns a mutable reference to the initialized portion of the buffer.\n\nThis includes the filled portion.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4723:2557":{"id":"1:4723:2557","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4724:2559","1:4725:2558","1:4727:2554","1:4728:2560","1:4729:4143","1:4730:4144","1:4731:4145","1:4740:4089"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13686:56209":{"id":"2:13686:56209","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:345":{"id":"0:345","crate_id":0,"name":null,"span":{"filename":"src/io/mod.rs","begin":[205,25],"end":[205,34]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"std::io::ErrorKind","name":"ErrorKind","id":"1:10979:2262","glob":false}},"2:13567:2545":{"id":"2:13567:2545","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:298":{"id":"0:298","crate_id":0,"name":null,"span":{"filename":"src/io/mod.rs","begin":[197,0],"end":[197,38]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"self::async_write::AsyncWrite","name":"AsyncWrite","id":"0:248:2259","glob":false}},"2:3401:3308":{"id":"2:3401:3308","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3403:181","2:3404:353"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13607:2544":{"id":"2:13607:2544","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"prim@char":"1:15989:3177","self::pattern":"2:13202:4919","`None`":"2:47617:176"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47617:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:4920","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:270:2542":{"id":"0:270:2542","crate_id":0,"name":"poll_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[269,4],"end":[275,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14217:2125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["bufs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"IoSlice","id":"1:11103:2441","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50476:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:351":{"id":"0:351","crate_id":0,"name":null,"span":{"filename":"src/io/mod.rs","begin":[205,44],"end":[205,52]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"std::io::SeekFrom","name":"SeekFrom","id":"1:11115:2263","glob":false}},"0:796:2554":{"id":"0:796:2554","crate_id":0,"name":"is_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[222,4],"end":[222,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3310:1915":{"id":"2:3310:1915","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2888:104":{"id":"2:2888:104","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2889:408","2:2890:410"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:257":{"id":"0:257","crate_id":0,"name":null,"span":{"filename":"src/io/async_write.rs","begin":[217,0],"end":[219,1]},"visibility":{"restricted":{"parent":"0:227:2258","path":"::io::async_write"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsyncWrite","id":"0:248:2259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"2:3310:1915","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["poll_write_vectored","is_write_vectored"],"trait":{"name":"AsyncWrite","id":"0:248:2259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2360","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:789:2476","0:790:2542","0:791:2554","0:792:2483","0:793:2529"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13584:56290":{"id":"2:13584:56290","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11082:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11082:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3169:74":{"id":"2:3169:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3171:2362"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:219:2438":{"id":"0:219:2438","crate_id":0,"name":"poll_complete","span":{"filename":"src/io/async_seek.rs","begin":[78,4],"end":[80,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14217:2125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50476:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u64"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:133":{"id":"0:133","crate_id":0,"name":null,"span":{"filename":"src/io/async_buf_read.rs","begin":[81,0],"end":[83,1]},"visibility":{"restricted":{"parent":"0:107:2252","path":"::io::async_buf_read"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsyncBufRead","id":"0:127:2253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"2:3310:1915","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsyncBufRead","id":"0:127:2253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"items":["0:781:2345","0:782:2355"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:355:2663":{"id":"0:355:2663","crate_id":0,"name":"addr","span":{"filename":"src/net/addr.rs","begin":[1,0],"end":[333,1]},"visibility":{"restricted":{"parent":"0:354:1849","path":"::net"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:381:2665"],"is_stripped":true}},"0:103":{"id":"0:103","crate_id":0,"name":null,"span":{"filename":"src/future/mod.rs","begin":[9,0],"end":[9,25]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"poll_fn::poll_fn","name":"poll_fn","id":"0:92:2117","glob":false}},"2:3278:217":{"id":"2:3278:217","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:172":{"id":"0:172","crate_id":0,"name":null,"span":{"filename":"src/io/async_read.rs","begin":[72,0],"end":[74,1]},"visibility":{"restricted":{"parent":"0:149:2254","path":"::io::async_read"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsyncRead","id":"0:169:2255","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"2:3310:1915","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsyncRead","id":"0:169:2255","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2360","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:783:2399"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:8071:4864":{"id":"2:8071:4864","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8072:59933","2:8073:59934","2:8074:59931","2:8075:59929","2:8076:59935","2:8077:59932","2:8078:59930"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2888:104","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2967:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:7817:4763":{"id":"1:7817:4763","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7818:57952"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:791:2554":{"id":"0:791:2554","crate_id":0,"name":"is_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[218,4],"end":[218,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3213-0:308:2261":{"id":"b:2:3213-0:308:2261","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"2:3172:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"2:3182:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:308:2261","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["2:3216:127","2:3217:1416"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:10453:3556":{"id":"2:10453:3556","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10454:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:273:2529":{"id":"0:273:2529","crate_id":0,"name":"poll_shutdown","span":{"filename":"src/io/async_write.rs","begin":[285,4],"end":[287,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14217:2125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50476:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13593:33173":{"id":"2:13593:33173","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:15995:3182"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49854:5217","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:259":{"id":"0:259","crate_id":0,"name":null,"span":{"filename":"src/io/async_write.rs","begin":[221,0],"end":[223,1]},"visibility":{"restricted":{"parent":"0:227:2258","path":"::io::async_write"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsyncWrite","id":"0:248:2259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"2:3310:1915","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["poll_write_vectored","is_write_vectored"],"trait":{"name":"AsyncWrite","id":"0:248:2259","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"items":["0:794:2476","0:795:2542","0:796:2554","0:797:2483","0:798:2529"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:142":{"id":"0:142","crate_id":0,"name":null,"span":{"filename":"src/io/async_buf_read.rs","begin":[109,0],"end":[117,1]},"visibility":{"restricted":{"parent":"0:107:2252","path":"::io::async_buf_read"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"2:3166:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"2:3310:1915","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsyncBufRead","id":"0:127:2253","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"io::Cursor","id":"1:10900:2364","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:144:2345","0:145:2355"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:107:2252":{"id":"0:107:2252","crate_id":0,"name":"async_buf_read","span":{"filename":"src/io/async_buf_read.rs","begin":[1,0],"end":[117,1]},"visibility":{"restricted":{"parent":"0:106:1848","path":"::io"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:127:2253"],"is_stripped":true}},"0:180:2399":{"id":"0:180:2399","crate_id":0,"name":"poll_read","span":{"filename":"src/io/async_read.rs","begin":[95,4],"end":[105,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["_cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14217:2125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:308:2261","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50476:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11082:214":{"id":"2:11082:214","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:11084:181","2:11085:2757","2:11086:2358","2:11087:56289","2:11088:56290","2:11089:753","2:11090:754"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3274:2359","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:11073:4630","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3384:3305":{"id":"2:3384:3305","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3386:1103"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10449:3550":{"id":"2:10449:3550","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10450:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4748:2365":{"id":"1:4748:2365","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4749:2366","1:4750:2355","1:4751:4125","1:4753:3346","1:4754:4126","1:4756:2287","1:4757:4127"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Read","id":"1:4666:3343","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13692:60915":{"id":"2:13692:60915","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:15989:3177"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:49897:5221","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3281:220":{"id":"2:3281:220","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5741:4615":{"id":"1:5741:4615","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5742:59029","1:5743:59031","1:5744:59030","1:5745:59032"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:9365:4675":{"id":"1:9365:4675","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9366:57931","1:9367:57932","1:9368:57933","1:9369:57934","1:9370:57935","1:9371:40279","1:9372:57930"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10587:4630","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:54:1005":{"id":"0:54:1005","crate_id":0,"name":"pin","span":{"filename":"src/macros/pin.rs","begin":[125,0],"end":[144,1]},"visibility":"public","docs":"Pins a value on the stack.\n\nCalls to `async fn` return anonymous [`Future`] values that are `!Unpin`.\nThese values must be pinned before they can be polled. Calling `.await` will\nhandle this, but consumes the future. If it is required to call `.await` on\na `&mut _` reference, the caller is responsible for pinning the future.\n\nPinning may be done by allocating with [`Box::pin`] or by using the stack\nwith the `pin!` macro.\n\nThe following will **fail to compile**:\n\n```compile_fail\nasync fn my_async_fn() {\n    // async logic here\n}\n\n#[tokio::main]\nasync fn main() {\n    let mut future = my_async_fn();\n    (&mut future).await;\n}\n```\n\nTo make this work requires pinning:\n\n```\nuse tokio::pin;\n\nasync fn my_async_fn() {\n    // async logic here\n}\n\n#[tokio::main]\nasync fn main() {\n    let future = my_async_fn();\n    pin!(future);\n\n    (&mut future).await;\n}\n```\n\nPinning is useful when using `select!` and stream operators that require `T:\nStream + Unpin`.\n\n[`Future`]: trait@std::future::Future\n[`Box::pin`]: std::boxed::Box::pin\n\n# Usage\n\nThe `pin!` macro takes **identifiers** as arguments. It does **not** work\nwith expressions.\n\nThe following does not compile as an expression is passed to `pin!`.\n\n```compile_fail\nasync fn my_async_fn() {\n    // async logic here\n}\n\n#[tokio::main]\nasync fn main() {\n    let mut future = pin!(my_async_fn());\n    (&mut future).await;\n}\n```\n\n# Examples\n\nUsing with select:\n\n```\nuse tokio::{pin, select};\nuse tokio_stream::{self as stream, StreamExt};\n\nasync fn my_async_fn() {\n    // async logic here\n}\n\n#[tokio::main]\nasync fn main() {\n    let mut stream = stream::iter(vec![1, 2, 3, 4]);\n\n    let future = my_async_fn();\n    pin!(future);\n\n    loop {\n        select! {\n            _ = &mut future => {\n                // Stop looping `future` will be polled after completion\n                break;\n            }\n            Some(val) = stream.next() => {\n                println!(\"got value = {}\", val);\n            }\n        }\n    }\n}\n```\n\nBecause assigning to a variable followed by pinning is common, there is also\na variant of the macro that supports doing both in one go.\n\n```\nuse tokio::{pin, select};\n\nasync fn my_async_fn() {\n    // async logic here\n}\n\n#[tokio::main]\nasync fn main() {\n    pin! {\n        let future1 = my_async_fn();\n        let future2 = my_async_fn();\n    }\n\n    select! {\n        _ = &mut future1 => {}\n        _ = &mut future2 => {}\n    }\n}\n```","links":{"trait@std::future::Future":"2:13915:138","std::boxed::Box::pin":"5:432:2360"},"attrs":["#[macro_export]"],"deprecation":null,"kind":"macro","inner":"macro_rules! pin {\n    ($($x:ident),*) => { ... };\n    ($(\n            let $x:ident = $init:expr;\n    )*) => { ... };\n}"},"2:10451:3549":{"id":"2:10451:3549","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10452:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:216":{"id":"0:216","crate_id":0,"name":null,"span":{"filename":"src/io/async_seek.rs","begin":[69,0],"end":[81,1]},"visibility":{"restricted":{"parent":"0:187:2256","path":"::io::async_seek"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"DerefMut","id":"2:3505:2317","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"2:3310:1915","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Target","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"","id":"2:3492:116","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"AsyncSeek","id":"0:208:2257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"AsyncSeek","id":"0:208:2257","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"items":["0:218:2430","0:219:2438"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:320:2593":{"id":"0:320:2593","crate_id":0,"name":"take","span":{"filename":"src/io/read_buf.rs","begin":[80,4],"end":[84,5]},"visibility":"public","docs":"Returns a new `ReadBuf` comprised of the unfilled section up to `n`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"ReadBuf","id":"0:308:2261","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13575:60894":{"id":"2:13575:60894","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:411":{"id":"0:411","crate_id":0,"name":null,"span":{"filename":"src/net/addr.rs","begin":[104,0],"end":[104,41]},"visibility":{"restricted":{"parent":"0:355:2663","path":"::net::addr"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ToSocketAddrs","id":"0:381:2665","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"tuple","inner":[{"kind":"resolved_path","inner":{"name":"Ipv4Addr","id":"1:11244:2680","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},{"kind":"primitive","inner":"u16"}]},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:789:2476":{"id":"0:789:2476","crate_id":0,"name":"poll_write","span":{"filename":"src/io/async_write.rs","begin":[218,4],"end":[218,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14217:2125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50476:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13677:60912":{"id":"2:13677:60912","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13202:4919","prim@char":"1:15989:3177"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:4920","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:266:2483":{"id":"0:266:2483","crate_id":0,"name":"poll_flush","span":{"filename":"src/io/async_write.rs","begin":[250,4],"end":[252,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14217:2125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50476:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"io::Result","id":"1:4078:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8591:120":{"id":"2:8591:120","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8592:4058","2:8593:4059","2:8594:4060","2:8595:4061","2:8599:4062","2:8602:4063"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8748:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:401":{"id":"0:401","crate_id":0,"name":null,"span":{"filename":"src/net/addr.rs","begin":[77,0],"end":[77,38]},"visibility":{"restricted":{"parent":"0:355:2663","path":"::net::addr"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ToSocketAddrs","id":"0:381:2665","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SocketAddrV6","id":"1:11207:2684","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3217:1416":{"id":"2:3217:1416","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47742:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"2:3182:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13662:60909":{"id":"2:13662:60909","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:15989:3177","self::pattern":"2:13202:4919"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13212:4920","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13212:4920","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13232:4918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:249:2476":{"id":"0:249:2476","crate_id":0,"name":"poll_write","span":{"filename":"src/io/async_write.rs","begin":[58,4],"end":[62,40]},"visibility":"default","docs":"Attempt to write bytes from `buf` into the object.\n\nOn success, returns `Poll::Ready(Ok(num_bytes_written))`. If successful,\nthen it must be guaranteed that `n <= buf.len()`. A return value of `0`\ntypically means that the underlying object is no longer able to accept\nbytes and will likely not be able to in the future as well, or that the\nbuffer provided is empty.\n\nIf the object is not ready for writing, the method returns\n`Poll::Pending` and arranges for the current task (via\n`cx.waker()`) to receive a notification when the object becomes\nwritable or is closed.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"2:47734:188","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"2:14217:2125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}],["buf",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"2:50476:190","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47742:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}},{"type":{"kind":"resolved_path","inner":{"name":"io::Error","id":"1:4080:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:3516:2882":{"id":"2:3516:2882","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3517:578"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5008:2665":{"id":"1:5008:2665","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5009:2699","1:5010:2664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:348":{"id":"0:348","crate_id":0,"name":null,"span":{"filename":"src/io/mod.rs","begin":[205,36],"end":[205,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"std::io::Result","name":"Result","id":"1:4078:205","glob":false}},"2:10440:109":{"id":"2:10440:109","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10441:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9028:4158":{"id":"2:9028:4158","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8748:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:9408:3615":{"id":"2:9408:3615","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:271:2554":{"id":"0:271:2554","crate_id":0,"name":"is_write_vectored","span":{"filename":"src/io/async_write.rs","begin":[277,4],"end":[279,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3740:3324":{"id":"2:3740:3324","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3742:55117"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:427:2694":{"id":"0:427:2694","crate_id":0,"name":"sealed","span":{"filename":"src/net/addr.rs","begin":[252,0],"end":[252,21]},"visibility":"crate","docs":"The contents of this trait are intended to remain private and __not__\npart of the `ToSocketAddrs` public API. The details will change over\ntime.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:441:2698"],"is_stripped":true}},"2:3279:106":{"id":"2:3279:106","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2888:104","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"paths":{"6:533:8491":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:25001:5248":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"9:776:5516":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"2:53319:4986":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:13507:7156":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:9160:6092":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:37750:178":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:13763:7240":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:12139:4697":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:11172:2682":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"17:9087:47842":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:3366:1848":{"crate_id":1,"path":["std","io"],"kind":"module"},"17:12957:6963":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:4573:7327":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"5:923:5438":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"5:920:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:5998:5714":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"16:5257:6515":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"6:4538:8984":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"5:1939:3464":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"16:7826:5077":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:4379:8920":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"18:774:6407":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:2937:5980":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"12:2066:4688":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:7139:3605":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:10614:2765":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:4400:4787":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"6:4493:8966":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:15996:3183":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"6:1912:41956":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:4723:2557":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"6:4067:8807":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:15988:3176":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:11130:6618":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:10688:146":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:8496:202":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:49490:5195":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:5111:3412":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"12:2269:3474":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:3740:3324":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:22697:59435":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:46753:5039":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:50290:5229":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:53655:7837":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"16:7079:5786":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:2171:4686":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"12:2404:62083":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"6:4230:8862":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:2905:5957":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"12:940:3469":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:10545:6553":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"12:2032:2699":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:10639:2764":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"6:4088:8818":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:3281:220":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:13278:4926":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:51140:7764":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:49161:5352":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:47129:7747":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:48129:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:51685:5007":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:6243:9333":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"5:7111:6268":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"2:56435:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:5366:9113":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"5:374:4388":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"18:0:3167":{"crate_id":18,"path":["memchr"],"kind":"module"},"14:231:5360":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:13138:7063":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:47102:3431":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:10682:12022":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:6481:4633":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:49458:5192":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"16:4271:7319":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:10489:6548":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"17:13463:7142":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"5:5415:3335":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"0:354:1849":{"crate_id":0,"path":["tokio","net"],"kind":"module"},"6:1694:8665":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"12:1162:5599":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:1531:8557":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"5:3839:6254":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:24770:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"6:5455:9148":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"9:157:5486":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"17:4157:6123":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:13794:7247":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:8849:6089":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:12740:6309":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:14278:201":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"6:4110:8831":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:2027:145":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:11256:6623":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"16:3743:7315":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:994:2760":{"crate_id":1,"path":["std","thread","park_timeout"],"kind":"function"},"6:4012:8786":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:24198:9490":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:4439:7324":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"16:5217:5949":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:3729:224":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"5:8121:5440":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:6937:9368":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:12646:6888":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:11102:47846":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:46020:195":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"6:4055:8803":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:10068:6022":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"14:194:46185":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:4716:7332":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:12620:6886":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:11393:5177":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:10440:109":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:8861:7861":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:46824:5045":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:6089:5764":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:48391:3556":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"6:5288:9063":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:13522:7160":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"16:7415:5716":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"16:7247:5729":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:46403:6347":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"16:6342:5772":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"6:1748:8688":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:10136:6527":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"6:1634:8617":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:13782:4765":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"6:4005:8782":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:3352:3297":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"16:4660:7330":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:10223:6043":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:9636:6523":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:3734:137":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:1704:8671":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:2397:7854":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"6:1567:8573":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:56448:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:4:979":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"16:7238:5715":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:11547:6671":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"6:5274:9062":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:11212:6093":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:12883:5206":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:12015:6764":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:1041:2315":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:6931:9367":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:3277:218":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:23287:4979":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:11563:6676":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:4008:6440":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:3178:228":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"9:963:5534":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:15220:4717":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:23141:4979":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:51615:5019":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:12731:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:53403:5024":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:4432:2284":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:57736:7844":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"5:3375:5372":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:10899:6601":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"16:2839:5955":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:783:6304":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"2:24869:165":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:51336:5018":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:10586:6558":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:52163:5016":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:10728:3482":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:11278:3396":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"1:2456:7856":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:12920:5209":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:9706:6524":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:24214:7703":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:50561:4386":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:13377:7119":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:24704:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:10688:2742":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"16:6504:5777":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:6774:59711":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"2:51455:7767":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:51474:4983":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:8001:5036":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:10211:6544":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:12716:6896":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:47716:3613":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:5208:3415":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"6:157:40651":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:46582:5272":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:13196:7078":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:47095:7694":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:24671:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"6:6205:9314":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:6881:4629":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:12009:4757":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"16:6557:5778":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:11713:6702":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"5:3488:3464":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"2:25370:5154":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:9529:4920":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:11374:3394":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"6:5293:9064":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:13515:7159":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:1428:3460":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"16:4467:7325":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:2433:7855":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:3323:3705":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"16:5941:5762":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"6:4135:8844":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:6914:9362":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"6:4028:8791":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:48213:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:16012:3197":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"5:1663:3466":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:13029:7022":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:5797:4619":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:5952:4839":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:14566:9499":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:22952:5100":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"12:2045:3464":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"5:1674:3467":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:14227:3289":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:16010:3195":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:13584:7175":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:22750:59563":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:16000:3185":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:4315:8885":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:9756:62102":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"5:5536:2750":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:10595:7697":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"16:6026:5691":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"16:6980:5783":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:88:40585":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"17:299:6432":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:6656:5994":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"12:0:3162":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"17:9539:6090":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:11443:4808":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:3325:4431":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"5:4242:6254":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:2159:2700":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:9796:62098":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:294:6431":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"18:152:54132":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"5:1195:60637":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:2594:7858":{"crate_id":1,"path":["std","error","from","StringError"],"kind":"struct"},"1:4473:3359":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:49500:5196":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:7814:4762":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:5698:5755":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:1149:7846":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"14:189:7594":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:3275:3418":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:3182:227":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:51783:5002":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:10445:6477":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"15:230:5621":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:11195:2683":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"5:8197:2700":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"16:3199:5963":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"16:5498:5747":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:11234:6091":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"16:2861:5956":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"18:678:142":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:7354:186":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:11671:6697":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"6:6057:9251":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"5:7824:6268":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:28180:4963":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"16:6490:5776":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:15338:2672":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:5443:5745":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:6277:5770":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:3175:135":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"6:3877:8699":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:10394:6100":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:11674:2699":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"16:7141:5792":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"5:3759:2699":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:24327:40001":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:49888:4666":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"5:7453:6254":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"18:766:6419":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"5:1644:3462":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:7685:4755":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"6:5210:9030":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:51415:4994":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:51437:4998":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"16:6173:5768":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:1456:2738":{"crate_id":2,"path":["core","hint","spin_loop"],"kind":"function"},"17:0:3166":{"crate_id":17,"path":["object"],"kind":"module"},"6:626:8546":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:56409:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:1764:8693":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:10464:6046":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:5741:4615":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:48922:7751":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:46440:5106":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"3:0:430":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:12298:3566":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:56461:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:5788:6254":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"16:5745:5757":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:4628:7329":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:11437:3399":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"5:2200:6256":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"12:1703:5614":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:5567:9182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:15955:58914":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:49471:5193":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:3103:4630":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"16:5948:5954":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:53578:7834":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:8049:3522":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"12:2052:4686":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:48738:4218":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"2:10449:3550":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:13233:7087":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:9786:6526":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:9035:4863":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:527:8488":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:49960:4921":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:11262:2699":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:14217:2125":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"12:162:5603":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"5:1472:3474":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:13418:4804":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:11956:6756":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:7831:1360":{"crate_id":1,"path":["std","sync"],"kind":"module"},"1:15202:4710":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:1619:3473":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"5:4215:3463":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:11282:47847":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:7637:4752":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:14232:2284":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"16:7295:5701":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"5:6764:3335":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:10104:6128":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:50519:3288":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:13899:7277":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"5:8295:5393":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"18:837:4922":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"5:3329:2699":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:23276:4630":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:9656:6301":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"2:4965:2857":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:37774:4128":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"5:5833:5363":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:46424:5104":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"5:1235:5424":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:13147:7064":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"16:6035:5734":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:49630:5207":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"5:5315:200":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"5:3038:4122":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:15989:3177":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"6:6908:9361":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:12469:6855":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:46544:5334":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:13565:7170":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:6979:9376":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:49165:5351":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:2957:177":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:9326:6030":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:3522:131":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:10599:56064":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"2:13212:4920":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:48255:3428":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:3435:3316":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:8995:3439":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"6:1662:8642":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:12226:2755":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:13708:7221":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:12255:3437":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"6:6671:9348":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:988:2758":{"crate_id":1,"path":["std","thread","yield_now"],"kind":"function"},"2:10443:109":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"1:12245:3432":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:2283:4969":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:14099:6310":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"17:11591:6680":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:8616:3627":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:12125:4694":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:13887:7275":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:894:3534":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:11545:5182":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:50458:201":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"6:5331:9092":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:5165:3414":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:12143:6568":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:52085:5028":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:12282:6809":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:4526:8979":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:12360:6836":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:24363:5303":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:5635:1896":{"crate_id":1,"path":["std","os"],"kind":"module"},"1:2934:180":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"12:979:3472":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:6959:4641":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:4740:4973":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"5:2218:5374":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:9196:7861":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"2:47734:188":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:13180:7075":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:3364:3299":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:7131:5791":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"16:7449:5704":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:3746:3326":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:4885:3419":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:12348:6834":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"5:4599:6257":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"2:50286:5226":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"17:12455:6853":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:13202:4919":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:3104:4904":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:1488:3465":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:13369:7117":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:10253:6085":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:3337:3296":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:5101:3411":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"5:1011:2699":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:11168:6620":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:11653:6688":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:24377:5262":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:10876:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:10974:4466":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:6954:9373":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:13919:4756":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"16:6482:5989":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:10962:6609":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:1600:8596":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:11327:55875":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"2:53593:7835":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:53441:4989":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"16:3103:5971":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"12:379:5606":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:1472:3463":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:5807:4620":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:24935:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"12:1147:3475":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"16:7110:5789":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:52445:5000":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:49388:5188":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:3347:3298":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"14:56:6649":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:1588:8588":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:11890:6736":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"6:4256:8864":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:3372:3306":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:46172:5078":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:16002:3187":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:13331:7110":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:4392:8925":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"14:0:3163":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"6:4160:8857":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:6407:5773":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"5:432:2360":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:1015:205":{"crate_id":1,"path":["std","thread","Result"],"kind":"typedef"},"2:22731:59558":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"16:3297:6019":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:13271:7093":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:2292:3735":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:10147:6540":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"16:7471:5692":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:7684:5706":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"6:1558:8568":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:5156:3413":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:46537:5333":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:12674:6892":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:11142:6619":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:47793:3460":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"16:6130:5766":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"6:4446:8946":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:12063:9496":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"6:3993:8773":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:13539:7164":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:5605:5098":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"18:801:6145":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"5:3748:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"16:3314:5946":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:14627:2441":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:11381:6630":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"5:1685:194":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:5522:2674":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:12171:4699":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"6:3883:8700":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:5149:8988":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:4075:8812":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:5819:4623":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"6:5260:9051":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"13:0:3156":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:50076:4932":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"16:4599:7328":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"15:269:5626":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"4:0:3157":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:696:2763":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"6:6120:9261":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:56396:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:23082:4676":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:46165:5077":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"2:48377:3549":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"18:811:6146":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:4783:4383":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:12921:6932":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"5:8278:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:3896:8709":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:7817:4763":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:9365:4675":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:24356:9493":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:11680:4737":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:46725:5055":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:161:40652":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:5811:4621":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:11314:6034":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:12027:4759":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:11725:6703":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:23824:59438":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:1642:3475":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:24737:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"6:565:8513":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:11784:6726":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"10:0:3160":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:9988:47891":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:12015:181":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:32458:2562":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:12543:6866":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"16:5176:7341":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:11457:6649":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"18:744:62107":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:47785:2699":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:2888:104":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"17:607:6435":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:10028:6535":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:12026:6765":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:50322:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:8947:4821":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"17:12318:6815":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:10829:4426":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:3521:7313":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:46145:4659":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:9183:6038":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:15214:4716":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"18:651:6154":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"13:120:46157":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:52239:5023":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"5:1441:3473":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"12:928:3465":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:3717:3322":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"9:1075:5537":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:12157:6790":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:11937:6751":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"5:4643:6259":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"6:3907:8717":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:0:798":{"crate_id":6,"path":["libc"],"kind":"module"},"5:8168:194":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"14:250:7601":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"5:3772:3460":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:32624:59892":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"17:12557:6868":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:24803:3526":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:46893:5056":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:53616:7836":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"16:3366:5972":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"6:4038:8797":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"5:8338:5395":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:10684:142":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"1:5008:2665":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"5:1457:3475":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:13908:7281":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:12041:4760":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:10455:6047":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:3431:3315":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:4670:3335":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"6:1740:8684":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:46454:5335":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:50549:4656":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:4732:58870":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:11350:3397":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"17:13428:7131":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:11094:2308":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:50154:4935":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:4512:3357":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:3758:4968":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:11418:4840":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:10721:7867":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:23918:4630":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:49556:5203":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:10667:12020":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:11465:9233":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:3519:130":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:1157:12023":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:46106:3320":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:15188:4709":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:12770:6910":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:46530:5332":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"5:7620:4198":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:13481:7146":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:11582:2711":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"16:6858:6000":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:46667:7741":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"14:47:7594":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:13155:7065":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"6:1727:8681":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:539:8493":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:53499:7829":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:11615:6684":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:13432:40242":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"6:4416:8933":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"16:5721:5756":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:11073:4630":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:12673:5310":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"16:5668:5753":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"16:7169:5711":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:12209:6796":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:49684:5182":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:50028:4931":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"5:1843:6254":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:9466:6429":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:46763:5040":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:46795:5043":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:10851:6598":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:50314:5227":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"16:5566:5749":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"12:1881:145":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:3417:3312":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"6:4287:8872":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"16:6141:5767":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:46703:5054":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"15:0:3164":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:5398:2669":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:11461:4649":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:4394:4785":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"18:704:6407":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:10474:6307":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"5:5889:6266":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"2:49538:5091":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:1733:4803":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:11002:6612":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:47877:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"5:792:108":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:15739:6314":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:11103:2441":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:21:672":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:49844:5216":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"12:815:3467":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"6:4362:8909":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"5:8309:5273":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:47835:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:49524:5277":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"5:2310:5448":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"14:11:7594":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:53514:7830":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:900:3535":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:47120:2307":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:580:8522":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:48087:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"16:5412:5743":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:10390:2557":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:10127:6050":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:1721:8678":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:46523:5220":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:5974:4841":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:11579:6677":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:7529:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"17:13747:7236":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:11922:6746":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"12:2072:4689":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"2:52005:7778":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:6184:9301":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:4607:2307":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:50511:3287":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"16:6050:5763":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:3525:132":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:9579:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"1:12240:2752":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:3427:3314":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"6:3981:8768":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"16:5902:5760":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:5447:9146":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:49863:5218":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:4752:102":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"16:3129:5970":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"12:1183:5600":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"16:7721:5707":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:3440:3317":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:10115:6129":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:2793:4654":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:10723:2743":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:51206:5013":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:16011:3196":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:51230:5005":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:51160:7765":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:2512:6101":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:51829:4987":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:13735:7233":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"18:611:6155":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:14798:7867":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:51951:7776":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"6:4340:8898":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:15110:7910":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:12573:6872":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:23001:4630":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:10730:3347":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"16:7868:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:8556:3628":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:9587:62099":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"2:3492:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"5:1560:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:10975:6610":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:10859:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"12:2392:8463":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:8503:4695":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:50103:4933":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:11146:2310":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"16:5649:5752":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:12406:6846":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:47742:205":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:11261:2681":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"2:49445:5053":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"5:4699:6259":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"18:739:6414":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:11530:6669":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"6:4402:8928":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:4775:7334":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:6719:9246":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:12130:6786":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:3682:3351":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"5:6652:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:3368:3302":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:46914:5051":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:47919:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:10660:48029":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:6707:4618":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"5:1486:3476":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:11514:3606":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:3384:3305":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"0:106:1848":{"crate_id":0,"path":["tokio","io"],"kind":"module"},"6:1680:8654":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:49748:5212":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"12:183:5607":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:4434:3358":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"12:1121:3474":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"18:694:6160":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:6518:5710":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:4179:8858":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"5:7780:234":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:24902:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:11622:4734":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"16:3051:6017":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:14802:4647":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"17:10015:6534":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:8311:3522":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"2:3279:106":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:3577:3318":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"16:547:5939":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:11691:4738":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:15960:12024":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:13427:7699":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"16:6873:3126":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:11701:6701":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:7754:4758":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:32464:3385":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"16:3243:5965":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"5:6672:2750":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:46772:5041":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:13961:7290":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:6229:9324":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:11423:4843":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:22988:4964":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"5:1091:6254":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:51807:4984":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:46501:4666":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:9161:2753":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:6856:9358":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:48702:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"16:7121:5790":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:50011:4930":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:4032:4468":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:11504:5180":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"5:7642:4199":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:10988:6611":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:991:2761":{"crate_id":1,"path":["std","thread","sleep"],"kind":"function"},"5:8146:60691":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:47801:2700":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:12959:5213":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"16:6468:5775":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:12055:4761":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"16:7063:5785":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:14238:2282":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:23078:4630":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"12:1784:6252":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"16:6643:5993":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:9958:62097":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:51904:7775":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:4509:8971":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:12183:6793":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:53117:5017":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:5959:5686":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:9676:62095":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:49702:5183":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:12205:6282":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"16:4803:7335":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:5923:5761":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"9:603:45688":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"9:722:5470":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"1:14546:4651":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"16:6331:5618":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"5:7379:2700":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"5:3970:6254":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"9:809:2711":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:13472:7145":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:56383:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:6643:9345":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:10459:3554":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:9920:6528":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:46687:5053":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:22729:59562":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:50318:5228":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"12:1666:5612":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:15118:4766":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:10451:3549":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"16:7379:5718":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:12431:6850":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:48635:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"5:7257:6254":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"18:136:54131":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"6:6135:9265":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:10892:3355":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:49854:5217":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"16:7754:5798":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"5:8361:216":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:53007:4997":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:12158:4698":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:49648:5208":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"12:2398:8464":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:12196:6794":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:22899:5088":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"5:7849:6274":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"12:869:3463":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:13957:4758":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:10775:6595":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:8902:47837":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:6809:4650":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:4078:205":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"2:9916:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:3658:6284":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:8506:4960":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:10643:6563":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:5749:4616":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"5:3882:2364":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:13915:138":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"16:7100:5788":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:4485:8964":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:45906:3327":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:9361:6426":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:50310:5233":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"6:4474:8958":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"7:38:45510":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:9409:3614":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:10082:6126":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:4208:8860":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"12:1256:3476":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:13774:7244":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:47649:2717":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:14945:6312":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:618:8541":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:681:6436":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"9:692:5469":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"17:9873:6527":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:46610:5274":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"16:6159:5698":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:5488:9156":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"12:559:143":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:4510:2282":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:4397:4786":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:15483:5630":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"16:2772:5981":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:1530:3472":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"12:472:62085":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:3396:3307":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:10587:4630":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:22684:4128":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"18:790:6144":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:15995:3182":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"16:4495:7326":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:47961:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:10949:6608":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:45980:196":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:3516:2882":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"6:3987:8770":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"18:621:6406":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:1651:3476":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:5974:9200":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"12:2036:2700":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:10516:6549":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:52865:5029":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"9:927:45613":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"6:1544:8563":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"5:1597:2699":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"0:775:1894":{"crate_id":0,"path":["tokio","stream"],"kind":"module"},"16:4198:7318":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:8432:5416":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"1:1633:3474":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:13817:7260":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"5:3044:8060":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"16:4975:7340":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:10801:6119":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:46040:198":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"5:0:277":{"crate_id":5,"path":["alloc"],"kind":"module"},"6:6007:9223":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:49802:5215":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:3278:217":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:11431:5178":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:984:1864":{"crate_id":1,"path":["std","thread","spawn"],"kind":"function"},"16:5289:5694":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"5:3048:8061":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"18:782:6407":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"5:69:4193":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:4098:8825":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:6250:9336":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:10846:4428":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:10058:6132":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"5:5875:6263":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"2:3812:3286":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"5:2262:5426":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:7896:5063":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:5439:9144":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:8760:3438":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:1621:8610":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:14620:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"9:1020:5536":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"5:8160:2700":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"18:857:6150":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"12:764:3460":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"6:5178:9012":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:10610:6560":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:46484:5330":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:9082:3435":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:6129:9264":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"16:5348:5739":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:5669:4646":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:22752:59560":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"12:466:62084":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:16014:3199":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:2397:3282":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:49897:5221":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"16:6075:5695":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:11769:6720":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:15036:55881":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:6717:9244":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:8668:3430":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:50175:4937":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:10900:2364":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:11085:6095":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:24389:5261":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:9883:62100":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:53479:7827":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:12496:6859":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:2194:3381":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:46084:199":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:2926:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:12302:6810":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:10925:6606":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"6:1551:8565":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:12085:8030":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"2:3297:4051":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"5:8138:5441":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:3505:2317":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:24238:5141":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:32472:59891":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"1:1446:3461":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:53468:7826":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:8748:157":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:46861:5048":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:23230:4630":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"6:4386:8922":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:13602:7178":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:48650:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"16:3340:5947":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:545:8496":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"6:4356:8906":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:14235:2286":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"12:1238:5602":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:3376:3304":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:1152:7848":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:46833:5061":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:46179:3412":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:11573:5184":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:13361:7115":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:11409:6634":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"16:6679:5996":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:14006:187":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"6:6034:9233":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:1236:6437":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:3581:3319":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:12250:2754":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:50165:4936":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:46712:3347":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"16:2792:5681":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:3775:3285":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"16:7309:5699":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:5398:9126":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:9930:62094":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:9259:6515":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"16:3494:6442":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"5:8325:5394":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:3770:7316":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:9004:47839":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:11664:4735":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:6459:4636":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:1518:3470":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:3401:3308":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"12:787:3466":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"6:5998:9217":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:9755:4795":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:51637:5022":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:13167:7070":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:3172:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:16005:3190":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"16:3402:5682":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:14571:4426":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"16:7323:5717":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"1:2751:4653":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"6:5426:9140":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:46883:5050":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:6812:4636":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:6967:9374":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:14313:2764":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"5:7212:3463":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:5982:9205":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:11335:6033":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:10449:6305":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:6080:9252":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"18:712:4128":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:6341:2678":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"5:3300:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:2458:7857":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:9408:3615":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"9:0:3159":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:14637:55888":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:1507:3469":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:7651:4753":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"5:3370:4686":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:8661:3429":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:53459:7825":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:9085:2788":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:4020:8788":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:2188:4689":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:49480:5194":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:11945:6753":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:634:8551":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"14:244:7599":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:14041:2127":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:5311:9076":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:3194:4425":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:15993:3180":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:48668:107":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"6:4410:8932":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"20:0:1916":{"crate_id":20,"path":["pin_project_lite"],"kind":"module"},"9:900:8469":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"5:3396:4689":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"18:645:6157":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:8929:47838":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"16:5460:5746":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:9649:8129":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"17:13440:7137":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:12222:6798":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:12383:6845":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:9793:6303":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"2:24161:7701":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"2:13930:150":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:52321:5008":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:2362:600":{"crate_id":1,"path":["std","env"],"kind":"module"},"5:8262:3454":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"16:6381:5708":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:12093:6781":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:4684:3345":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:10836:4427":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"1:14561:9497":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:53365:5004":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"5:1635:3461":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:1415:2699":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:24182:5146":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"9:1056:5529":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:12048:6774":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"5:6411:223":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"5:8372:5357":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"16:5530:5748":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:53563:7833":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:24311:39992":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:13873:7268":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:4242:8863":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"7:85:45517":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:13037:7024":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:11087:2305":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:9740:4794":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"2:24265:7708":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:10400:134":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"6:3960:8760":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:5034:3405":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:16003:3188":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:3423:3313":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:13129:7059":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:45933:3281":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"16:3576:6446":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"18:720:6409":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:10503:6052":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"12:971:3471":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"6:1669:8646":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:48969:7757":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:11363:3399":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"6:5247:9042":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:987:2759":{"crate_id":1,"path":["std","thread","current"],"kind":"function"},"1:5763:4618":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:49834:2306":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:49580:2309":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"16:5869:189":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"6:4373:8917":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:49408:5190":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:10788:6597":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:15987:3175":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:3561:2301":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:2866:4865":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:14584:7909":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:48961:7756":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:10824:4424":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"6:6943:9369":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"18:729:62108":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:9883:6304":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"17:9746:6525":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:15999:3184":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:13721:7227":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:12482:6856":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:2572:127":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"17:9033:47840":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"6:5240:9040":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:4277:8865":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:12070:6775":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:4378:2700":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:4411:7323":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:46476:5221":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:12250:6802":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:48384:3550":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"16:7782:5703":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:10530:6550":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:2062:3335":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"16:2733:5932":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"6:4516:8974":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:5405:9127":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:46852:5047":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"16:3029:5960":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:12133:2700":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:11159:2309":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"6:1712:8672":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:4142:8846":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"7:0:1481":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:12527:6865":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"6:6925:9366":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:3908:7317":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:47725:3702":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"18:896:6153":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:6027:9229":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:14314:141":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:13529:7161":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:11822:6734":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:5631:779":{"crate_id":2,"path":["core","iter"],"kind":"module"},"6:6114:9259":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:5582:9193":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:13495:7153":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:4051:4658":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"17:11907:6742":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:11031:47845":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:8547:151":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"5:8115:2700":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:5396:5742":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:13016:7015":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:4741:2440":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:2314:6103":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"18:866:6151":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:2543:6044":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:12994:5176":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"12:432:5604":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:10390:6049":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:13840:7261":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"6:513:8480":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:13352:7114":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:2187:578":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:3274:2359":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:7954:8063":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"2:46813:5059":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"16:3007:5959":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"16:5427:5744":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:13917:7283":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:52209:5020":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"16:5639:5751":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"2:38930:4655":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"16:5887:5944":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:5478:9154":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:3335:963":{"crate_id":2,"path":["core","ops"],"kind":"module"},"2:8307:60000":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:5990:4844":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:9661:8130":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"6:571:8516":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:3192:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"16:4381:7322":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:5374:5741":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:12237:6801":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:11013:6613":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:49997:4927":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:12585:6874":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:53195:5001":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:14951:6313":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:2183:4688":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:4000:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:23613:4981":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:7810:4073":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:5362:5740":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:5675:4644":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:4454:8951":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:7637:5795":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:2162:3463":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"6:1606:8598":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:50294:5231":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:7033:5060":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:8071:4864":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:48398:3557":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"18:820:6147":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"12:2059:4687":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"5:2330:5425":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"6:5186:9014":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:12117:2699":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:10039:6536":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:48939:146":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:46924:5052":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:15012:4759":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:14030:4757":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"16:6717:5781":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:13281:7094":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:12203:4701":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:46804:5044":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:13935:8069":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:11017:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:6902:9360":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"12:880:3464":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"12:856:3462":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"2:49319:5181":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"18:754:62110":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"9:27:5518":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"1:3134:1847":{"crate_id":1,"path":["std","fs"],"kind":"module"},"12:399:5605":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:15994:3181":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"5:3341:5371":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:10340:6104":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:8712:2751":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"5:1215:5423":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:46412:5103":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:4081:8815":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:46138:3323":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:10389:205":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"2:49879:5220":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:49398:5189":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:10598:6559":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:3736:3356":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"19:117:8414":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"2:50355:5286":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"17:13215:7079":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:3351:4441":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"5:6688:5378":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:12067:55886":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"1:12078:56080":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"16:6691:5780":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:13141:4742":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:14815:4761":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"16:4903:7338":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:11968:6758":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"6:601:8533":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"16:7200:5713":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:11559:5183":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:52659:5009":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:14596:4427":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:16007:3192":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"16:6630:5992":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:11166:2306":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:23025:5089":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:48045:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:3406:3309":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:10937:6607":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"5:3040:8059":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"16:7659:5796":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:12003:6762":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"16:6549:5712":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"12:2040:3463":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:11354:6032":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:52399:4996":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"16:2754:5948":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:8825:162":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"0:0:1917":{"crate_id":0,"path":["tokio"],"kind":"module"},"17:12660:6889":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"12:933:3468":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:10814:6120":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:9561:6041":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:4840:7336":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:47683:3126":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:10622:6561":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"16:3221:5964":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"16:7702:5705":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"14:216:46191":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"18:885:6152":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:10291:6025":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:24968:164":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:49566:3348":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:1493:3466":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:51761:4999":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"16:7741:5797":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"16:3478:5967":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:13859:7266":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:6003:4845":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:13227:4923":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"17:9646:62096":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:53488:7828":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:13345:7112":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:1482:3464":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"1:11369:3398":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:15992:3179":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"16:7792:5732":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:12649:5347":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:4308:8884":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:56422:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:22712:59435":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"16:6533:5987":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:9716:62101":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:23922:4976":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:5216:9031":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:9948:6529":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"13:232:8462":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"12:114:62088":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:10455:3557":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:15173:4708":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:9031:4159":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"19:0:994":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:15459:7913":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"5:8250:3453":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:4198:8859":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:1626:8612":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:4116:8834":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:50298:5230":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:11429:4802":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"5:4515:5406":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"17:13306:7102":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:14:2559":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:2177:4687":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:8154:3522":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"2:49370:5186":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"9:41:5519":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"2:47674:2700":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:15376:2669":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:11985:6761":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:3197:3720":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:46657:6276":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:16009:3194":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:13221:4922":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"5:4628:235":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:3648:3321":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:4921:3420":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:49872:5219":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:6883:4639":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:10093:6127":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:12260:3564":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:11307:3137":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"6:4464:8957":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:6221:2677":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:10388:6436":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:12170:6791":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:46507:5331":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"17:9291:6425":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"11:0:3161":{"crate_id":11,"path":["adler"],"kind":"module"},"6:593:8528":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:51184:5025":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:46594:5273":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:8402:3522":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"1:11153:3348":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:13452:7138":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:38993:4052":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"6:3920:8727":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:11221:2679":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"2:49419:5191":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:1132:4660":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:13293:7097":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:8510:4696":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:9489:58271":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:2155:2699":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:13975:7293":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"0:772:1378":{"crate_id":0,"path":["tokio","task"],"kind":"module"},"9:234:5494":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"2:53257:5021":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:48003:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:6016:9224":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"16:7025:5687":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:10558:6556":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"5:4306:3460":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:10048:6537":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:8954:6040":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:11068:6039":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:7090:5787":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:13073:7053":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:6514:5042":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"6:607:8536":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:989:995":{"crate_id":1,"path":["std","thread","panicking"],"kind":"function"},"17:13549:7167":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:11605:4733":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:14111:6348":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"17:11603:6681":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"6:5204:9027":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"18:169:54133":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"6:5229:9032":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:4434:8942":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"16:6286:5619":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:12417:6848":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:6104:2676":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:5408:5327":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:46224:5124":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:1190:8127":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"16:5855:5759":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:11136:3347":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:3247:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:11628:6686":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"5:2553:5429":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:10127:5163":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:23088:4678":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"18:829:6148":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:4270:4807":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:12943:5210":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:4300:2261":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"1:992:1851":{"crate_id":1,"path":["std","thread","park"],"kind":"function"},"16:6931:6003":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"16:5516:5937":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:46904:2310":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:5085:4722":{"crate_id":1,"path":["std","net","ip","display_buffer","IpDisplayBuffer"],"kind":"struct"},"17:13421:7130":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"12:2253:3473":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:9616:6300":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"16:5605:5750":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:13612:7183":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"6:5390:9125":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:6595:5709":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"5:8355:9378":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"5:1607:3460":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"16:6907:5782":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"12:952:3470":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:46577:100":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:12279:3565":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:1524:3471":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:3287:3417":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"6:4127:8839":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"17:12687:6893":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:15062:9455":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:11115:2263":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:9131:47843":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:11494:6664":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"12:1682:5613":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:9911:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"5:8383:5358":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:11689:6698":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:11754:6714":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:48680:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:9240:6029":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:46062:197":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:50188:7759":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"2:2219:1050":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"16:4871:7337":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"16:6099:5765":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:49730:5211":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:9788:6302":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"16:7051:5784":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:48914:3484":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:3380:3303":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:612:8538":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:8215:6286":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"17:12512:6861":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"16:2959:5958":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"2:46464:5336":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"16:7355:5696":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:9275:6516":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:2967:184":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:11433:6648":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:51731:4995":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:3972:8763":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:9396:6427":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:9431:6428":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:3389:3310":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:50140:4934":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:45996:194":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:10831:6050":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:5541:9167":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:15316:4669":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:586:8525":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:51284:5026":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:13583:8068":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"6:521:8485":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:12072:5197":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:4728:4972":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:13257:7092":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:47811:203":{"crate_id":2,"path":["core","sync","atomic","Ordering","Relaxed"],"kind":"foreign_type"},"1:11207:2684":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"1:1302:143":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"16:3265:5966":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:8410:2711":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"1:3200:3344":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:5395:2672":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"16:6190:5769":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:14604:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"6:4061:8805":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"5:5093:660":{"crate_id":5,"path":["alloc","fmt"],"kind":"module"},"17:11474:6654":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"6:5547:9168":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:5326:5738":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:5757:4617":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:50302:5234":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:46734:5058":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:24290:40000":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"6:6097:9254":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:10407:6099":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"12:777:2700":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:13094:7058":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:8543:136":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"5:1618:2700":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:10588:3536":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:51385:5006":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:50468:3279":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"16:4351:7321":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:15494:5630":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"16:5784:5758":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:3966:8761":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"5:4443:2699":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:3648:2303":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"16:7208:5794":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:11797:6730":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"16:5303:5737":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:11082:214":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:12731:6900":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:12634:6887":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:13564:7855":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:12738:4424":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:13876:693":{"crate_id":2,"path":["core","future"],"kind":"module"},"17:9517:3348":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:8250:2305":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:32524:59894":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"2:10457:189":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"5:8455:4194":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:2166:3464":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"12:1203:5601":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:5685:5754":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:11810:6731":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:510:6433":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:10166:6541":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:23237:17223":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"6:6214:9317":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:4048:8800":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:1438:2700":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:49982:4924":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:4148:8848":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:3269:211":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:10678:142":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"9:996:5535":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"16:6433:5774":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:51314:5014":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"5:6475:3463":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:5419:9138":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:5433:9141":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:4425:8936":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:50343:3569":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"1:2395:7853":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:10198:6543":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:8323:3403":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:24836:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:48754:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:4666:3343":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"6:4296:8877":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"12:1103:3473":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"5:8176:5370":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:16006:3191":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:46743:5038":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"16:7155:5793":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"16:7369:5697":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:9206:47844":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"16:0:3165":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:50306:5232":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:11411:2682":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:12892:6912":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"18:661:6158":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:4080:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:10122:5162":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:5039:3406":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:3358:3300":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:12105:5198":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"6:4440:8943":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"9:749:5471":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"1:10705:13029":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:2769:579":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:9064:47841":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:13404:7123":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"18:849:6149":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:2921:183":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"12:353:8056":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:47658:2699":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:13953:7287":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:52475:5003":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:10725:2698":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"5:1653:3465":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:10014:640":{"crate_id":2,"path":["core","sync","atomic","fence"],"kind":"function"},"2:0:488":{"crate_id":2,"path":["core"],"kind":"module"},"17:10266:6022":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:1501:3468":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:16008:3193":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:10399:7914":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"12:750:2699":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:3339:4435":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:56026:5081":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:3166:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"5:8203:2700":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"6:6268:9339":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"16:2981:5969":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:47666:3460":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:24638:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:47810:178":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:53540:7832":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:51853:4988":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:5185:2735":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:24273:7709":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:49379:5187":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:6591:5057":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:52509:4985":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:24019:5245":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:8930:3431":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:13965:60502":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:23618:17242":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:11286:3460":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:13660:7220":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"16:7768:5702":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:57757:7845":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"6:1576:8579":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:12769:7896":{"crate_id":1,"path":["std","sys","unix","fs","TimespecDebugAdapter"],"kind":"struct"},"17:11640:6687":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:49598:5179":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"12:2419:3453":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:11587:5185":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"16:7184:6005":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:12117:6783":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:7671:4754":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:6579:4672":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:32820:3386":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:7308:7859":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:47617:176":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:1075:4663":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"9:469:45619":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"8:0:3158":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"15:248:5622":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"16:3461:5968":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:48951:2711":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:11305:6626":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:6885:4640":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"18:637:6407":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"5:3951:3464":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"5:6954:3112":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"5:3362:4688":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:3169:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:1459:3462":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:5880:4836":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"12:2280:3475":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:13595:7176":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:11181:6622":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:5982:4842":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"5:783:222":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:3310:1915":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:8510:4958":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:10435:6048":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:10979:2262":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:9028:4158":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:10874:6599":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:3933:8737":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:11354:5176":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:11742:6711":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"16:4316:7320":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:820:6304":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"16:7281:5700":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:7699:4756":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:50532:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"5:5837:5361":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:24090:5246":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:48930:3483":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:16013:3198":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"16:3155:5961":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:12746:6626":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:51585:5015":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"16:4942:7339":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"12:895:5591":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"2:46873:5049":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:6665:9346":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:10304:6028":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"1:10969:4465":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"6:4332:8894":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"5:3894:5417":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:1311:6133":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"5:994:5439":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:48641:133":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"16:6060:5735":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:10913:6605":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:12262:6803":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:13557:7168":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:4346:8900":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"18:668:6159":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:9407:3616":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:2269:3736":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:6896:9359":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:47140:7695":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"6:4321:8888":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"5:3336:4687":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:9826:6050":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"6:4532:8981":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:12700:6894":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:4471:2286":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"16:5238:46262":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:15990:3178":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:13655:4751":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:2863:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:7463:185":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:11487:4638":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:49550:5202":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:47111:7745":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"16:4689:7331":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:15081:3564":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:51354:7766":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:24250:5142":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:2484:47929":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:6721:9248":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:8591:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:32284:5298":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:1017:3522":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:23285:4980":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:14929:6311":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:1497:3467":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:0:1331":{"crate_id":1,"path":["std"],"kind":"module"},"17:3743:6116":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:13573:7171":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:5378:9118":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:50476:190":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:12758:6903":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:12607:6885":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:9836:62103":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:32424:3384":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:7264:194":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:2508:3738":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"16:6310:5771":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:1537:8560":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:10318:6050":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"9:686:5467":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"16:3077:6018":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:48617:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:12401:7856":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:11311:2309":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"16:6012:5693":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"5:6257:4198":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:2937:179":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"5:8106:4192":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:48171:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:10819:4423":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"1:15044:3565":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"0:54:1005":{"crate_id":0,"path":["tokio","pin"],"kind":"macro"},"1:10698:3477":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"17:10187:6542":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"5:8438:3464":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"2:13232:4918":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:13755:7239":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:3411:3311":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:12187:4700":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:23812:4677":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:15971:55883":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"5:3039:60766":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:13785:7245":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:16001:3186":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"11:46:8468":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"2:53525:7831":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:10240:6082":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:10461:3555":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:2883:5975":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:4066:4657":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"2:5030:3404":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:13247:7091":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"5:1694:5421":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:10884:4781":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:46842:5046":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"16:3177:5962":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:10476:6051":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"1:6981:4628":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:11244:2680":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"17:542:5668":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"5:2777:5428":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:6949:6004":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:5273:6516":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:15468:56063":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:3341:4436":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:3559:3280":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"17:12442:6851":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"6:672:40982":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"2:14390:4191":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"16:2813:5974":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:46397:4666":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"16:4743:7333":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:5584:12025":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"11:54:5589":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"3:321:205":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:4639:3335":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:3342:3301":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:3686:7314":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:51982:7777":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:46781:7742":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"5:8130:3463":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:7997:6286":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"1:4748:2365":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:11532:4723":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"6:6688:9357":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:10571:6122":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:11466:5179":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:13323:7107":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:7949:3521":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"1:15024:4760":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:16004:3189":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"12:843:3461":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:7277:7859":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"12:2412:8466":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:49784:5214":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:10447:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:51539:5027":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"6:1526:8555":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:51492:7768":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:10364:6102":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:46563:5108":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"16:6604:5779":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:51252:4993":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"6:6153:9275":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:4218:8861":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:10609:2762":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:13938:7286":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:11514:6665":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:10453:3556":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:5301:9069":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:10422:6546":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:15397:2674":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"}},"external_crates":{"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"20":{"name":"pin_project_lite","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":18}