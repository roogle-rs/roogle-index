{"root":"0:0:2064","crate_version":"0.6.4","includes_private":false,"index":{"0:58:1882":{"id":"0:58:1882","crate_id":0,"name":"fill_bytes","span":{"filename":"src/block.rs","begin":[386,4],"end":[403,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dest",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65:2027":{"id":"0:65:2027","crate_id":0,"name":"from_rng","span":{"filename":"src/block.rs","begin":[426,4],"end":[428,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["rng",{"generic":"S"}]],"output":{"resolved_path":{"name":"Result","id":"1:42431:223","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"Error","id":"0:72:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RngCore","id":"0:123:1863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:144":{"id":"0:144","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[424,0],"end":[444,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RngCore","id":"0:123:1863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32778:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RngCore","id":"0:123:1863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"R"}}},"items":["0:147:1868","0:148:1871","0:149:1882","0:150:1893"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:74":{"id":"0:74","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[28,0],"end":[116,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"Error","id":"0:72:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:75:2318","0:76:2325","0:77:2340","0:78:2312"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:60":{"id":"0:60","crate_id":0,"name":null,"span":{"filename":"src/block.rs","begin":[412,0],"end":[429,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"BlockRngCore","id":"0:18:2213","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"SeedableRng","id":"0:134:1927","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["seed_from_u64","from_rng"],"trait":{"name":"SeedableRng","id":"0:134:1927","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BlockRng64","id":"0:162:2284","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:62:1955","0:63:1977","0:64:1990","0:65:2027"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:162:2284":{"id":"0:162:2284","crate_id":0,"name":"BlockRng64","span":{"filename":"src/block.rs","begin":[286,0],"end":[292,1]},"visibility":"public","docs":"A wrapper type implementing [`RngCore`] for some type implementing\n[`BlockRngCore`] with `u64` array buffer; i.e. this can be used to implement\na full RNG from just a `generate` function.\n\nThis is similar to [`BlockRng`], but specialized for algorithms that operate\non `u64` values.\n\nNo whole generated `u64` values are thrown away and all values are consumed\nin-order. [`next_u64`] simply takes the next available `u64` value.\n[`next_u32`] is however a bit special: half of a `u64` is consumed, leaving\nthe other half in the buffer. If the next function called is [`next_u32`]\nthen the other half is then consumed, however both [`next_u64`] and\n[`fill_bytes`] discard the rest of any half-consumed `u64`s when called.\n\n[`fill_bytes`] and [`try_fill_bytes`] consume a whole number of `u64`\nvalues. If the requested length is not a multiple of 8, some bytes will be\ndiscarded.\n\n[`next_u32`]: RngCore::next_u32\n[`next_u64`]: RngCore::next_u64\n[`fill_bytes`]: RngCore::fill_bytes\n[`try_fill_bytes`]: RngCore::try_fill_bytes","links":{"RngCore::next_u64":"0:125:1871","`BlockRngCore`":"0:18:2213","`RngCore`":"0:123:1863","RngCore::next_u32":"0:124:1868","RngCore::try_fill_bytes":"0:127:1893","`BlockRng`":"0:154:2247","RngCore::fill_bytes":"0:126:1882"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:167:529"],"fields_stripped":true}},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"BlockRngCore","id":"0:18:2213","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32778:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:48","a:1:42413:4463-0:162:2284","a:1:32777:234-0:162:2284","a:1:42412:4464-0:162:2284","a:1:32834:2568-0:162:2284","a:1:2968:243-0:162:2284","b:1:2746-0:162:2284","b:1:3560-0:162:2284","b:1:2756-0:162:2284","b:1:2446-0:162:2284","b:1:2761-0:162:2284","b:1:2750-0:162:2284","b:1:2443-0:162:2284","0:54","0:45","0:60","0:168"]}}},"b:1:2746-0:154:2247":{"id":"b:1:2746-0:154:2247","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2723:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2720:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BlockRng","id":"0:154:2247","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:2749:2330"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:82:715":{"id":"0:82:715","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[136,4],"end":[149,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9970:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9951:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:134:1927":{"id":"0:134:1927","crate_id":0,"name":"SeedableRng","span":{"filename":"src/lib.rs","begin":[246,0],"end":[419,1]},"visibility":"public","docs":"A random number generator that can be explicitly seeded.\n\nThis trait encapsulates the low-level functionality common to all\npseudo-random number generators (PRNGs, or algorithmic generators).\n\n[`rand`]: https://docs.rs/rand","links":{},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:135:1955","0:136:1977","0:137:1990","0:142:2027"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32778:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:60","0:38"]}}},"0:150:1893":{"id":"0:150:1893","crate_id":0,"name":"try_fill_bytes","span":{"filename":"src/lib.rs","begin":[441,4],"end":[443,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dest",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42431:223","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Error","id":"0:72:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29:2260":{"id":"0:29:2260","crate_id":0,"name":"reset","span":{"filename":"src/block.rs","begin":[167,4],"end":[169,5]},"visibility":"public","docs":"Reset the number of available results.\nThis will force a new set of results to be generated on next use.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2446-0:162:2284":{"id":"b:1:2446-0:162:2284","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32778:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2440:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BlockRng64","id":"0:162:2284","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:2448:9853"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:22":{"id":"0:22","crate_id":0,"name":null,"span":{"filename":"src/block.rs","begin":[131,0],"end":[139,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"BlockRngCore","id":"0:18:2213","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:9995:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9995:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BlockRng","id":"0:154:2247","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:24:715"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:159":{"id":"0:159","crate_id":0,"name":null,"span":{"filename":"src/block.rs","begin":[115,9],"end":[115,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"1:2459:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"BlockRngCore","id":"0:18:2213","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32778:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Results","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:18:2213","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"1:2459:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2459:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BlockRng","id":"0:154:2247","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:161:451"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42412:4464-0:162:2284":{"id":"a:1:42412:4464-0:162:2284","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32778:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:42412:4464","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Results","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"BlockRngCore","id":"0:18:2213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:42412:4464","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42412:4464","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BlockRng64","id":"0:162:2284","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:2760:1620":{"id":"1:2760:1620","crate_id":1,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"resolved_path":{"name":"Result","id":"1:42431:223","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2730:253","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:21:2219":{"id":"0:21:2219","crate_id":0,"name":"generate","span":{"filename":"src/block.rs","begin":[77,4],"end":[77,56]},"visibility":"default","docs":"Generate a new block of results.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["results",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Results","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:18:2213","args":null}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:34:1871":{"id":"0:34:1871","crate_id":0,"name":"next_u64","span":{"filename":"src/block.rs","begin":[197,4],"end":[219,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:167:529":{"id":"0:167:529","crate_id":0,"name":"core","span":{"filename":"src/block.rs","begin":[291,4],"end":[291,15]},"visibility":"public","docs":"The *core* part of the RNG, implementing the `generate` function.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"generic":"R"}}},"a:1:42412:4464-0:72:135":{"id":"a:1:42412:4464-0:72:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42412:4464","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:72:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:147:1868":{"id":"0:147:1868","crate_id":0,"name":"next_u32","span":{"filename":"src/lib.rs","begin":[426,4],"end":[428,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2064":{"id":"0:0:2064","crate_id":0,"name":"rand_core","span":{"filename":"src/lib.rs","begin":[10,0],"end":[531,1]},"visibility":"public","docs":"Random number generation traits\n\nThis crate is mainly of interest to crates publishing implementations of\n[`RngCore`]. Other users are encouraged to use the [`rand`] crate instead\nwhich re-exports the main traits and error types.\n\n[`RngCore`] is the core trait implemented by algorithmic pseudo-random number\ngenerators and external random-number sources.\n\n[`SeedableRng`] is an extension trait for construction from fixed seeds and\nother random number generators.\n\n[`Error`] is provided for error-handling. It is safe to use in `no_std`\nenvironments.\n\nThe [`impls`] and [`le`] sub-modules include a few small functions to assist\nimplementation of [`RngCore`].\n\n[`rand`]: https://docs.rs/rand","links":{"`le`":"0:119:871","`SeedableRng`":"0:134:1927","`RngCore`":"0:123:1863","`impls`":"0:85:1801","`Error`":"0:72:135"},"attrs":["#![doc(html_logo_url =\n\"https://www.rust-lang.org/logos/rust-logo-128x128-blk.png\", html_favicon_url\n= \"https://www.rust-lang.org/favicon.ico\", html_root_url =\n\"https://rust-random.github.io/rand/\")]","#![deny(missing_docs)]","#![deny(missing_debug_implementations)]","#![doc(test(attr(allow(unused_variables), deny(warnings))))]","#![no_std]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:7:396","0:85:1801","0:119:871","0:6-0:72:135","0:123:1863","0:128:1911","0:129:1922","0:134:1927"],"is_stripped":false}}},"0:36:1882":{"id":"0:36:1882","crate_id":0,"name":"fill_bytes","span":{"filename":"src/block.rs","begin":[222,4],"end":[234,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dest",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2443-0:72:135":{"id":"b:1:2443-0:72:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32778:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2437:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:72:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2445:2446"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:2746-0:162:2284":{"id":"b:1:2746-0:162:2284","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2723:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2720:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BlockRng64","id":"0:162:2284","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:2749:2330"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:62:1955":{"id":"0:62:1955","crate_id":0,"name":"Seed","span":{"filename":"src/block.rs","begin":[413,4],"end":[413,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Seed","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"SeedableRng","id":"0:134:1927","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:170:451":{"id":"0:170:451","crate_id":0,"name":"clone","span":{"filename":"src/block.rs","begin":[284,9],"end":[284,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"BlockRng64","id":"0:162:2284","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:25":{"id":"0:25","crate_id":0,"name":null,"span":{"filename":"src/block.rs","begin":[141,0],"end":[179,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"BlockRngCore","id":"0:18:2213","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"BlockRng","id":"0:154:2247","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:27:1038","0:28:821","0:29:2260","0:30:2263"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:47:715":{"id":"0:47:715","crate_id":0,"name":"fmt","span":{"filename":"src/block.rs","begin":[296,4],"end":[303,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9970:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9951:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:77:2340":{"id":"0:77:2340","crate_id":0,"name":"raw_os_error","span":{"filename":"src/error.rs","begin":[87,4],"end":[98,5]},"visibility":"public","docs":"Extract the raw OS error code (if this error came from the OS)\n\nThis method is identical to `std::io::Error::raw_os_error()`, except\nthat it works in `no_std` contexts. If this method returns `None`, the\nerror value can still be formatted via the `Display` implementation.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42288:191","args":{"angle_bracketed":{"args":[{"type":{"primitive":"i32"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:116:2414":{"id":"0:116:2414","crate_id":0,"name":"next_u64_via_fill","span":{"filename":"src/impls.rs","begin":[166,0],"end":[170,1]},"visibility":"public","docs":"Implement `next_u64` via `fill_bytes`, little-endian order.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["rng",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"R"}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RngCore","id":"0:123:1863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32778:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:131":{"id":"0:131","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[234,0],"end":[238,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"CryptoRng","id":"0:128:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RngCore","id":"0:123:1863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"CryptoRngCore","id":"0:129:1922","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"generic":"T"},"items":["0:133:1924"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2749:2330":{"id":"1:2749:2330","crate_id":1,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2723:142"},"attrs":["#[track_caller]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"generic":"Self"}]],"output":{"generic":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:75:2318":{"id":"0:75:2318","crate_id":0,"name":"CUSTOM_START","span":{"filename":"src/error.rs","begin":[36,4],"end":[36,56]},"visibility":"public","docs":"Codes at or above this point can be used by users to define their own\ncustom errors.\n\nThis has a fixed value of `(1 << 31) + (1 << 30) = 0xC000_0000`,\ntherefore the number of values available for custom codes is `1 << 30`.\n\nThis is identical to [`getrandom::Error::CUSTOM_START`](https://docs.rs/getrandom/latest/getrandom/struct.Error.html#associatedconstant.CUSTOM_START).","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"primitive":"u32"},"default":"_"}}},"0:41:1977":{"id":"0:41:1977","crate_id":0,"name":"from_seed","span":{"filename":"src/block.rs","begin":[247,4],"end":[249,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["seed",{"qualified_path":{"name":"Seed","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:134:1927","args":null}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2761-0:154:2247":{"id":"b:1:2761-0:154:2247","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2720:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2730:253","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BlockRng","id":"0:154:2247","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:2764:135","1:2765:1618"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:111:2203":{"id":"0:111:2203","crate_id":0,"name":"fill_via_u32_chunks","span":{"filename":"src/impls.rs","begin":[140,0],"end":[142,1]},"visibility":"public","docs":"Implement `fill_bytes` by reading chunks from the output buffer of a block\nbased RNG.\n\nThe return values are `(consumed_u32, filled_u8)`.\n\n`filled_u8` is the number of filled bytes in `dest`, which may be less than\nthe length of `dest`.\n`consumed_u32` is the number of words consumed from `src`, which is the same\nas `filled_u8 / 4` rounded up.\n\n# Example\n(from `IsaacRng`)\n\n```ignore\nfn fill_bytes(&mut self, dest: &mut [u8]) {\n    let mut read_len = 0;\n    while read_len < dest.len() {\n        if self.index >= self.rsl.len() {\n            self.isaac();\n        }\n\n        let (consumed_u32, filled_u8) =\n            impls::fill_via_u32_chunks(&mut self.rsl[self.index..],\n                                       &mut dest[read_len..]);\n\n        self.index += consumed_u32;\n        read_len += filled_u8;\n    }\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u32"}}}}],["dest",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"tuple":[{"primitive":"usize"},{"primitive":"usize"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:59:1893":{"id":"0:59:1893","crate_id":0,"name":"try_fill_bytes","span":{"filename":"src/block.rs","begin":[406,4],"end":[409,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dest",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42431:223","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Error","id":"0:72:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2443-0:154:2247":{"id":"b:1:2443-0:154:2247","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32778:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2437:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BlockRng","id":"0:154:2247","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:2445:2446"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3560-0:154:2247":{"id":"b:1:3560-0:154:2247","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32778:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3558:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BlockRng","id":"0:154:2247","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:3562:1633"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:33:1868":{"id":"0:33:1868","crate_id":0,"name":"next_u32","span":{"filename":"src/block.rs","begin":[186,4],"end":[194,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2443-0:162:2284":{"id":"b:1:2443-0:162:2284","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32778:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2437:103","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BlockRng64","id":"0:162:2284","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:2445:2446"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:63:1977":{"id":"0:63:1977","crate_id":0,"name":"from_seed","span":{"filename":"src/block.rs","begin":[416,4],"end":[418,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["seed",{"qualified_path":{"name":"Seed","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:134:1927","args":null}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2750-0:162:2284":{"id":"b:1:2750-0:162:2284","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2723:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BlockRng64","id":"0:162:2284","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:2752:742"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:50:1038":{"id":"0:50:1038","crate_id":0,"name":"new","span":{"filename":"src/block.rs","begin":[310,4],"end":[318,5]},"visibility":"public","docs":"Create a new `BlockRng` from an existing RNG implementing\n`BlockRngCore`. Results will be generated on first use.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["core",{"generic":"R"}]],"output":{"resolved_path":{"name":"BlockRng64","id":"0:162:2284","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:119:871":{"id":"0:119:871","crate_id":0,"name":"le","span":{"filename":"src/le.rs","begin":[9,0],"end":[56,1]},"visibility":"public","docs":"Little-Endian utilities\n\nLittle-Endian order has been chosen for internal usage; this makes some\nuseful functions available.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:121:2425","0:122:2049"],"is_stripped":false}}},"a:1:32777:234-0:72:135":{"id":"a:1:32777:234-0:72:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32777:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:72:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"1:2752:742":{"id":"1:2752:742","crate_id":1,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["t",{"generic":"T"}]],"output":{"generic":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51:821":{"id":"0:51:821","crate_id":0,"name":"index","span":{"filename":"src/block.rs","begin":[326,4],"end":[328,5]},"visibility":"public","docs":"Get the index into the result buffer.\n\nIf this is equal to or larger than the size of the result buffer then\nthe buffer is \"empty\" and `generate()` must be called to produce new\nresults.","links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:151":{"id":"0:151","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[481,0],"end":[481,58]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"CryptoRng","id":"0:128:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32778:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"CryptoRng","id":"0:128:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"borrowed_ref":{"lifetime":"'a","mutable":true,"type":{"generic":"R"}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:81":{"id":"0:81","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[135,0],"end":[150,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:10000:127","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:72:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:82:715"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:113:2412":{"id":"0:113:2412","crate_id":0,"name":"next_u32_via_fill","span":{"filename":"src/impls.rs","begin":[159,0],"end":[163,1]},"visibility":"public","docs":"Implement `next_u32` via `fill_bytes`, little-endian order.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["rng",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"R"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RngCore","id":"0:123:1863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32778:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:42413:4463-0:154:2247":{"id":"a:1:42413:4463-0:154:2247","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32778:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42413:4463","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Results","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"BlockRngCore","id":"0:18:2213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42413:4463","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42413:4463","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BlockRng","id":"0:154:2247","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32834:2568-0:154:2247":{"id":"a:1:32834:2568-0:154:2247","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32778:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32834:2568","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Results","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"BlockRngCore","id":"0:18:2213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32834:2568","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32834:2568","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BlockRng","id":"0:154:2247","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:3560-0:72:135":{"id":"b:1:3560-0:72:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32778:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3558:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:72:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3562:1633"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:78:2312":{"id":"0:78:2312","crate_id":0,"name":"code","span":{"filename":"src/error.rs","begin":[106,4],"end":[115,5]},"visibility":"public","docs":"Retrieve the error code, if any.\n\nIf this `Error` was constructed via `From<NonZeroU32>`, then this method\nwill return this `NonZeroU32` code (for `no_std` this is always the\ncase). Otherwise, this method will return `None`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"1:42288:191","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NonZeroU32","id":"1:23083:2306","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:158:529":{"id":"0:158:529","crate_id":0,"name":"core","span":{"filename":"src/block.rs","begin":[127,4],"end":[127,15]},"visibility":"public","docs":"The *core* part of the RNG, implementing the `generate` function.","links":{},"attrs":[],"deprecation":null,"inner":{"struct_field":{"generic":"R"}}},"0:30:2263":{"id":"0:30:2263","crate_id":0,"name":"generate_and_set","span":{"filename":"src/block.rs","begin":[174,4],"end":[178,5]},"visibility":"public","docs":"Generate a new set of results immediately, setting the index to the\ngiven value.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2756-0:72:135":{"id":"b:1:2756-0:72:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2730:253","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2726:254","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:72:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2759:135","1:2760:1620"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:67":{"id":"0:67","crate_id":0,"name":null,"span":{"filename":"src/block.rs","begin":[431,0],"end":[431,62]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"BlockRngCore","id":"0:18:2213","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"CryptoRng","id":"0:128:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"CryptoRng","id":"0:128:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BlockRng","id":"0:154:2247","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:52:2260":{"id":"0:52:2260","crate_id":0,"name":"reset","span":{"filename":"src/block.rs","begin":[333,4],"end":[336,5]},"visibility":"public","docs":"Reset the number of available results.\nThis will force a new set of results to be generated on next use.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:76:2325":{"id":"0:76:2325","crate_id":0,"name":"INTERNAL_START","span":{"filename":"src/error.rs","begin":[42,4],"end":[42,44]},"visibility":"public","docs":"Codes below this point represent OS Errors (i.e. positive i32 values).\nCodes at or above this point, but below [`Error::CUSTOM_START`] are\nreserved for use by the `rand` and `getrandom` crates.\n\nThis is identical to [`getrandom::Error::INTERNAL_START`](https://docs.rs/getrandom/latest/getrandom/struct.Error.html#associatedconstant.INTERNAL_START).","links":{"`Error::CUSTOM_START`":"0:75:2318"},"attrs":[],"deprecation":null,"inner":{"assoc_const":{"type":{"primitive":"u32"},"default":"_"}}},"b:1:2761-0:72:135":{"id":"b:1:2761-0:72:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2720:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2730:253","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:72:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2764:135","1:2765:1618"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:127:1893":{"id":"0:127:1893","crate_id":0,"name":"try_fill_bytes","span":{"filename":"src/lib.rs","begin":[184,4],"end":[184,71]},"visibility":"default","docs":"Fill `dest` entirely with random data.\n\nThis is the only method which allows an RNG to report errors while\ngenerating random data thus making this the primary method implemented\nby external (true) RNGs (e.g. `OsRng`) which can fail. It may be used\ndirectly to generate keys and to seed (infallible) PRNGs.\n\nOther than error handling, this method is identical to [`RngCore::fill_bytes`];\nthus this may be implemented using `Ok(self.fill_bytes(dest))` or\n`fill_bytes` may be implemented with\n`self.try_fill_bytes(dest).unwrap()` or more specific error handling.","links":{"`RngCore::fill_bytes`":"0:126:1882"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dest",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42431:223","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Error","id":"0:72:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"b:1:2446-0:154:2247":{"id":"b:1:2446-0:154:2247","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32778:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2440:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BlockRng","id":"0:154:2247","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:2448:9853"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:125:1871":{"id":"0:125:1871","crate_id":0,"name":"next_u64","span":{"filename":"src/lib.rs","begin":[155,4],"end":[155,34]},"visibility":"default","docs":"Return the next random `u64`.\n\nRNGs must implement at least one method from this trait directly. In\nthe case this method is not implemented directly, it can be implemented\nvia [`impls::next_u64_via_u32`] or via [`impls::next_u64_via_fill`].","links":{"`impls::next_u64_via_fill`":"0:116:2414","`impls::next_u64_via_u32`":"0:88:2367"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"a:1:32777:234-0:162:2284":{"id":"a:1:32777:234-0:162:2284","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32778:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32777:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Results","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"BlockRngCore","id":"0:18:2213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32777:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32777:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BlockRng64","id":"0:162:2284","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:149:1882":{"id":"0:149:1882","crate_id":0,"name":"fill_bytes","span":{"filename":"src/lib.rs","begin":[436,4],"end":[438,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dest",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:88:2367":{"id":"0:88:2367","crate_id":0,"name":"next_u64_via_u32","span":{"filename":"src/impls.rs","begin":[24,0],"end":[29,1]},"visibility":"public","docs":"Implement `next_u64` via `next_u32`, little-endian order.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["rng",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"R"}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RngCore","id":"0:123:1863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32778:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:84:742":{"id":"0:84:742","crate_id":0,"name":"from","span":{"filename":"src/error.rs","begin":[154,4],"end":[165,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["code",{"resolved_path":{"name":"NonZeroU32","id":"1:23083:2306","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2445:2446":{"id":"1:2445:2446","crate_id":1,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"1:2759:135":{"id":"1:2759:135","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"U"},"trait":{"name":"TryFrom","id":"1:2730:253","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}}}}}}},"0:53:2263":{"id":"0:53:2263","crate_id":0,"name":"generate_and_set","span":{"filename":"src/block.rs","begin":[341,4],"end":[346,5]},"visibility":"public","docs":"Generate a new set of results immediately, setting the index to the\ngiven value.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:135:1955":{"id":"0:135:1955","crate_id":0,"name":"Seed","span":{"filename":"src/lib.rs","begin":[292,4],"end":[292,45]},"visibility":"default","docs":"Seed type, which is restricted to types mutably-dereferenceable as `u8`\narrays (we recommend `[u8; N]` for some `N`).\n\nIt is recommended to seed PRNGs with a seed of at least circa 100 bits,\nwhich means an array of `[u8; 12]` or greater to avoid picking RNGs with\npartially overlapping periods.\n\nFor cryptographic RNG's a seed of 256 bits is recommended, `[u8; 32]`.\n\n\n# Implementing `SeedableRng` for RNGs with large seeds\n\nNote that the required traits `core::default::Default` and\n`core::convert::AsMut<u8>` are not implemented for large arrays\n`[u8; N]` with `N` > 32. To be able to implement the traits required by\n`SeedableRng` for RNGs with such large seeds, the newtype pattern can be\nused:\n\n```\nuse rand_core::SeedableRng;\n\nconst N: usize = 64;\npub struct MyRngSeed(pub [u8; N]);\npub struct MyRng(MyRngSeed);\n\nimpl Default for MyRngSeed {\n    fn default() -> MyRngSeed {\n        MyRngSeed([0; N])\n    }\n}\n\nimpl AsMut<[u8]> for MyRngSeed {\n    fn as_mut(&mut self) -> &mut [u8] {\n        &mut self.0\n    }\n}\n\nimpl SeedableRng for MyRng {\n    type Seed = MyRngSeed;\n\n    fn from_seed(seed: MyRngSeed) -> MyRng {\n        MyRng(seed)\n    }\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32778:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"1:2797:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"AsMut","id":"1:2717:77","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null}}},"1:2764:135":{"id":"1:2764:135","crate_id":1,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"resolved_path":{"name":"Infallible","id":"1:32707:2512","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:121:2425":{"id":"0:121:2425","crate_id":0,"name":"read_u32_into","span":{"filename":"src/le.rs","begin":[18,0],"end":[23,1]},"visibility":"public","docs":"Reads unsigned 32 bit integers from `src` into `dst`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u32"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:124:1868":{"id":"0:124:1868","crate_id":0,"name":"next_u32","span":{"filename":"src/lib.rs","begin":[148,4],"end":[148,34]},"visibility":"default","docs":"Return the next random `u32`.\n\nRNGs must implement at least one method from this trait directly. In\nthe case this method is not implemented directly, it can be implemented\nusing `self.next_u64() as u32` or via [`impls::next_u32_via_fill`].","links":{"`impls::next_u32_via_fill`":"0:113:2412"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:142:2027":{"id":"0:142:2027","crate_id":0,"name":"from_rng","span":{"filename":"src/lib.rs","begin":[390,4],"end":[394,5]},"visibility":"default","docs":"Create a new PRNG seeded from another `Rng`.\n\nThis may be useful when needing to rapidly seed many PRNGs from a master\nPRNG, and to allow forking of PRNGs. It may be considered deterministic.\n\nThe master PRNG should be at least as high quality as the child PRNGs.\nWhen seeding non-cryptographic child PRNGs, we recommend using a\ndifferent algorithm for the master PRNG (ideally a CSPRNG) to avoid\ncorrelations between the child PRNGs. If this is not possible (e.g.\nforking using small non-crypto PRNGs) ensure that your PRNG has a good\nmixing function on the output or consider use of a hash function with\n`from_seed`.\n\nNote that seeding `XorShiftRng` from another `XorShiftRng` provides an\nextreme example of what can go wrong: the new PRNG will be a clone\nof the parent.\n\nPRNG implementations are allowed to assume that a good RNG is provided\nfor seeding, and that it is cryptographically secure when appropriate.\nAs of `rand` 0.7 / `rand_core` 0.5, implementations overriding this\nmethod should ensure the implementation satisfies reproducibility\n(in prior versions this was not required).\n\n[`rand`]: https://docs.rs/rand","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["rng",{"generic":"R"}]],"output":{"resolved_path":{"name":"Result","id":"1:42431:223","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"Error","id":"0:72:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RngCore","id":"0:123:1863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:148:1871":{"id":"0:148:1871","crate_id":0,"name":"next_u64","span":{"filename":"src/lib.rs","begin":[431,4],"end":[433,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7:396":{"id":"0:7:396","crate_id":0,"name":"block","span":{"filename":"src/block.rs","begin":[9,0],"end":[539,1]},"visibility":"public","docs":"The `BlockRngCore` trait and implementation helpers\n\nThe [`BlockRngCore`] trait exists to assist in the implementation of RNGs\nwhich generate a block of data in a cache instead of returning generated\nvalues directly.\n\nUsage of this trait is optional, but provides two advantages:\nimplementations only need to concern themselves with generation of the\nblock, not the various [`RngCore`] methods (especially [`fill_bytes`], where\nthe optimal implementations are not trivial), and this allows\n`ReseedingRng` (see [`rand`](https://docs.rs/rand) crate) perform periodic\nreseeding with very low overhead.\n\n# Example\n\n```no_run\nuse rand_core::{RngCore, SeedableRng};\nuse rand_core::block::{BlockRngCore, BlockRng};\n\nstruct MyRngCore;\n\nimpl BlockRngCore for MyRngCore {\n    type Item = u32;\n    type Results = [u32; 16];\n\n    fn generate(&mut self, results: &mut Self::Results) {\n        unimplemented!()\n    }\n}\n\nimpl SeedableRng for MyRngCore {\n    type Seed = [u8; 32];\n    fn from_seed(seed: Self::Seed) -> Self {\n        unimplemented!()\n    }\n}\n\n// optionally, also implement CryptoRng for MyRngCore\n\n// Final RNG.\nlet mut rng = BlockRng::<MyRngCore>::seed_from_u64(0);\nprintln!(\"First value: {}\", rng.next_u32());\n```\n\n[`BlockRngCore`]: crate::block::BlockRngCore\n[`fill_bytes`]: RngCore::fill_bytes","links":{"RngCore::fill_bytes":"0:126:1882","crate::block::BlockRngCore":"0:18:2213","`RngCore`":"0:123:1863"},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:18:2213","0:154:2247","0:162:2284"],"is_stripped":false}}},"0:28:821":{"id":"0:28:821","crate_id":0,"name":"index","span":{"filename":"src/block.rs","begin":[160,4],"end":[162,5]},"visibility":"public","docs":"Get the index into the result buffer.\n\nIf this is equal to or larger than the size of the result buffer then\nthe buffer is \"empty\" and `generate()` must be called to produce new\nresults.","links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:80:715":{"id":"0:80:715","crate_id":0,"name":"fmt","span":{"filename":"src/error.rs","begin":[119,4],"end":[132,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["f",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9970:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9951:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:27:1038":{"id":"0:27:1038","crate_id":0,"name":"new","span":{"filename":"src/block.rs","begin":[145,4],"end":[152,5]},"visibility":"public","docs":"Create a new `BlockRng` from an existing RNG implementing\n`BlockRngCore`. Results will be generated on first use.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["core",{"generic":"R"}]],"output":{"resolved_path":{"name":"BlockRng","id":"0:154:2247","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:0:131-0:154:2247":{"id":"b:0:131-0:154:2247","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[234,0],"end":[238,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"CryptoRng","id":"0:128:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RngCore","id":"0:123:1863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"CryptoRngCore","id":"0:129:1922","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BlockRng","id":"0:154:2247","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:133:1924"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:2765:1618":{"id":"1:2765:1618","crate_id":1,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["value",{"generic":"U"}]],"output":{"resolved_path":{"name":"Result","id":"1:42431:223","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}},{"type":{"qualified_path":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"T"},"trait":{"name":"TryFrom","id":"1:2730:253","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:2968:243-0:72:135":{"id":"a:1:2968:243-0:72:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2968:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:72:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:2968:243-0:154:2247":{"id":"a:1:2968:243-0:154:2247","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32778:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2968:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Results","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"BlockRngCore","id":"0:18:2213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2968:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2968:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BlockRng","id":"0:154:2247","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2750-0:154:2247":{"id":"b:1:2750-0:154:2247","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2723:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BlockRng","id":"0:154:2247","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:2752:742"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"b:1:3560-0:162:2284":{"id":"b:1:3560-0:162:2284","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:32778:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3558:71","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BlockRng64","id":"0:162:2284","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:3562:1633"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:168":{"id":"0:168","crate_id":0,"name":null,"span":{"filename":"src/block.rs","begin":[284,9],"end":[284,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[automatically_derived]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"1:2459:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"BlockRngCore","id":"0:18:2213","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32778:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Results","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"","id":"0:18:2213","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"1:2459:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2459:111","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BlockRng64","id":"0:162:2284","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:170:451"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:2968:243-0:162:2284":{"id":"a:1:2968:243-0:162:2284","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32778:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2968:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Results","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"BlockRngCore","id":"0:18:2213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2968:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2968:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BlockRng64","id":"0:162:2284","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:42:1990":{"id":"0:42:1990","crate_id":0,"name":"seed_from_u64","span":{"filename":"src/block.rs","begin":[252,4],"end":[254,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["seed",{"primitive":"u64"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:54":{"id":"0:54","crate_id":0,"name":null,"span":{"filename":"src/block.rs","begin":[349,0],"end":[410,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"BlockRngCore","id":"0:18:2213","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"primitive":"u64"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Results","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"BlockRngCore","id":"0:18:2213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2714:78","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u64"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"AsMut","id":"1:2717:77","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u64"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RngCore","id":"0:123:1863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BlockRng64","id":"0:162:2284","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:56:1868","0:57:1871","0:58:1882","0:59:1893"],"negative":false,"synthetic":false,"blanket_impl":null}}},"b:1:2746-0:72:135":{"id":"b:1:2746-0:72:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2723:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2720:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:72:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2749:2330"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:56:1868":{"id":"0:56:1868","crate_id":0,"name":"next_u32","span":{"filename":"src/block.rs","begin":[354,4],"end":[370,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"u32"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:136:1977":{"id":"0:136:1977","crate_id":0,"name":"from_seed","span":{"filename":"src/lib.rs","begin":[319,4],"end":[319,43]},"visibility":"default","docs":"Create a new PRNG using the given seed.\n\nPRNG implementations are allowed to assume that bits in the seed are\nwell distributed. That means usually that the number of one and zero\nbits are roughly equal, and values like 0, 1 and (size - 1) are unlikely.\nNote that many non-cryptographic PRNGs will show poor quality output\nif this is not adhered to. If you wish to seed from simple numbers, use\n`seed_from_u64` instead.\n\nAll PRNG implementations should be reproducible unless otherwise noted:\ngiven a fixed `seed`, the same sequence of output should be produced\non all runs, library versions and architectures (e.g. check endianness).\nAny \"value-breaking\" changes to the generator should require bumping at\nleast the minor version and documentation of the change.\n\nIt is not required that this function yield the same state as a\nreference implementation of the PRNG given equivalent seed; if necessary\nanother constructor replicating behaviour from a reference\nimplementation can be added.\n\nPRNG implementations should make sure `from_seed` never panics. In the\ncase that some special values (like an all zero seed) are not viable\nseeds it is preferable to map these to alternative constant value(s),\nfor example `0xBAD5EEDu32` or `0x0DDB1A5E5BAD5EEDu64` (\"odd biases? bad\nseed\"). This is assuming only a small number of values must be rejected.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["seed",{"qualified_path":{"name":"Seed","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:134:1927","args":null}}}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:130:1924":{"id":"0:130:1924","crate_id":0,"name":"as_rngcore","span":{"filename":"src/lib.rs","begin":[231,4],"end":[231,49]},"visibility":"default","docs":"Upcast to an [`RngCore`] trait object.","links":{"`RngCore`":"0:123:1863"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"dyn_trait":{"traits":[{"trait":{"name":"RngCore","id":"0:123:1863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"0:57:1871":{"id":"0:57:1871","crate_id":0,"name":"next_u64","span":{"filename":"src/block.rs","begin":[373,4],"end":[383,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"primitive":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2756-0:162:2284":{"id":"b:1:2756-0:162:2284","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2730:253","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2726:254","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BlockRng64","id":"0:162:2284","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:2759:135","1:2760:1620"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"1:3562:1633":{"id":"1:3562:1633","crate_id":1,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"TypeId","id":"1:40075:3429","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"a:1:32834:2568-0:72:135":{"id":"a:1:32834:2568-0:72:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32834:2568","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:72:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:133:1924":{"id":"0:133:1924","crate_id":0,"name":"as_rngcore","span":{"filename":"src/lib.rs","begin":[235,4],"end":[237,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"dyn_trait":{"traits":[{"trait":{"name":"RngCore","id":"0:123:1863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"b:1:2750-0:72:135":{"id":"b:1:2750-0:72:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2723:142","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:72:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2752:742"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:72:135":{"id":"0:72:135","crate_id":0,"name":"Error","span":{"filename":"src/error.rs","begin":[21,0],"end":[26,1]},"visibility":"public","docs":"Error type of random number generators\n\nIn order to be compatible with `std` and `no_std`, this type has two\npossible implementations: with `std` a boxed `Error` trait object is stored,\nwhile with `no_std` we merely store an error code.","links":{},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:74","a:1:42413:4463-0:72:135","a:1:32777:234-0:72:135","a:1:42412:4464-0:72:135","a:1:32834:2568-0:72:135","a:1:2968:243-0:72:135","b:1:2746-0:72:135","b:1:3560-0:72:135","b:1:2756-0:72:135","b:1:2446-0:72:135","b:1:2761-0:72:135","b:1:2750-0:72:135","b:1:2443-0:72:135","0:83","0:81","0:79"]}}},"0:123:1863":{"id":"0:123:1863","crate_id":0,"name":"RngCore","span":{"filename":"src/lib.rs","begin":[142,0],"end":[185,1]},"visibility":"public","docs":"The core of a random number generator.\n\nThis trait encapsulates the low-level functionality common to all\ngenerators, and is the \"back end\", to be implemented by generators.\nEnd users should normally use the `Rng` trait from the [`rand`] crate,\nwhich is automatically implemented for every type implementing `RngCore`.\n\nThree different methods for generating random data are provided since the\noptimal implementation of each is dependent on the type of generator. There\nis no required relationship between the output of each; e.g. many\nimplementations of [`fill_bytes`] consume a whole number of `u32` or `u64`\nvalues and drop any remaining unused bytes. The same can happen with the\n[`next_u32`] and [`next_u64`] methods, implementations may discard some\nrandom bits for efficiency.\n\nThe [`try_fill_bytes`] method is a variant of [`fill_bytes`] allowing error\nhandling; it is not deemed sufficiently useful to add equivalents for\n[`next_u32`] or [`next_u64`] since the latter methods are almost always used\nwith algorithmic generators (PRNGs), which are normally infallible.\n\nImplementers should produce bits uniformly. Pathological RNGs (e.g. always\nreturning the same value, or never setting certain bits) can break rejection\nsampling used by random distributions, and also break other RNGs when\nseeding them via [`SeedableRng::from_rng`].\n\nAlgorithmic generators implementing [`SeedableRng`] should normally have\n*portable, reproducible* output, i.e. fix Endianness when converting values\nto avoid platform differences, and avoid making any changes which affect\noutput (except by communicating that the release has breaking changes).\n\nTypically an RNG will implement only one of the methods available\nin this trait directly, then use the helper functions from the\n[`impls`] module to implement the other methods.\n\nIt is recommended that implementations also implement:\n\n- `Debug` with a custom implementation which *does not* print any internal\n  state (at least, [`CryptoRng`]s should not risk leaking state through\n  `Debug`).\n- `Serialize` and `Deserialize` (from Serde), preferably making Serde\n  support optional at the crate level in PRNG libs.\n- `Clone`, if possible.\n- *never* implement `Copy` (accidental copies may cause repeated values).\n- *do not* implement `Default` for pseudorandom generators, but instead\n  implement [`SeedableRng`], to guide users towards proper seeding.\n  External / hardware RNGs can choose to implement `Default`.\n- `Eq` and `PartialEq` could be implemented, but are probably not useful.\n\n# Example\n\nA simple example, obviously not generating very *random* output:\n\n```\n#![allow(dead_code)]\nuse rand_core::{RngCore, Error, impls};\n\nstruct CountingRng(u64);\n\nimpl RngCore for CountingRng {\n    fn next_u32(&mut self) -> u32 {\n        self.next_u64() as u32\n    }\n\n    fn next_u64(&mut self) -> u64 {\n        self.0 += 1;\n        self.0\n    }\n\n    fn fill_bytes(&mut self, dest: &mut [u8]) {\n        impls::fill_bytes_via_next(self, dest)\n    }\n\n    fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {\n        Ok(self.fill_bytes(dest))\n    }\n}\n```\n\n[`rand`]: https://docs.rs/rand\n[`try_fill_bytes`]: RngCore::try_fill_bytes\n[`fill_bytes`]: RngCore::fill_bytes\n[`next_u32`]: RngCore::next_u32\n[`next_u64`]: RngCore::next_u64","links":{"RngCore::next_u32":"0:124:1868","`SeedableRng`":"0:134:1927","RngCore::fill_bytes":"0:126:1882","RngCore::next_u64":"0:125:1871","`CryptoRng`":"0:128:1911","RngCore::try_fill_bytes":"0:127:1893","`SeedableRng::from_rng`":"0:142:2027","`impls`":"0:85:1801"},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":["0:124:1868","0:125:1871","0:126:1882","0:127:1893"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:54","0:144","0:31"]}}},"0:24:715":{"id":"0:24:715","crate_id":0,"name":"fmt","span":{"filename":"src/block.rs","begin":[132,4],"end":[138,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["fmt",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"resolved_path":{"name":"fmt::Formatter","id":"1:9970:141","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"resolved_path":{"name":"fmt::Result","id":"1:9951:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:18:2213":{"id":"0:18:2213","crate_id":0,"name":"BlockRngCore","span":{"filename":"src/block.rs","begin":[68,0],"end":[78,1]},"visibility":"public","docs":"A trait for RNGs which do not generate random numbers individually, but in\nblocks (typically `[u32; N]`). This technique is commonly used by\ncryptographic RNGs to improve performance.\n\nSee the [module][crate::block] documentation for details.","links":{"crate::block":"0:7:396"},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":false,"items":["0:19:171","0:20:2217","0:21:2219"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"0:37:1893":{"id":"0:37:1893","crate_id":0,"name":"try_fill_bytes","span":{"filename":"src/block.rs","begin":[237,4],"end":[240,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dest",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"resolved_path":{"name":"Result","id":"1:42431:223","args":{"angle_bracketed":{"args":[{"type":{"tuple":[]}},{"type":{"resolved_path":{"name":"Error","id":"0:72:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:6-0:72:135":{"id":"0:6-0:72:135","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[48,0],"end":[48,21]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"error::Error","name":"Error","id":"0:72:135","glob":false}}},"a:1:32834:2568-0:162:2284":{"id":"a:1:32834:2568-0:162:2284","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32778:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32834:2568","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Results","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"BlockRngCore","id":"0:18:2213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:32834:2568","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:32834:2568","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BlockRng64","id":"0:162:2284","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"a:1:32777:234-0:154:2247":{"id":"a:1:32777:234-0:154:2247","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32778:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32777:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Results","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"BlockRngCore","id":"0:18:2213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:32777:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:32777:234","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BlockRng","id":"0:154:2247","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"b:1:2756-0:154:2247":{"id":"b:1:2756-0:154:2247","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2730:253","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2726:254","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BlockRng","id":"0:154:2247","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:2759:135","1:2760:1620"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"a:1:42413:4463-0:72:135":{"id":"a:1:42413:4463-0:72:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42413:4463","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:72:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:154:2247":{"id":"0:154:2247","crate_id":0,"name":"BlockRng","span":{"filename":"src/block.rs","begin":[123,0],"end":[128,1]},"visibility":"public","docs":"A wrapper type implementing [`RngCore`] for some type implementing\n[`BlockRngCore`] with `u32` array buffer; i.e. this can be used to implement\na full RNG from just a `generate` function.\n\nThe `core` field may be accessed directly but the results buffer may not.\nPRNG implementations can simply use a type alias\n(`pub type MyRng = BlockRng<MyRngCore>;`) but might prefer to use a\nwrapper type (`pub struct MyRng(BlockRng<MyRngCore>);`); the latter must\nre-implement `RngCore` but hides the implementation details and allows\nextra functionality to be defined on the RNG\n(e.g. `impl MyRng { fn set_stream(...){...} }`).\n\n`BlockRng` has heavily optimized implementations of the [`RngCore`] methods\nreading values from the results buffer, as well as\ncalling [`BlockRngCore::generate`] directly on the output array when\n[`fill_bytes`] / [`try_fill_bytes`] is called on a large array. These methods\nalso handle the bookkeeping of when to generate a new batch of values.\n\nNo whole generated `u32` values are thrown away and all values are consumed\nin-order. [`next_u32`] simply takes the next available `u32` value.\n[`next_u64`] is implemented by combining two `u32` values, least\nsignificant first. [`fill_bytes`] and [`try_fill_bytes`] consume a whole\nnumber of `u32` values, converting each `u32` to a byte slice in\nlittle-endian order. If the requested byte length is not a multiple of 4,\nsome bytes will be discarded.\n\nSee also [`BlockRng64`] which uses `u64` array buffers. Currently there is\nno direct support for other buffer types.\n\nFor easy initialization `BlockRng` also implements [`SeedableRng`].\n\n[`next_u32`]: RngCore::next_u32\n[`next_u64`]: RngCore::next_u64\n[`fill_bytes`]: RngCore::fill_bytes\n[`try_fill_bytes`]: RngCore::try_fill_bytes","links":{"`BlockRngCore`":"0:18:2213","`RngCore`":"0:123:1863","RngCore::next_u32":"0:124:1868","`SeedableRng`":"0:134:1927","`BlockRng64`":"0:162:2284","RngCore::fill_bytes":"0:126:1882","RngCore::next_u64":"0:125:1871","`BlockRngCore::generate`":"0:21:2219","RngCore::try_fill_bytes":"0:127:1893"},"attrs":[],"deprecation":null,"inner":{"struct":{"kind":{"plain":{"fields":["0:158:529"],"fields_stripped":true}},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"BlockRngCore","id":"0:18:2213","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32778:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:25","a:1:42413:4463-0:154:2247","a:1:32777:234-0:154:2247","a:1:42412:4464-0:154:2247","a:1:32834:2568-0:154:2247","a:1:2968:243-0:154:2247","b:0:131-0:154:2247","b:1:2746-0:154:2247","b:1:3560-0:154:2247","b:1:2756-0:154:2247","b:1:2446-0:154:2247","b:1:2761-0:154:2247","b:1:2750-0:154:2247","b:1:2443-0:154:2247","0:67","0:22","0:38","0:159","0:31"]}}},"0:129:1922":{"id":"0:129:1922","crate_id":0,"name":"CryptoRngCore","span":{"filename":"src/lib.rs","begin":[229,0],"end":[232,1]},"visibility":"public","docs":"An extension trait that is automatically implemented for any type\nimplementing [`RngCore`] and [`CryptoRng`].\n\nIt may be used as a trait object, and supports upcasting to [`RngCore`] via\nthe [`CryptoRngCore::as_rngcore`] method.\n\n# Example\n\n```\nuse rand_core::CryptoRngCore;\n\n#[allow(unused)]\nfn make_token(rng: &mut dyn CryptoRngCore) -> [u8; 32] {\n    let mut buf = [0u8; 32];\n    rng.fill_bytes(&mut buf);\n    buf\n}\n```","links":{"`CryptoRng`":"0:128:1911","`CryptoRngCore::as_rngcore`":"0:130:1924","`RngCore`":"0:123:1863"},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":["0:130:1924"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"CryptoRng","id":"0:128:1911","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RngCore","id":"0:123:1863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":["0:131"]}}},"b:1:2761-0:162:2284":{"id":"b:1:2761-0:162:2284","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2720:160","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2730:253","args":{"angle_bracketed":{"args":[{"type":{"generic":"U"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"BlockRng64","id":"0:162:2284","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["1:2764:135","1:2765:1618"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:83":{"id":"0:83","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[152,0],"end":[166,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2723:142","args":{"angle_bracketed":{"args":[{"type":{"resolved_path":{"name":"NonZero","id":"1:728:187","args":{"angle_bracketed":{"args":[{"type":{"primitive":"u32"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:72:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:84:742"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:45":{"id":"0:45","crate_id":0,"name":null,"span":{"filename":"src/block.rs","begin":[295,0],"end":[304,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"BlockRngCore","id":"0:18:2213","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:9995:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9995:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BlockRng64","id":"0:162:2284","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:47:715"],"negative":false,"synthetic":false,"blanket_impl":null}}},"a:1:42412:4464-0:154:2247":{"id":"a:1:42412:4464-0:154:2247","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32778:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:42412:4464","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Results","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"BlockRngCore","id":"0:18:2213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:42412:4464","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:42412:4464","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BlockRng","id":"0:154:2247","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:161:451":{"id":"0:161:451","crate_id":0,"name":"clone","span":{"filename":"src/block.rs","begin":[115,9],"end":[115,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"BlockRng","id":"0:154:2247","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:126:1882":{"id":"0:126:1882","crate_id":0,"name":"fill_bytes","span":{"filename":"src/lib.rs","begin":[171,4],"end":[171,46]},"visibility":"default","docs":"Fill `dest` with random data.\n\nRNGs must implement at least one method from this trait directly. In\nthe case this method is not implemented directly, it can be implemented\nvia [`impls::fill_bytes_via_next`] or\nvia [`RngCore::try_fill_bytes`]; if this generator can\nfail the implementation must choose how best to handle errors here\n(e.g. panic with a descriptive message or log a warning and retry a few\ntimes).\n\nThis method should guarantee that `dest` is entirely filled\nwith new data, and may panic if this is impossible\n(e.g. reading past the end of a file that is being used as the\nsource of randomness).","links":{"`impls::fill_bytes_via_next`":"0:90:2373","`RngCore::try_fill_bytes`":"0:127:1893"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["dest",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}}},"b:1:2446-0:72:135":{"id":"b:1:2446-0:72:135","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32778:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2440:104","args":{"angle_bracketed":{"args":[{"type":{"generic":"T"}}],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:72:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2448:9853"],"negative":false,"synthetic":false,"blanket_impl":{"generic":"T"}}}},"0:85:1801":{"id":"0:85:1801","crate_id":0,"name":"impls","span":{"filename":"src/impls.rs","begin":[9,0],"end":[207,1]},"visibility":"public","docs":"Helper functions for implementing `RngCore` functions.\n\nFor cross-platform reproducibility, these functions all use Little Endian:\nleast-significant part first. For example, `next_u64_via_u32` takes `u32`\nvalues `x, y`, then outputs `(y << 32) | x`. To implement `next_u32`\nfrom `next_u64` in little-endian order, one should use `next_u64() as u32`.\n\nByte-swapping (like the std `to_le` functions) is only needed to convert\nto/from byte sequences, and since its purpose is reproducibility,\nnon-reproducible sources (e.g. `OsRng`) need not bother with it.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:88:2367","0:90:2373","0:111:2203","0:112:2204","0:113:2412","0:116:2414"],"is_stripped":false}}},"0:43:2027":{"id":"0:43:2027","crate_id":0,"name":"from_rng","span":{"filename":"src/block.rs","begin":[257,4],"end":[259,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["rng",{"generic":"S"}]],"output":{"resolved_path":{"name":"Result","id":"1:42431:223","args":{"angle_bracketed":{"args":[{"type":{"generic":"Self"}},{"type":{"resolved_path":{"name":"Error","id":"0:72:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RngCore","id":"0:123:1863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:38":{"id":"0:38","crate_id":0,"name":null,"span":{"filename":"src/block.rs","begin":[243,0],"end":[260,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"BlockRngCore","id":"0:18:2213","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"SeedableRng","id":"0:134:1927","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["seed_from_u64","from_rng"],"trait":{"name":"SeedableRng","id":"0:134:1927","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BlockRng","id":"0:154:2247","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:40:1955","0:41:1977","0:42:1990","0:43:2027"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:31":{"id":"0:31","crate_id":0,"name":null,"span":{"filename":"src/block.rs","begin":[181,0],"end":[241,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"BlockRngCore","id":"0:18:2213","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"primitive":"u32"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"qualified_path":{"name":"Results","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"BlockRngCore","id":"0:18:2213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2714:78","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u32"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"AsMut","id":"1:2717:77","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u32"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RngCore","id":"0:123:1863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BlockRng","id":"0:154:2247","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:33:1868","0:34:1871","0:36:1882","0:37:1893"],"negative":false,"synthetic":false,"blanket_impl":null}}},"1:2448:9853":{"id":"1:2448:9853","crate_id":1,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:19:171":{"id":"0:19:171","crate_id":0,"name":"Item","span":{"filename":"src/block.rs","begin":[70,4],"end":[70,14]},"visibility":"default","docs":"Results element type, e.g. `u32`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}}},"a:1:42413:4463-0:162:2284":{"id":"a:1:42413:4463-0:162:2284","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:32778:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42413:4463","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Results","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"BlockRngCore","id":"0:18:2213","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:42413:4463","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:42413:4463","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"BlockRng64","id":"0:162:2284","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}}},"0:64:1990":{"id":"0:64:1990","crate_id":0,"name":"seed_from_u64","span":{"filename":"src/block.rs","begin":[421,4],"end":[423,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline(always)]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["seed",{"primitive":"u64"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:112:2204":{"id":"0:112:2204","crate_id":0,"name":"fill_via_u64_chunks","span":{"filename":"src/impls.rs","begin":[154,0],"end":[156,1]},"visibility":"public","docs":"Implement `fill_bytes` by reading chunks from the output buffer of a block\nbased RNG.\n\nThe return values are `(consumed_u64, filled_u8)`.\n`filled_u8` is the number of filled bytes in `dest`, which may be less than\nthe length of `dest`.\n`consumed_u64` is the number of words consumed from `src`, which is the same\nas `filled_u8 / 8` rounded up.\n\nSee `fill_via_u32_chunks` for an example.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u64"}}}}],["dest",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":{"tuple":[{"primitive":"usize"},{"primitive":"usize"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:48":{"id":"0:48","crate_id":0,"name":null,"span":{"filename":"src/block.rs","begin":[306,0],"end":[347,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"BlockRngCore","id":"0:18:2213","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"resolved_path":{"name":"BlockRng64","id":"0:162:2284","args":{"angle_bracketed":{"args":[{"type":{"generic":"R"}}],"bindings":[]}}}},"items":["0:50:1038","0:51:821","0:52:2260","0:53:2263"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:40:1955":{"id":"0:40:1955","crate_id":0,"name":"Seed","span":{"filename":"src/block.rs","begin":[244,4],"end":[244,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"qualified_path":{"name":"Seed","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"R"},"trait":{"name":"SeedableRng","id":"0:134:1927","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}},"0:79":{"id":"0:79","crate_id":0,"name":null,"span":{"filename":"src/error.rs","begin":[118,0],"end":[133,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:9995:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"resolved_path":{"name":"Error","id":"0:72:135","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:80:715"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:122:2049":{"id":"0:122:2049","crate_id":0,"name":"read_u64_into","span":{"filename":"src/le.rs","begin":[27,0],"end":[32,1]},"visibility":"public","docs":"Reads unsigned 64 bit integers from `src` into `dst`.","links":{},"attrs":["#[inline]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["src",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}}],["dst",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u64"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:20:2217":{"id":"0:20:2217","crate_id":0,"name":"Results","span":{"filename":"src/block.rs","begin":[74,4],"end":[74,70]},"visibility":"default","docs":"Results type. This is the 'block' an RNG implementing `BlockRngCore`\ngenerates, which will usually be an array like `[u32; 16]`.","links":{},"attrs":[],"deprecation":null,"inner":{"assoc_type":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"AsRef","id":"1:2714:78","args":{"angle_bracketed":{"args":[{"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:18:2213","args":null}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"AsMut","id":"1:2717:77","args":{"angle_bracketed":{"args":[{"type":{"slice":{"qualified_path":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"Self"},"trait":{"name":"","id":"0:18:2213","args":null}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Default","id":"1:2797:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null}}},"0:90:2373":{"id":"0:90:2373","crate_id":0,"name":"fill_bytes_via_next","span":{"filename":"src/impls.rs","begin":[37,0],"end":[53,1]},"visibility":"public","docs":"Implement `fill_bytes` via `next_u64` and `next_u32`, little-endian order.\n\nThe fastest way to fill a slice is usually to work as long as possible with\nintegers. That is why this method mostly uses `next_u64`, and only when\nthere are 4 or less bytes remaining at the end of the slice it uses\n`next_u32` once.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["rng",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"R"}}}],["dest",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RngCore","id":"0:123:1863","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:32778:1928","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:128:1911":{"id":"0:128:1911","crate_id":0,"name":"CryptoRng","span":{"filename":"src/lib.rs","begin":[209,0],"end":[209,22]},"visibility":"public","docs":"A marker trait used to indicate that an [`RngCore`] or [`BlockRngCore`]\nimplementation is supposed to be cryptographically secure.\n\n*Cryptographically secure generators*, also known as *CSPRNGs*, should\nsatisfy an additional properties over other generators: given the first\n*k* bits of an algorithm's output\nsequence, it should not be possible using polynomial-time algorithms to\npredict the next bit with probability significantly greater than 50%.\n\nSome generators may satisfy an additional property, however this is not\nrequired by this trait: if the CSPRNG's state is revealed, it should not be\ncomputationally-feasible to reconstruct output prior to this. Some other\ngenerators allow backwards-computation and are considered *reversible*.\n\nNote that this trait is provided for guidance only and cannot guarantee\nsuitability for cryptographic applications. In general it should only be\nimplemented for well-reviewed code implementing well-regarded algorithms.\n\nNote also that use of a `CryptoRng` does not protect against other\nweaknesses such as seeding from a weak entropy source or leaking state.\n\n[`BlockRngCore`]: block::BlockRngCore","links":{"block::BlockRngCore":"0:18:2213","`RngCore`":"0:123:1863"},"attrs":[],"deprecation":null,"inner":{"trait":{"is_auto":false,"is_unsafe":false,"is_object_safe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:67","0:151"]}}},"0:137:1990":{"id":"0:137:1990","crate_id":0,"name":"seed_from_u64","span":{"filename":"src/lib.rs","begin":[335,4],"end":[364,5]},"visibility":"default","docs":"Create a new PRNG using a `u64` seed.\n\nThis is a convenience-wrapper around `from_seed` to allow construction\nof any `SeedableRng` from a simple `u64` value. It is designed such that\nlow Hamming Weight numbers like 0 and 1 can be used and should still\nresult in good, independent seeds to the PRNG which is returned.\n\nThis **is not suitable for cryptography**, as should be clear given that\nthe input size is only 64 bits.\n\nImplementations for PRNGs *may* provide their own implementations of\nthis function, but the default implementation should be good enough for\nall purposes. *Changing* the implementation of this function should be\nconsidered a value-breaking change.","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["state",{"primitive":"u64"}]],"output":{"generic":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"1:2353:4304":{"crate_id":1,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"1:13461:4567":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:44800:3737":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:9472:92":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:12563:3933":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:44759:3724":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:43920:3956":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:46418:3774":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:46611:3779":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:47247:3803":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:21567:9589":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:44081:2868":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:32768:3416":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:11107:2860":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:21339:10919":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:44591:3713":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:2973:2791":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"1:5966:3292":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:3141:4363":{"crate_id":1,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:44899:3741":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:46363:3771":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"0:0:2064":{"crate_id":0,"path":["rand_core"],"kind":"module"},"1:32778:1928":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"3:0:2509":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"1:3193:140":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:42676:88":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:53621:689":{"crate_id":1,"path":["core","f32"],"kind":"primitive"},"1:2440:104":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:44020:2871":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:47435:3807":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:46755:3784":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:44605:3716":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"0:116:2414":{"crate_id":0,"path":["rand_core","impls","next_u64_via_fill"],"kind":"function"},"1:31553:2561":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:40750:3568":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:6584:3299":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"1:3222:4359":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:38559:4350":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:41525:3208":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:40836:3577":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:7913:2567":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:22840:2547":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:40088:3431":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:22699:3325":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:2677:9859":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:4196:108":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:10219:154":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:42337:171":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:12572:4521":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:41080:3599":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:13214:202":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:44474:3569":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:44915:3745":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:3433:4365":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:40847:10324":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:39863:4364":{"crate_id":1,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"1:46210:3765":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:47401:3806":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:8407:10700":{"crate_id":1,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:22864:2548":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:43567:3673":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:30995:10332":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:43549:3668":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:41059:3597":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:44887:3738":{"crate_id":1,"path":["core","str","LinesMap"],"kind":"struct"},"1:42228:4457":{"crate_id":1,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"1:42471:2853":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:46830:3786":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:42371:2806":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:9633:715":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"1:41501:3617":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:46086:3760":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:43520:3666":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:10365:3211":{"crate_id":1,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:10000:127":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:12297:3689":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:11121:2856":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:39998:211":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:41071:3598":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:6395:3293":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:21573:9592":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:7900:143":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:53615:328":{"crate_id":1,"path":["core","array"],"kind":"primitive"},"1:48385:3847":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:3470:4366":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:3399:4360":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:43331:135":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:53617:1538":{"crate_id":1,"path":["core","str"],"kind":"primitive"},"1:7904:163":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:44965:3750":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:9970:141":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:5681:3192":{"crate_id":1,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:2511:132":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:44046:2869":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:2849:3920":{"crate_id":1,"path":["core","error","Request"],"kind":"struct"},"1:53633:847":{"crate_id":1,"path":["core","isize"],"kind":"primitive"},"1:43989:2851":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:22733:10359":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:45175:3756":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:3378:2846":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:44923:3747":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:22747:3331":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:34752:4347":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:6590:3298":{"crate_id":1,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:7227:2426":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:12578:4520":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:7449:4434":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:39938:207":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"1:1925:2961":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:22722:2533":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:41277:3611":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:39827:4367":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:48440:3852":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:12320:3690":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:42431:223":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:44555:4535":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"0:123:1863":{"crate_id":0,"path":["rand_core","RngCore"],"kind":"trait"},"1:21565:9859":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:32743:3939":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:42028:168":{"crate_id":1,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:7679:4385":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:44243:3688":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:30984:2783":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:47371:3805":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:32834:2568":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:46110:3761":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:32835:3418":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:43031:2776":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:40690:3562":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:3041:4355":{"crate_id":1,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"1:4378:2785":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"1:4304:3924":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:22833:3345":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:32777:234":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:44397:3695":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:38504:4349":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:40980:3585":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"0:85:1801":{"crate_id":0,"path":["rand_core","impls"],"kind":"module"},"1:11639:2873":{"crate_id":1,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"1:34233:4343":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"0:122:2049":{"crate_id":0,"path":["rand_core","le","read_u64_into"],"kind":"function"},"1:43752:3674":{"crate_id":1,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:21356:10917":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:48121:3841":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:53616:1505":{"crate_id":1,"path":["core","slice"],"kind":"primitive"},"1:10888:2874":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:46341:3770":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:42194:10360":{"crate_id":1,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:42598:87":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:46709:3782":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:21358:10924":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:46156:3763":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:40701:10325":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:1902:4316":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:44670:3719":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:22211:9676":{"crate_id":1,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"1:33440:4335":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:1710:3192":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:45097:224":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:47135:3801":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:39923:210":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:2714:78":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:1797:631":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"1:10002:2773":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:41516:3619":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:32779:241":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:2730:253":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:48405:3849":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:48291:3844":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:12090:2844":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:3187:138":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:45198:3758":{"crate_id":1,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:22482:9670":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1:43559:3672":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:728:187":{"crate_id":1,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"1:43289:10362":{"crate_id":1,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:4603:2789":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:21971:9859":{"crate_id":1,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"1:1992:186":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:44769:3728":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:21684:9859":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:40862:3580":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:22346:10062":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"1:22123:9859":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:44325:3691":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:44343:3692":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:3405:4362":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:53612:1658":{"crate_id":1,"path":["core","unit"],"kind":"primitive"},"1:48043:3840":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:42487:2716":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:44175:2857":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:43512:3664":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:726:2535":{"crate_id":1,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"1:3558:71":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"0:111:2203":{"crate_id":0,"path":["rand_core","impls","fill_via_u32_chunks"],"kind":"function"},"1:40758:3560":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:44907:3743":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:40729:3566":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:10965:2875":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:40971:3583":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:21586:3315":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:11000:2861":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:12789:118":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:12518:2532":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:42912:3935":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:5776:3192":{"crate_id":1,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:21514:9593":{"crate_id":1,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:22319:9859":{"crate_id":1,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"1:4335:3288":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:43537:154":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:41050:3596":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:43277:10329":{"crate_id":1,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:36628:4348":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:9799:2797":{"crate_id":1,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"1:40799:4408":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:5066:853":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:48581:3859":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:48394:3848":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:3183:2565":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:41543:3622":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:44193:2861":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:34037:4339":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:53610:1034":{"crate_id":1,"path":["core","never"],"kind":"primitive"},"1:43999:2863":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:40818:3576":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:10927:2858":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:53618:1623":{"crate_id":1,"path":["core","tuple"],"kind":"primitive"},"1:2799:123":{"crate_id":1,"path":["core","default","Default"],"kind":"proc_derive"},"1:42250:3644":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:30931:2830":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:32866:113":{"crate_id":1,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:40673:3560":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:34406:4344":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:44467:3700":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:3190:139":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:43528:3667":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:43250:3655":{"crate_id":1,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:12336:3693":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:47325:3804":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:32864:4259":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"1:33626:4337":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:8363:4444":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:53629:1639":{"crate_id":1,"path":["core","u16"],"kind":"primitive"},"1:42754:89":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:41494:3616":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:44225:3687":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:2720:160":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:30969:2832":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:40038:2845":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:44903:3742":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"0:7:396":{"crate_id":0,"path":["rand_core","block"],"kind":"module"},"1:40892:3199":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:31526:193":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:40739:3567":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:4455:3926":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:21693:9590":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:30701:2528":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"1:44439:3697":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:22295:9678":{"crate_id":1,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"1:3082:4346":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:48519:3857":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:4966:415":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:31157:10370":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:41152:3608":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:2506:198":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:21341:10925":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:47585:3808":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:43771:2883":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:4238:4383":{"crate_id":1,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"1:22755:3332":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:5852:3289":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:3003:4327":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:44734:3721":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:42216:3643":{"crate_id":1,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:234:223":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:2961:4326":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:46311:3769":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:2797:123":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:47933:3839":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:6595:3206":{"crate_id":1,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:4095:3192":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"1:42110:3636":{"crate_id":1,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"1:46400:3773":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:4172:3922":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:48367:3846":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:21370:10915":{"crate_id":1,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:42559:97":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:3029:4336":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:13367:3223":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:42637:94":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:41103:3602":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:45105:204":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:41510:3618":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:10012:2777":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:53634:1697":{"crate_id":1,"path":["core","usize"],"kind":"primitive"},"0:154:2247":{"crate_id":0,"path":["rand_core","block","BlockRng"],"kind":"struct"},"1:32747:3940":{"crate_id":1,"path":["core","error","tags","Value"],"kind":"struct"},"1:22562:3316":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"0:129:1922":{"crate_id":0,"path":["rand_core","CryptoRngCore"],"kind":"trait"},"1:21324:10921":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"1:33919:4342":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:40929:2869":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:22853:2534":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:44072:2865":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:7332:4449":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"1:44622:3717":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:39978:212":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:43314:2783":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:0:529":{"crate_id":1,"path":["core"],"kind":"module"},"1:7619:3300":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:10845:2857":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:40785:3571":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:48504:3856":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:22348:4304":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"0:112:2204":{"crate_id":0,"path":["rand_core","impls","fill_via_u64_chunks"],"kind":"function"},"1:22477:9672":{"crate_id":1,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"1:12629:4529":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"1:45084:147":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"1:2723:142":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:41027:3592":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:8369:4445":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"0:134:1927":{"crate_id":0,"path":["rand_core","SeedableRng"],"kind":"trait"},"1:44748:4536":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:10014:2778":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:46908:3788":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:3393:144":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:8051:176":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:3010:4315":{"crate_id":1,"path":["core","marker","FnPtr"],"kind":"trait"},"1:42520:90":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:39960:209":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:2968:243":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:53627:791":{"crate_id":1,"path":["core","i128"],"kind":"primitive"},"1:3019:2531":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:46178:3764":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:40261:9928":{"crate_id":1,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:42834:91":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:12583:4519":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:41009:3589":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:9039:3932":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:22771:10316":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:44458:3699":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:46541:3777":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:42362:2716":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:44145:3681":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"1:46687:3781":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:30963:2831":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:3051:4357":{"crate_id":1,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"1:23083:2306":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"type_alias"},"1:48489:3855":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:8360:4381":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:15:2347":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:43017:2773":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:40792:3572":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"1:53631:1641":{"crate_id":1,"path":["core","u64"],"kind":"primitive"},"1:44697:3720":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:43010:2774":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:10463:3218":{"crate_id":1,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:22334:9679":{"crate_id":1,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"1:40989:3586":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:47089:3800":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"0:119:871":{"crate_id":0,"path":["rand_core","le"],"kind":"module"},"1:10641:9859":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:46657:3780":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:53609:397":{"crate_id":1,"path":["core","bool"],"kind":"primitive"},"1:10431:3212":{"crate_id":1,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"0:113:2412":{"crate_id":0,"path":["rand_core","impls","next_u32_via_fill"],"kind":"function"},"1:9952:2772":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:10448:3213":{"crate_id":1,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:43352:2784":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:4450:3925":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:3159:124":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:22388:9680":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:46779:3785":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:53628:1642":{"crate_id":1,"path":["core","u8"],"kind":"primitive"},"1:41112:3603":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:48542:3858":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:41301:3613":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:1804:2826":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:21512:9859":{"crate_id":1,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:32754:3941":{"crate_id":1,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:47011:3790":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:11093:2855":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:40068:3942":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:53625:794":{"crate_id":1,"path":["core","i32"],"kind":"primitive"},"1:13187:10531":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"0:121:2425":{"crate_id":0,"path":["rand_core","le","read_u32_into"],"kind":"function"},"1:34579:4345":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:44091:2866":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:41487:3615":{"crate_id":1,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:2112:3287":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:48329:3845":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:42354:2854":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:12074:2842":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:39248:4353":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:2726:254":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:40949:3945":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:22683:3320":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:46511:3776":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:4987:11466":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:45159:178":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:1916:3284":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:2717:77":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:32761:2786":{"crate_id":1,"path":["core","error","tags","Ref"],"kind":"struct"},"1:45146:3753":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:9654:10697":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:10006:2775":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:3315:208":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:42715:95":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:46262:3767":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:7867:4446":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:46931:3789":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:44161:2379":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:4574:3198":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:45087:216":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"1:39911:3423":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:48245:3843":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:46465:3775":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:43024:2775":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:42873:98":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:22615:3318":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:46240:3766":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:22448:9671":{"crate_id":1,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"1:10820:2854":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:47791:3838":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:42268:3647":{"crate_id":1,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:44891:3739":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:4:1115":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:10004:2774":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:40075:3429":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:7397:10481":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:53632:1638":{"crate_id":1,"path":["core","u128"],"kind":"primitive"},"1:53636:13":{"crate_id":1,"path":["core","fn"],"kind":"primitive"},"1:44919:3746":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:22256:9677":{"crate_id":1,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"1:39907:4358":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:44009:2864":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:31052:10304":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:2355:4305":{"crate_id":1,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:9467:85":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:10211:150":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:22806:10371":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:22402:4304":{"crate_id":1,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"1:2343:632":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:0:474":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:40922:3944":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"1:5025:3929":{"crate_id":1,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:44151:3682":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:42066:3628":{"crate_id":1,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:3014:2529":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"0:90:2373":{"crate_id":0,"path":["rand_core","impls","fill_bytes_via_next"],"kind":"function"},"1:44297:2855":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:4630:2788":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:44279:2859":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:40958:3582":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:43980:2850":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:53624:793":{"crate_id":1,"path":["core","i16"],"kind":"primitive"},"1:44492:3568":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:10254:4489":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:11079:2859":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"0:162:2284":{"crate_id":0,"path":["rand_core","block","BlockRng64"],"kind":"struct"},"1:21695:3315":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:3046:4356":{"crate_id":1,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"1:2678:2513":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:43305:74":{"crate_id":1,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:42288:191":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:7995:2566":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:42082:4456":{"crate_id":1,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"1:46066:3759":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:7942:128":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:40766:3569":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:44121:3677":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:42414:2805":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:21302:2561":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:22433:9859":{"crate_id":1,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"1:41041:3595":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:41128:3605":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:44911:3744":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:42413:4463":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:44379:3694":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:2542:192":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"1:53635:1248":{"crate_id":1,"path":["core","reference"],"kind":"primitive"},"1:7333:4450":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:11606:2872":{"crate_id":1,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"1:9150:3933":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:4529:2786":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"1:21976:9595":{"crate_id":1,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"1:10010:203":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:4519:3197":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:44429:3696":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:44976:4542":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:44134:3680":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:43767:3675":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:4219:4382":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:44483:3560":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:42412:4464":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:41535:3620":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:10008:2776":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:13356:114":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:40679:3561":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:40831:107":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:42346:2853":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:2556:2365":{"crate_id":1,"path":["core","cmp","min"],"kind":"function"},"1:4446:218":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:21312:10921":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"1:53623:796":{"crate_id":1,"path":["core","i8"],"kind":"primitive"},"1:41287:3612":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:33254:2530":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:43971:2852":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:10651:236":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:4583:2787":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:2437:103":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:44059:2870":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:41142:3606":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:48414:3850":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:44449:3698":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:2459:111":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:41093:3600":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:45186:3757":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"0:88:2367":{"crate_id":0,"path":["rand_core","impls","next_u64_via_u32"],"kind":"function"},"1:46381:3772":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:22125:9591":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:3172:4354":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:3667:3194":{"crate_id":1,"path":["core","array","drain","Drain"],"kind":"struct"},"1:33978:4340":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:53614:1152":{"crate_id":1,"path":["core","pointer"],"kind":"primitive"},"1:13165:162":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:42479:2854":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:40999:3588":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:3388:250":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:44782:3734":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:48183:3842":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:46877:3787":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:2963:116":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:44101:2867":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:48451:3853":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:12374:2874":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:48466:3854":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:725:9859":{"crate_id":1,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"1:53630:1640":{"crate_id":1,"path":["core","u32"],"kind":"primitive"},"1:46563:3778":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:10796:2853":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:33860:4338":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:53622:691":{"crate_id":1,"path":["core","f64"],"kind":"primitive"},"1:46132:3762":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:32707:2512":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:7863:4447":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:42050:3626":{"crate_id":1,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:38614:4351":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:11038:2862":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:47165:3802":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"0:18:2213":{"crate_id":0,"path":["rand_core","block","BlockRngCore"],"kind":"trait"},"1:9951:223":{"crate_id":1,"path":["core","fmt","Result"],"kind":"type_alias"},"1:42793:96":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:26377:262":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:12260:3684":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:13239:3937":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:42496:193":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:3418:10591":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:2548:199":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:34096:4341":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:43260:2783":{"crate_id":1,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"1:40902:3943":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:45138:3957":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:40773:4407":{"crate_id":1,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:40018:213":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:44576:3706":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:48425:3851":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:42423:3652":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"1:40716:3565":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:2808:135":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:44895:3740":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:23977:233":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:41018:3591":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:38669:4352":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:3801:2716":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"0:128:1911":{"crate_id":0,"path":["rand_core","CryptoRng"],"kind":"trait"},"1:22668:3319":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:22791:10350":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:44941:129":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"1:42402:2807":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:9995:118":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:46280:3768":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:4184:3923":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:9659:13540":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:22013:10913":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:46733:3783":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:53626:795":{"crate_id":1,"path":["core","i64"],"kind":"primitive"},"1:10259:3306":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:22001:2848":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:53611:447":{"crate_id":1,"path":["core","char"],"kind":"primitive"}},"external_crates":{"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}