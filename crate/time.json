{"root":"0:0:1715","crate_version":"0.3.13","includes_private":false,"index":{"0:1478:2022":{"id":"0:1478:2022","crate_id":0,"name":"Thursday","span":{"filename":"src/weekday.rs","begin":[23,4],"end":[23,12]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(clippy :: missing_docs_in_private_items)]"],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:946:1822":{"id":"0:946:1822","crate_id":0,"name":"weeks_in_year","span":{"filename":"src/util.rs","begin":[71,0],"end":[80,1]},"visibility":"public","docs":"Get the number of weeks in the ISO year.\n\nThe returned value will always be either 52 or 53.\n\n```rust\n# use time::util::weeks_in_year;\nassert_eq!(weeks_in_year(2019), 52);\nassert_eq!(weeks_in_year(2020), 53);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["year",{"kind":"primitive","inner":"i32"}]],"output":{"kind":"primitive","inner":"u8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"}}},"2:2926:124":{"id":"2:2926:124","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2921:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1328:1944":{"id":"0:1328:1944","crate_id":0,"name":"December","span":{"filename":"src/month.rs","begin":[26,4],"end":[26,17]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13467:55038":{"id":"2:13467:55038","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"`DoubleEndedIterator`":"2:8448:120","str::split_whitespace":"1:16010:3582","str::rsplit":"1:16010:3582","self::pattern":"2:13054:3852","prim@char":"1:16004:3577"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49462:3886","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1006:1718":{"id":"0:1006:1718","crate_id":0,"name":"Date","span":{"filename":"src/date.rs","begin":[35,0],"end":[42,1]},"visibility":"public","docs":"Date in the proleptic Gregorian calendar.\n\nBy default, years between ±9999 inclusive are representable. This can be expanded to ±999,999\ninclusive by enabling the `large-dates` crate feature. Doing so has performance implications\nand introduces some ambiguities when parsing.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:4004:1429":{"id":"2:4004:1429","crate_id":2,"name":"type_id","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"2:46031:4292","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6106:56131":{"id":"5:6106:56131","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:16010:3582"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6411:223":{"id":"5:6411:223","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6412:1397"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:385:1701":{"id":"0:385:1701","crate_id":0,"name":"ext","span":{"filename":"src/ext.rs","begin":[1,0],"end":[278,1]},"visibility":"public","docs":"Extension traits.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:397:2599","0:424:2629"],"is_stripped":false}},"2:23774:5003":{"id":"2:23774:5003","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:23775:5002"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23770:2572","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3492:116":{"id":"2:3492:116","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3493:221","2:3494:543"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13429:55011":{"id":"2:13429:55011","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:16021:3591"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5741:4554":{"id":"1:5741:4554","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5742:6871","1:5743:54828","1:5744:7315","1:5745:59049","1:5746:4837","1:5747:4838","1:5748:59050","1:5749:1304","1:5750:59051","1:5751:59052","1:5752:59053","1:5753:59054","1:5754:59055","1:5755:59056","1:5756:59057","1:5757:59058"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13517:60859":{"id":"2:13517:60859","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13054:3852","prim@char":"1:16004:3577"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13767:138":{"id":"2:13767:138","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13768:181","2:13769:1013"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:3208-0:1245:127":{"id":"b:2:3208-0:1245:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3182:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryInto","id":"2:3178:228","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1245:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3211:127","2:3212:1417"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:13443:4933":{"id":"2:13443:4933","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:16004:3577"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49438:3879","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5789:4557":{"id":"1:5789:4557","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5790:57379"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:2572","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:448:2641":{"id":"0:448:2641","crate_id":0,"name":"std_hours","span":{"filename":"src/ext.rs","begin":[264,4],"end":[267,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50206:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13450:55047":{"id":"2:13450:55047","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:13054:3852","prim@char":"1:16004:3577"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10305:3933":{"id":"2:10305:3933","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10306:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1345:1721":{"id":"0:1345:1721","crate_id":0,"name":"OffsetDateTime","span":{"filename":"src/offset_date_time.rs","begin":[31,0],"end":[36,1]},"visibility":"public","docs":"A [`PrimitiveDateTime`] with a [`UtcOffset`].\n\nAll comparisons are performed using the UTC time.","links":{"`UtcOffset`":"0:1448:1724","`PrimitiveDateTime`":"0:1368:1722"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:440:2643":{"id":"0:440:2643","crate_id":0,"name":"std_days","span":{"filename":"src/ext.rs","begin":[229,4],"end":[231,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50206:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13520:16253":{"id":"2:13520:16253","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:16004:3577","self::pattern":"2:13054:3852"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3213-0:1245:127":{"id":"b:2:3213-0:1245:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3172:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3182:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1245:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3216:127","2:3217:1416"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:12993:2699":{"id":"2:12993:2699","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12994:126","2:12995:2710"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13508:60854":{"id":"2:13508:60854","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6790:4533":{"id":"1:6790:4533","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6791:9472"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:2572","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10299:119":{"id":"2:10299:119","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10300:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2957:177":{"id":"2:2957:177","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2958:415","2:2959:1677","2:2960:1676","2:2961:4209"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2926:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2967:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3169:74":{"id":"2:3169:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3171:4210"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"5:5833:5354":{"id":"5:5833:5354","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5835:181","5:5836:432"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3740:3711":{"id":"2:3740:3711","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3742:58248"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10934:214":{"id":"2:10934:214","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:10936:181","2:10937:2704","2:10938:55008","2:10939:55009","2:10940:55010","2:10941:753","2:10942:754"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:10925:2572","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:423:2246":{"id":"0:423:2246","crate_id":0,"name":"weeks","span":{"filename":"src/ext.rs","begin":[142,4],"end":[144,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1054:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3516:3704":{"id":"2:3516:3704","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3517:578"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1206:2477":{"id":"0:1206:2477","crate_id":0,"name":"ConversionRange","span":{"filename":"src/error/conversion_range.rs","begin":[10,0],"end":[10,27]},"visibility":"public","docs":"An error type indicating that a conversion failed because the target type could not store the\ninitial value.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"unit","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":[],"impls":[]}},"2:13439:60844":{"id":"2:13439:60844","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"crate::ops::IndexMut":"2:3581:3706","`str`":"1:16010:3582","str::slice_unchecked":"1:16010:3582"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:436:2635":{"id":"0:436:2635","crate_id":0,"name":"std_milliseconds","span":{"filename":"src/ext.rs","begin":[213,4],"end":[215,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50206:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4748:4475":{"id":"1:4748:4475","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4749:59107","1:4750:59108","1:4751:59109","1:4753:4474","1:4754:59110","1:4756:55038","1:4757:5697"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4666:4469","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:425:2631":{"id":"0:425:2631","crate_id":0,"name":"std_nanoseconds","span":{"filename":"src/ext.rs","begin":[187,4],"end":[187,44]},"visibility":"default","docs":"Create a [`std::time::Duration`] from the number of nanoseconds.","links":{"`std::time::Duration`":"2:50206:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50206:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"5:6104:61503":{"id":"5:6104:61503","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:8368:216","`Box<str>`":"5:432:3965"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:3965","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:5360","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:372":{"id":"0:372","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[23,0],"end":[23,42]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"conversion_range::ConversionRange","name":"ConversionRange","id":"0:1206:2477","glob":false}},"0:1319:1947":{"id":"0:1319:1947","crate_id":0,"name":"September","span":{"filename":"src/month.rs","begin":[23,4],"end":[23,17]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"1:1075:4578":{"id":"1:1075:4578","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1076:3815","1:1077:5347","1:1078:56131","1:1079:56132","1:1080:54954","1:1081:54955","1:1082:54956"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6415:1397":{"id":"5:6415:1397","crate_id":5,"name":"to_string","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:435:2633":{"id":"0:435:2633","crate_id":0,"name":"std_microseconds","span":{"filename":"src/ext.rs","begin":[209,4],"end":[211,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50206:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5797:4559":{"id":"1:5797:4559","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5798:7315"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3522:131":{"id":"2:3522:131","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3524:377"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3525:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3201:2737":{"id":"2:3201:2737","crate_id":2,"name":"into","span":null,"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"2:3175:135"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3734:137":{"id":"2:3734:137","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3736:687"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3729:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3211:127":{"id":"2:3211:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3182:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}}}},"0:434:2631":{"id":"0:434:2631","crate_id":0,"name":"std_nanoseconds","span":{"filename":"src/ext.rs","begin":[205,4],"end":[207,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50206:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:947:1717":{"id":"0:947:1717","crate_id":0,"name":"weekday","span":{"filename":"src/weekday.rs","begin":[1,0],"end":[148,1]},"visibility":"crate","docs":"Days of the week.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1471:1725"],"is_stripped":true}},"0:309:2509":{"id":"0:309:2509","crate_id":0,"name":"component_range","span":{"filename":"src/error/component_range.rs","begin":[1,0],"end":[92,44]},"visibility":{"restricted":{"parent":"0:308:1688","path":"::error"}},"docs":"Component range error","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1185:1689"],"is_stripped":true}},"0:989":{"id":"0:989","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[325,0],"end":[325,48]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::offset_date_time::OffsetDateTime","name":"OffsetDateTime","id":"0:1345:1721","glob":false}},"0:450:2645":{"id":"0:450:2645","crate_id":0,"name":"std_weeks","span":{"filename":"src/ext.rs","begin":[274,4],"end":[277,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50206:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:986":{"id":"0:986","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[324,0],"end":[324,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::month::Month","name":"Month","id":"0:1294:1720","glob":false}},"2:4783:4998":{"id":"2:4783:4998","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4784:2494","2:4785:60258","2:4786:4223"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13418:793":{"id":"2:13418:793","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:16004:3577"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13446:33447":{"id":"2:13446:33447","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:16010:3582"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49745:3898","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1248:1542":{"id":"0:1248:1542","crate_id":0,"name":"0","span":{"filename":"src/error/mod.rs","begin":[48,20],"end":[48,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"ConversionRange","id":"0:1206:2477","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"0:1298:1954":{"id":"0:1298:1954","crate_id":0,"name":"February","span":{"filename":"src/month.rs","begin":[16,4],"end":[16,16]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"5:6105:3751":{"id":"5:6105:3751","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:392:2570":{"id":"0:392:2570","crate_id":0,"name":"sealed","span":{"filename":"src/ext.rs","begin":[8,0],"end":[8,10]},"visibility":{"restricted":{"parent":"0:385:1701","path":"::ext"}},"docs":"Sealed trait to prevent downstream implementations.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:393:2572"],"is_stripped":true}},"0:327:2510":{"id":"0:327:2510","crate_id":0,"name":"conversion_range","span":{"filename":"src/error/conversion_range.rs","begin":[1,0],"end":[36,1]},"visibility":{"restricted":{"parent":"0:308:1688","path":"::error"}},"docs":"Conversion range error","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1206:2477"],"is_stripped":true}},"2:3411:3696":{"id":"2:3411:3696","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3413:181","2:3414:1233"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:443:2631":{"id":"0:443:2631","crate_id":0,"name":"std_nanoseconds","span":{"filename":"src/ext.rs","begin":[239,4],"end":[242,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50206:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13420:60840":{"id":"2:13420:60840","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13447:5697":{"id":"2:13447:5697","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49716:3881","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5837:5356":{"id":"5:5837:5356","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5839:181","5:5840:34491"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3204:681":{"id":"2:3204:681","crate_id":2,"name":"from","span":null,"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3775:3716":{"id":"2:3775:3716","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:2874:54657":{"id":"2:2874:54657","crate_id":2,"name":"borrow_mut","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2572:127":{"id":"1:2572:127","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2573:2529","1:2575:2175","1:2576:4298","1:2577:4299"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10292:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10299:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3281:220":{"id":"2:3281:220","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6088:61500":{"id":"5:6088:61500","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22840:4994":{"id":"2:22840:4994","crate_id":2,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22841:59950","2:22842:1227","2:22843:1228","2:22844:59951","2:22845:59952","2:22846:59953","2:22847:59954","2:22848:59955","2:22849:59956","2:22850:59957"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22853:2572","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13497:60850":{"id":"2:13497:60850","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:13054:3852","prim@char":"1:16004:3577","str::matches":"1:16010:3582","`DoubleEndedIterator`":"2:8448:120"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49684:3891","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:3869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:430:2641":{"id":"0:430:2641","crate_id":0,"name":"std_hours","span":{"filename":"src/ext.rs","begin":[197,4],"end":[197,38]},"visibility":"default","docs":"Create a [`std::time::Duration`] from the number of hours.","links":{"`std::time::Duration`":"2:50206:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50206:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:1252:2518":{"id":"0:1252:2518","crate_id":0,"name":"DifferentVariant","span":{"filename":"src/error/mod.rs","begin":[63,4],"end":[63,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"DifferentVariant","id":"0:1219:2518","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}},"2:3401:3693":{"id":"2:3401:3693","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3403:181","2:3404:353"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1246:2477":{"id":"0:1246:2477","crate_id":0,"name":"ConversionRange","span":{"filename":"src/error/mod.rs","begin":[48,4],"end":[48,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"ConversionRange","id":"0:1206:2477","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}},"0:1301:1953":{"id":"0:1301:1953","crate_id":0,"name":"March","span":{"filename":"src/month.rs","begin":[17,4],"end":[17,13]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:1249:1689":{"id":"0:1249:1689","crate_id":0,"name":"ComponentRange","span":{"filename":"src/error/mod.rs","begin":[49,4],"end":[49,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"ComponentRange","id":"0:1185:1689","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}},"2:3648:3708":{"id":"2:3648:3708","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3650:59550","2:3651:59551","2:3652:55047"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13503:60852":{"id":"2:13503:60852","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13054:3852","str::match_indices":"1:16010:3582","`DoubleEndedIterator`":"2:8448:120","prim@char":"1:16004:3577"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49630:3893","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:3869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13073:3870":{"id":"2:13073:3870","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13075:4926","2:13076:922","2:13077:60290","2:13078:60291"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8448:120":{"id":"2:8448:120","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8449:4211","2:8450:4212","2:8451:4213","2:8452:4214","2:8456:4215","2:8459:4216"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8602:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:830:1715":{"id":"0:830:1715","crate_id":0,"name":"time","span":{"filename":"src/time.rs","begin":[1,0],"end":[761,1]},"visibility":"crate","docs":"The [`Time`] struct and its associated `impl`s.","links":{"`Time`":"0:1417:1723"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1417:1723"],"is_stripped":true}},"1:6959:4538":{"id":"1:6959:4538","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6960:57365"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3247:115":{"id":"2:3247:115","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3248:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13513:60857":{"id":"2:13513:60857","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1257:1542":{"id":"0:1257:1542","crate_id":0,"name":"0","span":{"filename":"src/error/mod.rs","begin":[64,19],"end":[64,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"InvalidVariant","id":"0:1232:2521","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"2:3384:3691":{"id":"2:3384:3691","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3386:1103"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3281:220-0:1245:127":{"id":"a:2:3281:220-0:1245:127","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Sync","id":"2:3281:220","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1245:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:3435:3701":{"id":"2:3435:3701","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3437:1234"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3812:3717":{"id":"2:3812:3717","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:432:2645":{"id":"0:432:2645","crate_id":0,"name":"std_weeks","span":{"filename":"src/ext.rs","begin":[201,4],"end":[201,38]},"visibility":"default","docs":"Create a [`std::time::Duration`] from the number of weeks.","links":{"`std::time::Duration`":"2:50206:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50206:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:3717:3709":{"id":"2:3717:3709","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"2:3648:3708","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:4051:4291":{"id":"2:4051:4291","crate_id":2,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4052:4299"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3581:3706":{"id":"2:3581:3706","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3583:754"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3577:3705","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:409:2228":{"id":"0:409:2228","crate_id":0,"name":"milliseconds","span":{"filename":"src/ext.rs","begin":[88,4],"end":[90,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1054:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13514:60858":{"id":"2:13514:60858","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:16004:3577","self::pattern":"2:13054:3852"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"2:13084:3868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:375":{"id":"0:375","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[24,0],"end":[24,44]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"different_variant::DifferentVariant","name":"DifferentVariant","id":"0:1219:2518","glob":false}},"2:2863:97":{"id":"2:2863:97","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2865:2657"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13442:3913":{"id":"2:13442:3913","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:16004:3577"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49432:3880","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2967:184":{"id":"2:2967:184","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2969:997","2:2970:826","2:2971:792","2:2972:713","2:2973:696"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2921:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:23465:5005":{"id":"2:23465:5005","crate_id":2,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23466:1270","2:23467:1269","2:23468:1267","2:23469:1266"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialEq","id":"2:22877:5004","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13463:4216":{"id":"2:13463:4216","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"prim@char":"1:16004:3577","`None`":"2:47495:176","self::pattern":"2:13054:3852"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:3869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13079:3869":{"id":"2:13079:3869","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13081:4211","2:13082:59745","2:13083:59746"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"2:13073:3870","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13544:60864":{"id":"2:13544:60864","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:16004:3577"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:49779:3897","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3406:3694":{"id":"2:3406:3694","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3408:181","2:3409:356"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2921:183":{"id":"2:2921:183","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2923:604","2:2924:907"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:8602:157":{"id":"2:8602:157","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8603:2494","2:8604:922","2:8605:4222","2:8608:4223","2:8609:495","2:8611:4224","2:8614:4225","2:8615:4226","2:8616:4227","2:8617:4228","2:8619:3764","2:8621:4229","2:8622:4230","2:8624:841","2:8627:4231","2:8634:4232","2:8636:4233","2:8639:4234","2:8640:4235","2:8641:4236","2:8643:4237","2:8645:4238","2:8648:1308","2:8649:4239","2:8650:4240","2:8654:4241","2:8657:4242","2:8658:4243","2:8659:4244","2:8661:4245","2:8662:3802","2:8664:4246","2:8667:4247","2:8669:4248","2:8679:4249","2:8694:4250","2:8696:4251","2:8700:4252","2:8709:4253","2:8712:2495","2:8714:4254","2:8717:276","2:8724:294","2:8731:4255","2:8738:4256","2:8747:4257","2:8757:1014","2:8764:4258","2:8771:1677","2:8772:1676","2:8773:3736","2:8785:3735","2:8792:3734","2:8804:3733","2:8811:4259","2:8812:4260","2:8817:2498","2:8820:4261","2:8823:4262","2:8824:2492","2:8826:4263","2:8828:415","2:8831:4264","2:8834:997","2:8837:4265","2:8840:604","2:8843:4266","2:8846:907","2:8848:826","2:8850:792","2:8852:713","2:8854:696","2:8856:4267","2:8857:4268","2:8865:4269"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5719:4552":{"id":"1:5719:4552","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5720:54883","1:5721:54885","1:5722:54884","1:5723:54886"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3396:3692":{"id":"2:3396:3692","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3398:181","2:3399:351"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22940:4531":{"id":"2:22940:4531","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22930:2572","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13523:55050":{"id":"2:13523:55050","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:16004:3577","self::pattern":"2:13054:3852"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:3869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13084:3868":{"id":"2:13084:3868","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:3869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1448:1724":{"id":"0:1448:1724","crate_id":0,"name":"UtcOffset","span":{"filename":"src/utc_offset.rs","begin":[24,0],"end":[31,1]},"visibility":"public","docs":"An offset from UTC.\n\nThis struct can store values up to ±23:59:59. If you need support outside this range, please\nfile an issue with your use case.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:2871:2657":{"id":"2:2871:2657","crate_id":2,"name":"borrow","span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6103:61502":{"id":"5:6103:61502","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:354:2515":{"id":"0:354:2515","crate_id":0,"name":"invalid_variant","span":{"filename":"src/error/invalid_variant.rs","begin":[1,0],"end":[34,1]},"visibility":{"restricted":{"parent":"0:308:1688","path":"::error"}},"docs":"Invalid variant error","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1232:2521"],"is_stripped":true}},"2:3269:211":{"id":"2:3269:211","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13535:2173":{"id":"2:13535:2173","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12993:2699","`FromStr`":"2:12993:2699"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47622:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12993:2699","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12993:2699","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1251:1542":{"id":"0:1251:1542","crate_id":0,"name":"0","span":{"filename":"src/error/mod.rs","begin":[49,19],"end":[49,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"ComponentRange","id":"0:1185:1689","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"1:4741:4455":{"id":"1:4741:4455","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4742:57486","1:4743:40840","1:4744:57488","1:4745:57487"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:398:2212":{"id":"0:398:2212","crate_id":0,"name":"nanoseconds","span":{"filename":"src/ext.rs","begin":[62,4],"end":[62,37]},"visibility":"default","docs":"Create a [`Duration`] from the number of nanoseconds.","links":{"`Duration`":"0:1054:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1054:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:724:1709":{"id":"0:724:1709","crate_id":0,"name":"primitive_date_time","span":{"filename":"src/primitive_date_time.rs","begin":[1,0],"end":[893,1]},"visibility":"crate","docs":"The [`PrimitiveDateTime`] struct and its associated `impl`s.","links":{"`PrimitiveDateTime`":"0:1368:1722"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1368:1722"],"is_stripped":true}},"b:2:3198-0:1245:127":{"id":"b:2:3198-0:1245:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3175:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Into","id":"2:3172:149","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1245:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3201:2737"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:449:2643":{"id":"0:449:2643","crate_id":0,"name":"std_days","span":{"filename":"src/ext.rs","begin":[269,4],"end":[272,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50206:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6083":{"id":"5:6083","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5903:1340","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6084:61499","5:6085:4477","5:6088:61500","5:6091:61501","5:6103:61502","5:6104:61503","5:6105:3751","5:6106:56131","5:6107:56132"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3364:2200":{"id":"2:3364:2200","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3365:181","2:3366:913"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3166:75":{"id":"2:3166:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3168:305"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:8367:3763":{"id":"2:8367:3763","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8369:4263"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:995":{"id":"0:995","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[327,0],"end":[327,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::time::Time","name":"Time","id":"0:1417:1723","glob":false}},"2:13448:60845":{"id":"2:13448:60845","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49726:3883","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:401:2210":{"id":"0:401:2210","crate_id":0,"name":"seconds","span":{"filename":"src/ext.rs","begin":[68,4],"end":[68,33]},"visibility":"default","docs":"Create a [`Duration`] from the number of seconds.","links":{"`Duration`":"0:1054:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1054:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:431:2643":{"id":"0:431:2643","crate_id":0,"name":"std_days","span":{"filename":"src/ext.rs","begin":[199,4],"end":[199,37]},"visibility":"default","docs":"Create a [`std::time::Duration`] from the number of days.","links":{"`std::time::Duration`":"2:50206:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50206:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:437:2637":{"id":"0:437:2637","crate_id":0,"name":"std_seconds","span":{"filename":"src/ext.rs","begin":[217,4],"end":[219,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50206:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2888:104":{"id":"2:2888:104","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2889:408","2:2890:410"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10575:3922":{"id":"2:10575:3922","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10576:146","2:10577:34693","2:10578:56972"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13421:60841":{"id":"2:13421:60841","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8887:3760":{"id":"2:8887:3760","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"2:7928:3742","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:342:2511":{"id":"0:342:2511","crate_id":0,"name":"different_variant","span":{"filename":"src/error/different_variant.rs","begin":[1,0],"end":[34,1]},"visibility":{"restricted":{"parent":"0:308:1688","path":"::error"}},"docs":"Different variant error","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1219:2518"],"is_stripped":true}},"0:1313:1949":{"id":"0:1313:1949","crate_id":0,"name":"July","span":{"filename":"src/month.rs","begin":[21,4],"end":[21,12]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:412:2239":{"id":"0:412:2239","crate_id":0,"name":"hours","span":{"filename":"src/ext.rs","begin":[100,4],"end":[102,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1054:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:9343:4528":{"id":"1:9343:4528","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9344:57572","1:9345:57573","1:9346:57574","1:9347:57575","1:9348:57576","1:9349:40429","1:9350:57571"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:2572","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13470:33314":{"id":"2:13470:33314","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:13054:3852","prim@char":"1:16004:3577"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:12846:3899","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:451:1705":{"id":"0:451:1705","crate_id":0,"name":"instant","span":{"filename":"src/instant.rs","begin":[1,0],"end":[262,1]},"visibility":"crate","docs":"The [`Instant`] struct and its associated `impl`s.","links":{"`Instant`":"0:1260:1719"},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1260:1719"],"is_stripped":true}},"0:438:2639":{"id":"0:438:2639","crate_id":0,"name":"std_minutes","span":{"filename":"src/ext.rs","begin":[221,4],"end":[223,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50206:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:4000:68":{"id":"2:4000:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4001:1429"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"2:3427:3699":{"id":"2:3427:3699","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3429:354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13488:60848":{"id":"2:13488:60848","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:402:2235":{"id":"0:402:2235","crate_id":0,"name":"minutes","span":{"filename":"src/ext.rs","begin":[70,4],"end":[70,33]},"visibility":"default","docs":"Create a [`Duration`] from the number of minutes.","links":{"`Duration`":"0:1054:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1054:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:2:9259:4165-0:1245:127":{"id":"a:2:9259:4165-0:1245:127","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"UnwindSafe","id":"2:9259:4165","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1245:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:126:1700":{"id":"0:126:1700","crate_id":0,"name":"duration","span":{"filename":"src/duration.rs","begin":[1,0],"end":[1106,1]},"visibility":"crate","docs":"The [`Duration`] struct and its associated `impl`s.","links":{"`Duration`":"0:1054:121"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1054:121"],"is_stripped":true}},"0:384:2529":{"id":"0:384:2529","crate_id":0,"name":"source","span":{"filename":"src/error/mod.rs","begin":[92,4],"end":[111,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"kind":"resolved_path","inner":{"name":"std::error::Error","id":"1:2572:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[]}],"lifetime":"'static"}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:7928:3742":{"id":"2:7928:3742","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7929:59676","2:7930:59677","2:7931:59674","2:7932:59672","2:7933:59678","2:7934:59675","2:7935:59673"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2888:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2967:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:1245:127":{"id":"0:1245:127","crate_id":0,"name":"Error","span":{"filename":"src/error/mod.rs","begin":[47,0],"end":[65,1]},"visibility":"public","docs":"A unified error type for anything returned by a method in the time crate.\n\nThis can be used when you either don't know or don't care about the exact error returned.\n`Result<_, time::Error>` (or its alias `time::Result<_>`) will work in these situations.","links":{},"attrs":["#[allow(missing_copy_implementations, variant_size_differences)]","#[allow(clippy :: missing_docs_in_private_items)]","#[non_exhaustive]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:1246:2477","0:1249:1689","0:1252:2518","0:1255:2521"],"impls":["a:2:3310:3964-0:1245:127","a:2:3281:220-0:1245:127","a:2:9259:4165-0:1245:127","a:2:9260:4164-0:1245:127","a:2:3269:211-0:1245:127","b:2:3202-0:1245:127","b:2:3213-0:1245:127","b:2:4002-0:1245:127","b:2:2869-0:1245:127","b:2:2872-0:1245:127","b:2:3208-0:1245:127","b:2:3198-0:1245:127","b:5:6413-0:1245:127","0:1258","0:381","0:383"]}},"2:13444:4631":{"id":"2:13444:4631","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49448:3878","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13430:2704":{"id":"2:13430:2704","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47495:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8363:2197":{"id":"2:8363:2197","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8365:2492"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1004:205":{"id":"0:1004:205","crate_id":0,"name":"Result","span":{"filename":"src/lib.rs","begin":[332,0],"end":[332,52]},"visibility":"public","docs":"An alias for [`std::result::Result`] with a generic error from the time crate.","links":{"`std::result::Result`":"2:47622:205"},"attrs":[],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"core::result::Result","id":"2:47622:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1245:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]}}},"2:10301:3931":{"id":"2:10301:3931","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10302:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3172:149":{"id":"2:3172:149","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3174:2737"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:931:1681":{"id":"0:931:1681","crate_id":0,"name":"util","span":{"filename":"src/util.rs","begin":[1,0],"end":[80,1]},"visibility":"public","docs":"Utility functions.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:942:1820","0:944:1821","0:945:1682","0:946:1822"],"is_stripped":false}},"2:10540:146":{"id":"2:10540:146","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10541:652","2:10542:2181","2:10543:4423","2:10544:4424","2:10545:4425","2:10546:4426","2:10547:4427","2:10548:4428","2:10549:4429","2:10550:4430","2:10551:4431","2:10552:4432","2:10553:4433","2:10554:4434","2:10555:4435","2:10556:1533"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8404:151":{"id":"2:8404:151","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8405:2494","2:8406:4221","2:8407:768"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:382:660":{"id":"0:382:660","crate_id":0,"name":"fmt","span":{"filename":"src/error/mod.rs","begin":[68,4],"end":[87,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"2:10252:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"2:10241:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:2:3202-0:1245:127":{"id":"b:2:3202-0:1245:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"From","id":"2:3175:135","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1245:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:3204:681"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3525:132":{"id":"2:3525:132","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3527:181","2:3528:378"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6437:4533":{"id":"1:6437:4533","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6438:4837","1:6439:4838","1:6440:9471","1:6441:54708","1:6443:54712","1:6445:54709","1:6446:54710","1:6448:54711"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:2572","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13537:5347":{"id":"2:13537:5347","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10292:109":{"id":"2:10292:109","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10293:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3440:3702":{"id":"2:3440:3702","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3442:1237"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3279:106":{"id":"2:3279:106","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2888:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"a:2:9260:4164-0:1245:127":{"id":"a:2:9260:4164-0:1245:127","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"RefUnwindSafe","id":"2:9260:4164","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1245:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"2:13782:150":{"id":"2:13782:150","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13783:181","2:13784:150","2:13785:767"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13510:60855":{"id":"2:13510:60855","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:408:2224":{"id":"0:408:2224","crate_id":0,"name":"microseconds","span":{"filename":"src/ext.rs","begin":[84,4],"end":[86,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1054:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13473:55041":{"id":"2:13473:55041","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"prim@char":"1:16004:3577","str::split":"1:16010:3582","`DoubleEndedIterator`":"2:8448:120","self::pattern":"2:13054:3852"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49480:3884","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:3869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:439:2641":{"id":"0:439:2641","crate_id":0,"name":"std_hours","span":{"filename":"src/ext.rs","begin":[225,4],"end":[227,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50206:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8473:3761":{"id":"2:8473:3761","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8474:793","2:8475:4217"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8602:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6863:4542":{"id":"1:6863:4542","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6864:59096"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3269:211-0:1245:127":{"id":"a:2:3269:211-0:1245:127","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Send","id":"2:3269:211","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1245:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1307:1951":{"id":"0:1307:1951","crate_id":0,"name":"May","span":{"filename":"src/month.rs","begin":[19,4],"end":[19,11]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"1:5008:4511":{"id":"1:5008:4511","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5009:4275","1:5010:57046"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:2872-0:1245:127":{"id":"b:2:2872-0:1245:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"BorrowMut","id":"2:2866:3813","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1245:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2874:54657"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:14:1699":{"id":"0:14:1699","crate_id":0,"name":"date","span":{"filename":"src/date.rs","begin":[1,0],"end":[1035,1]},"visibility":"crate","docs":"The [`Date`] struct and its associated `impl`s.","links":{"`Date`":"0:1006:1718"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1006:1718"],"is_stripped":true}},"2:13485:55045":{"id":"2:13485:55045","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:16004:3577","str::splitn":"1:16010:3582","self::pattern":"2:13054:3852"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49584:3888","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:3869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6861:4541":{"id":"1:6861:4541","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6862:57302"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10313:3936":{"id":"2:10313:3936","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10314:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:424:2629":{"id":"0:424:2629","crate_id":0,"name":"NumericalStdDuration","span":{"filename":"src/ext.rs","begin":[185,0],"end":[202,1]},"visibility":"public","docs":"Create [`std::time::Duration`]s from numeric literals.\n\n# Examples\n\nBasic construction of [`std::time::Duration`]s.\n\n```rust\n# use time::ext::NumericalStdDuration;\n# use core::time::Duration;\nassert_eq!(5.std_nanoseconds(), Duration::from_nanos(5));\nassert_eq!(5.std_microseconds(), Duration::from_micros(5));\nassert_eq!(5.std_milliseconds(), Duration::from_millis(5));\nassert_eq!(5.std_seconds(), Duration::from_secs(5));\nassert_eq!(5.std_minutes(), Duration::from_secs(5 * 60));\nassert_eq!(5.std_hours(), Duration::from_secs(5 * 3_600));\nassert_eq!(5.std_days(), Duration::from_secs(5 * 86_400));\nassert_eq!(5.std_weeks(), Duration::from_secs(5 * 604_800));\n```\n\nJust like any other [`std::time::Duration`], they can be added, subtracted, etc.\n\n```rust\n# use time::ext::NumericalStdDuration;\nassert_eq!(\n    2.std_seconds() + 500.std_milliseconds(),\n    2_500.std_milliseconds()\n);\nassert_eq!(\n    2.std_seconds() - 500.std_milliseconds(),\n    1_500.std_milliseconds()\n);\n```\n\nWhen called on floating point values, any remainder of the floating point value will be\ntruncated. Keep in mind that floating point numbers are inherently imprecise and have limited\ncapacity.","links":{"`std::time::Duration`":"2:50206:121"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:425:2631","0:426:2633","0:427:2635","0:428:2637","0:429:2639","0:430:2641","0:431:2643","0:432:2645"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"sealed::Sealed","id":"0:393:2572","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":["0:433","0:442"]}},"2:13432:55008":{"id":"2:13432:55008","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47495:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10303:3932":{"id":"2:10303:3932","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10304:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3352:2198":{"id":"2:3352:2198","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3354:181","2:3355:558"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"a:2:3310:3964-0:1245:127":{"id":"a:2:3310:3964-0:1245:127","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[1,0],"end":[1,0]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Unpin","id":"2:3310:3964","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1245:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1325:1945":{"id":"0:1325:1945","crate_id":0,"name":"November","span":{"filename":"src/month.rs","begin":[25,4],"end":[25,17]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:533:1707":{"id":"0:533:1707","crate_id":0,"name":"month","span":{"filename":"src/month.rs","begin":[1,0],"end":[164,1]},"visibility":"crate","docs":"The `Month` enum and its associated `impl`s.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1294:1720"],"is_stripped":true}},"0:1474:2020":{"id":"0:1474:2020","crate_id":0,"name":"Tuesday","span":{"filename":"src/weekday.rs","begin":[19,4],"end":[19,11]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(clippy :: missing_docs_in_private_items)]"],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13532:60862":{"id":"2:13532:60862","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:16004:3577","self::pattern":"2:13054:3852"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:3869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:783:222":{"id":"5:783:222","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:784:3815","5:785:4271","5:786:4272"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10530:142":{"id":"2:10530:142","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10531:715","2:10533:4273"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:378":{"id":"0:378","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[31,0],"end":[31,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"invalid_variant::InvalidVariant","name":"InvalidVariant","id":"0:1232:2521","glob":false}},"0:1417:1723":{"id":"0:1417:1723","crate_id":0,"name":"Time","span":{"filename":"src/time.rs","begin":[32,0],"end":[43,1]},"visibility":"public","docs":"The clock time within a given date. Nanosecond precision.\n\nAll minutes are assumed to have exactly 60 seconds; no attempt is made to handle leap seconds\n(either positive or negative).\n\nWhen comparing two `Time`s, they are assumed to be in the same calendar date.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"0:974":{"id":"0:974","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[319,0],"end":[319,26]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::date::Date","name":"Date","id":"0:1006:1718","glob":false}},"2:13423:60842":{"id":"2:13423:60842","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:16010:3582"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13526:60860":{"id":"2:13526:60860","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:13054:3852","prim@char":"1:16004:3577"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:3869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:411:2235":{"id":"0:411:2235","crate_id":0,"name":"minutes","span":{"filename":"src/ext.rs","begin":[96,4],"end":[98,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1054:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3212:1417":{"id":"2:3212:1417","crate_id":2,"name":"try_into","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47622:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3182:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23137:5061":{"id":"2:23137:5061","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"2:23774:5003","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23128:2572","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:4666:4469":{"id":"1:4666:4469","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4667:4772","1:4668:56766","1:4670:56767","1:4671:56768","1:4672:4470","1:4673:56769","1:4674:56765","1:4676:56770","1:4677:4245","1:4678:4631","1:4679:4228","1:4681:4239"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13541:60863":{"id":"2:13541:60863","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:16004:3577"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:49761:3895","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:7795:4698":{"id":"1:7795:4698","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7796:57606"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5727:4551":{"id":"1:5727:4551","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5728:7315","1:5729:57002","1:5730:57003"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23089:17602":{"id":"2:23089:17602","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23090:8494","2:23091:59911","2:23092:59912"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23082:2572","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3277:218":{"id":"2:3277:218","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1304:1952":{"id":"0:1304:1952","crate_id":0,"name":"April","span":{"filename":"src/month.rs","begin":[18,4],"end":[18,13]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:1484:2025":{"id":"0:1484:2025","crate_id":0,"name":"Sunday","span":{"filename":"src/weekday.rs","begin":[29,4],"end":[29,10]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(clippy :: missing_docs_in_private_items)]"],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:399:2224":{"id":"0:399:2224","crate_id":0,"name":"microseconds","span":{"filename":"src/ext.rs","begin":[64,4],"end":[64,38]},"visibility":"default","docs":"Create a [`Duration`] from the number of microseconds.","links":{"`Duration`":"0:1054:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1054:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:3358:3690":{"id":"2:3358:3690","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3360:181","2:3361:1102"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1219:2518":{"id":"0:1219:2518","crate_id":0,"name":"DifferentVariant","span":{"filename":"src/error/different_variant.rs","begin":[8,0],"end":[8,28]},"visibility":"public","docs":"An error type indicating that a [`TryFrom`](core::convert::TryFrom) call failed because the\noriginal value was of a different variant.","links":{"core::convert::TryFrom":"2:3182:227"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"unit","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":[],"impls":[]}},"0:433":{"id":"0:433","crate_id":0,"name":null,"span":{"filename":"src/ext.rs","begin":[204,0],"end":[236,1]},"visibility":{"restricted":{"parent":"0:385:1701","path":"::ext"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"NumericalStdDuration","id":"0:424:2629","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"primitive","inner":"u64"},"items":["0:434:2631","0:435:2633","0:436:2635","0:437:2637","0:438:2639","0:439:2641","0:440:2643","0:441:2645"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13436:55010":{"id":"2:13436:55010","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:1476:2021":{"id":"0:1476:2021","crate_id":0,"name":"Wednesday","span":{"filename":"src/weekday.rs","begin":[21,4],"end":[21,13]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(clippy :: missing_docs_in_private_items)]"],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13456:55049":{"id":"2:13456:55049","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:13054:3852","prim@char":"1:16004:3577"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:3869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1054:121":{"id":"0:1054:121","crate_id":0,"name":"Duration","span":{"filename":"src/duration.rs","begin":[35,0],"end":[42,1]},"visibility":"public","docs":"A span of time with nanosecond precision.\n\nEach `Duration` is composed of a whole number of seconds and a fractional part represented in\nnanoseconds.\n\nThis implementation allows for negative durations, unlike [`core::time::Duration`].","links":{"`core::time::Duration`":"2:50206:121"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:13494:3659":{"id":"2:13494:3659","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:13054:3852","`DoubleEndedIterator`":"2:8448:120","str::matches":"1:16010:3582","prim@char":"1:16004:3577"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49666:3890","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:445:2635":{"id":"0:445:2635","crate_id":0,"name":"std_milliseconds","span":{"filename":"src/ext.rs","begin":[249,4],"end":[252,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50206:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10307:3934":{"id":"2:10307:3934","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10308:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3577:3705":{"id":"2:3577:3705","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3579:181","2:3580:753"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:419:2210":{"id":"0:419:2210","crate_id":0,"name":"seconds","span":{"filename":"src/ext.rs","begin":[126,4],"end":[128,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1054:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:998":{"id":"0:998","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[328,0],"end":[328,37]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::utc_offset::UtcOffset","name":"UtcOffset","id":"0:1448:1724","glob":false}},"2:3274:2163":{"id":"2:3274:2163","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:421:2239":{"id":"0:421:2239","crate_id":0,"name":"hours","span":{"filename":"src/ext.rs","begin":[134,4],"end":[136,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1054:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:441:2645":{"id":"0:441:2645","crate_id":0,"name":"std_weeks","span":{"filename":"src/ext.rs","begin":[233,4],"end":[235,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50206:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3104:3920":{"id":"2:3104:3920","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:3103:2572","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5775:4555":{"id":"1:5775:4555","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5776:56740","1:5777:56741","1:5778:56742","1:5779:56743"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1472:2026":{"id":"0:1472:2026","crate_id":0,"name":"Monday","span":{"filename":"src/weekday.rs","begin":[17,4],"end":[17,10]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(clippy :: missing_docs_in_private_items)]"],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:8413:3762":{"id":"2:8413:3762","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8415:4218","2:8417:4219","2:8418:4220"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6107:56132":{"id":"5:6107:56132","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:16010:3582"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13426:2178":{"id":"2:13426:2178","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12525:3872"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:942:1820":{"id":"0:942:1820","crate_id":0,"name":"days_in_year_month","span":{"filename":"src/util.rs","begin":[21,0],"end":[29,1]},"visibility":"public","docs":"Get the number of days in the month of a given year.\n\n```rust\n# use time::{Month, util};\nassert_eq!(util::days_in_year_month(2020, Month::February), 29);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["year",{"kind":"primitive","inner":"i32"}],["month",{"kind":"resolved_path","inner":{"name":"Month","id":"0:1294:1720","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"primitive","inner":"u8"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"}}},"0:944:1821":{"id":"0:944:1821","crate_id":0,"name":"is_leap_year","span":{"filename":"src/util.rs","begin":[42,0],"end":[44,1]},"visibility":"public","docs":"Returns if the provided year is a leap year in the proleptic Gregorian calendar. Uses\n[astronomical year numbering](https://en.wikipedia.org/wiki/Astronomical_year_numbering).\n\n```rust\n# use time::util::is_leap_year;\nassert!(!is_leap_year(1900));\nassert!(is_leap_year(2000));\nassert!(is_leap_year(2004));\nassert!(!is_leap_year(2005));\nassert!(!is_leap_year(2100));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["year",{"kind":"primitive","inner":"i32"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"}}},"0:422:1943":{"id":"0:422:1943","crate_id":0,"name":"days","span":{"filename":"src/ext.rs","begin":[138,4],"end":[140,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1054:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6084:61499":{"id":"5:6084:61499","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:3965","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:5360","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:3965","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:5360","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:414:2246":{"id":"0:414:2246","crate_id":0,"name":"weeks","span":{"filename":"src/ext.rs","begin":[108,4],"end":[110,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1054:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1368:1722":{"id":"0:1368:1722","crate_id":0,"name":"PrimitiveDateTime","span":{"filename":"src/primitive_date_time.rs","begin":[17,0],"end":[22,1]},"visibility":"public","docs":"Combined date and time.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:8400:136":{"id":"2:8400:136","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8402:684"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5735:4553":{"id":"1:5735:4553","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5736:7315","1:5737:8876"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13512:60856":{"id":"2:13512:60856","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13453:55048":{"id":"2:13453:55048","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:16004:3577","self::pattern":"2:13054:3852"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6459:4536":{"id":"1:6459:4536","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6460:57342","1:6461:7302","1:6462:57343","1:6463:57344","1:6464:57345","1:6465:57346"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:2572","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:383":{"id":"0:383","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[91,0],"end":[112,1]},"visibility":{"restricted":{"parent":"0:308:1688","path":"::error"}},"docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["type_id","cause","description","source","provide"],"trait":{"kind":"resolved_path","inner":{"name":"Error","id":"1:2572:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1245:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:384:2529"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1480:2023":{"id":"0:1480:2023","crate_id":0,"name":"Friday","span":{"filename":"src/weekday.rs","begin":[25,4],"end":[25,10]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(clippy :: missing_docs_in_private_items)]"],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"1:6685:4554":{"id":"1:6685:4554","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6686:57387","1:6687:7224","1:6688:7225","1:6689:7227","1:6690:7226","1:6691:7228","1:6692:7229","1:6693:7231","1:6694:6817","1:6695:7234","1:6696:7235","1:6697:7236","1:6698:7237","1:6699:7238","1:6700:7239","1:6701:7232","1:6702:7233"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5785:4556":{"id":"1:5785:4556","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5786:54828"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3729:224":{"id":"2:3729:224","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3730:181","2:3731:3711","2:3732:686","2:3733:369"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"2:3734:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3729:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:444:2633":{"id":"0:444:2633","crate_id":0,"name":"std_microseconds","span":{"filename":"src/ext.rs","begin":[244,4],"end":[247,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50206:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:416:2212":{"id":"0:416:2212","crate_id":0,"name":"nanoseconds","span":{"filename":"src/ext.rs","begin":[114,4],"end":[116,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1054:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:902:1716":{"id":"0:902:1716","crate_id":0,"name":"utc_offset","span":{"filename":"src/utc_offset.rs","begin":[1,0],"end":[337,1]},"visibility":"crate","docs":"The [`UtcOffset`] struct and its associated `impl`s.","links":{"`UtcOffset`":"0:1448:1724"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1448:1724"],"is_stripped":true}},"2:3559:3714":{"id":"2:3559:3714","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3561:237","2:3562:206","2:3563:59834"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1001":{"id":"0:1001","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[329,0],"end":[329,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::weekday::Weekday","name":"Weekday","id":"0:1471:1725","glob":false}},"2:13540:54956":{"id":"2:13540:54956","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3278:217":{"id":"2:3278:217","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:0:1715":{"id":"0:0:1715","crate_id":0,"name":"time","span":{"filename":"src/lib.rs","begin":[1,0],"end":[332,52]},"visibility":"public","docs":"# Feature flags\n\nThis crate exposes a number of features. These can be enabled or disabled as shown\n[in Cargo's documentation](https://doc.rust-lang.org/cargo/reference/features.html). Features\nare _disabled_ by default unless otherwise noted.\n\nReliance on a given feature is always indicated alongside the item definition.\n\n- `std` (_enabled by default, implicitly enables `alloc`_)\n\n  This enables a number of features that depend on the standard library.\n\n- `alloc` (_enabled by default via `std`_)\n\n  Enables a number of features that require the ability to dynamically allocate memory.\n\n- `macros`\n\n  Enables macros that provide compile-time verification of values and intuitive syntax.\n\n- `formatting` (_implicitly enables `std`_)\n\n  Enables formatting of most structs.\n\n- `parsing`\n\n  Enables parsing of most structs.\n\n- `local-offset` (_implicitly enables `std`_)\n\n  This feature enables a number of methods that allow obtaining the system's UTC offset.\n\n- `large-dates`\n\n  By default, only years within the ±9999 range (inclusive) are supported. If you need support\n  for years outside this range, consider enabling this feature; the supported range will be\n  increased to ±999,999.\n\n  Note that enabling this feature has some costs, as it means forgoing some optimizations.\n  Ambiguities may be introduced when parsing that would not otherwise exist.\n\n- `serde`\n\n  Enables [serde](https://docs.rs/serde) support for all types except [`Instant`].\n\n- `serde-human-readable` (_implicitly enables `serde`, `formatting`, and `parsing`_)\n\n  Allows serde representations to use a human-readable format. This is determined by the\n  serializer, not the user. If this feature is not enabled or if the serializer requests a\n  non-human-readable format, a format optimized for binary representation will be used.\n\n  Libraries should never enable this feature, as the decision of what format to use should be up\n  to the user.\n\n- `serde-well-known` (_implicitly enables `serde/alloc`, `formatting`, and `parsing`_)\n\n  Enables support for serializing and deserializing well-known formats using serde's\n  [`#[with]` attribute](https://serde.rs/field-attrs.html#with).\n\n- `rand`\n\n  Enables [rand](https://docs.rs/rand) support for all types.\n\n- `quickcheck` (_implicitly enables `alloc`_)\n\n  Enables [quickcheck](https://docs.rs/quickcheck) support for all types except [`Instant`].\n\n- `wasm-bindgen`\n\n  Enables [wasm-bindgen](https://github.com/rustwasm/wasm-bindgen) support for converting\n  [JavaScript dates](https://rustwasm.github.io/wasm-bindgen/api/js_sys/struct.Date.html), as\n  well as obtaining the UTC offset from JavaScript.\n\nOne pseudo-feature flag that is only available to end users is the `unsound_local_offset` cfg.\nAs the name indicates, using the feature is unsound, and [may cause unexpected segmentation\nfaults](https://github.com/time-rs/time/issues/293). Unlike other flags, this is deliberately\nonly available to end users; this is to ensure that a user doesn't have unsound behavior without\nknowing it. To enable this behavior, you must use `RUSTFLAGS=\"--cfg unsound_local_offset\" cargo\nbuild` or similar. Note: This flag is _not tested anywhere_, including in the regular test of\nthe powerset of all feature flags. Use at your own risk. Without this flag, any method that\nrequires the local offset will return the `Err` variant when otherwise unsound.","links":{"`Instant`":"0:1260:1719"},"attrs":["#![doc(html_playground_url = \"https://play.rust-lang.org\")]","#![deny(anonymous_parameters, clippy :: all, const_err,\nillegal_floating_point_literal_pattern, late_bound_lifetime_arguments,\npath_statements, patterns_in_fns_without_body, rust_2018_idioms,\ntrivial_casts, trivial_numeric_casts, unreachable_pub, unsafe_code,\nunsafe_op_in_unsafe_fn, unused_extern_crates)]","#![warn(clippy :: dbg_macro, clippy :: decimal_literal_representation, clippy\n:: get_unwrap, clippy :: missing_docs_in_private_items, clippy :: nursery,\nclippy :: print_stdout, clippy :: todo, clippy :: unimplemented, clippy ::\nunnested_or_patterns, clippy :: unwrap_in_result, clippy :: unwrap_used,\nclippy :: use_debug, deprecated_in_future, missing_copy_implementations,\nmissing_debug_implementations, unused_qualifications,\nvariant_size_differences)]","#![allow(clippy :: redundant_pub_crate)]","#![doc(html_favicon_url =\n\"https://avatars0.githubusercontent.com/u/55999857\")]","#![doc(html_logo_url = \"https://avatars0.githubusercontent.com/u/55999857\")]","#![doc(test(attr(deny(warnings))))]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:308:1688","0:385:1701","0:931:1681","0:974","0:977","0:980","0:983","0:986","0:989","0:992","0:995","0:998","0:1001","0:1004:205"],"is_stripped":false}},"0:410:2210":{"id":"0:410:2210","crate_id":0,"name":"seconds","span":{"filename":"src/ext.rs","begin":[92,4],"end":[94,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1054:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13538:54954":{"id":"2:13538:54954","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:427:2635":{"id":"0:427:2635","crate_id":0,"name":"std_milliseconds","span":{"filename":"src/ext.rs","begin":[191,4],"end":[191,45]},"visibility":"default","docs":"Create a [`std::time::Duration`] from the number of milliseconds.","links":{"`std::time::Duration`":"2:50206:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50206:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"5:6091:61501":{"id":"5:6091:61501","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3431:3700":{"id":"2:3431:3700","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3433:357"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13506:60853":{"id":"2:13506:60853","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:406":{"id":"0:406","crate_id":0,"name":null,"span":{"filename":"src/ext.rs","begin":[79,0],"end":[111,1]},"visibility":{"restricted":{"parent":"0:385:1701","path":"::ext"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"NumericalDuration","id":"0:397:2599","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"primitive","inner":"i64"},"items":["0:407:2212","0:408:2224","0:409:2228","0:410:2210","0:411:2235","0:412:2239","0:413:1943","0:414:2246"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:393:2572":{"id":"0:393:2572","crate_id":0,"name":"Sealed","span":{"filename":"src/ext.rs","begin":[10,4],"end":[10,23]},"visibility":"public","docs":"A trait that cannot be implemented by downstream users.","links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13479:60847":{"id":"2:13479:60847","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:13054:3852","str::split":"1:16010:3582","prim@char":"1:16004:3577","str::split_terminator":"1:16010:3582"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49530:3885","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:3869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13440:55030":{"id":"2:13440:55030","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:16010:3582"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:415":{"id":"0:415","crate_id":0,"name":null,"span":{"filename":"src/ext.rs","begin":[113,0],"end":[145,1]},"visibility":{"restricted":{"parent":"0:385:1701","path":"::ext"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"NumericalDuration","id":"0:397:2599","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"primitive","inner":"f64"},"items":["0:416:2212","0:417:2224","0:418:2228","0:419:2210","0:420:2235","0:421:2239","0:422:1943","0:423:2246"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:977":{"id":"0:977","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[320,0],"end":[320,34]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::duration::Duration","name":"Duration","id":"0:1054:121","glob":false}},"2:9259:4165":{"id":"2:9259:4165","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13543:4580":{"id":"2:13543:4580","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:16004:3577"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:49770:3896","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:983":{"id":"0:983","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[323,0],"end":[323,32]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::instant::Instant","name":"Instant","id":"0:1260:1719","glob":false}},"0:1255:2521":{"id":"0:1255:2521","crate_id":0,"name":"InvalidVariant","span":{"filename":"src/error/mod.rs","begin":[64,4],"end":[64,34]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":[{"kind":"resolved_path","inner":{"name":"InvalidVariant","id":"0:1232:2521","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}]}},"0:1254:1542":{"id":"0:1254:1542","crate_id":0,"name":"0","span":{"filename":"src/error/mod.rs","begin":[63,21],"end":[63,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"DifferentVariant","id":"0:1219:2518","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"0:407:2212":{"id":"0:407:2212","crate_id":0,"name":"nanoseconds","span":{"filename":"src/ext.rs","begin":[80,4],"end":[82,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1054:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:447:2639":{"id":"0:447:2639","crate_id":0,"name":"std_minutes","span":{"filename":"src/ext.rs","begin":[259,4],"end":[262,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50206:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5647:4570":{"id":"1:5647:4570","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5648:56737","1:5649:5437"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:2572","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3376:1660":{"id":"2:3376:1660","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3378:893"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1259:660":{"id":"0:1259:660","crate_id":0,"name":"fmt","span":{"filename":"src/error/mod.rs","begin":[46,9],"end":[46,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"2:10252:134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"2:10241:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3342:1815":{"id":"2:3342:1815","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3344:181","2:3345:1355"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13417":{"id":"2:13417","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12514:1340","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13418:793","2:13419:4217","2:13420:60840","2:13421:60841","2:13423:60842","2:13426:2178","2:13427:60843","2:13428:304","2:13429:55011","2:13430:2704","2:13432:55008","2:13434:55009","2:13436:55010","2:13438:4628","2:13439:60844","2:13440:55030","2:13441:55031","2:13442:3913","2:13443:4933","2:13444:4631","2:13445:33457","2:13446:33447","2:13447:5697","2:13448:60845","2:13449:33442","2:13450:55047","2:13453:55048","2:13456:55049","2:13459:4255","2:13463:4216","2:13467:55038","2:13470:33314","2:13473:55041","2:13476:60846","2:13479:60847","2:13482:55043","2:13485:55045","2:13488:60848","2:13491:60849","2:13494:3659","2:13497:60850","2:13500:60851","2:13503:60852","2:13506:60853","2:13508:60854","2:13510:60855","2:13512:60856","2:13513:60857","2:13514:60858","2:13517:60859","2:13520:16253","2:13523:55050","2:13526:60860","2:13529:60861","2:13532:60862","2:13535:2173","2:13537:5347","2:13538:54954","2:13539:54955","2:13540:54956","2:13541:60863","2:13543:4580","2:13544:60864"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1262:1542":{"id":"0:1262:1542","crate_id":0,"name":"0","span":{"filename":"src/instant.rs","begin":[31,19],"end":[31,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"StdInstant","id":"1:12262:1719","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}},"2:10311:3935":{"id":"2:10311:3935","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10312:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1482:2024":{"id":"0:1482:2024","crate_id":0,"name":"Saturday","span":{"filename":"src/weekday.rs","begin":[27,4],"end":[27,12]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(clippy :: missing_docs_in_private_items)]"],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:420:2235":{"id":"0:420:2235","crate_id":0,"name":"minutes","span":{"filename":"src/ext.rs","begin":[130,4],"end":[132,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1054:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14242:4617":{"id":"2:14242:4617","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14243:56533","2:14244:56534","2:14245:56535","2:14246:56536","2:14247:56537","2:14248:56538","2:14249:4245"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9260:4164":{"id":"2:9260:4164","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:2:4002-0:1245:127":{"id":"b:2:4002-0:1245:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Any","id":"2:4000:68","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1245:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:4004:1429"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1260:1719":{"id":"0:1260:1719","crate_id":0,"name":"Instant","span":{"filename":"src/instant.rs","begin":[31,0],"end":[31,35]},"visibility":"public","docs":"A measurement of a monotonically non-decreasing clock. Opaque and useful only with [`Duration`].\n\nInstants are always guaranteed to be no less than any previously measured instant when created,\nand are often useful for tasks such as measuring benchmarks or timing how long an operation\ntakes.\n\nNote, however, that instants are not guaranteed to be **steady**. In other words, each tick of\nthe underlying clock may not be the same length (e.g. some seconds may be longer than others).\nAn instant may jump forwards or experience time dilation (slow down or speed up), but it will\nnever go backwards.\n\nInstants are opaque types that can only be compared to one another. There is no method to get\n\"the number of seconds\" from an instant. Instead, it only allows measuring the duration between\ntwo instants (or comparing two instants).\n\nThis implementation allows for operations with signed [`Duration`]s, but is otherwise identical\nto [`std::time::Instant`].","links":{"`std::time::Instant`":"1:12262:1719","`Duration`":"0:1054:121"},"attrs":["#[repr(transparent)]"],"deprecation":null,"kind":"struct","inner":{"struct_type":"tuple","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":["0:1262:1542"],"impls":[]}},"0:404:1943":{"id":"0:404:1943","crate_id":0,"name":"days","span":{"filename":"src/ext.rs","begin":[74,4],"end":[74,30]},"visibility":"default","docs":"Create a [`Duration`] from the number of days.","links":{"`Duration`":"0:1054:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1054:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:13476:60846":{"id":"2:13476:60846","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"`DoubleEndedIterator`":"2:8448:120","str::rsplit_terminator":"1:16010:3582","self::pattern":"2:13054:3852","prim@char":"1:16004:3577","str::split":"1:16010:3582"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49512:3887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:418:2228":{"id":"0:418:2228","crate_id":0,"name":"milliseconds","span":{"filename":"src/ext.rs","begin":[122,4],"end":[124,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1054:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13449:33442":{"id":"2:13449:33442","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:49754:3894","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:397:2599":{"id":"0:397:2599","crate_id":0,"name":"NumericalDuration","span":{"filename":"src/ext.rs","begin":[60,0],"end":[77,1]},"visibility":"public","docs":"Create [`Duration`]s from numeric literals.\n\n# Examples\n\nBasic construction of [`Duration`]s.\n\n```rust\n# use time::{Duration, ext::NumericalDuration};\nassert_eq!(5.nanoseconds(), Duration::nanoseconds(5));\nassert_eq!(5.microseconds(), Duration::microseconds(5));\nassert_eq!(5.milliseconds(), Duration::milliseconds(5));\nassert_eq!(5.seconds(), Duration::seconds(5));\nassert_eq!(5.minutes(), Duration::minutes(5));\nassert_eq!(5.hours(), Duration::hours(5));\nassert_eq!(5.days(), Duration::days(5));\nassert_eq!(5.weeks(), Duration::weeks(5));\n```\n\nSigned integers work as well!\n\n```rust\n# use time::{Duration, ext::NumericalDuration};\nassert_eq!((-5).nanoseconds(), Duration::nanoseconds(-5));\nassert_eq!((-5).microseconds(), Duration::microseconds(-5));\nassert_eq!((-5).milliseconds(), Duration::milliseconds(-5));\nassert_eq!((-5).seconds(), Duration::seconds(-5));\nassert_eq!((-5).minutes(), Duration::minutes(-5));\nassert_eq!((-5).hours(), Duration::hours(-5));\nassert_eq!((-5).days(), Duration::days(-5));\nassert_eq!((-5).weeks(), Duration::weeks(-5));\n```\n\nJust like any other [`Duration`], they can be added, subtracted, etc.\n\n```rust\n# use time::ext::NumericalDuration;\nassert_eq!(2.seconds() + 500.milliseconds(), 2_500.milliseconds());\nassert_eq!(2.seconds() - 500.milliseconds(), 1_500.milliseconds());\n```\n\nWhen called on floating point values, any remainder of the floating point value will be\ntruncated. Keep in mind that floating point numbers are inherently imprecise and have limited\ncapacity.","links":{"`Duration`":"0:1054:121"},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:398:2212","0:399:2224","0:400:2228","0:401:2210","0:402:2235","0:403:2239","0:404:1943","0:405:2246"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"sealed::Sealed","id":"0:393:2572","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":["0:406","0:415"]}},"2:22751:5001":{"id":"2:22751:5001","crate_id":2,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22752:5002","2:22753:59950","2:22754:60110","2:22755:60111","2:22756:60112","2:22757:2179","2:22758:60113","2:22759:60114","2:22760:60115","2:22761:60116","2:22762:60117","2:22763:60118","2:22764:60119","2:22765:60120","2:22766:60121","2:22767:60122","2:22768:60014","2:22769:60123","2:22770:59586","2:22771:59585","2:22772:59587","2:22773:59951","2:22774:59952","2:22775:59953","2:22776:59954"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22853:2572","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:980":{"id":"0:980","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[321,0],"end":[321,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::error::Error","name":"Error","id":"0:1245:127","glob":false}},"1:5653:4572":{"id":"1:5653:4572","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5654:6127","1:5655:2178"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:2572","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3182:227":{"id":"2:3182:227","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3184:127","2:3185:1416"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3347:2199":{"id":"2:3347:2199","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3349:181","2:3350:892"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3380:1663":{"id":"2:3380:1663","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3382:559"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3310:3964":{"id":"2:3310:3964","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22804:5010":{"id":"2:22804:5010","crate_id":2,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22805:5002","2:22806:59950","2:22807:1227","2:22808:1228","2:22809:2179","2:22810:2268","2:22811:60013","2:22812:2090","2:22813:2089","2:22814:60014","2:22815:59951","2:22816:59952","2:22817:59953","2:22818:59954","2:22819:59955","2:22820:59956","2:22821:59957"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3279:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22853:2572","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8883:3759":{"id":"2:8883:3759","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8602:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3217:1416":{"id":"2:3217:1416","crate_id":2,"name":"try_from","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47622:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"kind":"resolved_path","inner":{"name":"TryFrom","id":"2:3182:227","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3423:3698":{"id":"2:3423:3698","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3425:352"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13428:304":{"id":"2:13428:304","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:16021:3591","str::as_mut_ptr":"1:16010:3582"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3519:130":{"id":"2:3519:130","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3521:376"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3522:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3368:1654":{"id":"2:3368:1654","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3370:266"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2866:3813":{"id":"2:2866:3813","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2868:54657"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2863:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8880:3757":{"id":"2:8880:3757","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8602:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6787:4568":{"id":"1:6787:4568","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6788:7344","1:6789:56758"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10565:2572","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:405:2246":{"id":"0:405:2246","crate_id":0,"name":"weeks","span":{"filename":"src/ext.rs","begin":[76,4],"end":[76,31]},"visibility":"default","docs":"Create a [`Duration`] from the number of weeks.","links":{"`Duration`":"0:1054:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1054:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:13438:4628":{"id":"2:13438:4628","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:16010:3582","str::slice_mut_unchecked":"1:16010:3582","crate::ops::Index":"2:3577:3705"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:10242:2162":{"id":"2:10242:2162","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10243:1533","2:10244:56939","2:10246:4091"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6085:4477":{"id":"5:6085:4477","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13459:4255":{"id":"2:13459:4255","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"self::pattern":"2:13054:3852","`None`":"2:47495:176","prim@char":"1:16004:3577"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13434:55009":{"id":"2:13434:55009","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10934:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:2:2869-0:1245:127":{"id":"b:2:2869-0:1245:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2863:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1245:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["2:2871:2657"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3337:1814":{"id":"2:3337:1814","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3339:181","2:3340:265"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13491:60849":{"id":"2:13491:60849","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47495:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13079:3869","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:417:2224":{"id":"0:417:2224","crate_id":0,"name":"microseconds","span":{"filename":"src/ext.rs","begin":[118,4],"end":[120,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1054:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:381":{"id":"0:381","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[67,0],"end":[88,1]},"visibility":{"restricted":{"parent":"0:308:1688","path":"::error"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10299:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1245:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:382:660"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:400:2228":{"id":"0:400:2228","crate_id":0,"name":"milliseconds","span":{"filename":"src/ext.rs","begin":[66,4],"end":[66,38]},"visibility":"default","docs":"Create a [`Duration`] from the number of milliseconds.","links":{"`Duration`":"0:1054:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1054:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:10309:189":{"id":"2:10309:189","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10310:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:14166:141":{"id":"2:14166:141","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14167:277","2:14168:518","2:14169:280","2:14170:1079"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13419:4217":{"id":"2:13419:4217","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:992":{"id":"0:992","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[326,0],"end":[326,54]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::primitive_date_time::PrimitiveDateTime","name":"PrimitiveDateTime","id":"0:1368:1722","glob":false}},"2:3417:3697":{"id":"2:3417:3697","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3419:181","2:3420:1236"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13064:3867":{"id":"2:13064:3867","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13066:3870","2:13067:60061","2:13068:60062","2:13069:60063","2:13070:60065","2:13071:60064","2:13072:60066"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1310:1950":{"id":"0:1310:1950","crate_id":0,"name":"June","span":{"filename":"src/month.rs","begin":[20,4],"end":[20,12]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13441:55031":{"id":"2:13441:55031","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:16010:3582"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3178:228":{"id":"2:3178:228","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3180:127","2:3181:1417"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13539:54955":{"id":"2:13539:54955","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:426:2633":{"id":"0:426:2633","crate_id":0,"name":"std_microseconds","span":{"filename":"src/ext.rs","begin":[189,4],"end":[189,45]},"visibility":"default","docs":"Create a [`std::time::Duration`] from the number of microseconds.","links":{"`std::time::Duration`":"2:50206:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50206:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:3505:3703":{"id":"2:3505:3703","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3506:545"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3492:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6859:4539":{"id":"1:6859:4539","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6860:56649"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"b:5:6413-0:1245:127":{"id":"b:5:6413-0:1245:127","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10299:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3274:2163","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"ToString","id":"5:6411:223","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1245:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["5:6415:1397"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"2:3216:127":{"id":"2:3216:127","crate_id":2,"name":"Error","span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"2:38808:3919","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"0:429:2639":{"id":"0:429:2639","crate_id":0,"name":"std_minutes","span":{"filename":"src/ext.rs","begin":[195,4],"end":[195,40]},"visibility":"default","docs":"Create a [`std::time::Duration`] from the number of minutes.","links":{"`std::time::Duration`":"2:50206:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50206:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:369":{"id":"0:369","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[22,0],"end":[22,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"component_range::ComponentRange","name":"ComponentRange","id":"0:1185:1689","glob":false}},"2:12501:5340":{"id":"2:12501:5340","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12502:2494","2:12503:60678"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:442":{"id":"0:442","crate_id":0,"name":null,"span":{"filename":"src/ext.rs","begin":[238,0],"end":[278,1]},"visibility":{"restricted":{"parent":"0:385:1701","path":"::ext"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"NumericalStdDuration","id":"0:424:2629","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"primitive","inner":"f64"},"items":["0:443:2631","0:444:2633","0:445:2635","0:446:2637","0:447:2639","0:448:2641","0:449:2643","0:450:2645"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1295:1955":{"id":"0:1295:1955","crate_id":0,"name":"January","span":{"filename":"src/month.rs","begin":[15,4],"end":[15,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:1471:1725":{"id":"0:1471:1725","crate_id":0,"name":"Weekday","span":{"filename":"src/weekday.rs","begin":[15,0],"end":[30,1]},"visibility":"public","docs":"Days of the week.\n\nAs order is dependent on context (Sunday could be either two days after or five days before\nFriday), this type does not implement `PartialOrd` or `Ord`.","links":{},"attrs":[],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:1472:2026","0:1474:2020","0:1476:2021","0:1478:2022","0:1480:2023","0:1482:2024","0:1484:2025"],"impls":[]}},"0:446:2637":{"id":"0:446:2637","crate_id":0,"name":"std_seconds","span":{"filename":"src/ext.rs","begin":[254,4],"end":[257,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50206:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1322:1946":{"id":"0:1322:1946","crate_id":0,"name":"October","span":{"filename":"src/month.rs","begin":[24,4],"end":[24,16]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"2:13500:60851":{"id":"2:13500:60851","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"`DoubleEndedIterator`":"2:8448:120","self::pattern":"2:13054:3852","str::rmatch_indices":"1:16010:3582","prim@char":"1:16004:3577"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49612:3892","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:308:1688":{"id":"0:308:1688","crate_id":0,"name":"error","span":{"filename":"src/error/mod.rs","begin":[1,0],"end":[112,1]},"visibility":"public","docs":"Various error types returned by methods in the time crate.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:369","0:372","0:375","0:378","0:1245:127"],"is_stripped":false}},"0:1232:2521":{"id":"0:1232:2521","crate_id":0,"name":"InvalidVariant","span":{"filename":"src/error/invalid_variant.rs","begin":[8,0],"end":[8,26]},"visibility":"public","docs":"An error type indicating that a [`FromStr`](core::str::FromStr) call failed because the value\nwas not a valid variant.","links":{"core::str::FromStr":"2:12993:2699"},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"unit","generics":{"params":[],"where_predicates":[]},"fields_stripped":false,"fields":[],"impls":[]}},"2:3389:3695":{"id":"2:3389:3695","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3390:181","2:3391:952"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4723:2162":{"id":"1:4723:2162","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4724:2181","1:4725:58789","1:4727:58790","1:4728:5620","1:4729:58791","1:4730:58792","1:4731:4091","1:4740:4245"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:413:1943":{"id":"0:413:1943","crate_id":0,"name":"days","span":{"filename":"src/ext.rs","begin":[104,4],"end":[106,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1054:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1258":{"id":"0:1258","crate_id":0,"name":null,"span":{"filename":"src/error/mod.rs","begin":[46,9],"end":[46,14]},"visibility":{"restricted":{"parent":"0:308:1688","path":"::error"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[allow(missing_copy_implementations, variant_size_differences)]","#[allow(clippy :: missing_docs_in_private_items)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10292:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"for":{"kind":"resolved_path","inner":{"name":"Error","id":"0:1245:127","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"items":["0:1259:660"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13427:60843":{"id":"2:13427:60843","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13445:33457":{"id":"2:13445:33457","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:16010:3582"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49736:3882","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:403:2239":{"id":"0:403:2239","crate_id":0,"name":"hours","span":{"filename":"src/ext.rs","begin":[72,4],"end":[72,31]},"visibility":"default","docs":"Create a [`Duration`] from the number of hours.","links":{"`Duration`":"0:1054:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Duration","id":"0:1054:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:13482:55043":{"id":"2:13482:55043","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:16004:3577","str::rsplitn":"1:16010:3582","self::pattern":"2:13054:3852"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49566:3889","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:561:1708":{"id":"0:561:1708","crate_id":0,"name":"offset_date_time","span":{"filename":"src/offset_date_time.rs","begin":[1,0],"end":[1329,1]},"visibility":"crate","docs":"The [`OffsetDateTime`] struct and its associated `impl`s.","links":{"`OffsetDateTime`":"0:1345:1721"},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1345:1721"],"is_stripped":true}},"2:3175:135":{"id":"2:3175:135","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3177:681"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23470:17621":{"id":"2:23470:17621","crate_id":2,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23471:59585","2:23472:59586","2:23473:59587"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialOrd","id":"2:23465:5005","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13529:60861":{"id":"2:13529:60861","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:16004:3577","self::pattern":"2:13054:3852"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13064:3867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6557:4574":{"id":"1:6557:4574","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6558:57436","1:6559:57437"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:945:1682":{"id":"0:945:1682","crate_id":0,"name":"days_in_year","span":{"filename":"src/util.rs","begin":[58,0],"end":[60,1]},"visibility":"public","docs":"Get the number of calendar days in a given year.\n\nThe returned value will always be either 365 or 366.\n\n```rust\n# use time::util::days_in_year;\nassert_eq!(days_in_year(1900), 365);\nassert_eq!(days_in_year(2000), 366);\nassert_eq!(days_in_year(2004), 366);\nassert_eq!(days_in_year(2005), 365);\nassert_eq!(days_in_year(2100), 365);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["year",{"kind":"primitive","inner":"i32"}]],"output":{"kind":"primitive","inner":"u16"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"}}},"0:1316:1948":{"id":"0:1316:1948","crate_id":0,"name":"August","span":{"filename":"src/month.rs","begin":[22,4],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain"}},"0:1185:1689":{"id":"0:1185:1689","crate_id":0,"name":"ComponentRange","span":{"filename":"src/error/component_range.rs","begin":[11,0],"end":[23,1]},"visibility":"public","docs":"An error type indicating that a component provided to a method was out of range, causing a\nfailure.","links":{},"attrs":[],"deprecation":null,"kind":"struct","inner":{"struct_type":"plain","generics":{"params":[],"where_predicates":[]},"fields_stripped":true,"fields":[],"impls":[]}},"2:22877:5004":{"id":"2:22877:5004","crate_id":2,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22878:5002","2:22879:1247","2:22880:1272"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:1294:1720":{"id":"0:1294:1720","crate_id":0,"name":"Month","span":{"filename":"src/month.rs","begin":[14,0],"end":[27,1]},"visibility":"public","docs":"Months of the year.","links":{},"attrs":["#[allow(clippy :: missing_docs_in_private_items)]","#[repr(u8)]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:1295:1955","0:1298:1954","0:1301:1953","0:1304:1952","0:1307:1951","0:1310:1950","0:1313:1949","0:1316:1948","0:1319:1947","0:1322:1946","0:1325:1945","0:1328:1944"],"impls":[]}},"0:428:2637":{"id":"0:428:2637","crate_id":0,"name":"std_seconds","span":{"filename":"src/ext.rs","begin":[193,4],"end":[193,40]},"visibility":"default","docs":"Create a [`std::time::Duration`] from the number of seconds.","links":{"`std::time::Duration`":"2:50206:121"},"attrs":[],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"StdDuration","id":"2:50206:121","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"2:3372:1657":{"id":"2:3372:1657","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3374:1356"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}}},"paths":{"2:3389:3695":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"0:0:1715":{"crate_id":0,"path":["time"],"kind":"module"},"2:4066:4290":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"17:12982:7831":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:6682:5757":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:47926:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:47682:4221":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:10952:4720":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:3411:3696":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:13221:7946":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:571:6457":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"21:0:1728":{"crate_id":21,"path":["num_threads"],"kind":"module"},"1:11297:8843":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"17:9245:6074":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:9259:4165":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:14:2181":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:47691:178":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:3372:1657":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:11915:7605":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:11696:7566":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:10677:4651":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:8363:2197":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:9467:9495":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:24601:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"17:13172:7932":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:15216:4624":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:2968:6004":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:12537:7728":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:51769:5067":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:49684:3891":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:23770:2572":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:48795:3925":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:5475:7144":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:11457:7223":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:49842:4908":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:1428:4276":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:5789:4557":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:5735:4553":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:55967:5032":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"6:6934:7363":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:11150:3881":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:23871:5260":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:2314:6109":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:11186:7532":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:4397:4800":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:9139:4157":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:9729:62125":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:24567:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:47596:4162":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:3275:4202":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"16:6768:6042":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:4000:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"16:5580:5983":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"16:2773:6027":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:49612:3892":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"5:8313:5284":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:157:40800":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"16:6126:5811":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:15331:4521":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:50439:4289":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:13394:7987":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:13240:7947":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:13817:60183":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:672:41134":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"20:0:798":{"crate_id":20,"path":["libc"],"kind":"module"},"1:6863:4542":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:4256:6843":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:3933:6679":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:6699:7238":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:24185:40151":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:0:3561":{"crate_id":17,"path":["object"],"kind":"module"},"1:8193:6352":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"1:13786:4700":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"5:8106:5360":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:12480:7720":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:10912:9404":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:49779:3897":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:10950:9410":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:11159:7531":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:5111:3946":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"5:8203:4221":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"6:1634:6558":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:24222:3847":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:10307:3934":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"12:162:5651":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:12385:7703":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:5039:5170":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:11402:4513":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:6150:7267":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:12142:7650":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:13348:7977":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"5:1644:4638":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"5:8298:5434":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:47545:4276":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:11250:4519":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"2:8413:3762":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:10071:6179":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:10543:7520":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:24013:8597":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"2:8107:3744":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:13799:8114":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:10565:2572":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:49438:3879":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"5:5833:5354":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:9979:5208":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:47614:188":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:3746:3713":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:5538:7157":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:11254:6092":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"16:7295:5761":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:11482:7544":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:11767:7580":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:1551:6506":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:3274:2163":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"6:3877:6641":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:7286:9462":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:47495:176":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"16:7205:5837":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:4474:6940":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:10242:2162":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"18:668:6206":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:12182:7657":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:12568:7733":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:6697:7236":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:24106:5148":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"6:5402:7117":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:50174:3859":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"12:1256:4650":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:2974:184":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"proc_derive"},"2:51901:8737":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:48811:3924":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:9861:6370":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"2:48258:3932":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:3648:4483":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:3431:3700":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"6:5544:7158":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:13477:8008":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"16:5996:5809":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:3522:7394":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"5:8160:4221":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"1:4732:56971":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:3323:4775":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"12:933:4642":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:10452:6373":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:13782:150":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"12:940:4643":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"5:1472:4648":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:2062:4461":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:9763:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:25243:3841":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:13963:8156":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"18:783:7378":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"16:5433:5789":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:783:6370":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"1:15072:8879":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:1190:12433":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"2:11356:5223":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:9600:62123":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"17:10279:6116":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:5237:7023":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"12:1703:5662":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:9799:9377":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:49480:3884":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:49042:5345":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"5:8368:216":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:1524:4645":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:46659:8707":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"5:8121:5442":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"16:6072:5762":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:9264:7465":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"16:2733:2164":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:11962:7619":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:8132:4759":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"17:13282:7961":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:8803:162":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:9551:6091":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:50186:3862":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:2177:4585":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:5271:7047":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"5:6652:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:46413:3895":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:9769:62121":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:32159:3835":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:14000:8163":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"16:5330:7466":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:3376:1660":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:5034:5169":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"16:7378:5748":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:24669:3845":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:10477:6163":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"16:5029:8208":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:37651:3732":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:11616:7557":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:22934:4529":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:13961:4692":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:49959:4917":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"16:3241:6010":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:12242:4706":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"12:1881:145":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"5:7212:4582":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:23128:2572":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:49584:3888":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:9768:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:10656:7484":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:15045:54681":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:13073:3870":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:7441:185":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:10646:12429":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:10200:9386":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:16011:3583":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"5:4306:4276":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"9:749:5518":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"2:13893:9447":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:16026:3596":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"6:5146:6971":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:681:7538":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:1669:6587":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:12712:7760":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:24635:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"6:4440:6925":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:48561:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"18:821:6194":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:3581:3706":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"18:867:6198":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:49289:5231":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:3364:2200":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:9943:62127":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"12:399:5653":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"5:7642:5391":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"6:4296:6856":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:51147:5072":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"16:5736:5801":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:47842:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:10106:6174":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:11555:7551":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:3734:137":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"14:250:8443":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:294:9368":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"9:996:5582":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:12525:3872":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:6790:4533":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:2945:6026":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"12:2052:4584":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"5:1457:4649":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:2769:579":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:11640:7561":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:13272:7960":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:10366:7538":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:10957:4721":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:15130:4702":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:8925:4863":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"9:1056:5576":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:13942:8153":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:5971:7190":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"6:4321:6869":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:10140:6118":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:12408:7712":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"0:1249:1689":{"crate_id":0,"path":["time","error","Error","ComponentRange"],"kind":"variant"},"2:51180:5105":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:6911:7357":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:5930:4884":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:5290:7049":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:10592:4757":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:13497:8015":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:5975:5808":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:12061:8865":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"5:3488:4583":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"6:4110:6772":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:10577:54819":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"16:5456:5790":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:11425:5225":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"6:5244:7027":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"16:5488:5792":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:49770:3896":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:3197:4772":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:4032:4723":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:46771:3771":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:16021:3591":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:1459:4638":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:1488:4639":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"14:11:9431":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:11015:9415":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:46761:3787":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:15053:2712":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:46066:3946":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"5:3970:6321":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:48850:8722":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:47968:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"9:41:5566":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"1:2188:4587":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:894:4737":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"5:1618:4221":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"16:7392:5749":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:7843:5845":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:545:6437":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"5:7111:6335":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"2:47758:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:1626:6553":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:9332:6160":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"5:8463:5386":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:11340:8849":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"17:12521:7726":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:48583:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"2:47800:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:3104:3920":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"16:4477:8192":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"14:189:9431":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"5:432:3965":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:5741:4554":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:15498:5678":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:13054:3852":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"6:1606:6539":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:4740:5013":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:4048:6740":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:13506:8016":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"16:7971:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:1311:6180":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:1497:4641":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:50451:4288":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"17:9759:9376":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:15975:12434":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:3396:3692":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:10117:6175":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"18:0:3562":{"crate_id":18,"path":["memchr"],"kind":"module"},"6:6013:7214":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"9:722:5517":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"6:3972:6705":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:9528:3878":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:6226:7319":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"16:6577:5824":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:46691:3791":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:3993:6715":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:10844:6118":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:56390:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:46782:3788":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:1157:12432":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:53556:8779":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:38808:3919":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:22604:60672":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:13370:7982":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:10301:3931":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"9:1020:5583":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"16:6391:5819":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:9210:47992":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:14239:4495":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"6:1531:6498":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:46792:3789":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:5008:4511":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"5:5875:6330":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"17:12275:7669":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:51869:8736":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"16:3549:8181":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:12040:7631":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:11156:4513":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"2:22853:2572":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"17:11809:7595":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:900:4738":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:6021:6000":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:5346:5742":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"16:7185:5835":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"16:6176:5813":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:4516:6956":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"12:1682:5661":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:50182:3861":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:8929:47986":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:4008:9373":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:13488:8012":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:28054:3842":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:14643:54675":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:3182:227":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:3342:1815":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:11304:47995":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"18:767:7388":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"5:4599:6324":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"16:7073:5831":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:56325:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:11519:7549":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:13054:7889":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:161:40801":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:12247:4855":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:8690:4844":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"18:740:9366":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:4684:4471":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:2292:4987":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:48498:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:16014:3584":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:12610:7741":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:46453:5117":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:48052:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:12053:4695":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"9:27:5565":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"5:1635:4637":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:49251:5227":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"5:6954:5348":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:13258:7955":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:10635:7482":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:2187:578":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:8639:4841":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:14130:201":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"17:10331:6118":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:14103:6376":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"6:601:6474":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:10304:6107":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:13163:7931":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:46031:4292":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:3380:1663":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:1149:9449":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:2362:600":{"crate_id":1,"path":["std","env"],"kind":"module"},"5:6411:223":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"18:611:6202":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:7927:4758":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"6:88:40734":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:11668:4275":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"5:1441:4647":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"16:4852:8203":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:6366:5667":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:11354:4816":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"5:6475:4582":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:11378:6144":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:3896:6651":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:13978:8157":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:2397:9457":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"16:2843:6001":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:11082:6096":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:13084:3868":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:6077:7242":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:539:6434":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:7255:9462":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:4471:4495":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:13386:7985":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:13858:187":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:4300:4499":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"1:4510:4491":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:2962:177":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"proc_derive"},"17:12262:7668":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:10313:3936":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"5:3341:5425":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"6:1740:6625":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"5:4215:4582":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:10587:4742":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:32348:59892":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"5:8197:4221":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:12004:4691":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:50344:201":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:50421:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:9260:4164":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"13:232:8488":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:2159:4221":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:12405:9459":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:9476:7471":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:49512:3887":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:3981:6710":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:3175:135":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:49716:3881":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"5:4515:5455":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"13:120:46305":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:3559:3714":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:9060:4849":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:51124:5084":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:7629:4687":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:13306:7963":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:607:9371":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"0:1252:2518":{"crate_id":0,"path":["time","error","Error","DifferentVariant"],"kind":"variant"},"2:5584:12435":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:11970:7621":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:5981:4890":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:11575:4669":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"16:4506:8193":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:13453:8001":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:11453:4567":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"12:2419:4590":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"5:8330:5435":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:46603:3766":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:49300:5232":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:7932:54857":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"1:15032:4694":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:13780:8109":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:7649:4688":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:10295:109":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"14:0:3558":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:4666:4469":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:4728:5012":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:8602:157":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:9343:4528":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:634:6492":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"5:2218:5428":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"12:869:4582":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:32400:59894":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"2:49745:3898":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:13582:8038":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"9:776:5563":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"2:24121:8607":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:16007:3579":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:3169:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"6:4509:6953":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:1438:4221":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:56403:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:49894:4915":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:6269:5817":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:46052:5018":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"1:11130:3788":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:10377:9474":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:49462:3886":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"16:3488:6014":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:13279:9446":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"16:3287:6012":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:2863:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:13532:8026":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"5:3396:4587":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:12155:7653":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"6:4346:6881":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:6136:5783":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"16:4304:8187":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:11199:7534":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:13192:7938":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:10887:7517":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:10435:9389":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"6:6117:7251":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:4350:8188":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:53503:8776":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:3577:3705":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"16:5790:5804":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"5:3048:60830":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"5:8250:4590":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:23139:5002":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:50354:8727":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:22877:5004":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"12:2404:62115":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"6:6905:7356":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"5:8130:4582":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"18:802:6192":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:24533:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:50198:3865":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:6054:7241":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:6949:6046":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"16:4762:8200":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:9296:7467":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:53408:8769":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:57699:8788":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"1:2433:9458":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"14:56:7544":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"15:230:5669":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:4148:6789":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:4116:6775":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:2934:180":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:48832:4669":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:6859:4539":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"9:686:5514":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"5:3772:4276":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"16:3195:6008":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"0:942:1820":{"crate_id":0,"path":["time","util","days_in_year_month"],"kind":"function"},"1:10882:4486":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:9766:6368":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"17:9689:62122":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:10536:142":{"crate_id":2,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"2:3717:3709":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:4:979":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:24499:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:24035:5152":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:7858:5053":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:12327:7677":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:9440:7470":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:46111:5122":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:10814:6142":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:1132:4293":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:4965:3945":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"6:6853:7353":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"18:695:6207":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:9280:7466":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:46551:6342":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"6:3960:6702":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:4752:102":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:13963:59918":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"2:3281:220":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:14236:4493":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"16:6491:5821":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:46650:3778":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:13098:7921":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:9574:6097":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:6424:5820":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"16:7467:5745":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:12917:7780":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:14633:4472":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:56377:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:49986:4918":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:13733:8091":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"5:3839:6321":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"5:7379:4221":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:48522:133":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"2:53465:8774":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:5207:7013":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"14:216:46339":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:13819:8117":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"16:6014:5810":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:13760:8103":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:37627:178":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"16:7236:5840":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:9162:6093":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:5753:5802":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"6:4386:6903":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:22602:60676":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:11397:3889":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"16:7738:5843":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:13568:9458":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:13465:8007":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:6199:4833":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"18:838:3870":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:2155:4275":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:47884:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:12742:4769":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:46720:3783":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:4012:6728":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:13284:40392":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"2:3310:3964":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:12783:7771":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:4080:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:12124:4604":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:12095:7642":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:24237:3844":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"16:7226:5839":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"6:4434:6923":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"16:5522:5794":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:10705:5482":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"17:10081:6116":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:12083:8866":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"1:2456:9459":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"6:4538:6967":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:11030:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"19:117:7373":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"5:0:277":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:8474:202":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:5185:3950":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:46434:5327":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:10309:189":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:14079:5251":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:13574:8037":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:16024:3594":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:1642:4649":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:4088:6759":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"5:3894:5467":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:48619:3930":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"0:1245:127":{"crate_id":0,"path":["time","error","Error"],"kind":"enum"},"0:944:1821":{"crate_id":0,"path":["time","util","is_leap_year"],"kind":"function"},"16:7477:5766":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:3561:4482":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:3812:3717":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:3200:4470":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:22536:3732":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"5:792:108":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:51925:8738":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"16:6208:5814":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"6:580:6463":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:9971:62118":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:10710:3774":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"1:9639:54852":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"1:4512:4492":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"12:559:143":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:46312:5113":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"16:4386:8189":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:8380:4759":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"17:12168:7488":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:51595:5086":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:4127:6780":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"16:5295:46410":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"5:1597:4275":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"6:4160:6798":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:13130:4911":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"5:3039:60833":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:13554:8031":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:46581:3765":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:3194:4770":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"11:0:3556":{"crate_id":11,"path":["adler"],"kind":"module"},"1:11685:4675":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:4885:5167":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:10236:6079":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:47528:2494":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:12795:7778":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:1472:4582":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:14958:6379":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:12302:3816":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:12467:7718":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:10305:3933":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"16:7250:5841":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:10447:9445":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"16:4823:8202":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:2866:6002":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:11231:6094":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:11283:5222":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:1651:4650":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"6:4402:6909":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"5:7824:6335":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:10826:4565":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:11100:6098":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:5285:7048":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:7420:5765":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"6:6240:7328":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"16:6101:5739":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"6:4410:6913":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"12:114:62110":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"12:379:5654":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"5:1653:4639":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"16:6219:5815":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:3729:224":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"18:755:62130":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:2484:48077":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"5:3329:4275":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:10684:13436":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"18:745:62129":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:56364:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:8164:60010":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"6:5416:7128":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:2816:6020":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"9:469:9608":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:50178:3860":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:45901:195":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:46989:3750":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"16:6554:5823":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:7792:4696":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:51211:5093":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:8404:151":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:10403:6114":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:5785:4556":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:4157:6151":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:12632:7752":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"12:764:4276":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:7975:6352":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"2:2926:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"12:2036:4221":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:52325:5075":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:11193:4515":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"18:775:7378":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"0:945:1682":{"crate_id":0,"path":["time","util","days_in_year"],"kind":"function"},"6:6181:7293":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"18:721:7380":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:7756:3773":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:1662:6583":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:12501:5340":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:2183:4586":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:12010:7628":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:3172:6007":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"12:880:4583":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"17:13564:8034":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"18:637:7378":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"6:1588:6529":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:0:1331":{"crate_id":1,"path":["std"],"kind":"module"},"2:3247:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:10661:12431":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:53192:5100":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"18:897:6200":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:6247:7331":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:1680:6595":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:21:672":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:3406:3694":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:22583:60677":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:4362:6890":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:12234:7663":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"6:5308:7061":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"12:2392:8493":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:3351:4786":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:53419:8770":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:2219:1050":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:49200:5224":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:1518:4644":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:2912:6003":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:10840:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:9659:62124":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"5:1011:4275":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:16022:3592":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:12946:7800":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:4378:4221":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:783:222":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:12076:59019":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"17:13356:7980":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:0:488":{"crate_id":2,"path":["core"],"kind":"module"},"5:7780:234":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:22581:60674":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:13587:54854":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:16027:3597":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:14821:4695":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:22751:5001":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"18:152:54280":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:2793:4287":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"5:1685:194":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:47018:3756":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"16:6807:5829":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"16:4922:8205":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:10866:4793":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:49911:4916":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:52438:5064":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"16:7342:5777":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:12195:7658":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"16:2754:5994":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"18:730:62128":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:13810:8115":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:10934:214":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:13659:4636":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:10809:4564":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:4473:4496":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:565:6454":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:6032:5734":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"16:7870:5750":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:0:3560":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:52939:5076":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:9809:62120":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:12582:7735":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:24215:8620":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:48010:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:16005:3578":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:12247:7665":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:53050:5096":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:5165:3948":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"16:3064:6063":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:5201:7010":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"0:946:1822":{"crate_id":0,"path":["time","util","weeks_in_year"],"kind":"function"},"6:4067:6748":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:12373:7701":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:6662:7341":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:52246:5087":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:11434:7542":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:9088:47990":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:8908:3748":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:5101:5175":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:47666:4275":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:1041:4577":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:23089:17602":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"5:1091:6321":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"16:6718:6038":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"5:6764:4461":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:1694:6606":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"6:1704:6612":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:46641:3777":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:46590:3774":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:14601:4771":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"17:10975:9412":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:10599:9398":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:11120:3774":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"1:4748:4475":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:5719:4552":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:607:6477":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:24068:8602":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:6685:4554":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:13598:8041":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:2269:4983":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:7795:4698":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:47622:205":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"8:0:3553":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"5:5536:5406":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:23664:4530":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:13685:8090":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:49666:3890":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"16:5407:5787":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:47007:3754":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:50071:9002":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"1:14317:4744":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:13079:3869":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:13939:54858":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"5:5415:4461":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:2171:4584":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"16:7894:5780":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:5430:7131":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:4464:6939":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"18:645:6204":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:8887:3760":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:46751:3786":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:49754:3894":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:8448:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:7615:4686":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:4723:2162":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"16:5707:5799":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"5:3748:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:13767:138":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:14242:4491":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"17:10673:48177":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"5:8280:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:49448:3878":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:51696:5081":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:8400:136":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:6959:4538":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:2921:183":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:10962:9411":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:11924:5239":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:3492:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:13609:8045":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:11070:3744":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:49361:5236":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:13429:7993":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:45945:197":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:50058:4922":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:6557:4574":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:49726:3883":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:4078:205":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"2:46024:3710":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:50190:3863":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:4416:6914":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:12065:54679":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"1:16010:3582":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:46980:3748":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:11163:3886":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:45784:3718":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"16:5632:5797":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:4270:4835":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:13547:8030":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:12227:4848":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:7732:4692":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"6:527:6429":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"5:8446:4583":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"12:1162:5647":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"16:6591:5825":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:10292:109":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:3277:218":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:10566:4734":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:3743:6139":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:4607:3752":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"6:4425:6917":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:1236:9372":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"16:3218:6009":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:46673:3780":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:4055:6743":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"5:3044:60831":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:48549:107":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"2:14166:141":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:4135:6785":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:11665:7564":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:5156:5176":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:50228:3726":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"2:2397:4716":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:1075:4578":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"12:466:62114":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:12993:2699":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:2888:104":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"12:856:4638":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"16:4995:8207":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:11277:7535":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:4394:4799":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:10041:9382":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"5:4699:6326":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:24093:3843":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"5:1486:4650":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:50048:4921":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:6605:5758":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:1501:4642":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:14936:6377":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"6:1621:6551":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"16:6238:5746":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:51673:5078":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:3435:3701":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:12756:7767":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:11539:7550":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"5:4628:235":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"16:6999:5830":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"18:661:6205":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:10303:3932":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:9919:660":{"crate_id":2,"path":["core","fmt"],"kind":"module"},"2:46802:3790":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:4400:4801":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"12:1147:4649":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:4208:6821":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:12795:3902":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"16:5421:5788":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:10962:4487":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:11674:4674":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:14804:9466":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:23676:60314":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:6569:6035":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"18:858:6197":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"5:2262:5476":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:13318:7966":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:10516:6166":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:10052:9383":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:10353:6110":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"16:5231:8209":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:9005:47987":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"5:8263:4654":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:7677:4690":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:9634:6367":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"6:4061:6745":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:12442:7715":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:11726:7570":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:46328:5115":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"5:1195:62093":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"5:923:5440":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"9:603:9618":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"14:244:8441":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:11337:6161":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:11434:4836":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:51378:5062":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"5:1843:6321":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:48842:8721":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:9896:62119":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:32340:5290":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"5:1607:4276":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:12741:7763":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"6:4098:6766":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:9771:6369":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"6:5979:7195":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:14588:8877":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"6:4392:6906":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:6511:3768":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:10801:9403":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:13912:8145":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:49326:5233":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"16:4448:8191":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:10061:9384":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:7333:5763":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:12685:7756":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:16017:3587":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"16:7928:5018":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:618:6482":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:23082:2572":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"16:3018:6005":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:51253:8730":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:2283:4986":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:51030:8728":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:6111:7249":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:5797:4559":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"16:7303:5842":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"16:7514:5764":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:3648:3708":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:13884:8136":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:11143:3886":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:3297:4204":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"1:1302:143":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"6:1544:6504":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:4641:8196":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:10816:4771":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:13119:7926":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:11847:7603":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:53255:5065":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:49339:5234":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:10179:7479":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"0:308:1688":{"crate_id":0,"path":["time","error"],"kind":"module"},"16:6691:5827":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:542:5717":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:46702:3782":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:3736:4485":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:49269:5229":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:3907:6659":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:3091:6064":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:8289:4759":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"12:895:5639":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"2:10580:3923":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"15:269:5674":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:2967:184":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:10299:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:13590:8040":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:5208:3949":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"12:2072:4587":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"17:11714:7567":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:2751:4286":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:22940:4531":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:4890:8204":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:6787:4568":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:6319:4834":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:7195:5836":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:8027:4759":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"1:6459:4536":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:3337:1814":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:8880:3757":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"5:3300:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:15235:4630":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:9718:4808":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"9:1075:5584":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:5653:4572":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:11420:4827":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"16:4671:8197":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:13205:7943":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"5:994:5441":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:24737:165":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:14808:4573":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"6:5183:6997":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"5:1663:4640":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:6031:7223":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:10530:142":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"5:7849:6340":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:11957:5240":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"6:6685:7352":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"7:85:45665":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"16:5595:5796":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"16:5314:7465":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"16:3604:7398":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:6695:7234":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:51358:8731":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:6899:7355":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:5968:4889":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:10540:146":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:10211:9387":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:49260:5228":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:2925:183":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"proc_derive"},"16:3264:6011":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"12:2032:4275":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:3417:3697":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:12221:7661":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:48635:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"1:16016:3586":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:5858:4881":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"2:47674:4276":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:46353:5329":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:3440:3702":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"5:7257:6321":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:6437:4533":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:1939:4583":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"5:3038:3815":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:5423:7130":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"16:4535:8194":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:9649:9374":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:12118:7648":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:4741:4455":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:15122:8880":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:46631:3776":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:4454:6933":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:10623:9400":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:8883:3759":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:6937:4543":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:6166:5812":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:1912:42108":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"6:4028:6733":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:4218:6822":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:3341:4781":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:13746:8097":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:6634:59539":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"2:3287:3951":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:11993:7625":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"12:750:4275":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:12282:2712":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"16:4614:8195":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:51642:5074":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:8473:3761":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:2458:9460":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"16:7884:5751":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:10252:134":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"5:3951:4583":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:3358:3690":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"12:2253:4647":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:38871:4205":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:50407:5250":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:12744:6375":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"17:10988:9413":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:10448:6081":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:13422:4829":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:9381:3867":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:16004:3577":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:23137:5061":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:46343:5328":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:46284:3896":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:10001:48039":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:4038:6737":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:10926:9408":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"16:7453:5744":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:12262:1719":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"12:2412:8496":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:9133:47991":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:53399:8768":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:51234:5097":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"16:3506:6013":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:8481:4605":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:11932:7611":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"5:6257:5390":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:13933:8151":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:12552:7732":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"16:4734:8199":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:13620:8046":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:14626:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:12772:3905":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:22930:2572":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"5:4643:6326":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:11615:4671":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:49530:3885":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:547:5985":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"6:6922:7361":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:11406:7540":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"12:1666:5660":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"12:0:3557":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"2:52085:5095":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:3423:3698":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:2194:8590":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:3192:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"6:1537:6501":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"18:850:6196":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"6:1733:4828":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:12051:7632":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"0:397:2599":{"crate_id":0,"path":["time","ext","NumericalDuration"],"kind":"trait"},"16:7264:5759":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"18:705:7378":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:5995:7207":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:12598:7739":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:11137:3878":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"16:2794:5729":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:2594:9461":{"crate_id":1,"path":["std","error","from","StringError"],"kind":"struct"},"1:5647:4570":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:12773:9467":{"crate_id":1,"path":["std","sys","unix","fs","TimespecDebugAdapter"],"kind":"struct"},"2:12735:3903":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:3172:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"16:5384:5786":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:10149:9378":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"6:5375:7104":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:5960:4887":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:6082:4824":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:13064:3867":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"6:6951:7368":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:3682:4478":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:46503:5285":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:51051:8729":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:11628:7558":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:3279:106":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:13923:4690":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:46473:5283":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"18:621:7377":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:1152:9451":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"6:5436:7134":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"12:1103:4647":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"6:5298:7054":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"6:4081:6756":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:11524:4659":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:12158:4608":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:6152:5743":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:50202:3866":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:9933:9379":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:11428:4816":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:10701:9466":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:7663:4689":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:3758:4971":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"5:6688:5407":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"6:0:798":{"crate_id":6,"path":["libc"],"kind":"module"},"12:979:4646":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:45968:199":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:50037:4920":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"16:3118:6017":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:11458:7543":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:13986:8160":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:11268:4633":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"1:15201:4623":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:48279:3934":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:12431:7713":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:11180:4514":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"17:13842:8130":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:5175:6995":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:11317:54677":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"6:5444:7136":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:15986:54678":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:1721:6619":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:12023:4693":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"16:7174:5834":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:46427:5326":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:11358:6145":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:11414:4888":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:5605:4972":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:11318:3884":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:6202:7308":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:51316:5073":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:14565:8869":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"10:0:3555":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:2991:6015":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"9:900:8550":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"5:2200:6323":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:10558:9393":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:4446:6928":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:12252:4714":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:10128:6176":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:15509:5678":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:8488:4606":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:32696:5056":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:51445:5106":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"0:385:1701":{"crate_id":0,"path":["time","ext"],"kind":"module"},"2:11439:5226":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:3339:4780":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:13788:8110":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"16:6644:5826":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:22993:5002":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:3522:131":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:51076:5104":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:12771:7768":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"6:4242:6832":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"6:6940:7364":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:51099:5092":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:22564:60310":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:9974:5207":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:56351:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"0:931:1681":{"crate_id":0,"path":["time","util"],"kind":"module"},"2:8367:3763":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:47562:4161":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:13898:8138":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"6:3987:6712":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:6126:7255":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:2395:9456":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"12:2066:4586":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:12811:3904":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:11360:4817":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:14069:4999":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:6438:3779":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"12:787:4640":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"16:3365:5993":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"5:2553:5479":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"7:38:45658":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:46059:5019":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"6:1600:6537":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:10502:7480":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"4:0:3552":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:9627:54856":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"2:52006:5107":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:32500:59895":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"2:46998:3752":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:49865:4909":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:4493:6948":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:299:9369":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:3714:8182":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"9:809:4669":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:9368:7468":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:5672:5798":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"6:5485:7146":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"1:1493:4640":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"5:8362:8588":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"1:12187:4610":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"12:2059:4585":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:51821:8735":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:10241:205":{"crate_id":2,"path":["core","fmt","Result"],"kind":"typedef"},"5:1674:4641":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:15353:4814":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:10938:9409":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:3352:2198":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:16002:3575":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:46299:5112":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:10584:6150":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:53380:5068":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:4287:6851":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:9849:62126":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"6:6024:7219":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:3800:8184":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:53518:8777":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"1:16029:3599":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:23774:5003":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:13296:7962":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:12132:4221":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:22804:5010":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:1530:4646":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:10427:6371":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"5:7453:6321":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:52403:5082":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:5500:4822":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:46612:3767":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:9592:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"6:4142:6787":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:6780:5828":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"5:3370:4584":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"9:692:5516":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"5:6672:5406":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"12:777:4221":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:49352:5235":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"11:54:5637":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"17:11572:7552":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"12:952:4644":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:4790:8201":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:3269:211":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:12208:7660":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"18:713:3732":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"12:183:5655":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"5:374:5433":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:53129:5080":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:24839:164":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:7117:4152":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:49880:4912":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:9961:9380":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:6893:7354":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:5226:7015":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:9174:9463":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"1:14550:4569":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:4670:4461":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"6:5363:7099":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:47716:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"9:0:3554":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:10925:2572":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:56338:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:10420:6103":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:49566:3889":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:6731:6039":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:13865:8131":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"6:5579:7183":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:12725:7761":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:1619:4647":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"3:321:205":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"3:0:430":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:22840:4994":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:11208:4517":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"16:7406:5747":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"6:4230:6831":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:13637:8053":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:12287:7670":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:10317:6106":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:13446:8000":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:49432:3880":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:22549:60310":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"12:1183:5648":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:9034:47988":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:3368:1654":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"16:7823:5755":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:11658:4672":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"6:1764:6635":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:6620:6033":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:15019:4693":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:6413:5666":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:12010:181":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:8180:3747":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:4639:4461":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:15483:54821":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:2166:4583":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"2:53302:5083":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:50362:190":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:12307:7676":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:51285:5085":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:11245:5221":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:5505:5793":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"9:963:5581":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:3519:130":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:45922:198":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:52163:5102":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:3658:6350":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"5:3759:4275":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:4005:6724":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:49046:5344":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:4332:6875":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"5:8176:5353":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:8849:6090":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:3384:3691":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"16:7042:6050":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:16020:3590":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:13540:8029":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:15185:4622":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"16:5717:5800":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:15970:9626":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:10253:6070":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:46468:100":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"16:5561:5795":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"6:5213:7014":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"5:5889:6333":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"6:1567:6514":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"18:886:6199":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:48803:8717":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"18:169:54281":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"16:7360:194":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:14034:4691":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:48516:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"2:47605:4278":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:11411:3888":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:50194:3864":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:47537:4275":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"16:7119:5735":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"12:1121:4648":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:5328:7077":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:48094:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:4179:6813":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"0:1255:2521":{"crate_id":0,"path":["time","error","Error","InvalidVariant"],"kind":"variant"},"15:0:3559":{"crate_id":15,"path":["addr2line"],"kind":"module"},"16:7024:6049":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:11947:7615":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"6:521:6426":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:8902:47985":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:53439:8772":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:15229:4629":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:48531:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"2:3516:3704":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:3278:217":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:8973:4725":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:12057:6348":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"2:49420:3876":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"12:1784:6319":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"6:612:6479":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"9:927:45762":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:53428:8771":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"16:3772:8183":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:3525:132":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:4921:5168":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"16:7279:6051":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"6:6265:7334":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"5:3040:8584":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:13331:7972":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"16:7571:5740":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:6004:7213":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:3505:3703":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:49279:5230":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:53454:8773":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:5408:5320":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:696:4733":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:3178:228":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"6:6668:7343":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:47553:4221":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"6:5387:7111":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"12:928:4639":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:32299:5279":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:4308:6863":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:2543:6162":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:10529:7481":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"16:3338:5992":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"16:6636:5760":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"5:69:5385":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:7507:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"5:2330:5475":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:3145:6016":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:16008:3580":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"16:5941:189":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"1:11232:4518":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"1:12138:4607":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:12171:4609":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:46397:5324":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"18:791:6191":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:5727:4551":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:4020:6730":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:57678:8787":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"1:16003:3576":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:12203:4611":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:46366:3897":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:3325:4776":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:11738:7571":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"17:10224:9388":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"5:3336:4585":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"5:5837:5356":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:1633:4648":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"5:4443:4275":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:24129:8608":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"5:8146:60804":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:10799:4566":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:9404:7469":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:10407:6104":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:11001:9414":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:4434:4494":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:53533:8778":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:11598:4670":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:46973:3746":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:11077:4498":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"14:47:9431":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:1017:4759":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:12456:7717":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:11479:4540":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:12116:4275":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:4315:6866":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:9065:47989":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"5:3882:4486":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:9719:9375":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:5376:4815":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:9839:6118":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"6:4075:6753":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"5:1694:5471":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:24169:40142":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:45991:3707":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:12846:3899":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:9063:4710":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:8410:5466":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"17:12494:7722":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:16023:3593":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:11365:4818":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:3740:3711":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:6964:7369":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"16:5472:5791":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:11653:7563":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:10377:6108":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"7:0:1481":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:24771:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"18:830:6195":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:51492:5094":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:51721:5063":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:46486:5284":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:5631:779":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:11138:4276":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:49381:5238":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"6:6640:7340":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:4356:6887":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:9733:4809":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:52372:5079":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"19:0:994":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:50023:4919":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:11794:7589":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:12645:7753":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:15391:4815":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:3392:6018":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:5775:4555":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:12735:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:11098:4473":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"16:6744:6040":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"9:157:5533":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"2:5030:3947":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"5:920:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:12659:7754":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:510:9370":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"18:136:54279":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:49405:3877":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:11026:9416":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:48272:3933":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:4783:4998":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:13377:7984":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:7928:3742":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:2162:4582":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"5:5788:6321":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:10874:4484":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"16:5360:5785":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:16019:3589":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:46682:3781":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:16028:3598":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:11328:7768":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:10827:6143":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:7332:186":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"16:6087:5741":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:10266:6073":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:9594:6366":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:53480:8775":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"16:7804:5753":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:1507:4643":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:7670:3764":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"5:5315:200":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:3166:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:51339:5077":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:23465:5005":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"6:6211:7311":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"5:8344:5436":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:52796:5108":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:1526:6496":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:24805:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:13520:8023":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:52589:5088":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"16:6252:5816":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:11086:4472":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"13:0:3551":{"crate_id":13,"path":["std_detect"],"kind":"module"},"0:1246:2477":{"crate_id":0,"path":["time","error","Error","ConversionRange"],"kind":"variant"},"12:1203:5649":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:593:6469":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:49630:3893":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:48136:5288":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:4373:6898":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:6861:4541":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"12:2398:8494":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:6928:7362":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:12699:7759":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:3883:6642":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:13180:7933":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:820:6370":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"12:843:4637":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:3939:8185":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"6:4526:6962":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:53595:8780":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:5564:7172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:13402:7989":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:586:6466":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"9:234:5541":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"1:14609:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:51397:8732":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"5:2310:5495":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"18:678:142":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:11779:7583":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:13772:8106":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:10311:3935":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:12073:7641":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:5395:7116":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"5:4242:6321":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:10458:7431":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"6:5452:7138":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:8954:6148":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:9261:4163":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:14242:4617":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:10028:9381":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:10667:4592":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"2:46730:3784":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:2512:6105":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:11206:3899":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:11604:7554":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:46290:8696":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"5:3375:5426":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"6:4340:6879":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:3427:3699":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"16:6464:5756":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"16:7761:5844":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"12:1238:5650":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"0:1004:205":{"crate_id":0,"path":["time","Result"],"kind":"typedef"},"1:16018:3588":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:4432:4493":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:24873:3846":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"14:231:5364":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:9186:6147":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:8388:4669":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"16:4230:8186":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"12:472:62111":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"12:2045:4583":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"2:3401:3693":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"16:6110:5782":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:2027:145":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:11835:7600":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:46711:3769":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"16:3429:5730":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"16:6518:5822":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:49761:3895":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"5:8115:4221":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:13041:7883":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:15092:1719":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"6:1576:6520":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"5:8379:5361":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:45812:3715":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"12:2040:4582":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:11114:4275":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"16:4955:8206":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:51744:5066":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:2957:177":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:49736:3882":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:11588:7553":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"12:815:4641":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"6:513:6421":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:23470:17621":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"17:10489:6165":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"5:3362:4586":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"5:7620:5390":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"6:5257:7036":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:4198:6814":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:16025:3595":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:10858:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:32334:4726":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:24703:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"16:7216:5838":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"6:3920:6669":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:4485:6946":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:50398:5249":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:46621:3775":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:16009:3581":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:14575:4564":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"16:6964:4161":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:11981:7624":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"16:5855:5806":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"16:4704:8198":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:51523:5098":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:53341:5103":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:11045:47993":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:15474:8884":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:12038:4694":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:46391:3896":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:10095:6173":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:626:6487":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:11147:7530":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"11:46:8499":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"1:8738:4852":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:46420:5325":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"5:8138:5443":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:6976:7371":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"5:8168:194":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"5:2777:5478":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:50241:3727":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"17:12343:7682":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:16015:3585":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:13154:7927":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:11499:7548":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"12:353:8489":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:11506:4153":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:3320:6065":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:10611:9399":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:10468:6164":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"12:971:4645":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"5:1215:5473":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:13062:7891":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:12257:4715":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:3347:2199":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"5:8391:5362":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:15754:6380":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:5373:4814":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:3966:6703":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"16:7786:5754":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:8839:9463":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:10804:4769":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:10571:9396":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:1727:6622":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:1558:6509":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:11750:7572":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"6:4379:6901":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:5273:5995":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:50170:3857":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"16:6357:5818":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:48265:3931":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:2866:3813":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"16:2889:6021":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"18:812:6193":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:10864:7516":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"16:5927:5807":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:533:6432":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:15412:4822":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:12507:7723":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:2508:5025":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:23942:5261":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:8646:4843":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:5766:5803":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:50206:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:5952:4886":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:46739:3785":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:3103:2572":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:9886:9378":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:14952:6378":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"16:7158:5833":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:1712:6613":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:51546:5101":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:1446:4637":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:46561:9448":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:3775:3716":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:13627:8048":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:2572:127":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"1:1415:4275":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:52132:5099":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"5:1560:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"16:7856:5846":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"15:248:5670":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"16:3041:6006":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:2937:179":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"12:2280:4649":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:24147:40150":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"18:651:6201":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:24052:8599":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"0:424:2629":{"crate_id":0,"path":["time","ext","NumericalStdDuration"],"kind":"trait"},"6:4277:6844":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:7549:5752":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:10160:7477":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:4051:4291":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"16:5815:5805":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:11678:7565":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"5:1235:5474":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:4532:6964":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:11822:7599":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:1748:6629":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:24250:3848":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:11409:4885":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"16:4417:8190":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"6:6132:7256":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:11118:47994":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:48820:146":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:46374:5323":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"17:12028:7629":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"14:194:46333":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:12671:7755":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:45876:194":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:49371:5237":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:5960:5990":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:10788:9401":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:10618:4744":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"6:6094:7244":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"12:2269:4648":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:13924:8147":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"16:7146:5832":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:1482:4583":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"12:432:5652":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:6893:3792":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:10575:3922":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:45860:196":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:14570:8871":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"}},"external_crates":{"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"20":{"name":"libc","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"num_threads","html_root_url":null},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":17}